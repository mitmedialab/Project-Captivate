
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d94  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  08015ed8  08015ed8  00025ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017078  08017078  00027078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017080  08017080  00027080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017084  08017084  00027084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000004  08017088  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000138  080171bc  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001d4  08017255  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028480  200001e8  08017266  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20028668  08017266  00038668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00060402  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000aa89  00000000  00000000  00090617  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003950  00000000  00000000  0009b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003488  00000000  00000000  0009e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00024f3d  00000000  00000000  000a1e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000179e4  00000000  00000000  000c6db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000de799  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ebe8  00000000  00000000  000de88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000ed474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08015ebc 	.word	0x08015ebc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08015ebc 	.word	0x08015ebc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 f856 	bl	8005f70 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 f9d1 	bl	8004270 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f005 fa76 	bl	80063dc <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 f9bb 	bl	8004270 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200276ac 	.word	0x200276ac
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f006 fe8b 	bl	8007c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 fb3d 	bl	8007610 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f968 	bl	8004270 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027710 	.word	0x20027710
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f934 	bl	8003260 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200283ec 	.word	0x200283ec

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f013 fb6a 	bl	80146e8 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f012 f863 	bl	80130e8 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00c fc96 	bl	800d954 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00c fdd6 	bl	800dbe4 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00c f942 	bl	800d2cc <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f011 fd1e 	bl	8012a9c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f012 f974 	bl	8013364 <TL_MM_Init>

  TL_Enable();
 800107c:	f012 f82d 	bl	80130da <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027770 	.word	0x20027770
 800108c:	20027788 	.word	0x20027788
 8001090:	08016358 	.word	0x08016358
 8001094:	08001199 	.word	0x08001199
 8001098:	20027774 	.word	0x20027774
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00c fcda 	bl	800da88 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c fd32 	bl	800db44 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027770 	.word	0x20027770

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f003 ff6a 	bl	8005024 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f003 ff64 	bl	8005024 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f003 ff5d 	bl	8005024 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08015ef0 	.word	0x08015ef0
 8001178:	08015f14 	.word	0x08015f14
 800117c:	08015f34 	.word	0x08015f34

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f012 f95e 	bl	8013444 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f012 f988 	bl	801349c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f013 fabc 	bl	801470c <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00c f9ee 	bl	800d588 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f011 fc92 	bl	8012ad4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c f92e 	bl	800d424 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20027774 	.word	0x20027774

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c fe03 	bl	800ddec <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027788 	.word	0x20027788

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00c fd8b 	bl	800dd20 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027788 	.word	0x20027788

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f012 f8db 	bl	80133dc <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f004 fc5c 	bl	8005afc <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000204 	.word	0x20000204

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000204 	.word	0x20000204

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a5c      	ldr	r2, [pc, #368]	; (8001418 <MX_FREERTOS_Init+0x178>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00c fc9b 	bl	800dbe4 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <MX_FREERTOS_Init+0x17c>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <MX_FREERTOS_Init+0x180>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00c fc93 	bl	800dbe4 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <MX_FREERTOS_Init+0x188>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00c fc8b 	bl	800dbe4 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <MX_FREERTOS_Init+0x18c>)
 80012d2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, NULL, &viveTimer_attributes);
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_FREERTOS_Init+0x190>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4856      	ldr	r0, [pc, #344]	; (8001434 <MX_FREERTOS_Init+0x194>)
 80012dc:	f00c fa2c 	bl	800d738 <osTimerNew>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <MX_FREERTOS_Init+0x198>)
 80012e4:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80012e6:	4a55      	ldr	r2, [pc, #340]	; (800143c <MX_FREERTOS_Init+0x19c>)
 80012e8:	216c      	movs	r1, #108	; 0x6c
 80012ea:	200a      	movs	r0, #10
 80012ec:	f00c fdd6 	bl	800de9c <osMessageQueueNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80012f6:	4a53      	ldr	r2, [pc, #332]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	2003      	movs	r0, #3
 80012fc:	f00c fdce 	bl	800de9c <osMessageQueueNew>
 8001300:	4602      	mov	r2, r0
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 8001304:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 8001308:	2106      	movs	r1, #6
 800130a:	2004      	movs	r0, #4
 800130c:	f00c fdc6 	bl	800de9c <osMessageQueueNew>
 8001310:	4602      	mov	r2, r0
 8001312:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 8001314:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001316:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001318:	2118      	movs	r1, #24
 800131a:	200a      	movs	r0, #10
 800131c:	f00c fdbe 	bl	800de9c <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001328:	2128      	movs	r1, #40	; 0x28
 800132a:	200a      	movs	r0, #10
 800132c:	f00c fdb6 	bl	800de9c <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001336:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 8001338:	2110      	movs	r1, #16
 800133a:	200a      	movs	r0, #10
 800133c:	f00c fdae 	bl	800de9c <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 8001348:	2118      	movs	r1, #24
 800134a:	2003      	movs	r0, #3
 800134c:	f00c fda6 	bl	800de9c <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001358:	2106      	movs	r1, #6
 800135a:	200a      	movs	r0, #10
 800135c:	f00c fd9e 	bl	800de9c <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001366:	4a45      	ldr	r2, [pc, #276]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001368:	2118      	movs	r1, #24
 800136a:	200a      	movs	r0, #10
 800136c:	f00c fd96 	bl	800de9c <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001378:	2104      	movs	r1, #4
 800137a:	2001      	movs	r0, #1
 800137c:	f00c fd8e 	bl	800de9c <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001384:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001388:	2100      	movs	r1, #0
 800138a:	4841      	ldr	r0, [pc, #260]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 800138c:	f00b ff9e 	bl	800d2cc <osThreadNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001398:	2100      	movs	r1, #0
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 800139c:	f00b ff96 	bl	800d2cc <osThreadNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 80013ac:	f00b ff8e 	bl	800d2cc <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	483e      	ldr	r0, [pc, #248]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 80013bc:	f00b ff86 	bl	800d2cc <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	483d      	ldr	r0, [pc, #244]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 80013cc:	f00b ff7e 	bl	800d2cc <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013d8:	2100      	movs	r1, #0
 80013da:	483c      	ldr	r0, [pc, #240]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013dc:	f00b ff76 	bl	800d2cc <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013ec:	f00b ff6e 	bl	800d2cc <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_FREERTOS_Init+0x184>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00c fc8f 	bl	800dd20 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_FREERTOS_Init+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00c fc89 	bl	800dd20 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800140e:	f7ff fdeb 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08016578 	.word	0x08016578
 800141c:	20027878 	.word	0x20027878
 8001420:	08016588 	.word	0x08016588
 8001424:	20027cbc 	.word	0x20027cbc
 8001428:	08016598 	.word	0x08016598
 800142c:	20027cb4 	.word	0x20027cb4
 8001430:	08016568 	.word	0x08016568
 8001434:	08003aed 	.word	0x08003aed
 8001438:	20027868 	.word	0x20027868
 800143c:	08016478 	.word	0x08016478
 8001440:	20027cc8 	.word	0x20027cc8
 8001444:	08016490 	.word	0x08016490
 8001448:	20027880 	.word	0x20027880
 800144c:	080164a8 	.word	0x080164a8
 8001450:	20027cac 	.word	0x20027cac
 8001454:	080164c0 	.word	0x080164c0
 8001458:	20027884 	.word	0x20027884
 800145c:	080164d8 	.word	0x080164d8
 8001460:	2002787c 	.word	0x2002787c
 8001464:	080164f0 	.word	0x080164f0
 8001468:	20027870 	.word	0x20027870
 800146c:	08016508 	.word	0x08016508
 8001470:	2002788c 	.word	0x2002788c
 8001474:	08016520 	.word	0x08016520
 8001478:	20027778 	.word	0x20027778
 800147c:	08016538 	.word	0x08016538
 8001480:	2002777c 	.word	0x2002777c
 8001484:	08016550 	.word	0x08016550
 8001488:	20027888 	.word	0x20027888
 800148c:	0801637c 	.word	0x0801637c
 8001490:	080014e1 	.word	0x080014e1
 8001494:	20027860 	.word	0x20027860
 8001498:	080163a0 	.word	0x080163a0
 800149c:	08003fa5 	.word	0x08003fa5
 80014a0:	2002786c 	.word	0x2002786c
 80014a4:	080163c4 	.word	0x080163c4
 80014a8:	08004281 	.word	0x08004281
 80014ac:	20027cb0 	.word	0x20027cb0
 80014b0:	080163e8 	.word	0x080163e8
 80014b4:	080038e5 	.word	0x080038e5
 80014b8:	20027ccc 	.word	0x20027ccc
 80014bc:	0801640c 	.word	0x0801640c
 80014c0:	08003a5d 	.word	0x08003a5d
 80014c4:	20027cc0 	.word	0x20027cc0
 80014c8:	08016430 	.word	0x08016430
 80014cc:	08003c15 	.word	0x08003c15
 80014d0:	20027cb8 	.word	0x20027cb8
 80014d4:	08016454 	.word	0x08016454
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	20027864 	.word	0x20027864

080014e0 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f00c f8e1 	bl	800d6b0 <osDelay>
 80014ee:	e7fb      	b.n	80014e8 <DefaultTask+0x8>

080014f0 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f00c f842 	bl	800d588 <osThreadFlagsWait>
 8001504:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000002U) == 0x00000002U) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f3      	beq.n	80014f8 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <BlinkTask+0x1ac>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2200      	movs	r2, #0
 800151a:	4961      	ldr	r1, [pc, #388]	; (80016a0 <BlinkTask+0x1b0>)
 800151c:	f00c fdb8 	bl	800e090 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <BlinkTask+0x1b0>)
 8001522:	2201      	movs	r2, #1
 8001524:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <BlinkTask+0x1ac>)
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	2300      	movs	r3, #0
 800152c:	2200      	movs	r2, #0
 800152e:	495c      	ldr	r1, [pc, #368]	; (80016a0 <BlinkTask+0x1b0>)
 8001530:	f00c fd3a 	bl	800dfa8 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001534:	485b      	ldr	r0, [pc, #364]	; (80016a4 <BlinkTask+0x1b4>)
 8001536:	f00a fbe5 	bl	800bd04 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800153a:	2104      	movs	r1, #4
 800153c:	4859      	ldr	r0, [pc, #356]	; (80016a4 <BlinkTask+0x1b4>)
 800153e:	f00a fc97 	bl	800be70 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001542:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001546:	4958      	ldr	r1, [pc, #352]	; (80016a8 <BlinkTask+0x1b8>)
 8001548:	4858      	ldr	r0, [pc, #352]	; (80016ac <BlinkTask+0x1bc>)
 800154a:	f004 fe57 	bl	80061fc <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	2100      	movs	r1, #0
 8001554:	2006      	movs	r0, #6
 8001556:	f00c f817 	bl	800d588 <osThreadFlagsWait>
 800155a:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d064      	beq.n	8001630 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 8001566:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <BlinkTask+0x1c0>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d108      	bne.n	8001588 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 8001576:	f004 fac1 	bl	8005afc <HAL_GetTick>
 800157a:	ee07 0a90 	vmov	s15, r0
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <BlinkTask+0x1c0>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8001588:	f004 fab8 	bl	8005afc <HAL_GetTick>
 800158c:	ee07 0a90 	vmov	s15, r0
 8001590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <BlinkTask+0x1c0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <BlinkTask+0x1c4>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <BlinkTask+0x1c8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e039      	b.n	8001628 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <BlinkTask+0x1c8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a3a      	ldr	r2, [pc, #232]	; (80016a8 <BlinkTask+0x1b8>)
 80015c0:	4413      	add	r3, r2
 80015c2:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <BlinkTask+0x1cc>)
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	461a      	mov	r2, r3
 80015cc:	f013 fbbc 	bl	8014d48 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <BlinkTask+0x1c0>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <BlinkTask+0x1c4>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 2a90 	vmov	r2, s15
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <BlinkTask+0x1cc>)
 80015ea:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <BlinkTask+0x1d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a32      	ldr	r2, [pc, #200]	; (80016bc <BlinkTask+0x1cc>)
 80015f2:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <BlinkTask+0x1cc>)
 80015f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <BlinkTask+0x1c0>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <BlinkTask+0x1d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <BlinkTask+0x1d0>)
 800160e:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <BlinkTask+0x1d4>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	4928      	ldr	r1, [pc, #160]	; (80016bc <BlinkTask+0x1cc>)
 800161a:	f00c fcc5 	bl	800dfa8 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <BlinkTask+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <BlinkTask+0x1c8>)
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <BlinkTask+0x1c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d9c1      	bls.n	80015b4 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d089      	beq.n	800154e <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <BlinkTask+0x1bc>)
 800163c:	f004 fe62 	bl	8006304 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001640:	2104      	movs	r1, #4
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <BlinkTask+0x1b4>)
 8001644:	f00a fc5e 	bl	800bf04 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <BlinkTask+0x1b4>)
 800164a:	f00a fb85 	bl	800bd58 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <BlinkTask+0x1c0>)
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <BlinkTask+0x1ac>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2200      	movs	r2, #0
 8001660:	490f      	ldr	r1, [pc, #60]	; (80016a0 <BlinkTask+0x1b0>)
 8001662:	f00c fd15 	bl	800e090 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <BlinkTask+0x1b0>)
 8001668:	2200      	movs	r2, #0
 800166a:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <BlinkTask+0x1b0>)
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d104      	bne.n	800167e <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <BlinkTask+0x1d8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f00c fbb7 	bl	800ddec <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <BlinkTask+0x1ac>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	2300      	movs	r3, #0
 8001684:	2200      	movs	r2, #0
 8001686:	4906      	ldr	r1, [pc, #24]	; (80016a0 <BlinkTask+0x1b0>)
 8001688:	f00c fc8e 	bl	800dfa8 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <BlinkTask+0x1d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f00c fd6f 	bl	800e174 <osMessageQueueReset>

					break;
 8001696:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001698:	e72e      	b.n	80014f8 <BlinkTask+0x8>
 800169a:	bf00      	nop
 800169c:	20027888 	.word	0x20027888
 80016a0:	20027cd4 	.word	0x20027cd4
 80016a4:	20028450 	.word	0x20028450
 80016a8:	20000274 	.word	0x20000274
 80016ac:	200276ac 	.word	0x200276ac
 80016b0:	20000a4c 	.word	0x20000a4c
 80016b4:	20000a50 	.word	0x20000a50
 80016b8:	20000a48 	.word	0x20000a48
 80016bc:	20000208 	.word	0x20000208
 80016c0:	20000a44 	.word	0x20000a44
 80016c4:	20027cc8 	.word	0x20027cc8
 80016c8:	20027cbc 	.word	0x20027cbc

080016cc <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_ADC_ConvCpltCallback+0x24>)
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x28>)
 80016d8:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2104      	movs	r1, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00b fe9f 	bl	800d424 <osThreadFlagsSet>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20027cd0 	.word	0x20027cd0
 80016f4:	2000065c 	.word	0x2000065c
 80016f8:	20027864 	.word	0x20027864

080016fc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001708:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2104      	movs	r1, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f00b fe87 	bl	800d424 <osThreadFlagsSet>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20027cd0 	.word	0x20027cd0
 8001724:	20000274 	.word	0x20000274
 8001728:	20027864 	.word	0x20027864

0800172c <LL_AHB2_GRP1_EnableClock>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_COMP1_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_COMP1_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_COMP1_Init+0x58>)
 800176e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <MX_COMP1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_COMP1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_COMP1_Init+0x50>)
 8001798:	2231      	movs	r2, #49	; 0x31
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_COMP1_Init+0x50>)
 800179e:	f005 fc17 	bl	8006fd0 <HAL_COMP_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f002 fd62 	bl	8004270 <Error_Handler>
  }

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20027cdc 	.word	0x20027cdc
 80017b4:	40010200 	.word	0x40010200
 80017b8:	00c00010 	.word	0x00c00010

080017bc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_COMP_MspInit+0x5c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d117      	bne.n	800180e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff ffa4 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 80017e4:	2302      	movs	r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f006 fa39 	bl	8007c70 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	2016      	movs	r0, #22
 8001804:	f005 fead 	bl	8007562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001808:	2016      	movs	r0, #22
 800180a:	f005 fec4 	bl	8007596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40010200 	.word	0x40010200

0800181c <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02a      	beq.n	800188c <process_pulse_lengths+0x70>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3302      	adds	r3, #2
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d025      	beq.n	800188c <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3302      	adds	r3, #2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	bf8c      	ite	hi
 800184e:	2301      	movhi	r3, #1
 8001850:	2300      	movls	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d10e      	bne.n	8001880 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	005a      	lsls	r2, r3, #1
 8001868:	7efb      	ldrb	r3, [r7, #27]
 800186a:	431a      	orrs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <process_pulse_lengths+0xd0>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e002      	b.n	8001886 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001880:	7efa      	ldrb	r2, [r7, #27]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db26      	blt.n	80018e0 <process_pulse_lengths+0xc4>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	dc22      	bgt.n	80018e0 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10a      	bne.n	80018b8 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80018b6:	e013      	b.n	80018e0 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	69f9      	ldr	r1, [r7, #28]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4291      	cmp	r1, r2
 80018d0:	d101      	bne.n	80018d6 <process_pulse_lengths+0xba>
 80018d2:	2201      	movs	r2, #1
 80018d4:	e001      	b.n	80018da <process_pulse_lengths+0xbe>
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	441a      	add	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	080165a8 	.word	0x080165a8

080018f0 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	dd06      	ble.n	8001910 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	e001      	b.n	8001914 <get_phase+0x24>
    } else {
        return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <reset+0x30>)
 800193a:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	427a0000 	.word	0x427a0000

08001954 <LL_AHB1_GRP1_EnableClock>:
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800198a:	2004      	movs	r0, #4
 800198c:	f7ff ffe2 	bl	8001954 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff ffdf 	bl	8001954 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	200b      	movs	r0, #11
 800199c:	f005 fde1 	bl	8007562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a0:	200b      	movs	r0, #11
 80019a2:	f005 fdf8 	bl	8007596 <HAL_NVIC_EnableIRQ>

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	603a      	str	r2, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	460b      	mov	r3, r1
 80019ba:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <IMU_begin+0x60>)
 80019c4:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <IMU_begin+0x64>)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <IMU_begin+0x68>)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 80019d2:	f000 fa85 	bl	8001ee0 <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <IMU_begin+0x6c>)
 80019d8:	22f9      	movs	r2, #249	; 0xf9
 80019da:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <IMU_begin+0x6c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 80019e2:	2302      	movs	r3, #2
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fc12 	bl	8002210 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 80019ec:	f000 fb68 	bl	80020c0 <IMU_receivePacket>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <IMU_begin+0x6c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2bf8      	cmp	r3, #248	; 0xf8
 80019fc:	d101      	bne.n	8001a02 <IMU_begin+0x56>
		{
			return (true);
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000006 	.word	0x20000006
 8001a10:	20027d5e 	.word	0x20027d5e
 8001a14:	20027e24 	.word	0x20027e24
 8001a18:	20027d9c 	.word	0x20027d9c

08001a1c <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <IMU_dataAvailable+0x64>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d00d      	beq.n	8001a44 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <IMU_dataAvailable+0x68>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <IMU_dataAvailable+0x64>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f006 fa8b 	bl	8007f50 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <IMU_dataAvailable+0x28>
			return (false);
 8001a40:	2300      	movs	r3, #0
 8001a42:	e01b      	b.n	8001a7c <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001a44:	f000 fb3c 	bl	80020c0 <IMU_receivePacket>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <IMU_dataAvailable+0x6c>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d107      	bne.n	8001a68 <IMU_dataAvailable+0x4c>
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <IMU_dataAvailable+0x70>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2bfb      	cmp	r3, #251	; 0xfb
 8001a5e:	d103      	bne.n	8001a68 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001a60:	f000 f832 	bl	8001ac8 <IMU_parseInputReport>
			return (true);
 8001a64:	2301      	movs	r3, #1
 8001a66:	e009      	b.n	8001a7c <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <IMU_dataAvailable+0x6c>)
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d103      	bne.n	8001a7a <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001a72:	f000 f80d 	bl	8001a90 <IMU_parseCommandReport>
			return (true);
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20027d5e 	.word	0x20027d5e
 8001a84:	20027e24 	.word	0x20027e24
 8001a88:	20027d0c 	.word	0x20027d0c
 8001a8c:	20027d9c 	.word	0x20027d9c

08001a90 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2bf1      	cmp	r3, #241	; 0xf1
 8001a9c:	d109      	bne.n	8001ab2 <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001aa0:	789b      	ldrb	r3, [r3, #2]
 8001aa2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d103      	bne.n	8001ab2 <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <IMU_parseCommandReport+0x30>)
 8001aac:	795a      	ldrb	r2, [r3, #5]
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <IMU_parseCommandReport+0x34>)
 8001ab0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20027d9c 	.word	0x20027d9c
 8001ac4:	20027e4f 	.word	0x20027e4f

08001ac8 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001ace:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <IMU_parseInputReport+0x260>)
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <IMU_parseInputReport+0x260>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001ae0:	8a3b      	ldrh	r3, [r7, #16]
 8001ae2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ae6:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001ae8:	8a3b      	ldrh	r3, [r7, #16]
 8001aea:	3b04      	subs	r3, #4
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	061a      	lsls	r2, r3, #24
 8001af6:	4b8d      	ldr	r3, [pc, #564]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001af8:	78db      	ldrb	r3, [r3, #3]
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	431a      	orrs	r2, r3
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b00:	789b      	ldrb	r3, [r3, #2]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	4a89      	ldr	r2, [pc, #548]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b08:	7852      	ldrb	r2, [r2, #1]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4a88      	ldr	r2, [pc, #544]	; (8001d30 <IMU_parseInputReport+0x268>)
 8001b0e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b10:	4b86      	ldr	r3, [pc, #536]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b12:	79db      	ldrb	r3, [r3, #7]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b1a:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b1c:	7a9b      	ldrb	r3, [r3, #10]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b24:	7a5b      	ldrb	r3, [r3, #9]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b30:	7b1b      	ldrb	r3, [r3, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b38:	7adb      	ldrb	r3, [r3, #11]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b44:	7b9b      	ldrb	r3, [r3, #14]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b4c:	7b5b      	ldrb	r3, [r3, #13]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001b5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b62:	3b05      	subs	r3, #5
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	dd09      	ble.n	8001b7c <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001b68:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b6a:	7c1b      	ldrb	r3, [r3, #16]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b72:	7bdb      	ldrb	r3, [r3, #15]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001b7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b80:	3b05      	subs	r3, #5
 8001b82:	2b0b      	cmp	r3, #11
 8001b84:	dd09      	ble.n	8001b9a <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001b86:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b88:	7c9b      	ldrb	r3, [r3, #18]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b90:	7c5b      	ldrb	r3, [r3, #17]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001b9c:	795b      	ldrb	r3, [r3, #5]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d10d      	bne.n	8001bbe <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <IMU_parseInputReport+0x26c>)
 8001ba8:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001baa:	4a63      	ldr	r2, [pc, #396]	; (8001d38 <IMU_parseInputReport+0x270>)
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001bb0:	4a62      	ldr	r2, [pc, #392]	; (8001d3c <IMU_parseInputReport+0x274>)
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001bb6:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <IMU_parseInputReport+0x278>)
 8001bb8:	893b      	ldrh	r3, [r7, #8]
 8001bba:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001bbc:	e16a      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d10d      	bne.n	8001be2 <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <IMU_parseInputReport+0x27c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001bce:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <IMU_parseInputReport+0x280>)
 8001bd0:	89bb      	ldrh	r3, [r7, #12]
 8001bd2:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001bd4:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <IMU_parseInputReport+0x284>)
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001bda:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <IMU_parseInputReport+0x288>)
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	8013      	strh	r3, [r2, #0]
}
 8001be0:	e158      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001be4:	795b      	ldrb	r3, [r3, #5]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d10d      	bne.n	8001c06 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <IMU_parseInputReport+0x28c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001bf2:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <IMU_parseInputReport+0x290>)
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <IMU_parseInputReport+0x294>)
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <IMU_parseInputReport+0x298>)
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	8013      	strh	r3, [r2, #0]
}
 8001c04:	e146      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d10d      	bne.n	8001c2a <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <IMU_parseInputReport+0x29c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <IMU_parseInputReport+0x2a0>)
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c1c:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <IMU_parseInputReport+0x2a4>)
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c22:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <IMU_parseInputReport+0x2a8>)
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	8013      	strh	r3, [r2, #0]
}
 8001c28:	e134      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d003      	beq.n	8001c3a <IMU_parseInputReport+0x172>
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d166      	bne.n	8001d08 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c3a:	f003 ff5f 	bl	8005afc <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c42:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001c44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f000 f964 	bl	8001f20 <IMU_qToFloat>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001c62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f000 f955 	bl	8001f20 <IMU_qToFloat>
 8001c76:	eef0 7a40 	vmov.f32	s15, s0
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c7c:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001c80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f946 	bl	8001f20 <IMU_qToFloat>
 8001c94:	eef0 7a40 	vmov.f32	s15, s0
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001c9a:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001c9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <IMU_parseInputReport+0x2b0>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f000 f937 	bl	8001f20 <IMU_qToFloat>
 8001cb2:	eef0 7a40 	vmov.f32	s15, s0
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cb8:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001cbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cc0:	210c      	movs	r1, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f92c 	bl	8001f20 <IMU_qToFloat>
 8001cc8:	eef0 7a40 	vmov.f32	s15, s0
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cce:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <IMU_parseInputReport+0x2b4>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4926      	ldr	r1, [pc, #152]	; (8001d74 <IMU_parseInputReport+0x2ac>)
 8001cdc:	f00c f964 	bl	800dfa8 <osMessageQueuePut>
		quatAccuracy = status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <IMU_parseInputReport+0x2b8>)
 8001ce6:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <IMU_parseInputReport+0x2bc>)
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001cee:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <IMU_parseInputReport+0x2c0>)
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <IMU_parseInputReport+0x2c4>)
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <IMU_parseInputReport+0x2c8>)
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <IMU_parseInputReport+0x2cc>)
 8001d02:	8abb      	ldrh	r3, [r7, #20]
 8001d04:	8013      	strh	r3, [r2, #0]
}
 8001d06:	e0c5      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <IMU_parseInputReport+0x264>)
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d147      	bne.n	8001da0 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d10:	f003 fef4 	bl	8005afc <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <IMU_parseInputReport+0x2d0>)
 8001d18:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <IMU_parseInputReport+0x2d0>)
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <IMU_parseInputReport+0x2d4>)
 8001d22:	893b      	ldrh	r3, [r7, #8]
 8001d24:	8013      	strh	r3, [r2, #0]
}
 8001d26:	e0b5      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
 8001d28:	20027d0c 	.word	0x20027d0c
 8001d2c:	20027d9c 	.word	0x20027d9c
 8001d30:	20027d28 	.word	0x20027d28
 8001d34:	20027e64 	.word	0x20027e64
 8001d38:	20027e4c 	.word	0x20027e4c
 8001d3c:	20027e68 	.word	0x20027e68
 8001d40:	20027d64 	.word	0x20027d64
 8001d44:	20027d60 	.word	0x20027d60
 8001d48:	20027d32 	.word	0x20027d32
 8001d4c:	20027e50 	.word	0x20027e50
 8001d50:	20027d8e 	.word	0x20027d8e
 8001d54:	20027d90 	.word	0x20027d90
 8001d58:	20027d92 	.word	0x20027d92
 8001d5c:	20027d5a 	.word	0x20027d5a
 8001d60:	20027d58 	.word	0x20027d58
 8001d64:	20027d10 	.word	0x20027d10
 8001d68:	20027d5c 	.word	0x20027d5c
 8001d6c:	20027e52 	.word	0x20027e52
 8001d70:	20027d62 	.word	0x20027d62
 8001d74:	20027d74 	.word	0x20027d74
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	2002788c 	.word	0x2002788c
 8001d80:	20027d2e 	.word	0x20027d2e
 8001d84:	20027e66 	.word	0x20027e66
 8001d88:	20027d8c 	.word	0x20027d8c
 8001d8c:	20027d08 	.word	0x20027d08
 8001d90:	20027d24 	.word	0x20027d24
 8001d94:	20027d66 	.word	0x20027d66
 8001d98:	20027d14 	.word	0x20027d14
 8001d9c:	20027e6a 	.word	0x20027e6a
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001da0:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001da2:	795b      	ldrb	r3, [r3, #5]
 8001da4:	2b13      	cmp	r3, #19
 8001da6:	d10d      	bne.n	8001dc4 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001da8:	f003 fea8 	bl	8005afc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <IMU_parseInputReport+0x3d8>)
 8001db0:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001db4:	7a5a      	ldrb	r2, [r3, #9]
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <IMU_parseInputReport+0x3d8>)
 8001db8:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dbc:	7a5a      	ldrb	r2, [r3, #9]
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <IMU_parseInputReport+0x3dc>)
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	e067      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dc6:	795b      	ldrb	r3, [r3, #5]
 8001dc8:	2b1e      	cmp	r3, #30
 8001dca:	d12b      	bne.n	8001e24 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001dcc:	f003 fe96 	bl	8005afc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001dd4:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	74fb      	strb	r3, [r7, #19]
 8001dda:	e00c      	b.n	8001df6 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	f103 020b 	add.w	r2, r3, #11
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <IMU_parseInputReport+0x3e4>)
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	440b      	add	r3, r1
 8001dea:	492c      	ldr	r1, [pc, #176]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dec:	5c8a      	ldrb	r2, [r1, r2]
 8001dee:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	3301      	adds	r3, #1
 8001df4:	74fb      	strb	r3, [r7, #19]
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d9ef      	bls.n	8001ddc <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001dfe:	7a9a      	ldrb	r2, [r3, #10]
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <IMU_parseInputReport+0x3e8>)
 8001e02:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <IMU_parseInputReport+0x3e4>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001e0a:	6810      	ldr	r0, [r2, #0]
 8001e0c:	6851      	ldr	r1, [r2, #4]
 8001e0e:	c303      	stmia	r3!, {r0, r1}
 8001e10:	7a12      	ldrb	r2, [r2, #8]
 8001e12:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <IMU_parseInputReport+0x3ec>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4922      	ldr	r1, [pc, #136]	; (8001ea8 <IMU_parseInputReport+0x3e0>)
 8001e1e:	f00c f8c3 	bl	800dfa8 <osMessageQueuePut>
}
 8001e22:	e037      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e26:	795b      	ldrb	r3, [r3, #5]
 8001e28:	2b14      	cmp	r3, #20
 8001e2a:	d109      	bne.n	8001e40 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <IMU_parseInputReport+0x3f0>)
 8001e2e:	89bb      	ldrh	r3, [r7, #12]
 8001e30:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <IMU_parseInputReport+0x3f4>)
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <IMU_parseInputReport+0x3f8>)
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	8013      	strh	r3, [r2, #0]
}
 8001e3e:	e029      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e42:	795b      	ldrb	r3, [r3, #5]
 8001e44:	2b15      	cmp	r3, #21
 8001e46:	d109      	bne.n	8001e5c <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <IMU_parseInputReport+0x3fc>)
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <IMU_parseInputReport+0x400>)
 8001e50:	897b      	ldrh	r3, [r7, #10]
 8001e52:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <IMU_parseInputReport+0x404>)
 8001e56:	893b      	ldrh	r3, [r7, #8]
 8001e58:	8013      	strh	r3, [r2, #0]
}
 8001e5a:	e01b      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e5e:	795b      	ldrb	r3, [r3, #5]
 8001e60:	2b16      	cmp	r3, #22
 8001e62:	d109      	bne.n	8001e78 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <IMU_parseInputReport+0x408>)
 8001e66:	89bb      	ldrh	r3, [r7, #12]
 8001e68:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <IMU_parseInputReport+0x40c>)
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <IMU_parseInputReport+0x410>)
 8001e72:	893b      	ldrh	r3, [r7, #8]
 8001e74:	8013      	strh	r3, [r2, #0]
}
 8001e76:	e00d      	b.n	8001e94 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e7a:	795b      	ldrb	r3, [r3, #5]
 8001e7c:	2bf1      	cmp	r3, #241	; 0xf1
 8001e7e:	d109      	bne.n	8001e94 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e82:	79db      	ldrb	r3, [r3, #7]
 8001e84:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d103      	bne.n	8001e94 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <IMU_parseInputReport+0x3d4>)
 8001e8e:	7a9a      	ldrb	r2, [r3, #10]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <IMU_parseInputReport+0x414>)
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20027d9c 	.word	0x20027d9c
 8001ea0:	20027d1c 	.word	0x20027d1c
 8001ea4:	20027d96 	.word	0x20027d96
 8001ea8:	20027e54 	.word	0x20027e54
 8001eac:	20027d70 	.word	0x20027d70
 8001eb0:	20027e4e 	.word	0x20027e4e
 8001eb4:	20027870 	.word	0x20027870
 8001eb8:	20027d94 	.word	0x20027d94
 8001ebc:	20027d6e 	.word	0x20027d6e
 8001ec0:	20027e1e 	.word	0x20027e1e
 8001ec4:	20027d12 	.word	0x20027d12
 8001ec8:	20027d98 	.word	0x20027d98
 8001ecc:	20027d68 	.word	0x20027d68
 8001ed0:	20027d6c 	.word	0x20027d6c
 8001ed4:	20027d6a 	.word	0x20027d6a
 8001ed8:	20027d30 	.word	0x20027d30
 8001edc:	20027e4f 	.word	0x20027e4f

08001ee0 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <IMU_softReset+0x3c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001eea:	2301      	movs	r3, #1
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f98e 	bl	8002210 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001ef4:	20c8      	movs	r0, #200	; 0xc8
 8001ef6:	f003 fe19 	bl	8005b2c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001efa:	bf00      	nop
 8001efc:	f000 f8e0 	bl	80020c0 <IMU_receivePacket>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1fa      	bne.n	8001efc <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f06:	20c8      	movs	r0, #200	; 0xc8
 8001f08:	f003 fe10 	bl	8005b2c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f0c:	bf00      	nop
 8001f0e:	f000 f8d7 	bl	80020c0 <IMU_receivePacket>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1fa      	bne.n	8001f0e <IMU_softReset+0x2e>
		;
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20027d9c 	.word	0x20027d9c

08001f20 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	425b      	negs	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fa77 	bl	8000438 <__aeabi_i2d>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	ec44 3b11 	vmov	d1, r3, r4
 8001f52:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001f98 <IMU_qToFloat+0x78>
 8001f56:	f012 ff0b 	bl	8014d70 <pow>
 8001f5a:	ec56 5b10 	vmov	r5, r6, d0
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f7fe fa7c 	bl	800045c <__aeabi_f2d>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	4631      	mov	r1, r6
 8001f70:	f7fe facc 	bl	800050c <__aeabi_dmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd76 	bl	8000a6c <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	ee07 3a90 	vmov	s15, r3
}
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40000000 	.word	0x40000000

08001fa0 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4619      	mov	r1, r3
 8001fae:	2005      	movs	r0, #5
 8001fb0:	f000 f81a 	bl	8001fe8 <IMU_setFeatureCommand_2>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <IMU_enableActivityClassifier+0x28>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	201e      	movs	r0, #30
 8001fd8:	f000 f818 	bl	800200c <IMU_setFeatureCommand_3>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20027d70 	.word	0x20027d70

08001fe8 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460a      	mov	r2, r1
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8001ff8:	88b9      	ldrh	r1, [r7, #4]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f804 	bl	800200c <IMU_setFeatureCommand_3>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	603a      	str	r2, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	460b      	mov	r3, r1
 800201a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 800201c:	88bb      	ldrh	r3, [r7, #4]
 800201e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800202a:	22fd      	movs	r2, #253	; 0xfd
 800202c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002036:	2200      	movs	r2, #0
 8002038:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800203c:	2200      	movs	r2, #0
 800203e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002042:	2200      	movs	r2, #0
 8002044:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800204c:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	121b      	asrs	r3, r3, #8
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002056:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	141b      	asrs	r3, r3, #16
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002060:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0e1b      	lsrs	r3, r3, #24
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800206a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800206e:	2200      	movs	r2, #0
 8002070:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002074:	2200      	movs	r2, #0
 8002076:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800207a:	2200      	movs	r2, #0
 800207c:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002080:	2200      	movs	r2, #0
 8002082:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800208a:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 8002094:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 800209e:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0e1b      	lsrs	r3, r3, #24
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <IMU_setFeatureCommand_3+0xb0>)
 80020a8:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80020aa:	2302      	movs	r3, #2
 80020ac:	2111      	movs	r1, #17
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8ae 	bl	8002210 <IMU_sendPacket>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20027d9c 	.word	0x20027d9c

080020c0 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <IMU_receivePacket+0x90>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <IMU_receivePacket+0x94>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f005 ff3c 	bl	8007f50 <HAL_GPIO_ReadPin>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <IMU_receivePacket+0x22>
		return (false);
 80020de:	2300      	movs	r3, #0
 80020e0:	e031      	b.n	8002146 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <IMU_receivePacket+0x98>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00b fe18 	bl	800dd20 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <IMU_receivePacket+0x9c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b299      	uxth	r1, r3
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2304      	movs	r3, #4
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <IMU_receivePacket+0xa0>)
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <IMU_receivePacket+0xa4>)
 8002100:	f006 f8da 	bl	80082b8 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <IMU_receivePacket+0x98>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f00b fe6f 	bl	800ddec <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <IMU_receivePacket+0xa0>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <IMU_receivePacket+0xa0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002126:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002130:	2300      	movs	r3, #0
 8002132:	e008      	b.n	8002146 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	3b04      	subs	r3, #4
 8002138:	b29b      	uxth	r3, r3
 800213a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f812 	bl	8002168 <IMU_getData>


	return (true); //We're done!
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20027e24 	.word	0x20027e24
 8002154:	20027d5e 	.word	0x20027d5e
 8002158:	20027878 	.word	0x20027878
 800215c:	20000006 	.word	0x20000006
 8002160:	20027d0c 	.word	0x20027d0c
 8002164:	20027e6c 	.word	0x20027e6c

08002168 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8002172:	2300      	movs	r3, #0
 8002174:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8002176:	e036      	b.n	80021e6 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 800217c:	89bb      	ldrh	r3, [r7, #12]
 800217e:	2b1c      	cmp	r3, #28
 8002180:	d901      	bls.n	8002186 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 8002182:	231c      	movs	r3, #28
 8002184:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <IMU_getData+0x90>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 31ff 	mov.w	r1, #4294967295
 800218e:	4618      	mov	r0, r3
 8002190:	f00b fdc6 	bl	800dd20 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <IMU_getData+0x94>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b299      	uxth	r1, r3
 800219a:	89bb      	ldrh	r3, [r7, #12]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3304      	adds	r3, #4
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <IMU_getData+0x98>)
 80021ac:	4815      	ldr	r0, [pc, #84]	; (8002204 <IMU_getData+0x9c>)
 80021ae:	f006 f883 	bl	80082b8 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <IMU_getData+0x90>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00b fe18 	bl	800ddec <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80021bc:	89fa      	ldrh	r2, [r7, #14]
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	2b7f      	cmp	r3, #127	; 0x7f
 80021c4:	dc07      	bgt.n	80021d6 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <IMU_getData+0xa0>)
 80021ca:	4413      	add	r3, r2
 80021cc:	89ba      	ldrh	r2, [r7, #12]
 80021ce:	490f      	ldr	r1, [pc, #60]	; (800220c <IMU_getData+0xa4>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f012 fdb9 	bl	8014d48 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80021d6:	89fa      	ldrh	r2, [r7, #14]
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1c5      	bne.n	8002178 <IMU_getData+0x10>
	}
	return (true); //Done!
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20027878 	.word	0x20027878
 80021fc:	20000006 	.word	0x20000006
 8002200:	20000a5c 	.word	0x20000a5c
 8002204:	20027e6c 	.word	0x20027e6c
 8002208:	20027d9c 	.word	0x20027d9c
 800220c:	20000a60 	.word	0x20000a60

08002210 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	4603      	mov	r3, r0
 8002218:	460a      	mov	r2, r1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	4613      	mov	r3, r2
 800221e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	3304      	adds	r3, #4
 8002224:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <IMU_sendPacket+0x84>)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	121b      	asrs	r3, r3, #8
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <IMU_sendPacket+0x84>)
 8002234:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <IMU_sendPacket+0x84>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <IMU_sendPacket+0x88>)
 8002240:	5cd2      	ldrb	r2, [r2, r3]
 8002242:	1c51      	adds	r1, r2, #1
 8002244:	b2c8      	uxtb	r0, r1
 8002246:	4914      	ldr	r1, [pc, #80]	; (8002298 <IMU_sendPacket+0x88>)
 8002248:	54c8      	strb	r0, [r1, r3]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <IMU_sendPacket+0x84>)
 800224c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	461a      	mov	r2, r3
 8002252:	4912      	ldr	r1, [pc, #72]	; (800229c <IMU_sendPacket+0x8c>)
 8002254:	4812      	ldr	r0, [pc, #72]	; (80022a0 <IMU_sendPacket+0x90>)
 8002256:	f012 fd77 	bl	8014d48 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <IMU_sendPacket+0x94>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f04f 31ff 	mov.w	r1, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f00b fd5c 	bl	800dd20 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <IMU_sendPacket+0x98>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b299      	uxth	r1, r3
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	b29a      	uxth	r2, r3
 8002272:	2364      	movs	r3, #100	; 0x64
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <IMU_sendPacket+0x84>)
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <IMU_sendPacket+0x9c>)
 800227c:	f005 ff28 	bl	80080d0 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <IMU_sendPacket+0x94>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f00b fdb1 	bl	800ddec <osSemaphoreRelease>

	return (true);
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20027e28 	.word	0x20027e28
 8002298:	20000a54 	.word	0x20000a54
 800229c:	20027d9c 	.word	0x20027d9c
 80022a0:	20027e2c 	.word	0x20027e2c
 80022a4:	20027878 	.word	0x20027878
 80022a8:	20000006 	.word	0x20000006
 80022ac:	20027e6c 	.word	0x20027e6c

080022b0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022ca:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80022ce:	f00e fb0f 	bl	80108f0 <eTaskConfirmSleepModeStatus>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022e4:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 80022e6:	e021      	b.n	800232c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d002      	beq.n	80022f6 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f869 	bl	80023c8 <LpTimerStart>
    LpEnter( );
 80022f6:	f000 f8cb 	bl	8002490 <LpEnter>
    if (xExpectedIdleTime != (~0))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002302:	f000 f8cd 	bl	80024a0 <LpGetElapsedTime>
 8002306:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f00e f80b 	bl	8010324 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <vPortSuppressTicksAndSleep+0x88>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <vPortSuppressTicksAndSleep+0x84>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <vPortSuppressTicksAndSleep+0x8c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <vPortSuppressTicksAndSleep+0x90>)
 8002326:	3b01      	subs	r3, #1
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	b662      	cpsie	i
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	e000e010 	.word	0xe000e010
 8002338:	e000e018 	.word	0xe000e018
 800233c:	20000a7c 	.word	0x20000a7c
 8002340:	e000e014 	.word	0xe000e014

08002344 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002348:	f000 f828 	bl	800239c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <vPortSetupTimerInterrupt+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <vPortSetupTimerInterrupt+0x44>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <vPortSetupTimerInterrupt+0x48>)
 800235a:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <vPortSetupTimerInterrupt+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <vPortSetupTimerInterrupt+0x50>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <vPortSetupTimerInterrupt+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <vPortSetupTimerInterrupt+0x44>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	4a08      	ldr	r2, [pc, #32]	; (8002398 <vPortSetupTimerInterrupt+0x54>)
 8002376:	3b01      	subs	r3, #1
 8002378:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <vPortSetupTimerInterrupt+0x4c>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000078 	.word	0x20000078
 8002388:	10624dd3 	.word	0x10624dd3
 800238c:	20000a7c 	.word	0x20000a7c
 8002390:	e000e010 	.word	0xe000e010
 8002394:	e000e018 	.word	0xe000e018
 8002398:	e000e014 	.word	0xe000e014

0800239c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <LpTimerInit+0x14>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <LpTimerInit+0x18>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f001 f83a 	bl	8003420 <HW_TS_Create>

  return;
 80023ac:	bf00      	nop
}
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	20000a84 	.word	0x20000a84

080023b8 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80023bc:	bf00      	nop
}
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d80c      	bhi.n	80023f4 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <LpTimerStart+0xb8>)
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <LpTimerStart+0xbc>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	e034      	b.n	800245e <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <LpTimerStart+0xc0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d81b      	bhi.n	8002434 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <LpTimerStart+0xbc>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <LpTimerStart+0xc0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d806      	bhi.n	800242c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	e018      	b.n	800245e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	e014      	b.n	800245e <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <LpTimerStart+0xbc>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002448:	4293      	cmp	r3, r2
 800244a:	d805      	bhi.n	8002458 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <LpTimerStart+0xb8>)
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	e002      	b.n	800245e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <LpTimerStart+0xc4>)
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f8db 	bl	8003620 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 800246a:	f001 f95f 	bl	800372c <HW_TS_RTC_ReadLeftTicksToCount>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <LpTimerStart+0xc4>)
 8002474:	601a      	str	r2, [r3, #0]

  return;
 8002476:	bf00      	nop
}
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000f4240 	.word	0x000f4240
 8002484:	0113094d 	.word	0x0113094d
 8002488:	00418937 	.word	0x00418937
 800248c:	20000a80 	.word	0x20000a80

08002490 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 8002494:	bf00      	nop
}
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <LpGetElapsedTime+0x60>)
 80024a8:	681c      	ldr	r4, [r3, #0]
 80024aa:	f001 f93f 	bl	800372c <HW_TS_RTC_ReadLeftTicksToCount>
 80024ae:	4603      	mov	r3, r0
 80024b0:	1ae3      	subs	r3, r4, r3
 80024b2:	f04f 0400 	mov.w	r4, #0
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <LpGetElapsedTime+0x64>)
 80024b8:	fb02 f104 	mul.w	r1, r2, r4
 80024bc:	2200      	movs	r2, #0
 80024be:	fb02 f203 	mul.w	r2, r2, r3
 80024c2:	440a      	add	r2, r1
 80024c4:	490f      	ldr	r1, [pc, #60]	; (8002504 <LpGetElapsedTime+0x64>)
 80024c6:	fba3 3401 	umull	r3, r4, r3, r1
 80024ca:	4422      	add	r2, r4
 80024cc:	4614      	mov	r4, r2
 80024ce:	e9c7 3400 	strd	r3, r4, [r7]
 80024d2:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 80024d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LpGetElapsedTime+0x68>)
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f7fe fb14 	bl	8000b0c <__aeabi_uldivmod>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <LpGetElapsedTime+0x60>)
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f80b 	bl	800350c <HW_TS_Stop>

  return (uint32_t)return_value;
 80024f6:	683b      	ldr	r3, [r7, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	20000a80 	.word	0x20000a80
 8002504:	00077240 	.word	0x00077240
 8002508:	000f4240 	.word	0x000f4240

0800250c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800250c:	b4b0      	push	{r4, r5, r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_GeometryBuilder+0x54>)
 8002518:	461c      	mov	r4, r3
 800251a:	4615      	mov	r5, r2
 800251c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <_GeometryBuilder+0x58>)
 8002530:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002534:	4615      	mov	r5, r2
 8002536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800253c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <_GeometryBuilder+0x5c>)
 800254a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800254e:	4613      	mov	r3, r2
 8002550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bcb0      	pop	{r4, r5, r7}
 800255e:	4770      	bx	lr
 8002560:	20000008 	.word	0x20000008
 8002564:	20000038 	.word	0x20000038
 8002568:	20000a88 	.word	0x20000a88

0800256c <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b096      	sub	sp, #88	; 0x58
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2bc7      	cmp	r3, #199	; 0xc7
 800257c:	f340 8093 	ble.w	80026a6 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3360      	adds	r3, #96	; 0x60
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	3310      	adds	r3, #16
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002598:	2300      	movs	r3, #0
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
 800259c:	e011      	b.n	80025c2 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025a6:	3104      	adds	r1, #4
 80025a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf38      	it	cc
 80025b8:	4613      	movcc	r3, r2
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025be:	3301      	adds	r3, #1
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	ddea      	ble.n	800259e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	2b0b      	cmp	r3, #11
 80025cc:	d86b      	bhi.n	80026a6 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80025dc:	f107 0214 	add.w	r2, r7, #20
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	eef0 0a47 	vmov.f32	s1, s14
 80025ea:	eeb0 0a67 	vmov.f32	s0, s15
 80025ee:	f000 f8e5 	bl	80027bc <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80025fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002600:	ed93 7a03 	vldr	s14, [r3, #12]
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	4619      	mov	r1, r3
 800260e:	eef0 0a47 	vmov.f32	s1, s14
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	f000 f8d1 	bl	80027bc <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3370      	adds	r3, #112	; 0x70
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	327c      	adds	r2, #124	; 0x7c
 8002622:	f107 0520 	add.w	r5, r7, #32
 8002626:	f107 0408 	add.w	r4, r7, #8
 800262a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800262e:	f107 0014 	add.w	r0, r7, #20
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	462b      	mov	r3, r5
 8002638:	4622      	mov	r2, r4
 800263a:	f000 f945 	bl	80028c8 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800263e:	2300      	movs	r3, #0
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
 8002642:	e019      	b.n	8002678 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	331c      	adds	r3, #28
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	ed93 7a00 	vldr	s14, [r3]
 8002652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	331c      	adds	r3, #28
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	3301      	adds	r3, #1
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	2b02      	cmp	r3, #2
 800267c:	dde2      	ble.n	8002644 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 800267e:	f003 fa3d 	bl	8005afc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <consume_angles+0x144>)
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002694:	2300      	movs	r3, #0
 8002696:	2200      	movs	r2, #0
 8002698:	f00b fc86 	bl	800dfa8 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <consume_angles+0x148>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00b fba3 	bl	800ddec <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80026a6:	bf00      	nop
 80026a8:	3750      	adds	r7, #80	; 0x50
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2002777c 	.word	0x2002777c
 80026b4:	20027cb4 	.word	0x20027cb4

080026b8 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3304      	adds	r3, #4
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3308      	adds	r3, #8
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3308      	adds	r3, #8
 80026dc:	edd3 6a00 	vldr	s13, [r3]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3304      	adds	r3, #4
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3308      	adds	r3, #8
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 6a00 	vldr	s13, [r3]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3308      	adds	r3, #8
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3304      	adds	r3, #4
 800273c:	edd3 6a00 	vldr	s13, [r3]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3308      	adds	r3, #8
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	edc3 7a00 	vstr	s15, [r3]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vec_length>:

float vec_length(float *vec) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	461a      	mov	r2, r3
 8002770:	2103      	movs	r1, #3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f011 fff8 	bl	8014768 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002782:	edd7 7a05 	vldr	s15, [r7, #20]
 8002786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	db09      	blt.n	80027a4 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002790:	ed97 0a05 	vldr	s0, [r7, #20]
 8002794:	f012 fc5c 	bl	8015050 <sqrtf>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	edc3 7a00 	vstr	s15, [r3]
 80027a2:	e003      	b.n	80027ac <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

    return res;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	ee07 3a90 	vmov	s15, r3
}
 80027b2:	eeb0 0a67 	vmov.f32	s0, s15
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09a      	sub	sp, #104	; 0x68
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6178      	str	r0, [r7, #20]
 80027c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80027c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 80027d0:	ed97 0a04 	vldr	s0, [r7, #16]
 80027d4:	f012 f8f4 	bl	80149c0 <arm_cos_f32>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80027ea:	f012 f8a3 	bl	8014934 <arm_sin_f32>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	eef1 7a67 	vneg.f32	s15, s15
 80027f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	ed97 0a03 	vldr	s0, [r7, #12]
 8002804:	f012 f8dc 	bl	80149c0 <arm_cos_f32>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002810:	ed97 0a03 	vldr	s0, [r7, #12]
 8002814:	f012 f88e 	bl	8014934 <arm_sin_f32>
 8002818:	eef0 7a40 	vmov.f32	s15, s0
 800281c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800282c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002830:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff3d 	bl	80026b8 <vec_cross_product>
    float len = vec_length(ray);
 800283e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff8d 	bl	8002762 <vec_length>
 8002848:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 800284c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002850:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002854:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002858:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800285c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002860:	2203      	movs	r2, #3
 8002862:	eeb0 0a66 	vmov.f32	s0, s13
 8002866:	4618      	mov	r0, r3
 8002868:	f012 f94e 	bl	8014b08 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 800286c:	2303      	movs	r3, #3
 800286e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002870:	2303      	movs	r3, #3
 8002872:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	330c      	adds	r3, #12
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 800287a:	2303      	movs	r3, #3
 800287c:	863b      	strh	r3, [r7, #48]	; 0x30
 800287e:	2301      	movs	r3, #1
 8002880:	867b      	strh	r3, [r7, #50]	; 0x32
 8002882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8002888:	2303      	movs	r3, #3
 800288a:	853b      	strh	r3, [r7, #40]	; 0x28
 800288c:	2301      	movs	r3, #1
 800288e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002894:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002898:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800289c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a0:	4618      	mov	r0, r3
 80028a2:	f011 ffa7 	bl	80147f4 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f107 011c 	add.w	r1, r7, #28
 80028b8:	2303      	movs	r3, #3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	f012 f9c0 	bl	8014c40 <arm_add_f32>
}
 80028c0:	bf00      	nop
 80028c2:	3768      	adds	r7, #104	; 0x68
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b098      	sub	sp, #96	; 0x60
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 80028d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 80028e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028e6:	2303      	movs	r3, #3
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f012 f8b2 	bl	8014a54 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 80028f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028f4:	2203      	movs	r2, #3
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f012 f949 	bl	8014b90 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 80028fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002902:	2203      	movs	r2, #3
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	f012 f942 	bl	8014b90 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 800290c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002910:	2203      	movs	r2, #3
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f012 f93b 	bl	8014b90 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800291a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800291e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002922:	2203      	movs	r2, #3
 8002924:	68b8      	ldr	r0, [r7, #8]
 8002926:	f012 f933 	bl	8014b90 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800292a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800292e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002932:	2203      	movs	r2, #3
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f012 f92b 	bl	8014b90 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800293a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800293e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002946:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800294a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 800295a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800295e:	eef0 7ae7 	vabs.f32	s15, s15
 8002962:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002a80 <intersect_lines+0x1b8>
 8002966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d501      	bpl.n	8002974 <intersect_lines+0xac>
        return 0;
 8002970:	2300      	movs	r3, #0
 8002972:	e081      	b.n	8002a78 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002974:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002978:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002984:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002990:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002998:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 800299c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80029a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ac:	2203      	movs	r2, #3
 80029ae:	4619      	mov	r1, r3
 80029b0:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80029b4:	68b8      	ldr	r0, [r7, #8]
 80029b6:	f012 f8a7 	bl	8014b08 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80029ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029be:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029c2:	2303      	movs	r3, #3
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	f012 f93b 	bl	8014c40 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80029ca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80029ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80029da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029e6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	2203      	movs	r2, #3
 8002a04:	4619      	mov	r1, r3
 8002a06:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f012 f87c 	bl	8014b08 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a10:	f107 021c 	add.w	r2, r7, #28
 8002a14:	f107 001c 	add.w	r0, r7, #28
 8002a18:	2303      	movs	r3, #3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f012 f910 	bl	8014c40 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	f107 011c 	add.w	r1, r7, #28
 8002a34:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f012 f901 	bl	8014c40 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2203      	movs	r2, #3
 8002a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a46:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f012 f85c 	bl	8014b08 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a50:	f107 0210 	add.w	r2, r7, #16
 8002a54:	f107 011c 	add.w	r1, r7, #28
 8002a58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f011 fff9 	bl	8014a54 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe7b 	bl	8002762 <vec_length>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3760      	adds	r7, #96	; 0x60
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	3727c5ac 	.word	0x3727c5ac

08002a84 <LL_AHB2_GRP1_EnableClock>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002acc:	2004      	movs	r0, #4
 8002ace:	f7ff ffd9 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad2:	2080      	movs	r0, #128	; 0x80
 8002ad4:	f7ff ffd6 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f7ff ffd3 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7ff ffd0 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae4:	2010      	movs	r0, #16
 8002ae6:	f7ff ffcd 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aea:	2308      	movs	r3, #8
 8002aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aee:	2303      	movs	r3, #3
 8002af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4829      	ldr	r0, [pc, #164]	; (8002ba0 <MX_GPIO_Init+0xe8>)
 8002afc:	f005 f8b8 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b00:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002b04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b06:	2303      	movs	r3, #3
 8002b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <MX_GPIO_Init+0xec>)
 8002b14:	f005 f8ac 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b18:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2e:	f005 f89f 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b32:	2320      	movs	r3, #32
 8002b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_GPIO_Init+0xf0>)
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f005 f893 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <MX_GPIO_Init+0xf4>)
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <MX_GPIO_Init+0xec>)
 8002b5c:	f005 f888 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b60:	2310      	movs	r3, #16
 8002b62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b64:	2303      	movs	r3, #3
 8002b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <MX_GPIO_Init+0xf8>)
 8002b72:	f005 f87d 	bl	8007c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2105      	movs	r1, #5
 8002b7a:	2008      	movs	r0, #8
 8002b7c:	f004 fcf1 	bl	8007562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b80:	2008      	movs	r0, #8
 8002b82:	f004 fd08 	bl	8007596 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2105      	movs	r1, #5
 8002b8a:	2017      	movs	r0, #23
 8002b8c:	f004 fce9 	bl	8007562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b90:	2017      	movs	r0, #23
 8002b92:	f004 fd00 	bl	8007596 <HAL_NVIC_EnableIRQ>

}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	48001c00 	.word	0x48001c00
 8002ba4:	48000400 	.word	0x48000400
 8002ba8:	10210000 	.word	0x10210000
 8002bac:	10110000 	.word	0x10110000
 8002bb0:	48001000 	.word	0x48001000

08002bb4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bc2:	4905      	ldr	r1, [pc, #20]	; (8002bd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	58000800 	.word	0x58000800

08002bdc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	58000800 	.word	0x58000800

08002c00 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c16:	e005      	b.n	8002c24 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <ReadRtcSsrValue+0x3c>)
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1f5      	bne.n	8002c18 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c2c:	683b      	ldr	r3, [r7, #0]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40002800 	.word	0x40002800

08002c40 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002c50:	79ba      	ldrb	r2, [r7, #6]
 8002c52:	491d      	ldr	r1, [pc, #116]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3315      	adds	r3, #21
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d009      	beq.n	8002c7e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3314      	adds	r3, #20
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3315      	adds	r3, #21
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	79ba      	ldrb	r2, [r7, #6]
 8002ca4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002ca6:	79ba      	ldrb	r2, [r7, #6]
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <LinkTimerAfter+0x88>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3315      	adds	r3, #21
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	701a      	strb	r2, [r3, #0]

  return;
 8002cba:	bf00      	nop
}
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000138 	.word	0x20000138

08002ccc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <LinkTimerBefore+0xb8>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	79ba      	ldrb	r2, [r7, #6]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d032      	beq.n	8002d4e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002ce8:	79ba      	ldrb	r2, [r7, #6]
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	4922      	ldr	r1, [pc, #136]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3315      	adds	r3, #21
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	491d      	ldr	r1, [pc, #116]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3315      	adds	r3, #21
 8002d20:	79ba      	ldrb	r2, [r7, #6]
 8002d22:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d24:	79fa      	ldrb	r2, [r7, #7]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3314      	adds	r3, #20
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d38:	79ba      	ldrb	r2, [r7, #6]
 8002d3a:	4913      	ldr	r1, [pc, #76]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3314      	adds	r3, #20
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002d4c:	e014      	b.n	8002d78 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d4e:	79fa      	ldrb	r2, [r7, #7]
 8002d50:	490d      	ldr	r1, [pc, #52]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3315      	adds	r3, #21
 8002d5e:	79ba      	ldrb	r2, [r7, #6]
 8002d60:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d62:	79ba      	ldrb	r2, [r7, #6]
 8002d64:	4908      	ldr	r1, [pc, #32]	; (8002d88 <LinkTimerBefore+0xbc>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3314      	adds	r3, #20
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	701a      	strb	r2, [r3, #0]
  return;
 8002d76:	bf00      	nop
}
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	200001c8 	.word	0x200001c8
 8002d88:	20000138 	.word	0x20000138

08002d8c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d96:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <linkTimer+0x144>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d118      	bne.n	8002dd2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <linkTimer+0x144>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <linkTimer+0x148>)
 8002da8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002daa:	4a49      	ldr	r2, [pc, #292]	; (8002ed0 <linkTimer+0x144>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <linkTimer+0x14c>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <linkTimer+0x150>)
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	81fb      	strh	r3, [r7, #14]
 8002dd0:	e078      	b.n	8002ec4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002dd2:	f000 f909 	bl	8002fe8 <ReturnTimeElapsed>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002dda:	79fa      	ldrb	r2, [r7, #7]
 8002ddc:	493e      	ldr	r1, [pc, #248]	; (8002ed8 <linkTimer+0x14c>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	3308      	adds	r3, #8
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4419      	add	r1, r3
 8002df2:	4839      	ldr	r0, [pc, #228]	; (8002ed8 <linkTimer+0x14c>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3308      	adds	r3, #8
 8002e00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <linkTimer+0x14c>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <linkTimer+0x144>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <linkTimer+0x14c>)
 8002e20:	460b      	mov	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	440b      	add	r3, r1
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d337      	bcc.n	8002ea4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <linkTimer+0x144>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e3a:	7b7a      	ldrb	r2, [r7, #13]
 8002e3c:	4926      	ldr	r1, [pc, #152]	; (8002ed8 <linkTimer+0x14c>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	3315      	adds	r3, #21
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e4e:	e013      	b.n	8002e78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002e50:	7b7a      	ldrb	r2, [r7, #13]
 8002e52:	4921      	ldr	r1, [pc, #132]	; (8002ed8 <linkTimer+0x14c>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3315      	adds	r3, #21
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002e64:	7b7a      	ldrb	r2, [r7, #13]
 8002e66:	491c      	ldr	r1, [pc, #112]	; (8002ed8 <linkTimer+0x14c>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3315      	adds	r3, #21
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002e78:	7b3b      	ldrb	r3, [r7, #12]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d00b      	beq.n	8002e96 <linkTimer+0x10a>
 8002e7e:	7b3a      	ldrb	r2, [r7, #12]
 8002e80:	4915      	ldr	r1, [pc, #84]	; (8002ed8 <linkTimer+0x14c>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d2dc      	bcs.n	8002e50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002e96:	7b7a      	ldrb	r2, [r7, #13]
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fecf 	bl	8002c40 <LinkTimerAfter>
 8002ea2:	e00f      	b.n	8002ec4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <linkTimer+0x144>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff0c 	bl	8002ccc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <linkTimer+0x144>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <linkTimer+0x148>)
 8002ebc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <linkTimer+0x144>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200001c8 	.word	0x200001c8
 8002ed4:	200001c9 	.word	0x200001c9
 8002ed8:	20000138 	.word	0x20000138
 8002edc:	200001cc 	.word	0x200001cc

08002ee0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	79fa      	ldrb	r2, [r7, #7]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d111      	bne.n	8002f20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <UnlinkTimer+0xfc>)
 8002f04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3315      	adds	r3, #21
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	e03e      	b.n	8002f9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3314      	adds	r3, #20
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f34:	79fa      	ldrb	r2, [r7, #7]
 8002f36:	492a      	ldr	r1, [pc, #168]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3315      	adds	r3, #21
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002f48:	79f9      	ldrb	r1, [r7, #7]
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f4e:	460b      	mov	r3, r1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4403      	add	r3, r0
 8002f58:	3315      	adds	r3, #21
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2d8      	uxtb	r0, r3
 8002f5e:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d013      	beq.n	8002f9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002f76:	79f9      	ldrb	r1, [r7, #7]
 8002f78:	7bba      	ldrb	r2, [r7, #14]
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4403      	add	r3, r0
 8002f86:	3314      	adds	r3, #20
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2d8      	uxtb	r0, r3
 8002f8c:	4914      	ldr	r1, [pc, #80]	; (8002fe0 <UnlinkTimer+0x100>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3314      	adds	r3, #20
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <UnlinkTimer+0x100>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	330c      	adds	r3, #12
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <UnlinkTimer+0xf8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d107      	bne.n	8002fcc <UnlinkTimer+0xec>
 8002fbc:	79bb      	ldrb	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <UnlinkTimer+0x104>)
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  return;
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
}
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200001c8 	.word	0x200001c8
 8002fdc:	200001c9 	.word	0x200001c9
 8002fe0:	20000138 	.word	0x20000138
 8002fe4:	200001cc 	.word	0x200001cc

08002fe8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <ReturnTimeElapsed+0x70>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d026      	beq.n	8003046 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002ff8:	f7ff fe02 	bl	8002c00 <ReadRtcSsrValue>
 8002ffc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <ReturnTimeElapsed+0x70>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d805      	bhi.n	8003014 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <ReturnTimeElapsed+0x70>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e00a      	b.n	800302a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <ReturnTimeElapsed+0x74>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <ReturnTimeElapsed+0x70>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4413      	add	r3, r2
 8003028:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <ReturnTimeElapsed+0x78>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <ReturnTimeElapsed+0x7c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	40d3      	lsrs	r3, r2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	e001      	b.n	800304a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	b29b      	uxth	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200001cc 	.word	0x200001cc
 800305c:	20000a9e 	.word	0x20000a9e
 8003060:	20000a9d 	.word	0x20000a9d
 8003064:	20000a9c 	.word	0x20000a9c

08003068 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003078:	f7ff fdc2 	bl	8002c00 <ReadRtcSsrValue>
 800307c:	4602      	mov	r2, r0
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <RestartWakeupCounter+0xa8>)
 8003080:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003082:	2003      	movs	r0, #3
 8003084:	f004 faa7 	bl	80075d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003088:	e03e      	b.n	8003108 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d803      	bhi.n	8003098 <RestartWakeupCounter+0x30>
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <RestartWakeupCounter+0xac>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d002      	beq.n	800309e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	3b01      	subs	r3, #1
 800309c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800309e:	bf00      	nop
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f7      	beq.n	80030a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80030c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <RestartWakeupCounter+0xb4>)
 80030c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030cc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80030ce:	2003      	movs	r0, #3
 80030d0:	f004 fa8f 	bl	80075f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <RestartWakeupCounter+0xb8>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <RestartWakeupCounter+0xb8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030e4:	f7ff fd8c 	bl	8002c00 <ReadRtcSsrValue>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <RestartWakeupCounter+0xa8>)
 80030ec:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <RestartWakeupCounter+0xb0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003100:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003102:	f3af 8000 	nop.w
  return ;
 8003106:	bf00      	nop
}
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001cc 	.word	0x200001cc
 8003114:	20000a9c 	.word	0x20000a9c
 8003118:	20000a98 	.word	0x20000a98
 800311c:	58000800 	.word	0x58000800
 8003120:	40002800 	.word	0x40002800

08003124 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <RescheduleTimerList+0x124>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d108      	bne.n	800314a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003138:	bf00      	nop
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <RescheduleTimerList+0x128>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f7      	bne.n	800313a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <RescheduleTimerList+0x128>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b3e      	ldr	r3, [pc, #248]	; (800324c <RescheduleTimerList+0x128>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800315e:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <RescheduleTimerList+0x12c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	493b      	ldr	r1, [pc, #236]	; (8003254 <RescheduleTimerList+0x130>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3308      	adds	r3, #8
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003178:	f7ff ff36 	bl	8002fe8 <ReturnTimeElapsed>
 800317c:	4603      	mov	r3, r0
 800317e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d205      	bcs.n	8003194 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <RescheduleTimerList+0x134>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e04d      	b.n	8003230 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <RescheduleTimerList+0x138>)
 8003198:	8812      	ldrh	r2, [r2, #0]
 800319a:	b292      	uxth	r2, r2
 800319c:	4413      	add	r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d906      	bls.n	80031b4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <RescheduleTimerList+0x138>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <RescheduleTimerList+0x134>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e03d      	b.n	8003230 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <RescheduleTimerList+0x134>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031c4:	e034      	b.n	8003230 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	4922      	ldr	r1, [pc, #136]	; (8003254 <RescheduleTimerList+0x130>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3308      	adds	r3, #8
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20a      	bcs.n	80031f4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	491c      	ldr	r1, [pc, #112]	; (8003254 <RescheduleTimerList+0x130>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	3308      	adds	r3, #8
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e013      	b.n	800321c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	4917      	ldr	r1, [pc, #92]	; (8003254 <RescheduleTimerList+0x130>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	3308      	adds	r3, #8
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	1ac9      	subs	r1, r1, r3
 800320c:	4811      	ldr	r0, [pc, #68]	; (8003254 <RescheduleTimerList+0x130>)
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4403      	add	r3, r0
 8003218:	3308      	adds	r3, #8
 800321a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	490d      	ldr	r1, [pc, #52]	; (8003254 <RescheduleTimerList+0x130>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3315      	adds	r3, #21
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d1c7      	bne.n	80031c6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003236:	89bb      	ldrh	r3, [r7, #12]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff15 	bl	8003068 <RestartWakeupCounter>

  return ;
 800323e:	bf00      	nop
}
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40002800 	.word	0x40002800
 800324c:	20000a98 	.word	0x20000a98
 8003250:	200001c8 	.word	0x200001c8
 8003254:	20000138 	.word	0x20000138
 8003258:	200001d0 	.word	0x200001d0
 800325c:	20000aa0 	.word	0x20000aa0

08003260 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800326c:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <HW_TS_Init+0x194>)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003272:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <HW_TS_Init+0x194>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	22ca      	movs	r2, #202	; 0xca
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
 800327c:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HW_TS_Init+0x194>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2253      	movs	r2, #83	; 0x53
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <HW_TS_Init+0x198>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HW_TS_Init+0x198>)
 800328c:	f043 0320 	orr.w	r3, r3, #32
 8003290:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HW_TS_Init+0x198>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f1c3 0304 	rsb	r3, r3, #4
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HW_TS_Init+0x19c>)
 80032a6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HW_TS_Init+0x198>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032b0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032b4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	fa92 f2a2 	rbit	r2, r2
 80032bc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	40d3      	lsrs	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HW_TS_Init+0x1a0>)
 80032d0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HW_TS_Init+0x198>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <HW_TS_Init+0x1a4>)
 80032e4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HW_TS_Init+0x1a4>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	4a44      	ldr	r2, [pc, #272]	; (8003400 <HW_TS_Init+0x1a0>)
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032f8:	4a40      	ldr	r2, [pc, #256]	; (80033fc <HW_TS_Init+0x19c>)
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	40d3      	lsrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003306:	4293      	cmp	r3, r2
 8003308:	d904      	bls.n	8003314 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HW_TS_Init+0x1a8>)
 800330c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	e003      	b.n	800331c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	b29a      	uxth	r2, r3
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HW_TS_Init+0x1a8>)
 800331a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800331c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003320:	f7ff fc5c 	bl	8002bdc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003324:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003328:	f7ff fc44 	bl	8002bb4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d143      	bne.n	80033ba <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003332:	4b36      	ldr	r3, [pc, #216]	; (800340c <HW_TS_Init+0x1ac>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <HW_TS_Init+0x1b0>)
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
 8003344:	e00c      	b.n	8003360 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003346:	7dfa      	ldrb	r2, [r7, #23]
 8003348:	4932      	ldr	r1, [pc, #200]	; (8003414 <HW_TS_Init+0x1b4>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	330c      	adds	r3, #12
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	3301      	adds	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d9ef      	bls.n	8003346 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HW_TS_Init+0x1b8>)
 8003368:	2206      	movs	r2, #6
 800336a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HW_TS_Init+0x194>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HW_TS_Init+0x194>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HW_TS_Init+0x194>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HW_TS_Init+0x194>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003394:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x1bc>)
 8003398:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800339c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800339e:	2003      	movs	r0, #3
 80033a0:	f004 f927 	bl	80075f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HW_TS_Init+0x194>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HW_TS_Init+0x194>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e00a      	b.n	80033d0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HW_TS_Init+0x194>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033ca:	2003      	movs	r0, #3
 80033cc:	f004 f903 	bl	80075d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HW_TS_Init+0x194>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80033da:	2200      	movs	r2, #0
 80033dc:	2106      	movs	r1, #6
 80033de:	2003      	movs	r0, #3
 80033e0:	f004 f8bf 	bl	8007562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80033e4:	2003      	movs	r0, #3
 80033e6:	f004 f8d6 	bl	8007596 <HAL_NVIC_EnableIRQ>

  return;
 80033ea:	bf00      	nop
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000a98 	.word	0x20000a98
 80033f8:	40002800 	.word	0x40002800
 80033fc:	20000a9c 	.word	0x20000a9c
 8003400:	20000a9d 	.word	0x20000a9d
 8003404:	20000a9e 	.word	0x20000a9e
 8003408:	20000aa0 	.word	0x20000aa0
 800340c:	200001d0 	.word	0x200001d0
 8003410:	200001cc 	.word	0x200001cc
 8003414:	20000138 	.word	0x20000138
 8003418:	200001c8 	.word	0x200001c8
 800341c:	58000800 	.word	0x58000800

08003420 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003420:	b480      	push	{r7}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	61fb      	str	r3, [r7, #28]
  return(result);
 800343c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800343e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003442:	e004      	b.n	800344e <HW_TS_Create+0x2e>
  {
    loop++;
 8003444:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003448:	3301      	adds	r3, #1
 800344a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800344e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003452:	2b05      	cmp	r3, #5
 8003454:	d80c      	bhi.n	8003470 <HW_TS_Create+0x50>
 8003456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800345a:	492b      	ldr	r1, [pc, #172]	; (8003508 <HW_TS_Create+0xe8>)
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	330c      	adds	r3, #12
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e9      	bne.n	8003444 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003474:	2b06      	cmp	r3, #6
 8003476:	d037      	beq.n	80034e8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003478:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800347c:	4922      	ldr	r1, [pc, #136]	; (8003508 <HW_TS_Create+0xe8>)
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	330c      	adds	r3, #12
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <HW_TS_Create+0xe8>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	3310      	adds	r3, #16
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034b2:	4915      	ldr	r1, [pc, #84]	; (8003508 <HW_TS_Create+0xe8>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	330d      	adds	r3, #13
 80034c0:	79fa      	ldrb	r2, [r7, #7]
 80034c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c8:	490f      	ldr	r1, [pc, #60]	; (8003508 <HW_TS_Create+0xe8>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034de:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034e6:	e007      	b.n	80034f8 <HW_TS_Create+0xd8>
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	372c      	adds	r7, #44	; 0x2c
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000138 	.word	0x20000138

0800350c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	60fb      	str	r3, [r7, #12]
  return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003522:	2003      	movs	r0, #3
 8003524:	f004 f845 	bl	80075b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HW_TS_Stop+0xfc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ca      	movs	r2, #202	; 0xca
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HW_TS_Stop+0xfc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2253      	movs	r2, #83	; 0x53
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	4933      	ldr	r1, [pc, #204]	; (800360c <HW_TS_Stop+0x100>)
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	330c      	adds	r3, #12
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d148      	bne.n	80035e6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fcc1 	bl	8002ee0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800355e:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <HW_TS_Stop+0x104>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d135      	bne.n	80035d6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HW_TS_Stop+0x108>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d108      	bne.n	800358a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003578:	bf00      	nop
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HW_TS_Stop+0xfc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f7      	bne.n	800357a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HW_TS_Stop+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HW_TS_Stop+0xfc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800359e:	bf00      	nop
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HW_TS_Stop+0xfc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f7      	beq.n	80035a0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HW_TS_Stop+0xfc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035c4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HW_TS_Stop+0x10c>)
 80035c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035cc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035ce:	2003      	movs	r0, #3
 80035d0:	f004 f80f 	bl	80075f2 <HAL_NVIC_ClearPendingIRQ>
 80035d4:	e007      	b.n	80035e6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HW_TS_Stop+0x110>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	7cfa      	ldrb	r2, [r7, #19]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80035e2:	f7ff fd9f 	bl	8003124 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HW_TS_Stop+0xfc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	22ff      	movs	r2, #255	; 0xff
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80035f0:	2003      	movs	r0, #3
 80035f2:	f003 ffd0 	bl	8007596 <HAL_NVIC_EnableIRQ>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003600:	bf00      	nop
}
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000a98 	.word	0x20000a98
 800360c:	20000138 	.word	0x20000138
 8003610:	200001c8 	.word	0x200001c8
 8003614:	40002800 	.word	0x40002800
 8003618:	58000800 	.word	0x58000800
 800361c:	200001c9 	.word	0x200001c9

08003620 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	493b      	ldr	r1, [pc, #236]	; (800371c <HW_TS_Start+0xfc>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	330c      	adds	r3, #12
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d103      	bne.n	800364c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff60 	bl	800350c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	60fb      	str	r3, [r7, #12]
  return(result);
 8003652:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003656:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003658:	2003      	movs	r0, #3
 800365a:	f003 ffaa 	bl	80075b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HW_TS_Start+0x100>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	22ca      	movs	r2, #202	; 0xca
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HW_TS_Start+0x100>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2253      	movs	r2, #83	; 0x53
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003672:	79fa      	ldrb	r2, [r7, #7]
 8003674:	4929      	ldr	r1, [pc, #164]	; (800371c <HW_TS_Start+0xfc>)
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	330c      	adds	r3, #12
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003686:	79fa      	ldrb	r2, [r7, #7]
 8003688:	4924      	ldr	r1, [pc, #144]	; (800371c <HW_TS_Start+0xfc>)
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	491f      	ldr	r1, [pc, #124]	; (800371c <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	3304      	adds	r3, #4
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fb6b 	bl	8002d8c <linkTimer>
 80036b6:	4603      	mov	r3, r0
 80036b8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036ba:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HW_TS_Start+0x104>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HW_TS_Start+0x108>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	7c7a      	ldrb	r2, [r7, #17]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d002      	beq.n	80036d2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036cc:	f7ff fd2a 	bl	8003124 <RescheduleTimerList>
 80036d0:	e013      	b.n	80036fa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4911      	ldr	r1, [pc, #68]	; (800371c <HW_TS_Start+0xfc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	3308      	adds	r3, #8
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	1ac9      	subs	r1, r1, r3
 80036ea:	480c      	ldr	r0, [pc, #48]	; (800371c <HW_TS_Start+0xfc>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4403      	add	r3, r0
 80036f6:	3308      	adds	r3, #8
 80036f8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HW_TS_Start+0x100>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003704:	2003      	movs	r0, #3
 8003706:	f003 ff46 	bl	8007596 <HAL_NVIC_EnableIRQ>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003714:	bf00      	nop
}
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000138 	.word	0x20000138
 8003720:	20000a98 	.word	0x20000a98
 8003724:	200001c8 	.word	0x200001c8
 8003728:	200001c9 	.word	0x200001c9

0800372c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003732:	f3ef 8310 	mrs	r3, PRIMASK
 8003736:	60bb      	str	r3, [r7, #8]
  return(result);
 8003738:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800373a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d112      	bne.n	8003772 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 8003752:	f7ff fc49 	bl	8002fe8 <ReturnTimeElapsed>
 8003756:	4603      	mov	r3, r0
 8003758:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	429a      	cmp	r2, r3
 8003760:	d904      	bls.n	800376c <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8003762:	89fa      	ldrh	r2, [r7, #14]
 8003764:	89bb      	ldrh	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	82fb      	strh	r3, [r7, #22]
 800376a:	e005      	b.n	8003778 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	82fb      	strh	r3, [r7, #22]
 8003770:	e002      	b.n	8003778 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8003772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003776:	82fb      	strh	r3, [r7, #22]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 8003782:	8afb      	ldrh	r3, [r7, #22]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40002800 	.word	0x40002800

08003790 <LL_AHB2_GRP1_EnableClock>:
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037b4:	68fb      	ldr	r3, [r7, #12]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <MX_I2C1_Init+0x74>)
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <MX_I2C1_Init+0x78>)
 80037fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <MX_I2C1_Init+0x74>)
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <MX_I2C1_Init+0x7c>)
 8003802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <MX_I2C1_Init+0x74>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <MX_I2C1_Init+0x74>)
 800380c:	2201      	movs	r2, #1
 800380e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <MX_I2C1_Init+0x74>)
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <MX_I2C1_Init+0x74>)
 8003818:	2200      	movs	r2, #0
 800381a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_I2C1_Init+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_I2C1_Init+0x74>)
 8003824:	2200      	movs	r2, #0
 8003826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <MX_I2C1_Init+0x74>)
 800382a:	2200      	movs	r2, #0
 800382c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800382e:	480e      	ldr	r0, [pc, #56]	; (8003868 <MX_I2C1_Init+0x74>)
 8003830:	f004 fbbe 	bl	8007fb0 <HAL_I2C_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800383a:	f000 fd19 	bl	8004270 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800383e:	2100      	movs	r1, #0
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <MX_I2C1_Init+0x74>)
 8003842:	f006 fab6 	bl	8009db2 <HAL_I2CEx_ConfigAnalogFilter>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800384c:	f000 fd10 	bl	8004270 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003850:	2100      	movs	r1, #0
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_I2C1_Init+0x74>)
 8003854:	f006 faf8 	bl	8009e48 <HAL_I2CEx_ConfigDigitalFilter>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800385e:	f000 fd07 	bl	8004270 <Error_Handler>
  }

}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20027e6c 	.word	0x20027e6c
 800386c:	40005400 	.word	0x40005400
 8003870:	00e27cae 	.word	0x00e27cae

08003874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_I2C_MspInit+0x6c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d120      	bne.n	80038d8 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2001      	movs	r0, #1
 8003898:	f7ff ff7a 	bl	8003790 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800389c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a2:	2312      	movs	r3, #18
 80038a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038ae:	2304      	movs	r3, #4
 80038b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	4619      	mov	r1, r3
 80038b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038bc:	f004 f9d8 	bl	8007c70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80038c4:	f7ff ff7d 	bl	80037c2 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2105      	movs	r1, #5
 80038cc:	201e      	movs	r0, #30
 80038ce:	f003 fe48 	bl	8007562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038d2:	201e      	movs	r0, #30
 80038d4:	f003 fe5f 	bl	8007596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80038d8:	bf00      	nop
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40005400 	.word	0x40005400

080038e4 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <InertialSensingTask+0xec>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 80038f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80038f6:	2120      	movs	r1, #32
 80038f8:	204a      	movs	r0, #74	; 0x4a
 80038fa:	f7fe f857 	bl	80019ac <IMU_begin>

	uint32_t evt = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	2100      	movs	r1, #0
 8003908:	2001      	movs	r0, #1
 800390a:	f009 fe3d 	bl	800d588 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 800390e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003912:	f009 fecd 	bl	800d6b0 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003916:	2064      	movs	r0, #100	; 0x64
 8003918:	f7fe fb42 	bl	8001fa0 <IMU_enableRotationVector>
		osDelay(100);
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	f009 fec7 	bl	800d6b0 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <InertialSensingTask+0xf0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <InertialSensingTask+0xf4>)
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800392e:	f7fe fb45 	bl	8001fbc <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003932:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003936:	f009 febb 	bl	800d6b0 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 800393a:	2064      	movs	r0, #100	; 0x64
 800393c:	f009 feb8 	bl	800d6b0 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <InertialSensingTask+0xf8>)
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	2364      	movs	r3, #100	; 0x64
 8003946:	2200      	movs	r2, #0
 8003948:	4925      	ldr	r1, [pc, #148]	; (80039e0 <InertialSensingTask+0xfc>)
 800394a:	f00a fba1 	bl	800e090 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <InertialSensingTask+0x100>)
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	2200      	movs	r2, #0
 8003956:	4924      	ldr	r1, [pc, #144]	; (80039e8 <InertialSensingTask+0x104>)
 8003958:	f00a fb9a 	bl	800e090 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <InertialSensingTask+0x108>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	2200      	movs	r2, #0
 8003964:	491e      	ldr	r1, [pc, #120]	; (80039e0 <InertialSensingTask+0xfc>)
 8003966:	f00a fb1f 	bl	800dfa8 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 800396a:	2120      	movs	r1, #32
 800396c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003970:	f004 faee 	bl	8007f50 <HAL_GPIO_ReadPin>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <InertialSensingTask+0x9a>
 800397a:	f7fe f84f 	bl	8001a1c <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2002      	movs	r0, #2
 8003984:	f009 fe00 	bl	800d588 <osThreadFlagsWait>
 8003988:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0d2      	beq.n	800393a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 8003994:	f7fe faa4 	bl	8001ee0 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800399c:	f009 fe88 	bl	800d6b0 <osDelay>

				inertialEnabled = 0;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <InertialSensingTask+0xec>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <InertialSensingTask+0x108>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f00a fbe2 	bl	800e174 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <InertialSensingTask+0x100>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00a fbdd 	bl	800e174 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <InertialSensingTask+0xf8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f00a fbd8 	bl	800e174 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 80039c4:	200e      	movs	r0, #14
 80039c6:	f009 fd8f 	bl	800d4e8 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 80039ca:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80039cc:	e799      	b.n	8003902 <InertialSensingTask+0x1e>
 80039ce:	bf00      	nop
 80039d0:	20000aa2 	.word	0x20000aa2
 80039d4:	20000068 	.word	0x20000068
 80039d8:	20027efc 	.word	0x20027efc
 80039dc:	2002788c 	.word	0x2002788c
 80039e0:	20027ec0 	.word	0x20027ec0
 80039e4:	20027870 	.word	0x20027870
 80039e8:	20027ed8 	.word	0x20027ed8
 80039ec:	2002787c 	.word	0x2002787c

080039f0 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d105      	bne.n	8003a0c <HAL_GPIO_EXTI_Callback+0x1c>
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_GPIO_EXTI_Callback+0x24>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a08:	f7fe f808 	bl	8001a1c <IMU_dataAvailable>
	}
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000aa2 	.word	0x20000aa2

08003a18 <_Input>:
#include "captivate_config.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <_Input+0x3c>)
 8003a26:	f7fe fd71 	bl	800250c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	480a      	ldr	r0, [pc, #40]	; (8003a58 <_Input+0x40>)
 8003a2e:	f000 fe69 	bl	8004704 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <_Input+0x40>)
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <_Input+0x3c>)
 8003a36:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <_Input+0x40>)
 8003a3e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20027f28 	.word	0x20027f28
 8003a58:	20027fb0 	.word	0x20027fb0

08003a5c <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f009 fd8a 	bl	800d588 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003a74:	4818      	ldr	r0, [pc, #96]	; (8003ad8 <PulseHandlerTask+0x7c>)
 8003a76:	f008 f945 	bl	800bd04 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003a7a:	4818      	ldr	r0, [pc, #96]	; (8003adc <PulseHandlerTask+0x80>)
 8003a7c:	f003 fb8a 	bl	8007194 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003a80:	2100      	movs	r1, #0
 8003a82:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <PulseHandlerTask+0x84>)
 8003a84:	f7ff ffc8 	bl	8003a18 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <PulseHandlerTask+0x88>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	2200      	movs	r2, #0
 8003a92:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <PulseHandlerTask+0x8c>)
 8003a94:	f00a fafc 	bl	800e090 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <PulseHandlerTask+0x84>)
 8003a9a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003a9e:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <PulseHandlerTask+0x8c>)
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe63 	bl	800476c <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f009 fd6c 	bl	800d588 <osThreadFlagsWait>
 8003ab0:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0e5      	beq.n	8003a88 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003abc:	4807      	ldr	r0, [pc, #28]	; (8003adc <PulseHandlerTask+0x80>)
 8003abe:	f003 fbb3 	bl	8007228 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <PulseHandlerTask+0x7c>)
 8003ac4:	f008 f948 	bl	800bd58 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <PulseHandlerTask+0x88>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f00a fb51 	bl	800e174 <osMessageQueueReset>
				break;
 8003ad2:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ad4:	e7c8      	b.n	8003a68 <PulseHandlerTask+0xc>
 8003ad6:	bf00      	nop
 8003ad8:	20028490 	.word	0x20028490
 8003adc:	20027cdc 	.word	0x20027cdc
 8003ae0:	20027890 	.word	0x20027890
 8003ae4:	20027778 	.word	0x20027778
 8003ae8:	20027f08 	.word	0x20027f08

08003aec <get3D_location>:
}

VIVEVars vive_vars;
struct LogMessage statusMessage;

void get3D_location(void *arguments){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003af8:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <get3D_location+0xd0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00a f90e 	bl	800dd20 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <get3D_location+0xd4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f00a f908 	bl	800dd20 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <get3D_location+0xd8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	2200      	movs	r2, #0
 8003b1a:	492b      	ldr	r1, [pc, #172]	; (8003bc8 <get3D_location+0xdc>)
 8003b1c:	f00a fab8 	bl	800e090 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <get3D_location+0xdc>)
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d116      	bne.n	8003b56 <get3D_location+0x6a>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <get3D_location+0xd8>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <get3D_location+0xdc>)
 8003b32:	f00a fa39 	bl	800dfa8 <osMessageQueuePut>

		blinkActive = 1;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <get3D_location+0xe0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f009 fc6f 	bl	800d424 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <get3D_location+0xd4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f00a f8e6 	bl	800dd20 <osSemaphoreAcquire>
 8003b54:	e006      	b.n	8003b64 <get3D_location+0x78>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <get3D_location+0xd8>)
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <get3D_location+0xdc>)
 8003b60:	f00a fa22 	bl	800dfa8 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <get3D_location+0xe4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 31ff 	mov.w	r1, #4294967295
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f00a f8d7 	bl	800dd20 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003b72:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <get3D_location+0xe8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f009 fc53 	bl	800d424 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <get3D_location+0xd0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f00a f8ca 	bl	800dd20 <osSemaphoreAcquire>
#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <get3D_location+0xe4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00a f92b 	bl	800ddec <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <get3D_location+0xe8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f009 fc41 	bl	800d424 <osThreadFlagsSet>

	if(blinkActive){
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <get3D_location+0xc8>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <get3D_location+0xe0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f009 fc38 	bl	800d424 <osThreadFlagsSet>
	}

}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20027cb4 	.word	0x20027cb4
 8003bc0:	20027cbc 	.word	0x20027cbc
 8003bc4:	20027888 	.word	0x20027888
 8003bc8:	20027cd4 	.word	0x20027cd4
 8003bcc:	20027864 	.word	0x20027864
 8003bd0:	20027878 	.word	0x20027878
 8003bd4:	20027cc0 	.word	0x20027cc0

08003bd8 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003bee:	723b      	strb	r3, [r7, #8]
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	883b      	ldrh	r3, [r7, #0]
 8003bf6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <enqueue_pulse+0x38>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 0108 	add.w	r1, r7, #8
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	f00a f9d0 	bl	800dfa8 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20027778 	.word	0x20027778

08003c14 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c20:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f04f 31ff 	mov.w	r1, #4294967295
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00a f879 	bl	800dd20 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003c2e:	bf00      	nop
 8003c30:	2364      	movs	r3, #100	; 0x64
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2306      	movs	r3, #6
 8003c36:	4a64      	ldr	r2, [pc, #400]	; (8003dc8 <InterProcessorTask+0x1b4>)
 8003c38:	21e6      	movs	r1, #230	; 0xe6
 8003c3a:	4864      	ldr	r0, [pc, #400]	; (8003dcc <InterProcessorTask+0x1b8>)
 8003c3c:	f004 fa48 	bl	80080d0 <HAL_I2C_Master_Transmit>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f4      	bne.n	8003c30 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00a f8ce 	bl	800ddec <osSemaphoreRelease>

	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	2100      	movs	r1, #0
 8003c56:	2001      	movs	r0, #1
 8003c58:	f009 fc96 	bl	800d588 <osThreadFlagsWait>
 8003c5c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f3      	beq.n	8003c50 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <InterProcessorTask+0x1bc>)
 8003c6a:	4a5a      	ldr	r2, [pc, #360]	; (8003dd4 <InterProcessorTask+0x1c0>)
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	6019      	str	r1, [r3, #0]
 8003c70:	8892      	ldrh	r2, [r2, #4]
 8003c72:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00a f84f 	bl	800dd20 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003c82:	bf00      	nop
 8003c84:	2364      	movs	r3, #100	; 0x64
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2306      	movs	r3, #6
 8003c8a:	4a51      	ldr	r2, [pc, #324]	; (8003dd0 <InterProcessorTask+0x1bc>)
 8003c8c:	21e6      	movs	r1, #230	; 0xe6
 8003c8e:	484f      	ldr	r0, [pc, #316]	; (8003dcc <InterProcessorTask+0x1b8>)
 8003c90:	f004 fa1e 	bl	80080d0 <HAL_I2C_Master_Transmit>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f4      	bne.n	8003c84 <InterProcessorTask+0x70>
			osDelay(100);
 8003c9a:	2064      	movs	r0, #100	; 0x64
 8003c9c:	f009 fd08 	bl	800d6b0 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003ca0:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00a f8a1 	bl	800ddec <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2006      	movs	r0, #6
 8003cb2:	f009 fc69 	bl	800d588 <osThreadFlagsWait>
 8003cb6:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d05b      	beq.n	8003d7a <InterProcessorTask+0x166>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cc2:	4b40      	ldr	r3, [pc, #256]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00a f828 	bl	800dd20 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003cd0:	bf00      	nop
 8003cd2:	2364      	movs	r3, #100	; 0x64
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	4a3d      	ldr	r2, [pc, #244]	; (8003dd0 <InterProcessorTask+0x1bc>)
 8003cda:	21e6      	movs	r1, #230	; 0xe6
 8003cdc:	483b      	ldr	r0, [pc, #236]	; (8003dcc <InterProcessorTask+0x1b8>)
 8003cde:	f004 f9f7 	bl	80080d0 <HAL_I2C_Master_Transmit>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f4      	bne.n	8003cd2 <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003ce8:	2008      	movs	r0, #8
 8003cea:	f009 fbfd 	bl	800d4e8 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003cee:	bf00      	nop
 8003cf0:	2358      	movs	r3, #88	; 0x58
 8003cf2:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <InterProcessorTask+0x1c4>)
 8003cf4:	21e6      	movs	r1, #230	; 0xe6
 8003cf6:	4835      	ldr	r0, [pc, #212]	; (8003dcc <InterProcessorTask+0x1b8>)
 8003cf8:	f004 fbd4 	bl	80084a4 <HAL_I2C_Master_Receive_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f6      	bne.n	8003cf0 <InterProcessorTask+0xdc>
// 						osDelay(100);
// 						osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	2100      	movs	r1, #0
 8003d08:	200a      	movs	r0, #10
 8003d0a:	f009 fc3d 	bl	800d588 <osThreadFlagsWait>
 8003d0e:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003d10:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f00a f869 	bl	800ddec <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d14d      	bne.n	8003dc0 <InterProcessorTask+0x1ac>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <InterProcessorTask+0x1c4>)
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	4a2c      	ldr	r2, [pc, #176]	; (8003ddc <InterProcessorTask+0x1c8>)
 8003d2a:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <InterProcessorTask+0x1c4>)
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <InterProcessorTask+0x1c8>)
 8003d32:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	e01c      	b.n	8003d74 <InterProcessorTask+0x160>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <InterProcessorTask+0x1c4>)
 8003d40:	4413      	add	r3, r2
 8003d42:	2208      	movs	r2, #8
 8003d44:	4619      	mov	r1, r3
 8003d46:	4825      	ldr	r0, [pc, #148]	; (8003ddc <InterProcessorTask+0x1c8>)
 8003d48:	f010 fffe 	bl	8014d48 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	3305      	adds	r3, #5
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <InterProcessorTask+0x1c4>)
 8003d54:	4413      	add	r3, r2
 8003d56:	2208      	movs	r2, #8
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4821      	ldr	r0, [pc, #132]	; (8003de0 <InterProcessorTask+0x1cc>)
 8003d5c:	f010 fff4 	bl	8014d48 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <InterProcessorTask+0x1d0>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	2200      	movs	r2, #0
 8003d68:	491c      	ldr	r1, [pc, #112]	; (8003ddc <InterProcessorTask+0x1c8>)
 8003d6a:	f00a f91d 	bl	800dfa8 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	dddf      	ble.n	8003d3a <InterProcessorTask+0x126>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d092      	beq.n	8003caa <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f009 ffc7 	bl	800dd20 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003d92:	bf00      	nop
 8003d94:	2364      	movs	r3, #100	; 0x64
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2306      	movs	r3, #6
 8003d9a:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <InterProcessorTask+0x1b4>)
 8003d9c:	21e6      	movs	r1, #230	; 0xe6
 8003d9e:	480b      	ldr	r0, [pc, #44]	; (8003dcc <InterProcessorTask+0x1b8>)
 8003da0:	f004 f996 	bl	80080d0 <HAL_I2C_Master_Transmit>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f4      	bne.n	8003d94 <InterProcessorTask+0x180>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <InterProcessorTask+0x1b0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f00a f81c 	bl	800ddec <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <InterProcessorTask+0x1d0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00a f9db 	bl	800e174 <osMessageQueueReset>

					break;
 8003dbe:	e000      	b.n	8003dc2 <InterProcessorTask+0x1ae>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003dc0:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003dc2:	e745      	b.n	8003c50 <InterProcessorTask+0x3c>
 8003dc4:	20027878 	.word	0x20027878
 8003dc8:	080165ac 	.word	0x080165ac
 8003dcc:	20027e6c 	.word	0x20027e6c
 8003dd0:	200282d8 	.word	0x200282d8
 8003dd4:	20027780 	.word	0x20027780
 8003dd8:	20028280 	.word	0x20028280
 8003ddc:	200282e0 	.word	0x200282e0
 8003de0:	200282e8 	.word	0x200282e8
 8003de4:	20027884 	.word	0x20027884

08003de8 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2110      	movs	r1, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f009 fb14 	bl	800d424 <osThreadFlagsSet>
	test_1 = 1;
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20027cb8 	.word	0x20027cb8
 8003e10:	20000aa3 	.word	0x20000aa3

08003e14 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2108      	movs	r1, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f009 fafe 	bl	800d424 <osThreadFlagsSet>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20027cb8 	.word	0x20027cb8

08003e34 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af04      	add	r7, sp, #16
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]

	deviceAddress = ADDR << 1;
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <setup_LP5523+0xcc>)
 8003e46:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e48:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <setup_LP5523+0xd0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e50:	4618      	mov	r0, r3
 8003e52:	f009 ff65 	bl	800dd20 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003e56:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <setup_LP5523+0xd4>)
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <setup_LP5523+0xcc>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b299      	uxth	r1, r3
 8003e62:	2364      	movs	r3, #100	; 0x64
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	2301      	movs	r3, #1
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <setup_LP5523+0xd4>)
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2301      	movs	r3, #1
 8003e70:	2200      	movs	r2, #0
 8003e72:	4826      	ldr	r0, [pc, #152]	; (8003f0c <setup_LP5523+0xd8>)
 8003e74:	f004 fb86 	bl	8008584 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <setup_LP5523+0xd4>)
 8003e7a:	224f      	movs	r2, #79	; 0x4f
 8003e7c:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <setup_LP5523+0xcc>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b299      	uxth	r1, r3
 8003e84:	2364      	movs	r3, #100	; 0x64
 8003e86:	9302      	str	r3, [sp, #8]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <setup_LP5523+0xd4>)
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2301      	movs	r3, #1
 8003e92:	2236      	movs	r2, #54	; 0x36
 8003e94:	481d      	ldr	r0, [pc, #116]	; (8003f0c <setup_LP5523+0xd8>)
 8003e96:	f004 fb75 	bl	8008584 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <setup_LP5523+0xcc>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	2364      	movs	r3, #100	; 0x64
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <setup_LP5523+0xdc>)
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2301      	movs	r3, #1
 8003eae:	2216      	movs	r2, #22
 8003eb0:	4816      	ldr	r0, [pc, #88]	; (8003f0c <setup_LP5523+0xd8>)
 8003eb2:	f004 fb67 	bl	8008584 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <setup_LP5523+0xcc>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	2364      	movs	r3, #100	; 0x64
 8003ebe:	9302      	str	r3, [sp, #8]
 8003ec0:	2309      	movs	r3, #9
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <setup_LP5523+0xe0>)
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	2226      	movs	r2, #38	; 0x26
 8003ecc:	480f      	ldr	r0, [pc, #60]	; (8003f0c <setup_LP5523+0xd8>)
 8003ece:	f004 fb59 	bl	8008584 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <setup_LP5523+0xcc>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b299      	uxth	r1, r3
 8003ed8:	2364      	movs	r3, #100	; 0x64
 8003eda:	9302      	str	r3, [sp, #8]
 8003edc:	2309      	movs	r3, #9
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <setup_LP5523+0xe4>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	2206      	movs	r2, #6
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <setup_LP5523+0xd8>)
 8003eea:	f004 fb4b 	bl	8008584 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <setup_LP5523+0xd0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f009 ff7a 	bl	800ddec <osSemaphoreRelease>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200282f9 	.word	0x200282f9
 8003f04:	20027878 	.word	0x20027878
 8003f08:	200282f8 	.word	0x200282f8
 8003f0c:	20027e6c 	.word	0x20027e6c
 8003f10:	20000abc 	.word	0x20000abc
 8003f14:	2000006c 	.word	0x2000006c
 8003f18:	080165b4 	.word	0x080165b4

08003f1c <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af04      	add	r7, sp, #16
 8003f22:	6078      	str	r0, [r7, #4]
	memcpy(led_left_PWM, setColors, 9);
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <FrontLightsSet+0x78>)
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6810      	ldr	r0, [r2, #0]
 8003f2a:	6851      	ldr	r1, [r2, #4]
 8003f2c:	c303      	stmia	r3!, {r0, r1}
 8003f2e:	7a12      	ldrb	r2, [r2, #8]
 8003f30:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 0209 	add.w	r2, r3, #9
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <FrontLightsSet+0x7c>)
 8003f3a:	6810      	ldr	r0, [r2, #0]
 8003f3c:	6851      	ldr	r1, [r2, #4]
 8003f3e:	c303      	stmia	r3!, {r0, r1}
 8003f40:	7a12      	ldrb	r2, [r2, #8]
 8003f42:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <FrontLightsSet+0x80>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f009 fee7 	bl	800dd20 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8003f52:	2364      	movs	r3, #100	; 0x64
 8003f54:	9302      	str	r3, [sp, #8]
 8003f56:	2309      	movs	r3, #9
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <FrontLightsSet+0x78>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	2301      	movs	r3, #1
 8003f60:	2216      	movs	r2, #22
 8003f62:	2168      	movs	r1, #104	; 0x68
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <FrontLightsSet+0x84>)
 8003f66:	f004 fb0d 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003f6a:	2364      	movs	r3, #100	; 0x64
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	2309      	movs	r3, #9
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <FrontLightsSet+0x7c>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2301      	movs	r3, #1
 8003f78:	2216      	movs	r2, #22
 8003f7a:	216a      	movs	r1, #106	; 0x6a
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <FrontLightsSet+0x84>)
 8003f7e:	f004 fb01 	bl	8008584 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <FrontLightsSet+0x80>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f009 ff30 	bl	800ddec <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000aa4 	.word	0x20000aa4
 8003f98:	20000ab0 	.word	0x20000ab0
 8003f9c:	20027878 	.word	0x20027878
 8003fa0:	20027e6c 	.word	0x20027e6c

08003fa4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af04      	add	r7, sp, #16
 8003faa:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8003fac:	2034      	movs	r0, #52	; 0x34
 8003fae:	f7ff ff41 	bl	8003e34 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8003fb2:	2035      	movs	r0, #53	; 0x35
 8003fb4:	f7ff ff3e 	bl	8003e34 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f009 fb77 	bl	800d6b0 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8003fc2:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <ThreadFrontLightsTask+0xdc>)
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f107 010c 	add.w	r1, r7, #12
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f00a f85e 	bl	800e090 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e011      	b.n	8003ffe <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	425b      	negs	r3, r3
 8003fe6:	b2d9      	uxtb	r1, r3
 8003fe8:	4a26      	ldr	r2, [pc, #152]	; (8004084 <ThreadFrontLightsTask+0xe0>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	460a      	mov	r2, r1
 8003ff0:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b08      	cmp	r3, #8
 8004002:	ddea      	ble.n	8003fda <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	e011      	b.n	800402e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	425b      	negs	r3, r3
 8004016:	b2d9      	uxtb	r1, r3
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <ThreadFrontLightsTask+0xe4>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	460a      	mov	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3301      	adds	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b08      	cmp	r3, #8
 8004032:	ddea      	ble.n	800400a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <ThreadFrontLightsTask+0xe8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f04f 31ff 	mov.w	r1, #4294967295
 800403c:	4618      	mov	r0, r3
 800403e:	f009 fe6f 	bl	800dd20 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004042:	2364      	movs	r3, #100	; 0x64
 8004044:	9302      	str	r3, [sp, #8]
 8004046:	2309      	movs	r3, #9
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <ThreadFrontLightsTask+0xe0>)
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2301      	movs	r3, #1
 8004050:	2216      	movs	r2, #22
 8004052:	2168      	movs	r1, #104	; 0x68
 8004054:	480e      	ldr	r0, [pc, #56]	; (8004090 <ThreadFrontLightsTask+0xec>)
 8004056:	f004 fa95 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800405a:	2364      	movs	r3, #100	; 0x64
 800405c:	9302      	str	r3, [sp, #8]
 800405e:	2309      	movs	r3, #9
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <ThreadFrontLightsTask+0xe4>)
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2301      	movs	r3, #1
 8004068:	2216      	movs	r2, #22
 800406a:	216a      	movs	r1, #106	; 0x6a
 800406c:	4808      	ldr	r0, [pc, #32]	; (8004090 <ThreadFrontLightsTask+0xec>)
 800406e:	f004 fa89 	bl	8008584 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <ThreadFrontLightsTask+0xe8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f009 feb8 	bl	800ddec <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 800407c:	e79c      	b.n	8003fb8 <ThreadFrontLightsTask+0x14>
 800407e:	bf00      	nop
 8004080:	20027880 	.word	0x20027880
 8004084:	20000aa4 	.word	0x20000aa4
 8004088:	20000ab0 	.word	0x20000ab0
 800408c:	20027878 	.word	0x20027878
 8004090:	20027e6c 	.word	0x20027e6c

08004094 <LL_RCC_LSE_SetDriveCapability>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f023 0218 	bic.w	r2, r3, #24
 80040a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040c4:	f001 fce8 	bl	8005a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040c8:	f000 f81c 	bl	8004104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040cc:	f7fe fcf4 	bl	8002ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 80040d0:	f7fd fc59 	bl	8001986 <MX_DMA_Init>
  MX_ADC1_Init();
 80040d4:	f7fc feb4 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80040d8:	f000 fe6a 	bl	8004db0 <MX_RTC_Init>
  MX_TIM2_Init();
 80040dc:	f001 f8f6 	bl	80052cc <MX_TIM2_Init>
  MX_RF_Init();
 80040e0:	f000 fe4e 	bl	8004d80 <MX_RF_Init>
  MX_I2C1_Init();
 80040e4:	f7ff fb86 	bl	80037f4 <MX_I2C1_Init>
  MX_COMP1_Init();
 80040e8:	f7fd fb3a 	bl	8001760 <MX_COMP1_Init>
  MX_TIM16_Init();
 80040ec:	f001 f964 	bl	80053b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 80040f0:	f001 fc10 	bl	8005914 <MX_TSC_Init>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80040f4:	f009 f882 	bl	800d1fc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80040f8:	f7fd f8d2 	bl	80012a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80040fc:	f009 f8b2 	bl	800d264 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004100:	e7fe      	b.n	8004100 <main+0x40>
	...

08004104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b0ae      	sub	sp, #184	; 0xb8
 8004108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800410a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800410e:	2248      	movs	r2, #72	; 0x48
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f010 fe23 	bl	8014d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	2250      	movs	r2, #80	; 0x50
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f010 fe13 	bl	8014d5e <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004146:	f043 0310 	orr.w	r3, r3, #16
 800414a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004156:	f043 0303 	orr.w	r3, r3, #3
 800415a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800415c:	2000      	movs	r0, #0
 800415e:	f7ff ff99 	bl	8004094 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <SystemClock_Config+0x144>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <SystemClock_Config+0x144>)
 800416c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b35      	ldr	r3, [pc, #212]	; (8004248 <SystemClock_Config+0x144>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800417e:	230f      	movs	r3, #15
 8004180:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004186:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004188:	2301      	movs	r3, #1
 800418a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800418c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004190:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004198:	2305      	movs	r3, #5
 800419a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041a8:	4618      	mov	r0, r3
 80041aa:	f006 fa57 	bl	800a65c <HAL_RCC_OscConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80041b4:	f000 f85c 	bl	8004270 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80041b8:	236f      	movs	r3, #111	; 0x6f
 80041ba:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80041bc:	2302      	movs	r3, #2
 80041be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041c0:	2300      	movs	r3, #0
 80041c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041c4:	2300      	movs	r3, #0
 80041c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041c8:	2300      	movs	r3, #0
 80041ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f006 fd9c 	bl	800ad18 <HAL_RCC_ClockConfig>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80041e6:	f000 f843 	bl	8004270 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80041ea:	f643 4304 	movw	r3, #15364	; 0x3c04
 80041ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80041f0:	2306      	movs	r3, #6
 80041f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80041f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004200:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004204:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8004206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800420a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800420c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004216:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800421c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004224:	2302      	movs	r3, #2
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004228:	2300      	movs	r3, #0
 800422a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f007 f9c9 	bl	800b5c6 <HAL_RCCEx_PeriphCLKConfig>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800423a:	f000 f819 	bl	8004270 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800423e:	bf00      	nop
 8004240:	37b8      	adds	r7, #184	; 0xb8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	58000400 	.word	0x58000400

0800424c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800425e:	f001 fc3b 	bl	8005ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40012c00 	.word	0x40012c00

08004270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <MasterThreadTask>:

uint8_t logEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;

void MasterThreadTask(void *argument) {
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b085      	sub	sp, #20
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004288:	4b37      	ldr	r3, [pc, #220]	; (8004368 <MasterThreadTask+0xe8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	2200      	movs	r2, #0
 8004292:	4936      	ldr	r1, [pc, #216]	; (800436c <MasterThreadTask+0xec>)
 8004294:	f009 fefc 	bl	800e090 <osMessageQueueGet>
		osWaitForever);

		// this below togLogMessageReceived manipulation is for debugging
//		togLogMessageReceived.status = 1;
//		togLogMessageReceived.logStatus = 1;
		togLogMessageReceived.blinkEnabled = 1;
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <MasterThreadTask+0xec>)
 800429a:	2201      	movs	r2, #1
 800429c:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <MasterThreadTask+0xec>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <MasterThreadTask+0xec>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	711a      	strb	r2, [r3, #4]
		togLogMessageReceived.positionEnabled = 0;
 80042aa:	4b30      	ldr	r3, [pc, #192]	; (800436c <MasterThreadTask+0xec>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	715a      	strb	r2, [r3, #5]

		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 80042b0:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <MasterThreadTask+0xf0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f009 ff5d 	bl	800e174 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <MasterThreadTask+0xf0>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	2200      	movs	r2, #0
 80042c2:	492c      	ldr	r1, [pc, #176]	; (8004374 <MasterThreadTask+0xf4>)
 80042c4:	f009 fe70 	bl	800dfa8 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (togLogMessageReceived.logStatus == ENABLE_LOG) {
 80042c8:	4b28      	ldr	r3, [pc, #160]	; (800436c <MasterThreadTask+0xec>)
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d13c      	bne.n	800434a <MasterThreadTask+0xca>
			logEnabled = 1;
 80042d0:	4b29      	ldr	r3, [pc, #164]	; (8004378 <MasterThreadTask+0xf8>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <MasterThreadTask+0xfc>)
 80042d8:	4a24      	ldr	r2, [pc, #144]	; (800436c <MasterThreadTask+0xec>)
 80042da:	6811      	ldr	r1, [r2, #0]
 80042dc:	6019      	str	r1, [r3, #0]
 80042de:	8892      	ldrh	r2, [r2, #4]
 80042e0:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 80042e2:	f000 f8d7 	bl	8004494 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80042e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ea:	f009 f9e1 	bl	800d6b0 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 80042ee:	f001 fc05 	bl	8005afc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <MasterThreadTask+0x100>)
 80042f6:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 80042f8:	f000 f84e 	bl	8004398 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <MasterThreadTask+0x104>)
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <MasterThreadTask+0x108>)
 8004302:	4a22      	ldr	r2, [pc, #136]	; (800438c <MasterThreadTask+0x10c>)
 8004304:	4922      	ldr	r1, [pc, #136]	; (8004390 <MasterThreadTask+0x110>)
 8004306:	4823      	ldr	r0, [pc, #140]	; (8004394 <MasterThreadTask+0x114>)
 8004308:	f000 f94a 	bl	80045a0 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 800430c:	4821      	ldr	r0, [pc, #132]	; (8004394 <MasterThreadTask+0x114>)
 800430e:	f00f fb0d 	bl	801392c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <MasterThreadTask+0xe8>)
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	4914      	ldr	r1, [pc, #80]	; (800436c <MasterThreadTask+0xec>)
 800431c:	f009 feb8 	bl	800e090 <osMessageQueueGet>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <MasterThreadTask+0xb4>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <MasterThreadTask+0xec>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <MasterThreadTask+0xb4>

						masterExitRoutine();
 800432e:	f000 f901 	bl	8004534 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 8004332:	e017      	b.n	8004364 <MasterThreadTask+0xe4>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <MasterThreadTask+0x100>)
 8004336:	681c      	ldr	r4, [r3, #0]
 8004338:	f001 fbe0 	bl	8005afc <HAL_GetTick>
 800433c:	4603      	mov	r3, r0
 800433e:	1ae3      	subs	r3, r4, r3
 8004340:	3364      	adds	r3, #100	; 0x64
 8004342:	4618      	mov	r0, r3
 8004344:	f009 f9b4 	bl	800d6b0 <osDelay>
				startTime = HAL_GetTick();
 8004348:	e7d1      	b.n	80042ee <MasterThreadTask+0x6e>

			}
		} else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <MasterThreadTask+0xf8>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d19a      	bne.n	8004288 <MasterThreadTask+0x8>
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <MasterThreadTask+0xec>)
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d196      	bne.n	8004288 <MasterThreadTask+0x8>
			logEnabled = 0;
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <MasterThreadTask+0xf8>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8004360:	f000 f8e8 	bl	8004534 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004364:	e790      	b.n	8004288 <MasterThreadTask+0x8>
 8004366:	bf00      	nop
 8004368:	20027cac 	.word	0x20027cac
 800436c:	20027780 	.word	0x20027780
 8004370:	20027888 	.word	0x20027888
 8004374:	080165c0 	.word	0x080165c0
 8004378:	20000ac5 	.word	0x20000ac5
 800437c:	20027858 	.word	0x20027858
 8004380:	20000ac8 	.word	0x20000ac8
 8004384:	2002837c 	.word	0x2002837c
 8004388:	20028394 	.word	0x20028394
 800438c:	200283d0 	.word	0x200283d0
 8004390:	20028310 	.word	0x20028310
 8004394:	2002778c 	.word	0x2002778c

08004398 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800439c:	4b30      	ldr	r3, [pc, #192]	; (8004460 <grabSensorData+0xc8>)
 800439e:	789b      	ldrb	r3, [r3, #2]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d111      	bne.n	80043c8 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <grabSensorData+0xcc>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	2200      	movs	r2, #0
 80043ac:	492e      	ldr	r1, [pc, #184]	; (8004468 <grabSensorData+0xd0>)
 80043ae:	f009 fe6f 	bl	800e090 <osMessageQueueGet>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 80043b8:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <grabSensorData+0xd0>)
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <grabSensorData+0xd4>)
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	236c      	movs	r3, #108	; 0x6c
 80043c2:	461a      	mov	r2, r3
 80043c4:	f010 fcc0 	bl	8014d48 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <grabSensorData+0xc8>)
 80043ca:	78db      	ldrb	r3, [r3, #3]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d113      	bne.n	80043f8 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <grabSensorData+0xd8>)
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	2200      	movs	r2, #0
 80043d8:	4926      	ldr	r1, [pc, #152]	; (8004474 <grabSensorData+0xdc>)
 80043da:	f009 fe59 	bl	800e090 <osMessageQueueGet>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 80043e4:	4a23      	ldr	r2, [pc, #140]	; (8004474 <grabSensorData+0xdc>)
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <grabSensorData+0xe0>)
 80043e8:	4614      	mov	r4, r2
 80043ea:	461d      	mov	r5, r3
 80043ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80043f4:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <grabSensorData+0xc8>)
 80043fa:	795b      	ldrb	r3, [r3, #5]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d113      	bne.n	8004428 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <grabSensorData+0xe4>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	2200      	movs	r2, #0
 8004408:	491d      	ldr	r1, [pc, #116]	; (8004480 <grabSensorData+0xe8>)
 800440a:	f009 fe41 	bl	800e090 <osMessageQueueGet>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 8004414:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <grabSensorData+0xe8>)
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <grabSensorData+0xec>)
 8004418:	4614      	mov	r4, r2
 800441a:	461d      	mov	r5, r3
 800441c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800441e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004420:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004424:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <grabSensorData+0xc8>)
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d115      	bne.n	800445c <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <grabSensorData+0xf0>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	2200      	movs	r2, #0
 8004438:	4914      	ldr	r1, [pc, #80]	; (800448c <grabSensorData+0xf4>)
 800443a:	f009 fe29 	bl	800e090 <osMessageQueueGet>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8004444:	4a11      	ldr	r2, [pc, #68]	; (800448c <grabSensorData+0xf4>)
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <grabSensorData+0xf8>)
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004458:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 800445c:	bf00      	nop
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	20027858 	.word	0x20027858
 8004464:	20027cc8 	.word	0x20027cc8
 8004468:	20028310 	.word	0x20028310
 800446c:	080165c8 	.word	0x080165c8
 8004470:	20027884 	.word	0x20027884
 8004474:	200283d0 	.word	0x200283d0
 8004478:	08016634 	.word	0x08016634
 800447c:	2002777c 	.word	0x2002777c
 8004480:	2002837c 	.word	0x2002837c
 8004484:	08016674 	.word	0x08016674
 8004488:	2002787c 	.word	0x2002787c
 800448c:	20028394 	.word	0x20028394
 8004490:	0801664c 	.word	0x0801664c

08004494 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <masterEnterRoutine+0x80>)
 800449a:	789b      	ldrb	r3, [r3, #2]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <masterEnterRoutine+0x84>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f008 ffbc 	bl	800d424 <osThreadFlagsSet>
	}

	if (togLogMessageReceived.positionEnabled == SENSOR_ENABLE) {
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <masterEnterRoutine+0x88>)
 80044ae:	795b      	ldrb	r3, [r3, #5]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d118      	bne.n	80044e6 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <masterEnterRoutine+0x8c>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295
 80044bc:	2200      	movs	r2, #0
 80044be:	4919      	ldr	r1, [pc, #100]	; (8004524 <masterEnterRoutine+0x90>)
 80044c0:	f009 fde6 	bl	800e090 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <masterEnterRoutine+0x90>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <masterEnterRoutine+0x8c>)
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	2200      	movs	r2, #0
 80044d2:	4914      	ldr	r1, [pc, #80]	; (8004524 <masterEnterRoutine+0x90>)
 80044d4:	f009 fd68 	bl	800dfa8 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <masterEnterRoutine+0x94>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80044e0:	4618      	mov	r0, r3
 80044e2:	f009 f9ad 	bl	800d840 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <masterEnterRoutine+0x80>)
 80044e8:	78db      	ldrb	r3, [r3, #3]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <masterEnterRoutine+0x98>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f008 ff95 	bl	800d424 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <masterEnterRoutine+0x80>)
 80044fc:	791b      	ldrb	r3, [r3, #4]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <masterEnterRoutine+0x9c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f008 ff8b 	bl	800d424 <osThreadFlagsSet>
	}
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20027858 	.word	0x20027858
 8004518:	20027864 	.word	0x20027864
 800451c:	20027780 	.word	0x20027780
 8004520:	20027888 	.word	0x20027888
 8004524:	20027cd4 	.word	0x20027cd4
 8004528:	20027868 	.word	0x20027868
 800452c:	20027cb8 	.word	0x20027cb8
 8004530:	20027ccc 	.word	0x20027ccc

08004534 <masterExitRoutine>:

void masterExitRoutine(void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <masterExitRoutine+0x58>)
 800453a:	789b      	ldrb	r3, [r3, #2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <masterExitRoutine+0x5c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f008 ff6c 	bl	800d424 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <masterExitRoutine+0x58>)
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d104      	bne.n	800455e <masterExitRoutine+0x2a>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <masterExitRoutine+0x60>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f009 f9b1 	bl	800d8c0 <osTimerStop>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <masterExitRoutine+0x58>)
 8004560:	78db      	ldrb	r3, [r3, #3]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <masterExitRoutine+0x3e>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <masterExitRoutine+0x64>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f008 ff59 	bl	800d424 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <masterExitRoutine+0x58>)
 8004574:	791b      	ldrb	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <masterExitRoutine+0x52>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <masterExitRoutine+0x68>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f008 ff4f 	bl	800d424 <osThreadFlagsSet>
	}

}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20027858 	.word	0x20027858
 8004590:	20027864 	.word	0x20027864
 8004594:	20027868 	.word	0x20027868
 8004598:	20027cb8 	.word	0x20027cb8
 800459c:	20027ccc 	.word	0x20027ccc

080045a0 <packetizeData>:

RTC_TimeTypeDef RTC_time;
RTC_DateTypeDef RTC_date;

void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 80045ae:	f001 faa5 	bl	8005afc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	226c      	movs	r2, #108	; 0x6c
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f010 fbc1 	bl	8014d48 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	336c      	adds	r3, #108	; 0x6c
 80045ca:	2218      	movs	r2, #24
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f010 fbba 	bl	8014d48 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3384      	adds	r3, #132	; 0x84
 80045d8:	2228      	movs	r2, #40	; 0x28
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f010 fbb3 	bl	8014d48 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	33ac      	adds	r3, #172	; 0xac
 80045e6:	2218      	movs	r2, #24
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f010 fbac 	bl	8014d48 <memcpy>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d80f      	bhi.n	800462a <vector_push+0x32>
    	self->items[self->count++] = *item;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800460e:	1c51      	adds	r1, r2, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6619      	str	r1, [r3, #96]	; 0x60
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	440b      	add	r3, r1
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	6811      	ldr	r1, [r2, #0]
 8004624:	6019      	str	r1, [r3, #0]
 8004626:	8892      	ldrh	r2, [r2, #4]
 8004628:	809a      	strh	r2, [r3, #4]
    }
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <vector_pop>:

Pulse vector_pop(vector *self){
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01c      	beq.n	8004682 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	18ca      	adds	r2, r1, r3
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	6810      	ldr	r0, [r2, #0]
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	8892      	ldrh	r2, [r2, #4]
 8004664:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	1e5a      	subs	r2, r3, #1
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	461a      	mov	r2, r3
 8004674:	f107 0308 	add.w	r3, r7, #8
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	889b      	ldrh	r3, [r3, #4]
 800467e:	8093      	strh	r3, [r2, #4]
 8004680:	e005      	b.n	800468e <vector_pop+0x58>
	}
	return self->items[0];
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	6810      	ldr	r0, [r2, #0]
 8004688:	6018      	str	r0, [r3, #0]
 800468a:	8892      	ldrh	r2, [r2, #4]
 800468c:	809a      	strh	r2, [r3, #4]
}
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <vector_get>:

Pulse vector_get(vector *self, int index)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db12      	blt.n	80046d2 <vector_get+0x38>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d90d      	bls.n	80046d2 <vector_get+0x38>
    	return self->items[index];
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	18ca      	adds	r2, r1, r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	6811      	ldr	r1, [r2, #0]
 80046ca:	6019      	str	r1, [r3, #0]
 80046cc:	8892      	ldrh	r2, [r2, #4]
 80046ce:	809a      	strh	r2, [r3, #4]
 80046d0:	e005      	b.n	80046de <vector_get+0x44>
    }
    return self->items[0];
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	6810      	ldr	r0, [r2, #0]
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	8892      	ldrh	r2, [r2, #4]
 80046dc:	809a      	strh	r2, [r3, #4]
}
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <vector_clear>:

void vector_clear(vector *self){
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e00c      	b.n	8004740 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2264      	movs	r2, #100	; 0x64
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	3310      	adds	r3, #16
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ffd8 	bl	80046ea <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	ddef      	ble.n	8004726 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	33d8      	adds	r3, #216	; 0xd8
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ffcd 	bl	80046ea <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ffc7 	bl	80046ea <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	889b      	ldrh	r3, [r3, #4]
 800477a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800477e:	d303      	bcc.n	8004788 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <consume_pulse+0x54>)
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004786:	e016      	b.n	80047b6 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	889b      	ldrh	r3, [r3, #4]
 800478c:	2b27      	cmp	r3, #39	; 0x27
 800478e:	d907      	bls.n	80047a0 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <consume_pulse+0x54>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f813 	bl	80047c4 <process_long_pulse>
}
 800479e:	e00a      	b.n	80047b6 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <consume_pulse+0x54>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d006      	beq.n	80047b6 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f89c 	bl	80048e8 <process_short_pulse>
			prev_pulse_short = 1;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <consume_pulse+0x54>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000acc 	.word	0x20000acc

080047c4 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d144      	bne.n	8004860 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03f      	beq.n	8004860 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff22 	bl	8004636 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	885a      	ldrh	r2, [r3, #2]
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004808:	461a      	mov	r2, r3
 800480a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800480e:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004812:	330d      	adds	r3, #13
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f113 0f1e 	cmn.w	r3, #30
 800481e:	db1c      	blt.n	800485a <process_long_pulse+0x96>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b1d      	cmp	r3, #29
 8004824:	dc19      	bgt.n	800485a <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	885a      	ldrh	r2, [r3, #2]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd f86d 	bl	8001920 <reset>

                reset_cycle_long_pulses(self);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa64 	bl	8004d14 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fa7c 	bl	8004d4a <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa87 	bl	8004d66 <reset_cycle_short_pulses>
 8004858:	e002      	b.n	8004860 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa75 	bl	8004d4a <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02d      	beq.n	80048c8 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	885a      	ldrh	r2, [r3, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	891b      	ldrh	r3, [r3, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	e021      	b.n	80048c2 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <process_long_pulse+0x120>)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004886:	8a7a      	ldrh	r2, [r7, #18]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 800488e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004892:	f113 0f1e 	cmn.w	r3, #30
 8004896:	db11      	blt.n	80048bc <process_long_pulse+0xf8>
 8004898:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800489c:	2b1d      	cmp	r3, #29
 800489e:	dc0d      	bgt.n	80048bc <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2264      	movs	r2, #100	; 0x64
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fea1 	bl	80045f8 <vector_push>
                pulse_classified = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77fb      	strb	r3, [r7, #31]
                break;
 80048ba:	e005      	b.n	80048c8 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	3301      	adds	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	ddda      	ble.n	800487e <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80048c8:	7ffb      	ldrb	r3, [r7, #31]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fe8e 	bl	80045f8 <vector_push>
    }
}
 80048dc:	bf00      	nop
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	0801668c 	.word	0x0801668c

080048e8 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00f      	beq.n	800491a <process_short_pulse+0x32>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d208      	bcs.n	800491a <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	33d8      	adds	r3, #216	; 0xd8
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fe72 	bl	80045f8 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f805 	bl	8004924 <process_cycle_fix>
	}
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b0a2      	sub	sp, #136	; 0x88
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 800492c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004936:	2300      	movs	r3, #0
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <process_cycle_fix+0x2a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80b7 	beq.w	8004abc <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b09      	cmp	r3, #9
 8004954:	d80d      	bhi.n	8004972 <process_cycle_fix+0x4e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <process_cycle_fix+0x4e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004978:	e090      	b.n	8004a9c <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004980:	2164      	movs	r1, #100	; 0x64
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3370      	adds	r3, #112	; 0x70
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 800498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004990:	2b00      	cmp	r3, #0
 8004992:	d07e      	beq.n	8004a92 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	891a      	ldrh	r2, [r3, #8]
 8004998:	49c0      	ldr	r1, [pc, #768]	; (8004c9c <process_cycle_fix+0x378>)
 800499a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800499e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80049a2:	4413      	add	r3, r2
 80049a4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049ae:	e03e      	b.n	8004a2e <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 80049b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049b4:	2264      	movs	r2, #100	; 0x64
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	3310      	adds	r3, #16
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe66 	bl	800469a <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 80049ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049d8:	4413      	add	r3, r2
 80049da:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80049de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049e2:	4619      	mov	r1, r3
 80049e4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80049e8:	1acb      	subs	r3, r1, r3
 80049ea:	441a      	add	r2, r3
 80049ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80049f6:	440b      	add	r3, r1
 80049f8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 80049fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a06:	4413      	add	r3, r2
 8004a08:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004a0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a10:	4413      	add	r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004a1e:	440b      	add	r3, r1
 8004a20:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3bb      	bcc.n	80049b0 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d929      	bls.n	8004a92 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a48:	4413      	add	r3, r2
 8004a4a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004a62:	440b      	add	r3, r1
 8004a64:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a72:	4413      	add	r3, r2
 8004a74:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a96:	3301      	adds	r3, #1
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f77f af6a 	ble.w	800497a <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f7fc feb1 	bl	800181c <process_pulse_lengths>
 8004aba:	e008      	b.n	8004ace <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fc ff08 	bl	80018f0 <get_phase>
 8004ae0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f2c0 80b5 	blt.w	8004c54 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	2220      	movs	r2, #32
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f010 f933 	bl	8014d5e <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	105b      	asrs	r3, r3, #1
 8004b0a:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	891a      	ldrh	r2, [r3, #8]
 8004b10:	4962      	ldr	r1, [pc, #392]	; (8004c9c <process_cycle_fix+0x378>)
 8004b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b18:	4413      	add	r3, r2
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b24:	440b      	add	r3, r1
 8004b26:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004b32:	2300      	movs	r3, #0
 8004b34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b36:	e04a      	b.n	8004bce <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004b3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fda8 	bl	800469a <vector_get>
            uint32_t input_idx = p.input_idx;
 8004b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b4e:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004b50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004b66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004b6a:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004b6e:	d32b      	bcc.n	8004bc8 <process_cycle_fix+0x2a4>
 8004b70:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004b74:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d825      	bhi.n	8004bc8 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b84:	4413      	add	r3, r2
 8004b86:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <process_cycle_fix+0x280>
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b96:	4413      	add	r3, r2
 8004b98:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004b9c:	889a      	ldrh	r2, [r3, #4]
 8004b9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d211      	bcs.n	8004bc8 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bac:	4413      	add	r3, r2
 8004bae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004bb2:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004bc4:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004bc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bca:	3301      	adds	r3, #1
 8004bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004bd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d3ae      	bcc.n	8004b38 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004bda:	2300      	movs	r3, #0
 8004bdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bde:	e034      	b.n	8004c4a <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004be8:	4413      	add	r3, r2
 8004bea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d028      	beq.n	8004c44 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf4:	015b      	lsls	r3, r3, #5
 8004bf6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c08:	4413      	add	r3, r2
 8004c0a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004c0e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c1a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ca0 <process_cycle_fix+0x37c>
 8004c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c22:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004ca4 <process_cycle_fix+0x380>
 8004c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c3e:	3204      	adds	r2, #4
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c46:	3301      	adds	r3, #1
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3c5      	bcc.n	8004be0 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	db06      	blt.n	8004c68 <process_cycle_fix+0x344>
 8004c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e008      	b.n	8004c7a <process_cycle_fix+0x356>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d02b      	beq.n	8004cd6 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	891a      	ldrh	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	db0c      	blt.n	8004ca8 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d908      	bls.n	8004ca8 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004c96:	22c8      	movs	r2, #200	; 0xc8
 8004c98:	e007      	b.n	8004caa <process_cycle_fix+0x386>
 8004c9a:	bf00      	nop
 8004c9c:	0801668c 	.word	0x0801668c
 8004ca0:	40490fdb 	.word	0x40490fdb
 8004ca4:	46023400 	.word	0x46023400
 8004ca8:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cbe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f7fd fc4b 	bl	800256c <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f81c 	bl	8004d14 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f834 	bl	8004d4a <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f83f 	bl	8004d66 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	891a      	ldrh	r2, [r3, #8]
 8004cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004cf8:	330d      	adds	r3, #13
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60da      	str	r2, [r3, #12]
}
 8004d0a:	bf00      	nop
 8004d0c:	3788      	adds	r7, #136	; 0x88
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e00c      	b.n	8004d3c <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2264      	movs	r2, #100	; 0x64
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fcda 	bl	80046ea <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	ddef      	ble.n	8004d22 <reset_cycle_long_pulses+0xe>
	}
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fcc6 	bl	80046ea <vector_clear>
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	33d8      	adds	r3, #216	; 0xd8
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fcb9 	bl	80046ea <vector_clear>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0

}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <MX_RTC_Init+0x34>)
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <MX_RTC_Init+0x38>)
 8004db8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <MX_RTC_Init+0x34>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <MX_RTC_Init+0x34>)
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <MX_RTC_Init+0x34>)
 8004dc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004dcc:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004dce:	4805      	ldr	r0, [pc, #20]	; (8004de4 <MX_RTC_Init+0x34>)
 8004dd0:	f006 fe7f 	bl	800bad2 <HAL_RTC_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004dda:	f7ff fa49 	bl	8004270 <Error_Handler>
  }

}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	200283ec 	.word	0x200283ec
 8004de8:	40002800 	.word	0x40002800

08004dec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_RTC_MspInit+0x20>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d101      	bne.n	8004e02 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004dfe:	f7ff ffc6 	bl	8004d8e <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40002800 	.word	0x40002800

08004e10 <LL_AHB3_GRP1_EnableClock>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004e46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e4a:	f7ff ffe1 	bl	8004e10 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	210f      	movs	r1, #15
 8004e52:	f06f 0001 	mvn.w	r0, #1
 8004e56:	f002 fb84 	bl	8007562 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	210f      	movs	r1, #15
 8004e5e:	202c      	movs	r0, #44	; 0x2c
 8004e60:	f002 fb7f 	bl	8007562 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004e64:	2200      	movs	r2, #0
 8004e66:	210f      	movs	r1, #15
 8004e68:	202d      	movs	r0, #45	; 0x2d
 8004e6a:	f002 fb7a 	bl	8007562 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4013      	ands	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	; 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	2019      	movs	r0, #25
 8004eba:	f002 fb52 	bl	8007562 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8004ebe:	2019      	movs	r0, #25
 8004ec0:	f002 fb69 	bl	8007596 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004ec4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ec8:	f7ff ffd3 	bl	8004e72 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ecc:	f107 0208 	add.w	r2, r7, #8
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f006 f8ee 	bl	800b0b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004edc:	f006 f8d6 	bl	800b08c <HAL_RCC_GetPCLK2Freq>
 8004ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <HAL_InitTick+0x8c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0c9b      	lsrs	r3, r3, #18
 8004eec:	3b01      	subs	r3, #1
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_InitTick+0x90>)
 8004ef2:	4a11      	ldr	r2, [pc, #68]	; (8004f38 <HAL_InitTick+0x94>)
 8004ef4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_InitTick+0x90>)
 8004ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004efc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004efe:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <HAL_InitTick+0x90>)
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_InitTick+0x90>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <HAL_InitTick+0x90>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004f10:	4808      	ldr	r0, [pc, #32]	; (8004f34 <HAL_InitTick+0x90>)
 8004f12:	f006 fecc 	bl	800bcae <HAL_TIM_Base_Init>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004f1c:	4805      	ldr	r0, [pc, #20]	; (8004f34 <HAL_InitTick+0x90>)
 8004f1e:	f006 ff47 	bl	800bdb0 <HAL_TIM_Base_Start_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	e000      	b.n	8004f28 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	431bde83 	.word	0x431bde83
 8004f34:	20028410 	.word	0x20028410
 8004f38:	40012c00 	.word	0x40012c00

08004f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f4e:	e7fe      	b.n	8004f4e <HardFault_Handler+0x4>

08004f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f54:	e7fe      	b.n	8004f54 <MemManage_Handler+0x4>

08004f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f5a:	e7fe      	b.n	8004f5a <BusFault_Handler+0x4>

08004f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f60:	e7fe      	b.n	8004f60 <UsageFault_Handler+0x4>

08004f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004f74:	2004      	movs	r0, #4
 8004f76:	f003 f803 	bl	8007f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <EXTI2_IRQHandler+0x1c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2104      	movs	r1, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f008 fa4f 	bl	800d424 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20027cb8 	.word	0x20027cb8

08004f90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <DMA1_Channel1_IRQHandler+0x10>)
 8004f96:	f002 fd1c 	bl	80079d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20027710 	.word	0x20027710

08004fa4 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8004fa8:	4802      	ldr	r0, [pc, #8]	; (8004fb4 <COMP_IRQHandler+0x10>)
 8004faa:	f002 f971 	bl	8007290 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20027cdc 	.word	0x20027cdc

08004fb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004fbc:	2020      	movs	r0, #32
 8004fbe:	f002 ffdf 	bl	8007f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fcc:	4803      	ldr	r0, [pc, #12]	; (8004fdc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004fce:	f006 fff9 	bl	800bfc4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004fd2:	4803      	ldr	r0, [pc, #12]	; (8004fe0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004fd4:	f006 fff6 	bl	800bfc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20028410 	.word	0x20028410
 8004fe0:	20028490 	.word	0x20028490

08004fe4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <I2C1_EV_IRQHandler+0x10>)
 8004fea:	f003 fbdf 	bl	80087ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20027e6c 	.word	0x20027e6c

08004ff8 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8004ffc:	f00f f9f8 	bl	80143f0 <HW_IPCC_Tx_Handler>

  return;
 8005000:	bf00      	nop
}
 8005002:	bd80      	pop	{r7, pc}

08005004 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005008:	f00f f998 	bl	801433c <HW_IPCC_Rx_Handler>
  return;
 800500c:	bf00      	nop
}
 800500e:	bd80      	pop	{r7, pc}

08005010 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <TSC_IRQHandler+0x10>)
 8005016:	f008 f895 	bl	800d144 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200284f8 	.word	0x200284f8

08005024 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005024:	b40c      	push	{r2, r3}
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	460a      	mov	r2, r1
 8005030:	71fb      	strb	r3, [r7, #7]
 8005032:	4613      	mov	r3, r2
 8005034:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	b002      	add	sp, #8
 8005042:	4770      	bx	lr

08005044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005048:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <SystemInit+0xa0>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800504e:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <SystemInit+0xa0>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <SystemInit+0xa0>)
 8005056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800505a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005072:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005076:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005082:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <SystemInit+0xa4>)
 8005084:	4013      	ands	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005094:	f023 0305 	bic.w	r3, r3, #5
 8005098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <SystemInit+0xa8>)
 80050b6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050bc:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <SystemInit+0xa8>)
 80050be:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80050c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80050d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d4:	2200      	movs	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000ed00 	.word	0xe000ed00
 80050e8:	faf6fefb 	.word	0xfaf6fefb
 80050ec:	22041000 	.word	0x22041000

080050f0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4a47      	ldr	r2, [pc, #284]	; (8005220 <SystemCoreClockUpdate+0x130>)
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d867      	bhi.n	80051e8 <SystemCoreClockUpdate+0xf8>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <SystemCoreClockUpdate+0x30>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005155 	.word	0x08005155
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	0800515d 	.word	0x0800515d
 8005134:	080051e9 	.word	0x080051e9
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	08005165 	.word	0x08005165
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	0800516d 	.word	0x0800516d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005154:	4a33      	ldr	r2, [pc, #204]	; (8005224 <SystemCoreClockUpdate+0x134>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6013      	str	r3, [r2, #0]
      break;
 800515a:	e049      	b.n	80051f0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <SystemCoreClockUpdate+0x134>)
 800515e:	4a32      	ldr	r2, [pc, #200]	; (8005228 <SystemCoreClockUpdate+0x138>)
 8005160:	601a      	str	r2, [r3, #0]
      break;
 8005162:	e045      	b.n	80051f0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005164:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <SystemCoreClockUpdate+0x134>)
 8005166:	4a31      	ldr	r2, [pc, #196]	; (800522c <SystemCoreClockUpdate+0x13c>)
 8005168:	601a      	str	r2, [r3, #0]
      break;
 800516a:	e041      	b.n	80051f0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	3301      	adds	r3, #1
 8005186:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d105      	bne.n	800519a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800518e:	4a26      	ldr	r2, [pc, #152]	; (8005228 <SystemCoreClockUpdate+0x138>)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e00d      	b.n	80051b6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d105      	bne.n	80051ac <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80051a0:	4a22      	ldr	r2, [pc, #136]	; (800522c <SystemCoreClockUpdate+0x13c>)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e004      	b.n	80051b6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	0f5b      	lsrs	r3, r3, #29
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	3301      	adds	r3, #1
 80051d8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <SystemCoreClockUpdate+0x134>)
 80051e4:	6013      	str	r3, [r2, #0]
      break;
 80051e6:	e003      	b.n	80051f0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80051e8:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <SystemCoreClockUpdate+0x134>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6013      	str	r3, [r2, #0]
      break;
 80051ee:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <SystemCoreClockUpdate+0x140>)
 80051fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005202:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <SystemCoreClockUpdate+0x134>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	fbb2 f3f3 	udiv	r3, r2, r3
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <SystemCoreClockUpdate+0x134>)
 8005210:	6013      	str	r3, [r2, #0]

}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	080166f0 	.word	0x080166f0
 8005224:	20000078 	.word	0x20000078
 8005228:	00f42400 	.word	0x00f42400
 800522c:	01e84800 	.word	0x01e84800
 8005230:	08016690 	.word	0x08016690

08005234 <LL_AHB2_GRP1_EnableClock>:
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_APB1_GRP1_EnableClock>:
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <LL_APB2_GRP1_EnableClock>:
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ec:	463b      	mov	r3, r7
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	615a      	str	r2, [r3, #20]
 80052fc:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80052fe:	4b2d      	ldr	r3, [pc, #180]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005308:	f240 227f 	movw	r2, #639	; 0x27f
 800530c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005316:	2209      	movs	r2, #9
 8005318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <MX_TIM2_Init+0xe8>)
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005322:	2200      	movs	r2, #0
 8005324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005326:	4823      	ldr	r0, [pc, #140]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005328:	f006 fcc1 	bl	800bcae <HAL_TIM_Base_Init>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005332:	f7fe ff9d 	bl	8004270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800533c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005340:	4619      	mov	r1, r3
 8005342:	481c      	ldr	r0, [pc, #112]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005344:	f007 f876 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800534e:	f7fe ff8f 	bl	8004270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005352:	4818      	ldr	r0, [pc, #96]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005354:	f006 fd56 	bl	800be04 <HAL_TIM_PWM_Init>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800535e:	f7fe ff87 	bl	8004270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005362:	2320      	movs	r3, #32
 8005364:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800536a:	f107 031c 	add.w	r3, r7, #28
 800536e:	4619      	mov	r1, r3
 8005370:	4810      	ldr	r0, [pc, #64]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005372:	f007 fce5 	bl	800cd40 <HAL_TIMEx_MasterConfigSynchronization>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800537c:	f7fe ff78 	bl	8004270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005380:	2360      	movs	r3, #96	; 0x60
 8005382:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005384:	2309      	movs	r3, #9
 8005386:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005390:	463b      	mov	r3, r7
 8005392:	2204      	movs	r2, #4
 8005394:	4619      	mov	r1, r3
 8005396:	4807      	ldr	r0, [pc, #28]	; (80053b4 <MX_TIM2_Init+0xe8>)
 8005398:	f006 ff34 	bl	800c204 <HAL_TIM_PWM_ConfigChannel>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80053a2:	f7fe ff65 	bl	8004270 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80053a6:	4803      	ldr	r0, [pc, #12]	; (80053b4 <MX_TIM2_Init+0xe8>)
 80053a8:	f000 f850 	bl	800544c <HAL_TIM_MspPostInit>

}
 80053ac:	bf00      	nop
 80053ae:	3738      	adds	r7, #56	; 0x38
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20028450 	.word	0x20028450

080053b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <MX_TIM16_Init+0x44>)
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <MX_TIM16_Init+0x48>)
 80053c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <MX_TIM16_Init+0x44>)
 80053c4:	221f      	movs	r2, #31
 80053c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <MX_TIM16_Init+0x44>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <MX_TIM16_Init+0x44>)
 80053d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <MX_TIM16_Init+0x44>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <MX_TIM16_Init+0x44>)
 80053de:	2200      	movs	r2, #0
 80053e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <MX_TIM16_Init+0x44>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80053e8:	4804      	ldr	r0, [pc, #16]	; (80053fc <MX_TIM16_Init+0x44>)
 80053ea:	f006 fc60 	bl	800bcae <HAL_TIM_Base_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80053f4:	f7fe ff3c 	bl	8004270 <Error_Handler>
  }

}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20028490 	.word	0x20028490
 8005400:	40014400 	.word	0x40014400

08005404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d103      	bne.n	800541e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005416:	2001      	movs	r0, #1
 8005418:	f7ff ff25 	bl	8005266 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800541c:	e010      	b.n	8005440 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <HAL_TIM_Base_MspInit+0x44>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10b      	bne.n	8005440 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005428:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800542c:	f7ff ff34 	bl	8005298 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	2019      	movs	r0, #25
 8005436:	f002 f894 	bl	8007562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800543a:	2019      	movs	r0, #25
 800543c:	f002 f8ab 	bl	8007596 <HAL_NVIC_EnableIRQ>
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40014400 	.word	0x40014400

0800544c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	60da      	str	r2, [r3, #12]
 8005462:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d112      	bne.n	8005494 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546e:	2002      	movs	r0, #2
 8005470:	f7ff fee0 	bl	8005234 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005474:	2308      	movs	r3, #8
 8005476:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005484:	2301      	movs	r3, #1
 8005486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005488:	f107 030c 	add.w	r3, r7, #12
 800548c:	4619      	mov	r1, r3
 800548e:	4803      	ldr	r0, [pc, #12]	; (800549c <HAL_TIM_MspPostInit+0x50>)
 8005490:	f002 fbee 	bl	8007c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	48000400 	.word	0x48000400

080054a0 <HAL_COMP_TriggerCallback>:
TSC_IOConfigTypeDef IoConfig;
Debouncer dbs[2] = {{0,0,0}, {0,0,0}};
volatile TouchDetector touch_detector;
extern Input input0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <HAL_COMP_TriggerCallback+0x74>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_COMP_TriggerCallback+0x78>)
 80054b2:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 ff19 	bl	80072ec <HAL_COMP_GetOutputLevel>
 80054ba:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d109      	bne.n	80054d6 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_COMP_TriggerCallback+0x78>)
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054c8:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80054d4:	e019      	b.n	800550a <HAL_COMP_TriggerCallback+0x6a>
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054d8:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d014      	beq.n	800550a <HAL_COMP_TriggerCallback+0x6a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d111      	bne.n	800550a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054e8:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_COMP_TriggerCallback+0x78>)
 80054ee:	881a      	ldrh	r2, [r3, #0]
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054f2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	4807      	ldr	r0, [pc, #28]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 80054fe:	f7fe fb6b 	bl	8003bd8 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_COMP_TriggerCallback+0x7c>)
 8005504:	2200      	movs	r2, #0
 8005506:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20028490 	.word	0x20028490
 8005518:	20000ace 	.word	0x20000ace
 800551c:	20027890 	.word	0x20027890

08005520 <HAL_TSC_ConvCpltCallback>:

void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef* htsc){
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	  /*##-5- Discharge the touch-sensing IOs ####################################*/
	  HAL_TSC_IODischarge(htsc, ENABLE);
 8005528:	2101      	movs	r1, #1
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f007 fdda 	bl	800d0e4 <HAL_TSC_IODischarge>
	  /* Note: a delay can be added here */

	  uint32_t uhTSCAcquisitionValue;
	  TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f007 fd5f 	bl	800cff6 <HAL_TSC_GroupGetStatus>
 8005538:	4603      	mov	r3, r0
 800553a:	75bb      	strb	r3, [r7, #22]
	  uint32_t cur_time;
	  /*##-6- Check if the acquisition is correct (no max count) #################*/
	  if (status == TSC_GROUP_COMPLETED)
 800553c:	7dbb      	ldrb	r3, [r7, #22]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d12d      	bne.n	800559e <HAL_TSC_ConvCpltCallback+0x7e>
	  {
	    /*##-7- Read the acquisition value #######################################*/
	    uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8005542:	2101      	movs	r1, #1
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f007 fd78 	bl	800d03a <HAL_TSC_GroupGetValue>
 800554a:	6138      	str	r0, [r7, #16]
	    uint8_t touch;
	    if(cap_sensor == 0){
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <HAL_TSC_ConvCpltCallback+0xcc>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <HAL_TSC_ConvCpltCallback+0x48>
	    	touch = (uhTSCAcquisitionValue >= TSCx_TS1_MINTHRESHOLD) && (uhTSCAcquisitionValue <= TSCx_TS1_MAXTHRESHOLD);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f641 4284 	movw	r2, #7300	; 0x1c84
 800555a:	4293      	cmp	r3, r2
 800555c:	bf94      	ite	ls
 800555e:	2301      	movls	r3, #1
 8005560:	2300      	movhi	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	75fb      	strb	r3, [r7, #23]
 8005566:	e008      	b.n	800557a <HAL_TSC_ConvCpltCallback+0x5a>
	    }
	    else{
	    	touch = (uhTSCAcquisitionValue >= TSCx_TS2_MINTHRESHOLD) && (uhTSCAcquisitionValue <= TSCx_TS2_MAXTHRESHOLD);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f242 3228 	movw	r2, #9000	; 0x2328
 800556e:	4293      	cmp	r3, r2
 8005570:	bf94      	ite	ls
 8005572:	2301      	movls	r3, #1
 8005574:	2300      	movhi	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	75fb      	strb	r3, [r7, #23]
	    }

	    cur_time = HAL_GetTick();
 800557a:	f000 fabf 	bl	8005afc <HAL_GetTick>
 800557e:	60f8      	str	r0, [r7, #12]
	    debounce(&dbs[cap_sensor], touch, cur_time);
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_TSC_ConvCpltCallback+0xcc>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_TSC_ConvCpltCallback+0xd0>)
 8005588:	4413      	add	r3, r2
 800558a:	7df9      	ldrb	r1, [r7, #23]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f96b 	bl	800586a <debounce>
	    process_touches(&touch_detector, dbs, cur_time);
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4916      	ldr	r1, [pc, #88]	; (80055f0 <HAL_TSC_ConvCpltCallback+0xd0>)
 8005598:	4816      	ldr	r0, [pc, #88]	; (80055f4 <HAL_TSC_ConvCpltCallback+0xd4>)
 800559a:	f000 f82f 	bl	80055fc <process_touches>
	  }

	  //Switches between the two channels to be acquired
	  if (cap_sensor == 0)
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <HAL_TSC_ConvCpltCallback+0xcc>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TSC_ConvCpltCallback+0x94>
	  {
	    IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_TSC_ConvCpltCallback+0xd8>)
 80055a8:	2280      	movs	r2, #128	; 0x80
 80055aa:	601a      	str	r2, [r3, #0]
	    cap_sensor = 1;
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_TSC_ConvCpltCallback+0xcc>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e005      	b.n	80055c0 <HAL_TSC_ConvCpltCallback+0xa0>
	  }
	  else
	  {
	    IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_TSC_ConvCpltCallback+0xd8>)
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	601a      	str	r2, [r3, #0]
	    cap_sensor = 0;
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_TSC_ConvCpltCallback+0xcc>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK)
 80055c0:	490d      	ldr	r1, [pc, #52]	; (80055f8 <HAL_TSC_ConvCpltCallback+0xd8>)
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f007 fd4b 	bl	800d05e <HAL_TSC_IOConfig>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_TSC_ConvCpltCallback+0xb2>
	  {
	    /* Initialization Error */
	    Error_Handler();
 80055ce:	f7fe fe4f 	bl	8004270 <Error_Handler>
	  }

	  /*##-9- Re-start the acquisition process ###################################*/
	  if (HAL_TSC_Start_IT(htsc) != HAL_OK)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f007 fcb2 	bl	800cf3c <HAL_TSC_Start_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_TSC_ConvCpltCallback+0xc2>
	  {
	    /* Acquisition Error */
	    Error_Handler();
 80055de:	f7fe fe47 	bl	8004270 <Error_Handler>
	  }
}
 80055e2:	bf00      	nop
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000ad0 	.word	0x20000ad0
 80055f0:	20000ad4 	.word	0x20000ad4
 80055f4:	200284dc 	.word	0x200284dc
 80055f8:	200284d0 	.word	0x200284d0

080055fc <process_touches>:
			/* Acquisition Error */
			Error_Handler();
		}
}

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time){
 80055fc:	b480      	push	{r7}
 80055fe:	b08f      	sub	sp, #60	; 0x3c
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
    if(self->touch_state == Idle){
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	7e1b      	ldrb	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11d      	bne.n	800564c <process_touches+0x50>
    	if(dbs[0].clean_out){
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	795b      	ldrb	r3, [r3, #5]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <process_touches+0x30>
    		self->touch_state = OnePressed;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	761a      	strb	r2, [r3, #24]
    		self->touches[0].cap_idx = 0;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
    		self->touches[0].start_t = cur_time;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]
    	    	action = Tap;
    	    }
    	    self->touch_state = Idle;
    	}
    }
}
 800562a:	e118      	b.n	800585e <process_touches+0x262>
    	else if(dbs[1].clean_out){
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3308      	adds	r3, #8
 8005630:	795b      	ldrb	r3, [r3, #5]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8113 	beq.w	800585e <process_touches+0x262>
    		self->touch_state = OnePressed;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	761a      	strb	r2, [r3, #24]
    		self->touches[0].cap_idx = 1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
    		self->touches[0].start_t = cur_time;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]
}
 800564a:	e108      	b.n	800585e <process_touches+0x262>
    else if(self->touch_state == OnePressed){
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	7e1b      	ldrb	r3, [r3, #24]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d127      	bne.n	80056a4 <process_touches+0xa8>
    	if(dbs[1 - self->touches[0].cap_idx].clean_out){
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f1c3 0301 	rsb	r3, r3, #1
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	795b      	ldrb	r3, [r3, #5]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <process_touches+0x88>
    		self->touch_state = TwoPressed;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2202      	movs	r2, #2
 800566c:	761a      	strb	r2, [r3, #24]
    		self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f1c3 0301 	rsb	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	731a      	strb	r2, [r3, #12]
    		self->touches[1].start_t = cur_time;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]
}
 8005682:	e0ec      	b.n	800585e <process_touches+0x262>
    	else if(!dbs[self->touches[0].cap_idx].clean_out){
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	795b      	ldrb	r3, [r3, #5]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 80e4 	bne.w	800585e <process_touches+0x262>
    		self->touch_state = OneReleasedNoPressed;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2203      	movs	r2, #3
 800569a:	761a      	strb	r2, [r3, #24]
    		self->touches[0].end_t = cur_time;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]
}
 80056a2:	e0dc      	b.n	800585e <process_touches+0x262>
    else if(self->touch_state == TwoPressed){
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d11e      	bne.n	80056ea <process_touches+0xee>
    	if(!dbs[self->touches[0].cap_idx].clean_out){
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	795b      	ldrb	r3, [r3, #5]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <process_touches+0xce>
    		self->touch_state = FirstReleasedSecondPressed;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2204      	movs	r2, #4
 80056c0:	761a      	strb	r2, [r3, #24]
    		self->touches[0].end_t = cur_time;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	e0c9      	b.n	800585e <process_touches+0x262>
    	else if(!dbs[self->touches[1].cap_idx].clean_out){
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7b1b      	ldrb	r3, [r3, #12]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	4413      	add	r3, r2
 80056d4:	795b      	ldrb	r3, [r3, #5]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 80c1 	bne.w	800585e <process_touches+0x262>
    		self->touch_state = SecondReleasedFirstPressed;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2205      	movs	r2, #5
 80056e0:	761a      	strb	r2, [r3, #24]
    		self->touches[1].end_t = cur_time;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	615a      	str	r2, [r3, #20]
}
 80056e8:	e0b9      	b.n	800585e <process_touches+0x262>
    else if(self->touch_state == OneReleasedNoPressed){
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	7e1b      	ldrb	r3, [r3, #24]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d130      	bne.n	8005754 <process_touches+0x158>
    	if(dbs[1 - self->touches[0].cap_idx].clean_out){
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f1c3 0301 	rsb	r3, r3, #1
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	4413      	add	r3, r2
 8005700:	795b      	ldrb	r3, [r3, #5]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <process_touches+0x126>
    		self->touch_state = FirstReleasedSecondPressed;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2204      	movs	r2, #4
 800570a:	761a      	strb	r2, [r3, #24]
    		self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f1c3 0301 	rsb	r3, r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	731a      	strb	r2, [r3, #12]
    		self->touches[1].start_t = cur_time;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]
}
 8005720:	e09d      	b.n	800585e <process_touches+0x262>
    	else if(cur_time - self->touches[0].end_t > MIN_SWIPE_GAP){
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b0a      	cmp	r3, #10
 800572c:	f240 8097 	bls.w	800585e <process_touches+0x262>
    		uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	61bb      	str	r3, [r7, #24]
			if(TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD){
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b28      	cmp	r3, #40	; 0x28
 8005740:	d904      	bls.n	800574c <process_touches+0x150>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2bc7      	cmp	r3, #199	; 0xc7
 8005746:	d801      	bhi.n	800574c <process_touches+0x150>
				enum TouchType action = Tap;
 8005748:	2303      	movs	r3, #3
 800574a:	75fb      	strb	r3, [r7, #23]
			self->touch_state = Idle;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	761a      	strb	r2, [r3, #24]
}
 8005752:	e084      	b.n	800585e <process_touches+0x262>
    else if(self->touch_state == FirstReleasedSecondPressed){
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	7e1b      	ldrb	r3, [r3, #24]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d147      	bne.n	80057ec <process_touches+0x1f0>
    	if(!dbs[self->touches[1].cap_idx].clean_out){
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	7b1b      	ldrb	r3, [r3, #12]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	795b      	ldrb	r3, [r3, #5]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d178      	bne.n	800585e <process_touches+0x262>
    		self->touch_state = Idle;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	761a      	strb	r2, [r3, #24]
    		self->touches[1].end_t = cur_time;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	615a      	str	r2, [r3, #20]
    		enum TouchType action = None;
 8005778:	2300      	movs	r3, #0
 800577a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    		uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
    		uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	623b      	str	r3, [r7, #32]
    		uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	61fb      	str	r3, [r7, #28]
    		if((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD) &&
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	2b28      	cmp	r3, #40	; 0x28
 80057a6:	d80c      	bhi.n	80057c2 <process_touches+0x1c6>
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2b28      	cmp	r3, #40	; 0x28
 80057ac:	d809      	bhi.n	80057c2 <process_touches+0x1c6>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b28      	cmp	r3, #40	; 0x28
 80057b2:	d906      	bls.n	80057c2 <process_touches+0x1c6>
    				(TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)){
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2bc7      	cmp	r3, #199	; 0xc7
 80057b8:	d803      	bhi.n	80057c2 <process_touches+0x1c6>
    			action = Tap;
 80057ba:	2303      	movs	r3, #3
 80057bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057c0:	e010      	b.n	80057e4 <process_touches+0x1e8>
    		else if(touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD){
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	2b28      	cmp	r3, #40	; 0x28
 80057c6:	d90d      	bls.n	80057e4 <process_touches+0x1e8>
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2b28      	cmp	r3, #40	; 0x28
 80057cc:	d90a      	bls.n	80057e4 <process_touches+0x1e8>
    			action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	b25a      	sxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	7b1b      	ldrb	r3, [r3, #12]
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    		self->touch_state = Idle;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	761a      	strb	r2, [r3, #24]
}
 80057ea:	e038      	b.n	800585e <process_touches+0x262>
    else if(self->touch_state == SecondReleasedFirstPressed){
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	7e1b      	ldrb	r3, [r3, #24]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d134      	bne.n	800585e <process_touches+0x262>
    	if(!dbs[self->touches[0].cap_idx].clean_out){
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4413      	add	r3, r2
 80057fe:	795b      	ldrb	r3, [r3, #5]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d12c      	bne.n	800585e <process_touches+0x262>
    	    self->touch_state = Idle;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	761a      	strb	r2, [r3, #24]
    	    self->touches[0].end_t = cur_time;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
    	    uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
    	    uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	633b      	str	r3, [r7, #48]	; 0x30
    	    uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    enum TouchType action = None;
 8005834:	2300      	movs	r3, #0
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	    if((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD) &&
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	2b28      	cmp	r3, #40	; 0x28
 800583e:	d80b      	bhi.n	8005858 <process_touches+0x25c>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2b28      	cmp	r3, #40	; 0x28
 8005844:	d808      	bhi.n	8005858 <process_touches+0x25c>
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	2b28      	cmp	r3, #40	; 0x28
 800584a:	d905      	bls.n	8005858 <process_touches+0x25c>
    	    		(TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)){
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	2bc7      	cmp	r3, #199	; 0xc7
 8005850:	d802      	bhi.n	8005858 <process_touches+0x25c>
    	    	action = Tap;
 8005852:	2303      	movs	r3, #3
 8005854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	    self->touch_state = Idle;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	761a      	strb	r2, [r3, #24]
}
 800585e:	bf00      	nop
 8005860:	373c      	adds	r7, #60	; 0x3c
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time){
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	460b      	mov	r3, r1
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	72fb      	strb	r3, [r7, #11]
	if(noisy_in != self->input){
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	791b      	ldrb	r3, [r3, #4]
 800587c:	7afa      	ldrb	r2, [r7, #11]
 800587e:	429a      	cmp	r2, r3
 8005880:	d006      	beq.n	8005890 <debounce+0x26>
		self->input = noisy_in;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	7afa      	ldrb	r2, [r7, #11]
 8005886:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
	}
	else if(cur_time - self->start_t > DEBOUNCE_TIME){
		self->clean_out = self->input;
	}
}
 800588e:	e009      	b.n	80058a4 <debounce+0x3a>
	else if(cur_time - self->start_t > DEBOUNCE_TIME){
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b1e      	cmp	r3, #30
 800589a:	d903      	bls.n	80058a4 <debounce+0x3a>
		self->clean_out = self->input;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	791a      	ldrb	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	715a      	strb	r2, [r3, #5]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_AHB1_GRP1_EnableClock>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_AHB2_GRP1_EnableClock>:
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4013      	ands	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <MX_TSC_Init+0x7c>)
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <MX_TSC_Init+0x80>)
 800591c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 800591e:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <MX_TSC_Init+0x7c>)
 8005920:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005924:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8005926:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <MX_TSC_Init+0x7c>)
 8005928:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800592c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <MX_TSC_Init+0x7c>)
 8005930:	2200      	movs	r2, #0
 8005932:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <MX_TSC_Init+0x7c>)
 8005936:	2201      	movs	r2, #1
 8005938:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <MX_TSC_Init+0x7c>)
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8005940:	4b13      	ldr	r3, [pc, #76]	; (8005990 <MX_TSC_Init+0x7c>)
 8005942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005946:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <MX_TSC_Init+0x7c>)
 800594a:	22c0      	movs	r2, #192	; 0xc0
 800594c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <MX_TSC_Init+0x7c>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <MX_TSC_Init+0x7c>)
 8005956:	2200      	movs	r2, #0
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <MX_TSC_Init+0x7c>)
 800595c:	2200      	movs	r2, #0
 800595e:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <MX_TSC_Init+0x7c>)
 8005962:	2200      	movs	r2, #0
 8005964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 8005968:	4b09      	ldr	r3, [pc, #36]	; (8005990 <MX_TSC_Init+0x7c>)
 800596a:	22c0      	movs	r2, #192	; 0xc0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 800596e:	4b08      	ldr	r3, [pc, #32]	; (8005990 <MX_TSC_Init+0x7c>)
 8005970:	2200      	movs	r2, #0
 8005972:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <MX_TSC_Init+0x7c>)
 8005976:	2210      	movs	r2, #16
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800597a:	4805      	ldr	r0, [pc, #20]	; (8005990 <MX_TSC_Init+0x7c>)
 800597c:	f007 fa5e 	bl	800ce3c <HAL_TSC_Init>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8005986:	f7fe fc73 	bl	8004270 <Error_Handler>
  }

}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200284f8 	.word	0x200284f8
 8005994:	40024000 	.word	0x40024000

08005998 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_TSC_MspInit+0x88>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d12e      	bne.n	8005a18 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80059ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059be:	f7ff ff77 	bl	80058b0 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c2:	2002      	movs	r0, #2
 80059c4:	f7ff ff8d 	bl	80058e2 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80059c8:	2310      	movs	r3, #16
 80059ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059cc:	2312      	movs	r3, #18
 80059ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80059d8:	2309      	movs	r3, #9
 80059da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	4619      	mov	r1, r3
 80059e2:	4810      	ldr	r0, [pc, #64]	; (8005a24 <HAL_TSC_MspInit+0x8c>)
 80059e4:	f002 f944 	bl	8007c70 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059e8:	23c0      	movs	r3, #192	; 0xc0
 80059ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ec:	2302      	movs	r3, #2
 80059ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80059f8:	2309      	movs	r3, #9
 80059fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4619      	mov	r1, r3
 8005a02:	4808      	ldr	r0, [pc, #32]	; (8005a24 <HAL_TSC_MspInit+0x8c>)
 8005a04:	f002 f934 	bl	8007c70 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 0, 0);
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2027      	movs	r0, #39	; 0x27
 8005a0e:	f001 fda8 	bl	8007562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8005a12:	2027      	movs	r0, #39	; 0x27
 8005a14:	f001 fdbf 	bl	8007596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40024000 	.word	0x40024000
 8005a24:	48000400 	.word	0x48000400

08005a28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005a28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a2c:	3304      	adds	r3, #4

08005a2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005a32:	d3f9      	bcc.n	8005a28 <CopyDataInit>
  bx lr
 8005a34:	4770      	bx	lr

08005a36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005a36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005a38:	3004      	adds	r0, #4

08005a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005a3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005a3c:	d3fb      	bcc.n	8005a36 <FillZerobss>
  bx lr
 8005a3e:	4770      	bx	lr

08005a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a40:	480c      	ldr	r0, [pc, #48]	; (8005a74 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005a42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005a44:	480c      	ldr	r0, [pc, #48]	; (8005a78 <LoopForever+0x8>)
 8005a46:	490d      	ldr	r1, [pc, #52]	; (8005a7c <LoopForever+0xc>)
 8005a48:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <LoopForever+0x10>)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f7ff ffef 	bl	8005a2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005a50:	480c      	ldr	r0, [pc, #48]	; (8005a84 <LoopForever+0x14>)
 8005a52:	490d      	ldr	r1, [pc, #52]	; (8005a88 <LoopForever+0x18>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	f7ff fff0 	bl	8005a3a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005a5a:	480c      	ldr	r0, [pc, #48]	; (8005a8c <LoopForever+0x1c>)
 8005a5c:	490c      	ldr	r1, [pc, #48]	; (8005a90 <LoopForever+0x20>)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f7ff ffeb 	bl	8005a3a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005a64:	f7ff faee 	bl	8005044 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005a68:	f00f f94a 	bl	8014d00 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005a6c:	f7fe fb28 	bl	80040c0 <main>

08005a70 <LoopForever>:

LoopForever:
  b LoopForever
 8005a70:	e7fe      	b.n	8005a70 <LoopForever>
 8005a72:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005a74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005a78:	20000004 	.word	0x20000004
 8005a7c:	20000138 	.word	0x20000138
 8005a80:	08017088 	.word	0x08017088
  INIT_BSS _sbss, _ebss
 8005a84:	200001e8 	.word	0x200001e8
 8005a88:	20028668 	.word	0x20028668
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005a8c:	200300c4 	.word	0x200300c4
 8005a90:	20030b5b 	.word	0x20030b5b

08005a94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a94:	e7fe      	b.n	8005a94 <ADC1_IRQHandler>
	...

08005a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_Init+0x3c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_Init+0x3c>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005aae:	2003      	movs	r0, #3
 8005ab0:	f001 fd4c 	bl	800754c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7ff f9f5 	bl	8004ea4 <HAL_InitTick>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	71fb      	strb	r3, [r7, #7]
 8005ac4:	e001      	b.n	8005aca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ac6:	f7ff f9bc 	bl	8004e42 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005aca:	79fb      	ldrb	r3, [r7, #7]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58004000 	.word	0x58004000

08005ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <HAL_IncTick+0x1c>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_IncTick+0x20>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <HAL_IncTick+0x1c>)
 8005ae8:	6013      	str	r3, [r2, #0]
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	2002853c 	.word	0x2002853c
 8005af8:	20000080 	.word	0x20000080

08005afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  return uwTick;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_GetTick+0x14>)
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	2002853c 	.word	0x2002853c

08005b14 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <HAL_GetTickPrio+0x14>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000007c 	.word	0x2000007c

08005b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8005b34:	f7ff ffe2 	bl	8005afc <HAL_GetTick>
 8005b38:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d004      	beq.n	8005b50 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_Delay+0x40>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8005b50:	bf00      	nop
 8005b52:	f7ff ffd3 	bl	8005afc <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d8f7      	bhi.n	8005b52 <HAL_Delay+0x26>
    {
    }
  }
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000080 	.word	0x20000080

08005b70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005bc8:	b490      	push	{r4, r7}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3360      	adds	r3, #96	; 0x60
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <LL_ADC_SetOffset+0x40>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc90      	pop	{r4, r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	03fff000 	.word	0x03fff000

08005c0c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c0c:	b490      	push	{r4, r7}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3360      	adds	r3, #96	; 0x60
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc90      	pop	{r4, r7}
 8005c32:	4770      	bx	lr

08005c34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005c34:	b490      	push	{r4, r7}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3360      	adds	r3, #96	; 0x60
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc90      	pop	{r4, r7}
 8005c62:	4770      	bx	lr

08005c64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c8a:	b490      	push	{r4, r7}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	4413      	add	r3, r2
 8005ca8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	211f      	movs	r1, #31
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0e9b      	lsrs	r3, r3, #26
 8005cc0:	f003 011f 	and.w	r1, r3, #31
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc90      	pop	{r4, r7}
 8005cda:	4770      	bx	lr

08005cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cdc:	b490      	push	{r4, r7}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3314      	adds	r3, #20
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	0d1b      	lsrs	r3, r3, #20
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2107      	movs	r1, #7
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	401a      	ands	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	0d1b      	lsrs	r3, r3, #20
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc90      	pop	{r4, r7}
 8005d2a:	4770      	bx	lr

08005d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0318 	and.w	r3, r3, #24
 8005d4e:	4908      	ldr	r1, [pc, #32]	; (8005d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d50:	40d9      	lsrs	r1, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	400b      	ands	r3, r1
 8005d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	0007ffff 	.word	0x0007ffff

08005d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6093      	str	r3, [r2, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dac:	d101      	bne.n	8005db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dfc:	d101      	bne.n	8005e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e4c:	f043 0202 	orr.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <LL_ADC_IsEnabled+0x18>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <LL_ADC_IsEnabled+0x1a>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d101      	bne.n	8005e9e <LL_ADC_IsDisableOngoing+0x18>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <LL_ADC_IsDisableOngoing+0x1a>
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ec0:	f043 0204 	orr.w	r2, r3, #4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ee8:	f043 0210 	orr.w	r2, r3, #16
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d101      	bne.n	8005f14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d101      	bne.n	8005f62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e12a      	b.n	80061e0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fa ffb9 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fef1 	bl	8005d98 <LL_ADC_IsDeepPowerDownEnabled>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fed7 	bl	8005d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff ff0c 	bl	8005de8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d113      	bne.n	8005ffe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fef0 	bl	8005dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005fe0:	4b81      	ldr	r3, [pc, #516]	; (80061e8 <HAL_ADC_Init+0x278>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	4a81      	ldr	r2, [pc, #516]	; (80061ec <HAL_ADC_Init+0x27c>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ff0:	e002      	b.n	8005ff8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f9      	bne.n	8005ff2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fef0 	bl	8005de8 <LL_ADC_IsInternalRegulatorEnabled>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10d      	bne.n	800602a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f043 0210 	orr.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f043 0201 	orr.w	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff ff64 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006034:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 80c5 	bne.w	80061ce <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 80c1 	bne.w	80061ce <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006054:	f043 0202 	orr.w	r2, r3, #2
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fefd 	bl	8005e60 <LL_ADC_IsEnabled>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800606c:	4860      	ldr	r0, [pc, #384]	; (80061f0 <HAL_ADC_Init+0x280>)
 800606e:	f7ff fef7 	bl	8005e60 <LL_ADC_IsEnabled>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4619      	mov	r1, r3
 800607e:	485d      	ldr	r0, [pc, #372]	; (80061f4 <HAL_ADC_Init+0x284>)
 8006080:	f7ff fd76 	bl	8005b70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7e5b      	ldrb	r3, [r3, #25]
 8006088:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800608e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006094:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800609a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d106      	bne.n	80060c0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	3b01      	subs	r3, #1
 80060b8:	045b      	lsls	r3, r3, #17
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <HAL_ADC_Init+0x288>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	430b      	orrs	r3, r1
 80060ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff01 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 80060fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff22 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006106:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d13d      	bne.n	800618a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d13a      	bne.n	800618a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006118:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006120:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006130:	f023 0302 	bic.w	r3, r3, #2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	430b      	orrs	r3, r1
 800613c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006144:	2b01      	cmp	r3, #1
 8006146:	d118      	bne.n	800617a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800615e:	4311      	orrs	r1, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006164:	4311      	orrs	r1, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800616a:	430a      	orrs	r2, r1
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	611a      	str	r2, [r3, #16]
 8006178:	e007      	b.n	800618a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d10c      	bne.n	80061ac <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	f023 010f 	bic.w	r1, r3, #15
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
 80061aa:	e007      	b.n	80061bc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 020f 	bic.w	r2, r2, #15
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f023 0303 	bic.w	r3, r3, #3
 80061c4:	f043 0201 	orr.w	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
 80061cc:	e007      	b.n	80061de <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061de:	7ffb      	ldrb	r3, [r7, #31]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000078 	.word	0x20000078
 80061ec:	053e2d63 	.word	0x053e2d63
 80061f0:	50040000 	.word	0x50040000
 80061f4:	50040300 	.word	0x50040300
 80061f8:	fff0c007 	.word	0xfff0c007

080061fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe75 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d167      	bne.n	80062e8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_ADC_Start_DMA+0x2a>
 8006222:	2302      	movs	r3, #2
 8006224:	e063      	b.n	80062ee <HAL_ADC_Start_DMA+0xf2>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fcc2 	bl	8006bb8 <ADC_Enable>
 8006234:	4603      	mov	r3, r0
 8006236:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d14f      	bne.n	80062de <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	f023 0206 	bic.w	r2, r3, #6
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	659a      	str	r2, [r3, #88]	; 0x58
 800626a:	e002      	b.n	8006272 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <HAL_ADC_Start_DMA+0xfc>)
 8006278:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <HAL_ADC_Start_DMA+0x100>)
 8006280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <HAL_ADC_Start_DMA+0x104>)
 8006288:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	221c      	movs	r2, #28
 8006290:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0210 	orr.w	r2, r2, #16
 80062a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0201 	orr.w	r2, r2, #1
 80062b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3340      	adds	r3, #64	; 0x40
 80062c4:	4619      	mov	r1, r3
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f001 fa49 	bl	8007760 <HAL_DMA_Start_IT>
 80062ce:	4603      	mov	r3, r0
 80062d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fde8 	bl	8005eac <LL_ADC_REG_StartConversion>
 80062dc:	e006      	b.n	80062ec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80062e6:	e001      	b.n	80062ec <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
 80062ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08006d1d 	.word	0x08006d1d
 80062fc:	08006df5 	.word	0x08006df5
 8006300:	08006e11 	.word	0x08006e11

08006304 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_ADC_Stop_DMA+0x16>
 8006316:	2302      	movs	r3, #2
 8006318:	e051      	b.n	80063be <HAL_ADC_Stop_DMA+0xba>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006322:	2103      	movs	r1, #3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fb93 	bl	8006a50 <ADC_ConversionStop>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d13f      	bne.n	80063b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d10f      	bne.n	8006372 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fa7d 	bl	8007856 <HAL_DMA_Abort>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0210 	bic.w	r2, r2, #16
 8006380:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc6f 	bl	8006c6c <ADC_Disable>
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	e002      	b.n	800639a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc69 	bl	8006c6c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	f043 0201 	orr.w	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b0a6      	sub	sp, #152	; 0x98
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x22>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e31e      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x660>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd76 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 8303 	bne.w	8006a1e <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	f7ff fc30 	bl	8005c8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fd64 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006434:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fd84 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006442:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 8148 	bne.w	80066e0 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8143 	bne.w	80066e0 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	461a      	mov	r2, r3
 8006468:	f7ff fc38 	bl	8005cdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d00a      	beq.n	80064a4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800649e:	f7ff fb93 	bl	8005bc8 <LL_ADC_SetOffset>
 80064a2:	e11d      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fbae 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0xf4>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fba3 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80064c6:	4603      	mov	r3, r0
 80064c8:	0e9b      	lsrs	r3, r3, #26
 80064ca:	f003 021f 	and.w	r2, r3, #31
 80064ce:	e012      	b.n	80064f6 <HAL_ADC_ConfigChannel+0x11a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fb98 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80064dc:	4603      	mov	r3, r0
 80064de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064e6:	fa93 f3a3 	rbit	r3, r3
 80064ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80064ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ee:	fab3 f383 	clz	r3, r3
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <HAL_ADC_ConfigChannel+0x132>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	0e9b      	lsrs	r3, r3, #26
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	e00a      	b.n	8006524 <HAL_ADC_ConfigChannel+0x148>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006516:	fa93 f3a3 	rbit	r3, r3
 800651a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800651c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800651e:	fab3 f383 	clz	r3, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	429a      	cmp	r2, r3
 8006526:	d106      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fb7f 	bl	8005c34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2101      	movs	r1, #1
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fb65 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 8006542:	4603      	mov	r3, r0
 8006544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x186>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fb5a 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 8006558:	4603      	mov	r3, r0
 800655a:	0e9b      	lsrs	r3, r3, #26
 800655c:	f003 021f 	and.w	r2, r3, #31
 8006560:	e010      	b.n	8006584 <HAL_ADC_ConfigChannel+0x1a8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2101      	movs	r1, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fb4f 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 800656e:	4603      	mov	r3, r0
 8006570:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006574:	fa93 f3a3 	rbit	r3, r3
 8006578:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800657a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_ADC_ConfigChannel+0x1c0>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	0e9b      	lsrs	r3, r3, #26
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	e00a      	b.n	80065b2 <HAL_ADC_ConfigChannel+0x1d6>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a4:	fa93 f3a3 	rbit	r3, r3
 80065a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80065aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ac:	fab3 f383 	clz	r3, r3
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d106      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2101      	movs	r1, #1
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fb38 	bl	8005c34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2102      	movs	r1, #2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fb1e 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x214>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2102      	movs	r1, #2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fb13 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80065e6:	4603      	mov	r3, r0
 80065e8:	0e9b      	lsrs	r3, r3, #26
 80065ea:	f003 021f 	and.w	r2, r3, #31
 80065ee:	e010      	b.n	8006612 <HAL_ADC_ConfigChannel+0x236>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fb08 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 80065fc:	4603      	mov	r3, r0
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	fa93 f3a3 	rbit	r3, r3
 8006606:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660a:	fab3 f383 	clz	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <HAL_ADC_ConfigChannel+0x24e>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0e9b      	lsrs	r3, r3, #26
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	e00a      	b.n	8006640 <HAL_ADC_ConfigChannel+0x264>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006632:	fa93 f3a3 	rbit	r3, r3
 8006636:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	429a      	cmp	r2, r3
 8006642:	d106      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	2102      	movs	r1, #2
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff faf1 	bl	8005c34 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2103      	movs	r1, #3
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fad7 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 800665e:	4603      	mov	r3, r0
 8006660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_ADC_ConfigChannel+0x2a2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2103      	movs	r1, #3
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff facc 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 8006674:	4603      	mov	r3, r0
 8006676:	0e9b      	lsrs	r3, r3, #26
 8006678:	f003 021f 	and.w	r2, r3, #31
 800667c:	e010      	b.n	80066a0 <HAL_ADC_ConfigChannel+0x2c4>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2103      	movs	r1, #3
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fac1 	bl	8005c0c <LL_ADC_GetOffsetChannel>
 800668a:	4603      	mov	r3, r0
 800668c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006698:	fab3 f383 	clz	r3, r3
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x2dc>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	0e9b      	lsrs	r3, r3, #26
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	e00a      	b.n	80066ce <HAL_ADC_ConfigChannel+0x2f2>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80066c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c8:	fab3 f383 	clz	r3, r3
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d106      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2103      	movs	r1, #3
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff faaa 	bl	8005c34 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fbbb 	bl	8005e60 <LL_ADC_IsEnabled>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 819f 	bne.w	8006a30 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7ff fb14 	bl	8005d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4aab      	ldr	r2, [pc, #684]	; (80069b8 <HAL_ADC_ConfigChannel+0x5dc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f040 80fd 	bne.w	800690a <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x35c>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	0e9b      	lsrs	r3, r3, #26
 8006726:	3301      	adds	r3, #1
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2b09      	cmp	r3, #9
 800672e:	bf94      	ite	ls
 8006730:	2301      	movls	r3, #1
 8006732:	2300      	movhi	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	e012      	b.n	800675e <HAL_ADC_ConfigChannel+0x382>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006740:	fa93 f3a3 	rbit	r3, r3
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006748:	fab3 f383 	clz	r3, r3
 800674c:	b2db      	uxtb	r3, r3
 800674e:	3301      	adds	r3, #1
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2b09      	cmp	r3, #9
 8006756:	bf94      	ite	ls
 8006758:	2301      	movls	r3, #1
 800675a:	2300      	movhi	r3, #0
 800675c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800675e:	2b00      	cmp	r3, #0
 8006760:	d064      	beq.n	800682c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_ADC_ConfigChannel+0x3a2>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	0e9b      	lsrs	r3, r3, #26
 8006774:	3301      	adds	r3, #1
 8006776:	069b      	lsls	r3, r3, #26
 8006778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800677c:	e00e      	b.n	800679c <HAL_ADC_ConfigChannel+0x3c0>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	fa93 f3a3 	rbit	r3, r3
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	fab3 f383 	clz	r3, r3
 8006792:	b2db      	uxtb	r3, r3
 8006794:	3301      	adds	r3, #1
 8006796:	069b      	lsls	r3, r3, #26
 8006798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x3e0>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	0e9b      	lsrs	r3, r3, #26
 80067ae:	3301      	adds	r3, #1
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2101      	movs	r1, #1
 80067b6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ba:	e010      	b.n	80067de <HAL_ADC_ConfigChannel+0x402>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	fa93 f3a3 	rbit	r3, r3
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	fab3 f383 	clz	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	3301      	adds	r3, #1
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2101      	movs	r1, #1
 80067da:	fa01 f303 	lsl.w	r3, r1, r3
 80067de:	ea42 0103 	orr.w	r1, r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x428>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	0e9b      	lsrs	r3, r3, #26
 80067f4:	3301      	adds	r3, #1
 80067f6:	f003 021f 	and.w	r2, r3, #31
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	051b      	lsls	r3, r3, #20
 8006802:	e011      	b.n	8006828 <HAL_ADC_ConfigChannel+0x44c>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	fa93 f3a3 	rbit	r3, r3
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	fab3 f383 	clz	r3, r3
 8006818:	b2db      	uxtb	r3, r3
 800681a:	3301      	adds	r3, #1
 800681c:	f003 021f 	and.w	r2, r3, #31
 8006820:	4613      	mov	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4413      	add	r3, r2
 8006826:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006828:	430b      	orrs	r3, r1
 800682a:	e069      	b.n	8006900 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006834:	2b00      	cmp	r3, #0
 8006836:	d107      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x46c>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	0e9b      	lsrs	r3, r3, #26
 800683e:	3301      	adds	r3, #1
 8006840:	069b      	lsls	r3, r3, #26
 8006842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006846:	e00e      	b.n	8006866 <HAL_ADC_ConfigChannel+0x48a>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	fa93 f3a3 	rbit	r3, r3
 8006854:	61fb      	str	r3, [r7, #28]
  return result;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	fab3 f383 	clz	r3, r3
 800685c:	b2db      	uxtb	r3, r3
 800685e:	3301      	adds	r3, #1
 8006860:	069b      	lsls	r3, r3, #26
 8006862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x4aa>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	0e9b      	lsrs	r3, r3, #26
 8006878:	3301      	adds	r3, #1
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2101      	movs	r1, #1
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	e010      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x4cc>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	fa93 f3a3 	rbit	r3, r3
 8006892:	617b      	str	r3, [r7, #20]
  return result;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	fab3 f383 	clz	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2101      	movs	r1, #1
 80068a4:	fa01 f303 	lsl.w	r3, r1, r3
 80068a8:	ea42 0103 	orr.w	r1, r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <HAL_ADC_ConfigChannel+0x4f8>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	0e9b      	lsrs	r3, r3, #26
 80068be:	3301      	adds	r3, #1
 80068c0:	f003 021f 	and.w	r2, r3, #31
 80068c4:	4613      	mov	r3, r2
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	4413      	add	r3, r2
 80068ca:	3b1e      	subs	r3, #30
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068d2:	e014      	b.n	80068fe <HAL_ADC_ConfigChannel+0x522>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	fa93 f3a3 	rbit	r3, r3
 80068e0:	60fb      	str	r3, [r7, #12]
  return result;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	fab3 f383 	clz	r3, r3
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	3301      	adds	r3, #1
 80068ec:	f003 021f 	and.w	r2, r3, #31
 80068f0:	4613      	mov	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	3b1e      	subs	r3, #30
 80068f8:	051b      	lsls	r3, r3, #20
 80068fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068fe:	430b      	orrs	r3, r1
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	6892      	ldr	r2, [r2, #8]
 8006904:	4619      	mov	r1, r3
 8006906:	f7ff f9e9 	bl	8005cdc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <HAL_ADC_ConfigChannel+0x5e0>)
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 808c 	beq.w	8006a30 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006918:	4829      	ldr	r0, [pc, #164]	; (80069c0 <HAL_ADC_ConfigChannel+0x5e4>)
 800691a:	f7ff f947 	bl	8005bac <LL_ADC_GetCommonPathInternalCh>
 800691e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006922:	4828      	ldr	r0, [pc, #160]	; (80069c4 <HAL_ADC_ConfigChannel+0x5e8>)
 8006924:	f7ff fa9c 	bl	8005e60 <LL_ADC_IsEnabled>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d16d      	bne.n	8006a0a <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <HAL_ADC_ConfigChannel+0x5ec>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d126      	bne.n	8006986 <HAL_ADC_ConfigChannel+0x5aa>
 8006938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800693c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d120      	bne.n	8006986 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1e      	ldr	r2, [pc, #120]	; (80069c4 <HAL_ADC_ConfigChannel+0x5e8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d170      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800694e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006956:	4619      	mov	r1, r3
 8006958:	4819      	ldr	r0, [pc, #100]	; (80069c0 <HAL_ADC_ConfigChannel+0x5e4>)
 800695a:	f7ff f914 	bl	8005b86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <HAL_ADC_ConfigChannel+0x5f0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	099b      	lsrs	r3, r3, #6
 8006964:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_ADC_ConfigChannel+0x5f4>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	099a      	lsrs	r2, r3, #6
 800696c:	4613      	mov	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006976:	e002      	b.n	800697e <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	3b01      	subs	r3, #1
 800697c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f9      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006984:	e054      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <HAL_ADC_ConfigChannel+0x5f8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d123      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x5fc>
 8006990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11d      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <HAL_ADC_ConfigChannel+0x5e8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d144      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80069a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ae:	4619      	mov	r1, r3
 80069b0:	4803      	ldr	r0, [pc, #12]	; (80069c0 <HAL_ADC_ConfigChannel+0x5e4>)
 80069b2:	f7ff f8e8 	bl	8005b86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069b6:	e03b      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
 80069b8:	407f0000 	.word	0x407f0000
 80069bc:	80080000 	.word	0x80080000
 80069c0:	50040300 	.word	0x50040300
 80069c4:	50040000 	.word	0x50040000
 80069c8:	c7520000 	.word	0xc7520000
 80069cc:	20000078 	.word	0x20000078
 80069d0:	053e2d63 	.word	0x053e2d63
 80069d4:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a19      	ldr	r2, [pc, #100]	; (8006a44 <HAL_ADC_ConfigChannel+0x668>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d126      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
 80069e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d120      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <HAL_ADC_ConfigChannel+0x66c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d11b      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80069f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a00:	4619      	mov	r1, r3
 8006a02:	4812      	ldr	r0, [pc, #72]	; (8006a4c <HAL_ADC_ConfigChannel+0x670>)
 8006a04:	f7ff f8bf 	bl	8005b86 <LL_ADC_SetCommonPathInternalCh>
 8006a08:	e012      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006a1c:	e008      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f043 0220 	orr.w	r2, r3, #32
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3798      	adds	r7, #152	; 0x98
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	80000001 	.word	0x80000001
 8006a48:	50040000 	.word	0x50040000
 8006a4c:	50040300 	.word	0x50040300

08006a50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fa48 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006a6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fa69 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006a78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8090 	beq.w	8006ba8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02a      	beq.n	8006aec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7e5b      	ldrb	r3, [r3, #25]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d126      	bne.n	8006aec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7e1b      	ldrb	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d122      	bne.n	8006aec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006aaa:	e014      	b.n	8006ad6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4a41      	ldr	r2, [pc, #260]	; (8006bb4 <ADC_ConversionStop+0x164>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d90d      	bls.n	8006ad0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac4:	f043 0201 	orr.w	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e06c      	b.n	8006baa <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d1e3      	bne.n	8006aac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2240      	movs	r2, #64	; 0x40
 8006aea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d014      	beq.n	8006b1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fa00 	bl	8005efc <LL_ADC_REG_IsConversionOngoing>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff f9bd 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff f9dc 	bl	8005ed4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d014      	beq.n	8006b4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fa0f 	bl	8005f4a <LL_ADC_INJ_IsConversionOngoing>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff f9a5 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff f9eb 	bl	8005f22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d004      	beq.n	8006b5c <ADC_ConversionStop+0x10c>
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d105      	bne.n	8006b62 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006b56:	230c      	movs	r3, #12
 8006b58:	617b      	str	r3, [r7, #20]
        break;
 8006b5a:	e005      	b.n	8006b68 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
        break;
 8006b60:	e002      	b.n	8006b68 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006b62:	2304      	movs	r3, #4
 8006b64:	617b      	str	r3, [r7, #20]
        break;
 8006b66:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006b68:	f7fe ffc8 	bl	8005afc <HAL_GetTick>
 8006b6c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006b6e:	e014      	b.n	8006b9a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006b70:	f7fe ffc4 	bl	8005afc <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d90d      	bls.n	8006b9a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f043 0210 	orr.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	f043 0201 	orr.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e007      	b.n	8006baa <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e3      	bne.n	8006b70 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	a33fffff 	.word	0xa33fffff

08006bb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f94b 	bl	8005e60 <LL_ADC_IsEnabled>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d146      	bne.n	8006c5e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <ADC_Enable+0xb0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f043 0210 	orr.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	f043 0201 	orr.w	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e032      	b.n	8006c60 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f906 	bl	8005e10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006c04:	f7fe ff7a 	bl	8005afc <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c0a:	e021      	b.n	8006c50 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff f925 	bl	8005e60 <LL_ADC_IsEnabled>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff f8f5 	bl	8005e10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c26:	f7fe ff69 	bl	8005afc <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d90d      	bls.n	8006c50 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c38:	f043 0210 	orr.w	r2, r3, #16
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f043 0201 	orr.w	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e007      	b.n	8006c60 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d1d6      	bne.n	8006c0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	8000003f 	.word	0x8000003f

08006c6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff f904 	bl	8005e86 <LL_ADC_IsDisableOngoing>
 8006c7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff f8eb 	bl	8005e60 <LL_ADC_IsEnabled>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d040      	beq.n	8006d12 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 030d 	and.w	r3, r3, #13
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d10c      	bne.n	8006cbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff f8c5 	bl	8005e38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cb6:	f7fe ff21 	bl	8005afc <HAL_GetTick>
 8006cba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cbc:	e022      	b.n	8006d04 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	f043 0210 	orr.w	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e01c      	b.n	8006d14 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cda:	f7fe ff0f 	bl	8005afc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d90d      	bls.n	8006d04 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	f043 0210 	orr.w	r2, r3, #16
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	f043 0201 	orr.w	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e007      	b.n	8006d14 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e3      	bne.n	8006cda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d14b      	bne.n	8006dce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d021      	beq.n	8006d94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe ff85 	bl	8005c64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d032      	beq.n	8006dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d12b      	bne.n	8006dc6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11f      	bne.n	8006dc6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f043 0201 	orr.w	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	655a      	str	r2, [r3, #84]	; 0x54
 8006d92:	e018      	b.n	8006dc6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d111      	bne.n	8006dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7fa fc80 	bl	80016cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dcc:	e00e      	b.n	8006dec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff faf3 	bl	80063c6 <HAL_ADC_ErrorCallback>
}
 8006de0:	e004      	b.n	8006dec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7fa fc7a 	bl	80016fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2e:	f043 0204 	orr.w	r2, r3, #4
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff fac5 	bl	80063c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <LL_EXTI_EnableIT_0_31>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <LL_EXTI_EnableIT_0_31+0x24>)
 8006e4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006e52:	4905      	ldr	r1, [pc, #20]	; (8006e68 <LL_EXTI_EnableIT_0_31+0x24>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	58000800 	.word	0x58000800

08006e6c <LL_EXTI_DisableIT_0_31>:
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <LL_EXTI_DisableIT_0_31+0x28>)
 8006e76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	4905      	ldr	r1, [pc, #20]	; (8006e94 <LL_EXTI_DisableIT_0_31+0x28>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	58000800 	.word	0x58000800

08006e98 <LL_EXTI_EnableEvent_0_31>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <LL_EXTI_EnableEvent_0_31+0x24>)
 8006ea2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006ea6:	4905      	ldr	r1, [pc, #20]	; (8006ebc <LL_EXTI_EnableEvent_0_31+0x24>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	58000800 	.word	0x58000800

08006ec0 <LL_EXTI_DisableEvent_0_31>:
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <LL_EXTI_DisableEvent_0_31+0x28>)
 8006eca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	4905      	ldr	r1, [pc, #20]	; (8006ee8 <LL_EXTI_DisableEvent_0_31+0x28>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	58000800 	.word	0x58000800

08006eec <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	4904      	ldr	r1, [pc, #16]	; (8006f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	600b      	str	r3, [r1, #0]
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	58000800 	.word	0x58000800

08006f10 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]

}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	58000800 	.word	0x58000800

08006f38 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	4904      	ldr	r1, [pc, #16]	; (8006f58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	58000800 	.word	0x58000800

08006f5c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	4904      	ldr	r1, [pc, #16]	; (8006f80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	604b      	str	r3, [r1, #4]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	58000800 	.word	0x58000800

08006f84 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4013      	ands	r3, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d101      	bne.n	8006f9e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	58000800 	.word	0x58000800

08006fb0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60d3      	str	r3, [r2, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	58000800 	.word	0x58000800

08006fd0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e0c4      	b.n	8007176 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ffa:	d102      	bne.n	8007002 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e0b9      	b.n	8007176 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fa fbcd 	bl	80017bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800702c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <HAL_COMP_Init+0x1b0>)
 800705a:	4013      	ands	r3, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	6979      	ldr	r1, [r7, #20]
 8007062:	430b      	orrs	r3, r1
 8007064:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706e:	d106      	bne.n	800707e <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <HAL_COMP_Init+0x1b4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a43      	ldr	r2, [pc, #268]	; (8007184 <HAL_COMP_Init+0x1b4>)
 8007076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e005      	b.n	800708a <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <HAL_COMP_Init+0x1b4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a40      	ldr	r2, [pc, #256]	; (8007184 <HAL_COMP_Init+0x1b4>)
 8007084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007088:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d015      	beq.n	80070c4 <HAL_COMP_Init+0xf4>
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d112      	bne.n	80070c4 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800709e:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <HAL_COMP_Init+0x1b8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	099b      	lsrs	r3, r3, #6
 80070a4:	4a39      	ldr	r2, [pc, #228]	; (800718c <HAL_COMP_Init+0x1bc>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	099a      	lsrs	r2, r3, #6
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80070b6:	e002      	b.n	80070be <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f9      	bne.n	80070b8 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a31      	ldr	r2, [pc, #196]	; (8007190 <HAL_COMP_Init+0x1c0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d102      	bne.n	80070d4 <HAL_COMP_Init+0x104>
 80070ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070d2:	e001      	b.n	80070d8 <HAL_COMP_Init+0x108>
 80070d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070d8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d037      	beq.n	8007156 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80070f2:	6938      	ldr	r0, [r7, #16]
 80070f4:	f7ff fefa 	bl	8006eec <LL_EXTI_EnableRisingTrig_0_31>
 80070f8:	e002      	b.n	8007100 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7ff ff08 	bl	8006f10 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800710c:	6938      	ldr	r0, [r7, #16]
 800710e:	f7ff ff13 	bl	8006f38 <LL_EXTI_EnableFallingTrig_0_31>
 8007112:	e002      	b.n	800711a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007114:	6938      	ldr	r0, [r7, #16]
 8007116:	f7ff ff21 	bl	8006f5c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800711a:	6938      	ldr	r0, [r7, #16]
 800711c:	f7ff ff48 	bl	8006fb0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800712c:	6938      	ldr	r0, [r7, #16]
 800712e:	f7ff feb3 	bl	8006e98 <LL_EXTI_EnableEvent_0_31>
 8007132:	e002      	b.n	800713a <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007134:	6938      	ldr	r0, [r7, #16]
 8007136:	f7ff fec3 	bl	8006ec0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007146:	6938      	ldr	r0, [r7, #16]
 8007148:	f7ff fe7c 	bl	8006e44 <LL_EXTI_EnableIT_0_31>
 800714c:	e009      	b.n	8007162 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800714e:	6938      	ldr	r0, [r7, #16]
 8007150:	f7ff fe8c 	bl	8006e6c <LL_EXTI_DisableIT_0_31>
 8007154:	e005      	b.n	8007162 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007156:	6938      	ldr	r0, [r7, #16]
 8007158:	f7ff feb2 	bl	8006ec0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800715c:	6938      	ldr	r0, [r7, #16]
 800715e:	f7ff fe85 	bl	8006e6c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007176:	7ffb      	ldrb	r3, [r7, #31]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	f9207c03 	.word	0xf9207c03
 8007184:	40010204 	.word	0x40010204
 8007188:	20000078 	.word	0x20000078
 800718c:	053e2d63 	.word	0x053e2d63
 8007190:	40010200 	.word	0x40010200

08007194 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800719c:	2300      	movs	r3, #0
 800719e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
 80071ae:	e02f      	b.n	8007210 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071be:	d102      	bne.n	80071c6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
 80071c4:	e024      	b.n	8007210 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d11c      	bne.n	800720c <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <HAL_COMP_Start+0x8c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	099b      	lsrs	r3, r3, #6
 80071f0:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <HAL_COMP_Start+0x90>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	099b      	lsrs	r3, r3, #6
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80071fc:	e002      	b.n	8007204 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3b01      	subs	r3, #1
 8007202:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f9      	bne.n	80071fe <HAL_COMP_Start+0x6a>
 800720a:	e001      	b.n	8007210 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000078 	.word	0x20000078
 8007224:	053e2d63 	.word	0x053e2d63

08007228 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
 800723e:	e01f      	b.n	8007280 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800724e:	d102      	bne.n	8007256 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	e014      	b.n	8007280 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800727a:	e001      	b.n	8007280 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a11      	ldr	r2, [pc, #68]	; (80072e4 <HAL_COMP_IRQHandler+0x54>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d102      	bne.n	80072a8 <HAL_COMP_IRQHandler+0x18>
 80072a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80072a6:	e001      	b.n	80072ac <HAL_COMP_IRQHandler+0x1c>
 80072a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fe68 	bl	8006f84 <LL_EXTI_IsActiveFlag_0_31>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_COMP_IRQHandler+0x58>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80072c6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80072ca:	f7ff fe71 	bl	8006fb0 <LL_EXTI_ClearFlag_0_31>
 80072ce:	e002      	b.n	80072d6 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fe6d 	bl	8006fb0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fe f8e2 	bl	80054a0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40010200 	.word	0x40010200
 80072e8:	40010204 	.word	0x40010204

080072ec <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	0f9b      	lsrs	r3, r3, #30
 80072fc:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <__NVIC_SetPriorityGrouping+0x44>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007328:	4013      	ands	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800733e:	4a04      	ldr	r2, [pc, #16]	; (8007350 <__NVIC_SetPriorityGrouping+0x44>)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	60d3      	str	r3, [r2, #12]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <__NVIC_GetPriorityGrouping+0x18>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	f003 0307 	and.w	r3, r3, #7
}
 8007362:	4618      	mov	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	e000ed00 	.word	0xe000ed00

08007370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800737a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737e:	2b00      	cmp	r3, #0
 8007380:	db0b      	blt.n	800739a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	f003 021f 	and.w	r2, r3, #31
 8007388:	4907      	ldr	r1, [pc, #28]	; (80073a8 <__NVIC_EnableIRQ+0x38>)
 800738a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	2001      	movs	r0, #1
 8007392:	fa00 f202 	lsl.w	r2, r0, r2
 8007396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	e000e100 	.word	0xe000e100

080073ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	db10      	blt.n	80073e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	f003 021f 	and.w	r2, r3, #31
 80073c4:	4909      	ldr	r1, [pc, #36]	; (80073ec <__NVIC_DisableIRQ+0x40>)
 80073c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2001      	movs	r0, #1
 80073ce:	fa00 f202 	lsl.w	r2, r0, r2
 80073d2:	3320      	adds	r3, #32
 80073d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80073d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80073dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	e000e100 	.word	0xe000e100

080073f0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db0c      	blt.n	800741c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	f003 021f 	and.w	r2, r3, #31
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <__NVIC_SetPendingIRQ+0x38>)
 800740a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	2001      	movs	r0, #1
 8007412:	fa00 f202 	lsl.w	r2, r0, r2
 8007416:	3340      	adds	r3, #64	; 0x40
 8007418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000e100 	.word	0xe000e100

0800742c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	db0c      	blt.n	8007458 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	f003 021f 	and.w	r2, r3, #31
 8007444:	4907      	ldr	r1, [pc, #28]	; (8007464 <__NVIC_ClearPendingIRQ+0x38>)
 8007446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	2001      	movs	r0, #1
 800744e:	fa00 f202 	lsl.w	r2, r0, r2
 8007452:	3360      	adds	r3, #96	; 0x60
 8007454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	e000e100 	.word	0xe000e100

08007468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db0a      	blt.n	8007492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <__NVIC_SetPriority+0x4c>)
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	0112      	lsls	r2, r2, #4
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	440b      	add	r3, r1
 800748c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007490:	e00a      	b.n	80074a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	4908      	ldr	r1, [pc, #32]	; (80074b8 <__NVIC_SetPriority+0x50>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	3b04      	subs	r3, #4
 80074a0:	0112      	lsls	r2, r2, #4
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	440b      	add	r3, r1
 80074a6:	761a      	strb	r2, [r3, #24]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000e100 	.word	0xe000e100
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f1c3 0307 	rsb	r3, r3, #7
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf28      	it	cs
 80074da:	2304      	movcs	r3, #4
 80074dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3304      	adds	r3, #4
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	d902      	bls.n	80074ec <NVIC_EncodePriority+0x30>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3b03      	subs	r3, #3
 80074ea:	e000      	b.n	80074ee <NVIC_EncodePriority+0x32>
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43da      	mvns	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	401a      	ands	r2, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007504:	f04f 31ff 	mov.w	r1, #4294967295
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	fa01 f303 	lsl.w	r3, r1, r3
 800750e:	43d9      	mvns	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007514:	4313      	orrs	r3, r2
         );
}
 8007516:	4618      	mov	r0, r3
 8007518:	3724      	adds	r7, #36	; 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007528:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <__NVIC_SystemReset+0x20>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007534:	4903      	ldr	r1, [pc, #12]	; (8007544 <__NVIC_SystemReset+0x20>)
 8007536:	4b04      	ldr	r3, [pc, #16]	; (8007548 <__NVIC_SystemReset+0x24>)
 8007538:	4313      	orrs	r3, r2
 800753a:	60cb      	str	r3, [r1, #12]
 800753c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <__NVIC_SystemReset+0x1c>
 8007544:	e000ed00 	.word	0xe000ed00
 8007548:	05fa0004 	.word	0x05fa0004

0800754c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fed9 	bl	800730c <__NVIC_SetPriorityGrouping>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	4603      	mov	r3, r0
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007570:	f7ff fef0 	bl	8007354 <__NVIC_GetPriorityGrouping>
 8007574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f7ff ff9e 	bl	80074bc <NVIC_EncodePriority>
 8007580:	4602      	mov	r2, r0
 8007582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ff6d 	bl	8007468 <__NVIC_SetPriority>
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	4603      	mov	r3, r0
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff fee3 	bl	8007370 <__NVIC_EnableIRQ>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4603      	mov	r3, r0
 80075ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80075bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fef3 	bl	80073ac <__NVIC_DisableIRQ>
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80075d2:	f7ff ffa7 	bl	8007524 <__NVIC_SystemReset>

080075d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	4603      	mov	r3, r0
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80075e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ff03 	bl	80073f0 <__NVIC_SetPendingIRQ>
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	4603      	mov	r3, r0
 80075fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80075fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff ff13 	bl	800742c <__NVIC_ClearPendingIRQ>
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e08d      	b.n	800773e <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	4b47      	ldr	r3, [pc, #284]	; (8007748 <HAL_DMA_Init+0x138>)
 800762a:	429a      	cmp	r2, r3
 800762c:	d80f      	bhi.n	800764e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	4b45      	ldr	r3, [pc, #276]	; (800774c <HAL_DMA_Init+0x13c>)
 8007636:	4413      	add	r3, r2
 8007638:	4a45      	ldr	r2, [pc, #276]	; (8007750 <HAL_DMA_Init+0x140>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	009a      	lsls	r2, r3, #2
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a42      	ldr	r2, [pc, #264]	; (8007754 <HAL_DMA_Init+0x144>)
 800764a:	641a      	str	r2, [r3, #64]	; 0x40
 800764c:	e00e      	b.n	800766c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	4b40      	ldr	r3, [pc, #256]	; (8007758 <HAL_DMA_Init+0x148>)
 8007656:	4413      	add	r3, r2
 8007658:	4a3d      	ldr	r2, [pc, #244]	; (8007750 <HAL_DMA_Init+0x140>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	009a      	lsls	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a3c      	ldr	r2, [pc, #240]	; (800775c <HAL_DMA_Init+0x14c>)
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800769c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa74 	bl	8007bac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076cc:	d102      	bne.n	80076d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80076e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d010      	beq.n	8007714 <HAL_DMA_Init+0x104>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d80c      	bhi.n	8007714 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa94 	bl	8007c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	e008      	b.n	8007726 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40020407 	.word	0x40020407
 800774c:	bffdfff8 	.word	0xbffdfff8
 8007750:	cccccccd 	.word	0xcccccccd
 8007754:	40020000 	.word	0x40020000
 8007758:	bffdfbf8 	.word	0xbffdfbf8
 800775c:	40020400 	.word	0x40020400

08007760 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_DMA_Start_IT+0x20>
 800777c:	2302      	movs	r3, #2
 800777e:	e066      	b.n	800784e <HAL_DMA_Start_IT+0xee>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d155      	bne.n	8007840 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f9b9 	bl	8007b30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 020e 	orr.w	r2, r2, #14
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e00f      	b.n	80077f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0204 	bic.w	r2, r2, #4
 80077e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 020a 	orr.w	r2, r2, #10
 80077f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007814:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e005      	b.n	800784c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007848:	2302      	movs	r3, #2
 800784a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e04f      	b.n	8007908 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d008      	beq.n	8007886 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2204      	movs	r2, #4
 8007878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e040      	b.n	8007908 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 020e 	bic.w	r2, r2, #14
 8007894:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	f003 021c 	and.w	r2, r3, #28
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	2101      	movs	r1, #1
 80078c4:	fa01 f202 	lsl.w	r2, r1, r2
 80078c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80078f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d005      	beq.n	8007938 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2204      	movs	r2, #4
 8007930:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
 8007936:	e047      	b.n	80079c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 020e 	bic.w	r2, r2, #14
 8007946:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796c:	f003 021c 	and.w	r2, r3, #28
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	2101      	movs	r1, #1
 8007976:	fa01 f202 	lsl.w	r2, r1, r2
 800797a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007984:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800799c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    }
  }
  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	f003 031c 	and.w	r3, r3, #28
 80079f2:	2204      	movs	r2, #4
 80079f4:	409a      	lsls	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d026      	beq.n	8007a4c <HAL_DMA_IRQHandler+0x7a>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d021      	beq.n	8007a4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d107      	bne.n	8007a26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0204 	bic.w	r2, r2, #4
 8007a24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	f003 021c 	and.w	r2, r3, #28
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2104      	movs	r1, #4
 8007a34:	fa01 f202 	lsl.w	r2, r1, r2
 8007a38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d071      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007a4a:	e06c      	b.n	8007b26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a50:	f003 031c 	and.w	r3, r3, #28
 8007a54:	2202      	movs	r2, #2
 8007a56:	409a      	lsls	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d02e      	beq.n	8007abe <HAL_DMA_IRQHandler+0xec>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d029      	beq.n	8007abe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10b      	bne.n	8007a90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 020a 	bic.w	r2, r2, #10
 8007a86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a94:	f003 021c 	and.w	r2, r3, #28
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007aa2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d038      	beq.n	8007b26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007abc:	e033      	b.n	8007b26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f003 031c 	and.w	r3, r3, #28
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	409a      	lsls	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d02a      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x156>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d025      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 020e 	bic.w	r2, r2, #14
 8007aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af0:	f003 021c 	and.w	r2, r3, #28
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	2101      	movs	r1, #1
 8007afa:	fa01 f202 	lsl.w	r2, r1, r2
 8007afe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
}
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	f003 021c 	and.w	r2, r3, #28
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	2101      	movs	r1, #1
 8007b68:	fa01 f202 	lsl.w	r2, r1, r2
 8007b6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d108      	bne.n	8007b90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007b8e:	e007      	b.n	8007ba0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	60da      	str	r2, [r3, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d80a      	bhi.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bcc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6493      	str	r3, [r2, #72]	; 0x48
 8007bd4:	e007      	b.n	8007be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	089b      	lsrs	r3, r3, #2
 8007bdc:	009a      	lsls	r2, r3, #2
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	3b08      	subs	r3, #8
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a0a      	ldr	r2, [pc, #40]	; (8007c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f003 031c 	and.w	r3, r3, #28
 8007c04:	2201      	movs	r2, #1
 8007c06:	409a      	lsls	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40020407 	.word	0x40020407
 8007c1c:	4002081c 	.word	0x4002081c
 8007c20:	cccccccd 	.word	0xcccccccd
 8007c24:	40020880 	.word	0x40020880

08007c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	461a      	mov	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007c4a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	f003 0303 	and.w	r3, r3, #3
 8007c54:	2201      	movs	r2, #1
 8007c56:	409a      	lsls	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	1000823f 	.word	0x1000823f
 8007c6c:	40020940 	.word	0x40020940

08007c70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c7e:	e14c      	b.n	8007f1a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	2101      	movs	r1, #1
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 813e 	beq.w	8007f14 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x38>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b12      	cmp	r3, #18
 8007ca6:	d123      	bne.n	8007cf0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	08da      	lsrs	r2, r3, #3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3208      	adds	r2, #8
 8007cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	220f      	movs	r2, #15
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	08da      	lsrs	r2, r3, #3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3208      	adds	r2, #8
 8007cea:	6939      	ldr	r1, [r7, #16]
 8007cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	43db      	mvns	r3, r3
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4013      	ands	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f003 0203 	and.w	r2, r3, #3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d00b      	beq.n	8007d44 <HAL_GPIO_Init+0xd4>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d007      	beq.n	8007d44 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d38:	2b11      	cmp	r3, #17
 8007d3a:	d003      	beq.n	8007d44 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b12      	cmp	r3, #18
 8007d42:	d130      	bne.n	8007da6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	2203      	movs	r2, #3
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	43db      	mvns	r3, r3
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	43db      	mvns	r3, r3
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4013      	ands	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	091b      	lsrs	r3, r3, #4
 8007d90:	f003 0201 	and.w	r2, r3, #1
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	2203      	movs	r2, #3
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	43db      	mvns	r3, r3
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8098 	beq.w	8007f14 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007de4:	4a54      	ldr	r2, [pc, #336]	; (8007f38 <HAL_GPIO_Init+0x2c8>)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	089b      	lsrs	r3, r3, #2
 8007dea:	3302      	adds	r3, #2
 8007dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	220f      	movs	r2, #15
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	43db      	mvns	r3, r3
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4013      	ands	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007e0e:	d019      	beq.n	8007e44 <HAL_GPIO_Init+0x1d4>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a4a      	ldr	r2, [pc, #296]	; (8007f3c <HAL_GPIO_Init+0x2cc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <HAL_GPIO_Init+0x1d0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a49      	ldr	r2, [pc, #292]	; (8007f40 <HAL_GPIO_Init+0x2d0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00d      	beq.n	8007e3c <HAL_GPIO_Init+0x1cc>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a48      	ldr	r2, [pc, #288]	; (8007f44 <HAL_GPIO_Init+0x2d4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <HAL_GPIO_Init+0x1c8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a47      	ldr	r2, [pc, #284]	; (8007f48 <HAL_GPIO_Init+0x2d8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d101      	bne.n	8007e34 <HAL_GPIO_Init+0x1c4>
 8007e30:	2304      	movs	r3, #4
 8007e32:	e008      	b.n	8007e46 <HAL_GPIO_Init+0x1d6>
 8007e34:	2307      	movs	r3, #7
 8007e36:	e006      	b.n	8007e46 <HAL_GPIO_Init+0x1d6>
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e004      	b.n	8007e46 <HAL_GPIO_Init+0x1d6>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e002      	b.n	8007e46 <HAL_GPIO_Init+0x1d6>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <HAL_GPIO_Init+0x1d6>
 8007e44:	2300      	movs	r3, #0
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	f002 0203 	and.w	r2, r2, #3
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	4093      	lsls	r3, r2
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007e56:	4938      	ldr	r1, [pc, #224]	; (8007f38 <HAL_GPIO_Init+0x2c8>)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e64:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4013      	ands	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e8a:	4a30      	ldr	r2, [pc, #192]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007e92:	4b2e      	ldr	r3, [pc, #184]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007eb8:	4a24      	ldr	r2, [pc, #144]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ec0:	4b22      	ldr	r3, [pc, #136]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ee4:	4a19      	ldr	r2, [pc, #100]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f0e:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <HAL_GPIO_Init+0x2dc>)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3301      	adds	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	fa22 f303 	lsr.w	r3, r2, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f aeab 	bne.w	8007c80 <HAL_GPIO_Init+0x10>
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	48000400 	.word	0x48000400
 8007f40:	48000800 	.word	0x48000800
 8007f44:	48000c00 	.word	0x48000c00
 8007f48:	48001000 	.word	0x48001000
 8007f4c:	58000800 	.word	0x58000800

08007f50 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	887b      	ldrh	r3, [r7, #2]
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	e001      	b.n	8007f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f96:	4a05      	ldr	r2, [pc, #20]	; (8007fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fb fd26 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	58000800 	.word	0x58000800

08007fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e081      	b.n	80080c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fb fc4c 	bl	8003874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0201 	bic.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d107      	bne.n	800802a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	e006      	b.n	8008038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d104      	bne.n	800804a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800806c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	ea42 0103 	orr.w	r1, r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	021a      	lsls	r2, r3, #8
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69d9      	ldr	r1, [r3, #28]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	461a      	mov	r2, r3
 80080dc:	460b      	mov	r3, r1
 80080de:	817b      	strh	r3, [r7, #10]
 80080e0:	4613      	mov	r3, r2
 80080e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	f040 80da 	bne.w	80082a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_I2C_Master_Transmit+0x30>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0d3      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008108:	f7fd fcf8 	bl	8005afc <HAL_GetTick>
 800810c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2319      	movs	r3, #25
 8008114:	2201      	movs	r2, #1
 8008116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f001 fbba 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e0be      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2221      	movs	r2, #33	; 0x21
 800812e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2210      	movs	r2, #16
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	893a      	ldrh	r2, [r7, #8]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008156:	b29b      	uxth	r3, r3
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d90e      	bls.n	800817a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008166:	b2da      	uxtb	r2, r3
 8008168:	8979      	ldrh	r1, [r7, #10]
 800816a:	4b51      	ldr	r3, [pc, #324]	; (80082b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f001 fd1c 	bl	8009bb0 <I2C_TransferConfig>
 8008178:	e06c      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008188:	b2da      	uxtb	r2, r3
 800818a:	8979      	ldrh	r1, [r7, #10]
 800818c:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f001 fd0b 	bl	8009bb0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800819a:	e05b      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	6a39      	ldr	r1, [r7, #32]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f001 fbb7 	bl	8009914 <I2C_WaitOnTXISFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e07b      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	781a      	ldrb	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d034      	beq.n	8008254 <HAL_I2C_Master_Transmit+0x184>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d130      	bne.n	8008254 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2200      	movs	r2, #0
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 fb49 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e04d      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2bff      	cmp	r3, #255	; 0xff
 8008214:	d90e      	bls.n	8008234 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	22ff      	movs	r2, #255	; 0xff
 800821a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008220:	b2da      	uxtb	r2, r3
 8008222:	8979      	ldrh	r1, [r7, #10]
 8008224:	2300      	movs	r3, #0
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f001 fcbf 	bl	8009bb0 <I2C_TransferConfig>
 8008232:	e00f      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008242:	b2da      	uxtb	r2, r3
 8008244:	8979      	ldrh	r1, [r7, #10]
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f001 fcae 	bl	8009bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d19e      	bne.n	800819c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	6a39      	ldr	r1, [r7, #32]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 fb96 	bl	8009994 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e01a      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2220      	movs	r2, #32
 8008278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8008286:	400b      	ands	r3, r1
 8008288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	80002000 	.word	0x80002000
 80082b4:	fe00e800 	.word	0xfe00e800

080082b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af02      	add	r7, sp, #8
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	461a      	mov	r2, r3
 80082c4:	460b      	mov	r3, r1
 80082c6:	817b      	strh	r3, [r7, #10]
 80082c8:	4613      	mov	r3, r2
 80082ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	f040 80db 	bne.w	8008490 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_I2C_Master_Receive+0x30>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0d4      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082f0:	f7fd fc04 	bl	8005afc <HAL_GetTick>
 80082f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	2319      	movs	r3, #25
 80082fc:	2201      	movs	r2, #1
 80082fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f001 fac6 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0bf      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2222      	movs	r2, #34	; 0x22
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2210      	movs	r2, #16
 800831e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	893a      	ldrh	r2, [r7, #8]
 8008332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833e:	b29b      	uxth	r3, r3
 8008340:	2bff      	cmp	r3, #255	; 0xff
 8008342:	d90e      	bls.n	8008362 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	22ff      	movs	r2, #255	; 0xff
 8008348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834e:	b2da      	uxtb	r2, r3
 8008350:	8979      	ldrh	r1, [r7, #10]
 8008352:	4b52      	ldr	r3, [pc, #328]	; (800849c <HAL_I2C_Master_Receive+0x1e4>)
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f001 fc28 	bl	8009bb0 <I2C_TransferConfig>
 8008360:	e06d      	b.n	800843e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008370:	b2da      	uxtb	r2, r3
 8008372:	8979      	ldrh	r1, [r7, #10]
 8008374:	4b49      	ldr	r3, [pc, #292]	; (800849c <HAL_I2C_Master_Receive+0x1e4>)
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fc17 	bl	8009bb0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008382:	e05c      	b.n	800843e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	6a39      	ldr	r1, [r7, #32]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f001 fb3f 	bl	8009a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e07c      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d034      	beq.n	800843e <HAL_I2C_Master_Receive+0x186>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d130      	bne.n	800843e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	2200      	movs	r2, #0
 80083e4:	2180      	movs	r1, #128	; 0x80
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f001 fa54 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e04d      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2bff      	cmp	r3, #255	; 0xff
 80083fe:	d90e      	bls.n	800841e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	22ff      	movs	r2, #255	; 0xff
 8008404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840a:	b2da      	uxtb	r2, r3
 800840c:	8979      	ldrh	r1, [r7, #10]
 800840e:	2300      	movs	r3, #0
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f001 fbca 	bl	8009bb0 <I2C_TransferConfig>
 800841c:	e00f      	b.n	800843e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008422:	b29a      	uxth	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	b2da      	uxtb	r2, r3
 800842e:	8979      	ldrh	r1, [r7, #10]
 8008430:	2300      	movs	r3, #0
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 fbb9 	bl	8009bb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d19d      	bne.n	8008384 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	6a39      	ldr	r1, [r7, #32]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f001 faa1 	bl	8009994 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e01a      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2220      	movs	r2, #32
 8008462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6859      	ldr	r1, [r3, #4]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <HAL_I2C_Master_Receive+0x1e8>)
 8008470:	400b      	ands	r3, r1
 8008472:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e000      	b.n	8008492 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008490:	2302      	movs	r3, #2
  }
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	80002400 	.word	0x80002400
 80084a0:	fe00e800 	.word	0xfe00e800

080084a4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	461a      	mov	r2, r3
 80084b0:	460b      	mov	r3, r1
 80084b2:	817b      	strh	r3, [r7, #10]
 80084b4:	4613      	mov	r3, r2
 80084b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d153      	bne.n	800856c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d2:	d101      	bne.n	80084d8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
 80084d6:	e04a      	b.n	800856e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_I2C_Master_Receive_IT+0x42>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e043      	b.n	800856e <HAL_I2C_Master_Receive_IT+0xca>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2222      	movs	r2, #34	; 0x22
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2210      	movs	r2, #16
 80084fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	893a      	ldrh	r2, [r7, #8]
 800850e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4a19      	ldr	r2, [pc, #100]	; (8008578 <HAL_I2C_Master_Receive_IT+0xd4>)
 8008514:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a18      	ldr	r2, [pc, #96]	; (800857c <HAL_I2C_Master_Receive_IT+0xd8>)
 800851a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	2bff      	cmp	r3, #255	; 0xff
 8008524:	d906      	bls.n	8008534 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800852c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	e007      	b.n	8008544 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800853e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008542:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008548:	b2da      	uxtb	r2, r3
 800854a:	8979      	ldrh	r1, [r7, #10]
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <HAL_I2C_Master_Receive_IT+0xdc>)
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f001 fb2c 	bl	8009bb0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008560:	2102      	movs	r1, #2
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f001 fb52 	bl	8009c0c <I2C_Enable_IRQ>

    return HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	e000      	b.n	800856e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800856c:	2302      	movs	r3, #2
  }
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	ffff0000 	.word	0xffff0000
 800857c:	08008889 	.word	0x08008889
 8008580:	80002400 	.word	0x80002400

08008584 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4603      	mov	r3, r0
 8008594:	817b      	strh	r3, [r7, #10]
 8008596:	460b      	mov	r3, r1
 8008598:	813b      	strh	r3, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	f040 80f9 	bne.w	800879e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x34>
 80085b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0ed      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_I2C_Mem_Write+0x4e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0e6      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085da:	f7fd fa8f 	bl	8005afc <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2319      	movs	r3, #25
 80085e6:	2201      	movs	r2, #1
 80085e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f001 f951 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0d1      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2221      	movs	r2, #33	; 0x21
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2240      	movs	r2, #64	; 0x40
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a3a      	ldr	r2, [r7, #32]
 8008616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800861c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008624:	88f8      	ldrh	r0, [r7, #6]
 8008626:	893a      	ldrh	r2, [r7, #8]
 8008628:	8979      	ldrh	r1, [r7, #10]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fd0f 	bl	8009058 <I2C_RequestMemoryWrite>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e0a9      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2bff      	cmp	r3, #255	; 0xff
 8008654:	d90e      	bls.n	8008674 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	22ff      	movs	r2, #255	; 0xff
 800865a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	8979      	ldrh	r1, [r7, #10]
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f001 fa9f 	bl	8009bb0 <I2C_TransferConfig>
 8008672:	e00f      	b.n	8008694 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	b2da      	uxtb	r2, r3
 8008684:	8979      	ldrh	r1, [r7, #10]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 fa8e 	bl	8009bb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f001 f93b 	bl	8009914 <I2C_WaitOnTXISFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e07b      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d034      	beq.n	800874c <HAL_I2C_Mem_Write+0x1c8>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d130      	bne.n	800874c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	2200      	movs	r2, #0
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f001 f8cd 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e04d      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d90e      	bls.n	800872c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	8979      	ldrh	r1, [r7, #10]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f001 fa43 	bl	8009bb0 <I2C_TransferConfig>
 800872a:	e00f      	b.n	800874c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 fa32 	bl	8009bb0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d19e      	bne.n	8008694 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 f91a 	bl	8009994 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e01a      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2220      	movs	r2, #32
 8008770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6859      	ldr	r1, [r3, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_I2C_Mem_Write+0x224>)
 800877e:	400b      	ands	r3, r1
 8008780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	fe00e800 	.word	0xfe00e800

080087ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
  }
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
 8008814:	4613      	mov	r3, r2
 8008816:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <I2C_Master_ISR_IT+0x1e>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e115      	b.n	8008ad2 <I2C_Master_ISR_IT+0x24a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d013      	beq.n	80088e2 <I2C_Master_ISR_IT+0x5a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	091b      	lsrs	r3, r3, #4
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00d      	beq.n	80088e2 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2210      	movs	r2, #16
 80088cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	f043 0204 	orr.w	r2, r3, #4
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 ff92 	bl	8009804 <I2C_Flush_TXDR>
 80088e0:	e0e2      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	089b      	lsrs	r3, r3, #2
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d023      	beq.n	8008936 <I2C_Master_ISR_IT+0xae>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01d      	beq.n	8008936 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0304 	bic.w	r3, r3, #4
 8008900:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008934:	e0b8      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d01e      	beq.n	8008980 <I2C_Master_ISR_IT+0xf8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d018      	beq.n	8008980 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008974:	b29b      	uxth	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800897e:	e093      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	09db      	lsrs	r3, r3, #7
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d05e      	beq.n	8008a4a <I2C_Master_ISR_IT+0x1c2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	099b      	lsrs	r3, r3, #6
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d058      	beq.n	8008a4a <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d041      	beq.n	8008a26 <I2C_Master_ISR_IT+0x19e>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d13d      	bne.n	8008a26 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2bff      	cmp	r3, #255	; 0xff
 80089c0:	d90e      	bls.n	80089e0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	22ff      	movs	r2, #255	; 0xff
 80089c6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	8a79      	ldrh	r1, [r7, #18]
 80089d0:	2300      	movs	r3, #0
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f001 f8e9 	bl	8009bb0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089de:	e033      	b.n	8008a48 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089f2:	d00c      	beq.n	8008a0e <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80089fe:	8a79      	ldrh	r1, [r7, #18]
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4603      	mov	r3, r0
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f001 f8d2 	bl	8009bb0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a0c:	e01c      	b.n	8008a48 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	8a79      	ldrh	r1, [r7, #18]
 8008a16:	2300      	movs	r3, #0
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 f8c6 	bl	8009bb0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a24:	e010      	b.n	8008a48 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a34:	d003      	beq.n	8008a3e <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fbe4 	bl	8009204 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a3c:	e034      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a3e:	2140      	movs	r1, #64	; 0x40
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fe1f 	bl	8009684 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a46:	e02f      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
 8008a48:	e02e      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	099b      	lsrs	r3, r3, #6
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d028      	beq.n	8008aa8 <I2C_Master_ISR_IT+0x220>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	099b      	lsrs	r3, r3, #6
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d022      	beq.n	8008aa8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d119      	bne.n	8008aa0 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a7a:	d015      	beq.n	8008aa8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a84:	d108      	bne.n	8008a98 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a94:	605a      	str	r2, [r3, #4]
 8008a96:	e007      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fbb3 	bl	8009204 <I2C_ITMasterSeqCplt>
 8008a9e:	e003      	b.n	8008aa8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008aa0:	2140      	movs	r1, #64	; 0x40
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fdee 	bl	8009684 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d009      	beq.n	8008ac8 <I2C_Master_ISR_IT+0x240>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fc18 	bl	80092f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <I2C_Slave_ISR_IT+0x24>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e0ec      	b.n	8008cd8 <I2C_Slave_ISR_IT+0x1fe>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	095b      	lsrs	r3, r3, #5
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <I2C_Slave_ISR_IT+0x4c>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	095b      	lsrs	r3, r3, #5
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008b1e:	6939      	ldr	r1, [r7, #16]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fc85 	bl	8009430 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04d      	beq.n	8008bce <I2C_Slave_ISR_IT+0xf4>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	091b      	lsrs	r3, r3, #4
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d047      	beq.n	8008bce <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d128      	bne.n	8008b9a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b28      	cmp	r3, #40	; 0x28
 8008b52:	d108      	bne.n	8008b66 <I2C_Slave_ISR_IT+0x8c>
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b5a:	d104      	bne.n	8008b66 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008b5c:	6939      	ldr	r1, [r7, #16]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 fd3c 	bl	80095dc <I2C_ITListenCplt>
 8008b64:	e032      	b.n	8008bcc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b29      	cmp	r3, #41	; 0x29
 8008b70:	d10e      	bne.n	8008b90 <I2C_Slave_ISR_IT+0xb6>
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b78:	d00a      	beq.n	8008b90 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2210      	movs	r2, #16
 8008b80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fe3e 	bl	8009804 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fb78 	bl	800927e <I2C_ITSlaveSeqCplt>
 8008b8e:	e01d      	b.n	8008bcc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2210      	movs	r2, #16
 8008b96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008b98:	e096      	b.n	8008cc8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ba6:	f043 0204 	orr.w	r2, r3, #4
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <I2C_Slave_ISR_IT+0xe4>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bba:	f040 8085 	bne.w	8008cc8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fd5d 	bl	8009684 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008bca:	e07d      	b.n	8008cc8 <I2C_Slave_ISR_IT+0x1ee>
 8008bcc:	e07c      	b.n	8008cc8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	089b      	lsrs	r3, r3, #2
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d030      	beq.n	8008c3c <I2C_Slave_ISR_IT+0x162>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d02a      	beq.n	8008c3c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d018      	beq.n	8008c22 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d14f      	bne.n	8008ccc <I2C_Slave_ISR_IT+0x1f2>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c32:	d04b      	beq.n	8008ccc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fb22 	bl	800927e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008c3a:	e047      	b.n	8008ccc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	08db      	lsrs	r3, r3, #3
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <I2C_Slave_ISR_IT+0x184>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	08db      	lsrs	r3, r3, #3
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008c54:	6939      	ldr	r1, [r7, #16]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fa52 	bl	8009100 <I2C_ITAddrCplt>
 8008c5c:	e037      	b.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d031      	beq.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	085b      	lsrs	r3, r3, #1
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d02b      	beq.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d018      	beq.n	8008cb2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	851a      	strh	r2, [r3, #40]	; 0x28
 8008cb0:	e00d      	b.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb8:	d002      	beq.n	8008cc0 <I2C_Slave_ISR_IT+0x1e6>
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d106      	bne.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fadc 	bl	800927e <I2C_ITSlaveSeqCplt>
 8008cc6:	e002      	b.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008ccc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <I2C_Master_ISR_DMA+0x1a>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e0e1      	b.n	8008ebe <I2C_Master_ISR_DMA+0x1de>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	091b      	lsrs	r3, r3, #4
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <I2C_Master_ISR_DMA+0x5e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d011      	beq.n	8008d3e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d26:	f043 0204 	orr.w	r2, r3, #4
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008d2e:	2112      	movs	r1, #18
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 ff6b 	bl	8009c0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fd64 	bl	8009804 <I2C_Flush_TXDR>
 8008d3c:	e0ba      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	09db      	lsrs	r3, r3, #7
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d072      	beq.n	8008e30 <I2C_Master_ISR_DMA+0x150>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	099b      	lsrs	r3, r3, #6
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d06c      	beq.n	8008e30 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d64:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d04e      	beq.n	8008e0e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d7c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2bff      	cmp	r3, #255	; 0xff
 8008d86:	d906      	bls.n	8008d96 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	e010      	b.n	8008db8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008da8:	d003      	beq.n	8008db2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e002      	b.n	8008db8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008db6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	8a79      	ldrh	r1, [r7, #18]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fef2 	bl	8009bb0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b22      	cmp	r3, #34	; 0x22
 8008de8:	d108      	bne.n	8008dfc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008df8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008dfa:	e05b      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e0a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008e0c:	e052      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e1c:	d003      	beq.n	8008e26 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f9f0 	bl	8009204 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008e24:	e046      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008e26:	2140      	movs	r1, #64	; 0x40
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fc2b 	bl	8009684 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008e2e:	e041      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d029      	beq.n	8008e90 <I2C_Master_ISR_DMA+0x1b0>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	099b      	lsrs	r3, r3, #6
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d023      	beq.n	8008e90 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d119      	bne.n	8008e86 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e60:	d027      	beq.n	8008eb2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e6a:	d108      	bne.n	8008e7e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008e7c:	e019      	b.n	8008eb2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f9c0 	bl	8009204 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008e84:	e015      	b.n	8008eb2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008e86:	2140      	movs	r1, #64	; 0x40
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fbfb 	bl	8009684 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008e8e:	e010      	b.n	8008eb2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 fa24 	bl	80092f8 <I2C_ITMasterCplt>
 8008eb0:	e000      	b.n	8008eb4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008eb2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <I2C_Slave_ISR_DMA+0x24>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e0b1      	b.n	800904e <I2C_Slave_ISR_DMA+0x188>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	095b      	lsrs	r3, r3, #5
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <I2C_Slave_ISR_DMA+0x4c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fa8f 	bl	8009430 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8082 	beq.w	8009024 <I2C_Slave_ISR_DMA+0x15e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	091b      	lsrs	r3, r3, #4
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d07b      	beq.n	8009024 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	0b9b      	lsrs	r3, r3, #14
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	0bdb      	lsrs	r3, r3, #15
 8008f3c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d068      	beq.n	8009016 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	0bdb      	lsrs	r3, r3, #15
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00d      	beq.n	8008f8c <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	0b9b      	lsrs	r3, r3, #14
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d128      	bne.n	8008fe4 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b28      	cmp	r3, #40	; 0x28
 8008f9c:	d108      	bne.n	8008fb0 <I2C_Slave_ISR_DMA+0xea>
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fa4:	d104      	bne.n	8008fb0 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fb17 	bl	80095dc <I2C_ITListenCplt>
 8008fae:	e031      	b.n	8009014 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b29      	cmp	r3, #41	; 0x29
 8008fba:	d10e      	bne.n	8008fda <I2C_Slave_ISR_DMA+0x114>
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fc2:	d00a      	beq.n	8008fda <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2210      	movs	r2, #16
 8008fca:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fc19 	bl	8009804 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 f953 	bl	800927e <I2C_ITSlaveSeqCplt>
 8008fd8:	e01c      	b.n	8009014 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2210      	movs	r2, #16
 8008fe0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008fe2:	e01d      	b.n	8009020 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2210      	movs	r2, #16
 8008fea:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	f043 0204 	orr.w	r2, r3, #4
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <I2C_Slave_ISR_DMA+0x140>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009004:	d10c      	bne.n	8009020 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900a:	4619      	mov	r1, r3
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fb39 	bl	8009684 <I2C_ITError>
      if (treatdmanack == 1U)
 8009012:	e005      	b.n	8009020 <I2C_Slave_ISR_DMA+0x15a>
 8009014:	e004      	b.n	8009020 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2210      	movs	r2, #16
 800901c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800901e:	e011      	b.n	8009044 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009020:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009022:	e00f      	b.n	8009044 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	08db      	lsrs	r3, r3, #3
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <I2C_Slave_ISR_DMA+0x17e>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	08db      	lsrs	r3, r3, #3
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f85e 	bl	8009100 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	4603      	mov	r3, r0
 8009068:	817b      	strh	r3, [r7, #10]
 800906a:	460b      	mov	r3, r1
 800906c:	813b      	strh	r3, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	8979      	ldrh	r1, [r7, #10]
 8009078:	4b20      	ldr	r3, [pc, #128]	; (80090fc <I2C_RequestMemoryWrite+0xa4>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fd95 	bl	8009bb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fc42 	bl	8009914 <I2C_WaitOnTXISFlagUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e02c      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d105      	bne.n	80090ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090a0:	893b      	ldrh	r3, [r7, #8]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
 80090aa:	e015      	b.n	80090d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090ac:	893b      	ldrh	r3, [r7, #8]
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	69b9      	ldr	r1, [r7, #24]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fc28 	bl	8009914 <I2C_WaitOnTXISFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e012      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090ce:	893b      	ldrh	r3, [r7, #8]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2200      	movs	r2, #0
 80090e0:	2180      	movs	r1, #128	; 0x80
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fbd6 	bl	8009894 <I2C_WaitOnFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	80002000 	.word	0x80002000

08009100 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009116:	2b28      	cmp	r3, #40	; 0x28
 8009118:	d168      	bne.n	80091ec <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	0c1b      	lsrs	r3, r3, #16
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	0c1b      	lsrs	r3, r3, #16
 8009132:	b29b      	uxth	r3, r3
 8009134:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009138:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	b29b      	uxth	r3, r3
 8009142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009146:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	b29b      	uxth	r3, r3
 8009150:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009154:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d137      	bne.n	80091ce <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800915e:	897b      	ldrh	r3, [r7, #10]
 8009160:	09db      	lsrs	r3, r3, #7
 8009162:	b29a      	uxth	r2, r3
 8009164:	89bb      	ldrh	r3, [r7, #12]
 8009166:	4053      	eors	r3, r2
 8009168:	b29b      	uxth	r3, r3
 800916a:	f003 0306 	and.w	r3, r3, #6
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11c      	bne.n	80091ac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009172:	897b      	ldrh	r3, [r7, #10]
 8009174:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	2b02      	cmp	r3, #2
 8009186:	d139      	bne.n	80091fc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2208      	movs	r2, #8
 8009194:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800919e:	89ba      	ldrh	r2, [r7, #12]
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fb2f 	bl	8008808 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80091aa:	e027      	b.n	80091fc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80091ac:	893b      	ldrh	r3, [r7, #8]
 80091ae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80091b0:	2104      	movs	r1, #4
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fd98 	bl	8009ce8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80091c0:	89ba      	ldrh	r2, [r7, #12]
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff fb1e 	bl	8008808 <HAL_I2C_AddrCallback>
}
 80091cc:	e016      	b.n	80091fc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80091ce:	2104      	movs	r1, #4
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fd89 	bl	8009ce8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80091de:	89ba      	ldrh	r2, [r7, #12]
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff fb0f 	bl	8008808 <HAL_I2C_AddrCallback>
}
 80091ea:	e007      	b.n	80091fc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b21      	cmp	r3, #33	; 0x21
 800921e:	d115      	bne.n	800924c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2211      	movs	r2, #17
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009234:	2101      	movs	r1, #1
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fd56 	bl	8009ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7fa fdcf 	bl	8003de8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800924a:	e014      	b.n	8009276 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2212      	movs	r2, #18
 8009258:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009260:	2102      	movs	r1, #2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fd40 	bl	8009ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fa fdcf 	bl	8003e14 <HAL_I2C_MasterRxCpltCallback>
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b29      	cmp	r3, #41	; 0x29
 8009298:	d112      	bne.n	80092c0 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2228      	movs	r2, #40	; 0x28
 800929e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2221      	movs	r2, #33	; 0x21
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092a8:	2101      	movs	r1, #1
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fd1c 	bl	8009ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff fa91 	bl	80087e0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092be:	e017      	b.n	80092f0 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ca:	d111      	bne.n	80092f0 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2228      	movs	r2, #40	; 0x28
 80092d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2222      	movs	r2, #34	; 0x22
 80092d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80092da:	2102      	movs	r1, #2
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fd03 	bl	8009ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff fa82 	bl	80087f4 <HAL_I2C_SlaveRxCpltCallback>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2220      	movs	r2, #32
 8009308:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6859      	ldr	r1, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b44      	ldr	r3, [pc, #272]	; (8009428 <I2C_ITMasterCplt+0x130>)
 8009316:	400b      	ands	r3, r1
 8009318:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a40      	ldr	r2, [pc, #256]	; (800942c <I2C_ITMasterCplt+0x134>)
 800932a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d009      	beq.n	800934c <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2210      	movs	r2, #16
 800933e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009344:	f043 0204 	orr.w	r2, r3, #4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa59 	bl	8009804 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009352:	2103      	movs	r1, #3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fcc7 	bl	8009ce8 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b60      	cmp	r3, #96	; 0x60
 800936a:	d002      	beq.n	8009372 <I2C_ITMasterCplt+0x7a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f983 	bl	8009684 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800937e:	e04e      	b.n	800941e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b21      	cmp	r3, #33	; 0x21
 800938a:	d121      	bne.n	80093d0 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b40      	cmp	r3, #64	; 0x40
 800939e:	d10b      	bne.n	80093b8 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff fa41 	bl	8008838 <HAL_I2C_MemTxCpltCallback>
}
 80093b6:	e032      	b.n	800941e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7fa fd0d 	bl	8003de8 <HAL_I2C_MasterTxCpltCallback>
}
 80093ce:	e026      	b.n	800941e <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b22      	cmp	r3, #34	; 0x22
 80093da:	d120      	bne.n	800941e <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b40      	cmp	r3, #64	; 0x40
 80093ee:	d10b      	bne.n	8009408 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff fa23 	bl	800884c <HAL_I2C_MemRxCpltCallback>
}
 8009406:	e00a      	b.n	800941e <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7fa fcfb 	bl	8003e14 <HAL_I2C_MasterRxCpltCallback>
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	fe00e800 	.word	0xfe00e800
 800942c:	ffff0000 	.word	0xffff0000

08009430 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2220      	movs	r2, #32
 800944c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800944e:	2107      	movs	r1, #7
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fc49 	bl	8009ce8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009464:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6859      	ldr	r1, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	4b58      	ldr	r3, [pc, #352]	; (80095d4 <I2C_ITSlaveCplt+0x1a4>)
 8009472:	400b      	ands	r3, r1
 8009474:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9c4 	bl	8009804 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	0b9b      	lsrs	r3, r3, #14
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	2b00      	cmp	r3, #0
 800948e:	d018      	beq.n	80094c2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800949e:	e010      	b.n	80094c2 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	0bdb      	lsrs	r3, r3, #15
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d006      	beq.n	80094c2 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	089b      	lsrs	r3, r3, #2
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d020      	beq.n	8009510 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f023 0304 	bic.w	r3, r3, #4
 80094d4:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951e:	f043 0204 	orr.w	r2, r3, #4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953e:	2b00      	cmp	r3, #0
 8009540:	d010      	beq.n	8009564 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f89b 	bl	8009684 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b28      	cmp	r3, #40	; 0x28
 8009558:	d138      	bne.n	80095cc <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800955a:	68f9      	ldr	r1, [r7, #12]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f83d 	bl	80095dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009562:	e033      	b.n	80095cc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800956c:	d011      	beq.n	8009592 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff fe85 	bl	800927e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <I2C_ITSlaveCplt+0x1a8>)
 8009578:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff f94a 	bl	8008824 <HAL_I2C_ListenCpltCallback>
}
 8009590:	e01c      	b.n	80095cc <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b22      	cmp	r3, #34	; 0x22
 800959c:	d10b      	bne.n	80095b6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff f920 	bl	80087f4 <HAL_I2C_SlaveRxCpltCallback>
}
 80095b4:	e00a      	b.n	80095cc <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff f90a 	bl	80087e0 <HAL_I2C_SlaveTxCpltCallback>
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	fe00e800 	.word	0xfe00e800
 80095d8:	ffff0000 	.word	0xffff0000

080095dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a25      	ldr	r2, [pc, #148]	; (8009680 <I2C_ITListenCplt+0xa4>)
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	089b      	lsrs	r3, r3, #2
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d022      	beq.n	800965a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009630:	2b00      	cmp	r3, #0
 8009632:	d012      	beq.n	800965a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009652:	f043 0204 	orr.w	r2, r3, #4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800965a:	2107      	movs	r1, #7
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fb43 	bl	8009ce8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2210      	movs	r2, #16
 8009668:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff f8d6 	bl	8008824 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	ffff0000 	.word	0xffff0000

08009684 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009694:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a55      	ldr	r2, [pc, #340]	; (80097f8 <I2C_ITError+0x174>)
 80096a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	2b28      	cmp	r3, #40	; 0x28
 80096ba:	d005      	beq.n	80096c8 <I2C_ITError+0x44>
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	2b29      	cmp	r3, #41	; 0x29
 80096c0:	d002      	beq.n	80096c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b2a      	cmp	r3, #42	; 0x2a
 80096c6:	d10e      	bne.n	80096e6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80096c8:	2103      	movs	r1, #3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fb0c 	bl	8009ce8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2228      	movs	r2, #40	; 0x28
 80096d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a46      	ldr	r2, [pc, #280]	; (80097fc <I2C_ITError+0x178>)
 80096e2:	635a      	str	r2, [r3, #52]	; 0x34
 80096e4:	e013      	b.n	800970e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80096e6:	2107      	movs	r1, #7
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fafd 	bl	8009ce8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b60      	cmp	r3, #96	; 0x60
 80096f8:	d003      	beq.n	8009702 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800971c:	d123      	bne.n	8009766 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800972c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05c      	beq.n	80097f0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	4a31      	ldr	r2, [pc, #196]	; (8009800 <I2C_ITError+0x17c>)
 800973c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe f8e2 	bl	8007914 <HAL_DMA_Abort_IT>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d04c      	beq.n	80097f0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009764:	e044      	b.n	80097f0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009774:	d123      	bne.n	80097be <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009784:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d030      	beq.n	80097f0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009792:	4a1b      	ldr	r2, [pc, #108]	; (8009800 <I2C_ITError+0x17c>)
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe f8b6 	bl	8007914 <HAL_DMA_Abort_IT>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d020      	beq.n	80097f0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
}
 80097bc:	e018      	b.n	80097f0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b60      	cmp	r3, #96	; 0x60
 80097c8:	d10b      	bne.n	80097e2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff f84a 	bl	8008874 <HAL_I2C_AbortCpltCallback>
}
 80097e0:	e006      	b.n	80097f0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff f838 	bl	8008860 <HAL_I2C_ErrorCallback>
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	ffff0000 	.word	0xffff0000
 80097fc:	08008adb 	.word	0x08008adb
 8009800:	0800984d 	.word	0x0800984d

08009804 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b02      	cmp	r3, #2
 8009818:	d103      	bne.n	8009822 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2200      	movs	r2, #0
 8009820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b01      	cmp	r3, #1
 800982e:	d007      	beq.n	8009840 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699a      	ldr	r2, [r3, #24]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	619a      	str	r2, [r3, #24]
  }
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	2200      	movs	r2, #0
 8009860:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009866:	2200      	movs	r2, #0
 8009868:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b60      	cmp	r3, #96	; 0x60
 8009874:	d107      	bne.n	8009886 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2220      	movs	r2, #32
 800987a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7fe fff8 	bl	8008874 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009884:	e002      	b.n	800988c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7fe ffea 	bl	8008860 <HAL_I2C_ErrorCallback>
}
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098a4:	e022      	b.n	80098ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d01e      	beq.n	80098ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ae:	f7fc f925 	bl	8005afc <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d302      	bcc.n	80098c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d113      	bne.n	80098ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	f043 0220 	orr.w	r2, r3, #32
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e00f      	b.n	800990c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	4013      	ands	r3, r2
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bf0c      	ite	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2300      	movne	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	429a      	cmp	r2, r3
 8009908:	d0cd      	beq.n	80098a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009920:	e02c      	b.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 f8dc 	bl	8009ae4 <I2C_IsAcknowledgeFailed>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e02a      	b.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d01e      	beq.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800993e:	f7fc f8dd 	bl	8005afc <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	d302      	bcc.n	8009954 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d113      	bne.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009958:	f043 0220 	orr.w	r2, r3, #32
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e007      	b.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b02      	cmp	r3, #2
 8009988:	d1cb      	bne.n	8009922 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099a0:	e028      	b.n	80099f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	68b9      	ldr	r1, [r7, #8]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f89c 	bl	8009ae4 <I2C_IsAcknowledgeFailed>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e026      	b.n	8009a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b6:	f7fc f8a1 	bl	8005afc <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d302      	bcc.n	80099cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d113      	bne.n	80099f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d0:	f043 0220 	orr.w	r2, r3, #32
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e007      	b.n	8009a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	d1cf      	bne.n	80099a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a18:	e055      	b.n	8009ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f860 	bl	8009ae4 <I2C_IsAcknowledgeFailed>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e053      	b.n	8009ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d129      	bne.n	8009a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d105      	bne.n	8009a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e03f      	b.n	8009ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6859      	ldr	r1, [r3, #4]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	4b1d      	ldr	r3, [pc, #116]	; (8009ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8009a6a:	400b      	ands	r3, r1
 8009a6c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e022      	b.n	8009ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a90:	f7fc f834 	bl	8005afc <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d302      	bcc.n	8009aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10f      	bne.n	8009ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	f043 0220 	orr.w	r2, r3, #32
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e007      	b.n	8009ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d1a2      	bne.n	8009a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	fe00e800 	.word	0xfe00e800

08009ae4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	f003 0310 	and.w	r3, r3, #16
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d151      	bne.n	8009ba2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009afe:	e022      	b.n	8009b46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d01e      	beq.n	8009b46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b08:	f7fb fff8 	bl	8005afc <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d302      	bcc.n	8009b1e <I2C_IsAcknowledgeFailed+0x3a>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d113      	bne.n	8009b46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b22:	f043 0220 	orr.w	r2, r3, #32
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e02e      	b.n	8009ba4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d1d5      	bne.n	8009b00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2210      	movs	r2, #16
 8009b5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2220      	movs	r2, #32
 8009b62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fe4d 	bl	8009804 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6859      	ldr	r1, [r3, #4]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <I2C_IsAcknowledgeFailed+0xc8>)
 8009b76:	400b      	ands	r3, r1
 8009b78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	f043 0204 	orr.w	r2, r3, #4
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e000      	b.n	8009ba4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	fe00e800 	.word	0xfe00e800

08009bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	817b      	strh	r3, [r7, #10]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	0d5b      	lsrs	r3, r3, #21
 8009bcc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <I2C_TransferConfig+0x58>)
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	ea02 0103 	and.w	r1, r2, r3
 8009bda:	897b      	ldrh	r3, [r7, #10]
 8009bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009be0:	7a7b      	ldrb	r3, [r7, #9]
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	03ff63ff 	.word	0x03ff63ff

08009c0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	4a2f      	ldr	r2, [pc, #188]	; (8009ce0 <I2C_Enable_IRQ+0xd4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d004      	beq.n	8009c30 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009c2a:	4a2e      	ldr	r2, [pc, #184]	; (8009ce4 <I2C_Enable_IRQ+0xd8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d124      	bne.n	8009c7a <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c30:	887b      	ldrh	r3, [r7, #2]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009c40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	f003 0311 	and.w	r3, r3, #17
 8009c48:	2b11      	cmp	r3, #17
 8009c4a:	d103      	bne.n	8009c54 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009c52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009c54:	887b      	ldrh	r3, [r7, #2]
 8009c56:	f003 0312 	and.w	r3, r3, #18
 8009c5a:	2b12      	cmp	r3, #18
 8009c5c:	d103      	bne.n	8009c66 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f043 0320 	orr.w	r3, r3, #32
 8009c64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009c66:	887b      	ldrh	r3, [r7, #2]
 8009c68:	f003 0312 	and.w	r3, r3, #18
 8009c6c:	2b12      	cmp	r3, #18
 8009c6e:	d128      	bne.n	8009cc2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c76:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009c78:	e023      	b.n	8009cc2 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c7a:	887b      	ldrh	r3, [r7, #2]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009c8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c8c:	887b      	ldrh	r3, [r7, #2]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009c9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009cae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009cb0:	887b      	ldrh	r3, [r7, #2]
 8009cb2:	f003 0312 	and.w	r3, r3, #18
 8009cb6:	2b12      	cmp	r3, #18
 8009cb8:	d103      	bne.n	8009cc2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f043 0320 	orr.w	r3, r3, #32
 8009cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6819      	ldr	r1, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	601a      	str	r2, [r3, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	08008ce1 	.word	0x08008ce1
 8009ce4:	08008ec7 	.word	0x08008ec7

08009ce8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009cf8:	887b      	ldrh	r3, [r7, #2]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00f      	beq.n	8009d22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009d08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d16:	2b28      	cmp	r3, #40	; 0x28
 8009d18:	d003      	beq.n	8009d22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009d20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d22:	887b      	ldrh	r3, [r7, #2]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00f      	beq.n	8009d4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009d32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d40:	2b28      	cmp	r3, #40	; 0x28
 8009d42:	d003      	beq.n	8009d4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009d4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d4c:	887b      	ldrh	r3, [r7, #2]
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009d5c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	f003 0311 	and.w	r3, r3, #17
 8009d64:	2b11      	cmp	r3, #17
 8009d66:	d103      	bne.n	8009d70 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009d6e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009d70:	887b      	ldrh	r3, [r7, #2]
 8009d72:	f003 0312 	and.w	r3, r3, #18
 8009d76:	2b12      	cmp	r3, #18
 8009d78:	d103      	bne.n	8009d82 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f043 0320 	orr.w	r3, r3, #32
 8009d80:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009d82:	887b      	ldrh	r3, [r7, #2]
 8009d84:	f003 0312 	and.w	r3, r3, #18
 8009d88:	2b12      	cmp	r3, #18
 8009d8a:	d103      	bne.n	8009d94 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d92:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6819      	ldr	r1, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	43da      	mvns	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	400a      	ands	r2, r1
 8009da4:	601a      	str	r2, [r3, #0]
}
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d138      	bne.n	8009e3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e032      	b.n	8009e3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2224      	movs	r2, #36	; 0x24
 8009de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0201 	bic.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6819      	ldr	r1, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f042 0201 	orr.w	r2, r2, #1
 8009e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e000      	b.n	8009e3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e3a:	2302      	movs	r3, #2
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	d139      	bne.n	8009ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e033      	b.n	8009ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2224      	movs	r2, #36	; 0x24
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0201 	bic.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	021b      	lsls	r3, r3, #8
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0201 	orr.w	r2, r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ed2:	2302      	movs	r3, #2
  }
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a04      	ldr	r2, [pc, #16]	; (8009efc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eee:	6013      	str	r3, [r2, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	58000400 	.word	0x58000400

08009f00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009f04:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <HAL_PWREx_GetVoltageRange+0x18>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	58000400 	.word	0x58000400

08009f1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f2e:	d101      	bne.n	8009f34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <LL_RCC_HSE_EnableBypass>:
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <LL_RCC_HSE_DisableBypass>:
{
 8009f5e:	b480      	push	{r7}
 8009f60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8009f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f70:	6013      	str	r3, [r2, #0]
}
 8009f72:	bf00      	nop
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <LL_RCC_HSE_Enable>:
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <LL_RCC_HSE_Disable>:
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fac:	6013      	str	r3, [r2, #0]
}
 8009fae:	bf00      	nop
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <LL_RCC_HSE_IsReady>:
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fca:	d101      	bne.n	8009fd0 <LL_RCC_HSE_IsReady+0x18>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e000      	b.n	8009fd2 <LL_RCC_HSE_IsReady+0x1a>
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <LL_RCC_HSI_Enable>:
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fee:	6013      	str	r3, [r2, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <LL_RCC_HSI_Disable>:
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a00c:	6013      	str	r3, [r2, #0]
}
 800a00e:	bf00      	nop
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <LL_RCC_HSI_IsReady>:
{
 800a018:	b480      	push	{r7}
 800a01a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a01c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a02a:	d101      	bne.n	800a030 <LL_RCC_HSI_IsReady+0x18>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e000      	b.n	800a032 <LL_RCC_HSI_IsReady+0x1a>
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <LL_RCC_HSI_SetCalibTrimming>:
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	061b      	lsls	r3, r3, #24
 800a052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a056:	4313      	orrs	r3, r2
 800a058:	604b      	str	r3, [r1, #4]
}
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <LL_RCC_HSI48_Enable>:
{
 800a066:	b480      	push	{r7}
 800a068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a06a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a06e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a07e:	bf00      	nop
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <LL_RCC_HSI48_Disable>:
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a08c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a098:	f023 0301 	bic.w	r3, r3, #1
 800a09c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800a0a0:	bf00      	nop
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <LL_RCC_HSI48_IsReady>:
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d101      	bne.n	800a0c2 <LL_RCC_HSI48_IsReady+0x18>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <LL_RCC_HSI48_IsReady+0x1a>
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <LL_RCC_LSE_Enable>:
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a0e6:	bf00      	nop
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <LL_RCC_LSE_Disable>:
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a100:	f023 0301 	bic.w	r3, r3, #1
 800a104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a108:	bf00      	nop
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <LL_RCC_LSE_EnableBypass>:
{
 800a112:	b480      	push	{r7}
 800a114:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a122:	f043 0304 	orr.w	r3, r3, #4
 800a126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a12a:	bf00      	nop
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <LL_RCC_LSE_DisableBypass>:
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a144:	f023 0304 	bic.w	r3, r3, #4
 800a148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a14c:	bf00      	nop
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <LL_RCC_LSE_IsReady>:
{
 800a156:	b480      	push	{r7}
 800a158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b02      	cmp	r3, #2
 800a168:	d101      	bne.n	800a16e <LL_RCC_LSE_IsReady+0x18>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <LL_RCC_LSE_IsReady+0x1a>
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <LL_RCC_LSI1_Enable>:
{
 800a17a:	b480      	push	{r7}
 800a17c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a17e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a192:	bf00      	nop
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_RCC_LSI1_Disable>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a1a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <LL_RCC_LSI1_IsReady>:
{
 800a1be:	b480      	push	{r7}
 800a1c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a1c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ca:	f003 0302 	and.w	r3, r3, #2
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d101      	bne.n	800a1d6 <LL_RCC_LSI1_IsReady+0x18>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <LL_RCC_LSI1_IsReady+0x1a>
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <LL_RCC_LSI2_Enable>:
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a1e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1f2:	f043 0304 	orr.w	r3, r3, #4
 800a1f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a1fa:	bf00      	nop
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <LL_RCC_LSI2_Disable>:
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a214:	f023 0304 	bic.w	r3, r3, #4
 800a218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a21c:	bf00      	nop
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <LL_RCC_LSI2_IsReady>:
{
 800a226:	b480      	push	{r7}
 800a228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a22a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a232:	f003 0308 	and.w	r3, r3, #8
 800a236:	2b08      	cmp	r3, #8
 800a238:	d101      	bne.n	800a23e <LL_RCC_LSI2_IsReady+0x18>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e000      	b.n	800a240 <LL_RCC_LSI2_IsReady+0x1a>
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <LL_RCC_LSI2_SetTrimming>:
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a25a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a266:	4313      	orrs	r3, r2
 800a268:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <LL_RCC_MSI_Enable>:
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a27c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	6013      	str	r3, [r2, #0]
}
 800a28c:	bf00      	nop
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <LL_RCC_MSI_Disable>:
{
 800a296:	b480      	push	{r7}
 800a298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a29a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2a4:	f023 0301 	bic.w	r3, r3, #1
 800a2a8:	6013      	str	r3, [r2, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <LL_RCC_MSI_IsReady>:
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a2b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d101      	bne.n	800a2ca <LL_RCC_MSI_IsReady+0x16>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <LL_RCC_MSI_IsReady+0x18>
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <LL_RCC_MSI_SetRange>:
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a2de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	600b      	str	r3, [r1, #0]
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <LL_RCC_MSI_GetRange>:
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a30e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2bb0      	cmp	r3, #176	; 0xb0
 800a314:	d901      	bls.n	800a31a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a316:	23b0      	movs	r3, #176	; 0xb0
 800a318:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a31a:	687b      	ldr	r3, [r7, #4]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <LL_RCC_MSI_SetCalibTrimming>:
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a342:	4313      	orrs	r3, r2
 800a344:	604b      	str	r3, [r1, #4]
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <LL_RCC_SetSysClkSource>:
{
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a35a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f023 0203 	bic.w	r2, r3, #3
 800a364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	608b      	str	r3, [r1, #8]
}
 800a36e:	bf00      	nop
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <LL_RCC_GetSysClkSource>:
{
 800a37a:	b480      	push	{r7}
 800a37c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a37e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 030c 	and.w	r3, r3, #12
}
 800a388:	4618      	mov	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <LL_RCC_SetAHBPrescaler>:
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a39a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	608b      	str	r3, [r1, #8]
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <LL_C2_RCC_SetAHBPrescaler>:
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a3c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a3ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <LL_RCC_SetAHB4Prescaler>:
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a3ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a3f6:	f023 020f 	bic.w	r2, r3, #15
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	091b      	lsrs	r3, r3, #4
 800a3fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a402:	4313      	orrs	r3, r2
 800a404:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <LL_RCC_SetAPB1Prescaler>:
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a41c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	608b      	str	r3, [r1, #8]
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <LL_RCC_SetAPB2Prescaler>:
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a44e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4313      	orrs	r3, r2
 800a456:	608b      	str	r3, [r1, #8]
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <LL_RCC_GetAHBPrescaler>:
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a472:	4618      	mov	r0, r3
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <LL_C2_RCC_GetAHBPrescaler>:
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800a480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a484:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <LL_RCC_GetAHB4Prescaler>:
{
 800a496:	b480      	push	{r7}
 800a498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a49a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a49e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <LL_RCC_GetAPB1Prescaler>:
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a4b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <LL_RCC_GetAPB2Prescaler>:
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a4ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a4e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4f4:	6013      	str	r3, [r2, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a50e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a512:	6013      	str	r3, [r2, #0]
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a51e:	b480      	push	{r7}
 800a520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a52c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a530:	d101      	bne.n	800a536 <LL_RCC_PLL_IsReady+0x18>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <LL_RCC_PLL_IsReady+0x1a>
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a542:	b480      	push	{r7}
 800a544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	0a1b      	lsrs	r3, r3, #8
 800a54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800a552:	4618      	mov	r0, r3
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a582:	4618      	mov	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f003 0303 	and.w	r3, r3, #3
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a5a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b6:	d101      	bne.n	800a5bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a5cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a5d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5dc:	d101      	bne.n	800a5e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a5f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a5fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a602:	d101      	bne.n	800a608 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a626:	d101      	bne.n	800a62c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a63c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a64a:	d101      	bne.n	800a650 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a65c:	b590      	push	{r4, r7, lr}
 800a65e:	b08b      	sub	sp, #44	; 0x2c
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e34b      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 808f 	beq.w	800a79a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a67c:	f7ff fe7d 	bl	800a37a <LL_RCC_GetSysClkSource>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a682:	f7ff ff83 	bl	800a58c <LL_RCC_PLL_GetMainSource>
 800a686:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <HAL_RCC_OscConfig+0x3e>
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	2b0c      	cmp	r3, #12
 800a692:	d149      	bne.n	800a728 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d146      	bne.n	800a728 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a69a:	f7ff fe0b 	bl	800a2b4 <LL_RCC_MSI_IsReady>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x54>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e32a      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a6b4:	f7ff fe23 	bl	800a2fe <LL_RCC_MSI_GetRange>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d914      	bls.n	800a6e8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fd2a 	bl	800b11c <RCC_SetFlashLatencyFromMSIRange>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e319      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff fdfd 	bl	800a2d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fe21 	bl	800a328 <LL_RCC_MSI_SetCalibTrimming>
 800a6e6:	e013      	b.n	800a710 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fdf2 	bl	800a2d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff fe16 	bl	800a328 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fd0b 	bl	800b11c <RCC_SetFlashLatencyFromMSIRange>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e2fa      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800a710:	f7fa fcee 	bl	80050f0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a714:	4bb4      	ldr	r3, [pc, #720]	; (800a9e8 <HAL_RCC_OscConfig+0x38c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fa fbc3 	bl	8004ea4 <HAL_InitTick>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d039      	beq.n	800a798 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e2ee      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01e      	beq.n	800a76e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a730:	f7ff fda2 	bl	800a278 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a734:	f7fb f9e2 	bl	8005afc <HAL_GetTick>
 800a738:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a73c:	f7fb f9de 	bl	8005afc <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e2db      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a74e:	f7ff fdb1 	bl	800a2b4 <LL_RCC_MSI_IsReady>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0f1      	beq.n	800a73c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff fdba 	bl	800a2d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff fdde 	bl	800a328 <LL_RCC_MSI_SetCalibTrimming>
 800a76c:	e015      	b.n	800a79a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a76e:	f7ff fd92 	bl	800a296 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a772:	f7fb f9c3 	bl	8005afc <HAL_GetTick>
 800a776:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a778:	e008      	b.n	800a78c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a77a:	f7fb f9bf 	bl	8005afc <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d901      	bls.n	800a78c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e2bc      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a78c:	f7ff fd92 	bl	800a2b4 <LL_RCC_MSI_IsReady>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1f1      	bne.n	800a77a <HAL_RCC_OscConfig+0x11e>
 800a796:	e000      	b.n	800a79a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a798:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d05a      	beq.n	800a85c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7a6:	f7ff fde8 	bl	800a37a <LL_RCC_GetSysClkSource>
 800a7aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7ac:	f7ff feee 	bl	800a58c <LL_RCC_PLL_GetMainSource>
 800a7b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d005      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x168>
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	2b0c      	cmp	r3, #12
 800a7bc:	d10d      	bne.n	800a7da <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	d10a      	bne.n	800a7da <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7c4:	f7ff fbf8 	bl	8009fb8 <LL_RCC_HSE_IsReady>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d045      	beq.n	800a85a <HAL_RCC_OscConfig+0x1fe>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d141      	bne.n	800a85a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e295      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCC_OscConfig+0x18e>
 800a7e4:	f7ff fbca 	bl	8009f7c <LL_RCC_HSE_Enable>
 800a7e8:	e00d      	b.n	800a806 <HAL_RCC_OscConfig+0x1aa>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7f2:	d104      	bne.n	800a7fe <HAL_RCC_OscConfig+0x1a2>
 800a7f4:	f7ff fba4 	bl	8009f40 <LL_RCC_HSE_EnableBypass>
 800a7f8:	f7ff fbc0 	bl	8009f7c <LL_RCC_HSE_Enable>
 800a7fc:	e003      	b.n	800a806 <HAL_RCC_OscConfig+0x1aa>
 800a7fe:	f7ff fbcc 	bl	8009f9a <LL_RCC_HSE_Disable>
 800a802:	f7ff fbac 	bl	8009f5e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d012      	beq.n	800a834 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7fb f975 	bl	8005afc <HAL_GetTick>
 800a812:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a814:	e008      	b.n	800a828 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a816:	f7fb f971 	bl	8005afc <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b64      	cmp	r3, #100	; 0x64
 800a822:	d901      	bls.n	800a828 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e26e      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a828:	f7ff fbc6 	bl	8009fb8 <LL_RCC_HSE_IsReady>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f1      	beq.n	800a816 <HAL_RCC_OscConfig+0x1ba>
 800a832:	e013      	b.n	800a85c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a834:	f7fb f962 	bl	8005afc <HAL_GetTick>
 800a838:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a83c:	f7fb f95e 	bl	8005afc <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b64      	cmp	r3, #100	; 0x64
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e25b      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a84e:	f7ff fbb3 	bl	8009fb8 <LL_RCC_HSE_IsReady>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f1      	bne.n	800a83c <HAL_RCC_OscConfig+0x1e0>
 800a858:	e000      	b.n	800a85c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a85a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0302 	and.w	r3, r3, #2
 800a864:	2b00      	cmp	r3, #0
 800a866:	d051      	beq.n	800a90c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a868:	f7ff fd87 	bl	800a37a <LL_RCC_GetSysClkSource>
 800a86c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a86e:	f7ff fe8d 	bl	800a58c <LL_RCC_PLL_GetMainSource>
 800a872:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b04      	cmp	r3, #4
 800a878:	d005      	beq.n	800a886 <HAL_RCC_OscConfig+0x22a>
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b0c      	cmp	r3, #12
 800a87e:	d113      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b02      	cmp	r3, #2
 800a884:	d110      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a886:	f7ff fbc7 	bl	800a018 <LL_RCC_HSI_IsReady>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_RCC_OscConfig+0x240>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e234      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fbcb 	bl	800a03c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8a6:	e031      	b.n	800a90c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d019      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8b0:	f7ff fb94 	bl	8009fdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b4:	f7fb f922 	bl	8005afc <HAL_GetTick>
 800a8b8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a8ba:	e008      	b.n	800a8ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8bc:	f7fb f91e 	bl	8005afc <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d901      	bls.n	800a8ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e21b      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a8ce:	f7ff fba3 	bl	800a018 <LL_RCC_HSI_IsReady>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0f1      	beq.n	800a8bc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fbad 	bl	800a03c <LL_RCC_HSI_SetCalibTrimming>
 800a8e2:	e013      	b.n	800a90c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8e4:	f7ff fb89 	bl	8009ffa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e8:	f7fb f908 	bl	8005afc <HAL_GetTick>
 800a8ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a8ee:	e008      	b.n	800a902 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8f0:	f7fb f904 	bl	8005afc <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e201      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a902:	f7ff fb89 	bl	800a018 <LL_RCC_HSI_IsReady>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f1      	bne.n	800a8f0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0308 	and.w	r3, r3, #8
 800a914:	2b00      	cmp	r3, #0
 800a916:	d106      	bne.n	800a926 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80a2 	beq.w	800aa6a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d075      	beq.n	800aa1a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b00      	cmp	r3, #0
 800a938:	d046      	beq.n	800a9c8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800a93a:	f7ff fc40 	bl	800a1be <LL_RCC_LSI1_IsReady>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d113      	bne.n	800a96c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800a944:	f7ff fc19 	bl	800a17a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a948:	f7fb f8d8 	bl	8005afc <HAL_GetTick>
 800a94c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a94e:	e008      	b.n	800a962 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a950:	f7fb f8d4 	bl	8005afc <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e1d1      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a962:	f7ff fc2c 	bl	800a1be <LL_RCC_LSI1_IsReady>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f1      	beq.n	800a950 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800a96c:	f7ff fc39 	bl	800a1e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a970:	f7fb f8c4 	bl	8005afc <HAL_GetTick>
 800a974:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a978:	f7fb f8c0 	bl	8005afc <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b03      	cmp	r3, #3
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e1bd      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a98a:	f7ff fc4c 	bl	800a226 <LL_RCC_LSI2_IsReady>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0f1      	beq.n	800a978 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fc56 	bl	800a24a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800a99e:	f7ff fbfd 	bl	800a19c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a2:	f7fb f8ab 	bl	8005afc <HAL_GetTick>
 800a9a6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a9a8:	e008      	b.n	800a9bc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a9aa:	f7fb f8a7 	bl	8005afc <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d901      	bls.n	800a9bc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e1a4      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a9bc:	f7ff fbff 	bl	800a1be <LL_RCC_LSI1_IsReady>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1f1      	bne.n	800a9aa <HAL_RCC_OscConfig+0x34e>
 800a9c6:	e050      	b.n	800aa6a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800a9c8:	f7ff fbd7 	bl	800a17a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9cc:	f7fb f896 	bl	8005afc <HAL_GetTick>
 800a9d0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a9d2:	e00b      	b.n	800a9ec <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a9d4:	f7fb f892 	bl	8005afc <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d904      	bls.n	800a9ec <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e18f      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
 800a9e6:	bf00      	nop
 800a9e8:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a9ec:	f7ff fbe7 	bl	800a1be <LL_RCC_LSI1_IsReady>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0ee      	beq.n	800a9d4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800a9f6:	f7ff fc05 	bl	800a204 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a9fa:	e008      	b.n	800aa0e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a9fc:	f7fb f87e 	bl	8005afc <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e17b      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800aa0e:	f7ff fc0a 	bl	800a226 <LL_RCC_LSI2_IsReady>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1f1      	bne.n	800a9fc <HAL_RCC_OscConfig+0x3a0>
 800aa18:	e027      	b.n	800aa6a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800aa1a:	f7ff fbf3 	bl	800a204 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa1e:	f7fb f86d 	bl	8005afc <HAL_GetTick>
 800aa22:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800aa24:	e008      	b.n	800aa38 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aa26:	f7fb f869 	bl	8005afc <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d901      	bls.n	800aa38 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e166      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800aa38:	f7ff fbf5 	bl	800a226 <LL_RCC_LSI2_IsReady>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1f1      	bne.n	800aa26 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800aa42:	f7ff fbab 	bl	800a19c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa46:	f7fb f859 	bl	8005afc <HAL_GetTick>
 800aa4a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800aa4c:	e008      	b.n	800aa60 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aa4e:	f7fb f855 	bl	8005afc <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e152      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800aa60:	f7ff fbad 	bl	800a1be <LL_RCC_LSI1_IsReady>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1f1      	bne.n	800aa4e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d05b      	beq.n	800ab2e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa76:	4ba6      	ldr	r3, [pc, #664]	; (800ad10 <HAL_RCC_OscConfig+0x6b4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d114      	bne.n	800aaac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800aa82:	f7ff fa2d 	bl	8009ee0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa86:	f7fb f839 	bl	8005afc <HAL_GetTick>
 800aa8a:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa8c:	e008      	b.n	800aaa0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa8e:	f7fb f835 	bl	8005afc <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d901      	bls.n	800aaa0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e132      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaa0:	4b9b      	ldr	r3, [pc, #620]	; (800ad10 <HAL_RCC_OscConfig+0x6b4>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0f0      	beq.n	800aa8e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d102      	bne.n	800aaba <HAL_RCC_OscConfig+0x45e>
 800aab4:	f7ff fb0b 	bl	800a0ce <LL_RCC_LSE_Enable>
 800aab8:	e00c      	b.n	800aad4 <HAL_RCC_OscConfig+0x478>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2b05      	cmp	r3, #5
 800aac0:	d104      	bne.n	800aacc <HAL_RCC_OscConfig+0x470>
 800aac2:	f7ff fb26 	bl	800a112 <LL_RCC_LSE_EnableBypass>
 800aac6:	f7ff fb02 	bl	800a0ce <LL_RCC_LSE_Enable>
 800aaca:	e003      	b.n	800aad4 <HAL_RCC_OscConfig+0x478>
 800aacc:	f7ff fb10 	bl	800a0f0 <LL_RCC_LSE_Disable>
 800aad0:	f7ff fb30 	bl	800a134 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d014      	beq.n	800ab06 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aadc:	f7fb f80e 	bl	8005afc <HAL_GetTick>
 800aae0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800aae2:	e00a      	b.n	800aafa <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aae4:	f7fb f80a 	bl	8005afc <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d901      	bls.n	800aafa <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e105      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800aafa:	f7ff fb2c 	bl	800a156 <LL_RCC_LSE_IsReady>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0ef      	beq.n	800aae4 <HAL_RCC_OscConfig+0x488>
 800ab04:	e013      	b.n	800ab2e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab06:	f7fa fff9 	bl	8005afc <HAL_GetTick>
 800ab0a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ab0c:	e00a      	b.n	800ab24 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab0e:	f7fa fff5 	bl	8005afc <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e0f0      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ab24:	f7ff fb17 	bl	800a156 <LL_RCC_LSE_IsReady>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1ef      	bne.n	800ab0e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d02c      	beq.n	800ab94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d014      	beq.n	800ab6c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab42:	f7ff fa90 	bl	800a066 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7fa ffd9 	bl	8005afc <HAL_GetTick>
 800ab4a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ab4c:	e008      	b.n	800ab60 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab4e:	f7fa ffd5 	bl	8005afc <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d901      	bls.n	800ab60 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e0d2      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ab60:	f7ff faa3 	bl	800a0aa <LL_RCC_HSI48_IsReady>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0f1      	beq.n	800ab4e <HAL_RCC_OscConfig+0x4f2>
 800ab6a:	e013      	b.n	800ab94 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab6c:	f7ff fa8c 	bl	800a088 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab70:	f7fa ffc4 	bl	8005afc <HAL_GetTick>
 800ab74:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ab76:	e008      	b.n	800ab8a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab78:	f7fa ffc0 	bl	8005afc <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d901      	bls.n	800ab8a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e0bd      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ab8a:	f7ff fa8e 	bl	800a0aa <LL_RCC_HSI48_IsReady>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1f1      	bne.n	800ab78 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 80b3 	beq.w	800ad04 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab9e:	f7ff fbec 	bl	800a37a <LL_RCC_GetSysClkSource>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b0c      	cmp	r3, #12
 800aba6:	d076      	beq.n	800ac96 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	2b02      	cmp	r3, #2
 800abae:	d14b      	bne.n	800ac48 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abb0:	f7ff fca6 	bl	800a500 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb4:	f7fa ffa2 	bl	8005afc <HAL_GetTick>
 800abb8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abbc:	f7fa ff9e 	bl	8005afc <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e09b      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800abce:	f7ff fca6 	bl	800a51e <LL_RCC_PLL_IsReady>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f1      	bne.n	800abbc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	4b4d      	ldr	r3, [pc, #308]	; (800ad14 <HAL_RCC_OscConfig+0x6b8>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800abea:	4311      	orrs	r1, r2
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abf0:	0212      	lsls	r2, r2, #8
 800abf2:	4311      	orrs	r1, r2
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abf8:	4311      	orrs	r1, r2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800abfe:	4311      	orrs	r1, r2
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ac04:	430a      	orrs	r2, r1
 800ac06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac0e:	f7ff fc68 	bl	800a4e2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac20:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac22:	f7fa ff6b 	bl	8005afc <HAL_GetTick>
 800ac26:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800ac28:	e008      	b.n	800ac3c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac2a:	f7fa ff67 	bl	8005afc <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d901      	bls.n	800ac3c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e064      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800ac3c:	f7ff fc6f 	bl	800a51e <LL_RCC_PLL_IsReady>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0f1      	beq.n	800ac2a <HAL_RCC_OscConfig+0x5ce>
 800ac46:	e05d      	b.n	800ad04 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac48:	f7ff fc5a 	bl	800a500 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800ac4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac56:	f023 0303 	bic.w	r3, r3, #3
 800ac5a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800ac5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac66:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800ac6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac6e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac70:	f7fa ff44 	bl	8005afc <HAL_GetTick>
 800ac74:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac78:	f7fa ff40 	bl	8005afc <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e03d      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800ac8a:	f7ff fc48 	bl	800a51e <LL_RCC_PLL_IsReady>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f1      	bne.n	800ac78 <HAL_RCC_OscConfig+0x61c>
 800ac94:	e036      	b.n	800ad04 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d101      	bne.n	800aca2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e031      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800aca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f003 0203 	and.w	r2, r3, #3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d123      	bne.n	800ad00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d11c      	bne.n	800ad00 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	0a1b      	lsrs	r3, r3, #8
 800acca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d114      	bne.n	800ad00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d10d      	bne.n	800ad00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acee:	429a      	cmp	r2, r3
 800acf0:	d106      	bne.n	800ad00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d001      	beq.n	800ad04 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e000      	b.n	800ad06 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	372c      	adds	r7, #44	; 0x2c
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	58000400 	.word	0x58000400
 800ad14:	11c1808c 	.word	0x11c1808c

0800ad18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e12a      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad2c:	4b97      	ldr	r3, [pc, #604]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0307 	and.w	r3, r3, #7
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d91b      	bls.n	800ad72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad3a:	4b94      	ldr	r3, [pc, #592]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f023 0207 	bic.w	r2, r3, #7
 800ad42:	4992      	ldr	r1, [pc, #584]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad4a:	f7fa fed7 	bl	8005afc <HAL_GetTick>
 800ad4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad50:	e008      	b.n	800ad64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ad52:	f7fa fed3 	bl	8005afc <HAL_GetTick>
 800ad56:	4602      	mov	r2, r0
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d901      	bls.n	800ad64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e10e      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad64:	4b89      	ldr	r3, [pc, #548]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d1ef      	bne.n	800ad52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0302 	and.w	r3, r3, #2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d016      	beq.n	800adac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff fb05 	bl	800a392 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ad88:	f7fa feb8 	bl	8005afc <HAL_GetTick>
 800ad8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ad8e:	e008      	b.n	800ada2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ad90:	f7fa feb4 	bl	8005afc <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d901      	bls.n	800ada2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e0ef      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ada2:	f7ff fbff 	bl	800a5a4 <LL_RCC_IsActiveFlag_HPRE>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0f1      	beq.n	800ad90 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d016      	beq.n	800ade6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fafc 	bl	800a3ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800adc2:	f7fa fe9b 	bl	8005afc <HAL_GetTick>
 800adc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800adc8:	e008      	b.n	800addc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800adca:	f7fa fe97 	bl	8005afc <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	2b02      	cmp	r3, #2
 800add6:	d901      	bls.n	800addc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e0d2      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800addc:	f7ff fbf4 	bl	800a5c8 <LL_RCC_IsActiveFlag_C2HPRE>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0f1      	beq.n	800adca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d016      	beq.n	800ae20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff faf5 	bl	800a3e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800adfc:	f7fa fe7e 	bl	8005afc <HAL_GetTick>
 800ae00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ae02:	e008      	b.n	800ae16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae04:	f7fa fe7a 	bl	8005afc <HAL_GetTick>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d901      	bls.n	800ae16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e0b5      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ae16:	f7ff fbea 	bl	800a5ee <LL_RCC_IsActiveFlag_SHDHPRE>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f1      	beq.n	800ae04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d016      	beq.n	800ae5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff faef 	bl	800a414 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ae36:	f7fa fe61 	bl	8005afc <HAL_GetTick>
 800ae3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae3e:	f7fa fe5d 	bl	8005afc <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e098      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ae50:	f7ff fbe0 	bl	800a614 <LL_RCC_IsActiveFlag_PPRE1>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d0f1      	beq.n	800ae3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0308 	and.w	r3, r3, #8
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d017      	beq.n	800ae96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff fae5 	bl	800a43c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ae72:	f7fa fe43 	bl	8005afc <HAL_GetTick>
 800ae76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ae78:	e008      	b.n	800ae8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ae7a:	f7fa fe3f 	bl	8005afc <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d901      	bls.n	800ae8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e07a      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ae8c:	f7ff fbd4 	bl	800a638 <LL_RCC_IsActiveFlag_PPRE2>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0f1      	beq.n	800ae7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d043      	beq.n	800af2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d106      	bne.n	800aeb8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800aeaa:	f7ff f885 	bl	8009fb8 <LL_RCC_HSE_IsReady>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11e      	bne.n	800aef2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e064      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d106      	bne.n	800aece <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800aec0:	f7ff fb2d 	bl	800a51e <LL_RCC_PLL_IsReady>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d113      	bne.n	800aef2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e059      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800aed6:	f7ff f9ed 	bl	800a2b4 <LL_RCC_MSI_IsReady>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d108      	bne.n	800aef2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e04e      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800aee4:	f7ff f898 	bl	800a018 <LL_RCC_HSI_IsReady>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e047      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff fa2b 	bl	800a352 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aefc:	f7fa fdfe 	bl	8005afc <HAL_GetTick>
 800af00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af02:	e00a      	b.n	800af1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af04:	f7fa fdfa 	bl	8005afc <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af12:	4293      	cmp	r3, r2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e033      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af1a:	f7ff fa2e 	bl	800a37a <LL_RCC_GetSysClkSource>
 800af1e:	4602      	mov	r2, r0
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	429a      	cmp	r2, r3
 800af28:	d1ec      	bne.n	800af04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af2a:	4b18      	ldr	r3, [pc, #96]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0307 	and.w	r3, r3, #7
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d21b      	bcs.n	800af70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af38:	4b14      	ldr	r3, [pc, #80]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f023 0207 	bic.w	r2, r3, #7
 800af40:	4912      	ldr	r1, [pc, #72]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	4313      	orrs	r3, r2
 800af46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af48:	f7fa fdd8 	bl	8005afc <HAL_GetTick>
 800af4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af4e:	e008      	b.n	800af62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af50:	f7fa fdd4 	bl	8005afc <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d901      	bls.n	800af62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e00f      	b.n	800af82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af62:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <HAL_RCC_ClockConfig+0x274>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d1ef      	bne.n	800af50 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800af70:	f7fa f8be 	bl	80050f0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800af74:	f7fa fdce 	bl	8005b14 <HAL_GetTickPrio>
 800af78:	4603      	mov	r3, r0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7f9 ff92 	bl	8004ea4 <HAL_InitTick>
 800af80:	4603      	mov	r3, r0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	58004000 	.word	0x58004000

0800af90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af96:	f7ff f9f0 	bl	800a37a <LL_RCC_GetSysClkSource>
 800af9a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800afa2:	f7ff f9ac 	bl	800a2fe <LL_RCC_MSI_GetRange>
 800afa6:	4603      	mov	r3, r0
 800afa8:	091b      	lsrs	r3, r3, #4
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	4a2a      	ldr	r2, [pc, #168]	; (800b058 <HAL_RCC_GetSysClockFreq+0xc8>)
 800afb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	e04a      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d102      	bne.n	800afc4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800afbe:	4b27      	ldr	r3, [pc, #156]	; (800b05c <HAL_RCC_GetSysClockFreq+0xcc>)
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	e044      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d10a      	bne.n	800afe0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800afca:	f7fe ffa7 	bl	8009f1c <LL_RCC_HSE_IsEnabledDiv2>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d102      	bne.n	800afda <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800afd4:	4b21      	ldr	r3, [pc, #132]	; (800b05c <HAL_RCC_GetSysClockFreq+0xcc>)
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	e039      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800afda:	4b21      	ldr	r3, [pc, #132]	; (800b060 <HAL_RCC_GetSysClockFreq+0xd0>)
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e036      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800afe0:	f7ff fad4 	bl	800a58c <LL_RCC_PLL_GetMainSource>
 800afe4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d002      	beq.n	800aff2 <HAL_RCC_GetSysClockFreq+0x62>
 800afec:	2b03      	cmp	r3, #3
 800afee:	d003      	beq.n	800aff8 <HAL_RCC_GetSysClockFreq+0x68>
 800aff0:	e00d      	b.n	800b00e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800aff2:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <HAL_RCC_GetSysClockFreq+0xcc>)
 800aff4:	60bb      	str	r3, [r7, #8]
        break;
 800aff6:	e015      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800aff8:	f7fe ff90 	bl	8009f1c <LL_RCC_HSE_IsEnabledDiv2>
 800affc:	4603      	mov	r3, r0
 800affe:	2b01      	cmp	r3, #1
 800b000:	d102      	bne.n	800b008 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b002:	4b16      	ldr	r3, [pc, #88]	; (800b05c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b004:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b006:	e00d      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800b008:	4b15      	ldr	r3, [pc, #84]	; (800b060 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b00a:	60bb      	str	r3, [r7, #8]
        break;
 800b00c:	e00a      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b00e:	f7ff f976 	bl	800a2fe <LL_RCC_MSI_GetRange>
 800b012:	4603      	mov	r3, r0
 800b014:	091b      	lsrs	r3, r3, #4
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	4a0f      	ldr	r2, [pc, #60]	; (800b058 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b020:	60bb      	str	r3, [r7, #8]
        break;
 800b022:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800b024:	f7ff fa8d 	bl	800a542 <LL_RCC_PLL_GetN>
 800b028:	4602      	mov	r2, r0
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	fb03 f402 	mul.w	r4, r3, r2
 800b030:	f7ff faa0 	bl	800a574 <LL_RCC_PLL_GetDivider>
 800b034:	4603      	mov	r3, r0
 800b036:	091b      	lsrs	r3, r3, #4
 800b038:	3301      	adds	r3, #1
 800b03a:	fbb4 f4f3 	udiv	r4, r4, r3
 800b03e:	f7ff fa8d 	bl	800a55c <LL_RCC_PLL_GetR>
 800b042:	4603      	mov	r3, r0
 800b044:	0f5b      	lsrs	r3, r3, #29
 800b046:	3301      	adds	r3, #1
 800b048:	fbb4 f3f3 	udiv	r3, r4, r3
 800b04c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800b04e:	68fb      	ldr	r3, [r7, #12]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	bd90      	pop	{r4, r7, pc}
 800b058:	080166f0 	.word	0x080166f0
 800b05c:	00f42400 	.word	0x00f42400
 800b060:	01e84800 	.word	0x01e84800

0800b064 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b064:	b598      	push	{r3, r4, r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b068:	f7ff ff92 	bl	800af90 <HAL_RCC_GetSysClockFreq>
 800b06c:	4604      	mov	r4, r0
 800b06e:	f7ff f9f9 	bl	800a464 <LL_RCC_GetAHBPrescaler>
 800b072:	4603      	mov	r3, r0
 800b074:	091b      	lsrs	r3, r3, #4
 800b076:	f003 030f 	and.w	r3, r3, #15
 800b07a:	4a03      	ldr	r2, [pc, #12]	; (800b088 <HAL_RCC_GetHCLKFreq+0x24>)
 800b07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b080:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd98      	pop	{r3, r4, r7, pc}
 800b088:	08016690 	.word	0x08016690

0800b08c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b08c:	b598      	push	{r3, r4, r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b090:	f7ff ffe8 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800b094:	4604      	mov	r4, r0
 800b096:	f7ff fa18 	bl	800a4ca <LL_RCC_GetAPB2Prescaler>
 800b09a:	4603      	mov	r3, r0
 800b09c:	0adb      	lsrs	r3, r3, #11
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	4a04      	ldr	r2, [pc, #16]	; (800b0b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a8:	f003 031f 	and.w	r3, r3, #31
 800b0ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	bd98      	pop	{r3, r4, r7, pc}
 800b0b4:	080166d0 	.word	0x080166d0

0800b0b8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	226f      	movs	r2, #111	; 0x6f
 800b0c6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800b0c8:	f7ff f957 	bl	800a37a <LL_RCC_GetSysClkSource>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800b0d2:	f7ff f9c7 	bl	800a464 <LL_RCC_GetAHBPrescaler>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800b0dc:	f7ff f9e9 	bl	800a4b2 <LL_RCC_GetAPB1Prescaler>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800b0e6:	f7ff f9f0 	bl	800a4ca <LL_RCC_GetAPB2Prescaler>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800b0f0:	f7ff f9c4 	bl	800a47c <LL_C2_RCC_GetAHBPrescaler>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800b0fa:	f7ff f9cc 	bl	800a496 <LL_RCC_GetAHB4Prescaler>
 800b0fe:	4602      	mov	r2, r0
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <HAL_RCC_GetClockConfig+0x60>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0207 	and.w	r2, r3, #7
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	601a      	str	r2, [r3, #0]
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	58004000 	.word	0x58004000

0800b11c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b11c:	b590      	push	{r4, r7, lr}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2bb0      	cmp	r3, #176	; 0xb0
 800b128:	d903      	bls.n	800b132 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e007      	b.n	800b142 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	091b      	lsrs	r3, r3, #4
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	4a11      	ldr	r2, [pc, #68]	; (800b180 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b140:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b142:	f7ff f9a8 	bl	800a496 <LL_RCC_GetAHB4Prescaler>
 800b146:	4603      	mov	r3, r0
 800b148:	091b      	lsrs	r3, r3, #4
 800b14a:	f003 030f 	and.w	r3, r3, #15
 800b14e:	4a0d      	ldr	r2, [pc, #52]	; (800b184 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	4a0a      	ldr	r2, [pc, #40]	; (800b188 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b160:	fba2 2303 	umull	r2, r3, r2, r3
 800b164:	0c9c      	lsrs	r4, r3, #18
 800b166:	f7fe fecb 	bl	8009f00 <HAL_PWREx_GetVoltageRange>
 800b16a:	4603      	mov	r3, r0
 800b16c:	4619      	mov	r1, r3
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f80c 	bl	800b18c <RCC_SetFlashLatency>
 800b174:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}
 800b17e:	bf00      	nop
 800b180:	080166f0 	.word	0x080166f0
 800b184:	08016690 	.word	0x08016690
 800b188:	431bde83 	.word	0x431bde83

0800b18c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b18c:	b590      	push	{r4, r7, lr}
 800b18e:	b093      	sub	sp, #76	; 0x4c
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b196:	4b39      	ldr	r3, [pc, #228]	; (800b27c <RCC_SetFlashLatency+0xf0>)
 800b198:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b19c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b19e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b1a2:	4a37      	ldr	r2, [pc, #220]	; (800b280 <RCC_SetFlashLatency+0xf4>)
 800b1a4:	f107 031c 	add.w	r3, r7, #28
 800b1a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b1ae:	4b35      	ldr	r3, [pc, #212]	; (800b284 <RCC_SetFlashLatency+0xf8>)
 800b1b0:	f107 040c 	add.w	r4, r7, #12
 800b1b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1c4:	d11c      	bne.n	800b200 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ca:	e015      	b.n	800b1f8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d808      	bhi.n	800b1f2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800b1f0:	e022      	b.n	800b238 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	643b      	str	r3, [r7, #64]	; 0x40
 800b1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d9e6      	bls.n	800b1cc <RCC_SetFlashLatency+0x40>
 800b1fe:	e01b      	b.n	800b238 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b204:	e015      	b.n	800b232 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b20e:	4413      	add	r3, r2
 800b210:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d808      	bhi.n	800b22c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b222:	4413      	add	r3, r2
 800b224:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b228:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800b22a:	e005      	b.n	800b238 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	3301      	adds	r3, #1
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	2b02      	cmp	r3, #2
 800b236:	d9e6      	bls.n	800b206 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800b238:	4b13      	ldr	r3, [pc, #76]	; (800b288 <RCC_SetFlashLatency+0xfc>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f023 0207 	bic.w	r2, r3, #7
 800b240:	4911      	ldr	r1, [pc, #68]	; (800b288 <RCC_SetFlashLatency+0xfc>)
 800b242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b244:	4313      	orrs	r3, r2
 800b246:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b248:	f7fa fc58 	bl	8005afc <HAL_GetTick>
 800b24c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b24e:	e008      	b.n	800b262 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b250:	f7fa fc54 	bl	8005afc <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d901      	bls.n	800b262 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e007      	b.n	800b272 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b262:	4b09      	ldr	r3, [pc, #36]	; (800b288 <RCC_SetFlashLatency+0xfc>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d1ef      	bne.n	800b250 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	374c      	adds	r7, #76	; 0x4c
 800b276:	46bd      	mov	sp, r7
 800b278:	bd90      	pop	{r4, r7, pc}
 800b27a:	bf00      	nop
 800b27c:	08016098 	.word	0x08016098
 800b280:	080160a8 	.word	0x080160a8
 800b284:	080160b4 	.word	0x080160b4
 800b288:	58004000 	.word	0x58004000

0800b28c <LL_RCC_LSE_IsEnabled>:
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d101      	bne.n	800b2a4 <LL_RCC_LSE_IsEnabled+0x18>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e000      	b.n	800b2a6 <LL_RCC_LSE_IsEnabled+0x1a>
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <LL_RCC_LSE_IsReady>:
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b2b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d101      	bne.n	800b2c8 <LL_RCC_LSE_IsReady+0x18>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e000      	b.n	800b2ca <LL_RCC_LSE_IsReady+0x1a>
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <LL_RCC_SetRFWKPClockSource>:
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b2dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b2e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <LL_RCC_SetSMPSClockSource>:
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	f023 0203 	bic.w	r2, r3, #3
 800b312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4313      	orrs	r3, r2
 800b31a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <LL_RCC_SetSMPSPrescaler>:
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b33a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4313      	orrs	r3, r2
 800b342:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <LL_RCC_SetUSARTClockSource>:
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b360:	f023 0203 	bic.w	r2, r3, #3
 800b364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <LL_RCC_SetLPUARTClockSource>:
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4313      	orrs	r3, r2
 800b398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <LL_RCC_SetI2CClockSource>:
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b3b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	091b      	lsrs	r3, r3, #4
 800b3bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	401a      	ands	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800b3cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <LL_RCC_SetLPTIMClockSource>:
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b3ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	43db      	mvns	r3, r3
 800b3fa:	401a      	ands	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	041b      	lsls	r3, r3, #16
 800b400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b404:	4313      	orrs	r3, r2
 800b406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <LL_RCC_SetSAIClockSource>:
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b41e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b42a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4313      	orrs	r3, r2
 800b432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <LL_RCC_SetRNGClockSource>:
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b44a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b452:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <LL_RCC_SetCLK48ClockSource>:
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4313      	orrs	r3, r2
 800b48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b48e:	bf00      	nop
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <LL_RCC_SetUSBClockSource>:
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ffe3 	bl	800b46e <LL_RCC_SetCLK48ClockSource>
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <LL_RCC_SetADCClockSource>:
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b4b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <LL_RCC_SetRTCClockSource>:
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b4e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <LL_RCC_GetRTCClockSource>:
{
 800b508:	b480      	push	{r7}
 800b50a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b514:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800b518:	4618      	mov	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <LL_RCC_ForceBackupDomainReset>:
{
 800b522:	b480      	push	{r7}
 800b524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b53a:	bf00      	nop
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b55c:	bf00      	nop
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <LL_RCC_PLLSAI1_Enable>:
{
 800b566:	b480      	push	{r7}
 800b568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b56a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b578:	6013      	str	r3, [r2, #0]
}
 800b57a:	bf00      	nop
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <LL_RCC_PLLSAI1_Disable>:
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b596:	6013      	str	r3, [r2, #0]
}
 800b598:	bf00      	nop
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <LL_RCC_PLLSAI1_IsReady>:
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b5a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5b4:	d101      	bne.n	800b5ba <LL_RCC_PLLSAI1_IsReady+0x18>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b088      	sub	sp, #32
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d033      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5ea:	d00c      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b5ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5f0:	d802      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d010      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b5f6:	e017      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b5f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b5fc:	d017      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800b5fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b602:	d016      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b604:	e010      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b614:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b616:	e00d      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 f947 	bl	800b8b0 <RCCEx_PLLSAI1_ConfigNP>
 800b622:	4603      	mov	r3, r0
 800b624:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b626:	e005      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	77fb      	strb	r3, [r7, #31]
        break;
 800b62c:	e002      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b632:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b634:	7ffb      	ldrb	r3, [r7, #31]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d105      	bne.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fee9 	bl	800b416 <LL_RCC_SetSAIClockSource>
 800b644:	e001      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b646:	7ffb      	ldrb	r3, [r7, #31]
 800b648:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b652:	2b00      	cmp	r3, #0
 800b654:	d046      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b656:	f7ff ff57 	bl	800b508 <LL_RCC_GetRTCClockSource>
 800b65a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	429a      	cmp	r2, r3
 800b664:	d03c      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b666:	f7fe fc3b 	bl	8009ee0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d105      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff ff31 	bl	800b4dc <LL_RCC_SetRTCClockSource>
 800b67a:	e02e      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b67c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b684:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b686:	f7ff ff4c 	bl	800b522 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b68a:	f7ff ff5b 	bl	800b544 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b698:	4313      	orrs	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b69c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b6a6:	f7ff fdf1 	bl	800b28c <LL_RCC_LSE_IsEnabled>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d114      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6b0:	f7fa fa24 	bl	8005afc <HAL_GetTick>
 800b6b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b6b6:	e00b      	b.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6b8:	f7fa fa20 	bl	8005afc <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d902      	bls.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	77fb      	strb	r3, [r7, #31]
              break;
 800b6ce:	e004      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b6d0:	f7ff fdee 	bl	800b2b0 <LL_RCC_LSE_IsReady>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d1ee      	bne.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b6da:	7ffb      	ldrb	r3, [r7, #31]
 800b6dc:	77bb      	strb	r3, [r7, #30]
 800b6de:	e001      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	7ffb      	ldrb	r3, [r7, #31]
 800b6e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0301 	and.w	r3, r3, #1
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fe2b 	bl	800b350 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b00      	cmp	r3, #0
 800b704:	d004      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fe36 	bl	800b37c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0310 	and.w	r3, r3, #16
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff fe5e 	bl	800b3e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff fe53 	bl	800b3e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fe2b 	bl	800b3a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0308 	and.w	r3, r3, #8
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff fe20 	bl	800b3a8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b770:	2b00      	cmp	r3, #0
 800b772:	d022      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fe8e 	bl	800b49a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b786:	d107      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b796:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7a0:	d10b      	bne.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 f8dd 	bl	800b966 <RCCEx_PLLSAI1_ConfigNQ>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b7b0:	7ffb      	ldrb	r3, [r7, #31]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d02b      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ce:	d008      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d8:	d003      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x228>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fe2b 	bl	800b442 <LL_RCC_SetRNGClockSource>
 800b7ec:	e00a      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f7ff fe22 	bl	800b442 <LL_RCC_SetRNGClockSource>
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fe35 	bl	800b46e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b80c:	d107      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b80e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b81c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b826:	2b00      	cmp	r3, #0
 800b828:	d022      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff fe3e 	bl	800b4b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d107      	bne.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b83e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b84c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b856:	d10b      	bne.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 f8dd 	bl	800ba1c <RCCEx_PLLSAI1_ConfigNR>
 800b862:	4603      	mov	r3, r0
 800b864:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b866:	7ffb      	ldrb	r3, [r7, #31]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800b86c:	7ffb      	ldrb	r3, [r7, #31]
 800b86e:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fd27 	bl	800b2d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d009      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fd46 	bl	800b328 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fd2d 	bl	800b300 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800b8a6:	7fbb      	ldrb	r3, [r7, #30]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3720      	adds	r7, #32
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b8bc:	f7ff fe62 	bl	800b584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b8c0:	f7fa f91c 	bl	8005afc <HAL_GetTick>
 800b8c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b8c6:	e009      	b.n	800b8dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b8c8:	f7fa f918 	bl	8005afc <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d902      	bls.n	800b8dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8da:	e004      	b.n	800b8e6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b8dc:	f7ff fe61 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1f0      	bne.n	800b8c8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d137      	bne.n	800b95c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b8ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	021b      	lsls	r3, r3, #8
 800b8fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b900:	4313      	orrs	r3, r2
 800b902:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800b904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b916:	4313      	orrs	r3, r2
 800b918:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b91a:	f7ff fe24 	bl	800b566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b91e:	f7fa f8ed 	bl	8005afc <HAL_GetTick>
 800b922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b924:	e009      	b.n	800b93a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b926:	f7fa f8e9 	bl	8005afc <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d902      	bls.n	800b93a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
        break;
 800b938:	e004      	b.n	800b944 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b93a:	f7ff fe32 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b01      	cmp	r3, #1
 800b942:	d1f0      	bne.n	800b926 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d108      	bne.n	800b95c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b94a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b94e:	691a      	ldr	r2, [r3, #16]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b958:	4313      	orrs	r3, r2
 800b95a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b972:	f7ff fe07 	bl	800b584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b976:	f7fa f8c1 	bl	8005afc <HAL_GetTick>
 800b97a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b97c:	e009      	b.n	800b992 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b97e:	f7fa f8bd 	bl	8005afc <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d902      	bls.n	800b992 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	73fb      	strb	r3, [r7, #15]
      break;
 800b990:	e004      	b.n	800b99c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b992:	f7ff fe06 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1f0      	bne.n	800b97e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d137      	bne.n	800ba12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b9a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	021b      	lsls	r3, r3, #8
 800b9b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800b9ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b9d0:	f7ff fdc9 	bl	800b566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9d4:	f7fa f892 	bl	8005afc <HAL_GetTick>
 800b9d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b9da:	e009      	b.n	800b9f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9dc:	f7fa f88e 	bl	8005afc <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d902      	bls.n	800b9f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	73fb      	strb	r3, [r7, #15]
        break;
 800b9ee:	e004      	b.n	800b9fa <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b9f0:	f7ff fdd7 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d1f0      	bne.n	800b9dc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d108      	bne.n	800ba12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ba00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba04:	691a      	ldr	r2, [r3, #16]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba28:	f7ff fdac 	bl	800b584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba2c:	f7fa f866 	bl	8005afc <HAL_GetTick>
 800ba30:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba32:	e009      	b.n	800ba48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba34:	f7fa f862 	bl	8005afc <HAL_GetTick>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d902      	bls.n	800ba48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	73fb      	strb	r3, [r7, #15]
      break;
 800ba46:	e004      	b.n	800ba52 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba48:	f7ff fdab 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1f0      	bne.n	800ba34 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d137      	bne.n	800bac8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ba58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	021b      	lsls	r3, r3, #8
 800ba68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ba70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba82:	4313      	orrs	r3, r2
 800ba84:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ba86:	f7ff fd6e 	bl	800b566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba8a:	f7fa f837 	bl	8005afc <HAL_GetTick>
 800ba8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba90:	e009      	b.n	800baa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba92:	f7fa f833 	bl	8005afc <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d902      	bls.n	800baa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	73fb      	strb	r3, [r7, #15]
        break;
 800baa4:	e004      	b.n	800bab0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800baa6:	f7ff fd7c 	bl	800b5a2 <LL_RCC_PLLSAI1_IsReady>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b01      	cmp	r3, #1
 800baae:	d1f0      	bne.n	800ba92 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d108      	bne.n	800bac8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baba:	691a      	ldr	r2, [r3, #16]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bac4:	4313      	orrs	r3, r2
 800bac6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e090      	b.n	800bc06 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d106      	bne.n	800bafe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7f9 f977 	bl	8004dec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	22ca      	movs	r2, #202	; 0xca
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2253      	movs	r2, #83	; 0x53
 800bb14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f89f 	bl	800bc5a <RTC_EnterInitMode>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d009      	beq.n	800bb36 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	22ff      	movs	r2, #255	; 0xff
 800bb28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e067      	b.n	800bc06 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6899      	ldr	r1, [r3, #8]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	431a      	orrs	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	68d2      	ldr	r2, [r2, #12]
 800bb70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6919      	ldr	r1, [r3, #16]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	041a      	lsls	r2, r3, #16
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68da      	ldr	r2, [r3, #12]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb94:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0203 	bic.w	r2, r2, #3
 800bba4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69da      	ldr	r2, [r3, #28]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f003 0320 	and.w	r3, r3, #32
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d113      	bne.n	800bbf4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f81e 	bl	800bc0e <HAL_RTC_WaitForSynchro>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00d      	beq.n	800bbf4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	22ff      	movs	r2, #255	; 0xff
 800bbde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e008      	b.n	800bc06 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	22ff      	movs	r2, #255	; 0xff
 800bbfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800bc04:	2300      	movs	r3, #0
  }
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bc24:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bc26:	f7f9 ff69 	bl	8005afc <HAL_GetTick>
 800bc2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc2c:	e009      	b.n	800bc42 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bc2e:	f7f9 ff65 	bl	8005afc <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc3c:	d901      	bls.n	800bc42 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e007      	b.n	800bc52 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f003 0320 	and.w	r3, r3, #32
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0ee      	beq.n	800bc2e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d119      	bne.n	800bca4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bc7a:	f7f9 ff3f 	bl	8005afc <HAL_GetTick>
 800bc7e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bc80:	e009      	b.n	800bc96 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800bc82:	f7f9 ff3b 	bl	8005afc <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc90:	d901      	bls.n	800bc96 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	e007      	b.n	800bca6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0ee      	beq.n	800bc82 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e01d      	b.n	800bcfc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d106      	bne.n	800bcda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7f9 fb95 	bl	8005404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f000 fc83 	bl	800c5f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689a      	ldr	r2, [r3, #8]
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <HAL_TIM_Base_Start+0x50>)
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2b06      	cmp	r3, #6
 800bd24:	d00b      	beq.n	800bd3e <HAL_TIM_Base_Start+0x3a>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd2c:	d007      	beq.n	800bd3e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f042 0201 	orr.w	r2, r2, #1
 800bd3c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	00010007 	.word	0x00010007

0800bd58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2202      	movs	r2, #2
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6a1a      	ldr	r2, [r3, #32]
 800bd6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd72:	4013      	ands	r3, r2
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10f      	bne.n	800bd98 <HAL_TIM_Base_Stop+0x40>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6a1a      	ldr	r2, [r3, #32]
 800bd7e:	f240 4344 	movw	r3, #1092	; 0x444
 800bd82:	4013      	ands	r3, r2
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d107      	bne.n	800bd98 <HAL_TIM_Base_Stop+0x40>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f022 0201 	bic.w	r2, r2, #1
 800bd96:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
	...

0800bdb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <HAL_TIM_Base_Start_IT+0x50>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b06      	cmp	r3, #6
 800bdd8:	d00b      	beq.n	800bdf2 <HAL_TIM_Base_Start_IT+0x42>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde0:	d007      	beq.n	800bdf2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0201 	orr.w	r2, r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	00010007 	.word	0x00010007

0800be04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e01d      	b.n	800be52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f815 	bl	800be5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f000 fbd8 	bl	800c5f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
	...

0800be70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2201      	movs	r2, #1
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	4618      	mov	r0, r3
 800be84:	f000 ff36 	bl	800ccf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a19      	ldr	r2, [pc, #100]	; (800bef4 <HAL_TIM_PWM_Start+0x84>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d009      	beq.n	800bea6 <HAL_TIM_PWM_Start+0x36>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a18      	ldr	r2, [pc, #96]	; (800bef8 <HAL_TIM_PWM_Start+0x88>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d004      	beq.n	800bea6 <HAL_TIM_PWM_Start+0x36>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a16      	ldr	r2, [pc, #88]	; (800befc <HAL_TIM_PWM_Start+0x8c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d101      	bne.n	800beaa <HAL_TIM_PWM_Start+0x3a>
 800bea6:	2301      	movs	r3, #1
 800bea8:	e000      	b.n	800beac <HAL_TIM_PWM_Start+0x3c>
 800beaa:	2300      	movs	r3, #0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d007      	beq.n	800bec0 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <HAL_TIM_PWM_Start+0x90>)
 800bec8:	4013      	ands	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b06      	cmp	r3, #6
 800bed0:	d00b      	beq.n	800beea <HAL_TIM_PWM_Start+0x7a>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed8:	d007      	beq.n	800beea <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f042 0201 	orr.w	r2, r2, #1
 800bee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	40012c00 	.word	0x40012c00
 800bef8:	40014400 	.word	0x40014400
 800befc:	40014800 	.word	0x40014800
 800bf00:	00010007 	.word	0x00010007

0800bf04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 feec 	bl	800ccf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a25      	ldr	r2, [pc, #148]	; (800bfb8 <HAL_TIM_PWM_Stop+0xb4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d009      	beq.n	800bf3a <HAL_TIM_PWM_Stop+0x36>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a24      	ldr	r2, [pc, #144]	; (800bfbc <HAL_TIM_PWM_Stop+0xb8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d004      	beq.n	800bf3a <HAL_TIM_PWM_Stop+0x36>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a22      	ldr	r2, [pc, #136]	; (800bfc0 <HAL_TIM_PWM_Stop+0xbc>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d101      	bne.n	800bf3e <HAL_TIM_PWM_Stop+0x3a>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <HAL_TIM_PWM_Stop+0x3c>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d017      	beq.n	800bf74 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6a1a      	ldr	r2, [r3, #32]
 800bf4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf4e:	4013      	ands	r3, r2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10f      	bne.n	800bf74 <HAL_TIM_PWM_Stop+0x70>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6a1a      	ldr	r2, [r3, #32]
 800bf5a:	f240 4344 	movw	r3, #1092	; 0x444
 800bf5e:	4013      	ands	r3, r2
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d107      	bne.n	800bf74 <HAL_TIM_PWM_Stop+0x70>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf7e:	4013      	ands	r3, r2
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10f      	bne.n	800bfa4 <HAL_TIM_PWM_Stop+0xa0>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6a1a      	ldr	r2, [r3, #32]
 800bf8a:	f240 4344 	movw	r3, #1092	; 0x444
 800bf8e:	4013      	ands	r3, r2
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <HAL_TIM_PWM_Stop+0xa0>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f022 0201 	bic.w	r2, r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	40012c00 	.word	0x40012c00
 800bfbc:	40014400 	.word	0x40014400
 800bfc0:	40014800 	.word	0x40014800

0800bfc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d122      	bne.n	800c020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 0302 	and.w	r3, r3, #2
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d11b      	bne.n	800c020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f06f 0202 	mvn.w	r2, #2
 800bff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fad7 	bl	800c5ba <HAL_TIM_IC_CaptureCallback>
 800c00c:	e005      	b.n	800c01a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fac9 	bl	800c5a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fada 	bl	800c5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	d122      	bne.n	800c074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	2b04      	cmp	r3, #4
 800c03a:	d11b      	bne.n	800c074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f06f 0204 	mvn.w	r2, #4
 800c044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 faad 	bl	800c5ba <HAL_TIM_IC_CaptureCallback>
 800c060:	e005      	b.n	800c06e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa9f 	bl	800c5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fab0 	bl	800c5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	f003 0308 	and.w	r3, r3, #8
 800c07e:	2b08      	cmp	r3, #8
 800c080:	d122      	bne.n	800c0c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	d11b      	bne.n	800c0c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f06f 0208 	mvn.w	r2, #8
 800c098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2204      	movs	r2, #4
 800c09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fa83 	bl	800c5ba <HAL_TIM_IC_CaptureCallback>
 800c0b4:	e005      	b.n	800c0c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa75 	bl	800c5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fa86 	bl	800c5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	f003 0310 	and.w	r3, r3, #16
 800c0d2:	2b10      	cmp	r3, #16
 800c0d4:	d122      	bne.n	800c11c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f003 0310 	and.w	r3, r3, #16
 800c0e0:	2b10      	cmp	r3, #16
 800c0e2:	d11b      	bne.n	800c11c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f06f 0210 	mvn.w	r2, #16
 800c0ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa59 	bl	800c5ba <HAL_TIM_IC_CaptureCallback>
 800c108:	e005      	b.n	800c116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fa4b 	bl	800c5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fa5c 	bl	800c5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b01      	cmp	r3, #1
 800c128:	d10e      	bne.n	800c148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b01      	cmp	r3, #1
 800c136:	d107      	bne.n	800c148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f06f 0201 	mvn.w	r2, #1
 800c140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7f8 f882 	bl	800424c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b80      	cmp	r3, #128	; 0x80
 800c154:	d10e      	bne.n	800c174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c160:	2b80      	cmp	r3, #128	; 0x80
 800c162:	d107      	bne.n	800c174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fe50 	bl	800ce14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c182:	d10e      	bne.n	800c1a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c18e:	2b80      	cmp	r3, #128	; 0x80
 800c190:	d107      	bne.n	800c1a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fe43 	bl	800ce28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ac:	2b40      	cmp	r3, #64	; 0x40
 800c1ae:	d10e      	bne.n	800c1ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ba:	2b40      	cmp	r3, #64	; 0x40
 800c1bc:	d107      	bne.n	800c1ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fa0a 	bl	800c5e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d10e      	bne.n	800c1fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f003 0320 	and.w	r3, r3, #32
 800c1e6:	2b20      	cmp	r3, #32
 800c1e8:	d107      	bne.n	800c1fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f06f 0220 	mvn.w	r2, #32
 800c1f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fe03 	bl	800ce00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c216:	2b01      	cmp	r3, #1
 800c218:	d101      	bne.n	800c21e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c21a:	2302      	movs	r3, #2
 800c21c:	e105      	b.n	800c42a <HAL_TIM_PWM_ConfigChannel+0x226>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2202      	movs	r2, #2
 800c22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b14      	cmp	r3, #20
 800c232:	f200 80f0 	bhi.w	800c416 <HAL_TIM_PWM_ConfigChannel+0x212>
 800c236:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c291 	.word	0x0800c291
 800c240:	0800c417 	.word	0x0800c417
 800c244:	0800c417 	.word	0x0800c417
 800c248:	0800c417 	.word	0x0800c417
 800c24c:	0800c2d1 	.word	0x0800c2d1
 800c250:	0800c417 	.word	0x0800c417
 800c254:	0800c417 	.word	0x0800c417
 800c258:	0800c417 	.word	0x0800c417
 800c25c:	0800c313 	.word	0x0800c313
 800c260:	0800c417 	.word	0x0800c417
 800c264:	0800c417 	.word	0x0800c417
 800c268:	0800c417 	.word	0x0800c417
 800c26c:	0800c353 	.word	0x0800c353
 800c270:	0800c417 	.word	0x0800c417
 800c274:	0800c417 	.word	0x0800c417
 800c278:	0800c417 	.word	0x0800c417
 800c27c:	0800c395 	.word	0x0800c395
 800c280:	0800c417 	.word	0x0800c417
 800c284:	0800c417 	.word	0x0800c417
 800c288:	0800c417 	.word	0x0800c417
 800c28c:	0800c3d5 	.word	0x0800c3d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	4618      	mov	r0, r3
 800c298:	f000 fa12 	bl	800c6c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0208 	orr.w	r2, r2, #8
 800c2aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	699a      	ldr	r2, [r3, #24]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f022 0204 	bic.w	r2, r2, #4
 800c2ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6999      	ldr	r1, [r3, #24]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	691a      	ldr	r2, [r3, #16]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	619a      	str	r2, [r3, #24]
      break;
 800c2ce:	e0a3      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fa6e 	bl	800c7b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6999      	ldr	r1, [r3, #24]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	021a      	lsls	r2, r3, #8
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	619a      	str	r2, [r3, #24]
      break;
 800c310:	e082      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 fac7 	bl	800c8ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 0208 	orr.w	r2, r2, #8
 800c32c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	69da      	ldr	r2, [r3, #28]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f022 0204 	bic.w	r2, r2, #4
 800c33c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	69d9      	ldr	r1, [r3, #28]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	61da      	str	r2, [r3, #28]
      break;
 800c350:	e062      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fb1f 	bl	800c99c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	69da      	ldr	r2, [r3, #28]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c36c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	69da      	ldr	r2, [r3, #28]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c37c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69d9      	ldr	r1, [r3, #28]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	021a      	lsls	r2, r3, #8
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	430a      	orrs	r2, r1
 800c390:	61da      	str	r2, [r3, #28]
      break;
 800c392:	e041      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 fb5c 	bl	800ca58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f042 0208 	orr.w	r2, r2, #8
 800c3ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0204 	bic.w	r2, r2, #4
 800c3be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	691a      	ldr	r2, [r3, #16]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c3d2:	e021      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fb94 	bl	800cb08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	021a      	lsls	r2, r3, #8
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	430a      	orrs	r2, r1
 800c412:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c414:	e000      	b.n	800c418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c416:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop

0800c434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c444:	2b01      	cmp	r3, #1
 800c446:	d101      	bne.n	800c44c <HAL_TIM_ConfigClockSource+0x18>
 800c448:	2302      	movs	r3, #2
 800c44a:	e0a8      	b.n	800c59e <HAL_TIM_ConfigClockSource+0x16a>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c46a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c46e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c476:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b40      	cmp	r3, #64	; 0x40
 800c486:	d067      	beq.n	800c558 <HAL_TIM_ConfigClockSource+0x124>
 800c488:	2b40      	cmp	r3, #64	; 0x40
 800c48a:	d80b      	bhi.n	800c4a4 <HAL_TIM_ConfigClockSource+0x70>
 800c48c:	2b10      	cmp	r3, #16
 800c48e:	d073      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x144>
 800c490:	2b10      	cmp	r3, #16
 800c492:	d802      	bhi.n	800c49a <HAL_TIM_ConfigClockSource+0x66>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d06f      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c498:	e078      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c49a:	2b20      	cmp	r3, #32
 800c49c:	d06c      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x144>
 800c49e:	2b30      	cmp	r3, #48	; 0x30
 800c4a0:	d06a      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c4a2:	e073      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c4a4:	2b70      	cmp	r3, #112	; 0x70
 800c4a6:	d00d      	beq.n	800c4c4 <HAL_TIM_ConfigClockSource+0x90>
 800c4a8:	2b70      	cmp	r3, #112	; 0x70
 800c4aa:	d804      	bhi.n	800c4b6 <HAL_TIM_ConfigClockSource+0x82>
 800c4ac:	2b50      	cmp	r3, #80	; 0x50
 800c4ae:	d033      	beq.n	800c518 <HAL_TIM_ConfigClockSource+0xe4>
 800c4b0:	2b60      	cmp	r3, #96	; 0x60
 800c4b2:	d041      	beq.n	800c538 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c4b4:	e06a      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ba:	d066      	beq.n	800c58a <HAL_TIM_ConfigClockSource+0x156>
 800c4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4c0:	d017      	beq.n	800c4f2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c4c2:	e063      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	6899      	ldr	r1, [r3, #8]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f000 fbee 	bl	800ccb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c4e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	609a      	str	r2, [r3, #8]
      break;
 800c4f0:	e04c      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	6899      	ldr	r1, [r3, #8]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	f000 fbd7 	bl	800ccb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c514:	609a      	str	r2, [r3, #8]
      break;
 800c516:	e039      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6818      	ldr	r0, [r3, #0]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	6859      	ldr	r1, [r3, #4]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	461a      	mov	r2, r3
 800c526:	f000 fb49 	bl	800cbbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2150      	movs	r1, #80	; 0x50
 800c530:	4618      	mov	r0, r3
 800c532:	f000 fba2 	bl	800cc7a <TIM_ITRx_SetConfig>
      break;
 800c536:	e029      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	6859      	ldr	r1, [r3, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	461a      	mov	r2, r3
 800c546:	f000 fb68 	bl	800cc1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2160      	movs	r1, #96	; 0x60
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fb92 	bl	800cc7a <TIM_ITRx_SetConfig>
      break;
 800c556:	e019      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6818      	ldr	r0, [r3, #0]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	6859      	ldr	r1, [r3, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	461a      	mov	r2, r3
 800c566:	f000 fb29 	bl	800cbbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2140      	movs	r1, #64	; 0x40
 800c570:	4618      	mov	r0, r3
 800c572:	f000 fb82 	bl	800cc7a <TIM_ITRx_SetConfig>
      break;
 800c576:	e009      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4619      	mov	r1, r3
 800c582:	4610      	mov	r0, r2
 800c584:	f000 fb79 	bl	800cc7a <TIM_ITRx_SetConfig>
      break;
 800c588:	e000      	b.n	800c58c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c58a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5ae:	bf00      	nop
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
	...

0800c5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a2a      	ldr	r2, [pc, #168]	; (800c6b4 <TIM_Base_SetConfig+0xbc>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d003      	beq.n	800c618 <TIM_Base_SetConfig+0x20>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c616:	d108      	bne.n	800c62a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a21      	ldr	r2, [pc, #132]	; (800c6b4 <TIM_Base_SetConfig+0xbc>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d00b      	beq.n	800c64a <TIM_Base_SetConfig+0x52>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c638:	d007      	beq.n	800c64a <TIM_Base_SetConfig+0x52>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a1e      	ldr	r2, [pc, #120]	; (800c6b8 <TIM_Base_SetConfig+0xc0>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d003      	beq.n	800c64a <TIM_Base_SetConfig+0x52>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a1d      	ldr	r2, [pc, #116]	; (800c6bc <TIM_Base_SetConfig+0xc4>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d108      	bne.n	800c65c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a0c      	ldr	r2, [pc, #48]	; (800c6b4 <TIM_Base_SetConfig+0xbc>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d007      	beq.n	800c698 <TIM_Base_SetConfig+0xa0>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a0b      	ldr	r2, [pc, #44]	; (800c6b8 <TIM_Base_SetConfig+0xc0>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d003      	beq.n	800c698 <TIM_Base_SetConfig+0xa0>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a0a      	ldr	r2, [pc, #40]	; (800c6bc <TIM_Base_SetConfig+0xc4>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d103      	bne.n	800c6a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	691a      	ldr	r2, [r3, #16]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	615a      	str	r2, [r3, #20]
}
 800c6a6:	bf00      	nop
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40012c00 	.word	0x40012c00
 800c6b8:	40014400 	.word	0x40014400
 800c6bc:	40014800 	.word	0x40014800

0800c6c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	f023 0201 	bic.w	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0303 	bic.w	r3, r3, #3
 800c6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f023 0302 	bic.w	r3, r3, #2
 800c70c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	4313      	orrs	r3, r2
 800c716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a24      	ldr	r2, [pc, #144]	; (800c7ac <TIM_OC1_SetConfig+0xec>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d007      	beq.n	800c730 <TIM_OC1_SetConfig+0x70>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a23      	ldr	r2, [pc, #140]	; (800c7b0 <TIM_OC1_SetConfig+0xf0>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d003      	beq.n	800c730 <TIM_OC1_SetConfig+0x70>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a22      	ldr	r2, [pc, #136]	; (800c7b4 <TIM_OC1_SetConfig+0xf4>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10c      	bne.n	800c74a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f023 0308 	bic.w	r3, r3, #8
 800c736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	4313      	orrs	r3, r2
 800c740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f023 0304 	bic.w	r3, r3, #4
 800c748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a17      	ldr	r2, [pc, #92]	; (800c7ac <TIM_OC1_SetConfig+0xec>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d007      	beq.n	800c762 <TIM_OC1_SetConfig+0xa2>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a17      	ldr	r2, [pc, #92]	; (800c7b4 <TIM_OC1_SetConfig+0xf4>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d003      	beq.n	800c762 <TIM_OC1_SetConfig+0xa2>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a14      	ldr	r2, [pc, #80]	; (800c7b0 <TIM_OC1_SetConfig+0xf0>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d111      	bne.n	800c786 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	4313      	orrs	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4313      	orrs	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	621a      	str	r2, [r3, #32]
}
 800c7a0:	bf00      	nop
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	40012c00 	.word	0x40012c00
 800c7b0:	40014800 	.word	0x40014800
 800c7b4:	40014400 	.word	0x40014400

0800c7b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	f023 0210 	bic.w	r2, r3, #16
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	021b      	lsls	r3, r3, #8
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f023 0320 	bic.w	r3, r3, #32
 800c806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	011b      	lsls	r3, r3, #4
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a22      	ldr	r2, [pc, #136]	; (800c8a0 <TIM_OC2_SetConfig+0xe8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d10d      	bne.n	800c838 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	011b      	lsls	r3, r3, #4
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a19      	ldr	r2, [pc, #100]	; (800c8a0 <TIM_OC2_SetConfig+0xe8>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d007      	beq.n	800c850 <TIM_OC2_SetConfig+0x98>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a18      	ldr	r2, [pc, #96]	; (800c8a4 <TIM_OC2_SetConfig+0xec>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d003      	beq.n	800c850 <TIM_OC2_SetConfig+0x98>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a17      	ldr	r2, [pc, #92]	; (800c8a8 <TIM_OC2_SetConfig+0xf0>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d113      	bne.n	800c878 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c85e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	695b      	ldr	r3, [r3, #20]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	4313      	orrs	r3, r2
 800c86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	4313      	orrs	r3, r2
 800c876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	621a      	str	r2, [r3, #32]
}
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	40012c00 	.word	0x40012c00
 800c8a4:	40014400 	.word	0x40014400
 800c8a8:	40014800 	.word	0x40014800

0800c8ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f023 0303 	bic.w	r3, r3, #3
 800c8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	021b      	lsls	r3, r3, #8
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	4313      	orrs	r3, r2
 800c904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a21      	ldr	r2, [pc, #132]	; (800c990 <TIM_OC3_SetConfig+0xe4>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d10d      	bne.n	800c92a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	021b      	lsls	r3, r3, #8
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	4313      	orrs	r3, r2
 800c920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a18      	ldr	r2, [pc, #96]	; (800c990 <TIM_OC3_SetConfig+0xe4>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d007      	beq.n	800c942 <TIM_OC3_SetConfig+0x96>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a17      	ldr	r2, [pc, #92]	; (800c994 <TIM_OC3_SetConfig+0xe8>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d003      	beq.n	800c942 <TIM_OC3_SetConfig+0x96>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a16      	ldr	r2, [pc, #88]	; (800c998 <TIM_OC3_SetConfig+0xec>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d113      	bne.n	800c96a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	4313      	orrs	r3, r2
 800c968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	621a      	str	r2, [r3, #32]
}
 800c984:	bf00      	nop
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	40012c00 	.word	0x40012c00
 800c994:	40014400 	.word	0x40014400
 800c998:	40014800 	.word	0x40014800

0800c99c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	031b      	lsls	r3, r3, #12
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a14      	ldr	r2, [pc, #80]	; (800ca4c <TIM_OC4_SetConfig+0xb0>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d007      	beq.n	800ca10 <TIM_OC4_SetConfig+0x74>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a13      	ldr	r2, [pc, #76]	; (800ca50 <TIM_OC4_SetConfig+0xb4>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d003      	beq.n	800ca10 <TIM_OC4_SetConfig+0x74>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a12      	ldr	r2, [pc, #72]	; (800ca54 <TIM_OC4_SetConfig+0xb8>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d109      	bne.n	800ca24 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	695b      	ldr	r3, [r3, #20]
 800ca1c:	019b      	lsls	r3, r3, #6
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	621a      	str	r2, [r3, #32]
}
 800ca3e:	bf00      	nop
 800ca40:	371c      	adds	r7, #28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	40012c00 	.word	0x40012c00
 800ca50:	40014400 	.word	0x40014400
 800ca54:	40014800 	.word	0x40014800

0800ca58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	041b      	lsls	r3, r3, #16
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a13      	ldr	r2, [pc, #76]	; (800cafc <TIM_OC5_SetConfig+0xa4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d007      	beq.n	800cac2 <TIM_OC5_SetConfig+0x6a>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a12      	ldr	r2, [pc, #72]	; (800cb00 <TIM_OC5_SetConfig+0xa8>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d003      	beq.n	800cac2 <TIM_OC5_SetConfig+0x6a>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a11      	ldr	r2, [pc, #68]	; (800cb04 <TIM_OC5_SetConfig+0xac>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d109      	bne.n	800cad6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	021b      	lsls	r3, r3, #8
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	621a      	str	r2, [r3, #32]
}
 800caf0:	bf00      	nop
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	40012c00 	.word	0x40012c00
 800cb00:	40014400 	.word	0x40014400
 800cb04:	40014800 	.word	0x40014800

0800cb08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	021b      	lsls	r3, r3, #8
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	051b      	lsls	r3, r3, #20
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a14      	ldr	r2, [pc, #80]	; (800cbb0 <TIM_OC6_SetConfig+0xa8>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d007      	beq.n	800cb74 <TIM_OC6_SetConfig+0x6c>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a13      	ldr	r2, [pc, #76]	; (800cbb4 <TIM_OC6_SetConfig+0xac>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_OC6_SetConfig+0x6c>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a12      	ldr	r2, [pc, #72]	; (800cbb8 <TIM_OC6_SetConfig+0xb0>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d109      	bne.n	800cb88 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	029b      	lsls	r3, r3, #10
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	621a      	str	r2, [r3, #32]
}
 800cba2:	bf00      	nop
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	40012c00 	.word	0x40012c00
 800cbb4:	40014400 	.word	0x40014400
 800cbb8:	40014800 	.word	0x40014800

0800cbbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b087      	sub	sp, #28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f023 030a 	bic.w	r3, r3, #10
 800cbf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	621a      	str	r2, [r3, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	371c      	adds	r7, #28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f023 0210 	bic.w	r2, r3, #16
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	031b      	lsls	r3, r3, #12
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	011b      	lsls	r3, r3, #4
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	621a      	str	r2, [r3, #32]
}
 800cc6e:	bf00      	nop
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b085      	sub	sp, #20
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	f043 0307 	orr.w	r3, r3, #7
 800cca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	609a      	str	r2, [r3, #8]
}
 800cca8:	bf00      	nop
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	021a      	lsls	r2, r3, #8
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	697a      	ldr	r2, [r7, #20]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	609a      	str	r2, [r3, #8]
}
 800cce8:	bf00      	nop
 800ccea:	371c      	adds	r7, #28
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	f003 031f 	and.w	r3, r3, #31
 800cd06:	2201      	movs	r2, #1
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a1a      	ldr	r2, [r3, #32]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	43db      	mvns	r3, r3
 800cd16:	401a      	ands	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6a1a      	ldr	r2, [r3, #32]
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f003 031f 	and.w	r3, r3, #31
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	fa01 f303 	lsl.w	r3, r1, r3
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	621a      	str	r2, [r3, #32]
}
 800cd32:	bf00      	nop
 800cd34:	371c      	adds	r7, #28
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
	...

0800cd40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d101      	bne.n	800cd58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e04a      	b.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a1f      	ldr	r2, [pc, #124]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d108      	bne.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a12      	ldr	r2, [pc, #72]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d004      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdc0:	d10c      	bne.n	800cddc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	40012c00 	.word	0x40012c00

0800ce00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e072      	b.n	800cf34 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7f8 fd98 	bl	8005998 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2201      	movs	r2, #1
 800ce76:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6819      	ldr	r1, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800ce86:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800ce8e:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800ce94:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800ce9a:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800cea0:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800cea6:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800ceac:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	7b1b      	ldrb	r3, [r3, #12]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d107      	bne.n	800cece <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cecc:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced6:	431a      	orrs	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cedc:	431a      	orrs	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	43d2      	mvns	r2, r2
 800cee4:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cefe:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681c      	ldr	r4, [r3, #0]
 800cf08:	4610      	mov	r0, r2
 800cf0a:	f000 f952 	bl	800d1b2 <TSC_extract_groups>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f022 0203 	bic.w	r2, r2, #3
 800cf20:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2203      	movs	r2, #3
 800cf28:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}

0800cf3c <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d101      	bne.n	800cf52 <HAL_TSC_Start_IT+0x16>
 800cf4e:	2302      	movs	r3, #2
 800cf50:	e04b      	b.n	800cfea <HAL_TSC_Start_IT+0xae>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f042 0201 	orr.w	r2, r2, #1
 800cf70:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d108      	bne.n	800cf8e <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f042 0202 	orr.w	r2, r2, #2
 800cf8a:	605a      	str	r2, [r3, #4]
 800cf8c:	e007      	b.n	800cf9e <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f022 0202 	bic.w	r2, r2, #2
 800cf9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2203      	movs	r2, #3
 800cfa4:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a1b      	ldr	r3, [r3, #32]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d108      	bne.n	800cfc0 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0210 	bic.w	r2, r2, #16
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	e007      	b.n	800cfd0 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f042 0210 	orr.w	r2, r2, #16
 800cfce:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f042 0202 	orr.w	r2, r2, #2
 800cfde:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f003 030f 	and.w	r3, r3, #15
 800d00c:	3310      	adds	r3, #16
 800d00e:	2101      	movs	r1, #1
 800d010:	fa01 f303 	lsl.w	r3, r1, r3
 800d014:	401a      	ands	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f003 030f 	and.w	r3, r3, #15
 800d01c:	3310      	adds	r3, #16
 800d01e:	2101      	movs	r1, #1
 800d020:	fa01 f303 	lsl.w	r3, r1, r3
 800d024:	429a      	cmp	r2, r3
 800d026:	bf0c      	ite	eq
 800d028:	2301      	moveq	r3, #1
 800d02a:	2300      	movne	r3, #0
 800d02c:	b2db      	uxtb	r3, r3
}
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	330c      	adds	r3, #12
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	685b      	ldr	r3, [r3, #4]
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 800d05e:	b590      	push	{r4, r7, lr}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d101      	bne.n	800d076 <HAL_TSC_IOConfig+0x18>
 800d072:	2302      	movs	r3, #2
 800d074:	e032      	b.n	800d0dc <HAL_TSC_IOConfig+0x7e>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f022 0202 	bic.w	r2, r2, #2
 800d08c:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	431a      	orrs	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	431a      	orrs	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	43d2      	mvns	r2, r2
 800d0a4:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	6892      	ldr	r2, [r2, #8]
 800d0be:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681c      	ldr	r4, [r3, #0]
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f000 f872 	bl	800d1b2 <TSC_extract_groups>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd90      	pop	{r4, r7, pc}

0800d0e4 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d101      	bne.n	800d0fe <HAL_TSC_IODischarge+0x1a>
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	e01c      	b.n	800d138 <HAL_TSC_IODischarge+0x54>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 800d106:	78fb      	ldrb	r3, [r7, #3]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d108      	bne.n	800d11e <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0210 	bic.w	r2, r2, #16
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	e007      	b.n	800d12e <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0210 	orr.w	r2, r2, #16
 800d12c:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f003 0301 	and.w	r3, r3, #1
 800d156:	2b01      	cmp	r3, #1
 800d158:	d103      	bne.n	800d162 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2201      	movs	r2, #1
 800d160:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	f003 0302 	and.w	r3, r3, #2
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d10b      	bne.n	800d188 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2202      	movs	r2, #2
 800d176:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2203      	movs	r2, #3
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 f80c 	bl	800d19e <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 800d186:	e006      	b.n	800d196 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7f8 f9c5 	bl	8005520 <HAL_TSC_ConvCpltCallback>
}
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b083      	sub	sp, #12
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 800d1a6:	bf00      	nop
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800d1b2:	b480      	push	{r7}
 800d1b4:	b085      	sub	sp, #20
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60bb      	str	r3, [r7, #8]
 800d1c2:	e011      	b.n	800d1e8 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	220f      	movs	r2, #15
 800d1ca:	409a      	lsls	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d006      	beq.n	800d1e2 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60bb      	str	r3, [r7, #8]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b06      	cmp	r3, #6
 800d1ec:	d9ea      	bls.n	800d1c4 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d202:	f3ef 8305 	mrs	r3, IPSR
 800d206:	60bb      	str	r3, [r7, #8]
  return(result);
 800d208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10f      	bne.n	800d22e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d20e:	f3ef 8310 	mrs	r3, PRIMASK
 800d212:	607b      	str	r3, [r7, #4]
  return(result);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d109      	bne.n	800d22e <osKernelInitialize+0x32>
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <osKernelInitialize+0x64>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d109      	bne.n	800d236 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d222:	f3ef 8311 	mrs	r3, BASEPRI
 800d226:	603b      	str	r3, [r7, #0]
  return(result);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d22e:	f06f 0305 	mvn.w	r3, #5
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e00c      	b.n	800d250 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d236:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <osKernelInitialize+0x64>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800d23e:	4b08      	ldr	r3, [pc, #32]	; (800d260 <osKernelInitialize+0x64>)
 800d240:	2201      	movs	r2, #1
 800d242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d244:	2300      	movs	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	e002      	b.n	800d250 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
 800d24e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d250:	68fb      	ldr	r3, [r7, #12]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20000ae4 	.word	0x20000ae4

0800d264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d26a:	f3ef 8305 	mrs	r3, IPSR
 800d26e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10f      	bne.n	800d296 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d276:	f3ef 8310 	mrs	r3, PRIMASK
 800d27a:	607b      	str	r3, [r7, #4]
  return(result);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <osKernelStart+0x32>
 800d282:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <osKernelStart+0x64>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b02      	cmp	r3, #2
 800d288:	d109      	bne.n	800d29e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d28a:	f3ef 8311 	mrs	r3, BASEPRI
 800d28e:	603b      	str	r3, [r7, #0]
  return(result);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <osKernelStart+0x3a>
    stat = osErrorISR;
 800d296:	f06f 0305 	mvn.w	r3, #5
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	e00e      	b.n	800d2bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800d29e:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <osKernelStart+0x64>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d107      	bne.n	800d2b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800d2a6:	4b08      	ldr	r3, [pc, #32]	; (800d2c8 <osKernelStart+0x64>)
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d2ac:	f002 fee2 	bl	8010074 <vTaskStartScheduler>
      stat = osOK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <osKernelStart+0x58>
    } else {
      stat = osError;
 800d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20000ae4 	.word	0x20000ae4

0800d2cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b092      	sub	sp, #72	; 0x48
 800d2d0:	af04      	add	r7, sp, #16
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2dc:	f3ef 8305 	mrs	r3, IPSR
 800d2e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f040 8095 	bne.w	800d414 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d2ee:	623b      	str	r3, [r7, #32]
  return(result);
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f040 808e 	bne.w	800d414 <osThreadNew+0x148>
 800d2f8:	4b49      	ldr	r3, [pc, #292]	; (800d420 <osThreadNew+0x154>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d106      	bne.n	800d30e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d300:	f3ef 8311 	mrs	r3, BASEPRI
 800d304:	61fb      	str	r3, [r7, #28]
  return(result);
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f040 8083 	bne.w	800d414 <osThreadNew+0x148>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d07f      	beq.n	800d414 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800d314:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d318:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800d31a:	2318      	movs	r3, #24
 800d31c:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800d31e:	2300      	movs	r3, #0
 800d320:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800d322:	f107 031b 	add.w	r3, r7, #27
 800d326:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800d328:	f04f 33ff 	mov.w	r3, #4294967295
 800d32c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d045      	beq.n	800d3c0 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <osThreadNew+0x76>
        name = attr->name;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	699b      	ldr	r3, [r3, #24]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d008      	beq.n	800d368 <osThreadNew+0x9c>
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	2b38      	cmp	r3, #56	; 0x38
 800d35a:	d805      	bhi.n	800d368 <osThreadNew+0x9c>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <osThreadNew+0xa0>
        return (NULL);
 800d368:	2300      	movs	r3, #0
 800d36a:	e054      	b.n	800d416 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	089b      	lsrs	r3, r3, #2
 800d37a:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00e      	beq.n	800d3a2 <osThreadNew+0xd6>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	2b63      	cmp	r3, #99	; 0x63
 800d38a:	d90a      	bls.n	800d3a2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <osThreadNew+0xd6>
        mem = 1;
 800d39c:	2301      	movs	r3, #1
 800d39e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3a0:	e010      	b.n	800d3c4 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10c      	bne.n	800d3c4 <osThreadNew+0xf8>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d108      	bne.n	800d3c4 <osThreadNew+0xf8>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d104      	bne.n	800d3c4 <osThreadNew+0xf8>
          mem = 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3be:	e001      	b.n	800d3c4 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d110      	bne.n	800d3ec <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d3d2:	9202      	str	r2, [sp, #8]
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f002 fc79 	bl	800fcd8 <xTaskCreateStatic>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	e013      	b.n	800d414 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d110      	bne.n	800d414 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	f107 0314 	add.w	r3, r7, #20
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f002 fcc0 	bl	800fd8a <xTaskCreate>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d001      	beq.n	800d414 <osThreadNew+0x148>
          hTask = NULL;
 800d410:	2300      	movs	r3, #0
 800d412:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d414:	697b      	ldr	r3, [r7, #20]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3738      	adds	r7, #56	; 0x38
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000ae4 	.word	0x20000ae4

0800d424 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d424:	b580      	push	{r7, lr}
 800d426:	b08a      	sub	sp, #40	; 0x28
 800d428:	af02      	add	r7, sp, #8
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <osThreadFlagsSet+0x1a>
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	da03      	bge.n	800d446 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d43e:	f06f 0303 	mvn.w	r3, #3
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e046      	b.n	800d4d4 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800d446:	f04f 33ff 	mov.w	r3, #4294967295
 800d44a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d44c:	f3ef 8305 	mrs	r3, IPSR
 800d450:	61bb      	str	r3, [r7, #24]
  return(result);
 800d452:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10f      	bne.n	800d478 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d458:	f3ef 8310 	mrs	r3, PRIMASK
 800d45c:	617b      	str	r3, [r7, #20]
  return(result);
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d109      	bne.n	800d478 <osThreadFlagsSet+0x54>
 800d464:	4b1e      	ldr	r3, [pc, #120]	; (800d4e0 <osThreadFlagsSet+0xbc>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d126      	bne.n	800d4ba <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d46c:	f3ef 8311 	mrs	r3, BASEPRI
 800d470:	613b      	str	r3, [r7, #16]
  return(result);
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d020      	beq.n	800d4ba <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800d478:	2300      	movs	r3, #0
 800d47a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d47c:	f107 0308 	add.w	r3, r7, #8
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	2300      	movs	r3, #0
 800d484:	2201      	movs	r2, #1
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	69f8      	ldr	r0, [r7, #28]
 800d48a:	f003 fdbd 	bl	8011008 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d48e:	f107 020c 	add.w	r2, r7, #12
 800d492:	2300      	movs	r3, #0
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	4613      	mov	r3, r2
 800d498:	2200      	movs	r2, #0
 800d49a:	2100      	movs	r1, #0
 800d49c:	69f8      	ldr	r0, [r7, #28]
 800d49e:	f003 fdb3 	bl	8011008 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d015      	beq.n	800d4d4 <osThreadFlagsSet+0xb0>
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <osThreadFlagsSet+0xc0>)
 800d4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	e00c      	b.n	800d4d4 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2201      	movs	r2, #1
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	69f8      	ldr	r0, [r7, #28]
 800d4c2:	f003 fcfd 	bl	8010ec0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d4c6:	f107 030c 	add.w	r3, r7, #12
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	69f8      	ldr	r0, [r7, #28]
 800d4d0:	f003 fcf6 	bl	8010ec0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3720      	adds	r7, #32
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20000ae4 	.word	0x20000ae4
 800d4e4:	e000ed04 	.word	0xe000ed04

0800d4e8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4f0:	f3ef 8305 	mrs	r3, IPSR
 800d4f4:	617b      	str	r3, [r7, #20]
  return(result);
 800d4f6:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10f      	bne.n	800d51c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d500:	613b      	str	r3, [r7, #16]
  return(result);
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d109      	bne.n	800d51c <osThreadFlagsClear+0x34>
 800d508:	4b1e      	ldr	r3, [pc, #120]	; (800d584 <osThreadFlagsClear+0x9c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d109      	bne.n	800d524 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d510:	f3ef 8311 	mrs	r3, BASEPRI
 800d514:	60fb      	str	r3, [r7, #12]
  return(result);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800d51c:	f06f 0305 	mvn.w	r3, #5
 800d520:	61fb      	str	r3, [r7, #28]
 800d522:	e02a      	b.n	800d57a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	da03      	bge.n	800d532 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800d52a:	f06f 0303 	mvn.w	r3, #3
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	e023      	b.n	800d57a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800d532:	f003 facb 	bl	8010acc <xTaskGetCurrentTaskHandle>
 800d536:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800d538:	f107 0308 	add.w	r3, r7, #8
 800d53c:	2200      	movs	r2, #0
 800d53e:	2100      	movs	r1, #0
 800d540:	69b8      	ldr	r0, [r7, #24]
 800d542:	f003 fcbd 	bl	8010ec0 <xTaskGenericNotify>
 800d546:	4603      	mov	r3, r0
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d113      	bne.n	800d574 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	43da      	mvns	r2, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	4013      	ands	r3, r2
 800d558:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	2300      	movs	r3, #0
 800d55e:	2203      	movs	r2, #3
 800d560:	69b8      	ldr	r0, [r7, #24]
 800d562:	f003 fcad 	bl	8010ec0 <xTaskGenericNotify>
 800d566:	4603      	mov	r3, r0
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d006      	beq.n	800d57a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800d56c:	f04f 33ff 	mov.w	r3, #4294967295
 800d570:	61fb      	str	r3, [r7, #28]
 800d572:	e002      	b.n	800d57a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800d574:	f04f 33ff 	mov.w	r3, #4294967295
 800d578:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800d57a:	69fb      	ldr	r3, [r7, #28]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3720      	adds	r7, #32
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	20000ae4 	.word	0x20000ae4

0800d588 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d594:	f3ef 8305 	mrs	r3, IPSR
 800d598:	61fb      	str	r3, [r7, #28]
  return(result);
 800d59a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10f      	bne.n	800d5c0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d5a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d109      	bne.n	800d5c0 <osThreadFlagsWait+0x38>
 800d5ac:	4b3f      	ldr	r3, [pc, #252]	; (800d6ac <osThreadFlagsWait+0x124>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d109      	bne.n	800d5c8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5b4:	f3ef 8311 	mrs	r3, BASEPRI
 800d5b8:	617b      	str	r3, [r7, #20]
  return(result);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d003      	beq.n	800d5c8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800d5c0:	f06f 0305 	mvn.w	r3, #5
 800d5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5c6:	e06b      	b.n	800d6a0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	da03      	bge.n	800d5d6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800d5ce:	f06f 0303 	mvn.w	r3, #3
 800d5d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d4:	e064      	b.n	800d6a0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d5e4:	e001      	b.n	800d5ea <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800d5f2:	f002 fe87 	bl	8010304 <xTaskGetTickCount>
 800d5f6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800d5f8:	f107 0210 	add.w	r2, r7, #16
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d600:	2000      	movs	r0, #0
 800d602:	f003 fc03 	bl	8010e0c <xTaskNotifyWait>
 800d606:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d137      	bne.n	800d67e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800d60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4013      	ands	r3, r2
 800d614:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d61a:	4313      	orrs	r3, r2
 800d61c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00c      	beq.n	800d642 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62c:	4013      	ands	r3, r2
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	429a      	cmp	r2, r3
 800d632:	d032      	beq.n	800d69a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10f      	bne.n	800d65a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800d63a:	f06f 0302 	mvn.w	r3, #2
 800d63e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800d640:	e02e      	b.n	800d6a0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d646:	4013      	ands	r3, r2
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d128      	bne.n	800d69e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d103      	bne.n	800d65a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800d652:	f06f 0302 	mvn.w	r3, #2
 800d656:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800d658:	e022      	b.n	800d6a0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800d65a:	f002 fe53 	bl	8010304 <xTaskGetTickCount>
 800d65e:	4602      	mov	r2, r0
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800d666:	6a3a      	ldr	r2, [r7, #32]
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d902      	bls.n	800d674 <osThreadFlagsWait+0xec>
          tout  = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d672:	e00e      	b.n	800d692 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800d674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d67c:	e009      	b.n	800d692 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d103      	bne.n	800d68c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800d684:	f06f 0302 	mvn.w	r3, #2
 800d688:	637b      	str	r3, [r7, #52]	; 0x34
 800d68a:	e002      	b.n	800d692 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800d68c:	f06f 0301 	mvn.w	r3, #1
 800d690:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1af      	bne.n	800d5f8 <osThreadFlagsWait+0x70>
 800d698:	e002      	b.n	800d6a0 <osThreadFlagsWait+0x118>
            break;
 800d69a:	bf00      	nop
 800d69c:	e000      	b.n	800d6a0 <osThreadFlagsWait+0x118>
            break;
 800d69e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800d6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3738      	adds	r7, #56	; 0x38
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20000ae4 	.word	0x20000ae4

0800d6b0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6b8:	f3ef 8305 	mrs	r3, IPSR
 800d6bc:	613b      	str	r3, [r7, #16]
  return(result);
 800d6be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10f      	bne.n	800d6e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d6c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d109      	bne.n	800d6e4 <osDelay+0x34>
 800d6d0:	4b0d      	ldr	r3, [pc, #52]	; (800d708 <osDelay+0x58>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b02      	cmp	r3, #2
 800d6d6:	d109      	bne.n	800d6ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6d8:	f3ef 8311 	mrs	r3, BASEPRI
 800d6dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <osDelay+0x3c>
    stat = osErrorISR;
 800d6e4:	f06f 0305 	mvn.w	r3, #5
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	e007      	b.n	800d6fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <osDelay+0x4c>
      vTaskDelay(ticks);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f002 fc88 	bl	801000c <vTaskDelay>
    }
  }

  return (stat);
 800d6fc:	697b      	ldr	r3, [r7, #20]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20000ae4 	.word	0x20000ae4

0800d70c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f004 f94f 	bl	80119b8 <pvTimerGetTimerID>
 800d71a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <TimerCallback+0x22>
    callb->func (callb->arg);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	6852      	ldr	r2, [r2, #4]
 800d72a:	4610      	mov	r0, r2
 800d72c:	4798      	blx	r3
  }
}
 800d72e:	bf00      	nop
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
	...

0800d738 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	; 0x38
 800d73c:	af02      	add	r7, sp, #8
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	460b      	mov	r3, r1
 800d746:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800d748:	2300      	movs	r3, #0
 800d74a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d74c:	f3ef 8305 	mrs	r3, IPSR
 800d750:	61bb      	str	r3, [r7, #24]
  return(result);
 800d752:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800d754:	2b00      	cmp	r3, #0
 800d756:	d16a      	bne.n	800d82e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d758:	f3ef 8310 	mrs	r3, PRIMASK
 800d75c:	617b      	str	r3, [r7, #20]
  return(result);
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d164      	bne.n	800d82e <osTimerNew+0xf6>
 800d764:	4b34      	ldr	r3, [pc, #208]	; (800d838 <osTimerNew+0x100>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d105      	bne.n	800d778 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d76c:	f3ef 8311 	mrs	r3, BASEPRI
 800d770:	613b      	str	r3, [r7, #16]
  return(result);
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d15a      	bne.n	800d82e <osTimerNew+0xf6>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d057      	beq.n	800d82e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800d77e:	2008      	movs	r0, #8
 800d780:	f000 fd60 	bl	800e244 <pvPortMalloc>
 800d784:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d050      	beq.n	800d82e <osTimerNew+0xf6>
      callb->func = func;
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800d798:	7afb      	ldrb	r3, [r7, #11]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d102      	bne.n	800d7a4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d7a2:	e001      	b.n	800d7a8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800d7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ac:	623b      	str	r3, [r7, #32]
      name = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01c      	beq.n	800d7f2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <osTimerNew+0x8e>
          name = attr->name;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d006      	beq.n	800d7dc <osTimerNew+0xa4>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	2b2f      	cmp	r3, #47	; 0x2f
 800d7d4:	d902      	bls.n	800d7dc <osTimerNew+0xa4>
          mem = 1;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	623b      	str	r3, [r7, #32]
 800d7da:	e00c      	b.n	800d7f6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d108      	bne.n	800d7f6 <osTimerNew+0xbe>
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d104      	bne.n	800d7f6 <osTimerNew+0xbe>
            mem = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	623b      	str	r3, [r7, #32]
 800d7f0:	e001      	b.n	800d7f6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d10c      	bne.n	800d816 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <osTimerNew+0x104>)
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d80a:	2101      	movs	r1, #1
 800d80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d80e:	f003 fd80 	bl	8011312 <xTimerCreateStatic>
 800d812:	62b8      	str	r0, [r7, #40]	; 0x28
 800d814:	e00b      	b.n	800d82e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d108      	bne.n	800d82e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800d81c:	4b07      	ldr	r3, [pc, #28]	; (800d83c <osTimerNew+0x104>)
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d824:	2101      	movs	r1, #1
 800d826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d828:	f003 fd52 	bl	80112d0 <xTimerCreate>
 800d82c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d830:	4618      	mov	r0, r3
 800d832:	3730      	adds	r7, #48	; 0x30
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	20000ae4 	.word	0x20000ae4
 800d83c:	0800d70d 	.word	0x0800d70d

0800d840 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b08a      	sub	sp, #40	; 0x28
 800d844:	af02      	add	r7, sp, #8
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d84e:	f3ef 8305 	mrs	r3, IPSR
 800d852:	617b      	str	r3, [r7, #20]
  return(result);
 800d854:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10f      	bne.n	800d87a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d85a:	f3ef 8310 	mrs	r3, PRIMASK
 800d85e:	613b      	str	r3, [r7, #16]
  return(result);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <osTimerStart+0x3a>
 800d866:	4b15      	ldr	r3, [pc, #84]	; (800d8bc <osTimerStart+0x7c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d109      	bne.n	800d882 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d86e:	f3ef 8311 	mrs	r3, BASEPRI
 800d872:	60fb      	str	r3, [r7, #12]
  return(result);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <osTimerStart+0x42>
    stat = osErrorISR;
 800d87a:	f06f 0305 	mvn.w	r3, #5
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	e017      	b.n	800d8b2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <osTimerStart+0x50>
    stat = osErrorParameter;
 800d888:	f06f 0303 	mvn.w	r3, #3
 800d88c:	61fb      	str	r3, [r7, #28]
 800d88e:	e010      	b.n	800d8b2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800d890:	2300      	movs	r3, #0
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	2300      	movs	r3, #0
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	2104      	movs	r1, #4
 800d89a:	69b8      	ldr	r0, [r7, #24]
 800d89c:	f003 fda6 	bl	80113ec <xTimerGenericCommand>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d102      	bne.n	800d8ac <osTimerStart+0x6c>
      stat = osOK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	61fb      	str	r3, [r7, #28]
 800d8aa:	e002      	b.n	800d8b2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800d8ac:	f06f 0302 	mvn.w	r3, #2
 800d8b0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800d8b2:	69fb      	ldr	r3, [r7, #28]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3720      	adds	r7, #32
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20000ae4 	.word	0x20000ae4

0800d8c0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b08a      	sub	sp, #40	; 0x28
 800d8c4:	af02      	add	r7, sp, #8
 800d8c6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8cc:	f3ef 8305 	mrs	r3, IPSR
 800d8d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d8d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10f      	bne.n	800d8f8 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d8dc:	613b      	str	r3, [r7, #16]
  return(result);
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d109      	bne.n	800d8f8 <osTimerStop+0x38>
 800d8e4:	4b1a      	ldr	r3, [pc, #104]	; (800d950 <osTimerStop+0x90>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d109      	bne.n	800d900 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8ec:	f3ef 8311 	mrs	r3, BASEPRI
 800d8f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <osTimerStop+0x40>
    stat = osErrorISR;
 800d8f8:	f06f 0305 	mvn.w	r3, #5
 800d8fc:	61fb      	str	r3, [r7, #28]
 800d8fe:	e021      	b.n	800d944 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d103      	bne.n	800d90e <osTimerStop+0x4e>
    stat = osErrorParameter;
 800d906:	f06f 0303 	mvn.w	r3, #3
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	e01a      	b.n	800d944 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800d90e:	69b8      	ldr	r0, [r7, #24]
 800d910:	f004 f82e 	bl	8011970 <xTimerIsTimerActive>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d103      	bne.n	800d922 <osTimerStop+0x62>
      stat = osErrorResource;
 800d91a:	f06f 0302 	mvn.w	r3, #2
 800d91e:	61fb      	str	r3, [r7, #28]
 800d920:	e010      	b.n	800d944 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800d922:	2300      	movs	r3, #0
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	2300      	movs	r3, #0
 800d928:	2200      	movs	r2, #0
 800d92a:	2103      	movs	r1, #3
 800d92c:	69b8      	ldr	r0, [r7, #24]
 800d92e:	f003 fd5d 	bl	80113ec <xTimerGenericCommand>
 800d932:	4603      	mov	r3, r0
 800d934:	2b01      	cmp	r3, #1
 800d936:	d102      	bne.n	800d93e <osTimerStop+0x7e>
        stat = osOK;
 800d938:	2300      	movs	r3, #0
 800d93a:	61fb      	str	r3, [r7, #28]
 800d93c:	e002      	b.n	800d944 <osTimerStop+0x84>
      } else {
        stat = osError;
 800d93e:	f04f 33ff 	mov.w	r3, #4294967295
 800d942:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d944:	69fb      	ldr	r3, [r7, #28]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3720      	adds	r7, #32
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20000ae4 	.word	0x20000ae4

0800d954 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d954:	b580      	push	{r7, lr}
 800d956:	b08a      	sub	sp, #40	; 0x28
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d95c:	2300      	movs	r3, #0
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d960:	f3ef 8305 	mrs	r3, IPSR
 800d964:	613b      	str	r3, [r7, #16]
  return(result);
 800d966:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f040 8085 	bne.w	800da78 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d96e:	f3ef 8310 	mrs	r3, PRIMASK
 800d972:	60fb      	str	r3, [r7, #12]
  return(result);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d17e      	bne.n	800da78 <osMutexNew+0x124>
 800d97a:	4b42      	ldr	r3, [pc, #264]	; (800da84 <osMutexNew+0x130>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d105      	bne.n	800d98e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d982:	f3ef 8311 	mrs	r3, BASEPRI
 800d986:	60bb      	str	r3, [r7, #8]
  return(result);
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d174      	bne.n	800da78 <osMutexNew+0x124>
    if (attr != NULL) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <osMutexNew+0x48>
      type = attr->attr_bits;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	623b      	str	r3, [r7, #32]
 800d99a:	e001      	b.n	800d9a0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d99c:	2300      	movs	r3, #0
 800d99e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <osMutexNew+0x5c>
      rmtx = 1U;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	61fb      	str	r3, [r7, #28]
 800d9ae:	e001      	b.n	800d9b4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	f003 0308 	and.w	r3, r3, #8
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d15c      	bne.n	800da78 <osMutexNew+0x124>
      mem = -1;
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d015      	beq.n	800d9f6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d006      	beq.n	800d9e0 <osMutexNew+0x8c>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	2b4f      	cmp	r3, #79	; 0x4f
 800d9d8:	d902      	bls.n	800d9e0 <osMutexNew+0x8c>
          mem = 1;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	e00c      	b.n	800d9fa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d108      	bne.n	800d9fa <osMutexNew+0xa6>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d104      	bne.n	800d9fa <osMutexNew+0xa6>
            mem = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	61bb      	str	r3, [r7, #24]
 800d9f4:	e001      	b.n	800d9fa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d112      	bne.n	800da26 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	4619      	mov	r1, r3
 800da0c:	2004      	movs	r0, #4
 800da0e:	f001 fa2f 	bl	800ee70 <xQueueCreateMutexStatic>
 800da12:	6278      	str	r0, [r7, #36]	; 0x24
 800da14:	e016      	b.n	800da44 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	4619      	mov	r1, r3
 800da1c:	2001      	movs	r0, #1
 800da1e:	f001 fa27 	bl	800ee70 <xQueueCreateMutexStatic>
 800da22:	6278      	str	r0, [r7, #36]	; 0x24
 800da24:	e00e      	b.n	800da44 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10b      	bne.n	800da44 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d004      	beq.n	800da3c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800da32:	2004      	movs	r0, #4
 800da34:	f001 fa04 	bl	800ee40 <xQueueCreateMutex>
 800da38:	6278      	str	r0, [r7, #36]	; 0x24
 800da3a:	e003      	b.n	800da44 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800da3c:	2001      	movs	r0, #1
 800da3e:	f001 f9ff 	bl	800ee40 <xQueueCreateMutex>
 800da42:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00c      	beq.n	800da64 <osMutexNew+0x110>
        if (attr != NULL) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <osMutexNew+0x104>
          name = attr->name;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	e001      	b.n	800da5c <osMutexNew+0x108>
        } else {
          name = NULL;
 800da58:	2300      	movs	r3, #0
 800da5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800da5c:	6979      	ldr	r1, [r7, #20]
 800da5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da60:	f002 f8b4 	bl	800fbcc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	d006      	beq.n	800da78 <osMutexNew+0x124>
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3728      	adds	r7, #40	; 0x28
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20000ae4 	.word	0x20000ae4

0800da88 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f023 0301 	bic.w	r3, r3, #1
 800da98:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daa6:	f3ef 8305 	mrs	r3, IPSR
 800daaa:	613b      	str	r3, [r7, #16]
  return(result);
 800daac:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10f      	bne.n	800dad2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dab2:	f3ef 8310 	mrs	r3, PRIMASK
 800dab6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d109      	bne.n	800dad2 <osMutexAcquire+0x4a>
 800dabe:	4b20      	ldr	r3, [pc, #128]	; (800db40 <osMutexAcquire+0xb8>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d109      	bne.n	800dada <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dac6:	f3ef 8311 	mrs	r3, BASEPRI
 800daca:	60bb      	str	r3, [r7, #8]
  return(result);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dad2:	f06f 0305 	mvn.w	r3, #5
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	e02c      	b.n	800db34 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d103      	bne.n	800dae8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800dae0:	f06f 0303 	mvn.w	r3, #3
 800dae4:	61fb      	str	r3, [r7, #28]
 800dae6:	e025      	b.n	800db34 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d011      	beq.n	800db12 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	69b8      	ldr	r0, [r7, #24]
 800daf2:	f001 fa0b 	bl	800ef0c <xQueueTakeMutexRecursive>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d01b      	beq.n	800db34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800db02:	f06f 0301 	mvn.w	r3, #1
 800db06:	61fb      	str	r3, [r7, #28]
 800db08:	e014      	b.n	800db34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800db0a:	f06f 0302 	mvn.w	r3, #2
 800db0e:	61fb      	str	r3, [r7, #28]
 800db10:	e010      	b.n	800db34 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	69b8      	ldr	r0, [r7, #24]
 800db16:	f001 fd89 	bl	800f62c <xQueueSemaphoreTake>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d009      	beq.n	800db34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800db26:	f06f 0301 	mvn.w	r3, #1
 800db2a:	61fb      	str	r3, [r7, #28]
 800db2c:	e002      	b.n	800db34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800db2e:	f06f 0302 	mvn.w	r3, #2
 800db32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800db34:	69fb      	ldr	r3, [r7, #28]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3720      	adds	r7, #32
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20000ae4 	.word	0x20000ae4

0800db44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800db44:	b580      	push	{r7, lr}
 800db46:	b088      	sub	sp, #32
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f023 0301 	bic.w	r3, r3, #1
 800db52:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db60:	f3ef 8305 	mrs	r3, IPSR
 800db64:	613b      	str	r3, [r7, #16]
  return(result);
 800db66:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10f      	bne.n	800db8c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db6c:	f3ef 8310 	mrs	r3, PRIMASK
 800db70:	60fb      	str	r3, [r7, #12]
  return(result);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d109      	bne.n	800db8c <osMutexRelease+0x48>
 800db78:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <osMutexRelease+0x9c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	d109      	bne.n	800db94 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db80:	f3ef 8311 	mrs	r3, BASEPRI
 800db84:	60bb      	str	r3, [r7, #8]
  return(result);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <osMutexRelease+0x50>
    stat = osErrorISR;
 800db8c:	f06f 0305 	mvn.w	r3, #5
 800db90:	61fb      	str	r3, [r7, #28]
 800db92:	e01f      	b.n	800dbd4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d103      	bne.n	800dba2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800db9a:	f06f 0303 	mvn.w	r3, #3
 800db9e:	61fb      	str	r3, [r7, #28]
 800dba0:	e018      	b.n	800dbd4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d009      	beq.n	800dbbc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dba8:	69b8      	ldr	r0, [r7, #24]
 800dbaa:	f001 f97c 	bl	800eea6 <xQueueGiveMutexRecursive>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d00f      	beq.n	800dbd4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800dbb4:	f06f 0302 	mvn.w	r3, #2
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	e00b      	b.n	800dbd4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	69b8      	ldr	r0, [r7, #24]
 800dbc4:	f001 fa3e 	bl	800f044 <xQueueGenericSend>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d002      	beq.n	800dbd4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800dbce:	f06f 0302 	mvn.w	r3, #2
 800dbd2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800dbd4:	69fb      	ldr	r3, [r7, #28]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3720      	adds	r7, #32
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20000ae4 	.word	0x20000ae4

0800dbe4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08c      	sub	sp, #48	; 0x30
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf4:	f3ef 8305 	mrs	r3, IPSR
 800dbf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800dbfa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 8088 	bne.w	800dd12 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc02:	f3ef 8310 	mrs	r3, PRIMASK
 800dc06:	617b      	str	r3, [r7, #20]
  return(result);
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f040 8081 	bne.w	800dd12 <osSemaphoreNew+0x12e>
 800dc10:	4b42      	ldr	r3, [pc, #264]	; (800dd1c <osSemaphoreNew+0x138>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d105      	bne.n	800dc24 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc18:	f3ef 8311 	mrs	r3, BASEPRI
 800dc1c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d176      	bne.n	800dd12 <osSemaphoreNew+0x12e>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d073      	beq.n	800dd12 <osSemaphoreNew+0x12e>
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d86f      	bhi.n	800dd12 <osSemaphoreNew+0x12e>
    mem = -1;
 800dc32:	f04f 33ff 	mov.w	r3, #4294967295
 800dc36:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d015      	beq.n	800dc6a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d006      	beq.n	800dc54 <osSemaphoreNew+0x70>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	2b4f      	cmp	r3, #79	; 0x4f
 800dc4c:	d902      	bls.n	800dc54 <osSemaphoreNew+0x70>
        mem = 1;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	623b      	str	r3, [r7, #32]
 800dc52:	e00c      	b.n	800dc6e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d108      	bne.n	800dc6e <osSemaphoreNew+0x8a>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <osSemaphoreNew+0x8a>
          mem = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	623b      	str	r3, [r7, #32]
 800dc68:	e001      	b.n	800dc6e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc74:	d04d      	beq.n	800dd12 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d129      	bne.n	800dcd0 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d10b      	bne.n	800dc9a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689a      	ldr	r2, [r3, #8]
 800dc86:	2303      	movs	r3, #3
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	2001      	movs	r0, #1
 800dc92:	f000 ffe9 	bl	800ec68 <xQueueGenericCreateStatic>
 800dc96:	6278      	str	r0, [r7, #36]	; 0x24
 800dc98:	e005      	b.n	800dca6 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800dc9a:	2203      	movs	r2, #3
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	2001      	movs	r0, #1
 800dca0:	f001 f854 	bl	800ed4c <xQueueGenericCreate>
 800dca4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d022      	beq.n	800dcf2 <osSemaphoreNew+0x10e>
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d01f      	beq.n	800dcf2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcba:	f001 f9c3 	bl	800f044 <xQueueGenericSend>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d016      	beq.n	800dcf2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800dcc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcc6:	f001 fe36 	bl	800f936 <vQueueDelete>
            hSemaphore = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	627b      	str	r3, [r7, #36]	; 0x24
 800dcce:	e010      	b.n	800dcf2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d108      	bne.n	800dce8 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f001 f949 	bl	800ef76 <xQueueCreateCountingSemaphoreStatic>
 800dce4:	6278      	str	r0, [r7, #36]	; 0x24
 800dce6:	e004      	b.n	800dcf2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dce8:	68b9      	ldr	r1, [r7, #8]
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f001 f978 	bl	800efe0 <xQueueCreateCountingSemaphore>
 800dcf0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00c      	beq.n	800dd12 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <osSemaphoreNew+0x122>
          name = attr->name;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	61fb      	str	r3, [r7, #28]
 800dd04:	e001      	b.n	800dd0a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dd0a:	69f9      	ldr	r1, [r7, #28]
 800dd0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd0e:	f001 ff5d 	bl	800fbcc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3728      	adds	r7, #40	; 0x28
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20000ae4 	.word	0x20000ae4

0800dd20 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d103      	bne.n	800dd40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dd38:	f06f 0303 	mvn.w	r3, #3
 800dd3c:	61fb      	str	r3, [r7, #28]
 800dd3e:	e04b      	b.n	800ddd8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd40:	f3ef 8305 	mrs	r3, IPSR
 800dd44:	617b      	str	r3, [r7, #20]
  return(result);
 800dd46:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10f      	bne.n	800dd6c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd50:	613b      	str	r3, [r7, #16]
  return(result);
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d109      	bne.n	800dd6c <osSemaphoreAcquire+0x4c>
 800dd58:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <osSemaphoreAcquire+0xc4>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d128      	bne.n	800ddb2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd60:	f3ef 8311 	mrs	r3, BASEPRI
 800dd64:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d022      	beq.n	800ddb2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800dd72:	f06f 0303 	mvn.w	r3, #3
 800dd76:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dd78:	e02d      	b.n	800ddd6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dd7e:	f107 0308 	add.w	r3, r7, #8
 800dd82:	461a      	mov	r2, r3
 800dd84:	2100      	movs	r1, #0
 800dd86:	69b8      	ldr	r0, [r7, #24]
 800dd88:	f001 fd58 	bl	800f83c <xQueueReceiveFromISR>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d003      	beq.n	800dd9a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800dd92:	f06f 0302 	mvn.w	r3, #2
 800dd96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dd98:	e01d      	b.n	800ddd6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d01a      	beq.n	800ddd6 <osSemaphoreAcquire+0xb6>
 800dda0:	4b11      	ldr	r3, [pc, #68]	; (800dde8 <osSemaphoreAcquire+0xc8>)
 800dda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda6:	601a      	str	r2, [r3, #0]
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ddb0:	e011      	b.n	800ddd6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	69b8      	ldr	r0, [r7, #24]
 800ddb6:	f001 fc39 	bl	800f62c <xQueueSemaphoreTake>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d00b      	beq.n	800ddd8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ddc6:	f06f 0301 	mvn.w	r3, #1
 800ddca:	61fb      	str	r3, [r7, #28]
 800ddcc:	e004      	b.n	800ddd8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ddce:	f06f 0302 	mvn.w	r3, #2
 800ddd2:	61fb      	str	r3, [r7, #28]
 800ddd4:	e000      	b.n	800ddd8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ddd6:	bf00      	nop
      }
    }
  }

  return (stat);
 800ddd8:	69fb      	ldr	r3, [r7, #28]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	20000ae4 	.word	0x20000ae4
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b088      	sub	sp, #32
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d103      	bne.n	800de0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800de02:	f06f 0303 	mvn.w	r3, #3
 800de06:	61fb      	str	r3, [r7, #28]
 800de08:	e03e      	b.n	800de88 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de0a:	f3ef 8305 	mrs	r3, IPSR
 800de0e:	617b      	str	r3, [r7, #20]
  return(result);
 800de10:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10f      	bne.n	800de36 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de16:	f3ef 8310 	mrs	r3, PRIMASK
 800de1a:	613b      	str	r3, [r7, #16]
  return(result);
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d109      	bne.n	800de36 <osSemaphoreRelease+0x4a>
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <osSemaphoreRelease+0xa8>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b02      	cmp	r3, #2
 800de28:	d120      	bne.n	800de6c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de2a:	f3ef 8311 	mrs	r3, BASEPRI
 800de2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d01a      	beq.n	800de6c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800de3a:	f107 0308 	add.w	r3, r7, #8
 800de3e:	4619      	mov	r1, r3
 800de40:	69b8      	ldr	r0, [r7, #24]
 800de42:	f001 fa8d 	bl	800f360 <xQueueGiveFromISR>
 800de46:	4603      	mov	r3, r0
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d003      	beq.n	800de54 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800de4c:	f06f 0302 	mvn.w	r3, #2
 800de50:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800de52:	e018      	b.n	800de86 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d015      	beq.n	800de86 <osSemaphoreRelease+0x9a>
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <osSemaphoreRelease+0xac>)
 800de5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800de6a:	e00c      	b.n	800de86 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800de6c:	2300      	movs	r3, #0
 800de6e:	2200      	movs	r2, #0
 800de70:	2100      	movs	r1, #0
 800de72:	69b8      	ldr	r0, [r7, #24]
 800de74:	f001 f8e6 	bl	800f044 <xQueueGenericSend>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d004      	beq.n	800de88 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800de7e:	f06f 0302 	mvn.w	r3, #2
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	e000      	b.n	800de88 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800de86:	bf00      	nop
    }
  }

  return (stat);
 800de88:	69fb      	ldr	r3, [r7, #28]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3720      	adds	r7, #32
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20000ae4 	.word	0x20000ae4
 800de98:	e000ed04 	.word	0xe000ed04

0800de9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b08c      	sub	sp, #48	; 0x30
 800dea0:	af02      	add	r7, sp, #8
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deac:	f3ef 8305 	mrs	r3, IPSR
 800deb0:	61bb      	str	r3, [r7, #24]
  return(result);
 800deb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d170      	bne.n	800df9a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deb8:	f3ef 8310 	mrs	r3, PRIMASK
 800debc:	617b      	str	r3, [r7, #20]
  return(result);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d16a      	bne.n	800df9a <osMessageQueueNew+0xfe>
 800dec4:	4b37      	ldr	r3, [pc, #220]	; (800dfa4 <osMessageQueueNew+0x108>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d105      	bne.n	800ded8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800decc:	f3ef 8311 	mrs	r3, BASEPRI
 800ded0:	613b      	str	r3, [r7, #16]
  return(result);
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d160      	bne.n	800df9a <osMessageQueueNew+0xfe>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d05d      	beq.n	800df9a <osMessageQueueNew+0xfe>
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d05a      	beq.n	800df9a <osMessageQueueNew+0xfe>
    mem = -1;
 800dee4:	f04f 33ff 	mov.w	r3, #4294967295
 800dee8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d029      	beq.n	800df44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d012      	beq.n	800df1e <osMessageQueueNew+0x82>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	2b4f      	cmp	r3, #79	; 0x4f
 800defe:	d90e      	bls.n	800df1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00a      	beq.n	800df1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	695a      	ldr	r2, [r3, #20]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68b9      	ldr	r1, [r7, #8]
 800df10:	fb01 f303 	mul.w	r3, r1, r3
 800df14:	429a      	cmp	r2, r3
 800df16:	d302      	bcc.n	800df1e <osMessageQueueNew+0x82>
        mem = 1;
 800df18:	2301      	movs	r3, #1
 800df1a:	623b      	str	r3, [r7, #32]
 800df1c:	e014      	b.n	800df48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d110      	bne.n	800df48 <osMessageQueueNew+0xac>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10c      	bne.n	800df48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df32:	2b00      	cmp	r3, #0
 800df34:	d108      	bne.n	800df48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	695b      	ldr	r3, [r3, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d104      	bne.n	800df48 <osMessageQueueNew+0xac>
          mem = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	623b      	str	r3, [r7, #32]
 800df42:	e001      	b.n	800df48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800df44:	2300      	movs	r3, #0
 800df46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d10c      	bne.n	800df68 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691a      	ldr	r2, [r3, #16]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6899      	ldr	r1, [r3, #8]
 800df56:	2300      	movs	r3, #0
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	460b      	mov	r3, r1
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 fe82 	bl	800ec68 <xQueueGenericCreateStatic>
 800df64:	6278      	str	r0, [r7, #36]	; 0x24
 800df66:	e008      	b.n	800df7a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800df6e:	2200      	movs	r2, #0
 800df70:	68b9      	ldr	r1, [r7, #8]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f000 feea 	bl	800ed4c <xQueueGenericCreate>
 800df78:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00c      	beq.n	800df9a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <osMessageQueueNew+0xf2>
        name = attr->name;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	61fb      	str	r3, [r7, #28]
 800df8c:	e001      	b.n	800df92 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800df8e:	2300      	movs	r3, #0
 800df90:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800df92:	69f9      	ldr	r1, [r7, #28]
 800df94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df96:	f001 fe19 	bl	800fbcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3728      	adds	r7, #40	; 0x28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	20000ae4 	.word	0x20000ae4

0800dfa8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08a      	sub	sp, #40	; 0x28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfc0:	f3ef 8305 	mrs	r3, IPSR
 800dfc4:	61fb      	str	r3, [r7, #28]
  return(result);
 800dfc6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10f      	bne.n	800dfec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfcc:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd0:	61bb      	str	r3, [r7, #24]
  return(result);
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d109      	bne.n	800dfec <osMessageQueuePut+0x44>
 800dfd8:	4b2b      	ldr	r3, [pc, #172]	; (800e088 <osMessageQueuePut+0xe0>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d12e      	bne.n	800e03e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfe0:	f3ef 8311 	mrs	r3, BASEPRI
 800dfe4:	617b      	str	r3, [r7, #20]
  return(result);
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d028      	beq.n	800e03e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d005      	beq.n	800dffe <osMessageQueuePut+0x56>
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <osMessageQueuePut+0x56>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dffe:	f06f 0303 	mvn.w	r3, #3
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e004:	e039      	b.n	800e07a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e006:	2300      	movs	r3, #0
 800e008:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e00a:	f107 0210 	add.w	r2, r7, #16
 800e00e:	2300      	movs	r3, #0
 800e010:	68b9      	ldr	r1, [r7, #8]
 800e012:	6a38      	ldr	r0, [r7, #32]
 800e014:	f001 f910 	bl	800f238 <xQueueGenericSendFromISR>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d003      	beq.n	800e026 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e01e:	f06f 0302 	mvn.w	r3, #2
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e024:	e029      	b.n	800e07a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d026      	beq.n	800e07a <osMessageQueuePut+0xd2>
 800e02c:	4b17      	ldr	r3, [pc, #92]	; (800e08c <osMessageQueuePut+0xe4>)
 800e02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e03c:	e01d      	b.n	800e07a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e03e:	6a3b      	ldr	r3, [r7, #32]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <osMessageQueuePut+0xa2>
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d103      	bne.n	800e052 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e04a:	f06f 0303 	mvn.w	r3, #3
 800e04e:	627b      	str	r3, [r7, #36]	; 0x24
 800e050:	e014      	b.n	800e07c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e052:	2300      	movs	r3, #0
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	68b9      	ldr	r1, [r7, #8]
 800e058:	6a38      	ldr	r0, [r7, #32]
 800e05a:	f000 fff3 	bl	800f044 <xQueueGenericSend>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b01      	cmp	r3, #1
 800e062:	d00b      	beq.n	800e07c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e06a:	f06f 0301 	mvn.w	r3, #1
 800e06e:	627b      	str	r3, [r7, #36]	; 0x24
 800e070:	e004      	b.n	800e07c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e072:	f06f 0302 	mvn.w	r3, #2
 800e076:	627b      	str	r3, [r7, #36]	; 0x24
 800e078:	e000      	b.n	800e07c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e07a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3728      	adds	r7, #40	; 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20000ae4 	.word	0x20000ae4
 800e08c:	e000ed04 	.word	0xe000ed04

0800e090 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e090:	b580      	push	{r7, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
 800e09c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0a6:	f3ef 8305 	mrs	r3, IPSR
 800e0aa:	61fb      	str	r3, [r7, #28]
  return(result);
 800e0ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10f      	bne.n	800e0d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d109      	bne.n	800e0d2 <osMessageQueueGet+0x42>
 800e0be:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <osMessageQueueGet+0xdc>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d12e      	bne.n	800e124 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0c6:	f3ef 8311 	mrs	r3, BASEPRI
 800e0ca:	617b      	str	r3, [r7, #20]
  return(result);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d028      	beq.n	800e124 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0d2:	6a3b      	ldr	r3, [r7, #32]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <osMessageQueueGet+0x54>
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <osMessageQueueGet+0x54>
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d003      	beq.n	800e0ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e0e4:	f06f 0303 	mvn.w	r3, #3
 800e0e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0ea:	e038      	b.n	800e15e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e0f0:	f107 0310 	add.w	r3, r7, #16
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	68b9      	ldr	r1, [r7, #8]
 800e0f8:	6a38      	ldr	r0, [r7, #32]
 800e0fa:	f001 fb9f 	bl	800f83c <xQueueReceiveFromISR>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b01      	cmp	r3, #1
 800e102:	d003      	beq.n	800e10c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e104:	f06f 0302 	mvn.w	r3, #2
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e10a:	e028      	b.n	800e15e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d025      	beq.n	800e15e <osMessageQueueGet+0xce>
 800e112:	4b17      	ldr	r3, [pc, #92]	; (800e170 <osMessageQueueGet+0xe0>)
 800e114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e122:	e01c      	b.n	800e15e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <osMessageQueueGet+0xa0>
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d103      	bne.n	800e138 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e130:	f06f 0303 	mvn.w	r3, #3
 800e134:	627b      	str	r3, [r7, #36]	; 0x24
 800e136:	e013      	b.n	800e160 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	6a38      	ldr	r0, [r7, #32]
 800e13e:	f001 f999 	bl	800f474 <xQueueReceive>
 800e142:	4603      	mov	r3, r0
 800e144:	2b01      	cmp	r3, #1
 800e146:	d00b      	beq.n	800e160 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d003      	beq.n	800e156 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e14e:	f06f 0301 	mvn.w	r3, #1
 800e152:	627b      	str	r3, [r7, #36]	; 0x24
 800e154:	e004      	b.n	800e160 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e156:	f06f 0302 	mvn.w	r3, #2
 800e15a:	627b      	str	r3, [r7, #36]	; 0x24
 800e15c:	e000      	b.n	800e160 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e15e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e162:	4618      	mov	r0, r3
 800e164:	3728      	adds	r7, #40	; 0x28
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20000ae4 	.word	0x20000ae4
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800e174:	b580      	push	{r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e180:	f3ef 8305 	mrs	r3, IPSR
 800e184:	617b      	str	r3, [r7, #20]
  return(result);
 800e186:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10f      	bne.n	800e1ac <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e18c:	f3ef 8310 	mrs	r3, PRIMASK
 800e190:	613b      	str	r3, [r7, #16]
  return(result);
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d109      	bne.n	800e1ac <osMessageQueueReset+0x38>
 800e198:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <osMessageQueueReset+0x64>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d109      	bne.n	800e1b4 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1a0:	f3ef 8311 	mrs	r3, BASEPRI
 800e1a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d003      	beq.n	800e1b4 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800e1ac:	f06f 0305 	mvn.w	r3, #5
 800e1b0:	61fb      	str	r3, [r7, #28]
 800e1b2:	e00c      	b.n	800e1ce <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d103      	bne.n	800e1c2 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800e1ba:	f06f 0303 	mvn.w	r3, #3
 800e1be:	61fb      	str	r3, [r7, #28]
 800e1c0:	e005      	b.n	800e1ce <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	69b8      	ldr	r0, [r7, #24]
 800e1ca:	f000 fce5 	bl	800eb98 <xQueueGenericReset>
  }

  return (stat);
 800e1ce:	69fb      	ldr	r3, [r7, #28]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3720      	adds	r7, #32
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	20000ae4 	.word	0x20000ae4

0800e1dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4a07      	ldr	r2, [pc, #28]	; (800e208 <vApplicationGetIdleTaskMemory+0x2c>)
 800e1ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	4a06      	ldr	r2, [pc, #24]	; (800e20c <vApplicationGetIdleTaskMemory+0x30>)
 800e1f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1fa:	601a      	str	r2, [r3, #0]
}
 800e1fc:	bf00      	nop
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr
 800e208:	20000ae8 	.word	0x20000ae8
 800e20c:	20000b4c 	.word	0x20000b4c

0800e210 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4a07      	ldr	r2, [pc, #28]	; (800e23c <vApplicationGetTimerTaskMemory+0x2c>)
 800e220:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	4a06      	ldr	r2, [pc, #24]	; (800e240 <vApplicationGetTimerTaskMemory+0x30>)
 800e226:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e22e:	601a      	str	r2, [r3, #0]
}
 800e230:	bf00      	nop
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	2000134c 	.word	0x2000134c
 800e240:	200013b0 	.word	0x200013b0

0800e244 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08a      	sub	sp, #40	; 0x28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e24c:	2300      	movs	r3, #0
 800e24e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e250:	f001 ff76 	bl	8010140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e254:	4b59      	ldr	r3, [pc, #356]	; (800e3bc <pvPortMalloc+0x178>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e25c:	f000 f910 	bl	800e480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e260:	4b57      	ldr	r3, [pc, #348]	; (800e3c0 <pvPortMalloc+0x17c>)
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4013      	ands	r3, r2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f040 808c 	bne.w	800e386 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d01c      	beq.n	800e2ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e274:	2208      	movs	r2, #8
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4413      	add	r3, r2
 800e27a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f003 0307 	and.w	r3, r3, #7
 800e282:	2b00      	cmp	r3, #0
 800e284:	d013      	beq.n	800e2ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f023 0307 	bic.w	r3, r3, #7
 800e28c:	3308      	adds	r3, #8
 800e28e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	2b00      	cmp	r3, #0
 800e298:	d009      	beq.n	800e2ae <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	617b      	str	r3, [r7, #20]
 800e2ac:	e7fe      	b.n	800e2ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d068      	beq.n	800e386 <pvPortMalloc+0x142>
 800e2b4:	4b43      	ldr	r3, [pc, #268]	; (800e3c4 <pvPortMalloc+0x180>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d863      	bhi.n	800e386 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2be:	4b42      	ldr	r3, [pc, #264]	; (800e3c8 <pvPortMalloc+0x184>)
 800e2c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2c2:	4b41      	ldr	r3, [pc, #260]	; (800e3c8 <pvPortMalloc+0x184>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2c8:	e004      	b.n	800e2d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d903      	bls.n	800e2e6 <pvPortMalloc+0xa2>
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1f1      	bne.n	800e2ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2e6:	4b35      	ldr	r3, [pc, #212]	; (800e3bc <pvPortMalloc+0x178>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d04a      	beq.n	800e386 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2208      	movs	r2, #8
 800e2f6:	4413      	add	r3, r2
 800e2f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	1ad2      	subs	r2, r2, r3
 800e30a:	2308      	movs	r3, #8
 800e30c:	005b      	lsls	r3, r3, #1
 800e30e:	429a      	cmp	r2, r3
 800e310:	d91e      	bls.n	800e350 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4413      	add	r3, r2
 800e318:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	f003 0307 	and.w	r3, r3, #7
 800e320:	2b00      	cmp	r3, #0
 800e322:	d009      	beq.n	800e338 <pvPortMalloc+0xf4>
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	613b      	str	r3, [r7, #16]
 800e336:	e7fe      	b.n	800e336 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e34a:	69b8      	ldr	r0, [r7, #24]
 800e34c:	f000 f8fc 	bl	800e548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e350:	4b1c      	ldr	r3, [pc, #112]	; (800e3c4 <pvPortMalloc+0x180>)
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	4a1a      	ldr	r2, [pc, #104]	; (800e3c4 <pvPortMalloc+0x180>)
 800e35c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e35e:	4b19      	ldr	r3, [pc, #100]	; (800e3c4 <pvPortMalloc+0x180>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b1a      	ldr	r3, [pc, #104]	; (800e3cc <pvPortMalloc+0x188>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d203      	bcs.n	800e372 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e36a:	4b16      	ldr	r3, [pc, #88]	; (800e3c4 <pvPortMalloc+0x180>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a17      	ldr	r2, [pc, #92]	; (800e3cc <pvPortMalloc+0x188>)
 800e370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <pvPortMalloc+0x17c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	431a      	orrs	r2, r3
 800e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e386:	f001 ff21 	bl	80101cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e390:	f7f2 ff76 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	f003 0307 	and.w	r3, r3, #7
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d009      	beq.n	800e3b2 <pvPortMalloc+0x16e>
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	e7fe      	b.n	800e3b0 <pvPortMalloc+0x16c>
	return pvReturn;
 800e3b2:	69fb      	ldr	r3, [r7, #28]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3728      	adds	r7, #40	; 0x28
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20026da8 	.word	0x20026da8
 800e3c0:	20026db4 	.word	0x20026db4
 800e3c4:	20026dac 	.word	0x20026dac
 800e3c8:	20026da0 	.word	0x20026da0
 800e3cc:	20026db0 	.word	0x20026db0

0800e3d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d046      	beq.n	800e470 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3e2:	2308      	movs	r3, #8
 800e3e4:	425b      	negs	r3, r3
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	4b20      	ldr	r3, [pc, #128]	; (800e478 <vPortFree+0xa8>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d109      	bne.n	800e412 <vPortFree+0x42>
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60fb      	str	r3, [r7, #12]
 800e410:	e7fe      	b.n	800e410 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d009      	beq.n	800e42e <vPortFree+0x5e>
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	60bb      	str	r3, [r7, #8]
 800e42c:	e7fe      	b.n	800e42c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b11      	ldr	r3, [pc, #68]	; (800e478 <vPortFree+0xa8>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d019      	beq.n	800e470 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d115      	bne.n	800e470 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	4b0b      	ldr	r3, [pc, #44]	; (800e478 <vPortFree+0xa8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	43db      	mvns	r3, r3
 800e44e:	401a      	ands	r2, r3
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e454:	f001 fe74 	bl	8010140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b07      	ldr	r3, [pc, #28]	; (800e47c <vPortFree+0xac>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4413      	add	r3, r2
 800e462:	4a06      	ldr	r2, [pc, #24]	; (800e47c <vPortFree+0xac>)
 800e464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f000 f86e 	bl	800e548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e46c:	f001 feae 	bl	80101cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e470:	bf00      	nop
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20026db4 	.word	0x20026db4
 800e47c:	20026dac 	.word	0x20026dac

0800e480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e486:	4b29      	ldr	r3, [pc, #164]	; (800e52c <prvHeapInit+0xac>)
 800e488:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e48a:	4b29      	ldr	r3, [pc, #164]	; (800e530 <prvHeapInit+0xb0>)
 800e48c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f003 0307 	and.w	r3, r3, #7
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00c      	beq.n	800e4b2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3307      	adds	r3, #7
 800e49c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f023 0307 	bic.w	r3, r3, #7
 800e4a4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	4a20      	ldr	r2, [pc, #128]	; (800e530 <prvHeapInit+0xb0>)
 800e4ae:	4413      	add	r3, r2
 800e4b0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4b6:	4a1f      	ldr	r2, [pc, #124]	; (800e534 <prvHeapInit+0xb4>)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4bc:	4b1d      	ldr	r3, [pc, #116]	; (800e534 <prvHeapInit+0xb4>)
 800e4be:	2200      	movs	r2, #0
 800e4c0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f023 0307 	bic.w	r3, r3, #7
 800e4d8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	4a16      	ldr	r2, [pc, #88]	; (800e538 <prvHeapInit+0xb8>)
 800e4de:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4e0:	4b15      	ldr	r3, [pc, #84]	; (800e538 <prvHeapInit+0xb8>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4e8:	4b13      	ldr	r3, [pc, #76]	; (800e538 <prvHeapInit+0xb8>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	1ad2      	subs	r2, r2, r3
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <prvHeapInit+0xb8>)
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	4a0c      	ldr	r2, [pc, #48]	; (800e53c <prvHeapInit+0xbc>)
 800e50c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	4a0b      	ldr	r2, [pc, #44]	; (800e540 <prvHeapInit+0xc0>)
 800e514:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e516:	4b0b      	ldr	r3, [pc, #44]	; (800e544 <prvHeapInit+0xc4>)
 800e518:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e51c:	601a      	str	r2, [r3, #0]
}
 800e51e:	bf00      	nop
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	000249f0 	.word	0x000249f0
 800e530:	200023b0 	.word	0x200023b0
 800e534:	20026da0 	.word	0x20026da0
 800e538:	20026da8 	.word	0x20026da8
 800e53c:	20026db0 	.word	0x20026db0
 800e540:	20026dac 	.word	0x20026dac
 800e544:	20026db4 	.word	0x20026db4

0800e548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e550:	4b28      	ldr	r3, [pc, #160]	; (800e5f4 <prvInsertBlockIntoFreeList+0xac>)
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	e002      	b.n	800e55c <prvInsertBlockIntoFreeList+0x14>
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	429a      	cmp	r2, r3
 800e564:	d8f7      	bhi.n	800e556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	4413      	add	r3, r2
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	429a      	cmp	r2, r3
 800e576:	d108      	bne.n	800e58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	441a      	add	r2, r3
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	441a      	add	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d118      	bne.n	800e5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	4b15      	ldr	r3, [pc, #84]	; (800e5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d00d      	beq.n	800e5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	e008      	b.n	800e5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5c6:	4b0c      	ldr	r3, [pc, #48]	; (800e5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	e003      	b.n	800e5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d002      	beq.n	800e5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	20026da0 	.word	0x20026da0
 800e5f8:	20026da8 	.word	0x20026da8

0800e5fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f103 0208 	add.w	r2, r3, #8
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f04f 32ff 	mov.w	r2, #4294967295
 800e614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f103 0208 	add.w	r2, r3, #8
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f103 0208 	add.w	r2, r3, #8
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e64a:	bf00      	nop
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e656:	b480      	push	{r7}
 800e658:	b085      	sub	sp, #20
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	689a      	ldr	r2, [r3, #8]
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	601a      	str	r2, [r3, #0]
}
 800e692:	bf00      	nop
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b085      	sub	sp, #20
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b4:	d103      	bne.n	800e6be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	e00c      	b.n	800e6d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	e002      	b.n	800e6cc <vListInsert+0x2e>
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	60fb      	str	r3, [r7, #12]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d2f6      	bcs.n	800e6c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	685a      	ldr	r2, [r3, #4]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	bf00      	nop
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	6892      	ldr	r2, [r2, #8]
 800e726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	6852      	ldr	r2, [r2, #4]
 800e730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d103      	bne.n	800e744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	1e5a      	subs	r2, r3, #1
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3b04      	subs	r3, #4
 800e774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3b04      	subs	r3, #4
 800e782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f023 0201 	bic.w	r2, r3, #1
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3b04      	subs	r3, #4
 800e792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e794:	4a0c      	ldr	r2, [pc, #48]	; (800e7c8 <pxPortInitialiseStack+0x64>)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3b14      	subs	r3, #20
 800e79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3b04      	subs	r3, #4
 800e7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f06f 0202 	mvn.w	r2, #2
 800e7b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	3b20      	subs	r3, #32
 800e7b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3714      	adds	r7, #20
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	0800e7cd 	.word	0x0800e7cd

0800e7cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7d6:	4b11      	ldr	r3, [pc, #68]	; (800e81c <prvTaskExitError+0x50>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7de:	d009      	beq.n	800e7f4 <prvTaskExitError+0x28>
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	60fb      	str	r3, [r7, #12]
 800e7f2:	e7fe      	b.n	800e7f2 <prvTaskExitError+0x26>
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e806:	bf00      	nop
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0fc      	beq.n	800e808 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e80e:	bf00      	nop
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	20000084 	.word	0x20000084

0800e820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <pxCurrentTCBConst2>)
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	6808      	ldr	r0, [r1, #0]
 800e826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	f380 8809 	msr	PSP, r0
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8811 	msr	BASEPRI, r0
 800e83a:	4770      	bx	lr
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst2>:
 800e840:	20026dc0 	.word	0x20026dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e848:	4808      	ldr	r0, [pc, #32]	; (800e86c <prvPortStartFirstTask+0x24>)
 800e84a:	6800      	ldr	r0, [r0, #0]
 800e84c:	6800      	ldr	r0, [r0, #0]
 800e84e:	f380 8808 	msr	MSP, r0
 800e852:	f04f 0000 	mov.w	r0, #0
 800e856:	f380 8814 	msr	CONTROL, r0
 800e85a:	b662      	cpsie	i
 800e85c:	b661      	cpsie	f
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	df00      	svc	0
 800e868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e86a:	bf00      	nop
 800e86c:	e000ed08 	.word	0xe000ed08

0800e870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e876:	4b44      	ldr	r3, [pc, #272]	; (800e988 <xPortStartScheduler+0x118>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a44      	ldr	r2, [pc, #272]	; (800e98c <xPortStartScheduler+0x11c>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d109      	bne.n	800e894 <xPortStartScheduler+0x24>
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	e7fe      	b.n	800e892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e894:	4b3c      	ldr	r3, [pc, #240]	; (800e988 <xPortStartScheduler+0x118>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a3d      	ldr	r2, [pc, #244]	; (800e990 <xPortStartScheduler+0x120>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d109      	bne.n	800e8b2 <xPortStartScheduler+0x42>
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	e7fe      	b.n	800e8b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8b2:	4b38      	ldr	r3, [pc, #224]	; (800e994 <xPortStartScheduler+0x124>)
 800e8b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	22ff      	movs	r2, #255	; 0xff
 800e8c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8cc:	78fb      	ldrb	r3, [r7, #3]
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b30      	ldr	r3, [pc, #192]	; (800e998 <xPortStartScheduler+0x128>)
 800e8d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8da:	4b30      	ldr	r3, [pc, #192]	; (800e99c <xPortStartScheduler+0x12c>)
 800e8dc:	2207      	movs	r2, #7
 800e8de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8e0:	e009      	b.n	800e8f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e8e2:	4b2e      	ldr	r3, [pc, #184]	; (800e99c <xPortStartScheduler+0x12c>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	4a2c      	ldr	r2, [pc, #176]	; (800e99c <xPortStartScheduler+0x12c>)
 800e8ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	005b      	lsls	r3, r3, #1
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8f6:	78fb      	ldrb	r3, [r7, #3]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fe:	2b80      	cmp	r3, #128	; 0x80
 800e900:	d0ef      	beq.n	800e8e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e902:	4b26      	ldr	r3, [pc, #152]	; (800e99c <xPortStartScheduler+0x12c>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f1c3 0307 	rsb	r3, r3, #7
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	d009      	beq.n	800e922 <xPortStartScheduler+0xb2>
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	60bb      	str	r3, [r7, #8]
 800e920:	e7fe      	b.n	800e920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e922:	4b1e      	ldr	r3, [pc, #120]	; (800e99c <xPortStartScheduler+0x12c>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	021b      	lsls	r3, r3, #8
 800e928:	4a1c      	ldr	r2, [pc, #112]	; (800e99c <xPortStartScheduler+0x12c>)
 800e92a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e92c:	4b1b      	ldr	r3, [pc, #108]	; (800e99c <xPortStartScheduler+0x12c>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e934:	4a19      	ldr	r2, [pc, #100]	; (800e99c <xPortStartScheduler+0x12c>)
 800e936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e940:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <xPortStartScheduler+0x130>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a16      	ldr	r2, [pc, #88]	; (800e9a0 <xPortStartScheduler+0x130>)
 800e946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e94a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e94c:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <xPortStartScheduler+0x130>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a13      	ldr	r2, [pc, #76]	; (800e9a0 <xPortStartScheduler+0x130>)
 800e952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e958:	f7f3 fcf4 	bl	8002344 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e95c:	4b11      	ldr	r3, [pc, #68]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e95e:	2200      	movs	r2, #0
 800e960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e962:	f000 f8d1 	bl	800eb08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e966:	4b10      	ldr	r3, [pc, #64]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a0f      	ldr	r2, [pc, #60]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e96c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e972:	f7ff ff69 	bl	800e848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e976:	f001 fdc1 	bl	80104fc <vTaskSwitchContext>
	prvTaskExitError();
 800e97a:	f7ff ff27 	bl	800e7cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	e000ed00 	.word	0xe000ed00
 800e98c:	410fc271 	.word	0x410fc271
 800e990:	410fc270 	.word	0x410fc270
 800e994:	e000e400 	.word	0xe000e400
 800e998:	20026db8 	.word	0x20026db8
 800e99c:	20026dbc 	.word	0x20026dbc
 800e9a0:	e000ed20 	.word	0xe000ed20
 800e9a4:	20000084 	.word	0x20000084
 800e9a8:	e000ef34 	.word	0xe000ef34

0800e9ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ea00 <vPortEnterCritical+0x54>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	4a0d      	ldr	r2, [pc, #52]	; (800ea00 <vPortEnterCritical+0x54>)
 800e9cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <vPortEnterCritical+0x54>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d10e      	bne.n	800e9f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <vPortEnterCritical+0x58>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d009      	beq.n	800e9f4 <vPortEnterCritical+0x48>
 800e9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	603b      	str	r3, [r7, #0]
 800e9f2:	e7fe      	b.n	800e9f2 <vPortEnterCritical+0x46>
	}
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	20000084 	.word	0x20000084
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea0e:	4b11      	ldr	r3, [pc, #68]	; (800ea54 <vPortExitCritical+0x4c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d109      	bne.n	800ea2a <vPortExitCritical+0x22>
 800ea16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	607b      	str	r3, [r7, #4]
 800ea28:	e7fe      	b.n	800ea28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ea2a:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <vPortExitCritical+0x4c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	4a08      	ldr	r2, [pc, #32]	; (800ea54 <vPortExitCritical+0x4c>)
 800ea32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea34:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <vPortExitCritical+0x4c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d104      	bne.n	800ea46 <vPortExitCritical+0x3e>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea46:	bf00      	nop
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20000084 	.word	0x20000084
	...

0800ea60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea60:	f3ef 8009 	mrs	r0, PSP
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	4b15      	ldr	r3, [pc, #84]	; (800eac0 <pxCurrentTCBConst>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	f01e 0f10 	tst.w	lr, #16
 800ea70:	bf08      	it	eq
 800ea72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7a:	6010      	str	r0, [r2, #0]
 800ea7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea84:	f380 8811 	msr	BASEPRI, r0
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f001 fd34 	bl	80104fc <vTaskSwitchContext>
 800ea94:	f04f 0000 	mov.w	r0, #0
 800ea98:	f380 8811 	msr	BASEPRI, r0
 800ea9c:	bc09      	pop	{r0, r3}
 800ea9e:	6819      	ldr	r1, [r3, #0]
 800eaa0:	6808      	ldr	r0, [r1, #0]
 800eaa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa6:	f01e 0f10 	tst.w	lr, #16
 800eaaa:	bf08      	it	eq
 800eaac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eab0:	f380 8809 	msr	PSP, r0
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst>:
 800eac0:	20026dc0 	.word	0x20026dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eae0:	f001 fc46 	bl	8010370 <xTaskIncrementTick>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaea:	4b06      	ldr	r3, [pc, #24]	; (800eb04 <SysTick_Handler+0x3c>)
 800eaec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	e000ed04 	.word	0xe000ed04

0800eb08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb18 <vPortEnableVFP+0x10>
 800eb0c:	6801      	ldr	r1, [r0, #0]
 800eb0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb12:	6001      	str	r1, [r0, #0]
 800eb14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb16:	bf00      	nop
 800eb18:	e000ed88 	.word	0xe000ed88

0800eb1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb22:	f3ef 8305 	mrs	r3, IPSR
 800eb26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b0f      	cmp	r3, #15
 800eb2c:	d913      	bls.n	800eb56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb2e:	4a16      	ldr	r2, [pc, #88]	; (800eb88 <vPortValidateInterruptPriority+0x6c>)
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4413      	add	r3, r2
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb38:	4b14      	ldr	r3, [pc, #80]	; (800eb8c <vPortValidateInterruptPriority+0x70>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	7afa      	ldrb	r2, [r7, #11]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d209      	bcs.n	800eb56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	607b      	str	r3, [r7, #4]
 800eb54:	e7fe      	b.n	800eb54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb56:	4b0e      	ldr	r3, [pc, #56]	; (800eb90 <vPortValidateInterruptPriority+0x74>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb5e:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <vPortValidateInterruptPriority+0x78>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d909      	bls.n	800eb7a <vPortValidateInterruptPriority+0x5e>
 800eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	603b      	str	r3, [r7, #0]
 800eb78:	e7fe      	b.n	800eb78 <vPortValidateInterruptPriority+0x5c>
	}
 800eb7a:	bf00      	nop
 800eb7c:	3714      	adds	r7, #20
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	e000e3f0 	.word	0xe000e3f0
 800eb8c:	20026db8 	.word	0x20026db8
 800eb90:	e000ed0c 	.word	0xe000ed0c
 800eb94:	20026dbc 	.word	0x20026dbc

0800eb98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d109      	bne.n	800ebc0 <xQueueGenericReset+0x28>
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60bb      	str	r3, [r7, #8]
 800ebbe:	e7fe      	b.n	800ebbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ebc0:	f7ff fef4 	bl	800e9ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebcc:	68f9      	ldr	r1, [r7, #12]
 800ebce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebd0:	fb01 f303 	mul.w	r3, r1, r3
 800ebd4:	441a      	add	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	68f9      	ldr	r1, [r7, #12]
 800ebf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ebf6:	fb01 f303 	mul.w	r3, r1, r3
 800ebfa:	441a      	add	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	22ff      	movs	r2, #255	; 0xff
 800ec04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	22ff      	movs	r2, #255	; 0xff
 800ec0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d114      	bne.n	800ec40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d01a      	beq.n	800ec54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3310      	adds	r3, #16
 800ec22:	4618      	mov	r0, r3
 800ec24:	f001 fd40 	bl	80106a8 <xTaskRemoveFromEventList>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d012      	beq.n	800ec54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	; (800ec64 <xQueueGenericReset+0xcc>)
 800ec30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	e009      	b.n	800ec54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	3310      	adds	r3, #16
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff fcd9 	bl	800e5fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3324      	adds	r3, #36	; 0x24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff fcd4 	bl	800e5fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec54:	f7ff fed8 	bl	800ea08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec58:	2301      	movs	r3, #1
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08e      	sub	sp, #56	; 0x38
 800ec6c:	af02      	add	r7, sp, #8
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
 800ec74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d109      	bne.n	800ec90 <xQueueGenericCreateStatic+0x28>
 800ec7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec80:	f383 8811 	msr	BASEPRI, r3
 800ec84:	f3bf 8f6f 	isb	sy
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec8e:	e7fe      	b.n	800ec8e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d109      	bne.n	800ecaa <xQueueGenericCreateStatic+0x42>
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	627b      	str	r3, [r7, #36]	; 0x24
 800eca8:	e7fe      	b.n	800eca8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <xQueueGenericCreateStatic+0x4e>
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <xQueueGenericCreateStatic+0x52>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e000      	b.n	800ecbc <xQueueGenericCreateStatic+0x54>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d109      	bne.n	800ecd4 <xQueueGenericCreateStatic+0x6c>
 800ecc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	623b      	str	r3, [r7, #32]
 800ecd2:	e7fe      	b.n	800ecd2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d102      	bne.n	800ece0 <xQueueGenericCreateStatic+0x78>
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <xQueueGenericCreateStatic+0x7c>
 800ece0:	2301      	movs	r3, #1
 800ece2:	e000      	b.n	800ece6 <xQueueGenericCreateStatic+0x7e>
 800ece4:	2300      	movs	r3, #0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d109      	bne.n	800ecfe <xQueueGenericCreateStatic+0x96>
 800ecea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecee:	f383 8811 	msr	BASEPRI, r3
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	f3bf 8f4f 	dsb	sy
 800ecfa:	61fb      	str	r3, [r7, #28]
 800ecfc:	e7fe      	b.n	800ecfc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ecfe:	2350      	movs	r3, #80	; 0x50
 800ed00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	2b50      	cmp	r3, #80	; 0x50
 800ed06:	d009      	beq.n	800ed1c <xQueueGenericCreateStatic+0xb4>
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	61bb      	str	r3, [r7, #24]
 800ed1a:	e7fe      	b.n	800ed1a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00d      	beq.n	800ed42 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ed2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	4613      	mov	r3, r2
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	68b9      	ldr	r1, [r7, #8]
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f000 f842 	bl	800edc6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3730      	adds	r7, #48	; 0x30
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b08a      	sub	sp, #40	; 0x28
 800ed50:	af02      	add	r7, sp, #8
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	4613      	mov	r3, r2
 800ed58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d109      	bne.n	800ed74 <xQueueGenericCreate+0x28>
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	613b      	str	r3, [r7, #16]
 800ed72:	e7fe      	b.n	800ed72 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d102      	bne.n	800ed80 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	61fb      	str	r3, [r7, #28]
 800ed7e:	e004      	b.n	800ed8a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	fb02 f303 	mul.w	r3, r2, r3
 800ed88:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	3350      	adds	r3, #80	; 0x50
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff fa58 	bl	800e244 <pvPortMalloc>
 800ed94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00f      	beq.n	800edbc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	3350      	adds	r3, #80	; 0x50
 800eda0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edaa:	79fa      	ldrb	r2, [r7, #7]
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	68b9      	ldr	r1, [r7, #8]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f000 f805 	bl	800edc6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800edbc:	69bb      	ldr	r3, [r7, #24]
	}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3720      	adds	r7, #32
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	60f8      	str	r0, [r7, #12]
 800edce:	60b9      	str	r1, [r7, #8]
 800edd0:	607a      	str	r2, [r7, #4]
 800edd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d103      	bne.n	800ede2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	601a      	str	r2, [r3, #0]
 800ede0:	e002      	b.n	800ede8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800edf4:	2101      	movs	r1, #1
 800edf6:	69b8      	ldr	r0, [r7, #24]
 800edf8:	f7ff fece 	bl	800eb98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	78fa      	ldrb	r2, [r7, #3]
 800ee00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee04:	bf00      	nop
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00e      	beq.n	800ee38 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	2200      	movs	r2, #0
 800ee30:	2100      	movs	r1, #0
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 f906 	bl	800f044 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	617b      	str	r3, [r7, #20]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6939      	ldr	r1, [r7, #16]
 800ee58:	6978      	ldr	r0, [r7, #20]
 800ee5a:	f7ff ff77 	bl	800ed4c <xQueueGenericCreate>
 800ee5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f7ff ffd3 	bl	800ee0c <prvInitialiseMutex>

		return pxNewQueue;
 800ee66:	68fb      	ldr	r3, [r7, #12]
	}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3718      	adds	r7, #24
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af02      	add	r7, sp, #8
 800ee76:	4603      	mov	r3, r0
 800ee78:	6039      	str	r1, [r7, #0]
 800ee7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	2300      	movs	r3, #0
 800ee82:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ee84:	79fb      	ldrb	r3, [r7, #7]
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	6939      	ldr	r1, [r7, #16]
 800ee8e:	6978      	ldr	r0, [r7, #20]
 800ee90:	f7ff feea 	bl	800ec68 <xQueueGenericCreateStatic>
 800ee94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7ff ffb8 	bl	800ee0c <prvInitialiseMutex>

		return pxNewQueue;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3718      	adds	r7, #24
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800eea6:	b590      	push	{r4, r7, lr}
 800eea8:	b087      	sub	sp, #28
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d109      	bne.n	800eecc <xQueueGiveMutexRecursive+0x26>
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	e7fe      	b.n	800eeca <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	685c      	ldr	r4, [r3, #4]
 800eed0:	f001 fdfc 	bl	8010acc <xTaskGetCurrentTaskHandle>
 800eed4:	4603      	mov	r3, r0
 800eed6:	429c      	cmp	r4, r3
 800eed8:	d111      	bne.n	800eefe <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	1e5a      	subs	r2, r3, #1
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d105      	bne.n	800eef8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800eeec:	2300      	movs	r3, #0
 800eeee:	2200      	movs	r2, #0
 800eef0:	2100      	movs	r1, #0
 800eef2:	6938      	ldr	r0, [r7, #16]
 800eef4:	f000 f8a6 	bl	800f044 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800eef8:	2301      	movs	r3, #1
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	e001      	b.n	800ef02 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ef02:	697b      	ldr	r3, [r7, #20]
	}
 800ef04:	4618      	mov	r0, r3
 800ef06:	371c      	adds	r7, #28
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd90      	pop	{r4, r7, pc}

0800ef0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ef0c:	b590      	push	{r4, r7, lr}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d109      	bne.n	800ef34 <xQueueTakeMutexRecursive+0x28>
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	60fb      	str	r3, [r7, #12]
 800ef32:	e7fe      	b.n	800ef32 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	685c      	ldr	r4, [r3, #4]
 800ef38:	f001 fdc8 	bl	8010acc <xTaskGetCurrentTaskHandle>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	429c      	cmp	r4, r3
 800ef40:	d107      	bne.n	800ef52 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e00c      	b.n	800ef6c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6938      	ldr	r0, [r7, #16]
 800ef56:	f000 fb69 	bl	800f62c <xQueueSemaphoreTake>
 800ef5a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d004      	beq.n	800ef6c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	1c5a      	adds	r2, r3, #1
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ef6c:	697b      	ldr	r3, [r7, #20]
	}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	371c      	adds	r7, #28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd90      	pop	{r4, r7, pc}

0800ef76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b08a      	sub	sp, #40	; 0x28
 800ef7a:	af02      	add	r7, sp, #8
 800ef7c:	60f8      	str	r0, [r7, #12]
 800ef7e:	60b9      	str	r1, [r7, #8]
 800ef80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d109      	bne.n	800ef9c <xQueueCreateCountingSemaphoreStatic+0x26>
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	61bb      	str	r3, [r7, #24]
 800ef9a:	e7fe      	b.n	800ef9a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d909      	bls.n	800efb8 <xQueueCreateCountingSemaphoreStatic+0x42>
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	617b      	str	r3, [r7, #20]
 800efb6:	e7fe      	b.n	800efb6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800efb8:	2302      	movs	r3, #2
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	2100      	movs	r1, #0
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f7ff fe50 	bl	800ec68 <xQueueGenericCreateStatic>
 800efc8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800efd6:	69fb      	ldr	r3, [r7, #28]
	}
 800efd8:	4618      	mov	r0, r3
 800efda:	3720      	adds	r7, #32
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d109      	bne.n	800f004 <xQueueCreateCountingSemaphore+0x24>
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	613b      	str	r3, [r7, #16]
 800f002:	e7fe      	b.n	800f002 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d909      	bls.n	800f020 <xQueueCreateCountingSemaphore+0x40>
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	60fb      	str	r3, [r7, #12]
 800f01e:	e7fe      	b.n	800f01e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f020:	2202      	movs	r2, #2
 800f022:	2100      	movs	r1, #0
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff fe91 	bl	800ed4c <xQueueGenericCreate>
 800f02a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d002      	beq.n	800f038 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f038:	697b      	ldr	r3, [r7, #20]
	}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
	...

0800f044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08e      	sub	sp, #56	; 0x38
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f052:	2300      	movs	r3, #0
 800f054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d109      	bne.n	800f074 <xQueueGenericSend+0x30>
 800f060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	62bb      	str	r3, [r7, #40]	; 0x28
 800f072:	e7fe      	b.n	800f072 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d103      	bne.n	800f082 <xQueueGenericSend+0x3e>
 800f07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <xQueueGenericSend+0x42>
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <xQueueGenericSend+0x44>
 800f086:	2300      	movs	r3, #0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d109      	bne.n	800f0a0 <xQueueGenericSend+0x5c>
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	627b      	str	r3, [r7, #36]	; 0x24
 800f09e:	e7fe      	b.n	800f09e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d103      	bne.n	800f0ae <xQueueGenericSend+0x6a>
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d101      	bne.n	800f0b2 <xQueueGenericSend+0x6e>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <xQueueGenericSend+0x70>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d109      	bne.n	800f0cc <xQueueGenericSend+0x88>
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	623b      	str	r3, [r7, #32]
 800f0ca:	e7fe      	b.n	800f0ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0cc:	f001 fd0e 	bl	8010aec <xTaskGetSchedulerState>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <xQueueGenericSend+0x98>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <xQueueGenericSend+0x9c>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <xQueueGenericSend+0x9e>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d109      	bne.n	800f0fa <xQueueGenericSend+0xb6>
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	61fb      	str	r3, [r7, #28]
 800f0f8:	e7fe      	b.n	800f0f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0fa:	f7ff fc57 	bl	800e9ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f106:	429a      	cmp	r2, r3
 800f108:	d302      	bcc.n	800f110 <xQueueGenericSend+0xcc>
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d129      	bne.n	800f164 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	68b9      	ldr	r1, [r7, #8]
 800f114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f116:	f000 fc48 	bl	800f9aa <prvCopyDataToQueue>
 800f11a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	d010      	beq.n	800f146 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	3324      	adds	r3, #36	; 0x24
 800f128:	4618      	mov	r0, r3
 800f12a:	f001 fabd 	bl	80106a8 <xTaskRemoveFromEventList>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d013      	beq.n	800f15c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f134:	4b3f      	ldr	r3, [pc, #252]	; (800f234 <xQueueGenericSend+0x1f0>)
 800f136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f13a:	601a      	str	r2, [r3, #0]
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	e00a      	b.n	800f15c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d007      	beq.n	800f15c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f14c:	4b39      	ldr	r3, [pc, #228]	; (800f234 <xQueueGenericSend+0x1f0>)
 800f14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f15c:	f7ff fc54 	bl	800ea08 <vPortExitCritical>
				return pdPASS;
 800f160:	2301      	movs	r3, #1
 800f162:	e063      	b.n	800f22c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d103      	bne.n	800f172 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f16a:	f7ff fc4d 	bl	800ea08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	e05c      	b.n	800f22c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f174:	2b00      	cmp	r3, #0
 800f176:	d106      	bne.n	800f186 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f178:	f107 0314 	add.w	r3, r7, #20
 800f17c:	4618      	mov	r0, r3
 800f17e:	f001 faf7 	bl	8010770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f182:	2301      	movs	r3, #1
 800f184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f186:	f7ff fc3f 	bl	800ea08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f18a:	f000 ffd9 	bl	8010140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f18e:	f7ff fc0d 	bl	800e9ac <vPortEnterCritical>
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19e:	d103      	bne.n	800f1a8 <xQueueGenericSend+0x164>
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1ae:	b25b      	sxtb	r3, r3
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b4:	d103      	bne.n	800f1be <xQueueGenericSend+0x17a>
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1be:	f7ff fc23 	bl	800ea08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1c2:	1d3a      	adds	r2, r7, #4
 800f1c4:	f107 0314 	add.w	r3, r7, #20
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f001 fae6 	bl	801079c <xTaskCheckForTimeOut>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d124      	bne.n	800f220 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f1d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1d8:	f000 fcdf 	bl	800fb9a <prvIsQueueFull>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d018      	beq.n	800f214 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	3310      	adds	r3, #16
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f001 fa0e 	bl	801060c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1f2:	f000 fc6a 	bl	800faca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f1f6:	f000 ffe9 	bl	80101cc <xTaskResumeAll>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f47f af7c 	bne.w	800f0fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f202:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <xQueueGenericSend+0x1f0>)
 800f204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	e772      	b.n	800f0fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f216:	f000 fc58 	bl	800faca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f21a:	f000 ffd7 	bl	80101cc <xTaskResumeAll>
 800f21e:	e76c      	b.n	800f0fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f222:	f000 fc52 	bl	800faca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f226:	f000 ffd1 	bl	80101cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f22a:	2300      	movs	r3, #0
		}
	}
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3738      	adds	r7, #56	; 0x38
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	e000ed04 	.word	0xe000ed04

0800f238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b08e      	sub	sp, #56	; 0x38
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d109      	bne.n	800f264 <xQueueGenericSendFromISR+0x2c>
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	627b      	str	r3, [r7, #36]	; 0x24
 800f262:	e7fe      	b.n	800f262 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d103      	bne.n	800f272 <xQueueGenericSendFromISR+0x3a>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d101      	bne.n	800f276 <xQueueGenericSendFromISR+0x3e>
 800f272:	2301      	movs	r3, #1
 800f274:	e000      	b.n	800f278 <xQueueGenericSendFromISR+0x40>
 800f276:	2300      	movs	r3, #0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d109      	bne.n	800f290 <xQueueGenericSendFromISR+0x58>
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	623b      	str	r3, [r7, #32]
 800f28e:	e7fe      	b.n	800f28e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d103      	bne.n	800f29e <xQueueGenericSendFromISR+0x66>
 800f296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <xQueueGenericSendFromISR+0x6a>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e000      	b.n	800f2a4 <xQueueGenericSendFromISR+0x6c>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d109      	bne.n	800f2bc <xQueueGenericSendFromISR+0x84>
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	61fb      	str	r3, [r7, #28]
 800f2ba:	e7fe      	b.n	800f2ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2bc:	f7ff fc2e 	bl	800eb1c <vPortValidateInterruptPriority>
	__asm volatile
 800f2c0:	f3ef 8211 	mrs	r2, BASEPRI
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	61ba      	str	r2, [r7, #24]
 800f2d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d302      	bcc.n	800f2ee <xQueueGenericSendFromISR+0xb6>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d12c      	bne.n	800f348 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	68b9      	ldr	r1, [r7, #8]
 800f2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2fe:	f000 fb54 	bl	800f9aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f302:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f30a:	d112      	bne.n	800f332 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f310:	2b00      	cmp	r3, #0
 800f312:	d016      	beq.n	800f342 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	3324      	adds	r3, #36	; 0x24
 800f318:	4618      	mov	r0, r3
 800f31a:	f001 f9c5 	bl	80106a8 <xTaskRemoveFromEventList>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00e      	beq.n	800f342 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00b      	beq.n	800f342 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	e007      	b.n	800f342 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f336:	3301      	adds	r3, #1
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	b25a      	sxtb	r2, r3
 800f33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f342:	2301      	movs	r3, #1
 800f344:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f346:	e001      	b.n	800f34c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	637b      	str	r3, [r7, #52]	; 0x34
 800f34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3738      	adds	r7, #56	; 0x38
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b08e      	sub	sp, #56	; 0x38
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	623b      	str	r3, [r7, #32]
 800f386:	e7fe      	b.n	800f386 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d009      	beq.n	800f3a4 <xQueueGiveFromISR+0x44>
 800f390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	61fb      	str	r3, [r7, #28]
 800f3a2:	e7fe      	b.n	800f3a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d103      	bne.n	800f3b4 <xQueueGiveFromISR+0x54>
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <xQueueGiveFromISR+0x58>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e000      	b.n	800f3ba <xQueueGiveFromISR+0x5a>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d109      	bne.n	800f3d2 <xQueueGiveFromISR+0x72>
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	61bb      	str	r3, [r7, #24]
 800f3d0:	e7fe      	b.n	800f3d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f3d2:	f7ff fba3 	bl	800eb1c <vPortValidateInterruptPriority>
	__asm volatile
 800f3d6:	f3ef 8211 	mrs	r2, BASEPRI
 800f3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	617a      	str	r2, [r7, #20]
 800f3ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f3ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d22b      	bcs.n	800f45a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f412:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f41c:	d112      	bne.n	800f444 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f422:	2b00      	cmp	r3, #0
 800f424:	d016      	beq.n	800f454 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	3324      	adds	r3, #36	; 0x24
 800f42a:	4618      	mov	r0, r3
 800f42c:	f001 f93c 	bl	80106a8 <xTaskRemoveFromEventList>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00e      	beq.n	800f454 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00b      	beq.n	800f454 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	e007      	b.n	800f454 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f448:	3301      	adds	r3, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	b25a      	sxtb	r2, r3
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f454:	2301      	movs	r3, #1
 800f456:	637b      	str	r3, [r7, #52]	; 0x34
 800f458:	e001      	b.n	800f45e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	637b      	str	r3, [r7, #52]	; 0x34
 800f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f460:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3738      	adds	r7, #56	; 0x38
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08c      	sub	sp, #48	; 0x30
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f480:	2300      	movs	r3, #0
 800f482:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <xQueueReceive+0x2e>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	623b      	str	r3, [r7, #32]
 800f4a0:	e7fe      	b.n	800f4a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d103      	bne.n	800f4b0 <xQueueReceive+0x3c>
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <xQueueReceive+0x40>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e000      	b.n	800f4b6 <xQueueReceive+0x42>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <xQueueReceive+0x5a>
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	61fb      	str	r3, [r7, #28]
 800f4cc:	e7fe      	b.n	800f4cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4ce:	f001 fb0d 	bl	8010aec <xTaskGetSchedulerState>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <xQueueReceive+0x6a>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d101      	bne.n	800f4e2 <xQueueReceive+0x6e>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e000      	b.n	800f4e4 <xQueueReceive+0x70>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d109      	bne.n	800f4fc <xQueueReceive+0x88>
 800f4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	61bb      	str	r3, [r7, #24]
 800f4fa:	e7fe      	b.n	800f4fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4fc:	f7ff fa56 	bl	800e9ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f504:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01f      	beq.n	800f54c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f50c:	68b9      	ldr	r1, [r7, #8]
 800f50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f510:	f000 fab5 	bl	800fa7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	1e5a      	subs	r2, r3, #1
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00f      	beq.n	800f544 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f526:	3310      	adds	r3, #16
 800f528:	4618      	mov	r0, r3
 800f52a:	f001 f8bd 	bl	80106a8 <xTaskRemoveFromEventList>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d007      	beq.n	800f544 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f534:	4b3c      	ldr	r3, [pc, #240]	; (800f628 <xQueueReceive+0x1b4>)
 800f536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f544:	f7ff fa60 	bl	800ea08 <vPortExitCritical>
				return pdPASS;
 800f548:	2301      	movs	r3, #1
 800f54a:	e069      	b.n	800f620 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d103      	bne.n	800f55a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f552:	f7ff fa59 	bl	800ea08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f556:	2300      	movs	r3, #0
 800f558:	e062      	b.n	800f620 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d106      	bne.n	800f56e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f560:	f107 0310 	add.w	r3, r7, #16
 800f564:	4618      	mov	r0, r3
 800f566:	f001 f903 	bl	8010770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f56a:	2301      	movs	r3, #1
 800f56c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f56e:	f7ff fa4b 	bl	800ea08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f572:	f000 fde5 	bl	8010140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f576:	f7ff fa19 	bl	800e9ac <vPortEnterCritical>
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f580:	b25b      	sxtb	r3, r3
 800f582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f586:	d103      	bne.n	800f590 <xQueueReceive+0x11c>
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f596:	b25b      	sxtb	r3, r3
 800f598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59c:	d103      	bne.n	800f5a6 <xQueueReceive+0x132>
 800f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5a6:	f7ff fa2f 	bl	800ea08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5aa:	1d3a      	adds	r2, r7, #4
 800f5ac:	f107 0310 	add.w	r3, r7, #16
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f001 f8f2 	bl	801079c <xTaskCheckForTimeOut>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d123      	bne.n	800f606 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5c0:	f000 fad5 	bl	800fb6e <prvIsQueueEmpty>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d017      	beq.n	800f5fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	3324      	adds	r3, #36	; 0x24
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f001 f81a 	bl	801060c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5da:	f000 fa76 	bl	800faca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f5de:	f000 fdf5 	bl	80101cc <xTaskResumeAll>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d189      	bne.n	800f4fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f5e8:	4b0f      	ldr	r3, [pc, #60]	; (800f628 <xQueueReceive+0x1b4>)
 800f5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	f3bf 8f6f 	isb	sy
 800f5f8:	e780      	b.n	800f4fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5fc:	f000 fa65 	bl	800faca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f600:	f000 fde4 	bl	80101cc <xTaskResumeAll>
 800f604:	e77a      	b.n	800f4fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f608:	f000 fa5f 	bl	800faca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f60c:	f000 fdde 	bl	80101cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f612:	f000 faac 	bl	800fb6e <prvIsQueueEmpty>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f43f af6f 	beq.w	800f4fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f61e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f620:	4618      	mov	r0, r3
 800f622:	3730      	adds	r7, #48	; 0x30
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	e000ed04 	.word	0xe000ed04

0800f62c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08e      	sub	sp, #56	; 0x38
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f636:	2300      	movs	r3, #0
 800f638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f63e:	2300      	movs	r3, #0
 800f640:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	2b00      	cmp	r3, #0
 800f646:	d109      	bne.n	800f65c <xQueueSemaphoreTake+0x30>
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	623b      	str	r3, [r7, #32]
 800f65a:	e7fe      	b.n	800f65a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f660:	2b00      	cmp	r3, #0
 800f662:	d009      	beq.n	800f678 <xQueueSemaphoreTake+0x4c>
 800f664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f668:	f383 8811 	msr	BASEPRI, r3
 800f66c:	f3bf 8f6f 	isb	sy
 800f670:	f3bf 8f4f 	dsb	sy
 800f674:	61fb      	str	r3, [r7, #28]
 800f676:	e7fe      	b.n	800f676 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f678:	f001 fa38 	bl	8010aec <xTaskGetSchedulerState>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d102      	bne.n	800f688 <xQueueSemaphoreTake+0x5c>
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d101      	bne.n	800f68c <xQueueSemaphoreTake+0x60>
 800f688:	2301      	movs	r3, #1
 800f68a:	e000      	b.n	800f68e <xQueueSemaphoreTake+0x62>
 800f68c:	2300      	movs	r3, #0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d109      	bne.n	800f6a6 <xQueueSemaphoreTake+0x7a>
 800f692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f696:	f383 8811 	msr	BASEPRI, r3
 800f69a:	f3bf 8f6f 	isb	sy
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	61bb      	str	r3, [r7, #24]
 800f6a4:	e7fe      	b.n	800f6a4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6a6:	f7ff f981 	bl	800e9ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d024      	beq.n	800f700 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b8:	1e5a      	subs	r2, r3, #1
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d104      	bne.n	800f6d0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f6c6:	f001 fb8d 	bl	8010de4 <pvTaskIncrementMutexHeldCount>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00f      	beq.n	800f6f8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	3310      	adds	r3, #16
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 ffe3 	bl	80106a8 <xTaskRemoveFromEventList>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d007      	beq.n	800f6f8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f6e8:	4b53      	ldr	r3, [pc, #332]	; (800f838 <xQueueSemaphoreTake+0x20c>)
 800f6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f6f8:	f7ff f986 	bl	800ea08 <vPortExitCritical>
				return pdPASS;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e096      	b.n	800f82e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d110      	bne.n	800f728 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d009      	beq.n	800f720 <xQueueSemaphoreTake+0xf4>
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	e7fe      	b.n	800f71e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f720:	f7ff f972 	bl	800ea08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f724:	2300      	movs	r3, #0
 800f726:	e082      	b.n	800f82e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f72e:	f107 030c 	add.w	r3, r7, #12
 800f732:	4618      	mov	r0, r3
 800f734:	f001 f81c 	bl	8010770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f738:	2301      	movs	r3, #1
 800f73a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f73c:	f7ff f964 	bl	800ea08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f740:	f000 fcfe 	bl	8010140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f744:	f7ff f932 	bl	800e9ac <vPortEnterCritical>
 800f748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f74e:	b25b      	sxtb	r3, r3
 800f750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f754:	d103      	bne.n	800f75e <xQueueSemaphoreTake+0x132>
 800f756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f758:	2200      	movs	r2, #0
 800f75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f764:	b25b      	sxtb	r3, r3
 800f766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76a:	d103      	bne.n	800f774 <xQueueSemaphoreTake+0x148>
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	2200      	movs	r2, #0
 800f770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f774:	f7ff f948 	bl	800ea08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f778:	463a      	mov	r2, r7
 800f77a:	f107 030c 	add.w	r3, r7, #12
 800f77e:	4611      	mov	r1, r2
 800f780:	4618      	mov	r0, r3
 800f782:	f001 f80b 	bl	801079c <xTaskCheckForTimeOut>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d132      	bne.n	800f7f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f78c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f78e:	f000 f9ee 	bl	800fb6e <prvIsQueueEmpty>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d026      	beq.n	800f7e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d109      	bne.n	800f7b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f7a0:	f7ff f904 	bl	800e9ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f001 f9bd 	bl	8010b28 <xTaskPriorityInherit>
 800f7ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f7b0:	f7ff f92a 	bl	800ea08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b6:	3324      	adds	r3, #36	; 0x24
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	4611      	mov	r1, r2
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 ff25 	bl	801060c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7c4:	f000 f981 	bl	800faca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f7c8:	f000 fd00 	bl	80101cc <xTaskResumeAll>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f47f af69 	bne.w	800f6a6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f7d4:	4b18      	ldr	r3, [pc, #96]	; (800f838 <xQueueSemaphoreTake+0x20c>)
 800f7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	e75f      	b.n	800f6a6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7e8:	f000 f96f 	bl	800faca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7ec:	f000 fcee 	bl	80101cc <xTaskResumeAll>
 800f7f0:	e759      	b.n	800f6a6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7f4:	f000 f969 	bl	800faca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7f8:	f000 fce8 	bl	80101cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7fe:	f000 f9b6 	bl	800fb6e <prvIsQueueEmpty>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	f43f af4e 	beq.w	800f6a6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00d      	beq.n	800f82c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f810:	f7ff f8cc 	bl	800e9ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f816:	f000 f8b0 	bl	800f97a <prvGetDisinheritPriorityAfterTimeout>
 800f81a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f822:	4618      	mov	r0, r3
 800f824:	f001 fa5a 	bl	8010cdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f828:	f7ff f8ee 	bl	800ea08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f82c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3738      	adds	r7, #56	; 0x38
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	e000ed04 	.word	0xe000ed04

0800f83c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08e      	sub	sp, #56	; 0x38
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d109      	bne.n	800f866 <xQueueReceiveFromISR+0x2a>
 800f852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f856:	f383 8811 	msr	BASEPRI, r3
 800f85a:	f3bf 8f6f 	isb	sy
 800f85e:	f3bf 8f4f 	dsb	sy
 800f862:	623b      	str	r3, [r7, #32]
 800f864:	e7fe      	b.n	800f864 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d103      	bne.n	800f874 <xQueueReceiveFromISR+0x38>
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <xQueueReceiveFromISR+0x3c>
 800f874:	2301      	movs	r3, #1
 800f876:	e000      	b.n	800f87a <xQueueReceiveFromISR+0x3e>
 800f878:	2300      	movs	r3, #0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <xQueueReceiveFromISR+0x56>
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	61fb      	str	r3, [r7, #28]
 800f890:	e7fe      	b.n	800f890 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f892:	f7ff f943 	bl	800eb1c <vPortValidateInterruptPriority>
	__asm volatile
 800f896:	f3ef 8211 	mrs	r2, BASEPRI
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	61ba      	str	r2, [r7, #24]
 800f8ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f8ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d02f      	beq.n	800f91e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8c8:	68b9      	ldr	r1, [r7, #8]
 800f8ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8cc:	f000 f8d7 	bl	800fa7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d2:	1e5a      	subs	r2, r3, #1
 800f8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f8d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e0:	d112      	bne.n	800f908 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d016      	beq.n	800f918 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ec:	3310      	adds	r3, #16
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f000 feda 	bl	80106a8 <xTaskRemoveFromEventList>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00e      	beq.n	800f918 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00b      	beq.n	800f918 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	e007      	b.n	800f918 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f90c:	3301      	adds	r3, #1
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	b25a      	sxtb	r2, r3
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f918:	2301      	movs	r3, #1
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
 800f91c:	e001      	b.n	800f922 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f91e:	2300      	movs	r3, #0
 800f920:	637b      	str	r3, [r7, #52]	; 0x34
 800f922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f924:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3738      	adds	r7, #56	; 0x38
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d109      	bne.n	800f95c <vQueueDelete+0x26>
	__asm volatile
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	60bb      	str	r3, [r7, #8]
 800f95a:	e7fe      	b.n	800f95a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f000 f95d 	bl	800fc1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d102      	bne.n	800f972 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7fe fd2f 	bl	800e3d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f972:	bf00      	nop
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f97a:	b480      	push	{r7}
 800f97c:	b085      	sub	sp, #20
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d006      	beq.n	800f998 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f994:	60fb      	str	r3, [r7, #12]
 800f996:	e001      	b.n	800f99c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f998:	2300      	movs	r3, #0
 800f99a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f99c:	68fb      	ldr	r3, [r7, #12]
	}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b086      	sub	sp, #24
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	60f8      	str	r0, [r7, #12]
 800f9b2:	60b9      	str	r1, [r7, #8]
 800f9b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10d      	bne.n	800f9e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d14d      	bne.n	800fa6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f001 f915 	bl	8010c04 <xTaskPriorityDisinherit>
 800f9da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	605a      	str	r2, [r3, #4]
 800f9e2:	e043      	b.n	800fa6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d119      	bne.n	800fa1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6898      	ldr	r0, [r3, #8]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	68b9      	ldr	r1, [r7, #8]
 800f9f6:	f005 f9a7 	bl	8014d48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	689a      	ldr	r2, [r3, #8]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa02:	441a      	add	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	689a      	ldr	r2, [r3, #8]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d32b      	bcc.n	800fa6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	609a      	str	r2, [r3, #8]
 800fa1c:	e026      	b.n	800fa6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	68d8      	ldr	r0, [r3, #12]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa26:	461a      	mov	r2, r3
 800fa28:	68b9      	ldr	r1, [r7, #8]
 800fa2a:	f005 f98d 	bl	8014d48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	68da      	ldr	r2, [r3, #12]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa36:	425b      	negs	r3, r3
 800fa38:	441a      	add	r2, r3
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	68da      	ldr	r2, [r3, #12]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d207      	bcs.n	800fa5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	685a      	ldr	r2, [r3, #4]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	425b      	negs	r3, r3
 800fa54:	441a      	add	r2, r3
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d105      	bne.n	800fa6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d002      	beq.n	800fa6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	1c5a      	adds	r2, r3, #1
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fa74:	697b      	ldr	r3, [r7, #20]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b082      	sub	sp, #8
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d018      	beq.n	800fac2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68da      	ldr	r2, [r3, #12]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa98:	441a      	add	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	68da      	ldr	r2, [r3, #12]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d303      	bcc.n	800fab2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	68d9      	ldr	r1, [r3, #12]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faba:	461a      	mov	r2, r3
 800fabc:	6838      	ldr	r0, [r7, #0]
 800fabe:	f005 f943 	bl	8014d48 <memcpy>
	}
}
 800fac2:	bf00      	nop
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fad2:	f7fe ff6b 	bl	800e9ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fadc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fade:	e011      	b.n	800fb04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d012      	beq.n	800fb0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	3324      	adds	r3, #36	; 0x24
 800faec:	4618      	mov	r0, r3
 800faee:	f000 fddb 	bl	80106a8 <xTaskRemoveFromEventList>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800faf8:	f000 feb0 	bl	801085c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
 800fafe:	3b01      	subs	r3, #1
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	dce9      	bgt.n	800fae0 <prvUnlockQueue+0x16>
 800fb0c:	e000      	b.n	800fb10 <prvUnlockQueue+0x46>
					break;
 800fb0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	22ff      	movs	r2, #255	; 0xff
 800fb14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb18:	f7fe ff76 	bl	800ea08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb1c:	f7fe ff46 	bl	800e9ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb28:	e011      	b.n	800fb4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d012      	beq.n	800fb58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3310      	adds	r3, #16
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 fdb6 	bl	80106a8 <xTaskRemoveFromEventList>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb42:	f000 fe8b 	bl	801085c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	dce9      	bgt.n	800fb2a <prvUnlockQueue+0x60>
 800fb56:	e000      	b.n	800fb5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	22ff      	movs	r2, #255	; 0xff
 800fb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fb62:	f7fe ff51 	bl	800ea08 <vPortExitCritical>
}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b084      	sub	sp, #16
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb76:	f7fe ff19 	bl	800e9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d102      	bne.n	800fb88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fb82:	2301      	movs	r3, #1
 800fb84:	60fb      	str	r3, [r7, #12]
 800fb86:	e001      	b.n	800fb8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fb8c:	f7fe ff3c 	bl	800ea08 <vPortExitCritical>

	return xReturn;
 800fb90:	68fb      	ldr	r3, [r7, #12]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b084      	sub	sp, #16
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fba2:	f7fe ff03 	bl	800e9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d102      	bne.n	800fbb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	60fb      	str	r3, [r7, #12]
 800fbb6:	e001      	b.n	800fbbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbbc:	f7fe ff24 	bl	800ea08 <vPortExitCritical>

	return xReturn;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
	...

0800fbcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	60fb      	str	r3, [r7, #12]
 800fbda:	e014      	b.n	800fc06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fbdc:	4a0e      	ldr	r2, [pc, #56]	; (800fc18 <vQueueAddToRegistry+0x4c>)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d10b      	bne.n	800fc00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fbe8:	490b      	ldr	r1, [pc, #44]	; (800fc18 <vQueueAddToRegistry+0x4c>)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fbf2:	4a09      	ldr	r2, [pc, #36]	; (800fc18 <vQueueAddToRegistry+0x4c>)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	00db      	lsls	r3, r3, #3
 800fbf8:	4413      	add	r3, r2
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fbfe:	e005      	b.n	800fc0c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	60fb      	str	r3, [r7, #12]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b0b      	cmp	r3, #11
 800fc0a:	d9e7      	bls.n	800fbdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc0c:	bf00      	nop
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	20028540 	.word	0x20028540

0800fc1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc24:	2300      	movs	r3, #0
 800fc26:	60fb      	str	r3, [r7, #12]
 800fc28:	e016      	b.n	800fc58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fc2a:	4a10      	ldr	r2, [pc, #64]	; (800fc6c <vQueueUnregisterQueue+0x50>)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	4413      	add	r3, r2
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d10b      	bne.n	800fc52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fc3a:	4a0c      	ldr	r2, [pc, #48]	; (800fc6c <vQueueUnregisterQueue+0x50>)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2100      	movs	r1, #0
 800fc40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fc44:	4a09      	ldr	r2, [pc, #36]	; (800fc6c <vQueueUnregisterQueue+0x50>)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	00db      	lsls	r3, r3, #3
 800fc4a:	4413      	add	r3, r2
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	605a      	str	r2, [r3, #4]
				break;
 800fc50:	e005      	b.n	800fc5e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3301      	adds	r3, #1
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2b0b      	cmp	r3, #11
 800fc5c:	d9e5      	bls.n	800fc2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fc5e:	bf00      	nop
 800fc60:	3714      	adds	r7, #20
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	20028540 	.word	0x20028540

0800fc70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc80:	f7fe fe94 	bl	800e9ac <vPortEnterCritical>
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc8a:	b25b      	sxtb	r3, r3
 800fc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc90:	d103      	bne.n	800fc9a <vQueueWaitForMessageRestricted+0x2a>
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fca0:	b25b      	sxtb	r3, r3
 800fca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca6:	d103      	bne.n	800fcb0 <vQueueWaitForMessageRestricted+0x40>
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcb0:	f7fe feaa 	bl	800ea08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d106      	bne.n	800fcca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	3324      	adds	r3, #36	; 0x24
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	68b9      	ldr	r1, [r7, #8]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f000 fcc5 	bl	8010654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f7ff fefd 	bl	800faca <prvUnlockQueue>
	}
 800fcd0:	bf00      	nop
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b08e      	sub	sp, #56	; 0x38
 800fcdc:	af04      	add	r7, sp, #16
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d109      	bne.n	800fd00 <xTaskCreateStatic+0x28>
 800fcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	623b      	str	r3, [r7, #32]
 800fcfe:	e7fe      	b.n	800fcfe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d109      	bne.n	800fd1a <xTaskCreateStatic+0x42>
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	61fb      	str	r3, [r7, #28]
 800fd18:	e7fe      	b.n	800fd18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fd1a:	2364      	movs	r3, #100	; 0x64
 800fd1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	2b64      	cmp	r3, #100	; 0x64
 800fd22:	d009      	beq.n	800fd38 <xTaskCreateStatic+0x60>
 800fd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd28:	f383 8811 	msr	BASEPRI, r3
 800fd2c:	f3bf 8f6f 	isb	sy
 800fd30:	f3bf 8f4f 	dsb	sy
 800fd34:	61bb      	str	r3, [r7, #24]
 800fd36:	e7fe      	b.n	800fd36 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d01e      	beq.n	800fd7c <xTaskCreateStatic+0xa4>
 800fd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d01b      	beq.n	800fd7c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd50:	2202      	movs	r2, #2
 800fd52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd56:	2300      	movs	r3, #0
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	9302      	str	r3, [sp, #8]
 800fd5e:	f107 0314 	add.w	r3, r7, #20
 800fd62:	9301      	str	r3, [sp, #4]
 800fd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	68b9      	ldr	r1, [r7, #8]
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f000 f850 	bl	800fe14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd76:	f000 f8d9 	bl	800ff2c <prvAddNewTaskToReadyList>
 800fd7a:	e001      	b.n	800fd80 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd80:	697b      	ldr	r3, [r7, #20]
	}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3728      	adds	r7, #40	; 0x28
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b08c      	sub	sp, #48	; 0x30
 800fd8e:	af04      	add	r7, sp, #16
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	60b9      	str	r1, [r7, #8]
 800fd94:	603b      	str	r3, [r7, #0]
 800fd96:	4613      	mov	r3, r2
 800fd98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd9a:	88fb      	ldrh	r3, [r7, #6]
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe fa50 	bl	800e244 <pvPortMalloc>
 800fda4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00e      	beq.n	800fdca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800fdac:	2064      	movs	r0, #100	; 0x64
 800fdae:	f7fe fa49 	bl	800e244 <pvPortMalloc>
 800fdb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	631a      	str	r2, [r3, #48]	; 0x30
 800fdc0:	e005      	b.n	800fdce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fdc2:	6978      	ldr	r0, [r7, #20]
 800fdc4:	f7fe fb04 	bl	800e3d0 <vPortFree>
 800fdc8:	e001      	b.n	800fdce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d017      	beq.n	800fe04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fddc:	88fa      	ldrh	r2, [r7, #6]
 800fdde:	2300      	movs	r3, #0
 800fde0:	9303      	str	r3, [sp, #12]
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	9302      	str	r3, [sp, #8]
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	9301      	str	r3, [sp, #4]
 800fdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	68b9      	ldr	r1, [r7, #8]
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f000 f80e 	bl	800fe14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fdf8:	69f8      	ldr	r0, [r7, #28]
 800fdfa:	f000 f897 	bl	800ff2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	61bb      	str	r3, [r7, #24]
 800fe02:	e002      	b.n	800fe0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe04:	f04f 33ff 	mov.w	r3, #4294967295
 800fe08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe0a:	69bb      	ldr	r3, [r7, #24]
	}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3720      	adds	r7, #32
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b088      	sub	sp, #32
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fe22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	21a5      	movs	r1, #165	; 0xa5
 800fe2e:	f004 ff96 	bl	8014d5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800fe32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	4413      	add	r3, r2
 800fe42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	f023 0307 	bic.w	r3, r3, #7
 800fe4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	f003 0307 	and.w	r3, r3, #7
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <prvInitialiseNewTask+0x56>
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	617b      	str	r3, [r7, #20]
 800fe68:	e7fe      	b.n	800fe68 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	69ba      	ldr	r2, [r7, #24]
 800fe6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe70:	2300      	movs	r3, #0
 800fe72:	61fb      	str	r3, [r7, #28]
 800fe74:	e012      	b.n	800fe9c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	7819      	ldrb	r1, [r3, #0]
 800fe7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	4413      	add	r3, r2
 800fe84:	3334      	adds	r3, #52	; 0x34
 800fe86:	460a      	mov	r2, r1
 800fe88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d006      	beq.n	800fea4 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	2b0f      	cmp	r3, #15
 800fea0:	d9e9      	bls.n	800fe76 <prvInitialiseNewTask+0x62>
 800fea2:	e000      	b.n	800fea6 <prvInitialiseNewTask+0x92>
		{
			break;
 800fea4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea8:	2200      	movs	r2, #0
 800feaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800feae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb0:	2b37      	cmp	r3, #55	; 0x37
 800feb2:	d901      	bls.n	800feb8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800feb4:	2337      	movs	r3, #55	; 0x37
 800feb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800febc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800febe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fec2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	2200      	movs	r2, #0
 800fec8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	3304      	adds	r3, #4
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fe fbb4 	bl	800e63c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	3318      	adds	r3, #24
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fbaf 	bl	800e63c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800feea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800fef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef6:	2200      	movs	r2, #0
 800fef8:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	2200      	movs	r2, #0
 800fefe:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	2200      	movs	r2, #0
 800ff04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	68f9      	ldr	r1, [r7, #12]
 800ff0c:	69b8      	ldr	r0, [r7, #24]
 800ff0e:	f7fe fc29 	bl	800e764 <pxPortInitialiseStack>
 800ff12:	4602      	mov	r2, r0
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ff18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff24:	bf00      	nop
 800ff26:	3720      	adds	r7, #32
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff34:	f7fe fd3a 	bl	800e9ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff38:	4b2d      	ldr	r3, [pc, #180]	; (800fff0 <prvAddNewTaskToReadyList+0xc4>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	4a2c      	ldr	r2, [pc, #176]	; (800fff0 <prvAddNewTaskToReadyList+0xc4>)
 800ff40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff42:	4b2c      	ldr	r3, [pc, #176]	; (800fff4 <prvAddNewTaskToReadyList+0xc8>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d109      	bne.n	800ff5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff4a:	4a2a      	ldr	r2, [pc, #168]	; (800fff4 <prvAddNewTaskToReadyList+0xc8>)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff50:	4b27      	ldr	r3, [pc, #156]	; (800fff0 <prvAddNewTaskToReadyList+0xc4>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d110      	bne.n	800ff7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff58:	f000 fcf8 	bl	801094c <prvInitialiseTaskLists>
 800ff5c:	e00d      	b.n	800ff7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff5e:	4b26      	ldr	r3, [pc, #152]	; (800fff8 <prvAddNewTaskToReadyList+0xcc>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d109      	bne.n	800ff7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff66:	4b23      	ldr	r3, [pc, #140]	; (800fff4 <prvAddNewTaskToReadyList+0xc8>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d802      	bhi.n	800ff7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff74:	4a1f      	ldr	r2, [pc, #124]	; (800fff4 <prvAddNewTaskToReadyList+0xc8>)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff7a:	4b20      	ldr	r3, [pc, #128]	; (800fffc <prvAddNewTaskToReadyList+0xd0>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	4a1e      	ldr	r2, [pc, #120]	; (800fffc <prvAddNewTaskToReadyList+0xd0>)
 800ff82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff84:	4b1d      	ldr	r3, [pc, #116]	; (800fffc <prvAddNewTaskToReadyList+0xd0>)
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff90:	4b1b      	ldr	r3, [pc, #108]	; (8010000 <prvAddNewTaskToReadyList+0xd4>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d903      	bls.n	800ffa0 <prvAddNewTaskToReadyList+0x74>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	4a18      	ldr	r2, [pc, #96]	; (8010000 <prvAddNewTaskToReadyList+0xd4>)
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4413      	add	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4a15      	ldr	r2, [pc, #84]	; (8010004 <prvAddNewTaskToReadyList+0xd8>)
 800ffae:	441a      	add	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f7fe fb4d 	bl	800e656 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ffbc:	f7fe fd24 	bl	800ea08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffc0:	4b0d      	ldr	r3, [pc, #52]	; (800fff8 <prvAddNewTaskToReadyList+0xcc>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00e      	beq.n	800ffe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffc8:	4b0a      	ldr	r3, [pc, #40]	; (800fff4 <prvAddNewTaskToReadyList+0xc8>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d207      	bcs.n	800ffe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffd6:	4b0c      	ldr	r3, [pc, #48]	; (8010008 <prvAddNewTaskToReadyList+0xdc>)
 800ffd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	20027294 	.word	0x20027294
 800fff4:	20026dc0 	.word	0x20026dc0
 800fff8:	200272a0 	.word	0x200272a0
 800fffc:	200272b0 	.word	0x200272b0
 8010000:	2002729c 	.word	0x2002729c
 8010004:	20026dc4 	.word	0x20026dc4
 8010008:	e000ed04 	.word	0xe000ed04

0801000c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010014:	2300      	movs	r3, #0
 8010016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d016      	beq.n	801004c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801001e:	4b13      	ldr	r3, [pc, #76]	; (801006c <vTaskDelay+0x60>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d009      	beq.n	801003a <vTaskDelay+0x2e>
 8010026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002a:	f383 8811 	msr	BASEPRI, r3
 801002e:	f3bf 8f6f 	isb	sy
 8010032:	f3bf 8f4f 	dsb	sy
 8010036:	60bb      	str	r3, [r7, #8]
 8010038:	e7fe      	b.n	8010038 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801003a:	f000 f881 	bl	8010140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801003e:	2100      	movs	r1, #0
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f001 f8a9 	bl	8011198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010046:	f000 f8c1 	bl	80101cc <xTaskResumeAll>
 801004a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d107      	bne.n	8010062 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010052:	4b07      	ldr	r3, [pc, #28]	; (8010070 <vTaskDelay+0x64>)
 8010054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010058:	601a      	str	r2, [r3, #0]
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010062:	bf00      	nop
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200272bc 	.word	0x200272bc
 8010070:	e000ed04 	.word	0xe000ed04

08010074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b08a      	sub	sp, #40	; 0x28
 8010078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801007a:	2300      	movs	r3, #0
 801007c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801007e:	2300      	movs	r3, #0
 8010080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010082:	463a      	mov	r2, r7
 8010084:	1d39      	adds	r1, r7, #4
 8010086:	f107 0308 	add.w	r3, r7, #8
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe f8a6 	bl	800e1dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010090:	6839      	ldr	r1, [r7, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	9202      	str	r2, [sp, #8]
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	2300      	movs	r3, #0
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	2300      	movs	r3, #0
 80100a0:	460a      	mov	r2, r1
 80100a2:	4921      	ldr	r1, [pc, #132]	; (8010128 <vTaskStartScheduler+0xb4>)
 80100a4:	4821      	ldr	r0, [pc, #132]	; (801012c <vTaskStartScheduler+0xb8>)
 80100a6:	f7ff fe17 	bl	800fcd8 <xTaskCreateStatic>
 80100aa:	4602      	mov	r2, r0
 80100ac:	4b20      	ldr	r3, [pc, #128]	; (8010130 <vTaskStartScheduler+0xbc>)
 80100ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80100b0:	4b1f      	ldr	r3, [pc, #124]	; (8010130 <vTaskStartScheduler+0xbc>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80100b8:	2301      	movs	r3, #1
 80100ba:	617b      	str	r3, [r7, #20]
 80100bc:	e001      	b.n	80100c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80100be:	2300      	movs	r3, #0
 80100c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d102      	bne.n	80100ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80100c8:	f001 f8ba 	bl	8011240 <xTimerCreateTimerTask>
 80100cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d117      	bne.n	8010104 <vTaskStartScheduler+0x90>
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80100e6:	4b13      	ldr	r3, [pc, #76]	; (8010134 <vTaskStartScheduler+0xc0>)
 80100e8:	f04f 32ff 	mov.w	r2, #4294967295
 80100ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80100ee:	4b12      	ldr	r3, [pc, #72]	; (8010138 <vTaskStartScheduler+0xc4>)
 80100f0:	2201      	movs	r2, #1
 80100f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80100f4:	4b11      	ldr	r3, [pc, #68]	; (801013c <vTaskStartScheduler+0xc8>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80100fa:	f7f1 f898 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80100fe:	f7fe fbb7 	bl	800e870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010102:	e00d      	b.n	8010120 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010a:	d109      	bne.n	8010120 <vTaskStartScheduler+0xac>
 801010c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010110:	f383 8811 	msr	BASEPRI, r3
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	60fb      	str	r3, [r7, #12]
 801011e:	e7fe      	b.n	801011e <vTaskStartScheduler+0xaa>
}
 8010120:	bf00      	nop
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	080160c4 	.word	0x080160c4
 801012c:	08010875 	.word	0x08010875
 8010130:	200272b8 	.word	0x200272b8
 8010134:	200272b4 	.word	0x200272b4
 8010138:	200272a0 	.word	0x200272a0
 801013c:	20027298 	.word	0x20027298

08010140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010140:	b480      	push	{r7}
 8010142:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010144:	4b04      	ldr	r3, [pc, #16]	; (8010158 <vTaskSuspendAll+0x18>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	3301      	adds	r3, #1
 801014a:	4a03      	ldr	r2, [pc, #12]	; (8010158 <vTaskSuspendAll+0x18>)
 801014c:	6013      	str	r3, [r2, #0]
}
 801014e:	bf00      	nop
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	200272bc 	.word	0x200272bc

0801015c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010166:	4b14      	ldr	r3, [pc, #80]	; (80101b8 <prvGetExpectedIdleTime+0x5c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d001      	beq.n	8010172 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801016e:	2301      	movs	r3, #1
 8010170:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010172:	4b12      	ldr	r3, [pc, #72]	; (80101bc <prvGetExpectedIdleTime+0x60>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d002      	beq.n	8010182 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	607b      	str	r3, [r7, #4]
 8010180:	e012      	b.n	80101a8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010182:	4b0f      	ldr	r3, [pc, #60]	; (80101c0 <prvGetExpectedIdleTime+0x64>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2b01      	cmp	r3, #1
 8010188:	d902      	bls.n	8010190 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	607b      	str	r3, [r7, #4]
 801018e:	e00b      	b.n	80101a8 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010196:	2300      	movs	r3, #0
 8010198:	607b      	str	r3, [r7, #4]
 801019a:	e005      	b.n	80101a8 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 801019c:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <prvGetExpectedIdleTime+0x68>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	4b09      	ldr	r3, [pc, #36]	; (80101c8 <prvGetExpectedIdleTime+0x6c>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80101a8:	687b      	ldr	r3, [r7, #4]
	}
 80101aa:	4618      	mov	r0, r3
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	2002729c 	.word	0x2002729c
 80101bc:	20026dc0 	.word	0x20026dc0
 80101c0:	20026dc4 	.word	0x20026dc4
 80101c4:	200272b4 	.word	0x200272b4
 80101c8:	20027298 	.word	0x20027298

080101cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80101d6:	2300      	movs	r3, #0
 80101d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80101da:	4b41      	ldr	r3, [pc, #260]	; (80102e0 <xTaskResumeAll+0x114>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d109      	bne.n	80101f6 <xTaskResumeAll+0x2a>
 80101e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e6:	f383 8811 	msr	BASEPRI, r3
 80101ea:	f3bf 8f6f 	isb	sy
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	603b      	str	r3, [r7, #0]
 80101f4:	e7fe      	b.n	80101f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101f6:	f7fe fbd9 	bl	800e9ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101fa:	4b39      	ldr	r3, [pc, #228]	; (80102e0 <xTaskResumeAll+0x114>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	3b01      	subs	r3, #1
 8010200:	4a37      	ldr	r2, [pc, #220]	; (80102e0 <xTaskResumeAll+0x114>)
 8010202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010204:	4b36      	ldr	r3, [pc, #216]	; (80102e0 <xTaskResumeAll+0x114>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d162      	bne.n	80102d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801020c:	4b35      	ldr	r3, [pc, #212]	; (80102e4 <xTaskResumeAll+0x118>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d05e      	beq.n	80102d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010214:	e02f      	b.n	8010276 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010216:	4b34      	ldr	r3, [pc, #208]	; (80102e8 <xTaskResumeAll+0x11c>)
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	3318      	adds	r3, #24
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fa74 	bl	800e710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	3304      	adds	r3, #4
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fa6f 	bl	800e710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010236:	4b2d      	ldr	r3, [pc, #180]	; (80102ec <xTaskResumeAll+0x120>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	429a      	cmp	r2, r3
 801023c:	d903      	bls.n	8010246 <xTaskResumeAll+0x7a>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010242:	4a2a      	ldr	r2, [pc, #168]	; (80102ec <xTaskResumeAll+0x120>)
 8010244:	6013      	str	r3, [r2, #0]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801024a:	4613      	mov	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4a27      	ldr	r2, [pc, #156]	; (80102f0 <xTaskResumeAll+0x124>)
 8010254:	441a      	add	r2, r3
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	3304      	adds	r3, #4
 801025a:	4619      	mov	r1, r3
 801025c:	4610      	mov	r0, r2
 801025e:	f7fe f9fa 	bl	800e656 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010266:	4b23      	ldr	r3, [pc, #140]	; (80102f4 <xTaskResumeAll+0x128>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026c:	429a      	cmp	r2, r3
 801026e:	d302      	bcc.n	8010276 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010270:	4b21      	ldr	r3, [pc, #132]	; (80102f8 <xTaskResumeAll+0x12c>)
 8010272:	2201      	movs	r2, #1
 8010274:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010276:	4b1c      	ldr	r3, [pc, #112]	; (80102e8 <xTaskResumeAll+0x11c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1cb      	bne.n	8010216 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d001      	beq.n	8010288 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010284:	f000 fbfc 	bl	8010a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010288:	4b1c      	ldr	r3, [pc, #112]	; (80102fc <xTaskResumeAll+0x130>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d010      	beq.n	80102b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010294:	f000 f86c 	bl	8010370 <xTaskIncrementTick>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d002      	beq.n	80102a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801029e:	4b16      	ldr	r3, [pc, #88]	; (80102f8 <xTaskResumeAll+0x12c>)
 80102a0:	2201      	movs	r2, #1
 80102a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d1f1      	bne.n	8010294 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80102b0:	4b12      	ldr	r3, [pc, #72]	; (80102fc <xTaskResumeAll+0x130>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80102b6:	4b10      	ldr	r3, [pc, #64]	; (80102f8 <xTaskResumeAll+0x12c>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d009      	beq.n	80102d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80102be:	2301      	movs	r3, #1
 80102c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80102c2:	4b0f      	ldr	r3, [pc, #60]	; (8010300 <xTaskResumeAll+0x134>)
 80102c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c8:	601a      	str	r2, [r3, #0]
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102d2:	f7fe fb99 	bl	800ea08 <vPortExitCritical>

	return xAlreadyYielded;
 80102d6:	68bb      	ldr	r3, [r7, #8]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	200272bc 	.word	0x200272bc
 80102e4:	20027294 	.word	0x20027294
 80102e8:	20027254 	.word	0x20027254
 80102ec:	2002729c 	.word	0x2002729c
 80102f0:	20026dc4 	.word	0x20026dc4
 80102f4:	20026dc0 	.word	0x20026dc0
 80102f8:	200272a8 	.word	0x200272a8
 80102fc:	200272a4 	.word	0x200272a4
 8010300:	e000ed04 	.word	0xe000ed04

08010304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801030a:	4b05      	ldr	r3, [pc, #20]	; (8010320 <xTaskGetTickCount+0x1c>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010310:	687b      	ldr	r3, [r7, #4]
}
 8010312:	4618      	mov	r0, r3
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	20027298 	.word	0x20027298

08010324 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 801032c:	4b0e      	ldr	r3, [pc, #56]	; (8010368 <vTaskStepTick+0x44>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	441a      	add	r2, r3
 8010334:	4b0d      	ldr	r3, [pc, #52]	; (801036c <vTaskStepTick+0x48>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	429a      	cmp	r2, r3
 801033a:	d909      	bls.n	8010350 <vTaskStepTick+0x2c>
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	60fb      	str	r3, [r7, #12]
 801034e:	e7fe      	b.n	801034e <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8010350:	4b05      	ldr	r3, [pc, #20]	; (8010368 <vTaskStepTick+0x44>)
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4413      	add	r3, r2
 8010358:	4a03      	ldr	r2, [pc, #12]	; (8010368 <vTaskStepTick+0x44>)
 801035a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 801035c:	bf00      	nop
 801035e:	3714      	adds	r7, #20
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	20027298 	.word	0x20027298
 801036c:	200272b4 	.word	0x200272b4

08010370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b086      	sub	sp, #24
 8010374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010376:	2300      	movs	r3, #0
 8010378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801037a:	4b55      	ldr	r3, [pc, #340]	; (80104d0 <xTaskIncrementTick+0x160>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 8093 	bne.w	80104aa <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010384:	4b53      	ldr	r3, [pc, #332]	; (80104d4 <xTaskIncrementTick+0x164>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	3301      	adds	r3, #1
 801038a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801038c:	4a51      	ldr	r2, [pc, #324]	; (80104d4 <xTaskIncrementTick+0x164>)
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d11f      	bne.n	80103d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010398:	4b4f      	ldr	r3, [pc, #316]	; (80104d8 <xTaskIncrementTick+0x168>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d009      	beq.n	80103b6 <xTaskIncrementTick+0x46>
 80103a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a6:	f383 8811 	msr	BASEPRI, r3
 80103aa:	f3bf 8f6f 	isb	sy
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	e7fe      	b.n	80103b4 <xTaskIncrementTick+0x44>
 80103b6:	4b48      	ldr	r3, [pc, #288]	; (80104d8 <xTaskIncrementTick+0x168>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	4b47      	ldr	r3, [pc, #284]	; (80104dc <xTaskIncrementTick+0x16c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a45      	ldr	r2, [pc, #276]	; (80104d8 <xTaskIncrementTick+0x168>)
 80103c2:	6013      	str	r3, [r2, #0]
 80103c4:	4a45      	ldr	r2, [pc, #276]	; (80104dc <xTaskIncrementTick+0x16c>)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6013      	str	r3, [r2, #0]
 80103ca:	4b45      	ldr	r3, [pc, #276]	; (80104e0 <xTaskIncrementTick+0x170>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3301      	adds	r3, #1
 80103d0:	4a43      	ldr	r2, [pc, #268]	; (80104e0 <xTaskIncrementTick+0x170>)
 80103d2:	6013      	str	r3, [r2, #0]
 80103d4:	f000 fb54 	bl	8010a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80103d8:	4b42      	ldr	r3, [pc, #264]	; (80104e4 <xTaskIncrementTick+0x174>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d34e      	bcc.n	8010480 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103e2:	4b3d      	ldr	r3, [pc, #244]	; (80104d8 <xTaskIncrementTick+0x168>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <xTaskIncrementTick+0x80>
 80103ec:	2301      	movs	r3, #1
 80103ee:	e000      	b.n	80103f2 <xTaskIncrementTick+0x82>
 80103f0:	2300      	movs	r3, #0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d004      	beq.n	8010400 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103f6:	4b3b      	ldr	r3, [pc, #236]	; (80104e4 <xTaskIncrementTick+0x174>)
 80103f8:	f04f 32ff 	mov.w	r2, #4294967295
 80103fc:	601a      	str	r2, [r3, #0]
					break;
 80103fe:	e03f      	b.n	8010480 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010400:	4b35      	ldr	r3, [pc, #212]	; (80104d8 <xTaskIncrementTick+0x168>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010410:	693a      	ldr	r2, [r7, #16]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	429a      	cmp	r2, r3
 8010416:	d203      	bcs.n	8010420 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010418:	4a32      	ldr	r2, [pc, #200]	; (80104e4 <xTaskIncrementTick+0x174>)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6013      	str	r3, [r2, #0]
						break;
 801041e:	e02f      	b.n	8010480 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	3304      	adds	r3, #4
 8010424:	4618      	mov	r0, r3
 8010426:	f7fe f973 	bl	800e710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	3318      	adds	r3, #24
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe f96a 	bl	800e710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010440:	4b29      	ldr	r3, [pc, #164]	; (80104e8 <xTaskIncrementTick+0x178>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d903      	bls.n	8010450 <xTaskIncrementTick+0xe0>
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044c:	4a26      	ldr	r2, [pc, #152]	; (80104e8 <xTaskIncrementTick+0x178>)
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010454:	4613      	mov	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4a23      	ldr	r2, [pc, #140]	; (80104ec <xTaskIncrementTick+0x17c>)
 801045e:	441a      	add	r2, r3
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f7fe f8f5 	bl	800e656 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010470:	4b1f      	ldr	r3, [pc, #124]	; (80104f0 <xTaskIncrementTick+0x180>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010476:	429a      	cmp	r2, r3
 8010478:	d3b3      	bcc.n	80103e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801047a:	2301      	movs	r3, #1
 801047c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801047e:	e7b0      	b.n	80103e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010480:	4b1b      	ldr	r3, [pc, #108]	; (80104f0 <xTaskIncrementTick+0x180>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010486:	4919      	ldr	r1, [pc, #100]	; (80104ec <xTaskIncrementTick+0x17c>)
 8010488:	4613      	mov	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4413      	add	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	440b      	add	r3, r1
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d901      	bls.n	801049c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8010498:	2301      	movs	r3, #1
 801049a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801049c:	4b15      	ldr	r3, [pc, #84]	; (80104f4 <xTaskIncrementTick+0x184>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d109      	bne.n	80104b8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80104a4:	f7f0 fed1 	bl	800124a <vApplicationTickHook>
 80104a8:	e006      	b.n	80104b8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80104aa:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <xTaskIncrementTick+0x184>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3301      	adds	r3, #1
 80104b0:	4a10      	ldr	r2, [pc, #64]	; (80104f4 <xTaskIncrementTick+0x184>)
 80104b2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80104b4:	f7f0 fec9 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80104b8:	4b0f      	ldr	r3, [pc, #60]	; (80104f8 <xTaskIncrementTick+0x188>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d001      	beq.n	80104c4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80104c0:	2301      	movs	r3, #1
 80104c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80104c4:	697b      	ldr	r3, [r7, #20]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	200272bc 	.word	0x200272bc
 80104d4:	20027298 	.word	0x20027298
 80104d8:	2002724c 	.word	0x2002724c
 80104dc:	20027250 	.word	0x20027250
 80104e0:	200272ac 	.word	0x200272ac
 80104e4:	200272b4 	.word	0x200272b4
 80104e8:	2002729c 	.word	0x2002729c
 80104ec:	20026dc4 	.word	0x20026dc4
 80104f0:	20026dc0 	.word	0x20026dc0
 80104f4:	200272a4 	.word	0x200272a4
 80104f8:	200272a8 	.word	0x200272a8

080104fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010502:	4b3b      	ldr	r3, [pc, #236]	; (80105f0 <vTaskSwitchContext+0xf4>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801050a:	4b3a      	ldr	r3, [pc, #232]	; (80105f4 <vTaskSwitchContext+0xf8>)
 801050c:	2201      	movs	r2, #1
 801050e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010510:	e06a      	b.n	80105e8 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8010512:	4b38      	ldr	r3, [pc, #224]	; (80105f4 <vTaskSwitchContext+0xf8>)
 8010514:	2200      	movs	r2, #0
 8010516:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010518:	f7f0 fe90 	bl	800123c <getRunTimeCounterValue>
 801051c:	4602      	mov	r2, r0
 801051e:	4b36      	ldr	r3, [pc, #216]	; (80105f8 <vTaskSwitchContext+0xfc>)
 8010520:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010522:	4b35      	ldr	r3, [pc, #212]	; (80105f8 <vTaskSwitchContext+0xfc>)
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	4b35      	ldr	r3, [pc, #212]	; (80105fc <vTaskSwitchContext+0x100>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	429a      	cmp	r2, r3
 801052c:	d909      	bls.n	8010542 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801052e:	4b34      	ldr	r3, [pc, #208]	; (8010600 <vTaskSwitchContext+0x104>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010534:	4a30      	ldr	r2, [pc, #192]	; (80105f8 <vTaskSwitchContext+0xfc>)
 8010536:	6810      	ldr	r0, [r2, #0]
 8010538:	4a30      	ldr	r2, [pc, #192]	; (80105fc <vTaskSwitchContext+0x100>)
 801053a:	6812      	ldr	r2, [r2, #0]
 801053c:	1a82      	subs	r2, r0, r2
 801053e:	440a      	add	r2, r1
 8010540:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8010542:	4b2d      	ldr	r3, [pc, #180]	; (80105f8 <vTaskSwitchContext+0xfc>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a2d      	ldr	r2, [pc, #180]	; (80105fc <vTaskSwitchContext+0x100>)
 8010548:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801054a:	4b2d      	ldr	r3, [pc, #180]	; (8010600 <vTaskSwitchContext+0x104>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	4b2b      	ldr	r3, [pc, #172]	; (8010600 <vTaskSwitchContext+0x104>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010556:	429a      	cmp	r2, r3
 8010558:	d808      	bhi.n	801056c <vTaskSwitchContext+0x70>
 801055a:	4b29      	ldr	r3, [pc, #164]	; (8010600 <vTaskSwitchContext+0x104>)
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	4b28      	ldr	r3, [pc, #160]	; (8010600 <vTaskSwitchContext+0x104>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3334      	adds	r3, #52	; 0x34
 8010564:	4619      	mov	r1, r3
 8010566:	4610      	mov	r0, r2
 8010568:	f7f0 fe76 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801056c:	4b25      	ldr	r3, [pc, #148]	; (8010604 <vTaskSwitchContext+0x108>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	60fb      	str	r3, [r7, #12]
 8010572:	e00f      	b.n	8010594 <vTaskSwitchContext+0x98>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d109      	bne.n	801058e <vTaskSwitchContext+0x92>
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	607b      	str	r3, [r7, #4]
 801058c:	e7fe      	b.n	801058c <vTaskSwitchContext+0x90>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	3b01      	subs	r3, #1
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	491c      	ldr	r1, [pc, #112]	; (8010608 <vTaskSwitchContext+0x10c>)
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	4613      	mov	r3, r2
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	440b      	add	r3, r1
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d0e5      	beq.n	8010574 <vTaskSwitchContext+0x78>
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	4613      	mov	r3, r2
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4413      	add	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4a15      	ldr	r2, [pc, #84]	; (8010608 <vTaskSwitchContext+0x10c>)
 80105b4:	4413      	add	r3, r2
 80105b6:	60bb      	str	r3, [r7, #8]
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	605a      	str	r2, [r3, #4]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	3308      	adds	r3, #8
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d104      	bne.n	80105d8 <vTaskSwitchContext+0xdc>
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	605a      	str	r2, [r3, #4]
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	4a08      	ldr	r2, [pc, #32]	; (8010600 <vTaskSwitchContext+0x104>)
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	4a08      	ldr	r2, [pc, #32]	; (8010604 <vTaskSwitchContext+0x108>)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6013      	str	r3, [r2, #0]
}
 80105e8:	bf00      	nop
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	200272bc 	.word	0x200272bc
 80105f4:	200272a8 	.word	0x200272a8
 80105f8:	200272c4 	.word	0x200272c4
 80105fc:	200272c0 	.word	0x200272c0
 8010600:	20026dc0 	.word	0x20026dc0
 8010604:	2002729c 	.word	0x2002729c
 8010608:	20026dc4 	.word	0x20026dc4

0801060c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d109      	bne.n	8010630 <vTaskPlaceOnEventList+0x24>
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	60fb      	str	r3, [r7, #12]
 801062e:	e7fe      	b.n	801062e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010630:	4b07      	ldr	r3, [pc, #28]	; (8010650 <vTaskPlaceOnEventList+0x44>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3318      	adds	r3, #24
 8010636:	4619      	mov	r1, r3
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f7fe f830 	bl	800e69e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801063e:	2101      	movs	r1, #1
 8010640:	6838      	ldr	r0, [r7, #0]
 8010642:	f000 fda9 	bl	8011198 <prvAddCurrentTaskToDelayedList>
}
 8010646:	bf00      	nop
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	20026dc0 	.word	0x20026dc0

08010654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d109      	bne.n	801067a <vTaskPlaceOnEventListRestricted+0x26>
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	617b      	str	r3, [r7, #20]
 8010678:	e7fe      	b.n	8010678 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801067a:	4b0a      	ldr	r3, [pc, #40]	; (80106a4 <vTaskPlaceOnEventListRestricted+0x50>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3318      	adds	r3, #24
 8010680:	4619      	mov	r1, r3
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f7fd ffe7 	bl	800e656 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801068e:	f04f 33ff 	mov.w	r3, #4294967295
 8010692:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010694:	6879      	ldr	r1, [r7, #4]
 8010696:	68b8      	ldr	r0, [r7, #8]
 8010698:	f000 fd7e 	bl	8011198 <prvAddCurrentTaskToDelayedList>
	}
 801069c:	bf00      	nop
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	20026dc0 	.word	0x20026dc0

080106a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b086      	sub	sp, #24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d109      	bne.n	80106d2 <xTaskRemoveFromEventList+0x2a>
 80106be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	60fb      	str	r3, [r7, #12]
 80106d0:	e7fe      	b.n	80106d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	3318      	adds	r3, #24
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fe f81a 	bl	800e710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106dc:	4b1e      	ldr	r3, [pc, #120]	; (8010758 <xTaskRemoveFromEventList+0xb0>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d11d      	bne.n	8010720 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	3304      	adds	r3, #4
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fe f811 	bl	800e710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f2:	4b1a      	ldr	r3, [pc, #104]	; (801075c <xTaskRemoveFromEventList+0xb4>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d903      	bls.n	8010702 <xTaskRemoveFromEventList+0x5a>
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fe:	4a17      	ldr	r2, [pc, #92]	; (801075c <xTaskRemoveFromEventList+0xb4>)
 8010700:	6013      	str	r3, [r2, #0]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010706:	4613      	mov	r3, r2
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4413      	add	r3, r2
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	4a14      	ldr	r2, [pc, #80]	; (8010760 <xTaskRemoveFromEventList+0xb8>)
 8010710:	441a      	add	r2, r3
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	3304      	adds	r3, #4
 8010716:	4619      	mov	r1, r3
 8010718:	4610      	mov	r0, r2
 801071a:	f7fd ff9c 	bl	800e656 <vListInsertEnd>
 801071e:	e005      	b.n	801072c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	3318      	adds	r3, #24
 8010724:	4619      	mov	r1, r3
 8010726:	480f      	ldr	r0, [pc, #60]	; (8010764 <xTaskRemoveFromEventList+0xbc>)
 8010728:	f7fd ff95 	bl	800e656 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010730:	4b0d      	ldr	r3, [pc, #52]	; (8010768 <xTaskRemoveFromEventList+0xc0>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010736:	429a      	cmp	r2, r3
 8010738:	d905      	bls.n	8010746 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801073a:	2301      	movs	r3, #1
 801073c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801073e:	4b0b      	ldr	r3, [pc, #44]	; (801076c <xTaskRemoveFromEventList+0xc4>)
 8010740:	2201      	movs	r2, #1
 8010742:	601a      	str	r2, [r3, #0]
 8010744:	e001      	b.n	801074a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010746:	2300      	movs	r3, #0
 8010748:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 801074a:	f000 f999 	bl	8010a80 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 801074e:	697b      	ldr	r3, [r7, #20]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	200272bc 	.word	0x200272bc
 801075c:	2002729c 	.word	0x2002729c
 8010760:	20026dc4 	.word	0x20026dc4
 8010764:	20027254 	.word	0x20027254
 8010768:	20026dc0 	.word	0x20026dc0
 801076c:	200272a8 	.word	0x200272a8

08010770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010778:	4b06      	ldr	r3, [pc, #24]	; (8010794 <vTaskInternalSetTimeOutState+0x24>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010780:	4b05      	ldr	r3, [pc, #20]	; (8010798 <vTaskInternalSetTimeOutState+0x28>)
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	605a      	str	r2, [r3, #4]
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr
 8010794:	200272ac 	.word	0x200272ac
 8010798:	20027298 	.word	0x20027298

0801079c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d109      	bne.n	80107c0 <xTaskCheckForTimeOut+0x24>
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	613b      	str	r3, [r7, #16]
 80107be:	e7fe      	b.n	80107be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d109      	bne.n	80107da <xTaskCheckForTimeOut+0x3e>
 80107c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	e7fe      	b.n	80107d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80107da:	f7fe f8e7 	bl	800e9ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80107de:	4b1d      	ldr	r3, [pc, #116]	; (8010854 <xTaskCheckForTimeOut+0xb8>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	69ba      	ldr	r2, [r7, #24]
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f6:	d102      	bne.n	80107fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	61fb      	str	r3, [r7, #28]
 80107fc:	e023      	b.n	8010846 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	4b15      	ldr	r3, [pc, #84]	; (8010858 <xTaskCheckForTimeOut+0xbc>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	429a      	cmp	r2, r3
 8010808:	d007      	beq.n	801081a <xTaskCheckForTimeOut+0x7e>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	69ba      	ldr	r2, [r7, #24]
 8010810:	429a      	cmp	r2, r3
 8010812:	d302      	bcc.n	801081a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010814:	2301      	movs	r3, #1
 8010816:	61fb      	str	r3, [r7, #28]
 8010818:	e015      	b.n	8010846 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	429a      	cmp	r2, r3
 8010822:	d20b      	bcs.n	801083c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	1ad2      	subs	r2, r2, r3
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ff9d 	bl	8010770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010836:	2300      	movs	r3, #0
 8010838:	61fb      	str	r3, [r7, #28]
 801083a:	e004      	b.n	8010846 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	2200      	movs	r2, #0
 8010840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010842:	2301      	movs	r3, #1
 8010844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010846:	f7fe f8df 	bl	800ea08 <vPortExitCritical>

	return xReturn;
 801084a:	69fb      	ldr	r3, [r7, #28]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3720      	adds	r7, #32
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20027298 	.word	0x20027298
 8010858:	200272ac 	.word	0x200272ac

0801085c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801085c:	b480      	push	{r7}
 801085e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010860:	4b03      	ldr	r3, [pc, #12]	; (8010870 <vTaskMissedYield+0x14>)
 8010862:	2201      	movs	r2, #1
 8010864:	601a      	str	r2, [r3, #0]
}
 8010866:	bf00      	nop
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr
 8010870:	200272a8 	.word	0x200272a8

08010874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801087c:	f000 f8a6 	bl	80109cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010880:	4b17      	ldr	r3, [pc, #92]	; (80108e0 <prvIdleTask+0x6c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d907      	bls.n	8010898 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010888:	4b16      	ldr	r3, [pc, #88]	; (80108e4 <prvIdleTask+0x70>)
 801088a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801088e:	601a      	str	r2, [r3, #0]
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8010898:	f7ff fc60 	bl	801015c <prvGetExpectedIdleTime>
 801089c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d9eb      	bls.n	801087c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80108a4:	f7ff fc4c 	bl	8010140 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80108a8:	4b0f      	ldr	r3, [pc, #60]	; (80108e8 <prvIdleTask+0x74>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	4b0f      	ldr	r3, [pc, #60]	; (80108ec <prvIdleTask+0x78>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d209      	bcs.n	80108c8 <prvIdleTask+0x54>
 80108b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	60bb      	str	r3, [r7, #8]
 80108c6:	e7fe      	b.n	80108c6 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80108c8:	f7ff fc48 	bl	801015c <prvGetExpectedIdleTime>
 80108cc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d902      	bls.n	80108da <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7f1 fceb 	bl	80022b0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80108da:	f7ff fc77 	bl	80101cc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80108de:	e7cd      	b.n	801087c <prvIdleTask+0x8>
 80108e0:	20026dc4 	.word	0x20026dc4
 80108e4:	e000ed04 	.word	0xe000ed04
 80108e8:	200272b4 	.word	0x200272b4
 80108ec:	20027298 	.word	0x20027298

080108f0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80108f6:	2301      	movs	r3, #1
 80108f8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80108fa:	2301      	movs	r3, #1
 80108fc:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80108fe:	4b0f      	ldr	r3, [pc, #60]	; (801093c <eTaskConfirmSleepModeStatus+0x4c>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8010906:	2300      	movs	r3, #0
 8010908:	71fb      	strb	r3, [r7, #7]
 801090a:	e010      	b.n	801092e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 801090c:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <eTaskConfirmSleepModeStatus+0x50>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d002      	beq.n	801091a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8010914:	2300      	movs	r3, #0
 8010916:	71fb      	strb	r3, [r7, #7]
 8010918:	e009      	b.n	801092e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <eTaskConfirmSleepModeStatus+0x54>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	4b0a      	ldr	r3, [pc, #40]	; (8010948 <eTaskConfirmSleepModeStatus+0x58>)
 8010920:	6819      	ldr	r1, [r3, #0]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	1acb      	subs	r3, r1, r3
 8010926:	429a      	cmp	r2, r3
 8010928:	d101      	bne.n	801092e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 801092a:	2302      	movs	r3, #2
 801092c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 801092e:	79fb      	ldrb	r3, [r7, #7]
	}
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	20027254 	.word	0x20027254
 8010940:	200272a8 	.word	0x200272a8
 8010944:	20027280 	.word	0x20027280
 8010948:	20027294 	.word	0x20027294

0801094c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010952:	2300      	movs	r3, #0
 8010954:	607b      	str	r3, [r7, #4]
 8010956:	e00c      	b.n	8010972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4613      	mov	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4a12      	ldr	r2, [pc, #72]	; (80109ac <prvInitialiseTaskLists+0x60>)
 8010964:	4413      	add	r3, r2
 8010966:	4618      	mov	r0, r3
 8010968:	f7fd fe48 	bl	800e5fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3301      	adds	r3, #1
 8010970:	607b      	str	r3, [r7, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2b37      	cmp	r3, #55	; 0x37
 8010976:	d9ef      	bls.n	8010958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010978:	480d      	ldr	r0, [pc, #52]	; (80109b0 <prvInitialiseTaskLists+0x64>)
 801097a:	f7fd fe3f 	bl	800e5fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801097e:	480d      	ldr	r0, [pc, #52]	; (80109b4 <prvInitialiseTaskLists+0x68>)
 8010980:	f7fd fe3c 	bl	800e5fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010984:	480c      	ldr	r0, [pc, #48]	; (80109b8 <prvInitialiseTaskLists+0x6c>)
 8010986:	f7fd fe39 	bl	800e5fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801098a:	480c      	ldr	r0, [pc, #48]	; (80109bc <prvInitialiseTaskLists+0x70>)
 801098c:	f7fd fe36 	bl	800e5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010990:	480b      	ldr	r0, [pc, #44]	; (80109c0 <prvInitialiseTaskLists+0x74>)
 8010992:	f7fd fe33 	bl	800e5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010996:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <prvInitialiseTaskLists+0x78>)
 8010998:	4a05      	ldr	r2, [pc, #20]	; (80109b0 <prvInitialiseTaskLists+0x64>)
 801099a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801099c:	4b0a      	ldr	r3, [pc, #40]	; (80109c8 <prvInitialiseTaskLists+0x7c>)
 801099e:	4a05      	ldr	r2, [pc, #20]	; (80109b4 <prvInitialiseTaskLists+0x68>)
 80109a0:	601a      	str	r2, [r3, #0]
}
 80109a2:	bf00      	nop
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20026dc4 	.word	0x20026dc4
 80109b0:	20027224 	.word	0x20027224
 80109b4:	20027238 	.word	0x20027238
 80109b8:	20027254 	.word	0x20027254
 80109bc:	20027268 	.word	0x20027268
 80109c0:	20027280 	.word	0x20027280
 80109c4:	2002724c 	.word	0x2002724c
 80109c8:	20027250 	.word	0x20027250

080109cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109d2:	e019      	b.n	8010a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109d4:	f7fd ffea 	bl	800e9ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80109d8:	4b0f      	ldr	r3, [pc, #60]	; (8010a18 <prvCheckTasksWaitingTermination+0x4c>)
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	3304      	adds	r3, #4
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fd fe93 	bl	800e710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80109ea:	4b0c      	ldr	r3, [pc, #48]	; (8010a1c <prvCheckTasksWaitingTermination+0x50>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3b01      	subs	r3, #1
 80109f0:	4a0a      	ldr	r2, [pc, #40]	; (8010a1c <prvCheckTasksWaitingTermination+0x50>)
 80109f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80109f4:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <prvCheckTasksWaitingTermination+0x54>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3b01      	subs	r3, #1
 80109fa:	4a09      	ldr	r2, [pc, #36]	; (8010a20 <prvCheckTasksWaitingTermination+0x54>)
 80109fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80109fe:	f7fe f803 	bl	800ea08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f80e 	bl	8010a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a08:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <prvCheckTasksWaitingTermination+0x54>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d1e1      	bne.n	80109d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a10:	bf00      	nop
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	20027268 	.word	0x20027268
 8010a1c:	20027294 	.word	0x20027294
 8010a20:	2002727c 	.word	0x2002727c

08010a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d108      	bne.n	8010a48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fd fcc8 	bl	800e3d0 <vPortFree>
				vPortFree( pxTCB );
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7fd fcc5 	bl	800e3d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a46:	e017      	b.n	8010a78 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d103      	bne.n	8010a5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7fd fcbc 	bl	800e3d0 <vPortFree>
	}
 8010a58:	e00e      	b.n	8010a78 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010a60:	2b02      	cmp	r3, #2
 8010a62:	d009      	beq.n	8010a78 <prvDeleteTCB+0x54>
 8010a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a68:	f383 8811 	msr	BASEPRI, r3
 8010a6c:	f3bf 8f6f 	isb	sy
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	e7fe      	b.n	8010a76 <prvDeleteTCB+0x52>
	}
 8010a78:	bf00      	nop
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a86:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <prvResetNextTaskUnblockTime+0x44>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d101      	bne.n	8010a94 <prvResetNextTaskUnblockTime+0x14>
 8010a90:	2301      	movs	r3, #1
 8010a92:	e000      	b.n	8010a96 <prvResetNextTaskUnblockTime+0x16>
 8010a94:	2300      	movs	r3, #0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d004      	beq.n	8010aa4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a9a:	4b0b      	ldr	r3, [pc, #44]	; (8010ac8 <prvResetNextTaskUnblockTime+0x48>)
 8010a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010aa0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010aa2:	e008      	b.n	8010ab6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010aa4:	4b07      	ldr	r3, [pc, #28]	; (8010ac4 <prvResetNextTaskUnblockTime+0x44>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	4a05      	ldr	r2, [pc, #20]	; (8010ac8 <prvResetNextTaskUnblockTime+0x48>)
 8010ab4:	6013      	str	r3, [r2, #0]
}
 8010ab6:	bf00      	nop
 8010ab8:	370c      	adds	r7, #12
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	2002724c 	.word	0x2002724c
 8010ac8:	200272b4 	.word	0x200272b4

08010acc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010ad2:	4b05      	ldr	r3, [pc, #20]	; (8010ae8 <xTaskGetCurrentTaskHandle+0x1c>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010ad8:	687b      	ldr	r3, [r7, #4]
	}
 8010ada:	4618      	mov	r0, r3
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	20026dc0 	.word	0x20026dc0

08010aec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010af2:	4b0b      	ldr	r3, [pc, #44]	; (8010b20 <xTaskGetSchedulerState+0x34>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010afa:	2301      	movs	r3, #1
 8010afc:	607b      	str	r3, [r7, #4]
 8010afe:	e008      	b.n	8010b12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b00:	4b08      	ldr	r3, [pc, #32]	; (8010b24 <xTaskGetSchedulerState+0x38>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b08:	2302      	movs	r3, #2
 8010b0a:	607b      	str	r3, [r7, #4]
 8010b0c:	e001      	b.n	8010b12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b12:	687b      	ldr	r3, [r7, #4]
	}
 8010b14:	4618      	mov	r0, r3
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr
 8010b20:	200272a0 	.word	0x200272a0
 8010b24:	200272bc 	.word	0x200272bc

08010b28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b34:	2300      	movs	r3, #0
 8010b36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d056      	beq.n	8010bec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b42:	4b2d      	ldr	r3, [pc, #180]	; (8010bf8 <xTaskPriorityInherit+0xd0>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d246      	bcs.n	8010bda <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	699b      	ldr	r3, [r3, #24]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	db06      	blt.n	8010b62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b54:	4b28      	ldr	r3, [pc, #160]	; (8010bf8 <xTaskPriorityInherit+0xd0>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	6959      	ldr	r1, [r3, #20]
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4a22      	ldr	r2, [pc, #136]	; (8010bfc <xTaskPriorityInherit+0xd4>)
 8010b74:	4413      	add	r3, r2
 8010b76:	4299      	cmp	r1, r3
 8010b78:	d101      	bne.n	8010b7e <xTaskPriorityInherit+0x56>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e000      	b.n	8010b80 <xTaskPriorityInherit+0x58>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d022      	beq.n	8010bca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3304      	adds	r3, #4
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7fd fdc1 	bl	800e710 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b8e:	4b1a      	ldr	r3, [pc, #104]	; (8010bf8 <xTaskPriorityInherit+0xd0>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9c:	4b18      	ldr	r3, [pc, #96]	; (8010c00 <xTaskPriorityInherit+0xd8>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d903      	bls.n	8010bac <xTaskPriorityInherit+0x84>
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba8:	4a15      	ldr	r2, [pc, #84]	; (8010c00 <xTaskPriorityInherit+0xd8>)
 8010baa:	6013      	str	r3, [r2, #0]
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bb0:	4613      	mov	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4413      	add	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4a10      	ldr	r2, [pc, #64]	; (8010bfc <xTaskPriorityInherit+0xd4>)
 8010bba:	441a      	add	r2, r3
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	4610      	mov	r0, r2
 8010bc4:	f7fd fd47 	bl	800e656 <vListInsertEnd>
 8010bc8:	e004      	b.n	8010bd4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bca:	4b0b      	ldr	r3, [pc, #44]	; (8010bf8 <xTaskPriorityInherit+0xd0>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	60fb      	str	r3, [r7, #12]
 8010bd8:	e008      	b.n	8010bec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bde:	4b06      	ldr	r3, [pc, #24]	; (8010bf8 <xTaskPriorityInherit+0xd0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d201      	bcs.n	8010bec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010be8:	2301      	movs	r3, #1
 8010bea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010bec:	68fb      	ldr	r3, [r7, #12]
	}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	20026dc0 	.word	0x20026dc0
 8010bfc:	20026dc4 	.word	0x20026dc4
 8010c00:	2002729c 	.word	0x2002729c

08010c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b086      	sub	sp, #24
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c10:	2300      	movs	r3, #0
 8010c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d054      	beq.n	8010cc4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	; (8010cd0 <xTaskPriorityDisinherit+0xcc>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	693a      	ldr	r2, [r7, #16]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d009      	beq.n	8010c38 <xTaskPriorityDisinherit+0x34>
 8010c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	60fb      	str	r3, [r7, #12]
 8010c36:	e7fe      	b.n	8010c36 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <xTaskPriorityDisinherit+0x50>
 8010c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	60bb      	str	r3, [r7, #8]
 8010c52:	e7fe      	b.n	8010c52 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c58:	1e5a      	subs	r2, r3, #1
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d02c      	beq.n	8010cc4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d128      	bne.n	8010cc4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	3304      	adds	r3, #4
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fd fd4a 	bl	800e710 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c94:	4b0f      	ldr	r3, [pc, #60]	; (8010cd4 <xTaskPriorityDisinherit+0xd0>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d903      	bls.n	8010ca4 <xTaskPriorityDisinherit+0xa0>
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca0:	4a0c      	ldr	r2, [pc, #48]	; (8010cd4 <xTaskPriorityDisinherit+0xd0>)
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca8:	4613      	mov	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4a09      	ldr	r2, [pc, #36]	; (8010cd8 <xTaskPriorityDisinherit+0xd4>)
 8010cb2:	441a      	add	r2, r3
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	4619      	mov	r1, r3
 8010cba:	4610      	mov	r0, r2
 8010cbc:	f7fd fccb 	bl	800e656 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010cc4:	697b      	ldr	r3, [r7, #20]
	}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	20026dc0 	.word	0x20026dc0
 8010cd4:	2002729c 	.word	0x2002729c
 8010cd8:	20026dc4 	.word	0x20026dc4

08010cdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010cea:	2301      	movs	r3, #1
 8010cec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d06d      	beq.n	8010dd0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d109      	bne.n	8010d10 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	e7fe      	b.n	8010d0e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d14:	683a      	ldr	r2, [r7, #0]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d902      	bls.n	8010d20 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	61fb      	str	r3, [r7, #28]
 8010d1e:	e002      	b.n	8010d26 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	69fa      	ldr	r2, [r7, #28]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d04f      	beq.n	8010dd0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d34:	697a      	ldr	r2, [r7, #20]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d14a      	bne.n	8010dd0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010d3a:	4b27      	ldr	r3, [pc, #156]	; (8010dd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	69ba      	ldr	r2, [r7, #24]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d109      	bne.n	8010d58 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d48:	f383 8811 	msr	BASEPRI, r3
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	f3bf 8f4f 	dsb	sy
 8010d54:	60bb      	str	r3, [r7, #8]
 8010d56:	e7fe      	b.n	8010d56 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	69fa      	ldr	r2, [r7, #28]
 8010d62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	db04      	blt.n	8010d76 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	6959      	ldr	r1, [r3, #20]
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	4413      	add	r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4a15      	ldr	r2, [pc, #84]	; (8010ddc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010d86:	4413      	add	r3, r2
 8010d88:	4299      	cmp	r1, r3
 8010d8a:	d101      	bne.n	8010d90 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e000      	b.n	8010d92 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8010d90:	2300      	movs	r3, #0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d01c      	beq.n	8010dd0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	3304      	adds	r3, #4
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fd fcb8 	bl	800e710 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da4:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d903      	bls.n	8010db4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	4a0b      	ldr	r2, [pc, #44]	; (8010de0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db8:	4613      	mov	r3, r2
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	4413      	add	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4a06      	ldr	r2, [pc, #24]	; (8010ddc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010dc2:	441a      	add	r2, r3
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	4619      	mov	r1, r3
 8010dca:	4610      	mov	r0, r2
 8010dcc:	f7fd fc43 	bl	800e656 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010dd0:	bf00      	nop
 8010dd2:	3720      	adds	r7, #32
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	20026dc0 	.word	0x20026dc0
 8010ddc:	20026dc4 	.word	0x20026dc4
 8010de0:	2002729c 	.word	0x2002729c

08010de4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8010de4:	b480      	push	{r7}
 8010de6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010de8:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d004      	beq.n	8010dfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010df6:	3201      	adds	r2, #1
 8010df8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8010dfa:	4b03      	ldr	r3, [pc, #12]	; (8010e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
	}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	20026dc0 	.word	0x20026dc0

08010e0c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010e1a:	f7fd fdc7 	bl	800e9ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010e1e:	4b26      	ldr	r3, [pc, #152]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	d01a      	beq.n	8010e62 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010e2c:	4b22      	ldr	r3, [pc, #136]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	43d2      	mvns	r2, r2
 8010e36:	400a      	ands	r2, r1
 8010e38:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010e3a:	4b1f      	ldr	r3, [pc, #124]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00b      	beq.n	8010e62 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e4a:	2101      	movs	r1, #1
 8010e4c:	6838      	ldr	r0, [r7, #0]
 8010e4e:	f000 f9a3 	bl	8011198 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010e52:	4b1a      	ldr	r3, [pc, #104]	; (8010ebc <xTaskNotifyWait+0xb0>)
 8010e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	f3bf 8f4f 	dsb	sy
 8010e5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010e62:	f7fd fdd1 	bl	800ea08 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010e66:	f7fd fda1 	bl	800e9ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010e70:	4b11      	ldr	r3, [pc, #68]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010e7a:	4b0f      	ldr	r3, [pc, #60]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d002      	beq.n	8010e8e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	617b      	str	r3, [r7, #20]
 8010e8c:	e008      	b.n	8010ea0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010e8e:	4b0a      	ldr	r3, [pc, #40]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	43d2      	mvns	r2, r2
 8010e98:	400a      	ands	r2, r1
 8010e9a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ea0:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <xTaskNotifyWait+0xac>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8010eaa:	f7fd fdad 	bl	800ea08 <vPortExitCritical>

		return xReturn;
 8010eae:	697b      	ldr	r3, [r7, #20]
	}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	20026dc0 	.word	0x20026dc0
 8010ebc:	e000ed04 	.word	0xe000ed04

08010ec0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08a      	sub	sp, #40	; 0x28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	603b      	str	r3, [r7, #0]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d109      	bne.n	8010eee <xTaskGenericNotify+0x2e>
 8010eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ede:	f383 8811 	msr	BASEPRI, r3
 8010ee2:	f3bf 8f6f 	isb	sy
 8010ee6:	f3bf 8f4f 	dsb	sy
 8010eea:	61bb      	str	r3, [r7, #24]
 8010eec:	e7fe      	b.n	8010eec <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010ef2:	f7fd fd5b 	bl	800e9ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d003      	beq.n	8010f04 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010f0a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	2202      	movs	r2, #2
 8010f10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8010f14:	79fb      	ldrb	r3, [r7, #7]
 8010f16:	2b04      	cmp	r3, #4
 8010f18:	d827      	bhi.n	8010f6a <xTaskGenericNotify+0xaa>
 8010f1a:	a201      	add	r2, pc, #4	; (adr r2, 8010f20 <xTaskGenericNotify+0x60>)
 8010f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f20:	08010f6b 	.word	0x08010f6b
 8010f24:	08010f35 	.word	0x08010f35
 8010f28:	08010f43 	.word	0x08010f43
 8010f2c:	08010f4f 	.word	0x08010f4f
 8010f30:	08010f57 	.word	0x08010f57
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010f34:	6a3b      	ldr	r3, [r7, #32]
 8010f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	431a      	orrs	r2, r3
 8010f3c:	6a3b      	ldr	r3, [r7, #32]
 8010f3e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8010f40:	e013      	b.n	8010f6a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	6a3b      	ldr	r3, [r7, #32]
 8010f4a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8010f4c:	e00d      	b.n	8010f6a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010f4e:	6a3b      	ldr	r3, [r7, #32]
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8010f54:	e009      	b.n	8010f6a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010f56:	7ffb      	ldrb	r3, [r7, #31]
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d003      	beq.n	8010f64 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	68ba      	ldr	r2, [r7, #8]
 8010f60:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010f62:	e001      	b.n	8010f68 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8010f64:	2300      	movs	r3, #0
 8010f66:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010f68:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010f6a:	7ffb      	ldrb	r3, [r7, #31]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d13b      	bne.n	8010fe8 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	3304      	adds	r3, #4
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fd fbcb 	bl	800e710 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010f7a:	6a3b      	ldr	r3, [r7, #32]
 8010f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7e:	4b1e      	ldr	r3, [pc, #120]	; (8010ff8 <xTaskGenericNotify+0x138>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d903      	bls.n	8010f8e <xTaskGenericNotify+0xce>
 8010f86:	6a3b      	ldr	r3, [r7, #32]
 8010f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8a:	4a1b      	ldr	r2, [pc, #108]	; (8010ff8 <xTaskGenericNotify+0x138>)
 8010f8c:	6013      	str	r3, [r2, #0]
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4a18      	ldr	r2, [pc, #96]	; (8010ffc <xTaskGenericNotify+0x13c>)
 8010f9c:	441a      	add	r2, r3
 8010f9e:	6a3b      	ldr	r3, [r7, #32]
 8010fa0:	3304      	adds	r3, #4
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4610      	mov	r0, r2
 8010fa6:	f7fd fb56 	bl	800e656 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010faa:	6a3b      	ldr	r3, [r7, #32]
 8010fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d009      	beq.n	8010fc6 <xTaskGenericNotify+0x106>
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	617b      	str	r3, [r7, #20]
 8010fc4:	e7fe      	b.n	8010fc4 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8010fc6:	f7ff fd5b 	bl	8010a80 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010fca:	6a3b      	ldr	r3, [r7, #32]
 8010fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fce:	4b0c      	ldr	r3, [pc, #48]	; (8011000 <xTaskGenericNotify+0x140>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d907      	bls.n	8010fe8 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010fd8:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <xTaskGenericNotify+0x144>)
 8010fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fde:	601a      	str	r2, [r3, #0]
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010fe8:	f7fd fd0e 	bl	800ea08 <vPortExitCritical>

		return xReturn;
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3728      	adds	r7, #40	; 0x28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	2002729c 	.word	0x2002729c
 8010ffc:	20026dc4 	.word	0x20026dc4
 8011000:	20026dc0 	.word	0x20026dc0
 8011004:	e000ed04 	.word	0xe000ed04

08011008 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011008:	b580      	push	{r7, lr}
 801100a:	b08e      	sub	sp, #56	; 0x38
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	603b      	str	r3, [r7, #0]
 8011014:	4613      	mov	r3, r2
 8011016:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011018:	2301      	movs	r3, #1
 801101a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d109      	bne.n	8011036 <xTaskGenericNotifyFromISR+0x2e>
 8011022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	627b      	str	r3, [r7, #36]	; 0x24
 8011034:	e7fe      	b.n	8011034 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011036:	f7fd fd71 	bl	800eb1c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801103e:	f3ef 8211 	mrs	r2, BASEPRI
 8011042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	623a      	str	r2, [r7, #32]
 8011054:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011056:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011058:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d003      	beq.n	8011068 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011062:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801106e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011074:	2202      	movs	r2, #2
 8011076:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801107a:	79fb      	ldrb	r3, [r7, #7]
 801107c:	2b04      	cmp	r3, #4
 801107e:	d829      	bhi.n	80110d4 <xTaskGenericNotifyFromISR+0xcc>
 8011080:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <xTaskGenericNotifyFromISR+0x80>)
 8011082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011086:	bf00      	nop
 8011088:	080110d5 	.word	0x080110d5
 801108c:	0801109d 	.word	0x0801109d
 8011090:	080110ab 	.word	0x080110ab
 8011094:	080110b7 	.word	0x080110b7
 8011098:	080110bf 	.word	0x080110bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	431a      	orrs	r2, r3
 80110a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80110a8:	e014      	b.n	80110d4 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80110b4:	e00e      	b.n	80110d4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80110b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80110bc:	e00a      	b.n	80110d4 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80110be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d003      	beq.n	80110ce <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80110cc:	e001      	b.n	80110d2 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80110ce:	2300      	movs	r3, #0
 80110d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80110d2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80110d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d146      	bne.n	801116a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80110dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d009      	beq.n	80110f8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80110e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	61bb      	str	r3, [r7, #24]
 80110f6:	e7fe      	b.n	80110f6 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110f8:	4b21      	ldr	r3, [pc, #132]	; (8011180 <xTaskGenericNotifyFromISR+0x178>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d11d      	bne.n	801113c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011102:	3304      	adds	r3, #4
 8011104:	4618      	mov	r0, r3
 8011106:	f7fd fb03 	bl	800e710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801110e:	4b1d      	ldr	r3, [pc, #116]	; (8011184 <xTaskGenericNotifyFromISR+0x17c>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	429a      	cmp	r2, r3
 8011114:	d903      	bls.n	801111e <xTaskGenericNotifyFromISR+0x116>
 8011116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111a:	4a1a      	ldr	r2, [pc, #104]	; (8011184 <xTaskGenericNotifyFromISR+0x17c>)
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011122:	4613      	mov	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	4a17      	ldr	r2, [pc, #92]	; (8011188 <xTaskGenericNotifyFromISR+0x180>)
 801112c:	441a      	add	r2, r3
 801112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011130:	3304      	adds	r3, #4
 8011132:	4619      	mov	r1, r3
 8011134:	4610      	mov	r0, r2
 8011136:	f7fd fa8e 	bl	800e656 <vListInsertEnd>
 801113a:	e005      	b.n	8011148 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113e:	3318      	adds	r3, #24
 8011140:	4619      	mov	r1, r3
 8011142:	4812      	ldr	r0, [pc, #72]	; (801118c <xTaskGenericNotifyFromISR+0x184>)
 8011144:	f7fd fa87 	bl	800e656 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114c:	4b10      	ldr	r3, [pc, #64]	; (8011190 <xTaskGenericNotifyFromISR+0x188>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011152:	429a      	cmp	r2, r3
 8011154:	d909      	bls.n	801116a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801115c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801115e:	2201      	movs	r2, #1
 8011160:	601a      	str	r2, [r3, #0]
 8011162:	e002      	b.n	801116a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8011164:	4b0b      	ldr	r3, [pc, #44]	; (8011194 <xTaskGenericNotifyFromISR+0x18c>)
 8011166:	2201      	movs	r2, #1
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	617b      	str	r3, [r7, #20]
	__asm volatile
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011176:	4618      	mov	r0, r3
 8011178:	3738      	adds	r7, #56	; 0x38
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	200272bc 	.word	0x200272bc
 8011184:	2002729c 	.word	0x2002729c
 8011188:	20026dc4 	.word	0x20026dc4
 801118c:	20027254 	.word	0x20027254
 8011190:	20026dc0 	.word	0x20026dc0
 8011194:	200272a8 	.word	0x200272a8

08011198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80111a2:	4b21      	ldr	r3, [pc, #132]	; (8011228 <prvAddCurrentTaskToDelayedList+0x90>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111a8:	4b20      	ldr	r3, [pc, #128]	; (801122c <prvAddCurrentTaskToDelayedList+0x94>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	3304      	adds	r3, #4
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fd faae 	bl	800e710 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d10a      	bne.n	80111d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d007      	beq.n	80111d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111c2:	4b1a      	ldr	r3, [pc, #104]	; (801122c <prvAddCurrentTaskToDelayedList+0x94>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	3304      	adds	r3, #4
 80111c8:	4619      	mov	r1, r3
 80111ca:	4819      	ldr	r0, [pc, #100]	; (8011230 <prvAddCurrentTaskToDelayedList+0x98>)
 80111cc:	f7fd fa43 	bl	800e656 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80111d0:	e026      	b.n	8011220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80111d2:	68fa      	ldr	r2, [r7, #12]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	4413      	add	r3, r2
 80111d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80111da:	4b14      	ldr	r3, [pc, #80]	; (801122c <prvAddCurrentTaskToDelayedList+0x94>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d209      	bcs.n	80111fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111ea:	4b12      	ldr	r3, [pc, #72]	; (8011234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	4b0f      	ldr	r3, [pc, #60]	; (801122c <prvAddCurrentTaskToDelayedList+0x94>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3304      	adds	r3, #4
 80111f4:	4619      	mov	r1, r3
 80111f6:	4610      	mov	r0, r2
 80111f8:	f7fd fa51 	bl	800e69e <vListInsert>
}
 80111fc:	e010      	b.n	8011220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111fe:	4b0e      	ldr	r3, [pc, #56]	; (8011238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	4b0a      	ldr	r3, [pc, #40]	; (801122c <prvAddCurrentTaskToDelayedList+0x94>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3304      	adds	r3, #4
 8011208:	4619      	mov	r1, r3
 801120a:	4610      	mov	r0, r2
 801120c:	f7fd fa47 	bl	800e69e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011210:	4b0a      	ldr	r3, [pc, #40]	; (801123c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	429a      	cmp	r2, r3
 8011218:	d202      	bcs.n	8011220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801121a:	4a08      	ldr	r2, [pc, #32]	; (801123c <prvAddCurrentTaskToDelayedList+0xa4>)
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	6013      	str	r3, [r2, #0]
}
 8011220:	bf00      	nop
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	20027298 	.word	0x20027298
 801122c:	20026dc0 	.word	0x20026dc0
 8011230:	20027280 	.word	0x20027280
 8011234:	20027250 	.word	0x20027250
 8011238:	2002724c 	.word	0x2002724c
 801123c:	200272b4 	.word	0x200272b4

08011240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08a      	sub	sp, #40	; 0x28
 8011244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011246:	2300      	movs	r3, #0
 8011248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801124a:	f000 fb51 	bl	80118f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801124e:	4b1c      	ldr	r3, [pc, #112]	; (80112c0 <xTimerCreateTimerTask+0x80>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d021      	beq.n	801129a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011256:	2300      	movs	r3, #0
 8011258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801125a:	2300      	movs	r3, #0
 801125c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801125e:	1d3a      	adds	r2, r7, #4
 8011260:	f107 0108 	add.w	r1, r7, #8
 8011264:	f107 030c 	add.w	r3, r7, #12
 8011268:	4618      	mov	r0, r3
 801126a:	f7fc ffd1 	bl	800e210 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801126e:	6879      	ldr	r1, [r7, #4]
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	68fa      	ldr	r2, [r7, #12]
 8011274:	9202      	str	r2, [sp, #8]
 8011276:	9301      	str	r3, [sp, #4]
 8011278:	2302      	movs	r3, #2
 801127a:	9300      	str	r3, [sp, #0]
 801127c:	2300      	movs	r3, #0
 801127e:	460a      	mov	r2, r1
 8011280:	4910      	ldr	r1, [pc, #64]	; (80112c4 <xTimerCreateTimerTask+0x84>)
 8011282:	4811      	ldr	r0, [pc, #68]	; (80112c8 <xTimerCreateTimerTask+0x88>)
 8011284:	f7fe fd28 	bl	800fcd8 <xTaskCreateStatic>
 8011288:	4602      	mov	r2, r0
 801128a:	4b10      	ldr	r3, [pc, #64]	; (80112cc <xTimerCreateTimerTask+0x8c>)
 801128c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801128e:	4b0f      	ldr	r3, [pc, #60]	; (80112cc <xTimerCreateTimerTask+0x8c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011296:	2301      	movs	r3, #1
 8011298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d109      	bne.n	80112b4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80112a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	613b      	str	r3, [r7, #16]
 80112b2:	e7fe      	b.n	80112b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80112b4:	697b      	ldr	r3, [r7, #20]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3718      	adds	r7, #24
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	200272f8 	.word	0x200272f8
 80112c4:	080160cc 	.word	0x080160cc
 80112c8:	08011505 	.word	0x08011505
 80112cc:	200272fc 	.word	0x200272fc

080112d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b088      	sub	sp, #32
 80112d4:	af02      	add	r7, sp, #8
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
 80112dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80112de:	2030      	movs	r0, #48	; 0x30
 80112e0:	f7fc ffb0 	bl	800e244 <pvPortMalloc>
 80112e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d00d      	beq.n	8011308 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	6a3b      	ldr	r3, [r7, #32]
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	68b9      	ldr	r1, [r7, #8]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 f844 	bl	8011388 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2200      	movs	r2, #0
 8011304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8011308:	697b      	ldr	r3, [r7, #20]
	}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011312:	b580      	push	{r7, lr}
 8011314:	b08a      	sub	sp, #40	; 0x28
 8011316:	af02      	add	r7, sp, #8
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	60b9      	str	r1, [r7, #8]
 801131c:	607a      	str	r2, [r7, #4]
 801131e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011320:	2330      	movs	r3, #48	; 0x30
 8011322:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	2b30      	cmp	r3, #48	; 0x30
 8011328:	d009      	beq.n	801133e <xTimerCreateStatic+0x2c>
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	61bb      	str	r3, [r7, #24]
 801133c:	e7fe      	b.n	801133c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	2b00      	cmp	r3, #0
 8011342:	d109      	bne.n	8011358 <xTimerCreateStatic+0x46>
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	617b      	str	r3, [r7, #20]
 8011356:	e7fe      	b.n	8011356 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00d      	beq.n	801137e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	68b9      	ldr	r1, [r7, #8]
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 f809 	bl	8011388 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	2201      	movs	r2, #1
 801137a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801137e:	69fb      	ldr	r3, [r7, #28]
	}
 8011380:	4618      	mov	r0, r3
 8011382:	3720      	adds	r7, #32
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <prvInitialiseNewTimer+0x28>
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	617b      	str	r3, [r7, #20]
 80113ae:	e7fe      	b.n	80113ae <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80113b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d015      	beq.n	80113e2 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80113b6:	f000 fa9b 	bl	80118f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80113ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80113cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80113d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d4:	6a3a      	ldr	r2, [r7, #32]
 80113d6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	3304      	adds	r3, #4
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fd f92d 	bl	800e63c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80113e2:	bf00      	nop
 80113e4:	3718      	adds	r7, #24
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
	...

080113ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b08a      	sub	sp, #40	; 0x28
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
 80113f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80113fa:	2300      	movs	r3, #0
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d109      	bne.n	8011418 <xTimerGenericCommand+0x2c>
 8011404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	623b      	str	r3, [r7, #32]
 8011416:	e7fe      	b.n	8011416 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011418:	4b19      	ldr	r3, [pc, #100]	; (8011480 <xTimerGenericCommand+0x94>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d02a      	beq.n	8011476 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2b05      	cmp	r3, #5
 8011430:	dc18      	bgt.n	8011464 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011432:	f7ff fb5b 	bl	8010aec <xTaskGetSchedulerState>
 8011436:	4603      	mov	r3, r0
 8011438:	2b02      	cmp	r3, #2
 801143a:	d109      	bne.n	8011450 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801143c:	4b10      	ldr	r3, [pc, #64]	; (8011480 <xTimerGenericCommand+0x94>)
 801143e:	6818      	ldr	r0, [r3, #0]
 8011440:	f107 0110 	add.w	r1, r7, #16
 8011444:	2300      	movs	r3, #0
 8011446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011448:	f7fd fdfc 	bl	800f044 <xQueueGenericSend>
 801144c:	6278      	str	r0, [r7, #36]	; 0x24
 801144e:	e012      	b.n	8011476 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011450:	4b0b      	ldr	r3, [pc, #44]	; (8011480 <xTimerGenericCommand+0x94>)
 8011452:	6818      	ldr	r0, [r3, #0]
 8011454:	f107 0110 	add.w	r1, r7, #16
 8011458:	2300      	movs	r3, #0
 801145a:	2200      	movs	r2, #0
 801145c:	f7fd fdf2 	bl	800f044 <xQueueGenericSend>
 8011460:	6278      	str	r0, [r7, #36]	; 0x24
 8011462:	e008      	b.n	8011476 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011464:	4b06      	ldr	r3, [pc, #24]	; (8011480 <xTimerGenericCommand+0x94>)
 8011466:	6818      	ldr	r0, [r3, #0]
 8011468:	f107 0110 	add.w	r1, r7, #16
 801146c:	2300      	movs	r3, #0
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	f7fd fee2 	bl	800f238 <xQueueGenericSendFromISR>
 8011474:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011478:	4618      	mov	r0, r3
 801147a:	3728      	adds	r7, #40	; 0x28
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	200272f8 	.word	0x200272f8

08011484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b088      	sub	sp, #32
 8011488:	af02      	add	r7, sp, #8
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801148e:	4b1c      	ldr	r3, [pc, #112]	; (8011500 <prvProcessExpiredTimer+0x7c>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	3304      	adds	r3, #4
 801149c:	4618      	mov	r0, r3
 801149e:	f7fd f937 	bl	800e710 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	69db      	ldr	r3, [r3, #28]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d121      	bne.n	80114ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	699a      	ldr	r2, [r3, #24]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	18d1      	adds	r1, r2, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	6978      	ldr	r0, [r7, #20]
 80114b8:	f000 f8c8 	bl	801164c <prvInsertTimerInActiveList>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d015      	beq.n	80114ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80114c2:	2300      	movs	r3, #0
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	2300      	movs	r3, #0
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	2100      	movs	r1, #0
 80114cc:	6978      	ldr	r0, [r7, #20]
 80114ce:	f7ff ff8d 	bl	80113ec <xTimerGenericCommand>
 80114d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d109      	bne.n	80114ee <prvProcessExpiredTimer+0x6a>
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	f383 8811 	msr	BASEPRI, r3
 80114e2:	f3bf 8f6f 	isb	sy
 80114e6:	f3bf 8f4f 	dsb	sy
 80114ea:	60fb      	str	r3, [r7, #12]
 80114ec:	e7fe      	b.n	80114ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f2:	6978      	ldr	r0, [r7, #20]
 80114f4:	4798      	blx	r3
}
 80114f6:	bf00      	nop
 80114f8:	3718      	adds	r7, #24
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	200272f0 	.word	0x200272f0

08011504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801150c:	f107 0308 	add.w	r3, r7, #8
 8011510:	4618      	mov	r0, r3
 8011512:	f000 f857 	bl	80115c4 <prvGetNextExpireTime>
 8011516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	4619      	mov	r1, r3
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f000 f803 	bl	8011528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011522:	f000 f8d5 	bl	80116d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011526:	e7f1      	b.n	801150c <prvTimerTask+0x8>

08011528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011532:	f7fe fe05 	bl	8010140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011536:	f107 0308 	add.w	r3, r7, #8
 801153a:	4618      	mov	r0, r3
 801153c:	f000 f866 	bl	801160c <prvSampleTimeNow>
 8011540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d130      	bne.n	80115aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10a      	bne.n	8011564 <prvProcessTimerOrBlockTask+0x3c>
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	429a      	cmp	r2, r3
 8011554:	d806      	bhi.n	8011564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011556:	f7fe fe39 	bl	80101cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7ff ff91 	bl	8011484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011562:	e024      	b.n	80115ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d008      	beq.n	801157c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801156a:	4b13      	ldr	r3, [pc, #76]	; (80115b8 <prvProcessTimerOrBlockTask+0x90>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	bf0c      	ite	eq
 8011574:	2301      	moveq	r3, #1
 8011576:	2300      	movne	r3, #0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801157c:	4b0f      	ldr	r3, [pc, #60]	; (80115bc <prvProcessTimerOrBlockTask+0x94>)
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	4619      	mov	r1, r3
 801158a:	f7fe fb71 	bl	800fc70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801158e:	f7fe fe1d 	bl	80101cc <xTaskResumeAll>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011598:	4b09      	ldr	r3, [pc, #36]	; (80115c0 <prvProcessTimerOrBlockTask+0x98>)
 801159a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801159e:	601a      	str	r2, [r3, #0]
 80115a0:	f3bf 8f4f 	dsb	sy
 80115a4:	f3bf 8f6f 	isb	sy
}
 80115a8:	e001      	b.n	80115ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80115aa:	f7fe fe0f 	bl	80101cc <xTaskResumeAll>
}
 80115ae:	bf00      	nop
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	200272f4 	.word	0x200272f4
 80115bc:	200272f8 	.word	0x200272f8
 80115c0:	e000ed04 	.word	0xe000ed04

080115c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115cc:	4b0e      	ldr	r3, [pc, #56]	; (8011608 <prvGetNextExpireTime+0x44>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	bf0c      	ite	eq
 80115d6:	2301      	moveq	r3, #1
 80115d8:	2300      	movne	r3, #0
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	461a      	mov	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d105      	bne.n	80115f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115ea:	4b07      	ldr	r3, [pc, #28]	; (8011608 <prvGetNextExpireTime+0x44>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	e001      	b.n	80115fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80115fa:	68fb      	ldr	r3, [r7, #12]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3714      	adds	r7, #20
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	200272f0 	.word	0x200272f0

0801160c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011614:	f7fe fe76 	bl	8010304 <xTaskGetTickCount>
 8011618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801161a:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <prvSampleTimeNow+0x3c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	429a      	cmp	r2, r3
 8011622:	d205      	bcs.n	8011630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011624:	f000 f904 	bl	8011830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2201      	movs	r2, #1
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	e002      	b.n	8011636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2200      	movs	r2, #0
 8011634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011636:	4a04      	ldr	r2, [pc, #16]	; (8011648 <prvSampleTimeNow+0x3c>)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801163c:	68fb      	ldr	r3, [r7, #12]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	20027300 	.word	0x20027300

0801164c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b086      	sub	sp, #24
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801165a:	2300      	movs	r3, #0
 801165c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	68fa      	ldr	r2, [r7, #12]
 8011668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801166a:	68ba      	ldr	r2, [r7, #8]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	429a      	cmp	r2, r3
 8011670:	d812      	bhi.n	8011698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	1ad2      	subs	r2, r2, r3
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	699b      	ldr	r3, [r3, #24]
 801167c:	429a      	cmp	r2, r3
 801167e:	d302      	bcc.n	8011686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011680:	2301      	movs	r3, #1
 8011682:	617b      	str	r3, [r7, #20]
 8011684:	e01b      	b.n	80116be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011686:	4b10      	ldr	r3, [pc, #64]	; (80116c8 <prvInsertTimerInActiveList+0x7c>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3304      	adds	r3, #4
 801168e:	4619      	mov	r1, r3
 8011690:	4610      	mov	r0, r2
 8011692:	f7fd f804 	bl	800e69e <vListInsert>
 8011696:	e012      	b.n	80116be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	429a      	cmp	r2, r3
 801169e:	d206      	bcs.n	80116ae <prvInsertTimerInActiveList+0x62>
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d302      	bcc.n	80116ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80116a8:	2301      	movs	r3, #1
 80116aa:	617b      	str	r3, [r7, #20]
 80116ac:	e007      	b.n	80116be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80116ae:	4b07      	ldr	r3, [pc, #28]	; (80116cc <prvInsertTimerInActiveList+0x80>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3304      	adds	r3, #4
 80116b6:	4619      	mov	r1, r3
 80116b8:	4610      	mov	r0, r2
 80116ba:	f7fc fff0 	bl	800e69e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80116be:	697b      	ldr	r3, [r7, #20]
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3718      	adds	r7, #24
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	200272f4 	.word	0x200272f4
 80116cc:	200272f0 	.word	0x200272f0

080116d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b08e      	sub	sp, #56	; 0x38
 80116d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116d6:	e099      	b.n	801180c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	da17      	bge.n	801170e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80116de:	1d3b      	adds	r3, r7, #4
 80116e0:	3304      	adds	r3, #4
 80116e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80116e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d109      	bne.n	80116fe <prvProcessReceivedCommands+0x2e>
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	61fb      	str	r3, [r7, #28]
 80116fc:	e7fe      	b.n	80116fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011704:	6850      	ldr	r0, [r2, #4]
 8011706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011708:	6892      	ldr	r2, [r2, #8]
 801170a:	4611      	mov	r1, r2
 801170c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	db7a      	blt.n	801180a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011722:	3304      	adds	r3, #4
 8011724:	4618      	mov	r0, r3
 8011726:	f7fc fff3 	bl	800e710 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801172a:	463b      	mov	r3, r7
 801172c:	4618      	mov	r0, r3
 801172e:	f7ff ff6d 	bl	801160c <prvSampleTimeNow>
 8011732:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b09      	cmp	r3, #9
 8011738:	d868      	bhi.n	801180c <prvProcessReceivedCommands+0x13c>
 801173a:	a201      	add	r2, pc, #4	; (adr r2, 8011740 <prvProcessReceivedCommands+0x70>)
 801173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011740:	08011769 	.word	0x08011769
 8011744:	08011769 	.word	0x08011769
 8011748:	08011769 	.word	0x08011769
 801174c:	0801180d 	.word	0x0801180d
 8011750:	080117c3 	.word	0x080117c3
 8011754:	080117f9 	.word	0x080117f9
 8011758:	08011769 	.word	0x08011769
 801175c:	08011769 	.word	0x08011769
 8011760:	0801180d 	.word	0x0801180d
 8011764:	080117c3 	.word	0x080117c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011768:	68ba      	ldr	r2, [r7, #8]
 801176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176c:	699b      	ldr	r3, [r3, #24]
 801176e:	18d1      	adds	r1, r2, r3
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011776:	f7ff ff69 	bl	801164c <prvInsertTimerInActiveList>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d045      	beq.n	801180c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011786:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178a:	69db      	ldr	r3, [r3, #28]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d13d      	bne.n	801180c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011790:	68ba      	ldr	r2, [r7, #8]
 8011792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	441a      	add	r2, r3
 8011798:	2300      	movs	r3, #0
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	2300      	movs	r3, #0
 801179e:	2100      	movs	r1, #0
 80117a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117a2:	f7ff fe23 	bl	80113ec <xTimerGenericCommand>
 80117a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d12e      	bne.n	801180c <prvProcessReceivedCommands+0x13c>
 80117ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	61bb      	str	r3, [r7, #24]
 80117c0:	e7fe      	b.n	80117c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d109      	bne.n	80117e4 <prvProcessReceivedCommands+0x114>
 80117d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	617b      	str	r3, [r7, #20]
 80117e2:	e7fe      	b.n	80117e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80117e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e6:	699a      	ldr	r2, [r3, #24]
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	18d1      	adds	r1, r2, r3
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117f2:	f7ff ff2b 	bl	801164c <prvInsertTimerInActiveList>
					break;
 80117f6:	e009      	b.n	801180c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80117f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d104      	bne.n	801180c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8011802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011804:	f7fc fde4 	bl	800e3d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011808:	e000      	b.n	801180c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801180a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801180c:	4b07      	ldr	r3, [pc, #28]	; (801182c <prvProcessReceivedCommands+0x15c>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	1d39      	adds	r1, r7, #4
 8011812:	2200      	movs	r2, #0
 8011814:	4618      	mov	r0, r3
 8011816:	f7fd fe2d 	bl	800f474 <xQueueReceive>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	f47f af5b 	bne.w	80116d8 <prvProcessReceivedCommands+0x8>
	}
}
 8011822:	bf00      	nop
 8011824:	3730      	adds	r7, #48	; 0x30
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	200272f8 	.word	0x200272f8

08011830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b088      	sub	sp, #32
 8011834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011836:	e044      	b.n	80118c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011838:	4b2b      	ldr	r3, [pc, #172]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011842:	4b29      	ldr	r3, [pc, #164]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	3304      	adds	r3, #4
 8011850:	4618      	mov	r0, r3
 8011852:	f7fc ff5d 	bl	800e710 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	69db      	ldr	r3, [r3, #28]
 8011862:	2b01      	cmp	r3, #1
 8011864:	d12d      	bne.n	80118c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	699b      	ldr	r3, [r3, #24]
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	4413      	add	r3, r2
 801186e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	429a      	cmp	r2, r3
 8011876:	d90e      	bls.n	8011896 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011884:	4b18      	ldr	r3, [pc, #96]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	3304      	adds	r3, #4
 801188c:	4619      	mov	r1, r3
 801188e:	4610      	mov	r0, r2
 8011890:	f7fc ff05 	bl	800e69e <vListInsert>
 8011894:	e015      	b.n	80118c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011896:	2300      	movs	r3, #0
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	2300      	movs	r3, #0
 801189c:	693a      	ldr	r2, [r7, #16]
 801189e:	2100      	movs	r1, #0
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f7ff fda3 	bl	80113ec <xTimerGenericCommand>
 80118a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d109      	bne.n	80118c2 <prvSwitchTimerLists+0x92>
 80118ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b2:	f383 8811 	msr	BASEPRI, r3
 80118b6:	f3bf 8f6f 	isb	sy
 80118ba:	f3bf 8f4f 	dsb	sy
 80118be:	603b      	str	r3, [r7, #0]
 80118c0:	e7fe      	b.n	80118c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80118c2:	4b09      	ldr	r3, [pc, #36]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d1b5      	bne.n	8011838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80118cc:	4b06      	ldr	r3, [pc, #24]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80118d2:	4b06      	ldr	r3, [pc, #24]	; (80118ec <prvSwitchTimerLists+0xbc>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4a04      	ldr	r2, [pc, #16]	; (80118e8 <prvSwitchTimerLists+0xb8>)
 80118d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80118da:	4a04      	ldr	r2, [pc, #16]	; (80118ec <prvSwitchTimerLists+0xbc>)
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	6013      	str	r3, [r2, #0]
}
 80118e0:	bf00      	nop
 80118e2:	3718      	adds	r7, #24
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	200272f0 	.word	0x200272f0
 80118ec:	200272f4 	.word	0x200272f4

080118f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80118f6:	f7fd f859 	bl	800e9ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80118fa:	4b15      	ldr	r3, [pc, #84]	; (8011950 <prvCheckForValidListAndQueue+0x60>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d120      	bne.n	8011944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011902:	4814      	ldr	r0, [pc, #80]	; (8011954 <prvCheckForValidListAndQueue+0x64>)
 8011904:	f7fc fe7a 	bl	800e5fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011908:	4813      	ldr	r0, [pc, #76]	; (8011958 <prvCheckForValidListAndQueue+0x68>)
 801190a:	f7fc fe77 	bl	800e5fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801190e:	4b13      	ldr	r3, [pc, #76]	; (801195c <prvCheckForValidListAndQueue+0x6c>)
 8011910:	4a10      	ldr	r2, [pc, #64]	; (8011954 <prvCheckForValidListAndQueue+0x64>)
 8011912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011914:	4b12      	ldr	r3, [pc, #72]	; (8011960 <prvCheckForValidListAndQueue+0x70>)
 8011916:	4a10      	ldr	r2, [pc, #64]	; (8011958 <prvCheckForValidListAndQueue+0x68>)
 8011918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801191a:	2300      	movs	r3, #0
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	4b11      	ldr	r3, [pc, #68]	; (8011964 <prvCheckForValidListAndQueue+0x74>)
 8011920:	4a11      	ldr	r2, [pc, #68]	; (8011968 <prvCheckForValidListAndQueue+0x78>)
 8011922:	2110      	movs	r1, #16
 8011924:	200a      	movs	r0, #10
 8011926:	f7fd f99f 	bl	800ec68 <xQueueGenericCreateStatic>
 801192a:	4602      	mov	r2, r0
 801192c:	4b08      	ldr	r3, [pc, #32]	; (8011950 <prvCheckForValidListAndQueue+0x60>)
 801192e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <prvCheckForValidListAndQueue+0x60>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d005      	beq.n	8011944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011938:	4b05      	ldr	r3, [pc, #20]	; (8011950 <prvCheckForValidListAndQueue+0x60>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	490b      	ldr	r1, [pc, #44]	; (801196c <prvCheckForValidListAndQueue+0x7c>)
 801193e:	4618      	mov	r0, r3
 8011940:	f7fe f944 	bl	800fbcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011944:	f7fd f860 	bl	800ea08 <vPortExitCritical>
}
 8011948:	bf00      	nop
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	200272f8 	.word	0x200272f8
 8011954:	200272c8 	.word	0x200272c8
 8011958:	200272dc 	.word	0x200272dc
 801195c:	200272f0 	.word	0x200272f0
 8011960:	200272f4 	.word	0x200272f4
 8011964:	200273a4 	.word	0x200273a4
 8011968:	20027304 	.word	0x20027304
 801196c:	080160d4 	.word	0x080160d4

08011970 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b086      	sub	sp, #24
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d109      	bne.n	8011996 <xTimerIsTimerActive+0x26>
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	e7fe      	b.n	8011994 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8011996:	f7fd f809 	bl	800e9ac <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	695b      	ldr	r3, [r3, #20]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bf14      	ite	ne
 80119a2:	2301      	movne	r3, #1
 80119a4:	2300      	moveq	r3, #0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80119aa:	f7fd f82d 	bl	800ea08 <vPortExitCritical>

	return xTimerIsInActiveList;
 80119ae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80119b0:	4618      	mov	r0, r3
 80119b2:	3718      	adds	r7, #24
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d109      	bne.n	80119de <pvTimerGetTimerID+0x26>
 80119ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ce:	f383 8811 	msr	BASEPRI, r3
 80119d2:	f3bf 8f6f 	isb	sy
 80119d6:	f3bf 8f4f 	dsb	sy
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	e7fe      	b.n	80119dc <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 80119de:	f7fc ffe5 	bl	800e9ac <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	6a1b      	ldr	r3, [r3, #32]
 80119e6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80119e8:	f7fd f80e 	bl	800ea08 <vPortExitCritical>

	return pvReturn;
 80119ec:	693b      	ldr	r3, [r7, #16]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3718      	adds	r7, #24
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	460b      	mov	r3, r1
 8011a00:	70fb      	strb	r3, [r7, #3]
 8011a02:	4613      	mov	r3, r2
 8011a04:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8011a06:	f002 facb 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011a0a:	f002 fa67 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011a0e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f062 0260 	orn	r2, r2, #96	; 0x60
 8011a18:	701a      	strb	r2, [r3, #0]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	705a      	strb	r2, [r3, #1]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	709a      	strb	r2, [r3, #2]
 8011a22:	2200      	movs	r2, #0
 8011a24:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f042 0203 	orr.w	r2, r2, #3
 8011a2e:	711a      	strb	r2, [r3, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	715a      	strb	r2, [r3, #5]
 8011a34:	2200      	movs	r2, #0
 8011a36:	719a      	strb	r2, [r3, #6]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8011a42:	78fa      	ldrb	r2, [r7, #3]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8011a48:	78ba      	ldrb	r2, [r7, #2]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8011a4e:	f002 fa69 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011a52:	f002 fa4f 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011a56:	60f8      	str	r0, [r7, #12]
}
 8011a58:	bf00      	nop
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b086      	sub	sp, #24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8011a6e:	f002 fa97 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011a72:	f002 fa33 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011a76:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8011a80:	701a      	strb	r2, [r3, #0]
 8011a82:	2200      	movs	r2, #0
 8011a84:	705a      	strb	r2, [r3, #1]
 8011a86:	2200      	movs	r2, #0
 8011a88:	709a      	strb	r2, [r3, #2]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2200      	movs	r2, #0
 8011a92:	f042 0203 	orr.w	r2, r2, #3
 8011a96:	711a      	strb	r2, [r3, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	715a      	strb	r2, [r3, #5]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	719a      	strb	r2, [r3, #6]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8011ab0:	79fa      	ldrb	r2, [r7, #7]
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8011ab6:	f002 fa35 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011aba:	f002 fa1b 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011abe:	6178      	str	r0, [r7, #20]
}
 8011ac0:	bf00      	nop
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8011ad4:	f002 fa64 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011ad8:	f002 fa00 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011adc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8011ae6:	701a      	strb	r2, [r3, #0]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	705a      	strb	r2, [r3, #1]
 8011aec:	2200      	movs	r2, #0
 8011aee:	709a      	strb	r2, [r3, #2]
 8011af0:	2200      	movs	r2, #0
 8011af2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	f042 0202 	orr.w	r2, r2, #2
 8011afc:	711a      	strb	r2, [r3, #4]
 8011afe:	2200      	movs	r2, #0
 8011b00:	715a      	strb	r2, [r3, #5]
 8011b02:	2200      	movs	r2, #0
 8011b04:	719a      	strb	r2, [r3, #6]
 8011b06:	2200      	movs	r2, #0
 8011b08:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8011b10:	78fa      	ldrb	r2, [r7, #3]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011b16:	f002 fa05 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011b1a:	f002 f9eb 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011b1e:	60f8      	str	r0, [r7, #12]
}
 8011b20:	bf00      	nop
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8011b34:	f002 fa34 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011b38:	f002 f9d0 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011b3c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8011b46:	701a      	strb	r2, [r3, #0]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	705a      	strb	r2, [r3, #1]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	709a      	strb	r2, [r3, #2]
 8011b50:	2200      	movs	r2, #0
 8011b52:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2200      	movs	r2, #0
 8011b58:	f042 0202 	orr.w	r2, r2, #2
 8011b5c:	711a      	strb	r2, [r3, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	715a      	strb	r2, [r3, #5]
 8011b62:	2200      	movs	r2, #0
 8011b64:	719a      	strb	r2, [r3, #6]
 8011b66:	2200      	movs	r2, #0
 8011b68:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8011b70:	78fa      	ldrb	r2, [r7, #3]
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011b76:	f002 f9d5 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011b7a:	f002 f9bb 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011b7e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	b2db      	uxtb	r3, r3
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b084      	sub	sp, #16
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8011b98:	f002 fa02 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011b9c:	f002 f99e 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011ba0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f062 0250 	orn	r2, r2, #80	; 0x50
 8011baa:	701a      	strb	r2, [r3, #0]
 8011bac:	2200      	movs	r2, #0
 8011bae:	705a      	strb	r2, [r3, #1]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	709a      	strb	r2, [r3, #2]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f042 0202 	orr.w	r2, r2, #2
 8011bc0:	711a      	strb	r2, [r3, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	715a      	strb	r2, [r3, #5]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	719a      	strb	r2, [r3, #6]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8011bd4:	683a      	ldr	r2, [r7, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011bda:	f002 f9a3 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011bde:	f002 f989 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011be2:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	689b      	ldr	r3, [r3, #8]
 8011be8:	b2db      	uxtb	r3, r3
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b084      	sub	sp, #16
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011bfa:	f002 f9d1 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011bfe:	f002 f96d 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011c02:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2200      	movs	r2, #0
 8011c08:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8011c0c:	701a      	strb	r2, [r3, #0]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	705a      	strb	r2, [r3, #1]
 8011c12:	2200      	movs	r2, #0
 8011c14:	709a      	strb	r2, [r3, #2]
 8011c16:	2200      	movs	r2, #0
 8011c18:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f042 0201 	orr.w	r2, r2, #1
 8011c22:	711a      	strb	r2, [r3, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	715a      	strb	r2, [r3, #5]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	719a      	strb	r2, [r3, #6]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011c36:	f002 f975 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011c3a:	f002 f95b 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011c3e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	b2db      	uxtb	r3, r3
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b084      	sub	sp, #16
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
 8011c56:	460b      	mov	r3, r1
 8011c58:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8011c5a:	f002 f9a1 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011c5e:	f002 f93d 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011c62:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2200      	movs	r2, #0
 8011c68:	f062 0256 	orn	r2, r2, #86	; 0x56
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	705a      	strb	r2, [r3, #1]
 8011c72:	2200      	movs	r2, #0
 8011c74:	709a      	strb	r2, [r3, #2]
 8011c76:	2200      	movs	r2, #0
 8011c78:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f042 0202 	orr.w	r2, r2, #2
 8011c82:	711a      	strb	r2, [r3, #4]
 8011c84:	2200      	movs	r2, #0
 8011c86:	715a      	strb	r2, [r3, #5]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	719a      	strb	r2, [r3, #6]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8011c96:	887a      	ldrh	r2, [r7, #2]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8011c9c:	f002 f942 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011ca0:	f002 f928 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011ca4:	60f8      	str	r0, [r7, #12]
}
 8011ca6:	bf00      	nop
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b084      	sub	sp, #16
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011cb6:	f002 f973 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011cba:	f002 f90f 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011cbe:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f062 0261 	orn	r2, r2, #97	; 0x61
 8011cc8:	701a      	strb	r2, [r3, #0]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	705a      	strb	r2, [r3, #1]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	709a      	strb	r2, [r3, #2]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f042 0201 	orr.w	r2, r2, #1
 8011cde:	711a      	strb	r2, [r3, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	715a      	strb	r2, [r3, #5]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	719a      	strb	r2, [r3, #6]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011cf2:	f002 f917 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011cf6:	f002 f8fd 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011cfa:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	b2db      	uxtb	r3, r3
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b084      	sub	sp, #16
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011d12:	f002 f945 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011d16:	f002 f8e1 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011d1a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8011d24:	701a      	strb	r2, [r3, #0]
 8011d26:	2200      	movs	r2, #0
 8011d28:	705a      	strb	r2, [r3, #1]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	709a      	strb	r2, [r3, #2]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	f042 0201 	orr.w	r2, r2, #1
 8011d3a:	711a      	strb	r2, [r3, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	715a      	strb	r2, [r3, #5]
 8011d40:	2200      	movs	r2, #0
 8011d42:	719a      	strb	r2, [r3, #6]
 8011d44:	2200      	movs	r2, #0
 8011d46:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011d4e:	f002 f8e9 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011d52:	f002 f8cf 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011d56:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	b2db      	uxtb	r3, r3
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b084      	sub	sp, #16
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011d6e:	f002 f917 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011d72:	f002 f8b3 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011d76:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f062 0255 	orn	r2, r2, #85	; 0x55
 8011d80:	701a      	strb	r2, [r3, #0]
 8011d82:	2200      	movs	r2, #0
 8011d84:	705a      	strb	r2, [r3, #1]
 8011d86:	2200      	movs	r2, #0
 8011d88:	709a      	strb	r2, [r3, #2]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2200      	movs	r2, #0
 8011d92:	f042 0201 	orr.w	r2, r2, #1
 8011d96:	711a      	strb	r2, [r3, #4]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	715a      	strb	r2, [r3, #5]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	719a      	strb	r2, [r3, #6]
 8011da0:	2200      	movs	r2, #0
 8011da2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011daa:	f002 f8bb 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011dae:	f002 f8a1 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011db2:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	689b      	ldr	r3, [r3, #8]
 8011db8:	b29b      	uxth	r3, r3
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011dca:	f002 f8e9 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011dce:	f002 f885 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011dd2:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f062 0254 	orn	r2, r2, #84	; 0x54
 8011ddc:	701a      	strb	r2, [r3, #0]
 8011dde:	2200      	movs	r2, #0
 8011de0:	705a      	strb	r2, [r3, #1]
 8011de2:	2200      	movs	r2, #0
 8011de4:	709a      	strb	r2, [r3, #2]
 8011de6:	2200      	movs	r2, #0
 8011de8:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2200      	movs	r2, #0
 8011dee:	f042 0201 	orr.w	r2, r2, #1
 8011df2:	711a      	strb	r2, [r3, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	715a      	strb	r2, [r3, #5]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	719a      	strb	r2, [r3, #6]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011e06:	f002 f88d 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011e0a:	f002 f873 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011e0e:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	b2db      	uxtb	r3, r3
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3710      	adds	r7, #16
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b084      	sub	sp, #16
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8011e26:	f002 f8bb 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011e2a:	f002 f857 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011e2e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f062 0253 	orn	r2, r2, #83	; 0x53
 8011e38:	701a      	strb	r2, [r3, #0]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	705a      	strb	r2, [r3, #1]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	709a      	strb	r2, [r3, #2]
 8011e42:	2200      	movs	r2, #0
 8011e44:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f042 0201 	orr.w	r2, r2, #1
 8011e4e:	711a      	strb	r2, [r3, #4]
 8011e50:	2200      	movs	r2, #0
 8011e52:	715a      	strb	r2, [r3, #5]
 8011e54:	2200      	movs	r2, #0
 8011e56:	719a      	strb	r2, [r3, #6]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011e62:	f002 f85f 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011e66:	f002 f845 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011e6a:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	689b      	ldr	r3, [r3, #8]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8011e82:	f002 f88d 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011e86:	f002 f829 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011e8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	f062 0259 	orn	r2, r2, #89	; 0x59
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	2200      	movs	r2, #0
 8011e98:	705a      	strb	r2, [r3, #1]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	709a      	strb	r2, [r3, #2]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f042 0201 	orr.w	r2, r2, #1
 8011eaa:	711a      	strb	r2, [r3, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	715a      	strb	r2, [r3, #5]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	719a      	strb	r2, [r3, #6]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011ebe:	f002 f831 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011ec2:	f002 f817 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011ec6:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	689b      	ldr	r3, [r3, #8]

}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3710      	adds	r7, #16
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	60b9      	str	r1, [r7, #8]
 8011ede:	607a      	str	r2, [r7, #4]
 8011ee0:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8011ee2:	f002 f85d 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011ee6:	f001 fff9 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011eea:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f062 0258 	orn	r2, r2, #88	; 0x58
 8011ef4:	701a      	strb	r2, [r3, #0]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	705a      	strb	r2, [r3, #1]
 8011efa:	2200      	movs	r2, #0
 8011efc:	709a      	strb	r2, [r3, #2]
 8011efe:	2200      	movs	r2, #0
 8011f00:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	2200      	movs	r2, #0
 8011f06:	f042 0203 	orr.w	r2, r2, #3
 8011f0a:	711a      	strb	r2, [r3, #4]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	715a      	strb	r2, [r3, #5]
 8011f10:	2200      	movs	r2, #0
 8011f12:	719a      	strb	r2, [r3, #6]
 8011f14:	2200      	movs	r2, #0
 8011f16:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8011f18:	68ba      	ldr	r2, [r7, #8]
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8011f24:	683a      	ldr	r2, [r7, #0]
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8011f2a:	6a3a      	ldr	r2, [r7, #32]
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8011f30:	f001 fff8 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011f34:	f001 ffde 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011f38:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	b2db      	uxtb	r3, r3
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3718      	adds	r7, #24
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	460b      	mov	r3, r1
 8011f52:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8011f54:	f002 f824 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011f58:	f001 ffc0 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011f5c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8011f66:	701a      	strb	r2, [r3, #0]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	705a      	strb	r2, [r3, #1]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	709a      	strb	r2, [r3, #2]
 8011f70:	2200      	movs	r2, #0
 8011f72:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f042 0201 	orr.w	r2, r2, #1
 8011f7c:	711a      	strb	r2, [r3, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	715a      	strb	r2, [r3, #5]
 8011f82:	2200      	movs	r2, #0
 8011f84:	719a      	strb	r2, [r3, #6]
 8011f86:	2200      	movs	r2, #0
 8011f88:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8011f8a:	887a      	ldrh	r2, [r7, #2]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011f90:	f001 ffc8 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011f94:	f001 ffae 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011f98:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	b2db      	uxtb	r3, r3
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8011fb2:	f001 fff5 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8011fb6:	f001 ff91 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8011fba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f062 0249 	orn	r2, r2, #73	; 0x49
 8011fc4:	701a      	strb	r2, [r3, #0]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	705a      	strb	r2, [r3, #1]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	709a      	strb	r2, [r3, #2]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f042 0201 	orr.w	r2, r2, #1
 8011fda:	711a      	strb	r2, [r3, #4]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	715a      	strb	r2, [r3, #5]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	719a      	strb	r2, [r3, #6]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8011fe8:	683a      	ldr	r2, [r7, #0]
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8011fee:	f001 ff99 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8011ff2:	f001 ff7f 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8011ff6:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	b2db      	uxtb	r3, r3
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b086      	sub	sp, #24
 801200a:	af00      	add	r7, sp, #0
 801200c:	60f8      	str	r0, [r7, #12]
 801200e:	60b9      	str	r1, [r7, #8]
 8012010:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012012:	f001 ffc5 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012016:	f001 ff61 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 801201a:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	2200      	movs	r2, #0
 8012020:	f062 0257 	orn	r2, r2, #87	; 0x57
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	2200      	movs	r2, #0
 8012028:	705a      	strb	r2, [r3, #1]
 801202a:	2200      	movs	r2, #0
 801202c:	709a      	strb	r2, [r3, #2]
 801202e:	2200      	movs	r2, #0
 8012030:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	2200      	movs	r2, #0
 8012036:	f042 0202 	orr.w	r2, r2, #2
 801203a:	711a      	strb	r2, [r3, #4]
 801203c:	2200      	movs	r2, #0
 801203e:	715a      	strb	r2, [r3, #5]
 8012040:	2200      	movs	r2, #0
 8012042:	719a      	strb	r2, [r3, #6]
 8012044:	2200      	movs	r2, #0
 8012046:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012048:	68ba      	ldr	r2, [r7, #8]
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012054:	f001 ff66 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012058:	f001 ff4c 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 801205c:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	b2db      	uxtb	r3, r3
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8012072:	f001 ff95 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012076:	f001 ff31 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 801207a:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8012084:	701a      	strb	r2, [r3, #0]
 8012086:	2200      	movs	r2, #0
 8012088:	705a      	strb	r2, [r3, #1]
 801208a:	2200      	movs	r2, #0
 801208c:	709a      	strb	r2, [r3, #2]
 801208e:	2200      	movs	r2, #0
 8012090:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	711a      	strb	r2, [r3, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	715a      	strb	r2, [r3, #5]
 801209c:	2200      	movs	r2, #0
 801209e:	719a      	strb	r2, [r3, #6]
 80120a0:	2200      	movs	r2, #0
 80120a2:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80120a4:	f001 ff3e 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80120a8:	f001 ff24 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80120ac:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	689b      	ldr	r3, [r3, #8]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b084      	sub	sp, #16
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80120c2:	f001 ff6d 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80120c6:	f001 ff09 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 80120ca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2200      	movs	r2, #0
 80120d0:	f062 0269 	orn	r2, r2, #105	; 0x69
 80120d4:	701a      	strb	r2, [r3, #0]
 80120d6:	2200      	movs	r2, #0
 80120d8:	705a      	strb	r2, [r3, #1]
 80120da:	2200      	movs	r2, #0
 80120dc:	709a      	strb	r2, [r3, #2]
 80120de:	2200      	movs	r2, #0
 80120e0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	2200      	movs	r2, #0
 80120e6:	711a      	strb	r2, [r3, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	715a      	strb	r2, [r3, #5]
 80120ec:	2200      	movs	r2, #0
 80120ee:	719a      	strb	r2, [r3, #6]
 80120f0:	2200      	movs	r2, #0
 80120f2:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80120f4:	f001 ff16 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80120f8:	f001 fefc 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80120fc:	60f8      	str	r0, [r7, #12]
}
 80120fe:	bf00      	nop
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
	...

08012108 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b086      	sub	sp, #24
 801210c:	af00      	add	r7, sp, #0
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012114:	f001 ff44 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8012118:	4a15      	ldr	r2, [pc, #84]	; (8012170 <otSetStateChangedCallback+0x68>)
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801211e:	f001 fedd 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012122:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	2200      	movs	r2, #0
 8012128:	f062 0268 	orn	r2, r2, #104	; 0x68
 801212c:	701a      	strb	r2, [r3, #0]
 801212e:	2200      	movs	r2, #0
 8012130:	705a      	strb	r2, [r3, #1]
 8012132:	2200      	movs	r2, #0
 8012134:	709a      	strb	r2, [r3, #2]
 8012136:	2200      	movs	r2, #0
 8012138:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	2200      	movs	r2, #0
 801213e:	f042 0201 	orr.w	r2, r2, #1
 8012142:	711a      	strb	r2, [r3, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	715a      	strb	r2, [r3, #5]
 8012148:	2200      	movs	r2, #0
 801214a:	719a      	strb	r2, [r3, #6]
 801214c:	2200      	movs	r2, #0
 801214e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012156:	f001 fee5 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801215a:	f001 fecb 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 801215e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	b2db      	uxtb	r3, r3
}
 8012166:	4618      	mov	r0, r3
 8012168:	3718      	adds	r7, #24
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	200273f4 	.word	0x200273f4

08012174 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801217c:	f001 ff10 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012180:	f001 feac 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012184:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2200      	movs	r2, #0
 801218a:	f062 0264 	orn	r2, r2, #100	; 0x64
 801218e:	701a      	strb	r2, [r3, #0]
 8012190:	2200      	movs	r2, #0
 8012192:	705a      	strb	r2, [r3, #1]
 8012194:	2200      	movs	r2, #0
 8012196:	709a      	strb	r2, [r3, #2]
 8012198:	2200      	movs	r2, #0
 801219a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2200      	movs	r2, #0
 80121a0:	711a      	strb	r2, [r3, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	715a      	strb	r2, [r3, #5]
 80121a6:	2200      	movs	r2, #0
 80121a8:	719a      	strb	r2, [r3, #6]
 80121aa:	2200      	movs	r2, #0
 80121ac:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80121ae:	f001 feb9 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80121b2:	f001 fe9f 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80121b6:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	b2db      	uxtb	r3, r3
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3710      	adds	r7, #16
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}

080121c6 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80121c6:	b580      	push	{r7, lr}
 80121c8:	b084      	sub	sp, #16
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
 80121ce:	460b      	mov	r3, r1
 80121d0:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80121d2:	f001 fee5 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80121d6:	f001 fe81 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 80121da:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2200      	movs	r2, #0
 80121e0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80121e4:	701a      	strb	r2, [r3, #0]
 80121e6:	2200      	movs	r2, #0
 80121e8:	705a      	strb	r2, [r3, #1]
 80121ea:	2200      	movs	r2, #0
 80121ec:	709a      	strb	r2, [r3, #2]
 80121ee:	2200      	movs	r2, #0
 80121f0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f042 0201 	orr.w	r2, r2, #1
 80121fa:	711a      	strb	r2, [r3, #4]
 80121fc:	2200      	movs	r2, #0
 80121fe:	715a      	strb	r2, [r3, #5]
 8012200:	2200      	movs	r2, #0
 8012202:	719a      	strb	r2, [r3, #6]
 8012204:	2200      	movs	r2, #0
 8012206:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8012208:	78fa      	ldrb	r2, [r7, #3]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801220e:	f001 fe89 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012212:	f001 fe6f 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012216:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	689b      	ldr	r3, [r3, #8]
 801221c:	b2db      	uxtb	r3, r3
}
 801221e:	4618      	mov	r0, r3
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b084      	sub	sp, #16
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801222e:	f001 feb7 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012232:	f001 fe53 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012236:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2200      	movs	r2, #0
 801223c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8012240:	701a      	strb	r2, [r3, #0]
 8012242:	2200      	movs	r2, #0
 8012244:	705a      	strb	r2, [r3, #1]
 8012246:	2200      	movs	r2, #0
 8012248:	709a      	strb	r2, [r3, #2]
 801224a:	2200      	movs	r2, #0
 801224c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2200      	movs	r2, #0
 8012252:	711a      	strb	r2, [r3, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	715a      	strb	r2, [r3, #5]
 8012258:	2200      	movs	r2, #0
 801225a:	719a      	strb	r2, [r3, #6]
 801225c:	2200      	movs	r2, #0
 801225e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8012260:	f001 fe60 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012264:	f001 fe46 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012268:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	2b00      	cmp	r3, #0
 8012270:	bf14      	ite	ne
 8012272:	2301      	movne	r3, #1
 8012274:	2300      	moveq	r3, #0
 8012276:	b2db      	uxtb	r3, r3
}
 8012278:	4618      	mov	r0, r3
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8012288:	f001 fe8a 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801228c:	f001 fe26 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012290:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 801229a:	701a      	strb	r2, [r3, #0]
 801229c:	2200      	movs	r2, #0
 801229e:	705a      	strb	r2, [r3, #1]
 80122a0:	2200      	movs	r2, #0
 80122a2:	709a      	strb	r2, [r3, #2]
 80122a4:	2200      	movs	r2, #0
 80122a6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2200      	movs	r2, #0
 80122ac:	711a      	strb	r2, [r3, #4]
 80122ae:	2200      	movs	r2, #0
 80122b0:	715a      	strb	r2, [r3, #5]
 80122b2:	2200      	movs	r2, #0
 80122b4:	719a      	strb	r2, [r3, #6]
 80122b6:	2200      	movs	r2, #0
 80122b8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80122ba:	f001 fe33 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80122be:	f001 fe19 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80122c2:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	689b      	ldr	r3, [r3, #8]
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3710      	adds	r7, #16
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80122da:	f001 fe61 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80122de:	f001 fdfd 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 80122e2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2200      	movs	r2, #0
 80122e8:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80122ec:	701a      	strb	r2, [r3, #0]
 80122ee:	2200      	movs	r2, #0
 80122f0:	705a      	strb	r2, [r3, #1]
 80122f2:	2200      	movs	r2, #0
 80122f4:	709a      	strb	r2, [r3, #2]
 80122f6:	2200      	movs	r2, #0
 80122f8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f042 0202 	orr.w	r2, r2, #2
 8012302:	711a      	strb	r2, [r3, #4]
 8012304:	2200      	movs	r2, #0
 8012306:	715a      	strb	r2, [r3, #5]
 8012308:	2200      	movs	r2, #0
 801230a:	719a      	strb	r2, [r3, #6]
 801230c:	2200      	movs	r2, #0
 801230e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8012310:	687a      	ldr	r2, [r7, #4]
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801231c:	f001 fe02 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012320:	f001 fde8 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012324:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	b2db      	uxtb	r3, r3
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	460b      	mov	r3, r1
 801233e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8012340:	f001 fe2e 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012344:	f001 fdca 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012348:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2200      	movs	r2, #0
 801234e:	f042 0208 	orr.w	r2, r2, #8
 8012352:	701a      	strb	r2, [r3, #0]
 8012354:	2200      	movs	r2, #0
 8012356:	705a      	strb	r2, [r3, #1]
 8012358:	2200      	movs	r2, #0
 801235a:	709a      	strb	r2, [r3, #2]
 801235c:	2200      	movs	r2, #0
 801235e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2200      	movs	r2, #0
 8012364:	f042 0201 	orr.w	r2, r2, #1
 8012368:	711a      	strb	r2, [r3, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	715a      	strb	r2, [r3, #5]
 801236e:	2200      	movs	r2, #0
 8012370:	719a      	strb	r2, [r3, #6]
 8012372:	2200      	movs	r2, #0
 8012374:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8012376:	78fa      	ldrb	r2, [r7, #3]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801237c:	f001 fdd2 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012380:	f001 fdb8 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012384:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	689b      	ldr	r3, [r3, #8]
 801238a:	b2db      	uxtb	r3, r3
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	460b      	mov	r3, r1
 801239e:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80123a0:	f001 fdfe 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80123a4:	f001 fd9a 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 80123a8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	f042 020f 	orr.w	r2, r2, #15
 80123b2:	701a      	strb	r2, [r3, #0]
 80123b4:	2200      	movs	r2, #0
 80123b6:	705a      	strb	r2, [r3, #1]
 80123b8:	2200      	movs	r2, #0
 80123ba:	709a      	strb	r2, [r3, #2]
 80123bc:	2200      	movs	r2, #0
 80123be:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f042 0201 	orr.w	r2, r2, #1
 80123c8:	711a      	strb	r2, [r3, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	715a      	strb	r2, [r3, #5]
 80123ce:	2200      	movs	r2, #0
 80123d0:	719a      	strb	r2, [r3, #6]
 80123d2:	2200      	movs	r2, #0
 80123d4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80123d6:	887a      	ldrh	r2, [r7, #2]
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80123dc:	f001 fda2 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80123e0:	f001 fd88 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80123e4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	689b      	ldr	r3, [r3, #8]
 80123ea:	b2db      	uxtb	r3, r3
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3710      	adds	r7, #16
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80123fc:	f001 fdd0 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012400:	f001 fd6c 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012404:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2200      	movs	r2, #0
 801240a:	f062 0246 	orn	r2, r2, #70	; 0x46
 801240e:	701a      	strb	r2, [r3, #0]
 8012410:	2200      	movs	r2, #0
 8012412:	705a      	strb	r2, [r3, #1]
 8012414:	2200      	movs	r2, #0
 8012416:	709a      	strb	r2, [r3, #2]
 8012418:	2200      	movs	r2, #0
 801241a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2200      	movs	r2, #0
 8012420:	f042 0201 	orr.w	r2, r2, #1
 8012424:	711a      	strb	r2, [r3, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	715a      	strb	r2, [r3, #5]
 801242a:	2200      	movs	r2, #0
 801242c:	719a      	strb	r2, [r3, #6]
 801242e:	2200      	movs	r2, #0
 8012430:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012438:	f001 fd74 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801243c:	f001 fd5a 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012440:	60f8      	str	r0, [r7, #12]
}
 8012442:	bf00      	nop
 8012444:	3710      	adds	r7, #16
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b084      	sub	sp, #16
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012452:	f001 fda5 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012456:	f001 fd41 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 801245a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2200      	movs	r2, #0
 8012460:	f062 0243 	orn	r2, r2, #67	; 0x43
 8012464:	701a      	strb	r2, [r3, #0]
 8012466:	2200      	movs	r2, #0
 8012468:	705a      	strb	r2, [r3, #1]
 801246a:	2200      	movs	r2, #0
 801246c:	709a      	strb	r2, [r3, #2]
 801246e:	2200      	movs	r2, #0
 8012470:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2200      	movs	r2, #0
 8012476:	f042 0201 	orr.w	r2, r2, #1
 801247a:	711a      	strb	r2, [r3, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	715a      	strb	r2, [r3, #5]
 8012480:	2200      	movs	r2, #0
 8012482:	719a      	strb	r2, [r3, #6]
 8012484:	2200      	movs	r2, #0
 8012486:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801248e:	f001 fd49 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012492:	f001 fd2f 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012496:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	b29b      	uxth	r3, r3
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b086      	sub	sp, #24
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	60f8      	str	r0, [r7, #12]
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	4613      	mov	r3, r2
 80124b2:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 80124b4:	f001 fd74 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80124b8:	f001 fd10 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 80124bc:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2200      	movs	r2, #0
 80124c2:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80124c6:	701a      	strb	r2, [r3, #0]
 80124c8:	2200      	movs	r2, #0
 80124ca:	705a      	strb	r2, [r3, #1]
 80124cc:	2200      	movs	r2, #0
 80124ce:	709a      	strb	r2, [r3, #2]
 80124d0:	2200      	movs	r2, #0
 80124d2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f042 0203 	orr.w	r2, r2, #3
 80124dc:	711a      	strb	r2, [r3, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	715a      	strb	r2, [r3, #5]
 80124e2:	2200      	movs	r2, #0
 80124e4:	719a      	strb	r2, [r3, #6]
 80124e6:	2200      	movs	r2, #0
 80124e8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 80124f6:	88fa      	ldrh	r2, [r7, #6]
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80124fc:	f001 fd12 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012500:	f001 fcf8 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012504:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	689b      	ldr	r3, [r3, #8]
 801250a:	b2db      	uxtb	r3, r3
}
 801250c:	4618      	mov	r0, r3
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	607a      	str	r2, [r7, #4]
 801251e:	461a      	mov	r2, r3
 8012520:	460b      	mov	r3, r1
 8012522:	817b      	strh	r3, [r7, #10]
 8012524:	4613      	mov	r3, r2
 8012526:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8012528:	f001 fd3a 	bl	8013fa0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801252c:	f001 fcd6 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012530:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	2200      	movs	r2, #0
 8012536:	f062 023d 	orn	r2, r2, #61	; 0x3d
 801253a:	701a      	strb	r2, [r3, #0]
 801253c:	2200      	movs	r2, #0
 801253e:	705a      	strb	r2, [r3, #1]
 8012540:	2200      	movs	r2, #0
 8012542:	709a      	strb	r2, [r3, #2]
 8012544:	2200      	movs	r2, #0
 8012546:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2200      	movs	r2, #0
 801254c:	f042 0204 	orr.w	r2, r2, #4
 8012550:	711a      	strb	r2, [r3, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	715a      	strb	r2, [r3, #5]
 8012556:	2200      	movs	r2, #0
 8012558:	719a      	strb	r2, [r3, #6]
 801255a:	2200      	movs	r2, #0
 801255c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8012564:	897a      	ldrh	r2, [r7, #10]
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8012570:	893a      	ldrh	r2, [r7, #8]
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8012576:	f001 fcd5 	bl	8013f24 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801257a:	f001 fcbb 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 801257e:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	689b      	ldr	r3, [r3, #8]
}
 8012584:	4618      	mov	r0, r3
 8012586:	3718      	adds	r7, #24
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801258c:	b5b0      	push	{r4, r5, r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8012592:	2300      	movs	r3, #0
 8012594:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8012596:	f001 fcb9 	bl	8013f0c <THREAD_Get_NotificationPayloadBuffer>
 801259a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	2b14      	cmp	r3, #20
 80125a4:	f200 8172 	bhi.w	801288c <OpenThread_CallBack_Processing+0x300>
 80125a8:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <OpenThread_CallBack_Processing+0x24>)
 80125aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ae:	bf00      	nop
 80125b0:	08012605 	.word	0x08012605
 80125b4:	08012621 	.word	0x08012621
 80125b8:	0801264d 	.word	0x0801264d
 80125bc:	08012681 	.word	0x08012681
 80125c0:	0801268d 	.word	0x0801268d
 80125c4:	080126ab 	.word	0x080126ab
 80125c8:	080126c9 	.word	0x080126c9
 80125cc:	080126e7 	.word	0x080126e7
 80125d0:	08012705 	.word	0x08012705
 80125d4:	08012723 	.word	0x08012723
 80125d8:	08012745 	.word	0x08012745
 80125dc:	08012763 	.word	0x08012763
 80125e0:	0801288d 	.word	0x0801288d
 80125e4:	08012789 	.word	0x08012789
 80125e8:	080127bd 	.word	0x080127bd
 80125ec:	080127e5 	.word	0x080127e5
 80125f0:	08012803 	.word	0x08012803
 80125f4:	08012827 	.word	0x08012827
 80125f8:	0801284f 	.word	0x0801284f
 80125fc:	0801288d 	.word	0x0801288d
 8012600:	0801286d 	.word	0x0801286d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8012604:	4ba3      	ldr	r3, [pc, #652]	; (8012894 <OpenThread_CallBack_Processing+0x308>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 8167 	beq.w	80128dc <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801260e:	4ba1      	ldr	r3, [pc, #644]	; (8012894 <OpenThread_CallBack_Processing+0x308>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8012616:	683a      	ldr	r2, [r7, #0]
 8012618:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801261a:	4611      	mov	r1, r2
 801261c:	4798      	blx	r3
        }
        break;
 801261e:	e15d      	b.n	80128dc <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	461a      	mov	r2, r3
 8012626:	4b9c      	ldr	r3, [pc, #624]	; (8012898 <OpenThread_CallBack_Processing+0x30c>)
 8012628:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801262a:	4b9b      	ldr	r3, [pc, #620]	; (8012898 <OpenThread_CallBack_Processing+0x30c>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	f000 8156 	beq.w	80128e0 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012634:	4b98      	ldr	r3, [pc, #608]	; (8012898 <OpenThread_CallBack_Processing+0x30c>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	68d2      	ldr	r2, [r2, #12]
 801263c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012642:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8012644:	683a      	ldr	r2, [r7, #0]
 8012646:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012648:	4798      	blx	r3
        }
        break;
 801264a:	e149      	b.n	80128e0 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	461a      	mov	r2, r3
 8012652:	4b92      	ldr	r3, [pc, #584]	; (801289c <OpenThread_CallBack_Processing+0x310>)
 8012654:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8012656:	4b91      	ldr	r3, [pc, #580]	; (801289c <OpenThread_CallBack_Processing+0x310>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	f000 8142 	beq.w	80128e4 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012660:	4b8e      	ldr	r3, [pc, #568]	; (801289c <OpenThread_CallBack_Processing+0x310>)
 8012662:	681c      	ldr	r4, [r3, #0]
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801266e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8012674:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801267a:	b2db      	uxtb	r3, r3
 801267c:	47a0      	blx	r4
        }
        break;
 801267e:	e131      	b.n	80128e4 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8012680:	2001      	movs	r0, #1
 8012682:	f000 f968 	bl	8012956 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8012686:	f7f4 ffa2 	bl	80075ce <HAL_NVIC_SystemReset>
        break;
 801268a:	e14a      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 801268c:	4b84      	ldr	r3, [pc, #528]	; (80128a0 <OpenThread_CallBack_Processing+0x314>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	f000 8129 	beq.w	80128e8 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8012696:	4b82      	ldr	r3, [pc, #520]	; (80128a0 <OpenThread_CallBack_Processing+0x314>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	683a      	ldr	r2, [r7, #0]
 801269c:	6892      	ldr	r2, [r2, #8]
 801269e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80126a4:	4611      	mov	r1, r2
 80126a6:	4798      	blx	r3
        }
        break;
 80126a8:	e11e      	b.n	80128e8 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 80126aa:	4b7e      	ldr	r3, [pc, #504]	; (80128a4 <OpenThread_CallBack_Processing+0x318>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f000 811c 	beq.w	80128ec <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80126b4:	4b7b      	ldr	r3, [pc, #492]	; (80128a4 <OpenThread_CallBack_Processing+0x318>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	6892      	ldr	r2, [r2, #8]
 80126bc:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80126c2:	2000      	movs	r0, #0
 80126c4:	4798      	blx	r3
        }
        break;
 80126c6:	e111      	b.n	80128ec <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80126c8:	4b77      	ldr	r3, [pc, #476]	; (80128a8 <OpenThread_CallBack_Processing+0x31c>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 810f 	beq.w	80128f0 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80126d2:	4b75      	ldr	r3, [pc, #468]	; (80128a8 <OpenThread_CallBack_Processing+0x31c>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	6892      	ldr	r2, [r2, #8]
 80126da:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80126dc:	683a      	ldr	r2, [r7, #0]
 80126de:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80126e0:	4611      	mov	r1, r2
 80126e2:	4798      	blx	r3
        }
        break;
 80126e4:	e104      	b.n	80128f0 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80126e6:	4b71      	ldr	r3, [pc, #452]	; (80128ac <OpenThread_CallBack_Processing+0x320>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f000 8102 	beq.w	80128f4 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80126f0:	4b6e      	ldr	r3, [pc, #440]	; (80128ac <OpenThread_CallBack_Processing+0x320>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	683a      	ldr	r2, [r7, #0]
 80126f6:	6892      	ldr	r2, [r2, #8]
 80126f8:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80126fa:	683a      	ldr	r2, [r7, #0]
 80126fc:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80126fe:	4611      	mov	r1, r2
 8012700:	4798      	blx	r3
        }
        break;
 8012702:	e0f7      	b.n	80128f4 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8012704:	4b6a      	ldr	r3, [pc, #424]	; (80128b0 <OpenThread_CallBack_Processing+0x324>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	f000 80f5 	beq.w	80128f8 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801270e:	4b68      	ldr	r3, [pc, #416]	; (80128b0 <OpenThread_CallBack_Processing+0x324>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	6892      	ldr	r2, [r2, #8]
 8012716:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8012718:	683a      	ldr	r2, [r7, #0]
 801271a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801271c:	4611      	mov	r1, r2
 801271e:	4798      	blx	r3
        }
        break;
 8012720:	e0ea      	b.n	80128f8 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8012722:	4b64      	ldr	r3, [pc, #400]	; (80128b4 <OpenThread_CallBack_Processing+0x328>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	f000 80e8 	beq.w	80128fc <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801272c:	4b61      	ldr	r3, [pc, #388]	; (80128b4 <OpenThread_CallBack_Processing+0x328>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	683a      	ldr	r2, [r7, #0]
 8012732:	6892      	ldr	r2, [r2, #8]
 8012734:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8012736:	683a      	ldr	r2, [r7, #0]
 8012738:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801273a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801273c:	683a      	ldr	r2, [r7, #0]
 801273e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8012740:	4798      	blx	r3
        }
        break;
 8012742:	e0db      	b.n	80128fc <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8012744:	4b5c      	ldr	r3, [pc, #368]	; (80128b8 <OpenThread_CallBack_Processing+0x32c>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	f000 80d9 	beq.w	8012900 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801274e:	4b5a      	ldr	r3, [pc, #360]	; (80128b8 <OpenThread_CallBack_Processing+0x32c>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	6892      	ldr	r2, [r2, #8]
 8012756:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8012758:	683a      	ldr	r2, [r7, #0]
 801275a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801275c:	4611      	mov	r1, r2
 801275e:	4798      	blx	r3
        }
        break;
 8012760:	e0ce      	b.n	8012900 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8012762:	4b56      	ldr	r3, [pc, #344]	; (80128bc <OpenThread_CallBack_Processing+0x330>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	f000 80cc 	beq.w	8012904 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801276c:	4b53      	ldr	r3, [pc, #332]	; (80128bc <OpenThread_CallBack_Processing+0x330>)
 801276e:	681c      	ldr	r4, [r3, #0]
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012778:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801277e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8012784:	47a0      	blx	r4
        }
        break;
 8012786:	e0bd      	b.n	8012904 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8012788:	4b4d      	ldr	r3, [pc, #308]	; (80128c0 <OpenThread_CallBack_Processing+0x334>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	f000 80bb 	beq.w	8012908 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8012792:	4b4b      	ldr	r3, [pc, #300]	; (80128c0 <OpenThread_CallBack_Processing+0x334>)
 8012794:	681c      	ldr	r4, [r3, #0]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80127a0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80127a6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	4613      	mov	r3, r2
 80127b6:	462a      	mov	r2, r5
 80127b8:	47a0      	blx	r4
        }
        break;
 80127ba:	e0a5      	b.n	8012908 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80127bc:	4b41      	ldr	r3, [pc, #260]	; (80128c4 <OpenThread_CallBack_Processing+0x338>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f000 80a3 	beq.w	801290c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80127c6:	4b3f      	ldr	r3, [pc, #252]	; (80128c4 <OpenThread_CallBack_Processing+0x338>)
 80127c8:	681c      	ldr	r4, [r3, #0]
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80127d4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80127da:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80127e0:	47a0      	blx	r4
        }
        break;
 80127e2:	e093      	b.n	801290c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 80127e4:	4b38      	ldr	r3, [pc, #224]	; (80128c8 <OpenThread_CallBack_Processing+0x33c>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 8091 	beq.w	8012910 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 80127ee:	4b36      	ldr	r3, [pc, #216]	; (80128c8 <OpenThread_CallBack_Processing+0x33c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	683a      	ldr	r2, [r7, #0]
 80127f4:	6892      	ldr	r2, [r2, #8]
 80127f6:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 80127f8:	683a      	ldr	r2, [r7, #0]
 80127fa:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 80127fc:	4611      	mov	r1, r2
 80127fe:	4798      	blx	r3
        }
        break;
 8012800:	e086      	b.n	8012910 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8012802:	4b32      	ldr	r3, [pc, #200]	; (80128cc <OpenThread_CallBack_Processing+0x340>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 8084 	beq.w	8012914 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801280c:	4b2f      	ldr	r3, [pc, #188]	; (80128cc <OpenThread_CallBack_Processing+0x340>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	683a      	ldr	r2, [r7, #0]
 8012812:	6892      	ldr	r2, [r2, #8]
 8012814:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801281a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8012820:	b2d2      	uxtb	r2, r2
 8012822:	4798      	blx	r3
        }
        break;
 8012824:	e076      	b.n	8012914 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8012826:	4b2a      	ldr	r3, [pc, #168]	; (80128d0 <OpenThread_CallBack_Processing+0x344>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d074      	beq.n	8012918 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801282e:	4b28      	ldr	r3, [pc, #160]	; (80128d0 <OpenThread_CallBack_Processing+0x344>)
 8012830:	681c      	ldr	r4, [r3, #0]
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801283c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012842:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8012848:	b2db      	uxtb	r3, r3
 801284a:	47a0      	blx	r4
        }
        break;
 801284c:	e064      	b.n	8012918 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801284e:	4b21      	ldr	r3, [pc, #132]	; (80128d4 <OpenThread_CallBack_Processing+0x348>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d062      	beq.n	801291c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8012856:	4b1f      	ldr	r3, [pc, #124]	; (80128d4 <OpenThread_CallBack_Processing+0x348>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	6892      	ldr	r2, [r2, #8]
 801285e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8012860:	683a      	ldr	r2, [r7, #0]
 8012862:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8012864:	b252      	sxtb	r2, r2
 8012866:	4611      	mov	r1, r2
 8012868:	4798      	blx	r3
        }
        break;
 801286a:	e057      	b.n	801291c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801286c:	4b1a      	ldr	r3, [pc, #104]	; (80128d8 <OpenThread_CallBack_Processing+0x34c>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d055      	beq.n	8012920 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012874:	4b18      	ldr	r3, [pc, #96]	; (80128d8 <OpenThread_CallBack_Processing+0x34c>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	6892      	ldr	r2, [r2, #8]
 801287c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 801287e:	683a      	ldr	r2, [r7, #0]
 8012880:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012882:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8012884:	683a      	ldr	r2, [r7, #0]
 8012886:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8012888:	4798      	blx	r3
        }
        break;
 801288a:	e049      	b.n	8012920 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 801288c:	2301      	movs	r3, #1
 801288e:	71fb      	strb	r3, [r7, #7]
        break;
 8012890:	e047      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
 8012892:	bf00      	nop
 8012894:	200273f4 	.word	0x200273f4
 8012898:	20027434 	.word	0x20027434
 801289c:	20027438 	.word	0x20027438
 80128a0:	200273fc 	.word	0x200273fc
 80128a4:	200273f8 	.word	0x200273f8
 80128a8:	20027400 	.word	0x20027400
 80128ac:	20027404 	.word	0x20027404
 80128b0:	20027408 	.word	0x20027408
 80128b4:	2002740c 	.word	0x2002740c
 80128b8:	20027410 	.word	0x20027410
 80128bc:	20027414 	.word	0x20027414
 80128c0:	20027418 	.word	0x20027418
 80128c4:	2002741c 	.word	0x2002741c
 80128c8:	20027420 	.word	0x20027420
 80128cc:	20027424 	.word	0x20027424
 80128d0:	20027428 	.word	0x20027428
 80128d4:	2002742c 	.word	0x2002742c
 80128d8:	20027430 	.word	0x20027430
        break;
 80128dc:	bf00      	nop
 80128de:	e020      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128e0:	bf00      	nop
 80128e2:	e01e      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128e4:	bf00      	nop
 80128e6:	e01c      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128e8:	bf00      	nop
 80128ea:	e01a      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128ec:	bf00      	nop
 80128ee:	e018      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128f0:	bf00      	nop
 80128f2:	e016      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128f4:	bf00      	nop
 80128f6:	e014      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128f8:	bf00      	nop
 80128fa:	e012      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 80128fc:	bf00      	nop
 80128fe:	e010      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012900:	bf00      	nop
 8012902:	e00e      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012904:	bf00      	nop
 8012906:	e00c      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012908:	bf00      	nop
 801290a:	e00a      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 801290c:	bf00      	nop
 801290e:	e008      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012910:	bf00      	nop
 8012912:	e006      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012914:	bf00      	nop
 8012916:	e004      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012918:	bf00      	nop
 801291a:	e002      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 801291c:	bf00      	nop
 801291e:	e000      	b.n	8012922 <OpenThread_CallBack_Processing+0x396>
        break;
 8012920:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8012922:	f000 fcdf 	bl	80132e4 <TL_THREAD_SendAck>
    return status;
 8012926:	79fb      	ldrb	r3, [r7, #7]

}
 8012928:	4618      	mov	r0, r3
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bdb0      	pop	{r4, r5, r7, pc}

08012930 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012936:	1d3b      	adds	r3, r7, #4
 8012938:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2200      	movs	r2, #0
 801293e:	2100      	movs	r1, #0
 8012940:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8012944:	f000 f914 	bl	8012b70 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	330b      	adds	r3, #11
 801294c:	78db      	ldrb	r3, [r3, #3]
}
 801294e:	4618      	mov	r0, r3
 8012950:	3718      	adds	r7, #24
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}

08012956 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8012956:	b580      	push	{r7, lr}
 8012958:	b088      	sub	sp, #32
 801295a:	af00      	add	r7, sp, #0
 801295c:	4603      	mov	r3, r0
 801295e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012960:	f107 030c 	add.w	r3, r7, #12
 8012964:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8012966:	79fb      	ldrb	r3, [r7, #7]
 8012968:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 801296a:	f107 020c 	add.w	r2, r7, #12
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	2101      	movs	r1, #1
 8012972:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8012976:	f000 f8fb 	bl	8012b70 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	330b      	adds	r3, #11
 801297e:	78db      	ldrb	r3, [r3, #3]
}
 8012980:	4618      	mov	r0, r3
 8012982:	3720      	adds	r7, #32
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012988:	b480      	push	{r7}
 801298a:	b089      	sub	sp, #36	; 0x24
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012990:	2300      	movs	r3, #0
 8012992:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8012994:	2300      	movs	r3, #0
 8012996:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8012998:	2300      	movs	r3, #0
 801299a:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 801299c:	2300      	movs	r3, #0
 801299e:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80129a4:	4b3c      	ldr	r3, [pc, #240]	; (8012a98 <SHCI_GetWirelessFwInfo+0x110>)
 80129a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80129ac:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80129b6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80129ba:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	0e1b      	lsrs	r3, r3, #24
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	0c1b      	lsrs	r3, r3, #16
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	0a1b      	lsrs	r3, r3, #8
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	091b      	lsrs	r3, r3, #4
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	f003 030f 	and.w	r3, r3, #15
 80129ec:	b2da      	uxtb	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	f003 030f 	and.w	r3, r3, #15
 80129fa:	b2da      	uxtb	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012a00:	69bb      	ldr	r3, [r7, #24]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	695b      	ldr	r3, [r3, #20]
 8012a06:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	0e1b      	lsrs	r3, r3, #24
 8012a0c:	b2da      	uxtb	r2, r3
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	0c1b      	lsrs	r3, r3, #16
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	0a1b      	lsrs	r3, r3, #8
 8012a20:	b2da      	uxtb	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	699b      	ldr	r3, [r3, #24]
 8012a34:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	b2da      	uxtb	r2, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	0e1b      	lsrs	r3, r3, #24
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	0c1b      	lsrs	r3, r3, #16
 8012a54:	b2da      	uxtb	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	0a1b      	lsrs	r3, r3, #8
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	0e1b      	lsrs	r3, r3, #24
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	0c1b      	lsrs	r3, r3, #16
 8012a7a:	b2da      	uxtb	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	b2da      	uxtb	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8012a88:	2300      	movs	r3, #0
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3724      	adds	r7, #36	; 0x24
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a94:	4770      	bx	lr
 8012a96:	bf00      	nop
 8012a98:	58004000 	.word	0x58004000

08012a9c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	4a08      	ldr	r2, [pc, #32]	; (8012acc <shci_init+0x30>)
 8012aac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8012aae:	4a08      	ldr	r2, [pc, #32]	; (8012ad0 <shci_init+0x34>)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8012ab4:	4806      	ldr	r0, [pc, #24]	; (8012ad0 <shci_init+0x34>)
 8012ab6:	f000 f911 	bl	8012cdc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f000 f894 	bl	8012bec <TlInit>

  return;
 8012ac4:	bf00      	nop
}
 8012ac6:	3708      	adds	r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	2002745c 	.word	0x2002745c
 8012ad0:	2002743c 	.word	0x2002743c

08012ad4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012ada:	4822      	ldr	r0, [pc, #136]	; (8012b64 <shci_user_evt_proc+0x90>)
 8012adc:	f000 f922 	bl	8012d24 <LST_is_empty>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d12b      	bne.n	8012b3e <shci_user_evt_proc+0x6a>
 8012ae6:	4b20      	ldr	r3, [pc, #128]	; (8012b68 <shci_user_evt_proc+0x94>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d027      	beq.n	8012b3e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012aee:	f107 030c 	add.w	r3, r7, #12
 8012af2:	4619      	mov	r1, r3
 8012af4:	481b      	ldr	r0, [pc, #108]	; (8012b64 <shci_user_evt_proc+0x90>)
 8012af6:	f000 f99c 	bl	8012e32 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012afa:	4b1c      	ldr	r3, [pc, #112]	; (8012b6c <shci_user_evt_proc+0x98>)
 8012afc:	69db      	ldr	r3, [r3, #28]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d00c      	beq.n	8012b1c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8012b06:	2301      	movs	r3, #1
 8012b08:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012b0a:	4b18      	ldr	r3, [pc, #96]	; (8012b6c <shci_user_evt_proc+0x98>)
 8012b0c:	69db      	ldr	r3, [r3, #28]
 8012b0e:	1d3a      	adds	r2, r7, #4
 8012b10:	4610      	mov	r0, r2
 8012b12:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8012b14:	793a      	ldrb	r2, [r7, #4]
 8012b16:	4b14      	ldr	r3, [pc, #80]	; (8012b68 <shci_user_evt_proc+0x94>)
 8012b18:	701a      	strb	r2, [r3, #0]
 8012b1a:	e002      	b.n	8012b22 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012b1c:	4b12      	ldr	r3, [pc, #72]	; (8012b68 <shci_user_evt_proc+0x94>)
 8012b1e:	2201      	movs	r2, #1
 8012b20:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8012b22:	4b11      	ldr	r3, [pc, #68]	; (8012b68 <shci_user_evt_proc+0x94>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d004      	beq.n	8012b34 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f000 fc55 	bl	80133dc <TL_MM_EvtDone>
 8012b32:	e004      	b.n	8012b3e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	4619      	mov	r1, r3
 8012b38:	480a      	ldr	r0, [pc, #40]	; (8012b64 <shci_user_evt_proc+0x90>)
 8012b3a:	f000 f913 	bl	8012d64 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012b3e:	4809      	ldr	r0, [pc, #36]	; (8012b64 <shci_user_evt_proc+0x90>)
 8012b40:	f000 f8f0 	bl	8012d24 <LST_is_empty>
 8012b44:	4603      	mov	r3, r0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d107      	bne.n	8012b5a <shci_user_evt_proc+0x86>
 8012b4a:	4b07      	ldr	r3, [pc, #28]	; (8012b68 <shci_user_evt_proc+0x94>)
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d003      	beq.n	8012b5a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8012b52:	4804      	ldr	r0, [pc, #16]	; (8012b64 <shci_user_evt_proc+0x90>)
 8012b54:	f7ee fb2e 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8012b58:	bf00      	nop
 8012b5a:	bf00      	nop
}
 8012b5c:	3710      	adds	r7, #16
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	200001d4 	.word	0x200001d4
 8012b68:	200001e4 	.word	0x200001e4
 8012b6c:	2002743c 	.word	0x2002743c

08012b70 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	60ba      	str	r2, [r7, #8]
 8012b78:	607b      	str	r3, [r7, #4]
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	81fb      	strh	r3, [r7, #14]
 8012b7e:	460b      	mov	r3, r1
 8012b80:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8012b82:	2000      	movs	r0, #0
 8012b84:	f000 f864 	bl	8012c50 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012b88:	4b16      	ldr	r3, [pc, #88]	; (8012be4 <shci_send+0x74>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	89fa      	ldrh	r2, [r7, #14]
 8012b8e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8012b92:	4b14      	ldr	r3, [pc, #80]	; (8012be4 <shci_send+0x74>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	7b7a      	ldrb	r2, [r7, #13]
 8012b98:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8012b9a:	4b12      	ldr	r3, [pc, #72]	; (8012be4 <shci_send+0x74>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	330c      	adds	r3, #12
 8012ba0:	7b7a      	ldrb	r2, [r7, #13]
 8012ba2:	68b9      	ldr	r1, [r7, #8]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f002 f8cf 	bl	8014d48 <memcpy>

  shciContext.io.Send(0,0);
 8012baa:	4b0f      	ldr	r3, [pc, #60]	; (8012be8 <shci_send+0x78>)
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	2100      	movs	r1, #0
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8012bb4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8012bb8:	f7ee fb1c 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f103 0008 	add.w	r0, r3, #8
 8012bc2:	4b08      	ldr	r3, [pc, #32]	; (8012be4 <shci_send+0x74>)
 8012bc4:	6819      	ldr	r1, [r3, #0]
 8012bc6:	4b07      	ldr	r3, [pc, #28]	; (8012be4 <shci_send+0x74>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	789b      	ldrb	r3, [r3, #2]
 8012bcc:	3303      	adds	r3, #3
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f002 f8ba 	bl	8014d48 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f000 f83b 	bl	8012c50 <Cmd_SetStatus>

  return;
 8012bda:	bf00      	nop
}
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	200001e0 	.word	0x200001e0
 8012be8:	2002743c 	.word	0x2002743c

08012bec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012bf4:	4a10      	ldr	r2, [pc, #64]	; (8012c38 <TlInit+0x4c>)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012bfa:	4810      	ldr	r0, [pc, #64]	; (8012c3c <TlInit+0x50>)
 8012bfc:	f000 f882 	bl	8012d04 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012c00:	2001      	movs	r0, #1
 8012c02:	f000 f825 	bl	8012c50 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012c06:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <TlInit+0x54>)
 8012c08:	2201      	movs	r2, #1
 8012c0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012c0c:	4b0d      	ldr	r3, [pc, #52]	; (8012c44 <TlInit+0x58>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00c      	beq.n	8012c2e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012c18:	4b0b      	ldr	r3, [pc, #44]	; (8012c48 <TlInit+0x5c>)
 8012c1a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8012c1c:	4b0b      	ldr	r3, [pc, #44]	; (8012c4c <TlInit+0x60>)
 8012c1e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012c20:	4b08      	ldr	r3, [pc, #32]	; (8012c44 <TlInit+0x58>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f107 020c 	add.w	r2, r7, #12
 8012c28:	4610      	mov	r0, r2
 8012c2a:	4798      	blx	r3
  }

  return;
 8012c2c:	bf00      	nop
 8012c2e:	bf00      	nop
}
 8012c30:	3718      	adds	r7, #24
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	200001e0 	.word	0x200001e0
 8012c3c:	200001d4 	.word	0x200001d4
 8012c40:	200001e4 	.word	0x200001e4
 8012c44:	2002743c 	.word	0x2002743c
 8012c48:	08012ca1 	.word	0x08012ca1
 8012c4c:	08012cb9 	.word	0x08012cb9

08012c50 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4603      	mov	r3, r0
 8012c58:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8012c5a:	79fb      	ldrb	r3, [r7, #7]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d10b      	bne.n	8012c78 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012c60:	4b0d      	ldr	r3, [pc, #52]	; (8012c98 <Cmd_SetStatus+0x48>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d003      	beq.n	8012c70 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012c68:	4b0b      	ldr	r3, [pc, #44]	; (8012c98 <Cmd_SetStatus+0x48>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012c70:	4b0a      	ldr	r3, [pc, #40]	; (8012c9c <Cmd_SetStatus+0x4c>)
 8012c72:	2200      	movs	r2, #0
 8012c74:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8012c76:	e00b      	b.n	8012c90 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012c78:	4b08      	ldr	r3, [pc, #32]	; (8012c9c <Cmd_SetStatus+0x4c>)
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8012c7e:	4b06      	ldr	r3, [pc, #24]	; (8012c98 <Cmd_SetStatus+0x48>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8012c86:	4b04      	ldr	r3, [pc, #16]	; (8012c98 <Cmd_SetStatus+0x48>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2001      	movs	r0, #1
 8012c8c:	4798      	blx	r3
  return;
 8012c8e:	bf00      	nop
 8012c90:	bf00      	nop
}
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	2002745c 	.word	0x2002745c
 8012c9c:	200001dc 	.word	0x200001dc

08012ca0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8012ca8:	2000      	movs	r0, #0
 8012caa:	f7ee fa93 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8012cae:	bf00      	nop
}
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
	...

08012cb8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012cc0:	6879      	ldr	r1, [r7, #4]
 8012cc2:	4805      	ldr	r0, [pc, #20]	; (8012cd8 <TlUserEvtReceived+0x20>)
 8012cc4:	f000 f872 	bl	8012dac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012cc8:	4803      	ldr	r0, [pc, #12]	; (8012cd8 <TlUserEvtReceived+0x20>)
 8012cca:	f7ee fa73 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8012cce:	bf00      	nop
}
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	200001d4 	.word	0x200001d4

08012cdc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <shci_register_io_bus+0x20>)
 8012ce8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4a04      	ldr	r2, [pc, #16]	; (8012d00 <shci_register_io_bus+0x24>)
 8012cee:	611a      	str	r2, [r3, #16]

  return;
 8012cf0:	bf00      	nop
}
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr
 8012cfc:	080131a1 	.word	0x080131a1
 8012d00:	080131f5 	.word	0x080131f5

08012d04 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	605a      	str	r2, [r3, #4]
}
 8012d18:	bf00      	nop
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b087      	sub	sp, #28
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8012d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012d36:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	687a      	ldr	r2, [r7, #4]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d102      	bne.n	8012d48 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8012d42:	2301      	movs	r3, #1
 8012d44:	75fb      	strb	r3, [r7, #23]
 8012d46:	e001      	b.n	8012d4c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	75fb      	strb	r3, [r7, #23]
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	371c      	adds	r7, #28
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b087      	sub	sp, #28
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d72:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d74:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012d78:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	683a      	ldr	r2, [r7, #0]
 8012d8c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	683a      	ldr	r2, [r7, #0]
 8012d94:	605a      	str	r2, [r3, #4]
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012da0:	bf00      	nop
 8012da2:	371c      	adds	r7, #28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b087      	sub	sp, #28
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012db6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dba:	60fb      	str	r3, [r7, #12]
  return(result);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012dbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012dc0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685a      	ldr	r2, [r3, #4]
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	683a      	ldr	r2, [r7, #0]
 8012dd4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	683a      	ldr	r2, [r7, #0]
 8012ddc:	601a      	str	r2, [r3, #0]
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012de8:	bf00      	nop
 8012dea:	371c      	adds	r7, #28
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b087      	sub	sp, #28
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8012e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e06:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	6812      	ldr	r2, [r2, #0]
 8012e10:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	6852      	ldr	r2, [r2, #4]
 8012e1a:	605a      	str	r2, [r3, #4]
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012e26:	bf00      	nop
 8012e28:	371c      	adds	r7, #28
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b086      	sub	sp, #24
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
 8012e3a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012e44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e46:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7ff ffcd 	bl	8012df4 <LST_remove_node>
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012e64:	bf00      	nop
 8012e66:	3718      	adds	r7, #24
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	460b      	mov	r3, r1
 8012e76:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8012e78:	f001 f892 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e7c:	f001 f82e 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012e80:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8012e8a:	701a      	strb	r2, [r3, #0]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	705a      	strb	r2, [r3, #1]
 8012e90:	2200      	movs	r2, #0
 8012e92:	709a      	strb	r2, [r3, #2]
 8012e94:	2200      	movs	r2, #0
 8012e96:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f042 0201 	orr.w	r2, r2, #1
 8012ea0:	711a      	strb	r2, [r3, #4]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	715a      	strb	r2, [r3, #5]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	719a      	strb	r2, [r3, #6]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8012eae:	78fa      	ldrb	r2, [r7, #3]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8012eb4:	f001 f836 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012eb8:	f001 f81c 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ebc:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	b2db      	uxtb	r3, r3
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8012ed6:	f001 f863 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012eda:	f000 ffff 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012ede:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8012ee8:	701a      	strb	r2, [r3, #0]
 8012eea:	2200      	movs	r2, #0
 8012eec:	705a      	strb	r2, [r3, #1]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	709a      	strb	r2, [r3, #2]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f042 0201 	orr.w	r2, r2, #1
 8012efe:	711a      	strb	r2, [r3, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	715a      	strb	r2, [r3, #5]
 8012f04:	2200      	movs	r2, #0
 8012f06:	719a      	strb	r2, [r3, #6]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8012f12:	f001 f807 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f16:	f000 ffed 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f1a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	b2db      	uxtb	r3, r3
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3710      	adds	r7, #16
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}

08012f2a <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8012f2a:	b580      	push	{r7, lr}
 8012f2c:	b084      	sub	sp, #16
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
 8012f32:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8012f34:	f001 f834 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f38:	f000 ffd0 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012f3c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8012f46:	701a      	strb	r2, [r3, #0]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	705a      	strb	r2, [r3, #1]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	709a      	strb	r2, [r3, #2]
 8012f50:	2200      	movs	r2, #0
 8012f52:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f042 0201 	orr.w	r2, r2, #1
 8012f5c:	711a      	strb	r2, [r3, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	715a      	strb	r2, [r3, #5]
 8012f62:	2200      	movs	r2, #0
 8012f64:	719a      	strb	r2, [r3, #6]
 8012f66:	2200      	movs	r2, #0
 8012f68:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8012f70:	f000 ffd8 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f74:	f000 ffbe 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f78:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	b2db      	uxtb	r3, r3
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8012f90:	f001 f806 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f94:	f000 ffa2 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012f98:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8012fa2:	701a      	strb	r2, [r3, #0]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	705a      	strb	r2, [r3, #1]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	709a      	strb	r2, [r3, #2]
 8012fac:	2200      	movs	r2, #0
 8012fae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	711a      	strb	r2, [r3, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	715a      	strb	r2, [r3, #5]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	719a      	strb	r2, [r3, #6]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8012fc2:	f000 ffaf 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fc6:	f000 ff95 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fca:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	689b      	ldr	r3, [r3, #8]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3710      	adds	r7, #16
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8012fe2:	f000 ffdd 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012fe6:	f000 ff79 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8012fea:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8012ff4:	701a      	strb	r2, [r3, #0]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	705a      	strb	r2, [r3, #1]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	709a      	strb	r2, [r3, #2]
 8012ffe:	2200      	movs	r2, #0
 8013000:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2200      	movs	r2, #0
 8013006:	f042 0201 	orr.w	r2, r2, #1
 801300a:	711a      	strb	r2, [r3, #4]
 801300c:	2200      	movs	r2, #0
 801300e:	715a      	strb	r2, [r3, #5]
 8013010:	2200      	movs	r2, #0
 8013012:	719a      	strb	r2, [r3, #6]
 8013014:	2200      	movs	r2, #0
 8013016:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8013018:	683a      	ldr	r2, [r7, #0]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801301e:	f000 ff81 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013022:	f000 ff67 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013026:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	689b      	ldr	r3, [r3, #8]
 801302c:	b2db      	uxtb	r3, r3
}
 801302e:	4618      	mov	r0, r3
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b084      	sub	sp, #16
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801303e:	f000 ffaf 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013042:	f000 ff4b 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8013046:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2200      	movs	r2, #0
 801304c:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8013050:	701a      	strb	r2, [r3, #0]
 8013052:	2200      	movs	r2, #0
 8013054:	705a      	strb	r2, [r3, #1]
 8013056:	2200      	movs	r2, #0
 8013058:	709a      	strb	r2, [r3, #2]
 801305a:	2200      	movs	r2, #0
 801305c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	711a      	strb	r2, [r3, #4]
 8013064:	2200      	movs	r2, #0
 8013066:	715a      	strb	r2, [r3, #5]
 8013068:	2200      	movs	r2, #0
 801306a:	719a      	strb	r2, [r3, #6]
 801306c:	2200      	movs	r2, #0
 801306e:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013070:	f000 ff58 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013074:	f000 ff3e 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013078:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	689b      	ldr	r3, [r3, #8]
 801307e:	b2db      	uxtb	r3, r3
}
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013090:	f000 ff86 	bl	8013fa0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013094:	f000 ff22 	bl	8013edc <THREAD_Get_OTCmdPayloadBuffer>
 8013098:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2200      	movs	r2, #0
 801309e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80130a2:	701a      	strb	r2, [r3, #0]
 80130a4:	2200      	movs	r2, #0
 80130a6:	705a      	strb	r2, [r3, #1]
 80130a8:	2200      	movs	r2, #0
 80130aa:	709a      	strb	r2, [r3, #2]
 80130ac:	2200      	movs	r2, #0
 80130ae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2200      	movs	r2, #0
 80130b4:	711a      	strb	r2, [r3, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	715a      	strb	r2, [r3, #5]
 80130ba:	2200      	movs	r2, #0
 80130bc:	719a      	strb	r2, [r3, #6]
 80130be:	2200      	movs	r2, #0
 80130c0:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80130c2:	f000 ff2f 	bl	8013f24 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80130c6:	f000 ff15 	bl	8013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130ca:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	689b      	ldr	r3, [r3, #8]
 80130d0:	b29b      	uxth	r3, r3
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80130de:	f001 f9e3 	bl	80144a8 <HW_IPCC_Enable>

  return;
 80130e2:	bf00      	nop
}
 80130e4:	bd80      	pop	{r7, pc}
	...

080130e8 <TL_Init>:


void TL_Init( void )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80130ec:	4b0f      	ldr	r3, [pc, #60]	; (801312c <TL_Init+0x44>)
 80130ee:	4a10      	ldr	r2, [pc, #64]	; (8013130 <TL_Init+0x48>)
 80130f0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80130f2:	4b0e      	ldr	r3, [pc, #56]	; (801312c <TL_Init+0x44>)
 80130f4:	4a0f      	ldr	r2, [pc, #60]	; (8013134 <TL_Init+0x4c>)
 80130f6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80130f8:	4b0c      	ldr	r3, [pc, #48]	; (801312c <TL_Init+0x44>)
 80130fa:	4a0f      	ldr	r2, [pc, #60]	; (8013138 <TL_Init+0x50>)
 80130fc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80130fe:	4b0b      	ldr	r3, [pc, #44]	; (801312c <TL_Init+0x44>)
 8013100:	4a0e      	ldr	r2, [pc, #56]	; (801313c <TL_Init+0x54>)
 8013102:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013104:	4b09      	ldr	r3, [pc, #36]	; (801312c <TL_Init+0x44>)
 8013106:	4a0e      	ldr	r2, [pc, #56]	; (8013140 <TL_Init+0x58>)
 8013108:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801310a:	4b08      	ldr	r3, [pc, #32]	; (801312c <TL_Init+0x44>)
 801310c:	4a0d      	ldr	r2, [pc, #52]	; (8013144 <TL_Init+0x5c>)
 801310e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013110:	4b06      	ldr	r3, [pc, #24]	; (801312c <TL_Init+0x44>)
 8013112:	4a0d      	ldr	r2, [pc, #52]	; (8013148 <TL_Init+0x60>)
 8013114:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013116:	4b05      	ldr	r3, [pc, #20]	; (801312c <TL_Init+0x44>)
 8013118:	4a0c      	ldr	r2, [pc, #48]	; (801314c <TL_Init+0x64>)
 801311a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801311c:	4b03      	ldr	r3, [pc, #12]	; (801312c <TL_Init+0x44>)
 801311e:	4a0c      	ldr	r2, [pc, #48]	; (8013150 <TL_Init+0x68>)
 8013120:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013122:	f001 f9d1 	bl	80144c8 <HW_IPCC_Init>

  return;
 8013126:	bf00      	nop
}
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	20030000 	.word	0x20030000
 8013130:	20030024 	.word	0x20030024
 8013134:	20030044 	.word	0x20030044
 8013138:	20030054 	.word	0x20030054
 801313c:	20030060 	.word	0x20030060
 8013140:	20030068 	.word	0x20030068
 8013144:	20030070 	.word	0x20030070
 8013148:	2003008c 	.word	0x2003008c
 801314c:	20030090 	.word	0x20030090
 8013150:	2003009c 	.word	0x2003009c

08013154 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801315a:	e009      	b.n	8013170 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801315c:	1d3b      	adds	r3, r7, #4
 801315e:	4619      	mov	r1, r3
 8013160:	4808      	ldr	r0, [pc, #32]	; (8013184 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013162:	f7ff fe66 	bl	8012e32 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013166:	4b08      	ldr	r3, [pc, #32]	; (8013188 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	4610      	mov	r0, r2
 801316e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013170:	4804      	ldr	r0, [pc, #16]	; (8013184 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013172:	f7ff fdd7 	bl	8012d24 <LST_is_empty>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d0ef      	beq.n	801315c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801317c:	bf00      	nop
}
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	20030828 	.word	0x20030828
 8013188:	20027468 	.word	0x20027468

0801318c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013190:	4b02      	ldr	r3, [pc, #8]	; (801319c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4798      	blx	r3

  return;
 8013196:	bf00      	nop
}
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	2002746c 	.word	0x2002746c

080131a0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b084      	sub	sp, #16
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80131ac:	480d      	ldr	r0, [pc, #52]	; (80131e4 <TL_SYS_Init+0x44>)
 80131ae:	f7ff fda9 	bl	8012d04 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80131b2:	4b0d      	ldr	r3, [pc, #52]	; (80131e8 <TL_SYS_Init+0x48>)
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	689a      	ldr	r2, [r3, #8]
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	4a08      	ldr	r2, [pc, #32]	; (80131e4 <TL_SYS_Init+0x44>)
 80131c4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80131c6:	f001 f9ad 	bl	8014524 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a07      	ldr	r2, [pc, #28]	; (80131ec <TL_SYS_Init+0x4c>)
 80131d0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	4a06      	ldr	r2, [pc, #24]	; (80131f0 <TL_SYS_Init+0x50>)
 80131d8:	6013      	str	r3, [r2, #0]

  return 0;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3710      	adds	r7, #16
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	20030830 	.word	0x20030830
 80131e8:	20030000 	.word	0x20030000
 80131ec:	20027470 	.word	0x20027470
 80131f0:	20027474 	.word	0x20027474

080131f4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	460b      	mov	r3, r1
 80131fe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013200:	4b05      	ldr	r3, [pc, #20]	; (8013218 <TL_SYS_SendCmd+0x24>)
 8013202:	68db      	ldr	r3, [r3, #12]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2210      	movs	r2, #16
 8013208:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 801320a:	f001 f995 	bl	8014538 <HW_IPCC_SYS_SendCmd>

  return 0;
 801320e:	2300      	movs	r3, #0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	20030000 	.word	0x20030000

0801321c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013220:	4b04      	ldr	r3, [pc, #16]	; (8013234 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	4a04      	ldr	r2, [pc, #16]	; (8013238 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8013226:	68d2      	ldr	r2, [r2, #12]
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	4610      	mov	r0, r2
 801322c:	4798      	blx	r3

  return;
 801322e:	bf00      	nop
}
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	20027470 	.word	0x20027470
 8013238:	20030000 	.word	0x20030000

0801323c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013242:	e009      	b.n	8013258 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8013244:	1d3b      	adds	r3, r7, #4
 8013246:	4619      	mov	r1, r3
 8013248:	4808      	ldr	r0, [pc, #32]	; (801326c <HW_IPCC_SYS_EvtNot+0x30>)
 801324a:	f7ff fdf2 	bl	8012e32 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 801324e:	4b08      	ldr	r3, [pc, #32]	; (8013270 <HW_IPCC_SYS_EvtNot+0x34>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	4610      	mov	r0, r2
 8013256:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013258:	4804      	ldr	r0, [pc, #16]	; (801326c <HW_IPCC_SYS_EvtNot+0x30>)
 801325a:	f7ff fd63 	bl	8012d24 <LST_is_empty>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d0ef      	beq.n	8013244 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8013264:	bf00      	nop
}
 8013266:	3708      	adds	r7, #8
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	20030830 	.word	0x20030830
 8013270:	20027474 	.word	0x20027474

08013274 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 801327c:	4b0a      	ldr	r3, [pc, #40]	; (80132a8 <TL_THREAD_Init+0x34>)
 801327e:	689b      	ldr	r3, [r3, #8]
 8013280:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	689a      	ldr	r2, [r3, #8]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 801329a:	f001 f973 	bl	8014584 <HW_IPCC_THREAD_Init>

  return;
 801329e:	bf00      	nop
}
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	20030000 	.word	0x20030000

080132ac <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80132b0:	4b04      	ldr	r3, [pc, #16]	; (80132c4 <TL_OT_SendCmd+0x18>)
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	689b      	ldr	r3, [r3, #8]
 80132b6:	2208      	movs	r2, #8
 80132b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80132ba:	f001 f971 	bl	80145a0 <HW_IPCC_OT_SendCmd>

  return;
 80132be:	bf00      	nop
}
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	20030000 	.word	0x20030000

080132c8 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80132cc:	4b04      	ldr	r3, [pc, #16]	; (80132e0 <TL_CLI_SendCmd+0x18>)
 80132ce:	689b      	ldr	r3, [r3, #8]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	220a      	movs	r2, #10
 80132d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80132d6:	f001 f971 	bl	80145bc <HW_IPCC_CLI_SendCmd>

  return;
 80132da:	bf00      	nop
}
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop
 80132e0:	20030000 	.word	0x20030000

080132e4 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80132e8:	4b04      	ldr	r3, [pc, #16]	; (80132fc <TL_THREAD_SendAck+0x18>)
 80132ea:	689b      	ldr	r3, [r3, #8]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	220d      	movs	r2, #13
 80132f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80132f2:	f001 f96d 	bl	80145d0 <HW_IPCC_THREAD_SendAck>

  return;
 80132f6:	bf00      	nop
}
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	20030000 	.word	0x20030000

08013300 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8013304:	4b04      	ldr	r3, [pc, #16]	; (8013318 <TL_THREAD_CliSendAck+0x18>)
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	220d      	movs	r2, #13
 801330c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 801330e:	f001 f96d 	bl	80145ec <HW_IPCC_THREAD_CliSendAck>

  return;
 8013312:	bf00      	nop
}
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	20030000 	.word	0x20030000

0801331c <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8013320:	4b03      	ldr	r3, [pc, #12]	; (8013330 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	689b      	ldr	r3, [r3, #8]
 8013326:	4618      	mov	r0, r3
 8013328:	f000 fe20 	bl	8013f6c <TL_OT_CmdEvtReceived>

  return;
 801332c:	bf00      	nop
}
 801332e:	bd80      	pop	{r7, pc}
 8013330:	20030000 	.word	0x20030000

08013334 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8013338:	4b03      	ldr	r3, [pc, #12]	; (8013348 <HW_IPCC_THREAD_EvtNot+0x14>)
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4618      	mov	r0, r3
 8013340:	f000 fe1e 	bl	8013f80 <TL_THREAD_NotReceived>

  return;
 8013344:	bf00      	nop
}
 8013346:	bd80      	pop	{r7, pc}
 8013348:	20030000 	.word	0x20030000

0801334c <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8013350:	4b03      	ldr	r3, [pc, #12]	; (8013360 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8013352:	689b      	ldr	r3, [r3, #8]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	f000 fec0 	bl	80140dc <TL_THREAD_CliNotReceived>

  return;
 801335c:	bf00      	nop
}
 801335e:	bd80      	pop	{r7, pc}
 8013360:	20030000 	.word	0x20030000

08013364 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801336c:	4817      	ldr	r0, [pc, #92]	; (80133cc <TL_MM_Init+0x68>)
 801336e:	f7ff fcc9 	bl	8012d04 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8013372:	4817      	ldr	r0, [pc, #92]	; (80133d0 <TL_MM_Init+0x6c>)
 8013374:	f7ff fcc6 	bl	8012d04 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8013378:	4b16      	ldr	r3, [pc, #88]	; (80133d4 <TL_MM_Init+0x70>)
 801337a:	691b      	ldr	r3, [r3, #16]
 801337c:	4a16      	ldr	r2, [pc, #88]	; (80133d8 <TL_MM_Init+0x74>)
 801337e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8013380:	4b15      	ldr	r3, [pc, #84]	; (80133d8 <TL_MM_Init+0x74>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	6892      	ldr	r2, [r2, #8]
 8013388:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801338a:	4b13      	ldr	r3, [pc, #76]	; (80133d8 <TL_MM_Init+0x74>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	68d2      	ldr	r2, [r2, #12]
 8013392:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8013394:	4b10      	ldr	r3, [pc, #64]	; (80133d8 <TL_MM_Init+0x74>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a0c      	ldr	r2, [pc, #48]	; (80133cc <TL_MM_Init+0x68>)
 801339a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801339c:	4b0e      	ldr	r3, [pc, #56]	; (80133d8 <TL_MM_Init+0x74>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	6812      	ldr	r2, [r2, #0]
 80133a4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80133a6:	4b0c      	ldr	r3, [pc, #48]	; (80133d8 <TL_MM_Init+0x74>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	6852      	ldr	r2, [r2, #4]
 80133ae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80133b0:	4b09      	ldr	r3, [pc, #36]	; (80133d8 <TL_MM_Init+0x74>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	6912      	ldr	r2, [r2, #16]
 80133b8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80133ba:	4b07      	ldr	r3, [pc, #28]	; (80133d8 <TL_MM_Init+0x74>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	6952      	ldr	r2, [r2, #20]
 80133c2:	619a      	str	r2, [r3, #24]

  return;
 80133c4:	bf00      	nop
}
 80133c6:	3708      	adds	r7, #8
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	200300a8 	.word	0x200300a8
 80133d0:	20027460 	.word	0x20027460
 80133d4:	20030000 	.word	0x20030000
 80133d8:	20027478 	.word	0x20027478

080133dc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	4805      	ldr	r0, [pc, #20]	; (80133fc <TL_MM_EvtDone+0x20>)
 80133e8:	f7ff fce0 	bl	8012dac <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80133ec:	4804      	ldr	r0, [pc, #16]	; (8013400 <TL_MM_EvtDone+0x24>)
 80133ee:	f001 f92f 	bl	8014650 <HW_IPCC_MM_SendFreeBuf>

  return;
 80133f2:	bf00      	nop
}
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20027460 	.word	0x20027460
 8013400:	08013405 	.word	0x08013405

08013404 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801340a:	e00c      	b.n	8013426 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801340c:	1d3b      	adds	r3, r7, #4
 801340e:	4619      	mov	r1, r3
 8013410:	480a      	ldr	r0, [pc, #40]	; (801343c <SendFreeBuf+0x38>)
 8013412:	f7ff fd0e 	bl	8012e32 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8013416:	4b0a      	ldr	r3, [pc, #40]	; (8013440 <SendFreeBuf+0x3c>)
 8013418:	691b      	ldr	r3, [r3, #16]
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	4611      	mov	r1, r2
 8013420:	4618      	mov	r0, r3
 8013422:	f7ff fcc3 	bl	8012dac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8013426:	4805      	ldr	r0, [pc, #20]	; (801343c <SendFreeBuf+0x38>)
 8013428:	f7ff fc7c 	bl	8012d24 <LST_is_empty>
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d0ec      	beq.n	801340c <SendFreeBuf+0x8>
  }

  return;
 8013432:	bf00      	nop
}
 8013434:	3708      	adds	r7, #8
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	20027460 	.word	0x20027460
 8013440:	20030000 	.word	0x20030000

08013444 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8013448:	4805      	ldr	r0, [pc, #20]	; (8013460 <TL_TRACES_Init+0x1c>)
 801344a:	f7ff fc5b 	bl	8012d04 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801344e:	4b05      	ldr	r3, [pc, #20]	; (8013464 <TL_TRACES_Init+0x20>)
 8013450:	695b      	ldr	r3, [r3, #20]
 8013452:	4a03      	ldr	r2, [pc, #12]	; (8013460 <TL_TRACES_Init+0x1c>)
 8013454:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8013456:	f001 f931 	bl	80146bc <HW_IPCC_TRACES_Init>

  return;
 801345a:	bf00      	nop
}
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	200300b0 	.word	0x200300b0
 8013464:	20030000 	.word	0x20030000

08013468 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801346e:	e008      	b.n	8013482 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8013470:	1d3b      	adds	r3, r7, #4
 8013472:	4619      	mov	r1, r3
 8013474:	4808      	ldr	r0, [pc, #32]	; (8013498 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013476:	f7ff fcdc 	bl	8012e32 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	4618      	mov	r0, r3
 801347e:	f7ed fecb 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013482:	4805      	ldr	r0, [pc, #20]	; (8013498 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013484:	f7ff fc4e 	bl	8012d24 <LST_is_empty>
 8013488:	4603      	mov	r3, r0
 801348a:	2b00      	cmp	r3, #0
 801348c:	d0f0      	beq.n	8013470 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801348e:	bf00      	nop
}
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	200300b0 	.word	0x200300b0

0801349c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 80134a2:	f000 f9a3 	bl	80137ec <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 80134a6:	480e      	ldr	r0, [pc, #56]	; (80134e0 <APP_THREAD_Init+0x44>)
 80134a8:	f000 fd08 	bl	8013ebc <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 80134ac:	2101      	movs	r1, #1
 80134ae:	2002      	movs	r0, #2
 80134b0:	f001 f92c 	bl	801470c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80134b4:	f000 fdfa 	bl	80140ac <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80134b8:	f000 fde6 	bl	8014088 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80134bc:	f7ff fa38 	bl	8012930 <SHCI_C2_THREAD_Init>
 80134c0:	4603      	mov	r3, r0
 80134c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80134c4:	4a07      	ldr	r2, [pc, #28]	; (80134e4 <APP_THREAD_Init+0x48>)
 80134c6:	2100      	movs	r1, #0
 80134c8:	4807      	ldr	r0, [pc, #28]	; (80134e8 <APP_THREAD_Init+0x4c>)
 80134ca:	f7f9 feff 	bl	800d2cc <osThreadNew>
 80134ce:	4602      	mov	r2, r0
 80134d0:	4b06      	ldr	r3, [pc, #24]	; (80134ec <APP_THREAD_Init+0x50>)
 80134d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80134d4:	f000 f86c 	bl	80135b0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	20030838 	.word	0x20030838
 80134e4:	08016730 	.word	0x08016730
 80134e8:	080138a9 	.word	0x080138a9
 80134ec:	20027590 	.word	0x20027590

080134f0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b07      	cmp	r3, #7
 80134fe:	d83b      	bhi.n	8013578 <APP_THREAD_Error+0x88>
 8013500:	a201      	add	r2, pc, #4	; (adr r2, 8013508 <APP_THREAD_Error+0x18>)
 8013502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013506:	bf00      	nop
 8013508:	08013529 	.word	0x08013529
 801350c:	08013533 	.word	0x08013533
 8013510:	0801353d 	.word	0x0801353d
 8013514:	08013547 	.word	0x08013547
 8013518:	08013551 	.word	0x08013551
 801351c:	0801355b 	.word	0x0801355b
 8013520:	08013565 	.word	0x08013565
 8013524:	0801356f 	.word	0x0801356f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8013528:	6839      	ldr	r1, [r7, #0]
 801352a:	4818      	ldr	r0, [pc, #96]	; (801358c <APP_THREAD_Error+0x9c>)
 801352c:	f000 f952 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013530:	e027      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8013532:	6839      	ldr	r1, [r7, #0]
 8013534:	4816      	ldr	r0, [pc, #88]	; (8013590 <APP_THREAD_Error+0xa0>)
 8013536:	f000 f94d 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 801353a:	e022      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 801353c:	6839      	ldr	r1, [r7, #0]
 801353e:	4815      	ldr	r0, [pc, #84]	; (8013594 <APP_THREAD_Error+0xa4>)
 8013540:	f000 f948 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013544:	e01d      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8013546:	6839      	ldr	r1, [r7, #0]
 8013548:	4813      	ldr	r0, [pc, #76]	; (8013598 <APP_THREAD_Error+0xa8>)
 801354a:	f000 f943 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 801354e:	e018      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8013550:	6839      	ldr	r1, [r7, #0]
 8013552:	4812      	ldr	r0, [pc, #72]	; (801359c <APP_THREAD_Error+0xac>)
 8013554:	f000 f93e 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013558:	e013      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801355a:	6839      	ldr	r1, [r7, #0]
 801355c:	4810      	ldr	r0, [pc, #64]	; (80135a0 <APP_THREAD_Error+0xb0>)
 801355e:	f000 f939 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013562:	e00e      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8013564:	6839      	ldr	r1, [r7, #0]
 8013566:	480f      	ldr	r0, [pc, #60]	; (80135a4 <APP_THREAD_Error+0xb4>)
 8013568:	f000 f934 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 801356c:	e009      	b.n	8013582 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801356e:	6839      	ldr	r1, [r7, #0]
 8013570:	480d      	ldr	r0, [pc, #52]	; (80135a8 <APP_THREAD_Error+0xb8>)
 8013572:	f000 f92f 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013576:	e004      	b.n	8013582 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8013578:	2100      	movs	r1, #0
 801357a:	480c      	ldr	r0, [pc, #48]	; (80135ac <APP_THREAD_Error+0xbc>)
 801357c:	f000 f92a 	bl	80137d4 <APP_THREAD_TraceError>
    break;
 8013580:	bf00      	nop
  }
}
 8013582:	bf00      	nop
 8013584:	3708      	adds	r7, #8
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	08016130 	.word	0x08016130
 8013590:	08016154 	.word	0x08016154
 8013594:	08016178 	.word	0x08016178
 8013598:	08016198 	.word	0x08016198
 801359c:	080161b8 	.word	0x080161b8
 80135a0:	080161d8 	.word	0x080161d8
 80135a4:	080161f4 	.word	0x080161f4
 80135a8:	08016220 	.word	0x08016220
 80135ac:	08016244 	.word	0x08016244

080135b0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80135b6:	2000      	movs	r0, #0
 80135b8:	f7fe fddc 	bl	8012174 <otInstanceErasePersistentInfo>
 80135bc:	4603      	mov	r3, r0
 80135be:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80135c0:	79fb      	ldrb	r3, [r7, #7]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d004      	beq.n	80135d0 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	4619      	mov	r1, r3
 80135ca:	2006      	movs	r0, #6
 80135cc:	f7ff ff90 	bl	80134f0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80135d0:	2000      	movs	r0, #0
 80135d2:	f7fe fd72 	bl	80120ba <otInstanceFinalize>
  otInstanceInitSingle();
 80135d6:	f7fe fd49 	bl	801206c <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80135da:	2200      	movs	r2, #0
 80135dc:	4957      	ldr	r1, [pc, #348]	; (801373c <APP_THREAD_DeviceConfig+0x18c>)
 80135de:	2000      	movs	r0, #0
 80135e0:	f7fe fd92 	bl	8012108 <otSetStateChangedCallback>
 80135e4:	4603      	mov	r3, r0
 80135e6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d004      	beq.n	80135f8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80135ee:	79fb      	ldrb	r3, [r7, #7]
 80135f0:	4619      	mov	r1, r3
 80135f2:	2001      	movs	r0, #1
 80135f4:	f7ff ff7c 	bl	80134f0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80135f8:	2117      	movs	r1, #23
 80135fa:	2000      	movs	r0, #0
 80135fc:	f7fe fe9a 	bl	8012334 <otLinkSetChannel>
 8013600:	4603      	mov	r3, r0
 8013602:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013604:	79fb      	ldrb	r3, [r7, #7]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d004      	beq.n	8013614 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	4619      	mov	r1, r3
 801360e:	2002      	movs	r0, #2
 8013610:	f7ff ff6e 	bl	80134f0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8013614:	f241 2134 	movw	r1, #4660	; 0x1234
 8013618:	2000      	movs	r0, #0
 801361a:	f7fe febb 	bl	8012394 <otLinkSetPanId>
 801361e:	4603      	mov	r3, r0
 8013620:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013622:	79fb      	ldrb	r3, [r7, #7]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d004      	beq.n	8013632 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8013628:	79fb      	ldrb	r3, [r7, #7]
 801362a:	4619      	mov	r1, r3
 801362c:	2003      	movs	r0, #3
 801362e:	f7ff ff5f 	bl	80134f0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8013632:	2101      	movs	r1, #1
 8013634:	2000      	movs	r0, #0
 8013636:	f7fe fdc6 	bl	80121c6 <otIp6SetEnabled>
 801363a:	4603      	mov	r3, r0
 801363c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801363e:	79fb      	ldrb	r3, [r7, #7]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d004      	beq.n	801364e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8013644:	79fb      	ldrb	r3, [r7, #7]
 8013646:	4619      	mov	r1, r3
 8013648:	2004      	movs	r0, #4
 801364a:	f7ff ff51 	bl	80134f0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801364e:	2101      	movs	r1, #1
 8013650:	2000      	movs	r0, #0
 8013652:	f7ff fc0b 	bl	8012e6c <otThreadSetEnabled>
 8013656:	4603      	mov	r3, r0
 8013658:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801365a:	79fb      	ldrb	r3, [r7, #7]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d004      	beq.n	801366a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8013660:	79fb      	ldrb	r3, [r7, #7]
 8013662:	4619      	mov	r1, r3
 8013664:	2005      	movs	r0, #5
 8013666:	f7ff ff43 	bl	80134f0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 801366a:	2100      	movs	r1, #0
 801366c:	2000      	movs	r0, #0
 801366e:	f7ff fbfd 	bl	8012e6c <otThreadSetEnabled>
 8013672:	4603      	mov	r3, r0
 8013674:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d004      	beq.n	8013686 <APP_THREAD_DeviceConfig+0xd6>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 801367c:	79fb      	ldrb	r3, [r7, #7]
 801367e:	4619      	mov	r1, r3
 8013680:	2005      	movs	r0, #5
 8013682:	f7ff ff35 	bl	80134f0 <APP_THREAD_Error>
  }

    error = otThreadSetMasterKey(NULL, &masterKey);
 8013686:	492e      	ldr	r1, [pc, #184]	; (8013740 <APP_THREAD_DeviceConfig+0x190>)
 8013688:	2000      	movs	r0, #0
 801368a:	f7ff fc4e 	bl	8012f2a <otThreadSetMasterKey>
 801368e:	4603      	mov	r3, r0
 8013690:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 8013692:	79fb      	ldrb	r3, [r7, #7]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d004      	beq.n	80136a2 <APP_THREAD_DeviceConfig+0xf2>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8013698:	79fb      	ldrb	r3, [r7, #7]
 801369a:	4619      	mov	r1, r3
 801369c:	2002      	movs	r0, #2
 801369e:	f7ff ff27 	bl	80134f0 <APP_THREAD_Error>
    }

    error = otThreadSetNetworkName(NULL, networkName);
 80136a2:	4928      	ldr	r1, [pc, #160]	; (8013744 <APP_THREAD_DeviceConfig+0x194>)
 80136a4:	2000      	movs	r0, #0
 80136a6:	f7ff fc97 	bl	8012fd8 <otThreadSetNetworkName>
 80136aa:	4603      	mov	r3, r0
 80136ac:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80136ae:	79fb      	ldrb	r3, [r7, #7]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d004      	beq.n	80136be <APP_THREAD_DeviceConfig+0x10e>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	4619      	mov	r1, r3
 80136b8:	2002      	movs	r0, #2
 80136ba:	f7ff ff19 	bl	80134f0 <APP_THREAD_Error>
    }
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 80136be:	4922      	ldr	r1, [pc, #136]	; (8013748 <APP_THREAD_DeviceConfig+0x198>)
 80136c0:	2000      	movs	r0, #0
 80136c2:	f7ff fc03 	bl	8012ecc <otThreadSetExtendedPanId>
 80136c6:	4603      	mov	r3, r0
 80136c8:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d004      	beq.n	80136da <APP_THREAD_DeviceConfig+0x12a>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80136d0:	79fb      	ldrb	r3, [r7, #7]
 80136d2:	4619      	mov	r1, r3
 80136d4:	2002      	movs	r0, #2
 80136d6:	f7ff ff0b 	bl	80134f0 <APP_THREAD_Error>
    }

    error = otThreadSetEnabled(NULL, true);
 80136da:	2101      	movs	r1, #1
 80136dc:	2000      	movs	r0, #0
 80136de:	f7ff fbc5 	bl	8012e6c <otThreadSetEnabled>
 80136e2:	4603      	mov	r3, r0
 80136e4:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d004      	beq.n	80136f6 <APP_THREAD_DeviceConfig+0x146>
    {
      APP_THREAD_Error(ERR_THREAD_START,error);
 80136ec:	79fb      	ldrb	r3, [r7, #7]
 80136ee:	4619      	mov	r1, r3
 80136f0:	2005      	movs	r0, #5
 80136f2:	f7ff fefd 	bl	80134f0 <APP_THREAD_Error>
    }

    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80136f6:	f241 6133 	movw	r1, #5683	; 0x1633
 80136fa:	2000      	movs	r0, #0
 80136fc:	f7fe fc24 	bl	8011f48 <otCoapStart>
 8013700:	4603      	mov	r3, r0
 8013702:	71fb      	strb	r3, [r7, #7]
  //  error = otCoapAddResource(NULL, &OT_Light_Ressource);
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8013704:	4911      	ldr	r1, [pc, #68]	; (801374c <APP_THREAD_DeviceConfig+0x19c>)
 8013706:	2000      	movs	r0, #0
 8013708:	f7fe fc4e 	bl	8011fa8 <otCoapAddResource>
 801370c:	4603      	mov	r3, r0
 801370e:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8013710:	490f      	ldr	r1, [pc, #60]	; (8013750 <APP_THREAD_DeviceConfig+0x1a0>)
 8013712:	2000      	movs	r0, #0
 8013714:	f7fe fc48 	bl	8011fa8 <otCoapAddResource>
 8013718:	4603      	mov	r3, r0
 801371a:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 801371c:	490d      	ldr	r1, [pc, #52]	; (8013754 <APP_THREAD_DeviceConfig+0x1a4>)
 801371e:	2000      	movs	r0, #0
 8013720:	f7fe fc42 	bl	8011fa8 <otCoapAddResource>
 8013724:	4603      	mov	r3, r0
 8013726:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8013728:	490b      	ldr	r1, [pc, #44]	; (8013758 <APP_THREAD_DeviceConfig+0x1a8>)
 801372a:	2000      	movs	r0, #0
 801372c:	f7fe fc3c 	bl	8011fa8 <otCoapAddResource>
 8013730:	4603      	mov	r3, r0
 8013732:	71fb      	strb	r3, [r7, #7]

    // start master thread
//    osThreadFlagsSet(masterTaskHandle, 0x00000008U);
//    startSensorThreads();
  /* USER CODE END DEVICECONFIG */
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	0801375d 	.word	0x0801375d
 8013740:	08016798 	.word	0x08016798
 8013744:	080167b0 	.word	0x080167b0
 8013748:	080167a8 	.word	0x080167a8
 801374c:	20000088 	.word	0x20000088
 8013750:	20000098 	.word	0x20000098
 8013754:	200000a8 	.word	0x200000a8
 8013758:	200000b8 	.word	0x200000b8

0801375c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801375c:	b590      	push	{r4, r7, lr}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f003 0304 	and.w	r3, r3, #4
 801376c:	2b00      	cmp	r3, #0
 801376e:	d027      	beq.n	80137c0 <APP_THREAD_StateNotif+0x64>
  {
    switch (otThreadGetDeviceRole(NULL))
 8013770:	2000      	movs	r0, #0
 8013772:	f7ff fc60 	bl	8013036 <otThreadGetDeviceRole>
 8013776:	4603      	mov	r3, r0
 8013778:	2b04      	cmp	r3, #4
 801377a:	d81e      	bhi.n	80137ba <APP_THREAD_StateNotif+0x5e>
 801377c:	a201      	add	r2, pc, #4	; (adr r2, 8013784 <APP_THREAD_StateNotif+0x28>)
 801377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013782:	bf00      	nop
 8013784:	080137c5 	.word	0x080137c5
 8013788:	08013799 	.word	0x08013799
 801378c:	080137a9 	.word	0x080137a9
 8013790:	080137af 	.word	0x080137af
 8013794:	080137b5 	.word	0x080137b5

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	borderRouter.epoch = 0;
 8013798:	4a0d      	ldr	r2, [pc, #52]	; (80137d0 <APP_THREAD_StateNotif+0x74>)
 801379a:	f04f 0300 	mov.w	r3, #0
 801379e:	f04f 0400 	mov.w	r4, #0
 80137a2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 80137a6:	e00e      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SendMyIP();
 80137a8:	f000 f8b0 	bl	801390c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 80137ac:	e00b      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	APP_THREAD_SendMyIP();
 80137ae:	f000 f8ad 	bl	801390c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 80137b2:	e008      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	APP_THREAD_SendMyIP();
 80137b4:	f000 f8aa 	bl	801390c <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 80137b8:	e005      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
    default:
      /* USER CODE BEGIN DEFAULT */
    	APP_THREAD_SendMyIP();
 80137ba:	f000 f8a7 	bl	801390c <APP_THREAD_SendMyIP>
      /* USER CODE END DEFAULT */
      break;
 80137be:	e002      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
    }
  }
 80137c0:	bf00      	nop
 80137c2:	e000      	b.n	80137c6 <APP_THREAD_StateNotif+0x6a>
      break;
 80137c4:	bf00      	nop
}
 80137c6:	bf00      	nop
 80137c8:	370c      	adds	r7, #12
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd90      	pop	{r4, r7, pc}
 80137ce:	bf00      	nop
 80137d0:	20027660 	.word	0x20027660

080137d4 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80137de:	bf00      	nop
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
	...

080137ec <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b088      	sub	sp, #32
 80137f0:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80137f2:	1d3b      	adds	r3, r7, #4
 80137f4:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80137f6:	6978      	ldr	r0, [r7, #20]
 80137f8:	f7ff f8c6 	bl	8012988 <SHCI_GetWirelessFwInfo>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d004      	beq.n	801380c <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8013802:	2101      	movs	r1, #1
 8013804:	2007      	movs	r0, #7
 8013806:	f7ff fe73 	bl	80134f0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801380a:	e03d      	b.n	8013888 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 801380c:	4a20      	ldr	r2, [pc, #128]	; (8013890 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 801380e:	2101      	movs	r1, #1
 8013810:	2000      	movs	r0, #0
 8013812:	f7f1 fc07 	bl	8005024 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8013816:	4a1f      	ldr	r2, [pc, #124]	; (8013894 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8013818:	2101      	movs	r1, #1
 801381a:	2000      	movs	r0, #0
 801381c:	f7f1 fc02 	bl	8005024 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	4619      	mov	r1, r3
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	785b      	ldrb	r3, [r3, #1]
 801382a:	461a      	mov	r2, r3
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	789b      	ldrb	r3, [r3, #2]
 8013830:	9301      	str	r3, [sp, #4]
 8013832:	9200      	str	r2, [sp, #0]
 8013834:	460b      	mov	r3, r1
 8013836:	4a18      	ldr	r2, [pc, #96]	; (8013898 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8013838:	2101      	movs	r1, #1
 801383a:	2000      	movs	r0, #0
 801383c:	f7f1 fbf2 	bl	8005024 <logApplication>
    switch(p_wireless_info->StackType)
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	7a5b      	ldrb	r3, [r3, #9]
 8013844:	2b11      	cmp	r3, #17
 8013846:	d009      	beq.n	801385c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8013848:	2b50      	cmp	r3, #80	; 0x50
 801384a:	d00d      	beq.n	8013868 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 801384c:	2b10      	cmp	r3, #16
 801384e:	d111      	bne.n	8013874 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8013850:	4a12      	ldr	r2, [pc, #72]	; (801389c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8013852:	2101      	movs	r1, #1
 8013854:	2000      	movs	r0, #0
 8013856:	f7f1 fbe5 	bl	8005024 <logApplication>
      break;
 801385a:	e010      	b.n	801387e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 801385c:	4a10      	ldr	r2, [pc, #64]	; (80138a0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801385e:	2101      	movs	r1, #1
 8013860:	2000      	movs	r0, #0
 8013862:	f7f1 fbdf 	bl	8005024 <logApplication>
      break;
 8013866:	e00a      	b.n	801387e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8013868:	4a0e      	ldr	r2, [pc, #56]	; (80138a4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801386a:	2101      	movs	r1, #1
 801386c:	2000      	movs	r0, #0
 801386e:	f7f1 fbd9 	bl	8005024 <logApplication>
      break;
 8013872:	e004      	b.n	801387e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8013874:	2101      	movs	r1, #1
 8013876:	2007      	movs	r0, #7
 8013878:	f7ff fe3a 	bl	80134f0 <APP_THREAD_Error>
      break;
 801387c:	bf00      	nop
    APP_DBG("**********************************************************");
 801387e:	4a04      	ldr	r2, [pc, #16]	; (8013890 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8013880:	2101      	movs	r1, #1
 8013882:	2000      	movs	r0, #0
 8013884:	f7f1 fbce 	bl	8005024 <logApplication>
}
 8013888:	bf00      	nop
 801388a:	3718      	adds	r7, #24
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}
 8013890:	08016254 	.word	0x08016254
 8013894:	08016290 	.word	0x08016290
 8013898:	080162ac 	.word	0x080162ac
 801389c:	080162c4 	.word	0x080162c4
 80138a0:	080162dc 	.word	0x080162dc
 80138a4:	080162f4 	.word	0x080162f4

080138a8 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80138b0:	f04f 32ff 	mov.w	r2, #4294967295
 80138b4:	2101      	movs	r1, #1
 80138b6:	2001      	movs	r0, #1
 80138b8:	f7f9 fe66 	bl	800d588 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 80138bc:	f000 fc28 	bl	8014110 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80138c0:	e7f6      	b.n	80138b0 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080138c2 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b082      	sub	sp, #8
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80138ca:	f04f 32ff 	mov.w	r2, #4294967295
 80138ce:	2101      	movs	r1, #1
 80138d0:	2001      	movs	r0, #1
 80138d2:	f7f9 fe59 	bl	800d588 <osThreadFlagsWait>
    Send_CLI_To_M0();
 80138d6:	f000 fb9d 	bl	8014014 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80138da:	e7f6      	b.n	80138ca <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080138dc <APP_THREAD_DummyReqHandler>:
  */
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
 80138dc:	b480      	push	{r7}
 80138de:	b085      	sub	sp, #20
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	603b      	str	r3, [r7, #0]
    tempMessageInfo = pMessageInfo;
 80138ea:	4a06      	ldr	r2, [pc, #24]	; (8013904 <APP_THREAD_DummyReqHandler+0x28>)
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 80138f0:	4a05      	ldr	r2, [pc, #20]	; (8013908 <APP_THREAD_DummyReqHandler+0x2c>)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6013      	str	r3, [r2, #0]
}
 80138f6:	bf00      	nop
 80138f8:	3714      	adds	r7, #20
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	200285a0 	.word	0x200285a0
 8013908:	200285e4 	.word	0x200285e4

0801390c <APP_THREAD_SendMyIP>:
//	uint32_t uid;
//} msgSendMyIP = {.msgSendMyIP = "cal"};

char msgSendMyIP[5] = "cal";

void APP_THREAD_SendMyIP(){
 801390c:	b580      	push	{r7, lr}
 801390e:	af00      	add	r7, sp, #0
//	msgSendMyIP.uid = DBGMCU->IDCODE;
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 8013910:	4b03      	ldr	r3, [pc, #12]	; (8013920 <APP_THREAD_SendMyIP+0x14>)
 8013912:	4a04      	ldr	r2, [pc, #16]	; (8013924 <APP_THREAD_SendMyIP+0x18>)
 8013914:	2105      	movs	r1, #5
 8013916:	4804      	ldr	r0, [pc, #16]	; (8013928 <APP_THREAD_SendMyIP+0x1c>)
 8013918:	f000 f94c 	bl	8013bb4 <APP_THREAD_SendCoapUnicastRequest>
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 801391c:	bf00      	nop
 801391e:	bd80      	pop	{r7, pc}
 8013920:	08016778 	.word	0x08016778
 8013924:	20027660 	.word	0x20027660
 8013928:	200000c8 	.word	0x200000c8

0801392c <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderMessage(void *packet, uint8_t len){
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(packet, len, borderRouter.ipv6  , borderPacket, 1U);
}

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af02      	add	r7, sp, #8
 8013932:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 8013934:	2301      	movs	r3, #1
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	4b04      	ldr	r3, [pc, #16]	; (801394c <APP_THREAD_SendBorderPacket+0x20>)
 801393a:	4a05      	ldr	r2, [pc, #20]	; (8013950 <APP_THREAD_SendBorderPacket+0x24>)
 801393c:	21cc      	movs	r1, #204	; 0xcc
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f000 f9ea 	bl	8013d18 <APP_THREAD_SendCoapUnicastMsg>

}
 8013944:	bf00      	nop
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	08016788 	.word	0x08016788
 8013950:	20027660 	.word	0x20027660

08013954 <APP_THREAD_CoapLightsSimpleRequestHandler>:
//}

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
  do
  {
	lightsSimpleMessage = 0;
 8013960:	4b21      	ldr	r3, [pc, #132]	; (80139e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8013962:	2200      	movs	r2, #0
 8013964:	601a      	str	r2, [r3, #0]

	//REMOVE THIS!!!!!!!!!
//	APP_THREAD_GetBorderRouterIP(); //REMOVE THIS!!!!!!!!!
	//REMOVE THIS!!!!!!!!!

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 8013966:	68b8      	ldr	r0, [r7, #8]
 8013968:	f7fe fd6f 	bl	801244a <otMessageGetOffset>
 801396c:	4603      	mov	r3, r0
 801396e:	4619      	mov	r1, r3
 8013970:	2304      	movs	r3, #4
 8013972:	4a1d      	ldr	r2, [pc, #116]	; (80139e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8013974:	68b8      	ldr	r0, [r7, #8]
 8013976:	f7fe fdcd 	bl	8012514 <otMessageRead>
 801397a:	4603      	mov	r3, r0
 801397c:	2b04      	cmp	r3, #4
 801397e:	d106      	bne.n	801398e <APP_THREAD_CoapLightsSimpleRequestHandler+0x3a>
	{
//    	lightMessage = lightMessage & 0x0F; //remove first 4 bits since they are part of the message overhead (?)

    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8013980:	4b1a      	ldr	r3, [pc, #104]	; (80139ec <APP_THREAD_CoapLightsSimpleRequestHandler+0x98>)
 8013982:	6818      	ldr	r0, [r3, #0]
 8013984:	2300      	movs	r3, #0
 8013986:	2200      	movs	r2, #0
 8013988:	4917      	ldr	r1, [pc, #92]	; (80139e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 801398a:	f7fa fb0d 	bl	800dfa8 <osMessageQueuePut>
    	//char ipv6_multicast[50] = "deryfd11:1111:1122:0:22e2:b871:dc02:ad96";

//    	APP_THREAD_SendCoapUnicastRequest(message, borderRouter.ipv6, borderSyncResource);

	}
    receivedMessage = (otMessageInfo *) pMessage;
 801398e:	4a18      	ldr	r2, [pc, #96]	; (80139f0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x9c>)
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013994:	68f8      	ldr	r0, [r7, #12]
 8013996:	f7fe f98a 	bl	8011cae <otCoapHeaderGetType>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d104      	bne.n	80139aa <APP_THREAD_CoapLightsSimpleRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 80139a0:	6879      	ldr	r1, [r7, #4]
 80139a2:	68f8      	ldr	r0, [r7, #12]
 80139a4:	f000 fa3e 	bl	8013e24 <APP_THREAD_SendDataResponse>
	  break;
 80139a8:	e019      	b.n	80139de <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 80139aa:	68f8      	ldr	r0, [r7, #12]
 80139ac:	f7fe f97f 	bl	8011cae <otCoapHeaderGetType>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b10      	cmp	r3, #16
 80139b4:	d110      	bne.n	80139d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	f7fe f9a7 	bl	8011d0a <otCoapHeaderGetCode>
 80139bc:	4603      	mov	r3, r0
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d10c      	bne.n	80139dc <APP_THREAD_CoapLightsSimpleRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 80139c2:	68b8      	ldr	r0, [r7, #8]
 80139c4:	f7fe fd41 	bl	801244a <otMessageGetOffset>
 80139c8:	4603      	mov	r3, r0
 80139ca:	4619      	mov	r1, r3
 80139cc:	2301      	movs	r3, #1
 80139ce:	4a09      	ldr	r2, [pc, #36]	; (80139f4 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>)
 80139d0:	68b8      	ldr	r0, [r7, #8]
 80139d2:	f7fe fd9f 	bl	8012514 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 80139d6:	e002      	b.n	80139de <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 80139d8:	bf00      	nop
 80139da:	e000      	b.n	80139de <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 80139dc:	bf00      	nop
}
 80139de:	bf00      	nop
 80139e0:	3710      	adds	r7, #16
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	20027cc4 	.word	0x20027cc4
 80139ec:	20027880 	.word	0x20027880
 80139f0:	200285e4 	.word	0x200285e4
 80139f4:	20027659 	.word	0x20027659

080139f8 <APP_THREAD_CoapToggleLoggingRequestHandler>:

static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 8013a04:	68b8      	ldr	r0, [r7, #8]
 8013a06:	f7fe fd20 	bl	801244a <otMessageGetOffset>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	2306      	movs	r3, #6
 8013a10:	4a1e      	ldr	r2, [pc, #120]	; (8013a8c <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8013a12:	68b8      	ldr	r0, [r7, #8]
 8013a14:	f7fe fd7e 	bl	8012514 <otMessageRead>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	2b06      	cmp	r3, #6
 8013a1c:	d106      	bne.n	8013a2c <APP_THREAD_CoapToggleLoggingRequestHandler+0x34>
	{
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8013a1e:	4b1c      	ldr	r3, [pc, #112]	; (8013a90 <APP_THREAD_CoapToggleLoggingRequestHandler+0x98>)
 8013a20:	6818      	ldr	r0, [r3, #0]
 8013a22:	2300      	movs	r3, #0
 8013a24:	2200      	movs	r2, #0
 8013a26:	4919      	ldr	r1, [pc, #100]	; (8013a8c <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8013a28:	f7fa fabe 	bl	800dfa8 <osMessageQueuePut>
//    	{
//    		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
//		}
	}

    tempMessageInfo = pMessageInfo;
 8013a2c:	4a19      	ldr	r2, [pc, #100]	; (8013a94 <APP_THREAD_CoapToggleLoggingRequestHandler+0x9c>)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8013a32:	4a19      	ldr	r2, [pc, #100]	; (8013a98 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa0>)
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f7fe f938 	bl	8011cae <otCoapHeaderGetType>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d104      	bne.n	8013a4e <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8013a44:	6879      	ldr	r1, [r7, #4]
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f000 f9ec 	bl	8013e24 <APP_THREAD_SendDataResponse>
	  break;
 8013a4c:	e019      	b.n	8013a82 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	f7fe f92d 	bl	8011cae <otCoapHeaderGetType>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b10      	cmp	r3, #16
 8013a58:	d110      	bne.n	8013a7c <APP_THREAD_CoapToggleLoggingRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013a5a:	68f8      	ldr	r0, [r7, #12]
 8013a5c:	f7fe f955 	bl	8011d0a <otCoapHeaderGetCode>
 8013a60:	4603      	mov	r3, r0
 8013a62:	2b03      	cmp	r3, #3
 8013a64:	d10c      	bne.n	8013a80 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013a66:	68b8      	ldr	r0, [r7, #8]
 8013a68:	f7fe fcef 	bl	801244a <otMessageGetOffset>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	4619      	mov	r1, r3
 8013a70:	2301      	movs	r3, #1
 8013a72:	4a0a      	ldr	r2, [pc, #40]	; (8013a9c <APP_THREAD_CoapToggleLoggingRequestHandler+0xa4>)
 8013a74:	68b8      	ldr	r0, [r7, #8]
 8013a76:	f7fe fd4d 	bl	8012514 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013a7a:	e002      	b.n	8013a82 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8013a7c:	bf00      	nop
 8013a7e:	e000      	b.n	8013a82 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8013a80:	bf00      	nop
}
 8013a82:	bf00      	nop
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	200285b8 	.word	0x200285b8
 8013a90:	20027cac 	.word	0x20027cac
 8013a94:	200285a0 	.word	0x200285a0
 8013a98:	200285e4 	.word	0x200285e4
 8013a9c:	20027659 	.word	0x20027659

08013aa0 <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
  do
  {

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 8013aac:	68b8      	ldr	r0, [r7, #8]
 8013aae:	f7fe fccc 	bl	801244a <otMessageGetOffset>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	2340      	movs	r3, #64	; 0x40
 8013ab8:	4a1a      	ldr	r2, [pc, #104]	; (8013b24 <APP_THREAD_CoapBorderTimeRequestHandler+0x84>)
 8013aba:	68b8      	ldr	r0, [r7, #8]
 8013abc:	f7fe fd2a 	bl	8012514 <otMessageRead>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	2b40      	cmp	r3, #64	; 0x40
 8013ac4:	d101      	bne.n	8013aca <APP_THREAD_CoapBorderTimeRequestHandler+0x2a>
	{
    	APP_THREAD_SendMyIP();
 8013ac6:	f7ff ff21 	bl	801390c <APP_THREAD_SendMyIP>
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
////			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//		}
	}

    receivedMessage = (otMessageInfo *) pMessage;
 8013aca:	4a17      	ldr	r2, [pc, #92]	; (8013b28 <APP_THREAD_CoapBorderTimeRequestHandler+0x88>)
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f7fe f8ec 	bl	8011cae <otCoapHeaderGetType>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d104      	bne.n	8013ae6 <APP_THREAD_CoapBorderTimeRequestHandler+0x46>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f000 f9a0 	bl	8013e24 <APP_THREAD_SendDataResponse>
	  break;
 8013ae4:	e019      	b.n	8013b1a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f7fe f8e1 	bl	8011cae <otCoapHeaderGetType>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b10      	cmp	r3, #16
 8013af0:	d110      	bne.n	8013b14 <APP_THREAD_CoapBorderTimeRequestHandler+0x74>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	f7fe f909 	bl	8011d0a <otCoapHeaderGetCode>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b03      	cmp	r3, #3
 8013afc:	d10c      	bne.n	8013b18 <APP_THREAD_CoapBorderTimeRequestHandler+0x78>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013afe:	68b8      	ldr	r0, [r7, #8]
 8013b00:	f7fe fca3 	bl	801244a <otMessageGetOffset>
 8013b04:	4603      	mov	r3, r0
 8013b06:	4619      	mov	r1, r3
 8013b08:	2301      	movs	r3, #1
 8013b0a:	4a08      	ldr	r2, [pc, #32]	; (8013b2c <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>)
 8013b0c:	68b8      	ldr	r0, [r7, #8]
 8013b0e:	f7fe fd01 	bl	8012514 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013b12:	e002      	b.n	8013b1a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8013b14:	bf00      	nop
 8013b16:	e000      	b.n	8013b1a <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8013b18:	bf00      	nop
}
 8013b1a:	bf00      	nop
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	20027660 	.word	0x20027660
 8013b28:	200285e4 	.word	0x200285e4
 8013b2c:	20027659 	.word	0x20027659

08013b30 <APP_THREAD_CoapLightsComplexRequestHandler>:
//}

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 8013b3c:	68b8      	ldr	r0, [r7, #8]
 8013b3e:	f7fe fc84 	bl	801244a <otMessageGetOffset>
 8013b42:	4603      	mov	r3, r0
 8013b44:	4619      	mov	r1, r3
 8013b46:	2312      	movs	r3, #18
 8013b48:	4a16      	ldr	r2, [pc, #88]	; (8013ba4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8013b4a:	68b8      	ldr	r0, [r7, #8]
 8013b4c:	f7fe fce2 	bl	8012514 <otMessageRead>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b12      	cmp	r3, #18
 8013b54:	d102      	bne.n	8013b5c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
	{
    	FrontLightsSet(&lightMessageComplex);
 8013b56:	4813      	ldr	r0, [pc, #76]	; (8013ba4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8013b58:	f7f0 f9e0 	bl	8003f1c <FrontLightsSet>
	}

    tempMessageInfo = pMessageInfo;
 8013b5c:	4a12      	ldr	r2, [pc, #72]	; (8013ba8 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8013b62:	4a12      	ldr	r2, [pc, #72]	; (8013bac <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f7fe f8a0 	bl	8011cae <otCoapHeaderGetType>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b10      	cmp	r3, #16
 8013b72:	d110      	bne.n	8013b96 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7fe f8c8 	bl	8011d0a <otCoapHeaderGetCode>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d10c      	bne.n	8013b9a <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8013b80:	68b8      	ldr	r0, [r7, #8]
 8013b82:	f7fe fc62 	bl	801244a <otMessageGetOffset>
 8013b86:	4603      	mov	r3, r0
 8013b88:	4619      	mov	r1, r3
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	4a08      	ldr	r2, [pc, #32]	; (8013bb0 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8013b8e:	68b8      	ldr	r0, [r7, #8]
 8013b90:	f7fe fcc0 	bl	8012514 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8013b94:	e002      	b.n	8013b9c <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8013b96:	bf00      	nop
 8013b98:	e000      	b.n	8013b9c <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8013b9a:	bf00      	nop
}
 8013b9c:	bf00      	nop
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	200285d0 	.word	0x200285d0
 8013ba8:	200285a0 	.word	0x200285a0
 8013bac:	200285e4 	.word	0x200285e4
 8013bb0:	20027659 	.word	0x20027659

08013bb4 <APP_THREAD_SendCoapUnicastRequest>:
volatile otNetifMulticastAddress multicastAddresses;
volatile otIp6Address  meshLocalEID;
volatile otIp6Address linkLocalIPV6;

static void APP_THREAD_SendCoapUnicastRequest(char* message, uint8_t message_length, char* ipv6_addr  , char* resource)
{
 8013bb4:	b590      	push	{r4, r7, lr}
 8013bb6:	b087      	sub	sp, #28
 8013bb8:	af02      	add	r7, sp, #8
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	607a      	str	r2, [r7, #4]
 8013bbe:	603b      	str	r3, [r7, #0]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	72fb      	strb	r3, [r7, #11]
  // https://openthread.io/reference/struct/ot-message-info.html#structot_message_info



	do{
			  myRloc16 = otThreadGetRloc16(NULL);
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	f7ff fa5f 	bl	8013088 <otThreadGetRloc16>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	461a      	mov	r2, r3
 8013bce:	4b49      	ldr	r3, [pc, #292]	; (8013cf4 <APP_THREAD_SendCoapUnicastRequest+0x140>)
 8013bd0:	801a      	strh	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	f7fe fb27 	bl	8012226 <otIp6IsEnabled>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	461a      	mov	r2, r3
 8013bdc:	4b46      	ldr	r3, [pc, #280]	; (8013cf8 <APP_THREAD_SendCoapUnicastRequest+0x144>)
 8013bde:	701a      	strb	r2, [r3, #0]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 8013be0:	2000      	movs	r0, #0
 8013be2:	f7ff f9d1 	bl	8012f88 <otThreadGetMeshLocalEid>
 8013be6:	4602      	mov	r2, r0
 8013be8:	4b44      	ldr	r3, [pc, #272]	; (8013cfc <APP_THREAD_SendCoapUnicastRequest+0x148>)
 8013bea:	6814      	ldr	r4, [r2, #0]
 8013bec:	6850      	ldr	r0, [r2, #4]
 8013bee:	6891      	ldr	r1, [r2, #8]
 8013bf0:	68d2      	ldr	r2, [r2, #12]
 8013bf2:	601c      	str	r4, [r3, #0]
 8013bf4:	6058      	str	r0, [r3, #4]
 8013bf6:	6099      	str	r1, [r3, #8]
 8013bf8:	60da      	str	r2, [r3, #12]

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8013bfa:	222c      	movs	r2, #44	; 0x2c
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	4840      	ldr	r0, [pc, #256]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013c00:	f001 f8ad 	bl	8014d5e <memset>

			  // set border IP address
			   //error = otIp6AddressFromString("ff03::1", &OT_MessageInfo.mPeerAddr);
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8013c04:	493f      	ldr	r1, [pc, #252]	; (8013d04 <APP_THREAD_SendCoapUnicastRequest+0x150>)
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7fe fb62 	bl	80122d0 <otIp6AddressFromString>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	461a      	mov	r2, r3
 8013c10:	4b3d      	ldr	r3, [pc, #244]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013c12:	701a      	strb	r2, [r3, #0]


			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8013c14:	2000      	movs	r0, #0
 8013c16:	f7ff f9b7 	bl	8012f88 <otThreadGetMeshLocalEid>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	4b38      	ldr	r3, [pc, #224]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013c1e:	461c      	mov	r4, r3
 8013c20:	4613      	mov	r3, r2
 8013c22:	6818      	ldr	r0, [r3, #0]
 8013c24:	6859      	ldr	r1, [r3, #4]
 8013c26:	689a      	ldr	r2, [r3, #8]
 8013c28:	68db      	ldr	r3, [r3, #12]
 8013c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8013c2c:	4b34      	ldr	r3, [pc, #208]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013c2e:	2201      	movs	r2, #1
 8013c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8013c34:	4b32      	ldr	r3, [pc, #200]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013c36:	f241 6233 	movw	r2, #5683	; 0x1633
 8013c3a:	845a      	strh	r2, [r3, #34]	; 0x22

			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 8013c3c:	2000      	movs	r0, #0
 8013c3e:	f7fe fb1f 	bl	8012280 <otIp6GetUnicastAddresses>
 8013c42:	4602      	mov	r2, r0
 8013c44:	4b31      	ldr	r3, [pc, #196]	; (8013d0c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 8013c46:	601a      	str	r2, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 8013c48:	4b30      	ldr	r3, [pc, #192]	; (8013d0c <APP_THREAD_SendCoapUnicastRequest+0x158>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4a2c      	ldr	r2, [pc, #176]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013c4e:	4614      	mov	r4, r2
 8013c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8013c56:	2203      	movs	r2, #3
 8013c58:	2110      	movs	r1, #16
 8013c5a:	482d      	ldr	r0, [pc, #180]	; (8013d10 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8013c5c:	f7fd fecb 	bl	80119f6 <otCoapHeaderInit>
			  //otCoapHeaderSetMessageId(&OT_Header,OT_BufferIdSend); //may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8013c60:	2102      	movs	r1, #2
 8013c62:	482b      	ldr	r0, [pc, #172]	; (8013d10 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8013c64:	f7fd ff30 	bl	8011ac8 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  //error = otCoapHeaderAppendUriPathOptions(&OT_Header,C_RESSOURCE_BASIC);
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	4829      	ldr	r0, [pc, #164]	; (8013d10 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8013c6c:	f7fd ff8f 	bl	8011b8e <otCoapHeaderAppendUriPathOptions>
 8013c70:	4603      	mov	r3, r0
 8013c72:	461a      	mov	r2, r3
 8013c74:	4b24      	ldr	r3, [pc, #144]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013c76:	701a      	strb	r2, [r3, #0]

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 8013c78:	4825      	ldr	r0, [pc, #148]	; (8013d10 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8013c7a:	f7fd ffba 	bl	8011bf2 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8013c7e:	4924      	ldr	r1, [pc, #144]	; (8013d10 <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8013c80:	2000      	movs	r0, #0
 8013c82:	f7fe f8f9 	bl	8011e78 <otCoapNewMessage>
 8013c86:	4602      	mov	r2, r0
 8013c88:	4b22      	ldr	r3, [pc, #136]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013c8a:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 8013c8c:	4b21      	ldr	r3, [pc, #132]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d100      	bne.n	8013c96 <APP_THREAD_SendCoapUnicastRequest+0xe2>
 8013c94:	e7fe      	b.n	8013c94 <APP_THREAD_SendCoapUnicastRequest+0xe0>
			  // Append bytes to a message (this is where the payload gets added)

			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
//			  error = otMessageAppend(pOT_Message, &OT_MessageInfo, sizeof(OT_MessageInfo));
			  error = otMessageAppend(pOT_Message, message, message_length);
 8013c96:	4b1f      	ldr	r3, [pc, #124]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	7afa      	ldrb	r2, [r7, #11]
 8013c9c:	b292      	uxth	r2, r2
 8013c9e:	68f9      	ldr	r1, [r7, #12]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fe fc00 	bl	80124a6 <otMessageAppend>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	461a      	mov	r2, r3
 8013caa:	4b17      	ldr	r3, [pc, #92]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013cac:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 8013cae:	4b16      	ldr	r3, [pc, #88]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d000      	beq.n	8013cb8 <APP_THREAD_SendCoapUnicastRequest+0x104>
 8013cb6:	e7fe      	b.n	8013cb6 <APP_THREAD_SendCoapUnicastRequest+0x102>

			  error = otCoapSendRequest(NULL,
 8013cb8:	4b16      	ldr	r3, [pc, #88]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013cba:	6819      	ldr	r1, [r3, #0]
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	9300      	str	r3, [sp, #0]
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	4a0f      	ldr	r2, [pc, #60]	; (8013d00 <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	f7fe f905 	bl	8011ed4 <otCoapSendRequest>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	461a      	mov	r2, r3
 8013cce:	4b0e      	ldr	r3, [pc, #56]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013cd0:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8013cd2:	4b0d      	ldr	r3, [pc, #52]	; (8013d08 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d008      	beq.n	8013cec <APP_THREAD_SendCoapUnicastRequest+0x138>
 8013cda:	4b0e      	ldr	r3, [pc, #56]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d004      	beq.n	8013cec <APP_THREAD_SendCoapUnicastRequest+0x138>
			  {
				otMessageFree(pOT_Message);
 8013ce2:	4b0c      	ldr	r3, [pc, #48]	; (8013d14 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7fe fb84 	bl	80123f4 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8013cec:	bf00      	nop
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd90      	pop	{r4, r7, pc}
 8013cf4:	20028662 	.word	0x20028662
 8013cf8:	200285e2 	.word	0x200285e2
 8013cfc:	20028650 	.word	0x20028650
 8013d00:	20027598 	.word	0x20027598
 8013d04:	200275a8 	.word	0x200275a8
 8013d08:	20027658 	.word	0x20027658
 8013d0c:	20028664 	.word	0x20028664
 8013d10:	200275c4 	.word	0x200275c4
 8013d14:	20027654 	.word	0x20027654

08013d18 <APP_THREAD_SendCoapUnicastMsg>:

static void APP_THREAD_SendCoapUnicastMsg(void *message, uint8_t msgSize, char* ipv6_addr  , char* resource, uint8_t msgID)
{
 8013d18:	b590      	push	{r4, r7, lr}
 8013d1a:	b087      	sub	sp, #28
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	607a      	str	r2, [r7, #4]
 8013d22:	603b      	str	r3, [r7, #0]
 8013d24:	460b      	mov	r3, r1
 8013d26:	72fb      	strb	r3, [r7, #11]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8013d28:	222c      	movs	r2, #44	; 0x2c
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	4838      	ldr	r0, [pc, #224]	; (8013e10 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8013d2e:	f001 f816 	bl	8014d5e <memset>

			  // set border IP address
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8013d32:	4938      	ldr	r1, [pc, #224]	; (8013e14 <APP_THREAD_SendCoapUnicastMsg+0xfc>)
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7fe facb 	bl	80122d0 <otIp6AddressFromString>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4b36      	ldr	r3, [pc, #216]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013d40:	701a      	strb	r2, [r3, #0]

			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8013d42:	2000      	movs	r0, #0
 8013d44:	f7ff f920 	bl	8012f88 <otThreadGetMeshLocalEid>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	4b31      	ldr	r3, [pc, #196]	; (8013e10 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8013d4c:	461c      	mov	r4, r3
 8013d4e:	4613      	mov	r3, r2
 8013d50:	6818      	ldr	r0, [r3, #0]
 8013d52:	6859      	ldr	r1, [r3, #4]
 8013d54:	689a      	ldr	r2, [r3, #8]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8013d5a:	4b2d      	ldr	r3, [pc, #180]	; (8013e10 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8013d62:	4b2b      	ldr	r3, [pc, #172]	; (8013e10 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8013d64:	f241 6233 	movw	r2, #5683	; 0x1633
 8013d68:	845a      	strh	r2, [r3, #34]	; 0x22
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8013d6a:	2203      	movs	r2, #3
 8013d6c:	2110      	movs	r1, #16
 8013d6e:	482b      	ldr	r0, [pc, #172]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d70:	f7fd fe41 	bl	80119f6 <otCoapHeaderInit>
//			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8013d74:	2102      	movs	r1, #2
 8013d76:	4829      	ldr	r0, [pc, #164]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d78:	f7fd fea6 	bl	8011ac8 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8013d7c:	6839      	ldr	r1, [r7, #0]
 8013d7e:	4827      	ldr	r0, [pc, #156]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d80:	f7fd ff05 	bl	8011b8e <otCoapHeaderAppendUriPathOptions>
 8013d84:	4603      	mov	r3, r0
 8013d86:	461a      	mov	r2, r3
 8013d88:	4b23      	ldr	r3, [pc, #140]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013d8a:	701a      	strb	r2, [r3, #0]

			  // need this so the coap server doesnt try to parse as 'utf-8' and error out
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8013d8c:	212a      	movs	r1, #42	; 0x2a
 8013d8e:	4823      	ldr	r0, [pc, #140]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d90:	f7fd feca 	bl	8011b28 <otCoapHeaderAppendContentFormatOption>

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 8013d94:	4821      	ldr	r0, [pc, #132]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d96:	f7fd ff2c 	bl	8011bf2 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8013d9a:	4920      	ldr	r1, [pc, #128]	; (8013e1c <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	f7fe f86b 	bl	8011e78 <otCoapNewMessage>
 8013da2:	4602      	mov	r2, r0
 8013da4:	4b1e      	ldr	r3, [pc, #120]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013da6:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 8013da8:	4b1d      	ldr	r3, [pc, #116]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d100      	bne.n	8013db2 <APP_THREAD_SendCoapUnicastMsg+0x9a>
 8013db0:	e7fe      	b.n	8013db0 <APP_THREAD_SendCoapUnicastMsg+0x98>
			  // Append bytes to a message (this is where the payload gets added)



			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
			  error = otMessageAppend(pOT_Message, message, msgSize);
 8013db2:	4b1b      	ldr	r3, [pc, #108]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	7afa      	ldrb	r2, [r7, #11]
 8013db8:	b292      	uxth	r2, r2
 8013dba:	68f9      	ldr	r1, [r7, #12]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fe fb72 	bl	80124a6 <otMessageAppend>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	4b14      	ldr	r3, [pc, #80]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013dc8:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d000      	beq.n	8013dd4 <APP_THREAD_SendCoapUnicastMsg+0xbc>
 8013dd2:	e7fe      	b.n	8013dd2 <APP_THREAD_SendCoapUnicastMsg+0xba>

			  error = otCoapSendRequest(NULL,
 8013dd4:	4b12      	ldr	r3, [pc, #72]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013dd6:	6819      	ldr	r1, [r3, #0]
 8013dd8:	2300      	movs	r3, #0
 8013dda:	9300      	str	r3, [sp, #0]
 8013ddc:	2300      	movs	r3, #0
 8013dde:	4a0c      	ldr	r2, [pc, #48]	; (8013e10 <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8013de0:	2000      	movs	r0, #0
 8013de2:	f7fe f877 	bl	8011ed4 <otCoapSendRequest>
 8013de6:	4603      	mov	r3, r0
 8013de8:	461a      	mov	r2, r3
 8013dea:	4b0b      	ldr	r3, [pc, #44]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013dec:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8013dee:	4b0a      	ldr	r3, [pc, #40]	; (8013e18 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d008      	beq.n	8013e08 <APP_THREAD_SendCoapUnicastMsg+0xf0>
 8013df6:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d004      	beq.n	8013e08 <APP_THREAD_SendCoapUnicastMsg+0xf0>
			  {
				otMessageFree(pOT_Message);
 8013dfe:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe faf6 	bl	80123f4 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8013e08:	bf00      	nop
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd90      	pop	{r4, r7, pc}
 8013e10:	20027598 	.word	0x20027598
 8013e14:	200275a8 	.word	0x200275a8
 8013e18:	20027658 	.word	0x20027658
 8013e1c:	200275c4 	.word	0x200275c4
 8013e20:	20027654 	.word	0x20027654

08013e24 <APP_THREAD_SendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_SendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8013e24:	b590      	push	{r4, r7, lr}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]

  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 8013e32:	4a1f      	ldr	r2, [pc, #124]	; (8013eb0 <APP_THREAD_SendDataResponse+0x8c>)
 8013e34:	2101      	movs	r1, #1
 8013e36:	2000      	movs	r0, #0
 8013e38:	f7f1 f8f4 	bl	8005024 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8013e3c:	2244      	movs	r2, #68	; 0x44
 8013e3e:	2120      	movs	r1, #32
 8013e40:	481c      	ldr	r0, [pc, #112]	; (8013eb4 <APP_THREAD_SendDataResponse+0x90>)
 8013e42:	f7fd fdd8 	bl	80119f6 <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f7fd ff8d 	bl	8011d66 <otCoapHeaderGetMessageId>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	4619      	mov	r1, r3
 8013e50:	4818      	ldr	r0, [pc, #96]	; (8013eb4 <APP_THREAD_SendDataResponse+0x90>)
 8013e52:	f7fd fefc 	bl	8011c4e <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7fd ffe1 	bl	8011e1e <otCoapHeaderGetToken>
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7fd ffaf 	bl	8011dc2 <otCoapHeaderGetTokenLength>
 8013e64:	4603      	mov	r3, r0
 8013e66:	461a      	mov	r2, r3
 8013e68:	4621      	mov	r1, r4
 8013e6a:	4812      	ldr	r0, [pc, #72]	; (8013eb4 <APP_THREAD_SendDataResponse+0x90>)
 8013e6c:	f7fd fdf8 	bl	8011a60 <otCoapHeaderSetToken>
      otCoapHeaderGetToken(pRequestHeader),
      otCoapHeaderGetTokenLength(pRequestHeader));

  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8013e70:	4910      	ldr	r1, [pc, #64]	; (8013eb4 <APP_THREAD_SendDataResponse+0x90>)
 8013e72:	2000      	movs	r0, #0
 8013e74:	f7fe f800 	bl	8011e78 <otCoapNewMessage>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <APP_THREAD_SendDataResponse+0x94>)
 8013e7c:	601a      	str	r2, [r3, #0]
  if (pOT_Message == NULL)
  {
    //APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
  }
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8013e7e:	4b0e      	ldr	r3, [pc, #56]	; (8013eb8 <APP_THREAD_SendDataResponse+0x94>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	4619      	mov	r1, r3
 8013e86:	2000      	movs	r0, #0
 8013e88:	f7fe f8bd 	bl	8012006 <otCoapSendResponse>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	73fb      	strb	r3, [r7, #15]
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8013e90:	7bfb      	ldrb	r3, [r7, #15]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d008      	beq.n	8013ea8 <APP_THREAD_SendDataResponse+0x84>
 8013e96:	4b08      	ldr	r3, [pc, #32]	; (8013eb8 <APP_THREAD_SendDataResponse+0x94>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d004      	beq.n	8013ea8 <APP_THREAD_SendDataResponse+0x84>
  {
    otMessageFree(pOT_Message);
 8013e9e:	4b06      	ldr	r3, [pc, #24]	; (8013eb8 <APP_THREAD_SendDataResponse+0x94>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fe faa6 	bl	80123f4 <otMessageFree>
    //APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
  }
}
 8013ea8:	bf00      	nop
 8013eaa:	3714      	adds	r7, #20
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd90      	pop	{r4, r7, pc}
 8013eb0:	08016328 	.word	0x08016328
 8013eb4:	200275c4 	.word	0x200275c4
 8013eb8:	20027654 	.word	0x20027654

08013ebc <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8013ec4:	4a04      	ldr	r2, [pc, #16]	; (8013ed8 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6013      	str	r3, [r2, #0]
}
 8013eca:	bf00      	nop
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	20027580 	.word	0x20027580

08013edc <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8013edc:	b480      	push	{r7}
 8013ede:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8013ee0:	4b03      	ldr	r3, [pc, #12]	; (8013ef0 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	330c      	adds	r3, #12
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	20027580 	.word	0x20027580

08013ef4 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8013ef8:	4b03      	ldr	r3, [pc, #12]	; (8013f08 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	330b      	adds	r3, #11
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr
 8013f08:	20027580 	.word	0x20027580

08013f0c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	330b      	adds	r3, #11
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1e:	4770      	bx	lr
 8013f20:	20027584 	.word	0x20027584

08013f24 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8013f2a:	4b0f      	ldr	r3, [pc, #60]	; (8013f68 <Ot_Cmd_Transfer+0x44>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8013f34:	725a      	strb	r2, [r3, #9]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f042 0202 	orr.w	r2, r2, #2
 8013f3c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8013f3e:	4b0a      	ldr	r3, [pc, #40]	; (8013f68 <Ot_Cmd_Transfer+0x44>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	330c      	adds	r3, #12
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	3302      	adds	r3, #2
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8013f4c:	4b06      	ldr	r3, [pc, #24]	; (8013f68 <Ot_Cmd_Transfer+0x44>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	b2d2      	uxtb	r2, r2
 8013f54:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8013f56:	f7ff f9a9 	bl	80132ac <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8013f5a:	f000 f829 	bl	8013fb0 <Wait_Getting_Ack_From_M0>
}
 8013f5e:	bf00      	nop
 8013f60:	3708      	adds	r7, #8
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	20027580 	.word	0x20027580

08013f6c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8013f74:	f000 f82e 	bl	8013fd4 <Receive_Ack_From_M0>
}
 8013f78:	bf00      	nop
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8013f88:	4a04      	ldr	r2, [pc, #16]	; (8013f9c <TL_THREAD_NotReceived+0x1c>)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8013f8e:	f000 f82d 	bl	8013fec <Receive_Notification_From_M0>
}
 8013f92:	bf00      	nop
 8013f94:	3708      	adds	r7, #8
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	20027584 	.word	0x20027584

08013fa0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	af00      	add	r7, sp, #0

}
 8013fa4:	bf00      	nop
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr
	...

08013fb0 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8013fb4:	bf00      	nop
 8013fb6:	4b06      	ldr	r3, [pc, #24]	; (8013fd0 <Wait_Getting_Ack_From_M0+0x20>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d0fb      	beq.n	8013fb6 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8013fbe:	4b04      	ldr	r3, [pc, #16]	; (8013fd0 <Wait_Getting_Ack_From_M0+0x20>)
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	601a      	str	r2, [r3, #0]
}
 8013fc4:	bf00      	nop
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	2002758c 	.word	0x2002758c

08013fd4 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8013fd8:	4b03      	ldr	r3, [pc, #12]	; (8013fe8 <Receive_Ack_From_M0+0x14>)
 8013fda:	2201      	movs	r2, #1
 8013fdc:	601a      	str	r2, [r3, #0]
}
 8013fde:	bf00      	nop
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr
 8013fe8:	2002758c 	.word	0x2002758c

08013fec <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8013ff0:	4b06      	ldr	r3, [pc, #24]	; (801400c <Receive_Notification_From_M0+0x20>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	4a05      	ldr	r2, [pc, #20]	; (801400c <Receive_Notification_From_M0+0x20>)
 8013ff8:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8013ffa:	4b05      	ldr	r3, [pc, #20]	; (8014010 <Receive_Notification_From_M0+0x24>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2101      	movs	r1, #1
 8014000:	4618      	mov	r0, r3
 8014002:	f7f9 fa0f 	bl	800d424 <osThreadFlagsSet>
}
 8014006:	bf00      	nop
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	20027588 	.word	0x20027588
 8014010:	20027590 	.word	0x20027590

08014014 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8014018:	22ff      	movs	r2, #255	; 0xff
 801401a:	2100      	movs	r1, #0
 801401c:	4812      	ldr	r0, [pc, #72]	; (8014068 <Send_CLI_To_M0+0x54>)
 801401e:	f000 fe9e 	bl	8014d5e <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8014022:	4b12      	ldr	r3, [pc, #72]	; (801406c <Send_CLI_To_M0+0x58>)
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	b29b      	uxth	r3, r3
 8014028:	461a      	mov	r2, r3
 801402a:	4911      	ldr	r1, [pc, #68]	; (8014070 <Send_CLI_To_M0+0x5c>)
 801402c:	480e      	ldr	r0, [pc, #56]	; (8014068 <Send_CLI_To_M0+0x54>)
 801402e:	f000 fe8b 	bl	8014d48 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8014032:	4b0e      	ldr	r3, [pc, #56]	; (801406c <Send_CLI_To_M0+0x58>)
 8014034:	881b      	ldrh	r3, [r3, #0]
 8014036:	b29b      	uxth	r3, r3
 8014038:	b2da      	uxtb	r2, r3
 801403a:	4b0e      	ldr	r3, [pc, #56]	; (8014074 <Send_CLI_To_M0+0x60>)
 801403c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 801403e:	4b0d      	ldr	r3, [pc, #52]	; (8014074 <Send_CLI_To_M0+0x60>)
 8014040:	2200      	movs	r2, #0
 8014042:	725a      	strb	r2, [r3, #9]
 8014044:	2200      	movs	r2, #0
 8014046:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8014048:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <Send_CLI_To_M0+0x64>)
 801404a:	2200      	movs	r2, #0
 801404c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 801404e:	4b07      	ldr	r3, [pc, #28]	; (801406c <Send_CLI_To_M0+0x58>)
 8014050:	2200      	movs	r2, #0
 8014052:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8014054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014058:	2100      	movs	r1, #0
 801405a:	4805      	ldr	r0, [pc, #20]	; (8014070 <Send_CLI_To_M0+0x5c>)
 801405c:	f000 fe7f 	bl	8014d5e <memset>

  TL_CLI_SendCmd();
 8014060:	f7ff f932 	bl	80132c8 <TL_CLI_SendCmd>
}
 8014064:	bf00      	nop
 8014066:	bd80      	pop	{r7, pc}
 8014068:	20030a5c 	.word	0x20030a5c
 801406c:	2002757c 	.word	0x2002757c
 8014070:	2002747c 	.word	0x2002747c
 8014074:	20030a50 	.word	0x20030a50
 8014078:	2002757e 	.word	0x2002757e

0801407c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8014080:	f7ff f93e 	bl	8013300 <TL_THREAD_CliSendAck>
}
 8014084:	bf00      	nop
 8014086:	bd80      	pop	{r7, pc}

08014088 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 801408c:	4a04      	ldr	r2, [pc, #16]	; (80140a0 <APP_THREAD_Init_UART_CLI+0x18>)
 801408e:	2100      	movs	r1, #0
 8014090:	4804      	ldr	r0, [pc, #16]	; (80140a4 <APP_THREAD_Init_UART_CLI+0x1c>)
 8014092:	f7f9 f91b 	bl	800d2cc <osThreadNew>
 8014096:	4602      	mov	r2, r0
 8014098:	4b03      	ldr	r3, [pc, #12]	; (80140a8 <APP_THREAD_Init_UART_CLI+0x20>)
 801409a:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 801409c:	bf00      	nop
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	08016754 	.word	0x08016754
 80140a4:	080138c3 	.word	0x080138c3
 80140a8:	20027594 	.word	0x20027594

080140ac <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80140b0:	4b06      	ldr	r3, [pc, #24]	; (80140cc <APP_THREAD_TL_THREAD_INIT+0x20>)
 80140b2:	4a07      	ldr	r2, [pc, #28]	; (80140d0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80140b4:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80140b6:	4b05      	ldr	r3, [pc, #20]	; (80140cc <APP_THREAD_TL_THREAD_INIT+0x20>)
 80140b8:	4a06      	ldr	r2, [pc, #24]	; (80140d4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80140ba:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80140bc:	4b03      	ldr	r3, [pc, #12]	; (80140cc <APP_THREAD_TL_THREAD_INIT+0x20>)
 80140be:	4a06      	ldr	r2, [pc, #24]	; (80140d8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80140c0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80140c2:	4802      	ldr	r0, [pc, #8]	; (80140cc <APP_THREAD_TL_THREAD_INIT+0x20>)
 80140c4:	f7ff f8d6 	bl	8013274 <TL_THREAD_Init>
}
 80140c8:	bf00      	nop
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	200300b8 	.word	0x200300b8
 80140d0:	20030838 	.word	0x20030838
 80140d4:	20030944 	.word	0x20030944
 80140d8:	20030a50 	.word	0x20030a50

080140dc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	7adb      	ldrb	r3, [r3, #11]
 80140ec:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	330c      	adds	r3, #12
 80140f2:	4906      	ldr	r1, [pc, #24]	; (801410c <TL_THREAD_CliNotReceived+0x30>)
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7ec f843 	bl	8000180 <strcmp>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d101      	bne.n	8014104 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8014100:	f7ff ffbc 	bl	801407c <Send_CLI_Ack_For_OT>
  }
}
 8014104:	bf00      	nop
 8014106:	3710      	adds	r7, #16
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	08016354 	.word	0x08016354

08014110 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8014114:	4b09      	ldr	r3, [pc, #36]	; (801413c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00d      	beq.n	8014138 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 801411c:	4b07      	ldr	r3, [pc, #28]	; (801413c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b01      	cmp	r3, #1
 8014122:	d904      	bls.n	801412e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8014124:	2100      	movs	r1, #0
 8014126:	2000      	movs	r0, #0
 8014128:	f7ff f9e2 	bl	80134f0 <APP_THREAD_Error>
 801412c:	e001      	b.n	8014132 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 801412e:	f7fe fa2d 	bl	801258c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8014132:	4b02      	ldr	r3, [pc, #8]	; (801413c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]
  }
}
 8014138:	bf00      	nop
 801413a:	bd80      	pop	{r7, pc}
 801413c:	20027588 	.word	0x20027588

08014140 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014140:	b480      	push	{r7}
 8014142:	b083      	sub	sp, #12
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014148:	4b06      	ldr	r3, [pc, #24]	; (8014164 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801414a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801414e:	4905      	ldr	r1, [pc, #20]	; (8014164 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	4313      	orrs	r3, r2
 8014154:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8014158:	bf00      	nop
 801415a:	370c      	adds	r7, #12
 801415c:	46bd      	mov	sp, r7
 801415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014162:	4770      	bx	lr
 8014164:	58000800 	.word	0x58000800

08014168 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014170:	4b05      	ldr	r3, [pc, #20]	; (8014188 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014172:	6a1a      	ldr	r2, [r3, #32]
 8014174:	4904      	ldr	r1, [pc, #16]	; (8014188 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	4313      	orrs	r3, r2
 801417a:	620b      	str	r3, [r1, #32]
}
 801417c:	bf00      	nop
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr
 8014188:	58000800 	.word	0x58000800

0801418c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 801418c:	b480      	push	{r7}
 801418e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014190:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <LL_PWR_EnableBootC2+0x1c>)
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	4a04      	ldr	r2, [pc, #16]	; (80141a8 <LL_PWR_EnableBootC2+0x1c>)
 8014196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801419a:	60d3      	str	r3, [r2, #12]
}
 801419c:	bf00      	nop
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop
 80141a8:	58000400 	.word	0x58000400

080141ac <LL_AHB3_GRP1_EnableClock>:
{
 80141ac:	b480      	push	{r7}
 80141ae:	b085      	sub	sp, #20
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80141b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80141b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	4313      	orrs	r3, r2
 80141c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80141c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80141c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	4013      	ands	r3, r2
 80141ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80141d0:	68fb      	ldr	r3, [r7, #12]
}
 80141d2:	bf00      	nop
 80141d4:	3714      	adds	r7, #20
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr

080141de <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80141de:	b480      	push	{r7}
 80141e0:	b083      	sub	sp, #12
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	601a      	str	r2, [r3, #0]
}
 80141f2:	bf00      	nop
 80141f4:	370c      	adds	r7, #12
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80141fe:	b480      	push	{r7}
 8014200:	b083      	sub	sp, #12
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f043 0201 	orr.w	r2, r3, #1
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	601a      	str	r2, [r3, #0]
}
 8014212:	bf00      	nop
 8014214:	370c      	adds	r7, #12
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr

0801421e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801421e:	b480      	push	{r7}
 8014220:	b083      	sub	sp, #12
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685a      	ldr	r2, [r3, #4]
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	041b      	lsls	r3, r3, #16
 8014230:	43db      	mvns	r3, r3
 8014232:	401a      	ands	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	605a      	str	r2, [r3, #4]
}
 8014238:	bf00      	nop
 801423a:	370c      	adds	r7, #12
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014244:	b480      	push	{r7}
 8014246:	b083      	sub	sp, #12
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	041b      	lsls	r3, r3, #16
 8014256:	431a      	orrs	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	605a      	str	r2, [r3, #4]
}
 801425c:	bf00      	nop
 801425e:	370c      	adds	r7, #12
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr

08014268 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014268:	b480      	push	{r7}
 801426a:	b083      	sub	sp, #12
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685a      	ldr	r2, [r3, #4]
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	43db      	mvns	r3, r3
 801427a:	401a      	ands	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	605a      	str	r2, [r3, #4]
}
 8014280:	bf00      	nop
 8014282:	370c      	adds	r7, #12
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr

0801428c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801428c:	b480      	push	{r7}
 801428e:	b083      	sub	sp, #12
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	685a      	ldr	r2, [r3, #4]
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	431a      	orrs	r2, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	605a      	str	r2, [r3, #4]
}
 80142a2:	bf00      	nop
 80142a4:	370c      	adds	r7, #12
 80142a6:	46bd      	mov	sp, r7
 80142a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ac:	4770      	bx	lr

080142ae <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80142ae:	b480      	push	{r7}
 80142b0:	b083      	sub	sp, #12
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	683a      	ldr	r2, [r7, #0]
 80142bc:	609a      	str	r2, [r3, #8]
}
 80142be:	bf00      	nop
 80142c0:	370c      	adds	r7, #12
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr

080142ca <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
 80142d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	041a      	lsls	r2, r3, #16
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	609a      	str	r2, [r3, #8]
}
 80142dc:	bf00      	nop
 80142de:	370c      	adds	r7, #12
 80142e0:	46bd      	mov	sp, r7
 80142e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e6:	4770      	bx	lr

080142e8 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b083      	sub	sp, #12
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	68da      	ldr	r2, [r3, #12]
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	4013      	ands	r3, r2
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d101      	bne.n	8014304 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014300:	2301      	movs	r3, #1
 8014302:	e000      	b.n	8014306 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	370c      	adds	r7, #12
 801430a:	46bd      	mov	sp, r7
 801430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014310:	4770      	bx	lr

08014312 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014312:	b480      	push	{r7}
 8014314:	b083      	sub	sp, #12
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
 801431a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	69da      	ldr	r2, [r3, #28]
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	4013      	ands	r3, r2
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	429a      	cmp	r2, r3
 8014328:	d101      	bne.n	801432e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801432a:	2301      	movs	r3, #1
 801432c:	e000      	b.n	8014330 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801432e:	2300      	movs	r3, #0
}
 8014330:	4618      	mov	r0, r3
 8014332:	370c      	adds	r7, #12
 8014334:	46bd      	mov	sp, r7
 8014336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433a:	4770      	bx	lr

0801433c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014340:	2102      	movs	r1, #2
 8014342:	482a      	ldr	r0, [pc, #168]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014344:	f7ff ffe5 	bl	8014312 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d009      	beq.n	8014362 <HW_IPCC_Rx_Handler+0x26>
 801434e:	4b27      	ldr	r3, [pc, #156]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	43db      	mvns	r3, r3
 8014354:	f003 0302 	and.w	r3, r3, #2
 8014358:	2b00      	cmp	r3, #0
 801435a:	d002      	beq.n	8014362 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 801435c:	f000 f906 	bl	801456c <HW_IPCC_SYS_EvtHandler>
 8014360:	e041      	b.n	80143e6 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8014362:	2104      	movs	r1, #4
 8014364:	4821      	ldr	r0, [pc, #132]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014366:	f7ff ffd4 	bl	8014312 <LL_C2_IPCC_IsActiveFlag_CHx>
 801436a:	4603      	mov	r3, r0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d009      	beq.n	8014384 <HW_IPCC_Rx_Handler+0x48>
 8014370:	4b1e      	ldr	r3, [pc, #120]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014372:	685b      	ldr	r3, [r3, #4]
 8014374:	43db      	mvns	r3, r3
 8014376:	f003 0304 	and.w	r3, r3, #4
 801437a:	2b00      	cmp	r3, #0
 801437c:	d002      	beq.n	8014384 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 801437e:	f000 f94f 	bl	8014620 <HW_IPCC_THREAD_NotEvtHandler>
 8014382:	e030      	b.n	80143e6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8014384:	2110      	movs	r1, #16
 8014386:	4819      	ldr	r0, [pc, #100]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014388:	f7ff ffc3 	bl	8014312 <LL_C2_IPCC_IsActiveFlag_CHx>
 801438c:	4603      	mov	r3, r0
 801438e:	2b00      	cmp	r3, #0
 8014390:	d009      	beq.n	80143a6 <HW_IPCC_Rx_Handler+0x6a>
 8014392:	4b16      	ldr	r3, [pc, #88]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	43db      	mvns	r3, r3
 8014398:	f003 0310 	and.w	r3, r3, #16
 801439c:	2b00      	cmp	r3, #0
 801439e:	d002      	beq.n	80143a6 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80143a0:	f000 f94a 	bl	8014638 <HW_IPCC_THREAD_CliNotEvtHandler>
 80143a4:	e01f      	b.n	80143e6 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80143a6:	2101      	movs	r1, #1
 80143a8:	4810      	ldr	r0, [pc, #64]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 80143aa:	f7ff ffb2 	bl	8014312 <LL_C2_IPCC_IsActiveFlag_CHx>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d008      	beq.n	80143c6 <HW_IPCC_Rx_Handler+0x8a>
 80143b4:	4b0d      	ldr	r3, [pc, #52]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	f003 0301 	and.w	r3, r3, #1
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d102      	bne.n	80143c6 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 80143c0:	f000 f898 	bl	80144f4 <HW_IPCC_BLE_EvtHandler>
 80143c4:	e00f      	b.n	80143e6 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80143c6:	2108      	movs	r1, #8
 80143c8:	4808      	ldr	r0, [pc, #32]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 80143ca:	f7ff ffa2 	bl	8014312 <LL_C2_IPCC_IsActiveFlag_CHx>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d009      	beq.n	80143e8 <HW_IPCC_Rx_Handler+0xac>
 80143d4:	4b05      	ldr	r3, [pc, #20]	; (80143ec <HW_IPCC_Rx_Handler+0xb0>)
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	43db      	mvns	r3, r3
 80143da:	f003 0308 	and.w	r3, r3, #8
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d002      	beq.n	80143e8 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80143e2:	f000 f975 	bl	80146d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80143e6:	bf00      	nop
 80143e8:	bf00      	nop
}
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	58000c00 	.word	0x58000c00

080143f0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80143f4:	2102      	movs	r1, #2
 80143f6:	482b      	ldr	r0, [pc, #172]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 80143f8:	f7ff ff76 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <HW_IPCC_Tx_Handler+0x26>
 8014402:	4b28      	ldr	r3, [pc, #160]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	43db      	mvns	r3, r3
 8014408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801440c:	2b00      	cmp	r3, #0
 801440e:	d002      	beq.n	8014416 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014410:	f000 f8a0 	bl	8014554 <HW_IPCC_SYS_CmdEvtHandler>
 8014414:	e042      	b.n	801449c <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8014416:	2104      	movs	r1, #4
 8014418:	4822      	ldr	r0, [pc, #136]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 801441a:	f7ff ff65 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d109      	bne.n	8014438 <HW_IPCC_Tx_Handler+0x48>
 8014424:	4b1f      	ldr	r3, [pc, #124]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	43db      	mvns	r3, r3
 801442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801442e:	2b00      	cmp	r3, #0
 8014430:	d002      	beq.n	8014438 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8014432:	f000 f8e9 	bl	8014608 <HW_IPCC_OT_CmdEvtHandler>
 8014436:	e031      	b.n	801449c <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014438:	2102      	movs	r1, #2
 801443a:	481a      	ldr	r0, [pc, #104]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 801443c:	f7ff ff54 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d109      	bne.n	801445a <HW_IPCC_Tx_Handler+0x6a>
 8014446:	4b17      	ldr	r3, [pc, #92]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	43db      	mvns	r3, r3
 801444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014450:	2b00      	cmp	r3, #0
 8014452:	d002      	beq.n	801445a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014454:	f000 f87e 	bl	8014554 <HW_IPCC_SYS_CmdEvtHandler>
 8014458:	e020      	b.n	801449c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801445a:	2108      	movs	r1, #8
 801445c:	4811      	ldr	r0, [pc, #68]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 801445e:	f7ff ff43 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d109      	bne.n	801447c <HW_IPCC_Tx_Handler+0x8c>
 8014468:	4b0e      	ldr	r3, [pc, #56]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	43db      	mvns	r3, r3
 801446e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014472:	2b00      	cmp	r3, #0
 8014474:	d002      	beq.n	801447c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014476:	f000 f90d 	bl	8014694 <HW_IPCC_MM_FreeBufHandler>
 801447a:	e00f      	b.n	801449c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801447c:	2120      	movs	r1, #32
 801447e:	4809      	ldr	r0, [pc, #36]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 8014480:	f7ff ff32 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014484:	4603      	mov	r3, r0
 8014486:	2b00      	cmp	r3, #0
 8014488:	d109      	bne.n	801449e <HW_IPCC_Tx_Handler+0xae>
 801448a:	4b06      	ldr	r3, [pc, #24]	; (80144a4 <HW_IPCC_Tx_Handler+0xb4>)
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	43db      	mvns	r3, r3
 8014490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014498:	f000 f838 	bl	801450c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801449c:	bf00      	nop
 801449e:	bf00      	nop
}
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	58000c00 	.word	0x58000c00

080144a8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80144ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80144b0:	f7ff fe46 	bl	8014140 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80144b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80144b8:	f7ff fe56 	bl	8014168 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80144bc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80144be:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80144c0:	f7ff fe64 	bl	801418c <LL_PWR_EnableBootC2>

  return;
 80144c4:	bf00      	nop
}
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80144cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80144d0:	f7ff fe6c 	bl	80141ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80144d4:	4806      	ldr	r0, [pc, #24]	; (80144f0 <HW_IPCC_Init+0x28>)
 80144d6:	f7ff fe92 	bl	80141fe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80144da:	4805      	ldr	r0, [pc, #20]	; (80144f0 <HW_IPCC_Init+0x28>)
 80144dc:	f7ff fe7f 	bl	80141de <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80144e0:	202c      	movs	r0, #44	; 0x2c
 80144e2:	f7f3 f858 	bl	8007596 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80144e6:	202d      	movs	r0, #45	; 0x2d
 80144e8:	f7f3 f855 	bl	8007596 <HAL_NVIC_EnableIRQ>

  return;
 80144ec:	bf00      	nop
}
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	58000c00 	.word	0x58000c00

080144f4 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80144f8:	f7fe fe2c 	bl	8013154 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80144fc:	2101      	movs	r1, #1
 80144fe:	4802      	ldr	r0, [pc, #8]	; (8014508 <HW_IPCC_BLE_EvtHandler+0x14>)
 8014500:	f7ff fed5 	bl	80142ae <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014504:	bf00      	nop
}
 8014506:	bd80      	pop	{r7, pc}
 8014508:	58000c00 	.word	0x58000c00

0801450c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014510:	2120      	movs	r1, #32
 8014512:	4803      	ldr	r0, [pc, #12]	; (8014520 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014514:	f7ff fe96 	bl	8014244 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014518:	f7fe fe38 	bl	801318c <HW_IPCC_BLE_AclDataAckNot>

  return;
 801451c:	bf00      	nop
}
 801451e:	bd80      	pop	{r7, pc}
 8014520:	58000c00 	.word	0x58000c00

08014524 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014528:	2102      	movs	r1, #2
 801452a:	4802      	ldr	r0, [pc, #8]	; (8014534 <HW_IPCC_SYS_Init+0x10>)
 801452c:	f7ff fe9c 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014530:	bf00      	nop
}
 8014532:	bd80      	pop	{r7, pc}
 8014534:	58000c00 	.word	0x58000c00

08014538 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801453c:	2102      	movs	r1, #2
 801453e:	4804      	ldr	r0, [pc, #16]	; (8014550 <HW_IPCC_SYS_SendCmd+0x18>)
 8014540:	f7ff fec3 	bl	80142ca <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014544:	2102      	movs	r1, #2
 8014546:	4802      	ldr	r0, [pc, #8]	; (8014550 <HW_IPCC_SYS_SendCmd+0x18>)
 8014548:	f7ff fe69 	bl	801421e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801454c:	bf00      	nop
}
 801454e:	bd80      	pop	{r7, pc}
 8014550:	58000c00 	.word	0x58000c00

08014554 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014558:	2102      	movs	r1, #2
 801455a:	4803      	ldr	r0, [pc, #12]	; (8014568 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 801455c:	f7ff fe72 	bl	8014244 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014560:	f7fe fe5c 	bl	801321c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014564:	bf00      	nop
}
 8014566:	bd80      	pop	{r7, pc}
 8014568:	58000c00 	.word	0x58000c00

0801456c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014570:	f7fe fe64 	bl	801323c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014574:	2102      	movs	r1, #2
 8014576:	4802      	ldr	r0, [pc, #8]	; (8014580 <HW_IPCC_SYS_EvtHandler+0x14>)
 8014578:	f7ff fe99 	bl	80142ae <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801457c:	bf00      	nop
}
 801457e:	bd80      	pop	{r7, pc}
 8014580:	58000c00 	.word	0x58000c00

08014584 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014588:	2104      	movs	r1, #4
 801458a:	4804      	ldr	r0, [pc, #16]	; (801459c <HW_IPCC_THREAD_Init+0x18>)
 801458c:	f7ff fe6c 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014590:	2110      	movs	r1, #16
 8014592:	4802      	ldr	r0, [pc, #8]	; (801459c <HW_IPCC_THREAD_Init+0x18>)
 8014594:	f7ff fe68 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014598:	bf00      	nop
}
 801459a:	bd80      	pop	{r7, pc}
 801459c:	58000c00 	.word	0x58000c00

080145a0 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80145a4:	2104      	movs	r1, #4
 80145a6:	4804      	ldr	r0, [pc, #16]	; (80145b8 <HW_IPCC_OT_SendCmd+0x18>)
 80145a8:	f7ff fe8f 	bl	80142ca <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80145ac:	2104      	movs	r1, #4
 80145ae:	4802      	ldr	r0, [pc, #8]	; (80145b8 <HW_IPCC_OT_SendCmd+0x18>)
 80145b0:	f7ff fe35 	bl	801421e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80145b4:	bf00      	nop
}
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	58000c00 	.word	0x58000c00

080145bc <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80145c0:	2110      	movs	r1, #16
 80145c2:	4802      	ldr	r0, [pc, #8]	; (80145cc <HW_IPCC_CLI_SendCmd+0x10>)
 80145c4:	f7ff fe81 	bl	80142ca <LL_C1_IPCC_SetFlag_CHx>

  return;
 80145c8:	bf00      	nop
}
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	58000c00 	.word	0x58000c00

080145d0 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80145d4:	2104      	movs	r1, #4
 80145d6:	4804      	ldr	r0, [pc, #16]	; (80145e8 <HW_IPCC_THREAD_SendAck+0x18>)
 80145d8:	f7ff fe69 	bl	80142ae <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80145dc:	2104      	movs	r1, #4
 80145de:	4802      	ldr	r0, [pc, #8]	; (80145e8 <HW_IPCC_THREAD_SendAck+0x18>)
 80145e0:	f7ff fe42 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80145e4:	bf00      	nop
}
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	58000c00 	.word	0x58000c00

080145ec <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80145f0:	2110      	movs	r1, #16
 80145f2:	4804      	ldr	r0, [pc, #16]	; (8014604 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80145f4:	f7ff fe5b 	bl	80142ae <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80145f8:	2110      	movs	r1, #16
 80145fa:	4802      	ldr	r0, [pc, #8]	; (8014604 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80145fc:	f7ff fe34 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014600:	bf00      	nop
}
 8014602:	bd80      	pop	{r7, pc}
 8014604:	58000c00 	.word	0x58000c00

08014608 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801460c:	2104      	movs	r1, #4
 801460e:	4803      	ldr	r0, [pc, #12]	; (801461c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8014610:	f7ff fe18 	bl	8014244 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8014614:	f7fe fe82 	bl	801331c <HW_IPCC_OT_CmdEvtNot>

  return;
 8014618:	bf00      	nop
}
 801461a:	bd80      	pop	{r7, pc}
 801461c:	58000c00 	.word	0x58000c00

08014620 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014624:	2104      	movs	r1, #4
 8014626:	4803      	ldr	r0, [pc, #12]	; (8014634 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8014628:	f7ff fe30 	bl	801428c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 801462c:	f7fe fe82 	bl	8013334 <HW_IPCC_THREAD_EvtNot>

  return;
 8014630:	bf00      	nop
}
 8014632:	bd80      	pop	{r7, pc}
 8014634:	58000c00 	.word	0x58000c00

08014638 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801463c:	2110      	movs	r1, #16
 801463e:	4803      	ldr	r0, [pc, #12]	; (801464c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8014640:	f7ff fe24 	bl	801428c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8014644:	f7fe fe82 	bl	801334c <HW_IPCC_THREAD_CliEvtNot>

  return;
 8014648:	bf00      	nop
}
 801464a:	bd80      	pop	{r7, pc}
 801464c:	58000c00 	.word	0x58000c00

08014650 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014658:	2108      	movs	r1, #8
 801465a:	480c      	ldr	r0, [pc, #48]	; (801468c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801465c:	f7ff fe44 	bl	80142e8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d007      	beq.n	8014676 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014666:	4a0a      	ldr	r2, [pc, #40]	; (8014690 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801466c:	2108      	movs	r1, #8
 801466e:	4807      	ldr	r0, [pc, #28]	; (801468c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014670:	f7ff fdd5 	bl	801421e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014674:	e006      	b.n	8014684 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801467a:	2108      	movs	r1, #8
 801467c:	4803      	ldr	r0, [pc, #12]	; (801468c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801467e:	f7ff fe24 	bl	80142ca <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014682:	bf00      	nop
}
 8014684:	3708      	adds	r7, #8
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	58000c00 	.word	0x58000c00
 8014690:	200276a0 	.word	0x200276a0

08014694 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014694:	b580      	push	{r7, lr}
 8014696:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014698:	2108      	movs	r1, #8
 801469a:	4806      	ldr	r0, [pc, #24]	; (80146b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801469c:	f7ff fdd2 	bl	8014244 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80146a0:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80146a6:	2108      	movs	r1, #8
 80146a8:	4802      	ldr	r0, [pc, #8]	; (80146b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80146aa:	f7ff fe0e 	bl	80142ca <LL_C1_IPCC_SetFlag_CHx>

  return;
 80146ae:	bf00      	nop
}
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	58000c00 	.word	0x58000c00
 80146b8:	200276a0 	.word	0x200276a0

080146bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80146c0:	2108      	movs	r1, #8
 80146c2:	4802      	ldr	r0, [pc, #8]	; (80146cc <HW_IPCC_TRACES_Init+0x10>)
 80146c4:	f7ff fdd0 	bl	8014268 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80146c8:	bf00      	nop
}
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	58000c00 	.word	0x58000c00

080146d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80146d4:	f7fe fec8 	bl	8013468 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80146d8:	2108      	movs	r1, #8
 80146da:	4802      	ldr	r0, [pc, #8]	; (80146e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80146dc:	f7ff fde7 	bl	80142ae <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80146e0:	bf00      	nop
}
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	58000c00 	.word	0x58000c00

080146e8 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80146e8:	b480      	push	{r7}
 80146ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80146ec:	4b05      	ldr	r3, [pc, #20]	; (8014704 <UTIL_LPM_Init+0x1c>)
 80146ee:	2200      	movs	r2, #0
 80146f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80146f2:	4b05      	ldr	r3, [pc, #20]	; (8014708 <UTIL_LPM_Init+0x20>)
 80146f4:	2200      	movs	r2, #0
 80146f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80146f8:	bf00      	nop
 80146fa:	46bd      	mov	sp, r7
 80146fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	200276a4 	.word	0x200276a4
 8014708:	200276a8 	.word	0x200276a8

0801470c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801470c:	b480      	push	{r7}
 801470e:	b087      	sub	sp, #28
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014718:	f3ef 8310 	mrs	r3, PRIMASK
 801471c:	613b      	str	r3, [r7, #16]
  return(result);
 801471e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014722:	b672      	cpsid	i
  
  switch(state)
 8014724:	78fb      	ldrb	r3, [r7, #3]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d009      	beq.n	801473e <UTIL_LPM_SetOffMode+0x32>
 801472a:	2b01      	cmp	r3, #1
 801472c:	d000      	beq.n	8014730 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 801472e:	e00e      	b.n	801474e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8014730:	4b0c      	ldr	r3, [pc, #48]	; (8014764 <UTIL_LPM_SetOffMode+0x58>)
 8014732:	681a      	ldr	r2, [r3, #0]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	4313      	orrs	r3, r2
 8014738:	4a0a      	ldr	r2, [pc, #40]	; (8014764 <UTIL_LPM_SetOffMode+0x58>)
 801473a:	6013      	str	r3, [r2, #0]
      break;
 801473c:	e007      	b.n	801474e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	43da      	mvns	r2, r3
 8014742:	4b08      	ldr	r3, [pc, #32]	; (8014764 <UTIL_LPM_SetOffMode+0x58>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4013      	ands	r3, r2
 8014748:	4a06      	ldr	r2, [pc, #24]	; (8014764 <UTIL_LPM_SetOffMode+0x58>)
 801474a:	6013      	str	r3, [r2, #0]
      break;
 801474c:	bf00      	nop
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014758:	bf00      	nop
 801475a:	371c      	adds	r7, #28
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr
 8014764:	200276a8 	.word	0x200276a8

08014768 <arm_power_f32>:
 8014768:	b430      	push	{r4, r5}
 801476a:	088d      	lsrs	r5, r1, #2
 801476c:	eddf 5a20 	vldr	s11, [pc, #128]	; 80147f0 <arm_power_f32+0x88>
 8014770:	d020      	beq.n	80147b4 <arm_power_f32+0x4c>
 8014772:	f100 0310 	add.w	r3, r0, #16
 8014776:	462c      	mov	r4, r5
 8014778:	ed53 6a04 	vldr	s13, [r3, #-16]
 801477c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8014780:	ed53 7a02 	vldr	s15, [r3, #-8]
 8014784:	ed13 6a01 	vldr	s12, [r3, #-4]
 8014788:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801478c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014790:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014798:	ee37 7a26 	vadd.f32	s14, s14, s13
 801479c:	ee26 6a06 	vmul.f32	s12, s12, s12
 80147a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80147a4:	3c01      	subs	r4, #1
 80147a6:	f103 0310 	add.w	r3, r3, #16
 80147aa:	ee76 5a27 	vadd.f32	s11, s12, s15
 80147ae:	d1e3      	bne.n	8014778 <arm_power_f32+0x10>
 80147b0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80147b4:	f011 0103 	ands.w	r1, r1, #3
 80147b8:	d015      	beq.n	80147e6 <arm_power_f32+0x7e>
 80147ba:	edd0 7a00 	vldr	s15, [r0]
 80147be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80147c2:	3901      	subs	r1, #1
 80147c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80147c8:	d00d      	beq.n	80147e6 <arm_power_f32+0x7e>
 80147ca:	edd0 7a01 	vldr	s15, [r0, #4]
 80147ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80147d2:	2901      	cmp	r1, #1
 80147d4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80147d8:	d005      	beq.n	80147e6 <arm_power_f32+0x7e>
 80147da:	edd0 7a02 	vldr	s15, [r0, #8]
 80147de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80147e2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80147e6:	edc2 5a00 	vstr	s11, [r2]
 80147ea:	bc30      	pop	{r4, r5}
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	00000000 	.word	0x00000000

080147f4 <arm_mat_mult_f32>:
 80147f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f8:	8845      	ldrh	r5, [r0, #2]
 80147fa:	880b      	ldrh	r3, [r1, #0]
 80147fc:	8806      	ldrh	r6, [r0, #0]
 80147fe:	6847      	ldr	r7, [r0, #4]
 8014800:	6854      	ldr	r4, [r2, #4]
 8014802:	6848      	ldr	r0, [r1, #4]
 8014804:	b08b      	sub	sp, #44	; 0x2c
 8014806:	42ab      	cmp	r3, r5
 8014808:	9109      	str	r1, [sp, #36]	; 0x24
 801480a:	9604      	str	r6, [sp, #16]
 801480c:	8849      	ldrh	r1, [r1, #2]
 801480e:	f040 808a 	bne.w	8014926 <arm_mat_mult_f32+0x132>
 8014812:	8815      	ldrh	r5, [r2, #0]
 8014814:	42b5      	cmp	r5, r6
 8014816:	f040 8086 	bne.w	8014926 <arm_mat_mult_f32+0x132>
 801481a:	8852      	ldrh	r2, [r2, #2]
 801481c:	428a      	cmp	r2, r1
 801481e:	f040 8082 	bne.w	8014926 <arm_mat_mult_f32+0x132>
 8014822:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8014826:	1d01      	adds	r1, r0, #4
 8014828:	0116      	lsls	r6, r2, #4
 801482a:	9108      	str	r1, [sp, #32]
 801482c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8014830:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8014834:	9101      	str	r1, [sp, #4]
 8014836:	fb06 f108 	mul.w	r1, r6, r8
 801483a:	0095      	lsls	r5, r2, #2
 801483c:	9103      	str	r1, [sp, #12]
 801483e:	00d2      	lsls	r2, r2, #3
 8014840:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8014844:	f003 0903 	and.w	r9, r3, #3
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	f107 0b10 	add.w	fp, r7, #16
 801484e:	eb04 0a05 	add.w	sl, r4, r5
 8014852:	9107      	str	r1, [sp, #28]
 8014854:	9202      	str	r2, [sp, #8]
 8014856:	9306      	str	r3, [sp, #24]
 8014858:	f1ab 0310 	sub.w	r3, fp, #16
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	9b07      	ldr	r3, [sp, #28]
 8014860:	f8dd e020 	ldr.w	lr, [sp, #32]
 8014864:	eb03 0c0a 	add.w	ip, r3, sl
 8014868:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014930 <arm_mat_mult_f32+0x13c>
 801486c:	f1b8 0f00 	cmp.w	r8, #0
 8014870:	d053      	beq.n	801491a <arm_mat_mult_f32+0x126>
 8014872:	9b02      	ldr	r3, [sp, #8]
 8014874:	4644      	mov	r4, r8
 8014876:	18c1      	adds	r1, r0, r3
 8014878:	4602      	mov	r2, r0
 801487a:	465b      	mov	r3, fp
 801487c:	ed92 6a00 	vldr	s12, [r2]
 8014880:	ed13 7a04 	vldr	s14, [r3, #-16]
 8014884:	ed53 4a03 	vldr	s9, [r3, #-12]
 8014888:	ed53 6a02 	vldr	s13, [r3, #-8]
 801488c:	ed91 5a00 	vldr	s10, [r1]
 8014890:	ed53 5a01 	vldr	s11, [r3, #-4]
 8014894:	1957      	adds	r7, r2, r5
 8014896:	ee27 7a06 	vmul.f32	s14, s14, s12
 801489a:	ed97 6a00 	vldr	s12, [r7]
 801489e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148a2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80148a6:	194f      	adds	r7, r1, r5
 80148a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80148ac:	ee26 7a85 	vmul.f32	s14, s13, s10
 80148b0:	edd7 7a00 	vldr	s15, [r7]
 80148b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80148b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80148bc:	3c01      	subs	r4, #1
 80148be:	4432      	add	r2, r6
 80148c0:	4431      	add	r1, r6
 80148c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148c6:	f103 0310 	add.w	r3, r3, #16
 80148ca:	d1d7      	bne.n	801487c <arm_mat_mult_f32+0x88>
 80148cc:	9b03      	ldr	r3, [sp, #12]
 80148ce:	9a01      	ldr	r2, [sp, #4]
 80148d0:	4418      	add	r0, r3
 80148d2:	f1b9 0f00 	cmp.w	r9, #0
 80148d6:	d00b      	beq.n	80148f0 <arm_mat_mult_f32+0xfc>
 80148d8:	464b      	mov	r3, r9
 80148da:	edd0 6a00 	vldr	s13, [r0]
 80148de:	ecb2 7a01 	vldmia	r2!, {s14}
 80148e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80148e6:	3b01      	subs	r3, #1
 80148e8:	4428      	add	r0, r5
 80148ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148ee:	d1f4      	bne.n	80148da <arm_mat_mult_f32+0xe6>
 80148f0:	ecec 7a01 	vstmia	ip!, {s15}
 80148f4:	45d4      	cmp	ip, sl
 80148f6:	4670      	mov	r0, lr
 80148f8:	f10e 0e04 	add.w	lr, lr, #4
 80148fc:	d1b4      	bne.n	8014868 <arm_mat_mult_f32+0x74>
 80148fe:	9a01      	ldr	r2, [sp, #4]
 8014900:	9b06      	ldr	r3, [sp, #24]
 8014902:	4611      	mov	r1, r2
 8014904:	4419      	add	r1, r3
 8014906:	449b      	add	fp, r3
 8014908:	9b04      	ldr	r3, [sp, #16]
 801490a:	9101      	str	r1, [sp, #4]
 801490c:	3b01      	subs	r3, #1
 801490e:	44aa      	add	sl, r5
 8014910:	9304      	str	r3, [sp, #16]
 8014912:	d004      	beq.n	801491e <arm_mat_mult_f32+0x12a>
 8014914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014916:	6858      	ldr	r0, [r3, #4]
 8014918:	e79e      	b.n	8014858 <arm_mat_mult_f32+0x64>
 801491a:	9a05      	ldr	r2, [sp, #20]
 801491c:	e7d9      	b.n	80148d2 <arm_mat_mult_f32+0xde>
 801491e:	4618      	mov	r0, r3
 8014920:	b00b      	add	sp, #44	; 0x2c
 8014922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014926:	f06f 0002 	mvn.w	r0, #2
 801492a:	b00b      	add	sp, #44	; 0x2c
 801492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014930:	00000000 	.word	0x00000000

08014934 <arm_sin_f32>:
 8014934:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80149b4 <arm_sin_f32+0x80>
 8014938:	ee20 0a27 	vmul.f32	s0, s0, s15
 801493c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014944:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014948:	d504      	bpl.n	8014954 <arm_sin_f32+0x20>
 801494a:	ee17 3a90 	vmov	r3, s15
 801494e:	3b01      	subs	r3, #1
 8014950:	ee07 3a90 	vmov	s15, r3
 8014954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014958:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80149b8 <arm_sin_f32+0x84>
 801495c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014960:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014964:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014968:	ee17 3a90 	vmov	r3, s15
 801496c:	b29b      	uxth	r3, r3
 801496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014972:	d21a      	bcs.n	80149aa <arm_sin_f32+0x76>
 8014974:	ee07 3a90 	vmov	s15, r3
 8014978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801497c:	1c59      	adds	r1, r3, #1
 801497e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014982:	4a0e      	ldr	r2, [pc, #56]	; (80149bc <arm_sin_f32+0x88>)
 8014984:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014988:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801498c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014990:	ed93 7a00 	vldr	s14, [r3]
 8014994:	edd2 6a00 	vldr	s13, [r2]
 8014998:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801499c:	ee20 0a26 	vmul.f32	s0, s0, s13
 80149a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80149a8:	4770      	bx	lr
 80149aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80149ae:	2101      	movs	r1, #1
 80149b0:	2300      	movs	r3, #0
 80149b2:	e7e6      	b.n	8014982 <arm_sin_f32+0x4e>
 80149b4:	3e22f983 	.word	0x3e22f983
 80149b8:	44000000 	.word	0x44000000
 80149bc:	080167c4 	.word	0x080167c4

080149c0 <arm_cos_f32>:
 80149c0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014a48 <arm_cos_f32+0x88>
 80149c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149c8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80149cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80149d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80149d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80149dc:	d504      	bpl.n	80149e8 <arm_cos_f32+0x28>
 80149de:	ee17 3a90 	vmov	r3, s15
 80149e2:	3b01      	subs	r3, #1
 80149e4:	ee07 3a90 	vmov	s15, r3
 80149e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149ec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014a4c <arm_cos_f32+0x8c>
 80149f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80149f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80149f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80149fc:	ee17 3a90 	vmov	r3, s15
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a06:	d21a      	bcs.n	8014a3e <arm_cos_f32+0x7e>
 8014a08:	ee07 3a90 	vmov	s15, r3
 8014a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a10:	1c59      	adds	r1, r3, #1
 8014a12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a16:	4a0e      	ldr	r2, [pc, #56]	; (8014a50 <arm_cos_f32+0x90>)
 8014a18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a24:	ed93 7a00 	vldr	s14, [r3]
 8014a28:	edd2 6a00 	vldr	s13, [r2]
 8014a2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014a30:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a38:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014a3c:	4770      	bx	lr
 8014a3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014a42:	2101      	movs	r1, #1
 8014a44:	2300      	movs	r3, #0
 8014a46:	e7e6      	b.n	8014a16 <arm_cos_f32+0x56>
 8014a48:	3e22f983 	.word	0x3e22f983
 8014a4c:	44000000 	.word	0x44000000
 8014a50:	080167c4 	.word	0x080167c4

08014a54 <arm_sub_f32>:
 8014a54:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8014a58:	b4f0      	push	{r4, r5, r6, r7}
 8014a5a:	d033      	beq.n	8014ac4 <arm_sub_f32+0x70>
 8014a5c:	f100 0610 	add.w	r6, r0, #16
 8014a60:	f101 0510 	add.w	r5, r1, #16
 8014a64:	f102 0410 	add.w	r4, r2, #16
 8014a68:	4667      	mov	r7, ip
 8014a6a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8014a6e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8014a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a76:	3f01      	subs	r7, #1
 8014a78:	ed44 7a04 	vstr	s15, [r4, #-16]
 8014a7c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8014a80:	ed56 7a03 	vldr	s15, [r6, #-12]
 8014a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a88:	f106 0610 	add.w	r6, r6, #16
 8014a8c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8014a90:	ed15 7a02 	vldr	s14, [r5, #-8]
 8014a94:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8014a98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a9c:	f105 0510 	add.w	r5, r5, #16
 8014aa0:	ed44 7a02 	vstr	s15, [r4, #-8]
 8014aa4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8014aa8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8014aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ab0:	f104 0410 	add.w	r4, r4, #16
 8014ab4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8014ab8:	d1d7      	bne.n	8014a6a <arm_sub_f32+0x16>
 8014aba:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8014abe:	4420      	add	r0, r4
 8014ac0:	4421      	add	r1, r4
 8014ac2:	4422      	add	r2, r4
 8014ac4:	f013 0303 	ands.w	r3, r3, #3
 8014ac8:	d01b      	beq.n	8014b02 <arm_sub_f32+0xae>
 8014aca:	edd0 7a00 	vldr	s15, [r0]
 8014ace:	ed91 7a00 	vldr	s14, [r1]
 8014ad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ad6:	3b01      	subs	r3, #1
 8014ad8:	edc2 7a00 	vstr	s15, [r2]
 8014adc:	d011      	beq.n	8014b02 <arm_sub_f32+0xae>
 8014ade:	edd0 7a01 	vldr	s15, [r0, #4]
 8014ae2:	ed91 7a01 	vldr	s14, [r1, #4]
 8014ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	edc2 7a01 	vstr	s15, [r2, #4]
 8014af0:	d007      	beq.n	8014b02 <arm_sub_f32+0xae>
 8014af2:	edd0 7a02 	vldr	s15, [r0, #8]
 8014af6:	ed91 7a02 	vldr	s14, [r1, #8]
 8014afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014afe:	edc2 7a02 	vstr	s15, [r2, #8]
 8014b02:	bcf0      	pop	{r4, r5, r6, r7}
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop

08014b08 <arm_scale_f32>:
 8014b08:	b470      	push	{r4, r5, r6}
 8014b0a:	0896      	lsrs	r6, r2, #2
 8014b0c:	d025      	beq.n	8014b5a <arm_scale_f32+0x52>
 8014b0e:	f100 0410 	add.w	r4, r0, #16
 8014b12:	f101 0310 	add.w	r3, r1, #16
 8014b16:	4635      	mov	r5, r6
 8014b18:	ed54 7a04 	vldr	s15, [r4, #-16]
 8014b1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b20:	3d01      	subs	r5, #1
 8014b22:	ed43 7a04 	vstr	s15, [r3, #-16]
 8014b26:	ed54 7a03 	vldr	s15, [r4, #-12]
 8014b2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b2e:	f104 0410 	add.w	r4, r4, #16
 8014b32:	ed43 7a03 	vstr	s15, [r3, #-12]
 8014b36:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8014b3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b3e:	f103 0310 	add.w	r3, r3, #16
 8014b42:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8014b46:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8014b4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b4e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8014b52:	d1e1      	bne.n	8014b18 <arm_scale_f32+0x10>
 8014b54:	0136      	lsls	r6, r6, #4
 8014b56:	4430      	add	r0, r6
 8014b58:	4431      	add	r1, r6
 8014b5a:	f012 0203 	ands.w	r2, r2, #3
 8014b5e:	d015      	beq.n	8014b8c <arm_scale_f32+0x84>
 8014b60:	edd0 7a00 	vldr	s15, [r0]
 8014b64:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b68:	3a01      	subs	r2, #1
 8014b6a:	edc1 7a00 	vstr	s15, [r1]
 8014b6e:	d00d      	beq.n	8014b8c <arm_scale_f32+0x84>
 8014b70:	edd0 7a01 	vldr	s15, [r0, #4]
 8014b74:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b78:	2a01      	cmp	r2, #1
 8014b7a:	edc1 7a01 	vstr	s15, [r1, #4]
 8014b7e:	d005      	beq.n	8014b8c <arm_scale_f32+0x84>
 8014b80:	edd0 7a02 	vldr	s15, [r0, #8]
 8014b84:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014b88:	ed81 0a02 	vstr	s0, [r1, #8]
 8014b8c:	bc70      	pop	{r4, r5, r6}
 8014b8e:	4770      	bx	lr

08014b90 <arm_dot_prod_f32>:
 8014b90:	b4f0      	push	{r4, r5, r6, r7}
 8014b92:	0897      	lsrs	r7, r2, #2
 8014b94:	eddf 5a29 	vldr	s11, [pc, #164]	; 8014c3c <arm_dot_prod_f32+0xac>
 8014b98:	d02d      	beq.n	8014bf6 <arm_dot_prod_f32+0x66>
 8014b9a:	f100 0510 	add.w	r5, r0, #16
 8014b9e:	f101 0410 	add.w	r4, r1, #16
 8014ba2:	463e      	mov	r6, r7
 8014ba4:	ed55 6a04 	vldr	s13, [r5, #-16]
 8014ba8:	ed54 3a04 	vldr	s7, [r4, #-16]
 8014bac:	ed15 7a03 	vldr	s14, [r5, #-12]
 8014bb0:	ed14 4a03 	vldr	s8, [r4, #-12]
 8014bb4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8014bb8:	ed54 4a02 	vldr	s9, [r4, #-8]
 8014bbc:	ed15 6a01 	vldr	s12, [r5, #-4]
 8014bc0:	ed14 5a01 	vldr	s10, [r4, #-4]
 8014bc4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8014bc8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014bcc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014bd0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014bd4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014bd8:	ee66 6a05 	vmul.f32	s13, s12, s10
 8014bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014be0:	3e01      	subs	r6, #1
 8014be2:	f105 0510 	add.w	r5, r5, #16
 8014be6:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8014bea:	f104 0410 	add.w	r4, r4, #16
 8014bee:	d1d9      	bne.n	8014ba4 <arm_dot_prod_f32+0x14>
 8014bf0:	013f      	lsls	r7, r7, #4
 8014bf2:	4438      	add	r0, r7
 8014bf4:	4439      	add	r1, r7
 8014bf6:	f012 0203 	ands.w	r2, r2, #3
 8014bfa:	d01b      	beq.n	8014c34 <arm_dot_prod_f32+0xa4>
 8014bfc:	edd1 7a00 	vldr	s15, [r1]
 8014c00:	ed90 7a00 	vldr	s14, [r0]
 8014c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c08:	3a01      	subs	r2, #1
 8014c0a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014c0e:	d011      	beq.n	8014c34 <arm_dot_prod_f32+0xa4>
 8014c10:	edd1 7a01 	vldr	s15, [r1, #4]
 8014c14:	ed90 7a01 	vldr	s14, [r0, #4]
 8014c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c1c:	2a01      	cmp	r2, #1
 8014c1e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014c22:	d007      	beq.n	8014c34 <arm_dot_prod_f32+0xa4>
 8014c24:	edd0 7a02 	vldr	s15, [r0, #8]
 8014c28:	ed91 7a02 	vldr	s14, [r1, #8]
 8014c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c30:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8014c34:	edc3 5a00 	vstr	s11, [r3]
 8014c38:	bcf0      	pop	{r4, r5, r6, r7}
 8014c3a:	4770      	bx	lr
 8014c3c:	00000000 	.word	0x00000000

08014c40 <arm_add_f32>:
 8014c40:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8014c44:	b4f0      	push	{r4, r5, r6, r7}
 8014c46:	d033      	beq.n	8014cb0 <arm_add_f32+0x70>
 8014c48:	f100 0610 	add.w	r6, r0, #16
 8014c4c:	f101 0510 	add.w	r5, r1, #16
 8014c50:	f102 0410 	add.w	r4, r2, #16
 8014c54:	4667      	mov	r7, ip
 8014c56:	ed15 7a04 	vldr	s14, [r5, #-16]
 8014c5a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8014c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c62:	3f01      	subs	r7, #1
 8014c64:	ed44 7a04 	vstr	s15, [r4, #-16]
 8014c68:	ed15 7a03 	vldr	s14, [r5, #-12]
 8014c6c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8014c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c74:	f106 0610 	add.w	r6, r6, #16
 8014c78:	ed44 7a03 	vstr	s15, [r4, #-12]
 8014c7c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8014c80:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8014c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c88:	f105 0510 	add.w	r5, r5, #16
 8014c8c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8014c90:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8014c94:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8014c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c9c:	f104 0410 	add.w	r4, r4, #16
 8014ca0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8014ca4:	d1d7      	bne.n	8014c56 <arm_add_f32+0x16>
 8014ca6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8014caa:	4420      	add	r0, r4
 8014cac:	4421      	add	r1, r4
 8014cae:	4422      	add	r2, r4
 8014cb0:	f013 0303 	ands.w	r3, r3, #3
 8014cb4:	d01b      	beq.n	8014cee <arm_add_f32+0xae>
 8014cb6:	edd1 7a00 	vldr	s15, [r1]
 8014cba:	ed90 7a00 	vldr	s14, [r0]
 8014cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	edc2 7a00 	vstr	s15, [r2]
 8014cc8:	d011      	beq.n	8014cee <arm_add_f32+0xae>
 8014cca:	edd0 7a01 	vldr	s15, [r0, #4]
 8014cce:	ed91 7a01 	vldr	s14, [r1, #4]
 8014cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	edc2 7a01 	vstr	s15, [r2, #4]
 8014cdc:	d007      	beq.n	8014cee <arm_add_f32+0xae>
 8014cde:	edd0 7a02 	vldr	s15, [r0, #8]
 8014ce2:	ed91 7a02 	vldr	s14, [r1, #8]
 8014ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014cea:	edc2 7a02 	vstr	s15, [r2, #8]
 8014cee:	bcf0      	pop	{r4, r5, r6, r7}
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop

08014cf4 <__errno>:
 8014cf4:	4b01      	ldr	r3, [pc, #4]	; (8014cfc <__errno+0x8>)
 8014cf6:	6818      	ldr	r0, [r3, #0]
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	200000d0 	.word	0x200000d0

08014d00 <__libc_init_array>:
 8014d00:	b570      	push	{r4, r5, r6, lr}
 8014d02:	4e0d      	ldr	r6, [pc, #52]	; (8014d38 <__libc_init_array+0x38>)
 8014d04:	4c0d      	ldr	r4, [pc, #52]	; (8014d3c <__libc_init_array+0x3c>)
 8014d06:	1ba4      	subs	r4, r4, r6
 8014d08:	10a4      	asrs	r4, r4, #2
 8014d0a:	2500      	movs	r5, #0
 8014d0c:	42a5      	cmp	r5, r4
 8014d0e:	d109      	bne.n	8014d24 <__libc_init_array+0x24>
 8014d10:	4e0b      	ldr	r6, [pc, #44]	; (8014d40 <__libc_init_array+0x40>)
 8014d12:	4c0c      	ldr	r4, [pc, #48]	; (8014d44 <__libc_init_array+0x44>)
 8014d14:	f001 f8d2 	bl	8015ebc <_init>
 8014d18:	1ba4      	subs	r4, r4, r6
 8014d1a:	10a4      	asrs	r4, r4, #2
 8014d1c:	2500      	movs	r5, #0
 8014d1e:	42a5      	cmp	r5, r4
 8014d20:	d105      	bne.n	8014d2e <__libc_init_array+0x2e>
 8014d22:	bd70      	pop	{r4, r5, r6, pc}
 8014d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d28:	4798      	blx	r3
 8014d2a:	3501      	adds	r5, #1
 8014d2c:	e7ee      	b.n	8014d0c <__libc_init_array+0xc>
 8014d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d32:	4798      	blx	r3
 8014d34:	3501      	adds	r5, #1
 8014d36:	e7f2      	b.n	8014d1e <__libc_init_array+0x1e>
 8014d38:	08017080 	.word	0x08017080
 8014d3c:	08017080 	.word	0x08017080
 8014d40:	08017080 	.word	0x08017080
 8014d44:	08017084 	.word	0x08017084

08014d48 <memcpy>:
 8014d48:	b510      	push	{r4, lr}
 8014d4a:	1e43      	subs	r3, r0, #1
 8014d4c:	440a      	add	r2, r1
 8014d4e:	4291      	cmp	r1, r2
 8014d50:	d100      	bne.n	8014d54 <memcpy+0xc>
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d5c:	e7f7      	b.n	8014d4e <memcpy+0x6>

08014d5e <memset>:
 8014d5e:	4402      	add	r2, r0
 8014d60:	4603      	mov	r3, r0
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d100      	bne.n	8014d68 <memset+0xa>
 8014d66:	4770      	bx	lr
 8014d68:	f803 1b01 	strb.w	r1, [r3], #1
 8014d6c:	e7f9      	b.n	8014d62 <memset+0x4>
	...

08014d70 <pow>:
 8014d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d74:	ed2d 8b04 	vpush	{d8-d9}
 8014d78:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801504c <pow+0x2dc>
 8014d7c:	b08d      	sub	sp, #52	; 0x34
 8014d7e:	ec57 6b10 	vmov	r6, r7, d0
 8014d82:	ec55 4b11 	vmov	r4, r5, d1
 8014d86:	f000 f9b3 	bl	80150f0 <__ieee754_pow>
 8014d8a:	f999 3000 	ldrsb.w	r3, [r9]
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	3301      	adds	r3, #1
 8014d92:	eeb0 8a40 	vmov.f32	s16, s0
 8014d96:	eef0 8a60 	vmov.f32	s17, s1
 8014d9a:	46c8      	mov	r8, r9
 8014d9c:	d05f      	beq.n	8014e5e <pow+0xee>
 8014d9e:	4622      	mov	r2, r4
 8014da0:	462b      	mov	r3, r5
 8014da2:	4620      	mov	r0, r4
 8014da4:	4629      	mov	r1, r5
 8014da6:	f7eb fe4b 	bl	8000a40 <__aeabi_dcmpun>
 8014daa:	4683      	mov	fp, r0
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d156      	bne.n	8014e5e <pow+0xee>
 8014db0:	4632      	mov	r2, r6
 8014db2:	463b      	mov	r3, r7
 8014db4:	4630      	mov	r0, r6
 8014db6:	4639      	mov	r1, r7
 8014db8:	f7eb fe42 	bl	8000a40 <__aeabi_dcmpun>
 8014dbc:	9001      	str	r0, [sp, #4]
 8014dbe:	b1e8      	cbz	r0, 8014dfc <pow+0x8c>
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	f7eb fe08 	bl	80009dc <__aeabi_dcmpeq>
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d046      	beq.n	8014e5e <pow+0xee>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	9302      	str	r3, [sp, #8]
 8014dd4:	4b96      	ldr	r3, [pc, #600]	; (8015030 <pow+0x2c0>)
 8014dd6:	9303      	str	r3, [sp, #12]
 8014dd8:	4b96      	ldr	r3, [pc, #600]	; (8015034 <pow+0x2c4>)
 8014dda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014dde:	2200      	movs	r2, #0
 8014de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014de4:	9b00      	ldr	r3, [sp, #0]
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014dec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014df0:	d033      	beq.n	8014e5a <pow+0xea>
 8014df2:	a802      	add	r0, sp, #8
 8014df4:	f000 ff4e 	bl	8015c94 <matherr>
 8014df8:	bb48      	cbnz	r0, 8014e4e <pow+0xde>
 8014dfa:	e05d      	b.n	8014eb8 <pow+0x148>
 8014dfc:	f04f 0a00 	mov.w	sl, #0
 8014e00:	f04f 0b00 	mov.w	fp, #0
 8014e04:	4652      	mov	r2, sl
 8014e06:	465b      	mov	r3, fp
 8014e08:	4630      	mov	r0, r6
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	f7eb fde6 	bl	80009dc <__aeabi_dcmpeq>
 8014e10:	ec4b ab19 	vmov	d9, sl, fp
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d054      	beq.n	8014ec2 <pow+0x152>
 8014e18:	4652      	mov	r2, sl
 8014e1a:	465b      	mov	r3, fp
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	4629      	mov	r1, r5
 8014e20:	f7eb fddc 	bl	80009dc <__aeabi_dcmpeq>
 8014e24:	4680      	mov	r8, r0
 8014e26:	b318      	cbz	r0, 8014e70 <pow+0x100>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	9302      	str	r3, [sp, #8]
 8014e2c:	4b80      	ldr	r3, [pc, #512]	; (8015030 <pow+0x2c0>)
 8014e2e:	9303      	str	r3, [sp, #12]
 8014e30:	9b01      	ldr	r3, [sp, #4]
 8014e32:	930a      	str	r3, [sp, #40]	; 0x28
 8014e34:	9b00      	ldr	r3, [sp, #0]
 8014e36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014e3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014e3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d0d5      	beq.n	8014df2 <pow+0x82>
 8014e46:	4b7b      	ldr	r3, [pc, #492]	; (8015034 <pow+0x2c4>)
 8014e48:	2200      	movs	r2, #0
 8014e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e50:	b11b      	cbz	r3, 8014e5a <pow+0xea>
 8014e52:	f7ff ff4f 	bl	8014cf4 <__errno>
 8014e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e58:	6003      	str	r3, [r0, #0]
 8014e5a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014e5e:	eeb0 0a48 	vmov.f32	s0, s16
 8014e62:	eef0 0a68 	vmov.f32	s1, s17
 8014e66:	b00d      	add	sp, #52	; 0x34
 8014e68:	ecbd 8b04 	vpop	{d8-d9}
 8014e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e70:	ec45 4b10 	vmov	d0, r4, r5
 8014e74:	f000 ff06 	bl	8015c84 <finite>
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	d0f0      	beq.n	8014e5e <pow+0xee>
 8014e7c:	4652      	mov	r2, sl
 8014e7e:	465b      	mov	r3, fp
 8014e80:	4620      	mov	r0, r4
 8014e82:	4629      	mov	r1, r5
 8014e84:	f7eb fdb4 	bl	80009f0 <__aeabi_dcmplt>
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	d0e8      	beq.n	8014e5e <pow+0xee>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	9302      	str	r3, [sp, #8]
 8014e90:	4b67      	ldr	r3, [pc, #412]	; (8015030 <pow+0x2c0>)
 8014e92:	9303      	str	r3, [sp, #12]
 8014e94:	f999 3000 	ldrsb.w	r3, [r9]
 8014e98:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014e9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014ea0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014ea4:	b913      	cbnz	r3, 8014eac <pow+0x13c>
 8014ea6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014eaa:	e7a2      	b.n	8014df2 <pow+0x82>
 8014eac:	4962      	ldr	r1, [pc, #392]	; (8015038 <pow+0x2c8>)
 8014eae:	2000      	movs	r0, #0
 8014eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014eb4:	2b02      	cmp	r3, #2
 8014eb6:	d19c      	bne.n	8014df2 <pow+0x82>
 8014eb8:	f7ff ff1c 	bl	8014cf4 <__errno>
 8014ebc:	2321      	movs	r3, #33	; 0x21
 8014ebe:	6003      	str	r3, [r0, #0]
 8014ec0:	e7c5      	b.n	8014e4e <pow+0xde>
 8014ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8014ec6:	eef0 0a68 	vmov.f32	s1, s17
 8014eca:	f000 fedb 	bl	8015c84 <finite>
 8014ece:	9000      	str	r0, [sp, #0]
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	f040 8081 	bne.w	8014fd8 <pow+0x268>
 8014ed6:	ec47 6b10 	vmov	d0, r6, r7
 8014eda:	f000 fed3 	bl	8015c84 <finite>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d07a      	beq.n	8014fd8 <pow+0x268>
 8014ee2:	ec45 4b10 	vmov	d0, r4, r5
 8014ee6:	f000 fecd 	bl	8015c84 <finite>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d074      	beq.n	8014fd8 <pow+0x268>
 8014eee:	ec53 2b18 	vmov	r2, r3, d8
 8014ef2:	ee18 0a10 	vmov	r0, s16
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	f7eb fda2 	bl	8000a40 <__aeabi_dcmpun>
 8014efc:	f999 9000 	ldrsb.w	r9, [r9]
 8014f00:	4b4b      	ldr	r3, [pc, #300]	; (8015030 <pow+0x2c0>)
 8014f02:	b1b0      	cbz	r0, 8014f32 <pow+0x1c2>
 8014f04:	2201      	movs	r2, #1
 8014f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014f0a:	9b00      	ldr	r3, [sp, #0]
 8014f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8014f0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014f12:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014f16:	f1b9 0f00 	cmp.w	r9, #0
 8014f1a:	d0c4      	beq.n	8014ea6 <pow+0x136>
 8014f1c:	4652      	mov	r2, sl
 8014f1e:	465b      	mov	r3, fp
 8014f20:	4650      	mov	r0, sl
 8014f22:	4659      	mov	r1, fp
 8014f24:	f7eb fc1c 	bl	8000760 <__aeabi_ddiv>
 8014f28:	f1b9 0f02 	cmp.w	r9, #2
 8014f2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f30:	e7c1      	b.n	8014eb6 <pow+0x146>
 8014f32:	2203      	movs	r2, #3
 8014f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014f38:	900a      	str	r0, [sp, #40]	; 0x28
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4b3e      	ldr	r3, [pc, #248]	; (801503c <pow+0x2cc>)
 8014f42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014f46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014f4a:	f7eb fadf 	bl	800050c <__aeabi_dmul>
 8014f4e:	4604      	mov	r4, r0
 8014f50:	460d      	mov	r5, r1
 8014f52:	f1b9 0f00 	cmp.w	r9, #0
 8014f56:	d124      	bne.n	8014fa2 <pow+0x232>
 8014f58:	4b39      	ldr	r3, [pc, #228]	; (8015040 <pow+0x2d0>)
 8014f5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014f5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014f62:	4630      	mov	r0, r6
 8014f64:	4652      	mov	r2, sl
 8014f66:	465b      	mov	r3, fp
 8014f68:	4639      	mov	r1, r7
 8014f6a:	f7eb fd41 	bl	80009f0 <__aeabi_dcmplt>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d056      	beq.n	8015020 <pow+0x2b0>
 8014f72:	ec45 4b10 	vmov	d0, r4, r5
 8014f76:	f000 fe97 	bl	8015ca8 <rint>
 8014f7a:	4622      	mov	r2, r4
 8014f7c:	462b      	mov	r3, r5
 8014f7e:	ec51 0b10 	vmov	r0, r1, d0
 8014f82:	f7eb fd2b 	bl	80009dc <__aeabi_dcmpeq>
 8014f86:	b920      	cbnz	r0, 8014f92 <pow+0x222>
 8014f88:	4b2e      	ldr	r3, [pc, #184]	; (8015044 <pow+0x2d4>)
 8014f8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014f92:	f998 3000 	ldrsb.w	r3, [r8]
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	d142      	bne.n	8015020 <pow+0x2b0>
 8014f9a:	f7ff feab 	bl	8014cf4 <__errno>
 8014f9e:	2322      	movs	r3, #34	; 0x22
 8014fa0:	e78d      	b.n	8014ebe <pow+0x14e>
 8014fa2:	4b29      	ldr	r3, [pc, #164]	; (8015048 <pow+0x2d8>)
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014faa:	4630      	mov	r0, r6
 8014fac:	4652      	mov	r2, sl
 8014fae:	465b      	mov	r3, fp
 8014fb0:	4639      	mov	r1, r7
 8014fb2:	f7eb fd1d 	bl	80009f0 <__aeabi_dcmplt>
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	d0eb      	beq.n	8014f92 <pow+0x222>
 8014fba:	ec45 4b10 	vmov	d0, r4, r5
 8014fbe:	f000 fe73 	bl	8015ca8 <rint>
 8014fc2:	4622      	mov	r2, r4
 8014fc4:	462b      	mov	r3, r5
 8014fc6:	ec51 0b10 	vmov	r0, r1, d0
 8014fca:	f7eb fd07 	bl	80009dc <__aeabi_dcmpeq>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d1df      	bne.n	8014f92 <pow+0x222>
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	4b18      	ldr	r3, [pc, #96]	; (8015038 <pow+0x2c8>)
 8014fd6:	e7da      	b.n	8014f8e <pow+0x21e>
 8014fd8:	2200      	movs	r2, #0
 8014fda:	2300      	movs	r3, #0
 8014fdc:	ec51 0b18 	vmov	r0, r1, d8
 8014fe0:	f7eb fcfc 	bl	80009dc <__aeabi_dcmpeq>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f43f af3a 	beq.w	8014e5e <pow+0xee>
 8014fea:	ec47 6b10 	vmov	d0, r6, r7
 8014fee:	f000 fe49 	bl	8015c84 <finite>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	f43f af33 	beq.w	8014e5e <pow+0xee>
 8014ff8:	ec45 4b10 	vmov	d0, r4, r5
 8014ffc:	f000 fe42 	bl	8015c84 <finite>
 8015000:	2800      	cmp	r0, #0
 8015002:	f43f af2c 	beq.w	8014e5e <pow+0xee>
 8015006:	2304      	movs	r3, #4
 8015008:	9302      	str	r3, [sp, #8]
 801500a:	4b09      	ldr	r3, [pc, #36]	; (8015030 <pow+0x2c0>)
 801500c:	9303      	str	r3, [sp, #12]
 801500e:	2300      	movs	r3, #0
 8015010:	930a      	str	r3, [sp, #40]	; 0x28
 8015012:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015016:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801501a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801501e:	e7b8      	b.n	8014f92 <pow+0x222>
 8015020:	a802      	add	r0, sp, #8
 8015022:	f000 fe37 	bl	8015c94 <matherr>
 8015026:	2800      	cmp	r0, #0
 8015028:	f47f af11 	bne.w	8014e4e <pow+0xde>
 801502c:	e7b5      	b.n	8014f9a <pow+0x22a>
 801502e:	bf00      	nop
 8015030:	08017028 	.word	0x08017028
 8015034:	3ff00000 	.word	0x3ff00000
 8015038:	fff00000 	.word	0xfff00000
 801503c:	3fe00000 	.word	0x3fe00000
 8015040:	47efffff 	.word	0x47efffff
 8015044:	c7efffff 	.word	0xc7efffff
 8015048:	7ff00000 	.word	0x7ff00000
 801504c:	20000134 	.word	0x20000134

08015050 <sqrtf>:
 8015050:	b510      	push	{r4, lr}
 8015052:	ed2d 8b02 	vpush	{d8}
 8015056:	b08a      	sub	sp, #40	; 0x28
 8015058:	eeb0 8a40 	vmov.f32	s16, s0
 801505c:	f000 fe06 	bl	8015c6c <__ieee754_sqrtf>
 8015060:	4b21      	ldr	r3, [pc, #132]	; (80150e8 <sqrtf+0x98>)
 8015062:	f993 4000 	ldrsb.w	r4, [r3]
 8015066:	1c63      	adds	r3, r4, #1
 8015068:	d02c      	beq.n	80150c4 <sqrtf+0x74>
 801506a:	eeb4 8a48 	vcmp.f32	s16, s16
 801506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015072:	d627      	bvs.n	80150c4 <sqrtf+0x74>
 8015074:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507c:	d522      	bpl.n	80150c4 <sqrtf+0x74>
 801507e:	2301      	movs	r3, #1
 8015080:	9300      	str	r3, [sp, #0]
 8015082:	4b1a      	ldr	r3, [pc, #104]	; (80150ec <sqrtf+0x9c>)
 8015084:	9301      	str	r3, [sp, #4]
 8015086:	ee18 0a10 	vmov	r0, s16
 801508a:	2300      	movs	r3, #0
 801508c:	9308      	str	r3, [sp, #32]
 801508e:	f7eb f9e5 	bl	800045c <__aeabi_f2d>
 8015092:	2200      	movs	r2, #0
 8015094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801509c:	2300      	movs	r3, #0
 801509e:	b9ac      	cbnz	r4, 80150cc <sqrtf+0x7c>
 80150a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80150a4:	4668      	mov	r0, sp
 80150a6:	f000 fdf5 	bl	8015c94 <matherr>
 80150aa:	b1b8      	cbz	r0, 80150dc <sqrtf+0x8c>
 80150ac:	9b08      	ldr	r3, [sp, #32]
 80150ae:	b11b      	cbz	r3, 80150b8 <sqrtf+0x68>
 80150b0:	f7ff fe20 	bl	8014cf4 <__errno>
 80150b4:	9b08      	ldr	r3, [sp, #32]
 80150b6:	6003      	str	r3, [r0, #0]
 80150b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150bc:	f7eb fcd6 	bl	8000a6c <__aeabi_d2f>
 80150c0:	ee00 0a10 	vmov	s0, r0
 80150c4:	b00a      	add	sp, #40	; 0x28
 80150c6:	ecbd 8b02 	vpop	{d8}
 80150ca:	bd10      	pop	{r4, pc}
 80150cc:	4610      	mov	r0, r2
 80150ce:	4619      	mov	r1, r3
 80150d0:	f7eb fb46 	bl	8000760 <__aeabi_ddiv>
 80150d4:	2c02      	cmp	r4, #2
 80150d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80150da:	d1e3      	bne.n	80150a4 <sqrtf+0x54>
 80150dc:	f7ff fe0a 	bl	8014cf4 <__errno>
 80150e0:	2321      	movs	r3, #33	; 0x21
 80150e2:	6003      	str	r3, [r0, #0]
 80150e4:	e7e2      	b.n	80150ac <sqrtf+0x5c>
 80150e6:	bf00      	nop
 80150e8:	20000134 	.word	0x20000134
 80150ec:	0801702c 	.word	0x0801702c

080150f0 <__ieee754_pow>:
 80150f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f4:	b091      	sub	sp, #68	; 0x44
 80150f6:	ed8d 1b00 	vstr	d1, [sp]
 80150fa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80150fe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015102:	ea58 0302 	orrs.w	r3, r8, r2
 8015106:	ec57 6b10 	vmov	r6, r7, d0
 801510a:	f000 84be 	beq.w	8015a8a <__ieee754_pow+0x99a>
 801510e:	4b7a      	ldr	r3, [pc, #488]	; (80152f8 <__ieee754_pow+0x208>)
 8015110:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015114:	429c      	cmp	r4, r3
 8015116:	463d      	mov	r5, r7
 8015118:	ee10 aa10 	vmov	sl, s0
 801511c:	dc09      	bgt.n	8015132 <__ieee754_pow+0x42>
 801511e:	d103      	bne.n	8015128 <__ieee754_pow+0x38>
 8015120:	b93e      	cbnz	r6, 8015132 <__ieee754_pow+0x42>
 8015122:	45a0      	cmp	r8, r4
 8015124:	dc0d      	bgt.n	8015142 <__ieee754_pow+0x52>
 8015126:	e001      	b.n	801512c <__ieee754_pow+0x3c>
 8015128:	4598      	cmp	r8, r3
 801512a:	dc02      	bgt.n	8015132 <__ieee754_pow+0x42>
 801512c:	4598      	cmp	r8, r3
 801512e:	d10e      	bne.n	801514e <__ieee754_pow+0x5e>
 8015130:	b16a      	cbz	r2, 801514e <__ieee754_pow+0x5e>
 8015132:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015136:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801513a:	ea54 030a 	orrs.w	r3, r4, sl
 801513e:	f000 84a4 	beq.w	8015a8a <__ieee754_pow+0x99a>
 8015142:	486e      	ldr	r0, [pc, #440]	; (80152fc <__ieee754_pow+0x20c>)
 8015144:	b011      	add	sp, #68	; 0x44
 8015146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514a:	f000 bda5 	b.w	8015c98 <nan>
 801514e:	2d00      	cmp	r5, #0
 8015150:	da53      	bge.n	80151fa <__ieee754_pow+0x10a>
 8015152:	4b6b      	ldr	r3, [pc, #428]	; (8015300 <__ieee754_pow+0x210>)
 8015154:	4598      	cmp	r8, r3
 8015156:	dc4d      	bgt.n	80151f4 <__ieee754_pow+0x104>
 8015158:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801515c:	4598      	cmp	r8, r3
 801515e:	dd4c      	ble.n	80151fa <__ieee754_pow+0x10a>
 8015160:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015164:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015168:	2b14      	cmp	r3, #20
 801516a:	dd26      	ble.n	80151ba <__ieee754_pow+0xca>
 801516c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015170:	fa22 f103 	lsr.w	r1, r2, r3
 8015174:	fa01 f303 	lsl.w	r3, r1, r3
 8015178:	4293      	cmp	r3, r2
 801517a:	d13e      	bne.n	80151fa <__ieee754_pow+0x10a>
 801517c:	f001 0101 	and.w	r1, r1, #1
 8015180:	f1c1 0b02 	rsb	fp, r1, #2
 8015184:	2a00      	cmp	r2, #0
 8015186:	d15b      	bne.n	8015240 <__ieee754_pow+0x150>
 8015188:	4b5b      	ldr	r3, [pc, #364]	; (80152f8 <__ieee754_pow+0x208>)
 801518a:	4598      	cmp	r8, r3
 801518c:	d124      	bne.n	80151d8 <__ieee754_pow+0xe8>
 801518e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015192:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015196:	ea53 030a 	orrs.w	r3, r3, sl
 801519a:	f000 8476 	beq.w	8015a8a <__ieee754_pow+0x99a>
 801519e:	4b59      	ldr	r3, [pc, #356]	; (8015304 <__ieee754_pow+0x214>)
 80151a0:	429c      	cmp	r4, r3
 80151a2:	dd2d      	ble.n	8015200 <__ieee754_pow+0x110>
 80151a4:	f1b9 0f00 	cmp.w	r9, #0
 80151a8:	f280 8473 	bge.w	8015a92 <__ieee754_pow+0x9a2>
 80151ac:	2000      	movs	r0, #0
 80151ae:	2100      	movs	r1, #0
 80151b0:	ec41 0b10 	vmov	d0, r0, r1
 80151b4:	b011      	add	sp, #68	; 0x44
 80151b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ba:	2a00      	cmp	r2, #0
 80151bc:	d13e      	bne.n	801523c <__ieee754_pow+0x14c>
 80151be:	f1c3 0314 	rsb	r3, r3, #20
 80151c2:	fa48 f103 	asr.w	r1, r8, r3
 80151c6:	fa01 f303 	lsl.w	r3, r1, r3
 80151ca:	4543      	cmp	r3, r8
 80151cc:	f040 8469 	bne.w	8015aa2 <__ieee754_pow+0x9b2>
 80151d0:	f001 0101 	and.w	r1, r1, #1
 80151d4:	f1c1 0b02 	rsb	fp, r1, #2
 80151d8:	4b4b      	ldr	r3, [pc, #300]	; (8015308 <__ieee754_pow+0x218>)
 80151da:	4598      	cmp	r8, r3
 80151dc:	d118      	bne.n	8015210 <__ieee754_pow+0x120>
 80151de:	f1b9 0f00 	cmp.w	r9, #0
 80151e2:	f280 845a 	bge.w	8015a9a <__ieee754_pow+0x9aa>
 80151e6:	4948      	ldr	r1, [pc, #288]	; (8015308 <__ieee754_pow+0x218>)
 80151e8:	4632      	mov	r2, r6
 80151ea:	463b      	mov	r3, r7
 80151ec:	2000      	movs	r0, #0
 80151ee:	f7eb fab7 	bl	8000760 <__aeabi_ddiv>
 80151f2:	e7dd      	b.n	80151b0 <__ieee754_pow+0xc0>
 80151f4:	f04f 0b02 	mov.w	fp, #2
 80151f8:	e7c4      	b.n	8015184 <__ieee754_pow+0x94>
 80151fa:	f04f 0b00 	mov.w	fp, #0
 80151fe:	e7c1      	b.n	8015184 <__ieee754_pow+0x94>
 8015200:	f1b9 0f00 	cmp.w	r9, #0
 8015204:	dad2      	bge.n	80151ac <__ieee754_pow+0xbc>
 8015206:	e9dd 0300 	ldrd	r0, r3, [sp]
 801520a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801520e:	e7cf      	b.n	80151b0 <__ieee754_pow+0xc0>
 8015210:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015214:	d106      	bne.n	8015224 <__ieee754_pow+0x134>
 8015216:	4632      	mov	r2, r6
 8015218:	463b      	mov	r3, r7
 801521a:	4610      	mov	r0, r2
 801521c:	4619      	mov	r1, r3
 801521e:	f7eb f975 	bl	800050c <__aeabi_dmul>
 8015222:	e7c5      	b.n	80151b0 <__ieee754_pow+0xc0>
 8015224:	4b39      	ldr	r3, [pc, #228]	; (801530c <__ieee754_pow+0x21c>)
 8015226:	4599      	cmp	r9, r3
 8015228:	d10a      	bne.n	8015240 <__ieee754_pow+0x150>
 801522a:	2d00      	cmp	r5, #0
 801522c:	db08      	blt.n	8015240 <__ieee754_pow+0x150>
 801522e:	ec47 6b10 	vmov	d0, r6, r7
 8015232:	b011      	add	sp, #68	; 0x44
 8015234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015238:	f000 bc68 	b.w	8015b0c <__ieee754_sqrt>
 801523c:	f04f 0b00 	mov.w	fp, #0
 8015240:	ec47 6b10 	vmov	d0, r6, r7
 8015244:	f000 fd15 	bl	8015c72 <fabs>
 8015248:	ec51 0b10 	vmov	r0, r1, d0
 801524c:	f1ba 0f00 	cmp.w	sl, #0
 8015250:	d127      	bne.n	80152a2 <__ieee754_pow+0x1b2>
 8015252:	b124      	cbz	r4, 801525e <__ieee754_pow+0x16e>
 8015254:	4b2c      	ldr	r3, [pc, #176]	; (8015308 <__ieee754_pow+0x218>)
 8015256:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801525a:	429a      	cmp	r2, r3
 801525c:	d121      	bne.n	80152a2 <__ieee754_pow+0x1b2>
 801525e:	f1b9 0f00 	cmp.w	r9, #0
 8015262:	da05      	bge.n	8015270 <__ieee754_pow+0x180>
 8015264:	4602      	mov	r2, r0
 8015266:	460b      	mov	r3, r1
 8015268:	2000      	movs	r0, #0
 801526a:	4927      	ldr	r1, [pc, #156]	; (8015308 <__ieee754_pow+0x218>)
 801526c:	f7eb fa78 	bl	8000760 <__aeabi_ddiv>
 8015270:	2d00      	cmp	r5, #0
 8015272:	da9d      	bge.n	80151b0 <__ieee754_pow+0xc0>
 8015274:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015278:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801527c:	ea54 030b 	orrs.w	r3, r4, fp
 8015280:	d108      	bne.n	8015294 <__ieee754_pow+0x1a4>
 8015282:	4602      	mov	r2, r0
 8015284:	460b      	mov	r3, r1
 8015286:	4610      	mov	r0, r2
 8015288:	4619      	mov	r1, r3
 801528a:	f7ea ff87 	bl	800019c <__aeabi_dsub>
 801528e:	4602      	mov	r2, r0
 8015290:	460b      	mov	r3, r1
 8015292:	e7ac      	b.n	80151ee <__ieee754_pow+0xfe>
 8015294:	f1bb 0f01 	cmp.w	fp, #1
 8015298:	d18a      	bne.n	80151b0 <__ieee754_pow+0xc0>
 801529a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801529e:	4619      	mov	r1, r3
 80152a0:	e786      	b.n	80151b0 <__ieee754_pow+0xc0>
 80152a2:	0fed      	lsrs	r5, r5, #31
 80152a4:	1e6b      	subs	r3, r5, #1
 80152a6:	930d      	str	r3, [sp, #52]	; 0x34
 80152a8:	ea5b 0303 	orrs.w	r3, fp, r3
 80152ac:	d102      	bne.n	80152b4 <__ieee754_pow+0x1c4>
 80152ae:	4632      	mov	r2, r6
 80152b0:	463b      	mov	r3, r7
 80152b2:	e7e8      	b.n	8015286 <__ieee754_pow+0x196>
 80152b4:	4b16      	ldr	r3, [pc, #88]	; (8015310 <__ieee754_pow+0x220>)
 80152b6:	4598      	cmp	r8, r3
 80152b8:	f340 80fe 	ble.w	80154b8 <__ieee754_pow+0x3c8>
 80152bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80152c0:	4598      	cmp	r8, r3
 80152c2:	dd0a      	ble.n	80152da <__ieee754_pow+0x1ea>
 80152c4:	4b0f      	ldr	r3, [pc, #60]	; (8015304 <__ieee754_pow+0x214>)
 80152c6:	429c      	cmp	r4, r3
 80152c8:	dc0d      	bgt.n	80152e6 <__ieee754_pow+0x1f6>
 80152ca:	f1b9 0f00 	cmp.w	r9, #0
 80152ce:	f6bf af6d 	bge.w	80151ac <__ieee754_pow+0xbc>
 80152d2:	a307      	add	r3, pc, #28	; (adr r3, 80152f0 <__ieee754_pow+0x200>)
 80152d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d8:	e79f      	b.n	801521a <__ieee754_pow+0x12a>
 80152da:	4b0e      	ldr	r3, [pc, #56]	; (8015314 <__ieee754_pow+0x224>)
 80152dc:	429c      	cmp	r4, r3
 80152de:	ddf4      	ble.n	80152ca <__ieee754_pow+0x1da>
 80152e0:	4b09      	ldr	r3, [pc, #36]	; (8015308 <__ieee754_pow+0x218>)
 80152e2:	429c      	cmp	r4, r3
 80152e4:	dd18      	ble.n	8015318 <__ieee754_pow+0x228>
 80152e6:	f1b9 0f00 	cmp.w	r9, #0
 80152ea:	dcf2      	bgt.n	80152d2 <__ieee754_pow+0x1e2>
 80152ec:	e75e      	b.n	80151ac <__ieee754_pow+0xbc>
 80152ee:	bf00      	nop
 80152f0:	8800759c 	.word	0x8800759c
 80152f4:	7e37e43c 	.word	0x7e37e43c
 80152f8:	7ff00000 	.word	0x7ff00000
 80152fc:	08017031 	.word	0x08017031
 8015300:	433fffff 	.word	0x433fffff
 8015304:	3fefffff 	.word	0x3fefffff
 8015308:	3ff00000 	.word	0x3ff00000
 801530c:	3fe00000 	.word	0x3fe00000
 8015310:	41e00000 	.word	0x41e00000
 8015314:	3feffffe 	.word	0x3feffffe
 8015318:	2200      	movs	r2, #0
 801531a:	4b63      	ldr	r3, [pc, #396]	; (80154a8 <__ieee754_pow+0x3b8>)
 801531c:	f7ea ff3e 	bl	800019c <__aeabi_dsub>
 8015320:	a355      	add	r3, pc, #340	; (adr r3, 8015478 <__ieee754_pow+0x388>)
 8015322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015326:	4604      	mov	r4, r0
 8015328:	460d      	mov	r5, r1
 801532a:	f7eb f8ef 	bl	800050c <__aeabi_dmul>
 801532e:	a354      	add	r3, pc, #336	; (adr r3, 8015480 <__ieee754_pow+0x390>)
 8015330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015334:	4606      	mov	r6, r0
 8015336:	460f      	mov	r7, r1
 8015338:	4620      	mov	r0, r4
 801533a:	4629      	mov	r1, r5
 801533c:	f7eb f8e6 	bl	800050c <__aeabi_dmul>
 8015340:	2200      	movs	r2, #0
 8015342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015346:	4b59      	ldr	r3, [pc, #356]	; (80154ac <__ieee754_pow+0x3bc>)
 8015348:	4620      	mov	r0, r4
 801534a:	4629      	mov	r1, r5
 801534c:	f7eb f8de 	bl	800050c <__aeabi_dmul>
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	a14c      	add	r1, pc, #304	; (adr r1, 8015488 <__ieee754_pow+0x398>)
 8015356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801535a:	f7ea ff1f 	bl	800019c <__aeabi_dsub>
 801535e:	4622      	mov	r2, r4
 8015360:	462b      	mov	r3, r5
 8015362:	f7eb f8d3 	bl	800050c <__aeabi_dmul>
 8015366:	4602      	mov	r2, r0
 8015368:	460b      	mov	r3, r1
 801536a:	2000      	movs	r0, #0
 801536c:	4950      	ldr	r1, [pc, #320]	; (80154b0 <__ieee754_pow+0x3c0>)
 801536e:	f7ea ff15 	bl	800019c <__aeabi_dsub>
 8015372:	4622      	mov	r2, r4
 8015374:	462b      	mov	r3, r5
 8015376:	4680      	mov	r8, r0
 8015378:	4689      	mov	r9, r1
 801537a:	4620      	mov	r0, r4
 801537c:	4629      	mov	r1, r5
 801537e:	f7eb f8c5 	bl	800050c <__aeabi_dmul>
 8015382:	4602      	mov	r2, r0
 8015384:	460b      	mov	r3, r1
 8015386:	4640      	mov	r0, r8
 8015388:	4649      	mov	r1, r9
 801538a:	f7eb f8bf 	bl	800050c <__aeabi_dmul>
 801538e:	a340      	add	r3, pc, #256	; (adr r3, 8015490 <__ieee754_pow+0x3a0>)
 8015390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015394:	f7eb f8ba 	bl	800050c <__aeabi_dmul>
 8015398:	4602      	mov	r2, r0
 801539a:	460b      	mov	r3, r1
 801539c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153a0:	f7ea fefc 	bl	800019c <__aeabi_dsub>
 80153a4:	4602      	mov	r2, r0
 80153a6:	460b      	mov	r3, r1
 80153a8:	4604      	mov	r4, r0
 80153aa:	460d      	mov	r5, r1
 80153ac:	4630      	mov	r0, r6
 80153ae:	4639      	mov	r1, r7
 80153b0:	f7ea fef6 	bl	80001a0 <__adddf3>
 80153b4:	2000      	movs	r0, #0
 80153b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153ba:	4632      	mov	r2, r6
 80153bc:	463b      	mov	r3, r7
 80153be:	f7ea feed 	bl	800019c <__aeabi_dsub>
 80153c2:	4602      	mov	r2, r0
 80153c4:	460b      	mov	r3, r1
 80153c6:	4620      	mov	r0, r4
 80153c8:	4629      	mov	r1, r5
 80153ca:	f7ea fee7 	bl	800019c <__aeabi_dsub>
 80153ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153d0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80153d4:	4313      	orrs	r3, r2
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	f040 81eb 	bne.w	80157b4 <__ieee754_pow+0x6c4>
 80153de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015498 <__ieee754_pow+0x3a8>
 80153e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80153e6:	2400      	movs	r4, #0
 80153e8:	4622      	mov	r2, r4
 80153ea:	462b      	mov	r3, r5
 80153ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80153f4:	f7ea fed2 	bl	800019c <__aeabi_dsub>
 80153f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153fc:	f7eb f886 	bl	800050c <__aeabi_dmul>
 8015400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015404:	4680      	mov	r8, r0
 8015406:	4689      	mov	r9, r1
 8015408:	4630      	mov	r0, r6
 801540a:	4639      	mov	r1, r7
 801540c:	f7eb f87e 	bl	800050c <__aeabi_dmul>
 8015410:	4602      	mov	r2, r0
 8015412:	460b      	mov	r3, r1
 8015414:	4640      	mov	r0, r8
 8015416:	4649      	mov	r1, r9
 8015418:	f7ea fec2 	bl	80001a0 <__adddf3>
 801541c:	4622      	mov	r2, r4
 801541e:	462b      	mov	r3, r5
 8015420:	4680      	mov	r8, r0
 8015422:	4689      	mov	r9, r1
 8015424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015428:	f7eb f870 	bl	800050c <__aeabi_dmul>
 801542c:	460b      	mov	r3, r1
 801542e:	4604      	mov	r4, r0
 8015430:	460d      	mov	r5, r1
 8015432:	4602      	mov	r2, r0
 8015434:	4649      	mov	r1, r9
 8015436:	4640      	mov	r0, r8
 8015438:	e9cd 4500 	strd	r4, r5, [sp]
 801543c:	f7ea feb0 	bl	80001a0 <__adddf3>
 8015440:	4b1c      	ldr	r3, [pc, #112]	; (80154b4 <__ieee754_pow+0x3c4>)
 8015442:	4299      	cmp	r1, r3
 8015444:	4606      	mov	r6, r0
 8015446:	460f      	mov	r7, r1
 8015448:	468b      	mov	fp, r1
 801544a:	f340 82f7 	ble.w	8015a3c <__ieee754_pow+0x94c>
 801544e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015452:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015456:	4303      	orrs	r3, r0
 8015458:	f000 81ea 	beq.w	8015830 <__ieee754_pow+0x740>
 801545c:	a310      	add	r3, pc, #64	; (adr r3, 80154a0 <__ieee754_pow+0x3b0>)
 801545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015466:	f7eb f851 	bl	800050c <__aeabi_dmul>
 801546a:	a30d      	add	r3, pc, #52	; (adr r3, 80154a0 <__ieee754_pow+0x3b0>)
 801546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015470:	e6d5      	b.n	801521e <__ieee754_pow+0x12e>
 8015472:	bf00      	nop
 8015474:	f3af 8000 	nop.w
 8015478:	60000000 	.word	0x60000000
 801547c:	3ff71547 	.word	0x3ff71547
 8015480:	f85ddf44 	.word	0xf85ddf44
 8015484:	3e54ae0b 	.word	0x3e54ae0b
 8015488:	55555555 	.word	0x55555555
 801548c:	3fd55555 	.word	0x3fd55555
 8015490:	652b82fe 	.word	0x652b82fe
 8015494:	3ff71547 	.word	0x3ff71547
 8015498:	00000000 	.word	0x00000000
 801549c:	bff00000 	.word	0xbff00000
 80154a0:	8800759c 	.word	0x8800759c
 80154a4:	7e37e43c 	.word	0x7e37e43c
 80154a8:	3ff00000 	.word	0x3ff00000
 80154ac:	3fd00000 	.word	0x3fd00000
 80154b0:	3fe00000 	.word	0x3fe00000
 80154b4:	408fffff 	.word	0x408fffff
 80154b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80154bc:	f04f 0200 	mov.w	r2, #0
 80154c0:	da05      	bge.n	80154ce <__ieee754_pow+0x3de>
 80154c2:	4bd3      	ldr	r3, [pc, #844]	; (8015810 <__ieee754_pow+0x720>)
 80154c4:	f7eb f822 	bl	800050c <__aeabi_dmul>
 80154c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80154cc:	460c      	mov	r4, r1
 80154ce:	1523      	asrs	r3, r4, #20
 80154d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80154d4:	4413      	add	r3, r2
 80154d6:	9309      	str	r3, [sp, #36]	; 0x24
 80154d8:	4bce      	ldr	r3, [pc, #824]	; (8015814 <__ieee754_pow+0x724>)
 80154da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80154de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80154e2:	429c      	cmp	r4, r3
 80154e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80154e8:	dd08      	ble.n	80154fc <__ieee754_pow+0x40c>
 80154ea:	4bcb      	ldr	r3, [pc, #812]	; (8015818 <__ieee754_pow+0x728>)
 80154ec:	429c      	cmp	r4, r3
 80154ee:	f340 815e 	ble.w	80157ae <__ieee754_pow+0x6be>
 80154f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154f4:	3301      	adds	r3, #1
 80154f6:	9309      	str	r3, [sp, #36]	; 0x24
 80154f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80154fc:	f04f 0a00 	mov.w	sl, #0
 8015500:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015504:	930c      	str	r3, [sp, #48]	; 0x30
 8015506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015508:	4bc4      	ldr	r3, [pc, #784]	; (801581c <__ieee754_pow+0x72c>)
 801550a:	4413      	add	r3, r2
 801550c:	ed93 7b00 	vldr	d7, [r3]
 8015510:	4629      	mov	r1, r5
 8015512:	ec53 2b17 	vmov	r2, r3, d7
 8015516:	ed8d 7b06 	vstr	d7, [sp, #24]
 801551a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801551e:	f7ea fe3d 	bl	800019c <__aeabi_dsub>
 8015522:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015526:	4606      	mov	r6, r0
 8015528:	460f      	mov	r7, r1
 801552a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801552e:	f7ea fe37 	bl	80001a0 <__adddf3>
 8015532:	4602      	mov	r2, r0
 8015534:	460b      	mov	r3, r1
 8015536:	2000      	movs	r0, #0
 8015538:	49b9      	ldr	r1, [pc, #740]	; (8015820 <__ieee754_pow+0x730>)
 801553a:	f7eb f911 	bl	8000760 <__aeabi_ddiv>
 801553e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015542:	4602      	mov	r2, r0
 8015544:	460b      	mov	r3, r1
 8015546:	4630      	mov	r0, r6
 8015548:	4639      	mov	r1, r7
 801554a:	f7ea ffdf 	bl	800050c <__aeabi_dmul>
 801554e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015552:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801555a:	2300      	movs	r3, #0
 801555c:	9302      	str	r3, [sp, #8]
 801555e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015562:	106d      	asrs	r5, r5, #1
 8015564:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015568:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801556c:	2200      	movs	r2, #0
 801556e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015572:	4640      	mov	r0, r8
 8015574:	4649      	mov	r1, r9
 8015576:	4614      	mov	r4, r2
 8015578:	461d      	mov	r5, r3
 801557a:	f7ea ffc7 	bl	800050c <__aeabi_dmul>
 801557e:	4602      	mov	r2, r0
 8015580:	460b      	mov	r3, r1
 8015582:	4630      	mov	r0, r6
 8015584:	4639      	mov	r1, r7
 8015586:	f7ea fe09 	bl	800019c <__aeabi_dsub>
 801558a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801558e:	4606      	mov	r6, r0
 8015590:	460f      	mov	r7, r1
 8015592:	4620      	mov	r0, r4
 8015594:	4629      	mov	r1, r5
 8015596:	f7ea fe01 	bl	800019c <__aeabi_dsub>
 801559a:	4602      	mov	r2, r0
 801559c:	460b      	mov	r3, r1
 801559e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155a2:	f7ea fdfb 	bl	800019c <__aeabi_dsub>
 80155a6:	4642      	mov	r2, r8
 80155a8:	464b      	mov	r3, r9
 80155aa:	f7ea ffaf 	bl	800050c <__aeabi_dmul>
 80155ae:	4602      	mov	r2, r0
 80155b0:	460b      	mov	r3, r1
 80155b2:	4630      	mov	r0, r6
 80155b4:	4639      	mov	r1, r7
 80155b6:	f7ea fdf1 	bl	800019c <__aeabi_dsub>
 80155ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80155be:	f7ea ffa5 	bl	800050c <__aeabi_dmul>
 80155c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80155ca:	4610      	mov	r0, r2
 80155cc:	4619      	mov	r1, r3
 80155ce:	f7ea ff9d 	bl	800050c <__aeabi_dmul>
 80155d2:	a37b      	add	r3, pc, #492	; (adr r3, 80157c0 <__ieee754_pow+0x6d0>)
 80155d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d8:	4604      	mov	r4, r0
 80155da:	460d      	mov	r5, r1
 80155dc:	f7ea ff96 	bl	800050c <__aeabi_dmul>
 80155e0:	a379      	add	r3, pc, #484	; (adr r3, 80157c8 <__ieee754_pow+0x6d8>)
 80155e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e6:	f7ea fddb 	bl	80001a0 <__adddf3>
 80155ea:	4622      	mov	r2, r4
 80155ec:	462b      	mov	r3, r5
 80155ee:	f7ea ff8d 	bl	800050c <__aeabi_dmul>
 80155f2:	a377      	add	r3, pc, #476	; (adr r3, 80157d0 <__ieee754_pow+0x6e0>)
 80155f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f8:	f7ea fdd2 	bl	80001a0 <__adddf3>
 80155fc:	4622      	mov	r2, r4
 80155fe:	462b      	mov	r3, r5
 8015600:	f7ea ff84 	bl	800050c <__aeabi_dmul>
 8015604:	a374      	add	r3, pc, #464	; (adr r3, 80157d8 <__ieee754_pow+0x6e8>)
 8015606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801560a:	f7ea fdc9 	bl	80001a0 <__adddf3>
 801560e:	4622      	mov	r2, r4
 8015610:	462b      	mov	r3, r5
 8015612:	f7ea ff7b 	bl	800050c <__aeabi_dmul>
 8015616:	a372      	add	r3, pc, #456	; (adr r3, 80157e0 <__ieee754_pow+0x6f0>)
 8015618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561c:	f7ea fdc0 	bl	80001a0 <__adddf3>
 8015620:	4622      	mov	r2, r4
 8015622:	462b      	mov	r3, r5
 8015624:	f7ea ff72 	bl	800050c <__aeabi_dmul>
 8015628:	a36f      	add	r3, pc, #444	; (adr r3, 80157e8 <__ieee754_pow+0x6f8>)
 801562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562e:	f7ea fdb7 	bl	80001a0 <__adddf3>
 8015632:	4622      	mov	r2, r4
 8015634:	4606      	mov	r6, r0
 8015636:	460f      	mov	r7, r1
 8015638:	462b      	mov	r3, r5
 801563a:	4620      	mov	r0, r4
 801563c:	4629      	mov	r1, r5
 801563e:	f7ea ff65 	bl	800050c <__aeabi_dmul>
 8015642:	4602      	mov	r2, r0
 8015644:	460b      	mov	r3, r1
 8015646:	4630      	mov	r0, r6
 8015648:	4639      	mov	r1, r7
 801564a:	f7ea ff5f 	bl	800050c <__aeabi_dmul>
 801564e:	4642      	mov	r2, r8
 8015650:	4604      	mov	r4, r0
 8015652:	460d      	mov	r5, r1
 8015654:	464b      	mov	r3, r9
 8015656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801565a:	f7ea fda1 	bl	80001a0 <__adddf3>
 801565e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015662:	f7ea ff53 	bl	800050c <__aeabi_dmul>
 8015666:	4622      	mov	r2, r4
 8015668:	462b      	mov	r3, r5
 801566a:	f7ea fd99 	bl	80001a0 <__adddf3>
 801566e:	4642      	mov	r2, r8
 8015670:	4606      	mov	r6, r0
 8015672:	460f      	mov	r7, r1
 8015674:	464b      	mov	r3, r9
 8015676:	4640      	mov	r0, r8
 8015678:	4649      	mov	r1, r9
 801567a:	f7ea ff47 	bl	800050c <__aeabi_dmul>
 801567e:	2200      	movs	r2, #0
 8015680:	4b68      	ldr	r3, [pc, #416]	; (8015824 <__ieee754_pow+0x734>)
 8015682:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015686:	f7ea fd8b 	bl	80001a0 <__adddf3>
 801568a:	4632      	mov	r2, r6
 801568c:	463b      	mov	r3, r7
 801568e:	f7ea fd87 	bl	80001a0 <__adddf3>
 8015692:	9802      	ldr	r0, [sp, #8]
 8015694:	460d      	mov	r5, r1
 8015696:	4604      	mov	r4, r0
 8015698:	4602      	mov	r2, r0
 801569a:	460b      	mov	r3, r1
 801569c:	4640      	mov	r0, r8
 801569e:	4649      	mov	r1, r9
 80156a0:	f7ea ff34 	bl	800050c <__aeabi_dmul>
 80156a4:	2200      	movs	r2, #0
 80156a6:	4680      	mov	r8, r0
 80156a8:	4689      	mov	r9, r1
 80156aa:	4b5e      	ldr	r3, [pc, #376]	; (8015824 <__ieee754_pow+0x734>)
 80156ac:	4620      	mov	r0, r4
 80156ae:	4629      	mov	r1, r5
 80156b0:	f7ea fd74 	bl	800019c <__aeabi_dsub>
 80156b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156b8:	f7ea fd70 	bl	800019c <__aeabi_dsub>
 80156bc:	4602      	mov	r2, r0
 80156be:	460b      	mov	r3, r1
 80156c0:	4630      	mov	r0, r6
 80156c2:	4639      	mov	r1, r7
 80156c4:	f7ea fd6a 	bl	800019c <__aeabi_dsub>
 80156c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156cc:	f7ea ff1e 	bl	800050c <__aeabi_dmul>
 80156d0:	4622      	mov	r2, r4
 80156d2:	4606      	mov	r6, r0
 80156d4:	460f      	mov	r7, r1
 80156d6:	462b      	mov	r3, r5
 80156d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156dc:	f7ea ff16 	bl	800050c <__aeabi_dmul>
 80156e0:	4602      	mov	r2, r0
 80156e2:	460b      	mov	r3, r1
 80156e4:	4630      	mov	r0, r6
 80156e6:	4639      	mov	r1, r7
 80156e8:	f7ea fd5a 	bl	80001a0 <__adddf3>
 80156ec:	4606      	mov	r6, r0
 80156ee:	460f      	mov	r7, r1
 80156f0:	4602      	mov	r2, r0
 80156f2:	460b      	mov	r3, r1
 80156f4:	4640      	mov	r0, r8
 80156f6:	4649      	mov	r1, r9
 80156f8:	f7ea fd52 	bl	80001a0 <__adddf3>
 80156fc:	9802      	ldr	r0, [sp, #8]
 80156fe:	a33c      	add	r3, pc, #240	; (adr r3, 80157f0 <__ieee754_pow+0x700>)
 8015700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015704:	4604      	mov	r4, r0
 8015706:	460d      	mov	r5, r1
 8015708:	f7ea ff00 	bl	800050c <__aeabi_dmul>
 801570c:	4642      	mov	r2, r8
 801570e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015712:	464b      	mov	r3, r9
 8015714:	4620      	mov	r0, r4
 8015716:	4629      	mov	r1, r5
 8015718:	f7ea fd40 	bl	800019c <__aeabi_dsub>
 801571c:	4602      	mov	r2, r0
 801571e:	460b      	mov	r3, r1
 8015720:	4630      	mov	r0, r6
 8015722:	4639      	mov	r1, r7
 8015724:	f7ea fd3a 	bl	800019c <__aeabi_dsub>
 8015728:	a333      	add	r3, pc, #204	; (adr r3, 80157f8 <__ieee754_pow+0x708>)
 801572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572e:	f7ea feed 	bl	800050c <__aeabi_dmul>
 8015732:	a333      	add	r3, pc, #204	; (adr r3, 8015800 <__ieee754_pow+0x710>)
 8015734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015738:	4606      	mov	r6, r0
 801573a:	460f      	mov	r7, r1
 801573c:	4620      	mov	r0, r4
 801573e:	4629      	mov	r1, r5
 8015740:	f7ea fee4 	bl	800050c <__aeabi_dmul>
 8015744:	4602      	mov	r2, r0
 8015746:	460b      	mov	r3, r1
 8015748:	4630      	mov	r0, r6
 801574a:	4639      	mov	r1, r7
 801574c:	f7ea fd28 	bl	80001a0 <__adddf3>
 8015750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015752:	4b35      	ldr	r3, [pc, #212]	; (8015828 <__ieee754_pow+0x738>)
 8015754:	4413      	add	r3, r2
 8015756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575a:	f7ea fd21 	bl	80001a0 <__adddf3>
 801575e:	4604      	mov	r4, r0
 8015760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015762:	460d      	mov	r5, r1
 8015764:	f7ea fe68 	bl	8000438 <__aeabi_i2d>
 8015768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801576a:	4b30      	ldr	r3, [pc, #192]	; (801582c <__ieee754_pow+0x73c>)
 801576c:	4413      	add	r3, r2
 801576e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015772:	4606      	mov	r6, r0
 8015774:	460f      	mov	r7, r1
 8015776:	4622      	mov	r2, r4
 8015778:	462b      	mov	r3, r5
 801577a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801577e:	f7ea fd0f 	bl	80001a0 <__adddf3>
 8015782:	4642      	mov	r2, r8
 8015784:	464b      	mov	r3, r9
 8015786:	f7ea fd0b 	bl	80001a0 <__adddf3>
 801578a:	4632      	mov	r2, r6
 801578c:	463b      	mov	r3, r7
 801578e:	f7ea fd07 	bl	80001a0 <__adddf3>
 8015792:	9802      	ldr	r0, [sp, #8]
 8015794:	4632      	mov	r2, r6
 8015796:	463b      	mov	r3, r7
 8015798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801579c:	f7ea fcfe 	bl	800019c <__aeabi_dsub>
 80157a0:	4642      	mov	r2, r8
 80157a2:	464b      	mov	r3, r9
 80157a4:	f7ea fcfa 	bl	800019c <__aeabi_dsub>
 80157a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157ac:	e607      	b.n	80153be <__ieee754_pow+0x2ce>
 80157ae:	f04f 0a01 	mov.w	sl, #1
 80157b2:	e6a5      	b.n	8015500 <__ieee754_pow+0x410>
 80157b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015808 <__ieee754_pow+0x718>
 80157b8:	e613      	b.n	80153e2 <__ieee754_pow+0x2f2>
 80157ba:	bf00      	nop
 80157bc:	f3af 8000 	nop.w
 80157c0:	4a454eef 	.word	0x4a454eef
 80157c4:	3fca7e28 	.word	0x3fca7e28
 80157c8:	93c9db65 	.word	0x93c9db65
 80157cc:	3fcd864a 	.word	0x3fcd864a
 80157d0:	a91d4101 	.word	0xa91d4101
 80157d4:	3fd17460 	.word	0x3fd17460
 80157d8:	518f264d 	.word	0x518f264d
 80157dc:	3fd55555 	.word	0x3fd55555
 80157e0:	db6fabff 	.word	0xdb6fabff
 80157e4:	3fdb6db6 	.word	0x3fdb6db6
 80157e8:	33333303 	.word	0x33333303
 80157ec:	3fe33333 	.word	0x3fe33333
 80157f0:	e0000000 	.word	0xe0000000
 80157f4:	3feec709 	.word	0x3feec709
 80157f8:	dc3a03fd 	.word	0xdc3a03fd
 80157fc:	3feec709 	.word	0x3feec709
 8015800:	145b01f5 	.word	0x145b01f5
 8015804:	be3e2fe0 	.word	0xbe3e2fe0
 8015808:	00000000 	.word	0x00000000
 801580c:	3ff00000 	.word	0x3ff00000
 8015810:	43400000 	.word	0x43400000
 8015814:	0003988e 	.word	0x0003988e
 8015818:	000bb679 	.word	0x000bb679
 801581c:	08017038 	.word	0x08017038
 8015820:	3ff00000 	.word	0x3ff00000
 8015824:	40080000 	.word	0x40080000
 8015828:	08017058 	.word	0x08017058
 801582c:	08017048 	.word	0x08017048
 8015830:	a3b4      	add	r3, pc, #720	; (adr r3, 8015b04 <__ieee754_pow+0xa14>)
 8015832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015836:	4640      	mov	r0, r8
 8015838:	4649      	mov	r1, r9
 801583a:	f7ea fcb1 	bl	80001a0 <__adddf3>
 801583e:	4622      	mov	r2, r4
 8015840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015844:	462b      	mov	r3, r5
 8015846:	4630      	mov	r0, r6
 8015848:	4639      	mov	r1, r7
 801584a:	f7ea fca7 	bl	800019c <__aeabi_dsub>
 801584e:	4602      	mov	r2, r0
 8015850:	460b      	mov	r3, r1
 8015852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015856:	f7eb f8e9 	bl	8000a2c <__aeabi_dcmpgt>
 801585a:	2800      	cmp	r0, #0
 801585c:	f47f adfe 	bne.w	801545c <__ieee754_pow+0x36c>
 8015860:	4aa3      	ldr	r2, [pc, #652]	; (8015af0 <__ieee754_pow+0xa00>)
 8015862:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015866:	4293      	cmp	r3, r2
 8015868:	f340 810a 	ble.w	8015a80 <__ieee754_pow+0x990>
 801586c:	151b      	asrs	r3, r3, #20
 801586e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015872:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015876:	fa4a f303 	asr.w	r3, sl, r3
 801587a:	445b      	add	r3, fp
 801587c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015880:	4e9c      	ldr	r6, [pc, #624]	; (8015af4 <__ieee754_pow+0xa04>)
 8015882:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015886:	4116      	asrs	r6, r2
 8015888:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801588c:	2000      	movs	r0, #0
 801588e:	ea23 0106 	bic.w	r1, r3, r6
 8015892:	f1c2 0214 	rsb	r2, r2, #20
 8015896:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801589a:	fa4a fa02 	asr.w	sl, sl, r2
 801589e:	f1bb 0f00 	cmp.w	fp, #0
 80158a2:	4602      	mov	r2, r0
 80158a4:	460b      	mov	r3, r1
 80158a6:	4620      	mov	r0, r4
 80158a8:	4629      	mov	r1, r5
 80158aa:	bfb8      	it	lt
 80158ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80158b0:	f7ea fc74 	bl	800019c <__aeabi_dsub>
 80158b4:	e9cd 0100 	strd	r0, r1, [sp]
 80158b8:	4642      	mov	r2, r8
 80158ba:	464b      	mov	r3, r9
 80158bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158c0:	f7ea fc6e 	bl	80001a0 <__adddf3>
 80158c4:	2000      	movs	r0, #0
 80158c6:	a378      	add	r3, pc, #480	; (adr r3, 8015aa8 <__ieee754_pow+0x9b8>)
 80158c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158cc:	4604      	mov	r4, r0
 80158ce:	460d      	mov	r5, r1
 80158d0:	f7ea fe1c 	bl	800050c <__aeabi_dmul>
 80158d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158d8:	4606      	mov	r6, r0
 80158da:	460f      	mov	r7, r1
 80158dc:	4620      	mov	r0, r4
 80158de:	4629      	mov	r1, r5
 80158e0:	f7ea fc5c 	bl	800019c <__aeabi_dsub>
 80158e4:	4602      	mov	r2, r0
 80158e6:	460b      	mov	r3, r1
 80158e8:	4640      	mov	r0, r8
 80158ea:	4649      	mov	r1, r9
 80158ec:	f7ea fc56 	bl	800019c <__aeabi_dsub>
 80158f0:	a36f      	add	r3, pc, #444	; (adr r3, 8015ab0 <__ieee754_pow+0x9c0>)
 80158f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f6:	f7ea fe09 	bl	800050c <__aeabi_dmul>
 80158fa:	a36f      	add	r3, pc, #444	; (adr r3, 8015ab8 <__ieee754_pow+0x9c8>)
 80158fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015900:	4680      	mov	r8, r0
 8015902:	4689      	mov	r9, r1
 8015904:	4620      	mov	r0, r4
 8015906:	4629      	mov	r1, r5
 8015908:	f7ea fe00 	bl	800050c <__aeabi_dmul>
 801590c:	4602      	mov	r2, r0
 801590e:	460b      	mov	r3, r1
 8015910:	4640      	mov	r0, r8
 8015912:	4649      	mov	r1, r9
 8015914:	f7ea fc44 	bl	80001a0 <__adddf3>
 8015918:	4604      	mov	r4, r0
 801591a:	460d      	mov	r5, r1
 801591c:	4602      	mov	r2, r0
 801591e:	460b      	mov	r3, r1
 8015920:	4630      	mov	r0, r6
 8015922:	4639      	mov	r1, r7
 8015924:	f7ea fc3c 	bl	80001a0 <__adddf3>
 8015928:	4632      	mov	r2, r6
 801592a:	463b      	mov	r3, r7
 801592c:	4680      	mov	r8, r0
 801592e:	4689      	mov	r9, r1
 8015930:	f7ea fc34 	bl	800019c <__aeabi_dsub>
 8015934:	4602      	mov	r2, r0
 8015936:	460b      	mov	r3, r1
 8015938:	4620      	mov	r0, r4
 801593a:	4629      	mov	r1, r5
 801593c:	f7ea fc2e 	bl	800019c <__aeabi_dsub>
 8015940:	4642      	mov	r2, r8
 8015942:	4606      	mov	r6, r0
 8015944:	460f      	mov	r7, r1
 8015946:	464b      	mov	r3, r9
 8015948:	4640      	mov	r0, r8
 801594a:	4649      	mov	r1, r9
 801594c:	f7ea fdde 	bl	800050c <__aeabi_dmul>
 8015950:	a35b      	add	r3, pc, #364	; (adr r3, 8015ac0 <__ieee754_pow+0x9d0>)
 8015952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015956:	4604      	mov	r4, r0
 8015958:	460d      	mov	r5, r1
 801595a:	f7ea fdd7 	bl	800050c <__aeabi_dmul>
 801595e:	a35a      	add	r3, pc, #360	; (adr r3, 8015ac8 <__ieee754_pow+0x9d8>)
 8015960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015964:	f7ea fc1a 	bl	800019c <__aeabi_dsub>
 8015968:	4622      	mov	r2, r4
 801596a:	462b      	mov	r3, r5
 801596c:	f7ea fdce 	bl	800050c <__aeabi_dmul>
 8015970:	a357      	add	r3, pc, #348	; (adr r3, 8015ad0 <__ieee754_pow+0x9e0>)
 8015972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015976:	f7ea fc13 	bl	80001a0 <__adddf3>
 801597a:	4622      	mov	r2, r4
 801597c:	462b      	mov	r3, r5
 801597e:	f7ea fdc5 	bl	800050c <__aeabi_dmul>
 8015982:	a355      	add	r3, pc, #340	; (adr r3, 8015ad8 <__ieee754_pow+0x9e8>)
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	f7ea fc08 	bl	800019c <__aeabi_dsub>
 801598c:	4622      	mov	r2, r4
 801598e:	462b      	mov	r3, r5
 8015990:	f7ea fdbc 	bl	800050c <__aeabi_dmul>
 8015994:	a352      	add	r3, pc, #328	; (adr r3, 8015ae0 <__ieee754_pow+0x9f0>)
 8015996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599a:	f7ea fc01 	bl	80001a0 <__adddf3>
 801599e:	4622      	mov	r2, r4
 80159a0:	462b      	mov	r3, r5
 80159a2:	f7ea fdb3 	bl	800050c <__aeabi_dmul>
 80159a6:	4602      	mov	r2, r0
 80159a8:	460b      	mov	r3, r1
 80159aa:	4640      	mov	r0, r8
 80159ac:	4649      	mov	r1, r9
 80159ae:	f7ea fbf5 	bl	800019c <__aeabi_dsub>
 80159b2:	4604      	mov	r4, r0
 80159b4:	460d      	mov	r5, r1
 80159b6:	4602      	mov	r2, r0
 80159b8:	460b      	mov	r3, r1
 80159ba:	4640      	mov	r0, r8
 80159bc:	4649      	mov	r1, r9
 80159be:	f7ea fda5 	bl	800050c <__aeabi_dmul>
 80159c2:	2200      	movs	r2, #0
 80159c4:	e9cd 0100 	strd	r0, r1, [sp]
 80159c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80159cc:	4620      	mov	r0, r4
 80159ce:	4629      	mov	r1, r5
 80159d0:	f7ea fbe4 	bl	800019c <__aeabi_dsub>
 80159d4:	4602      	mov	r2, r0
 80159d6:	460b      	mov	r3, r1
 80159d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159dc:	f7ea fec0 	bl	8000760 <__aeabi_ddiv>
 80159e0:	4632      	mov	r2, r6
 80159e2:	4604      	mov	r4, r0
 80159e4:	460d      	mov	r5, r1
 80159e6:	463b      	mov	r3, r7
 80159e8:	4640      	mov	r0, r8
 80159ea:	4649      	mov	r1, r9
 80159ec:	f7ea fd8e 	bl	800050c <__aeabi_dmul>
 80159f0:	4632      	mov	r2, r6
 80159f2:	463b      	mov	r3, r7
 80159f4:	f7ea fbd4 	bl	80001a0 <__adddf3>
 80159f8:	4602      	mov	r2, r0
 80159fa:	460b      	mov	r3, r1
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fbcc 	bl	800019c <__aeabi_dsub>
 8015a04:	4642      	mov	r2, r8
 8015a06:	464b      	mov	r3, r9
 8015a08:	f7ea fbc8 	bl	800019c <__aeabi_dsub>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	460b      	mov	r3, r1
 8015a10:	2000      	movs	r0, #0
 8015a12:	4939      	ldr	r1, [pc, #228]	; (8015af8 <__ieee754_pow+0xa08>)
 8015a14:	f7ea fbc2 	bl	800019c <__aeabi_dsub>
 8015a18:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015a1c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015a20:	4602      	mov	r2, r0
 8015a22:	460b      	mov	r3, r1
 8015a24:	da2f      	bge.n	8015a86 <__ieee754_pow+0x996>
 8015a26:	4650      	mov	r0, sl
 8015a28:	ec43 2b10 	vmov	d0, r2, r3
 8015a2c:	f000 f9c0 	bl	8015db0 <scalbn>
 8015a30:	ec51 0b10 	vmov	r0, r1, d0
 8015a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015a38:	f7ff bbf1 	b.w	801521e <__ieee754_pow+0x12e>
 8015a3c:	4b2f      	ldr	r3, [pc, #188]	; (8015afc <__ieee754_pow+0xa0c>)
 8015a3e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015a42:	429e      	cmp	r6, r3
 8015a44:	f77f af0c 	ble.w	8015860 <__ieee754_pow+0x770>
 8015a48:	4b2d      	ldr	r3, [pc, #180]	; (8015b00 <__ieee754_pow+0xa10>)
 8015a4a:	440b      	add	r3, r1
 8015a4c:	4303      	orrs	r3, r0
 8015a4e:	d00b      	beq.n	8015a68 <__ieee754_pow+0x978>
 8015a50:	a325      	add	r3, pc, #148	; (adr r3, 8015ae8 <__ieee754_pow+0x9f8>)
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a5a:	f7ea fd57 	bl	800050c <__aeabi_dmul>
 8015a5e:	a322      	add	r3, pc, #136	; (adr r3, 8015ae8 <__ieee754_pow+0x9f8>)
 8015a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a64:	f7ff bbdb 	b.w	801521e <__ieee754_pow+0x12e>
 8015a68:	4622      	mov	r2, r4
 8015a6a:	462b      	mov	r3, r5
 8015a6c:	f7ea fb96 	bl	800019c <__aeabi_dsub>
 8015a70:	4642      	mov	r2, r8
 8015a72:	464b      	mov	r3, r9
 8015a74:	f7ea ffd0 	bl	8000a18 <__aeabi_dcmpge>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	f43f aef1 	beq.w	8015860 <__ieee754_pow+0x770>
 8015a7e:	e7e7      	b.n	8015a50 <__ieee754_pow+0x960>
 8015a80:	f04f 0a00 	mov.w	sl, #0
 8015a84:	e718      	b.n	80158b8 <__ieee754_pow+0x7c8>
 8015a86:	4621      	mov	r1, r4
 8015a88:	e7d4      	b.n	8015a34 <__ieee754_pow+0x944>
 8015a8a:	2000      	movs	r0, #0
 8015a8c:	491a      	ldr	r1, [pc, #104]	; (8015af8 <__ieee754_pow+0xa08>)
 8015a8e:	f7ff bb8f 	b.w	80151b0 <__ieee754_pow+0xc0>
 8015a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a96:	f7ff bb8b 	b.w	80151b0 <__ieee754_pow+0xc0>
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	4639      	mov	r1, r7
 8015a9e:	f7ff bb87 	b.w	80151b0 <__ieee754_pow+0xc0>
 8015aa2:	4693      	mov	fp, r2
 8015aa4:	f7ff bb98 	b.w	80151d8 <__ieee754_pow+0xe8>
 8015aa8:	00000000 	.word	0x00000000
 8015aac:	3fe62e43 	.word	0x3fe62e43
 8015ab0:	fefa39ef 	.word	0xfefa39ef
 8015ab4:	3fe62e42 	.word	0x3fe62e42
 8015ab8:	0ca86c39 	.word	0x0ca86c39
 8015abc:	be205c61 	.word	0xbe205c61
 8015ac0:	72bea4d0 	.word	0x72bea4d0
 8015ac4:	3e663769 	.word	0x3e663769
 8015ac8:	c5d26bf1 	.word	0xc5d26bf1
 8015acc:	3ebbbd41 	.word	0x3ebbbd41
 8015ad0:	af25de2c 	.word	0xaf25de2c
 8015ad4:	3f11566a 	.word	0x3f11566a
 8015ad8:	16bebd93 	.word	0x16bebd93
 8015adc:	3f66c16c 	.word	0x3f66c16c
 8015ae0:	5555553e 	.word	0x5555553e
 8015ae4:	3fc55555 	.word	0x3fc55555
 8015ae8:	c2f8f359 	.word	0xc2f8f359
 8015aec:	01a56e1f 	.word	0x01a56e1f
 8015af0:	3fe00000 	.word	0x3fe00000
 8015af4:	000fffff 	.word	0x000fffff
 8015af8:	3ff00000 	.word	0x3ff00000
 8015afc:	4090cbff 	.word	0x4090cbff
 8015b00:	3f6f3400 	.word	0x3f6f3400
 8015b04:	652b82fe 	.word	0x652b82fe
 8015b08:	3c971547 	.word	0x3c971547

08015b0c <__ieee754_sqrt>:
 8015b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b10:	4955      	ldr	r1, [pc, #340]	; (8015c68 <__ieee754_sqrt+0x15c>)
 8015b12:	ec55 4b10 	vmov	r4, r5, d0
 8015b16:	43a9      	bics	r1, r5
 8015b18:	462b      	mov	r3, r5
 8015b1a:	462a      	mov	r2, r5
 8015b1c:	d112      	bne.n	8015b44 <__ieee754_sqrt+0x38>
 8015b1e:	ee10 2a10 	vmov	r2, s0
 8015b22:	ee10 0a10 	vmov	r0, s0
 8015b26:	4629      	mov	r1, r5
 8015b28:	f7ea fcf0 	bl	800050c <__aeabi_dmul>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	460b      	mov	r3, r1
 8015b30:	4620      	mov	r0, r4
 8015b32:	4629      	mov	r1, r5
 8015b34:	f7ea fb34 	bl	80001a0 <__adddf3>
 8015b38:	4604      	mov	r4, r0
 8015b3a:	460d      	mov	r5, r1
 8015b3c:	ec45 4b10 	vmov	d0, r4, r5
 8015b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b44:	2d00      	cmp	r5, #0
 8015b46:	ee10 0a10 	vmov	r0, s0
 8015b4a:	4621      	mov	r1, r4
 8015b4c:	dc0f      	bgt.n	8015b6e <__ieee754_sqrt+0x62>
 8015b4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015b52:	4330      	orrs	r0, r6
 8015b54:	d0f2      	beq.n	8015b3c <__ieee754_sqrt+0x30>
 8015b56:	b155      	cbz	r5, 8015b6e <__ieee754_sqrt+0x62>
 8015b58:	ee10 2a10 	vmov	r2, s0
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	4629      	mov	r1, r5
 8015b60:	f7ea fb1c 	bl	800019c <__aeabi_dsub>
 8015b64:	4602      	mov	r2, r0
 8015b66:	460b      	mov	r3, r1
 8015b68:	f7ea fdfa 	bl	8000760 <__aeabi_ddiv>
 8015b6c:	e7e4      	b.n	8015b38 <__ieee754_sqrt+0x2c>
 8015b6e:	151b      	asrs	r3, r3, #20
 8015b70:	d073      	beq.n	8015c5a <__ieee754_sqrt+0x14e>
 8015b72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015b76:	07dd      	lsls	r5, r3, #31
 8015b78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015b7c:	bf48      	it	mi
 8015b7e:	0fc8      	lsrmi	r0, r1, #31
 8015b80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015b84:	bf44      	itt	mi
 8015b86:	0049      	lslmi	r1, r1, #1
 8015b88:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015b8c:	2500      	movs	r5, #0
 8015b8e:	1058      	asrs	r0, r3, #1
 8015b90:	0fcb      	lsrs	r3, r1, #31
 8015b92:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015b96:	0049      	lsls	r1, r1, #1
 8015b98:	2316      	movs	r3, #22
 8015b9a:	462c      	mov	r4, r5
 8015b9c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015ba0:	19a7      	adds	r7, r4, r6
 8015ba2:	4297      	cmp	r7, r2
 8015ba4:	bfde      	ittt	le
 8015ba6:	19bc      	addle	r4, r7, r6
 8015ba8:	1bd2      	suble	r2, r2, r7
 8015baa:	19ad      	addle	r5, r5, r6
 8015bac:	0fcf      	lsrs	r7, r1, #31
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015bb4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015bb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015bbc:	d1f0      	bne.n	8015ba0 <__ieee754_sqrt+0x94>
 8015bbe:	f04f 0c20 	mov.w	ip, #32
 8015bc2:	469e      	mov	lr, r3
 8015bc4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015bc8:	42a2      	cmp	r2, r4
 8015bca:	eb06 070e 	add.w	r7, r6, lr
 8015bce:	dc02      	bgt.n	8015bd6 <__ieee754_sqrt+0xca>
 8015bd0:	d112      	bne.n	8015bf8 <__ieee754_sqrt+0xec>
 8015bd2:	428f      	cmp	r7, r1
 8015bd4:	d810      	bhi.n	8015bf8 <__ieee754_sqrt+0xec>
 8015bd6:	2f00      	cmp	r7, #0
 8015bd8:	eb07 0e06 	add.w	lr, r7, r6
 8015bdc:	da42      	bge.n	8015c64 <__ieee754_sqrt+0x158>
 8015bde:	f1be 0f00 	cmp.w	lr, #0
 8015be2:	db3f      	blt.n	8015c64 <__ieee754_sqrt+0x158>
 8015be4:	f104 0801 	add.w	r8, r4, #1
 8015be8:	1b12      	subs	r2, r2, r4
 8015bea:	428f      	cmp	r7, r1
 8015bec:	bf88      	it	hi
 8015bee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015bf2:	1bc9      	subs	r1, r1, r7
 8015bf4:	4433      	add	r3, r6
 8015bf6:	4644      	mov	r4, r8
 8015bf8:	0052      	lsls	r2, r2, #1
 8015bfa:	f1bc 0c01 	subs.w	ip, ip, #1
 8015bfe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015c02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015c06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015c0a:	d1dd      	bne.n	8015bc8 <__ieee754_sqrt+0xbc>
 8015c0c:	430a      	orrs	r2, r1
 8015c0e:	d006      	beq.n	8015c1e <__ieee754_sqrt+0x112>
 8015c10:	1c5c      	adds	r4, r3, #1
 8015c12:	bf13      	iteet	ne
 8015c14:	3301      	addne	r3, #1
 8015c16:	3501      	addeq	r5, #1
 8015c18:	4663      	moveq	r3, ip
 8015c1a:	f023 0301 	bicne.w	r3, r3, #1
 8015c1e:	106a      	asrs	r2, r5, #1
 8015c20:	085b      	lsrs	r3, r3, #1
 8015c22:	07e9      	lsls	r1, r5, #31
 8015c24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015c28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015c2c:	bf48      	it	mi
 8015c2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015c32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015c36:	461c      	mov	r4, r3
 8015c38:	e780      	b.n	8015b3c <__ieee754_sqrt+0x30>
 8015c3a:	0aca      	lsrs	r2, r1, #11
 8015c3c:	3815      	subs	r0, #21
 8015c3e:	0549      	lsls	r1, r1, #21
 8015c40:	2a00      	cmp	r2, #0
 8015c42:	d0fa      	beq.n	8015c3a <__ieee754_sqrt+0x12e>
 8015c44:	02d6      	lsls	r6, r2, #11
 8015c46:	d50a      	bpl.n	8015c5e <__ieee754_sqrt+0x152>
 8015c48:	f1c3 0420 	rsb	r4, r3, #32
 8015c4c:	fa21 f404 	lsr.w	r4, r1, r4
 8015c50:	1e5d      	subs	r5, r3, #1
 8015c52:	4099      	lsls	r1, r3
 8015c54:	4322      	orrs	r2, r4
 8015c56:	1b43      	subs	r3, r0, r5
 8015c58:	e78b      	b.n	8015b72 <__ieee754_sqrt+0x66>
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	e7f0      	b.n	8015c40 <__ieee754_sqrt+0x134>
 8015c5e:	0052      	lsls	r2, r2, #1
 8015c60:	3301      	adds	r3, #1
 8015c62:	e7ef      	b.n	8015c44 <__ieee754_sqrt+0x138>
 8015c64:	46a0      	mov	r8, r4
 8015c66:	e7bf      	b.n	8015be8 <__ieee754_sqrt+0xdc>
 8015c68:	7ff00000 	.word	0x7ff00000

08015c6c <__ieee754_sqrtf>:
 8015c6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015c70:	4770      	bx	lr

08015c72 <fabs>:
 8015c72:	ec51 0b10 	vmov	r0, r1, d0
 8015c76:	ee10 2a10 	vmov	r2, s0
 8015c7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015c7e:	ec43 2b10 	vmov	d0, r2, r3
 8015c82:	4770      	bx	lr

08015c84 <finite>:
 8015c84:	ee10 3a90 	vmov	r3, s1
 8015c88:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015c8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015c90:	0fc0      	lsrs	r0, r0, #31
 8015c92:	4770      	bx	lr

08015c94 <matherr>:
 8015c94:	2000      	movs	r0, #0
 8015c96:	4770      	bx	lr

08015c98 <nan>:
 8015c98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015ca0 <nan+0x8>
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop
 8015ca0:	00000000 	.word	0x00000000
 8015ca4:	7ff80000 	.word	0x7ff80000

08015ca8 <rint>:
 8015ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015caa:	ec51 0b10 	vmov	r0, r1, d0
 8015cae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015cb2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015cb6:	2e13      	cmp	r6, #19
 8015cb8:	460b      	mov	r3, r1
 8015cba:	ee10 4a10 	vmov	r4, s0
 8015cbe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015cc2:	dc56      	bgt.n	8015d72 <rint+0xca>
 8015cc4:	2e00      	cmp	r6, #0
 8015cc6:	da2b      	bge.n	8015d20 <rint+0x78>
 8015cc8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015ccc:	4302      	orrs	r2, r0
 8015cce:	d023      	beq.n	8015d18 <rint+0x70>
 8015cd0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015cd4:	4302      	orrs	r2, r0
 8015cd6:	4254      	negs	r4, r2
 8015cd8:	4314      	orrs	r4, r2
 8015cda:	0c4b      	lsrs	r3, r1, #17
 8015cdc:	0b24      	lsrs	r4, r4, #12
 8015cde:	045b      	lsls	r3, r3, #17
 8015ce0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015ce4:	ea44 0103 	orr.w	r1, r4, r3
 8015ce8:	460b      	mov	r3, r1
 8015cea:	492f      	ldr	r1, [pc, #188]	; (8015da8 <rint+0x100>)
 8015cec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015cf0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015cf4:	4602      	mov	r2, r0
 8015cf6:	4639      	mov	r1, r7
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f7ea fa51 	bl	80001a0 <__adddf3>
 8015cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8015d02:	463b      	mov	r3, r7
 8015d04:	4632      	mov	r2, r6
 8015d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d0a:	f7ea fa47 	bl	800019c <__aeabi_dsub>
 8015d0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015d12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015d16:	4639      	mov	r1, r7
 8015d18:	ec41 0b10 	vmov	d0, r0, r1
 8015d1c:	b003      	add	sp, #12
 8015d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d20:	4a22      	ldr	r2, [pc, #136]	; (8015dac <rint+0x104>)
 8015d22:	4132      	asrs	r2, r6
 8015d24:	ea01 0702 	and.w	r7, r1, r2
 8015d28:	4307      	orrs	r7, r0
 8015d2a:	d0f5      	beq.n	8015d18 <rint+0x70>
 8015d2c:	0852      	lsrs	r2, r2, #1
 8015d2e:	4011      	ands	r1, r2
 8015d30:	430c      	orrs	r4, r1
 8015d32:	d00b      	beq.n	8015d4c <rint+0xa4>
 8015d34:	ea23 0202 	bic.w	r2, r3, r2
 8015d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015d3c:	2e13      	cmp	r6, #19
 8015d3e:	fa43 f306 	asr.w	r3, r3, r6
 8015d42:	bf0c      	ite	eq
 8015d44:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015d48:	2400      	movne	r4, #0
 8015d4a:	4313      	orrs	r3, r2
 8015d4c:	4916      	ldr	r1, [pc, #88]	; (8015da8 <rint+0x100>)
 8015d4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015d52:	4622      	mov	r2, r4
 8015d54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015d58:	4620      	mov	r0, r4
 8015d5a:	4629      	mov	r1, r5
 8015d5c:	f7ea fa20 	bl	80001a0 <__adddf3>
 8015d60:	e9cd 0100 	strd	r0, r1, [sp]
 8015d64:	4622      	mov	r2, r4
 8015d66:	462b      	mov	r3, r5
 8015d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d6c:	f7ea fa16 	bl	800019c <__aeabi_dsub>
 8015d70:	e7d2      	b.n	8015d18 <rint+0x70>
 8015d72:	2e33      	cmp	r6, #51	; 0x33
 8015d74:	dd07      	ble.n	8015d86 <rint+0xde>
 8015d76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015d7a:	d1cd      	bne.n	8015d18 <rint+0x70>
 8015d7c:	ee10 2a10 	vmov	r2, s0
 8015d80:	f7ea fa0e 	bl	80001a0 <__adddf3>
 8015d84:	e7c8      	b.n	8015d18 <rint+0x70>
 8015d86:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8015d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d8e:	40f2      	lsrs	r2, r6
 8015d90:	4210      	tst	r0, r2
 8015d92:	d0c1      	beq.n	8015d18 <rint+0x70>
 8015d94:	0852      	lsrs	r2, r2, #1
 8015d96:	4210      	tst	r0, r2
 8015d98:	bf1f      	itttt	ne
 8015d9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015d9e:	ea20 0202 	bicne.w	r2, r0, r2
 8015da2:	4134      	asrne	r4, r6
 8015da4:	4314      	orrne	r4, r2
 8015da6:	e7d1      	b.n	8015d4c <rint+0xa4>
 8015da8:	08017068 	.word	0x08017068
 8015dac:	000fffff 	.word	0x000fffff

08015db0 <scalbn>:
 8015db0:	b570      	push	{r4, r5, r6, lr}
 8015db2:	ec55 4b10 	vmov	r4, r5, d0
 8015db6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015dba:	4606      	mov	r6, r0
 8015dbc:	462b      	mov	r3, r5
 8015dbe:	b9aa      	cbnz	r2, 8015dec <scalbn+0x3c>
 8015dc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015dc4:	4323      	orrs	r3, r4
 8015dc6:	d03b      	beq.n	8015e40 <scalbn+0x90>
 8015dc8:	4b31      	ldr	r3, [pc, #196]	; (8015e90 <scalbn+0xe0>)
 8015dca:	4629      	mov	r1, r5
 8015dcc:	2200      	movs	r2, #0
 8015dce:	ee10 0a10 	vmov	r0, s0
 8015dd2:	f7ea fb9b 	bl	800050c <__aeabi_dmul>
 8015dd6:	4b2f      	ldr	r3, [pc, #188]	; (8015e94 <scalbn+0xe4>)
 8015dd8:	429e      	cmp	r6, r3
 8015dda:	4604      	mov	r4, r0
 8015ddc:	460d      	mov	r5, r1
 8015dde:	da12      	bge.n	8015e06 <scalbn+0x56>
 8015de0:	a327      	add	r3, pc, #156	; (adr r3, 8015e80 <scalbn+0xd0>)
 8015de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de6:	f7ea fb91 	bl	800050c <__aeabi_dmul>
 8015dea:	e009      	b.n	8015e00 <scalbn+0x50>
 8015dec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015df0:	428a      	cmp	r2, r1
 8015df2:	d10c      	bne.n	8015e0e <scalbn+0x5e>
 8015df4:	ee10 2a10 	vmov	r2, s0
 8015df8:	4620      	mov	r0, r4
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f7ea f9d0 	bl	80001a0 <__adddf3>
 8015e00:	4604      	mov	r4, r0
 8015e02:	460d      	mov	r5, r1
 8015e04:	e01c      	b.n	8015e40 <scalbn+0x90>
 8015e06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	3a36      	subs	r2, #54	; 0x36
 8015e0e:	4432      	add	r2, r6
 8015e10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015e14:	428a      	cmp	r2, r1
 8015e16:	dd0b      	ble.n	8015e30 <scalbn+0x80>
 8015e18:	ec45 4b11 	vmov	d1, r4, r5
 8015e1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015e88 <scalbn+0xd8>
 8015e20:	f000 f83c 	bl	8015e9c <copysign>
 8015e24:	a318      	add	r3, pc, #96	; (adr r3, 8015e88 <scalbn+0xd8>)
 8015e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2a:	ec51 0b10 	vmov	r0, r1, d0
 8015e2e:	e7da      	b.n	8015de6 <scalbn+0x36>
 8015e30:	2a00      	cmp	r2, #0
 8015e32:	dd08      	ble.n	8015e46 <scalbn+0x96>
 8015e34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015e38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015e3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015e40:	ec45 4b10 	vmov	d0, r4, r5
 8015e44:	bd70      	pop	{r4, r5, r6, pc}
 8015e46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015e4a:	da0d      	bge.n	8015e68 <scalbn+0xb8>
 8015e4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015e50:	429e      	cmp	r6, r3
 8015e52:	ec45 4b11 	vmov	d1, r4, r5
 8015e56:	dce1      	bgt.n	8015e1c <scalbn+0x6c>
 8015e58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015e80 <scalbn+0xd0>
 8015e5c:	f000 f81e 	bl	8015e9c <copysign>
 8015e60:	a307      	add	r3, pc, #28	; (adr r3, 8015e80 <scalbn+0xd0>)
 8015e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e66:	e7e0      	b.n	8015e2a <scalbn+0x7a>
 8015e68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015e6c:	3236      	adds	r2, #54	; 0x36
 8015e6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015e72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015e76:	4620      	mov	r0, r4
 8015e78:	4629      	mov	r1, r5
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	4b06      	ldr	r3, [pc, #24]	; (8015e98 <scalbn+0xe8>)
 8015e7e:	e7b2      	b.n	8015de6 <scalbn+0x36>
 8015e80:	c2f8f359 	.word	0xc2f8f359
 8015e84:	01a56e1f 	.word	0x01a56e1f
 8015e88:	8800759c 	.word	0x8800759c
 8015e8c:	7e37e43c 	.word	0x7e37e43c
 8015e90:	43500000 	.word	0x43500000
 8015e94:	ffff3cb0 	.word	0xffff3cb0
 8015e98:	3c900000 	.word	0x3c900000

08015e9c <copysign>:
 8015e9c:	ec51 0b10 	vmov	r0, r1, d0
 8015ea0:	ee11 0a90 	vmov	r0, s3
 8015ea4:	ee10 2a10 	vmov	r2, s0
 8015ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015eb0:	ea41 0300 	orr.w	r3, r1, r0
 8015eb4:	ec43 2b10 	vmov	d0, r2, r3
 8015eb8:	4770      	bx	lr
	...

08015ebc <_init>:
 8015ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ebe:	bf00      	nop
 8015ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ec2:	bc08      	pop	{r3}
 8015ec4:	469e      	mov	lr, r3
 8015ec6:	4770      	bx	lr

08015ec8 <_fini>:
 8015ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eca:	bf00      	nop
 8015ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ece:	bc08      	pop	{r3}
 8015ed0:	469e      	mov	lr, r3
 8015ed2:	4770      	bx	lr
