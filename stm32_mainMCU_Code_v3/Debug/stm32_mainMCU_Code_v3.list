
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd30  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c248  0800c248  0001c248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c24c  0800c24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  20000004  0800c250  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000068  0800c2b4  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800c34d  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046d4  20000118  0800c35e  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200047ec  0800c35e  000247ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000a96  200300c4  200300c4  00030000  2**2
                  ALLOC
 15 .debug_info   0005b091  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00009476  00000000  00000000  0007b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00021033  00000000  00000000  0008464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002b90  00000000  00000000  000a5680  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002e20  00000000  00000000  000a8210  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0002011f  00000000  00000000  000ab030  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00015d5a  00000000  00000000  000cb14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  000e0ea9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000075f0  00000000  00000000  000e0f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0800be58 	.word	0x0800be58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0800be58 	.word	0x0800be58

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295
 80001a8:	f000 b972 	b.w	8000490 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f806 	bl	80001c4 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__udivmoddi4>:
 80001c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c8:	9e08      	ldr	r6, [sp, #32]
 80001ca:	4604      	mov	r4, r0
 80001cc:	4688      	mov	r8, r1
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d14b      	bne.n	800026a <__udivmoddi4+0xa6>
 80001d2:	428a      	cmp	r2, r1
 80001d4:	4615      	mov	r5, r2
 80001d6:	d967      	bls.n	80002a8 <__udivmoddi4+0xe4>
 80001d8:	fab2 f282 	clz	r2, r2
 80001dc:	b14a      	cbz	r2, 80001f2 <__udivmoddi4+0x2e>
 80001de:	f1c2 0720 	rsb	r7, r2, #32
 80001e2:	fa01 f302 	lsl.w	r3, r1, r2
 80001e6:	fa20 f707 	lsr.w	r7, r0, r7
 80001ea:	4095      	lsls	r5, r2
 80001ec:	ea47 0803 	orr.w	r8, r7, r3
 80001f0:	4094      	lsls	r4, r2
 80001f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	fbb8 f7fe 	udiv	r7, r8, lr
 80001fc:	fa1f fc85 	uxth.w	ip, r5
 8000200:	fb0e 8817 	mls	r8, lr, r7, r8
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	fb07 f10c 	mul.w	r1, r7, ip
 800020c:	4299      	cmp	r1, r3
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x60>
 8000210:	18eb      	adds	r3, r5, r3
 8000212:	f107 30ff 	add.w	r0, r7, #4294967295
 8000216:	f080 811b 	bcs.w	8000450 <__udivmoddi4+0x28c>
 800021a:	4299      	cmp	r1, r3
 800021c:	f240 8118 	bls.w	8000450 <__udivmoddi4+0x28c>
 8000220:	3f02      	subs	r7, #2
 8000222:	442b      	add	r3, r5
 8000224:	1a5b      	subs	r3, r3, r1
 8000226:	b2a4      	uxth	r4, r4
 8000228:	fbb3 f0fe 	udiv	r0, r3, lr
 800022c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000234:	fb00 fc0c 	mul.w	ip, r0, ip
 8000238:	45a4      	cmp	ip, r4
 800023a:	d909      	bls.n	8000250 <__udivmoddi4+0x8c>
 800023c:	192c      	adds	r4, r5, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8107 	bcs.w	8000454 <__udivmoddi4+0x290>
 8000246:	45a4      	cmp	ip, r4
 8000248:	f240 8104 	bls.w	8000454 <__udivmoddi4+0x290>
 800024c:	3802      	subs	r0, #2
 800024e:	442c      	add	r4, r5
 8000250:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000254:	eba4 040c 	sub.w	r4, r4, ip
 8000258:	2700      	movs	r7, #0
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa0>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	428b      	cmp	r3, r1
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0xbe>
 800026e:	2e00      	cmp	r6, #0
 8000270:	f000 80eb 	beq.w	800044a <__udivmoddi4+0x286>
 8000274:	2700      	movs	r7, #0
 8000276:	e9c6 0100 	strd	r0, r1, [r6]
 800027a:	4638      	mov	r0, r7
 800027c:	4639      	mov	r1, r7
 800027e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000282:	fab3 f783 	clz	r7, r3
 8000286:	2f00      	cmp	r7, #0
 8000288:	d147      	bne.n	800031a <__udivmoddi4+0x156>
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd0>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fa 	bhi.w	8000488 <__udivmoddi4+0x2c4>
 8000294:	1a84      	subs	r4, r0, r2
 8000296:	eb61 0303 	sbc.w	r3, r1, r3
 800029a:	2001      	movs	r0, #1
 800029c:	4698      	mov	r8, r3
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d0e0      	beq.n	8000264 <__udivmoddi4+0xa0>
 80002a2:	e9c6 4800 	strd	r4, r8, [r6]
 80002a6:	e7dd      	b.n	8000264 <__udivmoddi4+0xa0>
 80002a8:	b902      	cbnz	r2, 80002ac <__udivmoddi4+0xe8>
 80002aa:	deff      	udf	#255	; 0xff
 80002ac:	fab2 f282 	clz	r2, r2
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	f040 808f 	bne.w	80003d4 <__udivmoddi4+0x210>
 80002b6:	1b49      	subs	r1, r1, r5
 80002b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002bc:	fa1f f885 	uxth.w	r8, r5
 80002c0:	2701      	movs	r7, #1
 80002c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fb0e 111c 	mls	r1, lr, ip, r1
 80002cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d0:	fb08 f10c 	mul.w	r1, r8, ip
 80002d4:	4299      	cmp	r1, r3
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x124>
 80002d8:	18eb      	adds	r3, r5, r3
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x122>
 80002e0:	4299      	cmp	r1, r3
 80002e2:	f200 80cd 	bhi.w	8000480 <__udivmoddi4+0x2bc>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1a59      	subs	r1, r3, r1
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x14c>
 8000300:	192c      	adds	r4, r5, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x14a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80b6 	bhi.w	800047a <__udivmoddi4+0x2b6>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e79f      	b.n	800025a <__udivmoddi4+0x96>
 800031a:	f1c7 0c20 	rsb	ip, r7, #32
 800031e:	40bb      	lsls	r3, r7
 8000320:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000324:	ea4e 0e03 	orr.w	lr, lr, r3
 8000328:	fa01 f407 	lsl.w	r4, r1, r7
 800032c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000330:	fa21 f30c 	lsr.w	r3, r1, ip
 8000334:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000338:	4325      	orrs	r5, r4
 800033a:	fbb3 f9f8 	udiv	r9, r3, r8
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	fb08 3319 	mls	r3, r8, r9, r3
 8000344:	fa1f fa8e 	uxth.w	sl, lr
 8000348:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800034c:	fb09 f40a 	mul.w	r4, r9, sl
 8000350:	429c      	cmp	r4, r3
 8000352:	fa02 f207 	lsl.w	r2, r2, r7
 8000356:	fa00 f107 	lsl.w	r1, r0, r7
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b0>
 800035c:	eb1e 0303 	adds.w	r3, lr, r3
 8000360:	f109 30ff 	add.w	r0, r9, #4294967295
 8000364:	f080 8087 	bcs.w	8000476 <__udivmoddi4+0x2b2>
 8000368:	429c      	cmp	r4, r3
 800036a:	f240 8084 	bls.w	8000476 <__udivmoddi4+0x2b2>
 800036e:	f1a9 0902 	sub.w	r9, r9, #2
 8000372:	4473      	add	r3, lr
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	b2ad      	uxth	r5, r5
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000384:	fb00 fa0a 	mul.w	sl, r0, sl
 8000388:	45a2      	cmp	sl, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1da>
 800038c:	eb1e 0404 	adds.w	r4, lr, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	d26b      	bcs.n	800046e <__udivmoddi4+0x2aa>
 8000396:	45a2      	cmp	sl, r4
 8000398:	d969      	bls.n	800046e <__udivmoddi4+0x2aa>
 800039a:	3802      	subs	r0, #2
 800039c:	4474      	add	r4, lr
 800039e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003a2:	fba0 8902 	umull	r8, r9, r0, r2
 80003a6:	eba4 040a 	sub.w	r4, r4, sl
 80003aa:	454c      	cmp	r4, r9
 80003ac:	46c2      	mov	sl, r8
 80003ae:	464b      	mov	r3, r9
 80003b0:	d354      	bcc.n	800045c <__udivmoddi4+0x298>
 80003b2:	d051      	beq.n	8000458 <__udivmoddi4+0x294>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2c8>
 80003b8:	ebb1 050a 	subs.w	r5, r1, sl
 80003bc:	eb64 0403 	sbc.w	r4, r4, r3
 80003c0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c4:	40fd      	lsrs	r5, r7
 80003c6:	40fc      	lsrs	r4, r7
 80003c8:	ea4c 0505 	orr.w	r5, ip, r5
 80003cc:	e9c6 5400 	strd	r5, r4, [r6]
 80003d0:	2700      	movs	r7, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa0>
 80003d4:	f1c2 0320 	rsb	r3, r2, #32
 80003d8:	fa20 f703 	lsr.w	r7, r0, r3
 80003dc:	4095      	lsls	r5, r2
 80003de:	fa01 f002 	lsl.w	r0, r1, r2
 80003e2:	fa21 f303 	lsr.w	r3, r1, r3
 80003e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ea:	4338      	orrs	r0, r7
 80003ec:	0c01      	lsrs	r1, r0, #16
 80003ee:	fbb3 f7fe 	udiv	r7, r3, lr
 80003f2:	fa1f f885 	uxth.w	r8, r5
 80003f6:	fb0e 3317 	mls	r3, lr, r7, r3
 80003fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fe:	fb07 f308 	mul.w	r3, r7, r8
 8000402:	428b      	cmp	r3, r1
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x256>
 800040a:	1869      	adds	r1, r5, r1
 800040c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000410:	d22f      	bcs.n	8000472 <__udivmoddi4+0x2ae>
 8000412:	428b      	cmp	r3, r1
 8000414:	d92d      	bls.n	8000472 <__udivmoddi4+0x2ae>
 8000416:	3f02      	subs	r7, #2
 8000418:	4429      	add	r1, r5
 800041a:	1acb      	subs	r3, r1, r3
 800041c:	b281      	uxth	r1, r0
 800041e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000422:	fb0e 3310 	mls	r3, lr, r0, r3
 8000426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042a:	fb00 f308 	mul.w	r3, r0, r8
 800042e:	428b      	cmp	r3, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x27e>
 8000432:	1869      	adds	r1, r5, r1
 8000434:	f100 3cff 	add.w	ip, r0, #4294967295
 8000438:	d217      	bcs.n	800046a <__udivmoddi4+0x2a6>
 800043a:	428b      	cmp	r3, r1
 800043c:	d915      	bls.n	800046a <__udivmoddi4+0x2a6>
 800043e:	3802      	subs	r0, #2
 8000440:	4429      	add	r1, r5
 8000442:	1ac9      	subs	r1, r1, r3
 8000444:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000448:	e73b      	b.n	80002c2 <__udivmoddi4+0xfe>
 800044a:	4637      	mov	r7, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e709      	b.n	8000264 <__udivmoddi4+0xa0>
 8000450:	4607      	mov	r7, r0
 8000452:	e6e7      	b.n	8000224 <__udivmoddi4+0x60>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fb      	b.n	8000250 <__udivmoddi4+0x8c>
 8000458:	4541      	cmp	r1, r8
 800045a:	d2ab      	bcs.n	80003b4 <__udivmoddi4+0x1f0>
 800045c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000460:	eb69 020e 	sbc.w	r2, r9, lr
 8000464:	3801      	subs	r0, #1
 8000466:	4613      	mov	r3, r2
 8000468:	e7a4      	b.n	80003b4 <__udivmoddi4+0x1f0>
 800046a:	4660      	mov	r0, ip
 800046c:	e7e9      	b.n	8000442 <__udivmoddi4+0x27e>
 800046e:	4618      	mov	r0, r3
 8000470:	e795      	b.n	800039e <__udivmoddi4+0x1da>
 8000472:	4667      	mov	r7, ip
 8000474:	e7d1      	b.n	800041a <__udivmoddi4+0x256>
 8000476:	4681      	mov	r9, r0
 8000478:	e77c      	b.n	8000374 <__udivmoddi4+0x1b0>
 800047a:	3802      	subs	r0, #2
 800047c:	442c      	add	r4, r5
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0x14c>
 8000480:	f1ac 0c02 	sub.w	ip, ip, #2
 8000484:	442b      	add	r3, r5
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x124>
 8000488:	4638      	mov	r0, r7
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xda>
 800048c:	4637      	mov	r7, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa0>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000494:	b500      	push	{lr}
 8000496:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000498:	2300      	movs	r3, #0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	9302      	str	r3, [sp, #8]
 80004a0:	9303      	str	r3, [sp, #12]
 80004a2:	9304      	str	r3, [sp, #16]
 80004a4:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80004a6:	481a      	ldr	r0, [pc, #104]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <MX_ADC1_Init+0x80>)
 80004aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004ac:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80004b0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004b2:	2210      	movs	r2, #16
 80004b4:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b8:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ba:	2204      	movs	r2, #4
 80004bc:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004be:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004c0:	2201      	movs	r2, #1
 80004c2:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004c4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ca:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004ce:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d8:	f001 fe40 	bl	800215c <HAL_ADC_Init>
 80004dc:	b990      	cbnz	r0, 8000504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_ADC1_Init+0x84>)
 80004e0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e2:	2306      	movs	r3, #6
 80004e4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004e6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e8:	237f      	movs	r3, #127	; 0x7f
 80004ea:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ec:	2304      	movs	r3, #4
 80004ee:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f4:	4669      	mov	r1, sp
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <MX_ADC1_Init+0x7c>)
 80004f8:	f001 ff78 	bl	80023ec <HAL_ADC_ConfigChannel>
 80004fc:	b928      	cbnz	r0, 800050a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
  }

}
 80004fe:	b007      	add	sp, #28
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000504:	f001 fa52 	bl	80019ac <Error_Handler>
 8000508:	e7e9      	b.n	80004de <MX_ADC1_Init+0x4a>
    Error_Handler();
 800050a:	f001 fa4f 	bl	80019ac <Error_Handler>
}
 800050e:	e7f6      	b.n	80004fe <MX_ADC1_Init+0x6a>
 8000510:	20004174 	.word	0x20004174
 8000514:	50040000 	.word	0x50040000
 8000518:	14f00020 	.word	0x14f00020

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b510      	push	{r4, lr}
 800051e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	9303      	str	r3, [sp, #12]
 8000524:	9304      	str	r3, [sp, #16]
 8000526:	9305      	str	r3, [sp, #20]
 8000528:	9306      	str	r3, [sp, #24]
 800052a:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800052c:	6802      	ldr	r2, [r0, #0]
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_ADC_MspInit+0x8c>)
 8000530:	429a      	cmp	r2, r3
 8000532:	d001      	beq.n	8000538 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000534:	b008      	add	sp, #32
 8000536:	bd10      	pop	{r4, pc}
 8000538:	4604      	mov	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800053a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000544:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800054c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800054e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000552:	f042 0201 	orr.w	r2, r2, #1
 8000556:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000560:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000562:	2301      	movs	r3, #1
 8000564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000566:	2303      	movs	r3, #3
 8000568:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	a903      	add	r1, sp, #12
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f002 fd82 	bl	8003078 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <HAL_ADC_MspInit+0x90>)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000578:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800057a:	2305      	movs	r3, #5
 800057c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057e:	2300      	movs	r3, #0
 8000580:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000582:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000588:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800058a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800058c:	2220      	movs	r2, #32
 800058e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000590:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000592:	f002 fbe3 	bl	8002d5c <HAL_DMA_Init>
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_ADC_MspInit+0x90>)
 800059a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800059c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800059e:	e7c9      	b.n	8000534 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80005a0:	f001 fa04 	bl	80019ac <Error_Handler>
 80005a4:	e7f8      	b.n	8000598 <HAL_ADC_MspInit+0x7c>
 80005a6:	bf00      	nop
 80005a8:	50040000 	.word	0x50040000
 80005ac:	200041d8 	.word	0x200041d8
 80005b0:	40020008 	.word	0x40020008

080005b4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80005b4:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005ba:	6893      	ldr	r3, [r2, #8]
 80005bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c0:	6093      	str	r3, [r2, #8]
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80005c2:	f00b fbf1 	bl	800bda8 <UTIL_LPM_Init>
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
}
 80005c6:	bd08      	pop	{r3, pc}

080005c8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b088      	sub	sp, #32
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005cc:	f00a fcd2 	bl	800af74 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 80005d0:	2000      	movs	r0, #0
 80005d2:	f007 f8e5 	bl	80077a0 <osMutexNew>
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <appe_Tl_Init+0x64>)
 80005d8:	6018      	str	r0, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80005da:	2200      	movs	r2, #0
 80005dc:	4611      	mov	r1, r2
 80005de:	2001      	movs	r0, #1
 80005e0:	f007 f9b6 	bl	8007950 <osSemaphoreNew>
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <appe_Tl_Init+0x68>)
 80005e6:	6018      	str	r0, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL,&ShciUserEvtProcess_attr);
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <appe_Tl_Init+0x6c>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <appe_Tl_Init+0x70>)
 80005ee:	f006 ff55 	bl	800749c <osThreadNew>
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <appe_Tl_Init+0x74>)
 80005f4:	6018      	str	r0, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005f6:	4c12      	ldr	r4, [pc, #72]	; (8000640 <appe_Tl_Init+0x78>)
 80005f8:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <appe_Tl_Init+0x7c>)
 80005fc:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005fe:	4669      	mov	r1, sp
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <appe_Tl_Init+0x80>)
 8000602:	f00a fb33 	bl	800ac6c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800060a:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800060e:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000610:	f504 7406 	add.w	r4, r4, #536	; 0x218
 8000614:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000616:	f240 533c 	movw	r3, #1340	; 0x53c
 800061a:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 800061c:	a802      	add	r0, sp, #8
 800061e:	f00a fd95 	bl	800b14c <TL_MM_Init>

  TL_Enable();
 8000622:	f00a fca3 	bl	800af6c <TL_Enable>

  return;
}
 8000626:	b008      	add	sp, #32
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	20004238 	.word	0x20004238
 8000630:	20004250 	.word	0x20004250
 8000634:	0800bf10 	.word	0x0800bf10
 8000638:	080006ed 	.word	0x080006ed
 800063c:	20004240 	.word	0x20004240
 8000640:	200300c4 	.word	0x200300c4
 8000644:	080006c5 	.word	0x080006c5
 8000648:	0800069d 	.word	0x0800069d

0800064c <APPE_SysEvtReadyProcessing>:
  }
  return;
}

static void APPE_SysEvtReadyProcessing( void )
{
 800064c:	b508      	push	{r3, lr}
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800064e:	f00a fdab 	bl	800b1a8 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000652:	f00b f9c7 	bl	800b9e4 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00b fbaf 	bl	800bdbc <UTIL_LPM_SetOffMode>
  return;
}
 800065e:	bd08      	pop	{r3, pc}

08000660 <APPE_SysEvtError>:
{
 8000660:	b508      	push	{r3, lr}
  switch(ErrorCode)
 8000662:	287d      	cmp	r0, #125	; 0x7d
 8000664:	d008      	beq.n	8000678 <APPE_SysEvtError+0x18>
 8000666:	287e      	cmp	r0, #126	; 0x7e
 8000668:	d00c      	beq.n	8000684 <APPE_SysEvtError+0x24>
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800066a:	4603      	mov	r3, r0
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <APPE_SysEvtError+0x30>)
 800066e:	2101      	movs	r1, #1
 8000670:	2000      	movs	r0, #0
 8000672:	f001 fb63 	bl	8001d3c <logApplication>
  return;
 8000676:	e004      	b.n	8000682 <APPE_SysEvtError+0x22>
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <APPE_SysEvtError+0x34>)
 800067a:	2101      	movs	r1, #1
 800067c:	2000      	movs	r0, #0
 800067e:	f001 fb5d 	bl	8001d3c <logApplication>
}
 8000682:	bd08      	pop	{r3, pc}
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <APPE_SysEvtError+0x38>)
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f001 fb57 	bl	8001d3c <logApplication>
       break;
 800068e:	e7f8      	b.n	8000682 <APPE_SysEvtError+0x22>
 8000690:	0800bef0 	.word	0x0800bef0
 8000694:	0800beac 	.word	0x0800beac
 8000698:	0800bed0 	.word	0x0800bed0

0800069c <APPE_SysUserEvtRx>:
{
 800069c:	b508      	push	{r3, lr}
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800069e:	6842      	ldr	r2, [r0, #4]
  switch(p_sys_event->subevtcode)
 80006a0:	f8b2 300b 	ldrh.w	r3, [r2, #11]
 80006a4:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80006a8:	d004      	beq.n	80006b4 <APPE_SysUserEvtRx+0x18>
 80006aa:	f249 2101 	movw	r1, #37377	; 0x9201
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d003      	beq.n	80006ba <APPE_SysUserEvtRx+0x1e>
}
 80006b2:	bd08      	pop	{r3, pc}
         APPE_SysEvtReadyProcessing();
 80006b4:	f7ff ffca 	bl	800064c <APPE_SysEvtReadyProcessing>
         break;
 80006b8:	e7fb      	b.n	80006b2 <APPE_SysUserEvtRx+0x16>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80006ba:	7b50      	ldrb	r0, [r2, #13]
 80006bc:	f7ff ffd0 	bl	8000660 <APPE_SysEvtError>
  return;
 80006c0:	e7f7      	b.n	80006b2 <APPE_SysUserEvtRx+0x16>
	...

080006c4 <APPE_SysStatusNot>:
{
 80006c4:	b508      	push	{r3, lr}
  switch (status)
 80006c6:	b110      	cbz	r0, 80006ce <APPE_SysStatusNot+0xa>
 80006c8:	2801      	cmp	r0, #1
 80006ca:	d007      	beq.n	80006dc <APPE_SysStatusNot+0x18>
}
 80006cc:	bd08      	pop	{r3, pc}
      osMutexAcquire( MtxShciId, osWaitForever );
 80006ce:	f04f 31ff 	mov.w	r1, #4294967295
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <APPE_SysStatusNot+0x24>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f007 f8c1 	bl	800785c <osMutexAcquire>
      break;
 80006da:	e7f7      	b.n	80006cc <APPE_SysStatusNot+0x8>
      osMutexRelease( MtxShciId );
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <APPE_SysStatusNot+0x24>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f007 f8fc 	bl	80078dc <osMutexRelease>
  return;
 80006e4:	e7f2      	b.n	80006cc <APPE_SysStatusNot+0x8>
 80006e6:	bf00      	nop
 80006e8:	20004238 	.word	0x20004238

080006ec <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80006ec:	b508      	push	{r3, lr}
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295
 80006f2:	2100      	movs	r1, #0
 80006f4:	2001      	movs	r0, #1
 80006f6:	f006 ffcb 	bl	8007690 <osThreadFlagsWait>
     shci_user_evt_proc();
 80006fa:	f00a fac9 	bl	800ac90 <shci_user_evt_proc>
 80006fe:	e7f6      	b.n	80006ee <ShciUserEvtProcess+0x2>

08000700 <APPE_Init>:
{
 8000700:	b508      	push	{r3, lr}
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000702:	f7ff ff57 	bl	80005b4 <SystemPower_Config>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000706:	4903      	ldr	r1, [pc, #12]	; (8000714 <APPE_Init+0x14>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fcbd 	bl	8001088 <HW_TS_Init>
  appe_Tl_Init();	/* Initialize all transport layers */
 800070e:	f7ff ff5b 	bl	80005c8 <appe_Tl_Init>
}
 8000712:	bd08      	pop	{r3, pc}
 8000714:	200045b0 	.word	0x200045b0

08000718 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000718:	b508      	push	{r3, lr}
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 800071a:	2101      	movs	r1, #1
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <shci_notify_asynch_evt+0x10>)
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f006 ff30 	bl	8007584 <osThreadFlagsSet>
  return;
}
 8000724:	bd08      	pop	{r3, pc}
 8000726:	bf00      	nop
 8000728:	20004240 	.word	0x20004240

0800072c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800072c:	b508      	push	{r3, lr}
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800072e:	4b02      	ldr	r3, [pc, #8]	; (8000738 <shci_cmd_resp_release+0xc>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f007 f9c1 	bl	8007ab8 <osSemaphoreRelease>
  return;
}
 8000736:	bd08      	pop	{r3, pc}
 8000738:	20004250 	.word	0x20004250

0800073c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800073c:	b508      	push	{r3, lr}
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800073e:	f04f 31ff 	mov.w	r1, #4294967295
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <shci_cmd_resp_wait+0x10>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	f007 f973 	bl	8007a30 <osSemaphoreAcquire>
  return;
}
 800074a:	bd08      	pop	{r3, pc}
 800074c:	20004250 	.word	0x20004250

08000750 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000750:	b508      	push	{r3, lr}
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000752:	f00a fd1b 	bl	800b18c <TL_MM_EvtDone>
}
 8000756:	bd08      	pop	{r3, pc}

08000758 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000758:	b508      	push	{r3, lr}
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) temp, sizeof(temp));
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f006 fffe 	bl	800775c <osDelay>
 8000760:	e7fb      	b.n	800075a <StartDefaultTask+0x2>
	...

08000764 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	b0af      	sub	sp, #188	; 0xbc
osKernelInitialize();
 8000768:	f006 fe50 	bl	800740c <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 800076c:	2520      	movs	r5, #32
 800076e:	462a      	mov	r2, r5
 8000770:	2100      	movs	r1, #0
 8000772:	a826      	add	r0, sp, #152	; 0x98
 8000774:	f00b fb67 	bl	800be46 <memset>
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_FREERTOS_Init+0xf4>)
 800077a:	9325      	str	r3, [sp, #148]	; 0x94
 800077c:	2780      	movs	r7, #128	; 0x80
 800077e:	972a      	str	r7, [sp, #168]	; 0xa8
 8000780:	2418      	movs	r4, #24
 8000782:	942b      	str	r4, [sp, #172]	; 0xac
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000784:	aa25      	add	r2, sp, #148	; 0x94
 8000786:	2100      	movs	r1, #0
 8000788:	4834      	ldr	r0, [pc, #208]	; (800085c <MX_FREERTOS_Init+0xf8>)
 800078a:	f006 fe87 	bl	800749c <osThreadNew>
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_FREERTOS_Init+0xfc>)
 8000790:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t threadFrontLightsTask_attributes = {
 8000792:	462a      	mov	r2, r5
 8000794:	2100      	movs	r1, #0
 8000796:	a81d      	add	r0, sp, #116	; 0x74
 8000798:	f00b fb55 	bl	800be46 <memset>
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_FREERTOS_Init+0x100>)
 800079e:	931c      	str	r3, [sp, #112]	; 0x70
 80007a0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80007a4:	9621      	str	r6, [sp, #132]	; 0x84
 80007a6:	9422      	str	r4, [sp, #136]	; 0x88
   threadFrontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &threadFrontLightsTask_attributes);
 80007a8:	aa1c      	add	r2, sp, #112	; 0x70
 80007aa:	2100      	movs	r1, #0
 80007ac:	482e      	ldr	r0, [pc, #184]	; (8000868 <MX_FREERTOS_Init+0x104>)
 80007ae:	f006 fe75 	bl	800749c <osThreadNew>
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_FREERTOS_Init+0x108>)
 80007b4:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t blinkTask_attributes = {
 80007b6:	462a      	mov	r2, r5
 80007b8:	2100      	movs	r1, #0
 80007ba:	a814      	add	r0, sp, #80	; 0x50
 80007bc:	f00b fb43 	bl	800be46 <memset>
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <MX_FREERTOS_Init+0x10c>)
 80007c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80007c4:	9618      	str	r6, [sp, #96]	; 0x60
 80007c6:	9419      	str	r4, [sp, #100]	; 0x64
   blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80007c8:	aa13      	add	r2, sp, #76	; 0x4c
 80007ca:	2100      	movs	r1, #0
 80007cc:	4829      	ldr	r0, [pc, #164]	; (8000874 <MX_FREERTOS_Init+0x110>)
 80007ce:	f006 fe65 	bl	800749c <osThreadNew>
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_FREERTOS_Init+0x114>)
 80007d4:	6018      	str	r0, [r3, #0]
   lightsSimpleQueueHandle = osMessageQueueNew (MAX_LIGHT_SIMPLE_QUEUE_SIZE, sizeof(lightsSimpleMessage), NULL);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2104      	movs	r1, #4
 80007da:	2005      	movs	r0, #5
 80007dc:	f007 f9aa 	bl	8007b34 <osMessageQueueNew>
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_FREERTOS_Init+0x118>)
 80007e2:	6018      	str	r0, [r3, #0]
   blinkMsgQueueHandle = osMessageQueueNew (10, sizeof(struct blinkData), NULL);
 80007e4:	2200      	movs	r2, #0
 80007e6:	216c      	movs	r1, #108	; 0x6c
 80007e8:	200a      	movs	r0, #10
 80007ea:	f007 f9a3 	bl	8007b34 <osMessageQueueNew>
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_FREERTOS_Init+0x11c>)
 80007f0:	6018      	str	r0, [r3, #0]
   togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	2002      	movs	r0, #2
 80007f8:	f007 f99c 	bl	8007b34 <osMessageQueueNew>
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_FREERTOS_Init+0x120>)
 80007fe:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t masterThreadTask_attributes = {
 8000800:	462a      	mov	r2, r5
 8000802:	2100      	movs	r1, #0
 8000804:	a80b      	add	r0, sp, #44	; 0x2c
 8000806:	f00b fb1e 	bl	800be46 <memset>
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_FREERTOS_Init+0x124>)
 800080c:	930a      	str	r3, [sp, #40]	; 0x28
 800080e:	960f      	str	r6, [sp, #60]	; 0x3c
 8000810:	9410      	str	r4, [sp, #64]	; 0x40
    masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8000812:	aa0a      	add	r2, sp, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	481d      	ldr	r0, [pc, #116]	; (800088c <MX_FREERTOS_Init+0x128>)
 8000818:	f006 fe40 	bl	800749c <osThreadNew>
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_FREERTOS_Init+0x12c>)
 800081e:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t interProcessorTask_attributes = {
 8000820:	462a      	mov	r2, r5
 8000822:	2100      	movs	r1, #0
 8000824:	a802      	add	r0, sp, #8
 8000826:	f00b fb0e 	bl	800be46 <memset>
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_FREERTOS_Init+0x130>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	9706      	str	r7, [sp, #24]
 8000830:	9407      	str	r4, [sp, #28]
    interProcessorTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcessorTask_attributes);
 8000832:	aa01      	add	r2, sp, #4
 8000834:	2100      	movs	r1, #0
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_FREERTOS_Init+0x134>)
 8000838:	f006 fe30 	bl	800749c <osThreadNew>
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_FREERTOS_Init+0x138>)
 800083e:	6018      	str	r0, [r3, #0]
    interProcessorMsgQueueHandle = osMessageQueueNew (15, sizeof(struct parsedSecondaryProcessorPacket), NULL);
 8000840:	2200      	movs	r2, #0
 8000842:	2150      	movs	r1, #80	; 0x50
 8000844:	200f      	movs	r0, #15
 8000846:	f007 f975 	bl	8007b34 <osMessageQueueNew>
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_FREERTOS_Init+0x13c>)
 800084c:	6018      	str	r0, [r3, #0]
   APPE_Init();
 800084e:	f7ff ff57 	bl	8000700 <APPE_Init>
}
 8000852:	b02f      	add	sp, #188	; 0xbc
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	bf00      	nop
 8000858:	0800bf4c 	.word	0x0800bf4c
 800085c:	08000759 	.word	0x08000759
 8000860:	20004334 	.word	0x20004334
 8000864:	0800bf58 	.word	0x0800bf58
 8000868:	080017e1 	.word	0x080017e1
 800086c:	2000433c 	.word	0x2000433c
 8000870:	0800bf70 	.word	0x0800bf70
 8000874:	080008a5 	.word	0x080008a5
 8000878:	2000423c 	.word	0x2000423c
 800087c:	20004338 	.word	0x20004338
 8000880:	20004330 	.word	0x20004330
 8000884:	20004320 	.word	0x20004320
 8000888:	0800bf7c 	.word	0x0800bf7c
 800088c:	08001ab9 	.word	0x08001ab9
 8000890:	20004324 	.word	0x20004324
 8000894:	0800bf90 	.word	0x0800bf90
 8000898:	08001505 	.word	0x08001505
 800089c:	20004258 	.word	0x20004258
 80008a0:	20004254 	.word	0x20004254

080008a4 <BlinkTask>:

#define BLINK_HALF_BUFFER_SIZE	1000
#define BLINK_PACKET_SIZE		100
#define BLINK_ITERATOR_COUNT 	BLINK_HALF_BUFFER_SIZE / BLINK_PACKET_SIZE

void BlinkTask(void){
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	ed2d 8b02 	vpush	{d8}
	uint32_t evt;

	uint32_t payload_ID = 0;
 80008aa:	2600      	movs	r6, #0
 80008ac:	e051      	b.n	8000952 <BlinkTask+0xae>

				if( (evt & 0x00000004U) == 0x00000004U){

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
						previousTick_ms = HAL_GetTick();
 80008ae:	f001 fc35 	bl	800211c <HAL_GetTick>
 80008b2:	ee07 0a90 	vmov	s15, r0
 80008b6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008ba:	e02a      	b.n	8000912 <BlinkTask+0x6e>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	4c31      	ldr	r4, [pc, #196]	; (8000984 <BlinkTask+0xe0>)
 80008c0:	461a      	mov	r2, r3
 80008c2:	4931      	ldr	r1, [pc, #196]	; (8000988 <BlinkTask+0xe4>)
 80008c4:	fb03 1105 	mla	r1, r3, r5, r1
 80008c8:	4620      	mov	r0, r4
 80008ca:	f00b fab1 	bl	800be30 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80008ce:	ee78 7a28 	vadd.f32	s15, s16, s17
 80008d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d6:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80008da:	66a6      	str	r6, [r4, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
						payload_ID++;
 80008e0:	3601      	adds	r6, #1

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 80008e2:	2300      	movs	r3, #0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4621      	mov	r1, r4
 80008e8:	4828      	ldr	r0, [pc, #160]	; (800098c <BlinkTask+0xe8>)
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	f007 f982 	bl	8007bf4 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80008f0:	3501      	adds	r5, #1
 80008f2:	2d09      	cmp	r5, #9
 80008f4:	d9e2      	bls.n	80008bc <BlinkTask+0x18>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80008f6:	f04f 32ff 	mov.w	r2, #4294967295
 80008fa:	2100      	movs	r1, #0
 80008fc:	2006      	movs	r0, #6
 80008fe:	f006 fec7 	bl	8007690 <osThreadFlagsWait>
				if( (evt & 0x00000004U) == 0x00000004U){
 8000902:	f010 0f04 	tst.w	r0, #4
 8000906:	d012      	beq.n	800092e <BlinkTask+0x8a>
					if(previousTick_ms == 0){
 8000908:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000910:	d0cd      	beq.n	80008ae <BlinkTask+0xa>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 8000912:	f001 fc03 	bl	800211c <HAL_GetTick>
 8000916:	ee07 0a90 	vmov	s15, r0
 800091a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8000922:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000926:	eec7 8a87 	vdiv.f32	s17, s15, s14
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 800092a:	2500      	movs	r5, #0
 800092c:	e7e1      	b.n	80008f2 <BlinkTask+0x4e>
					}
				}

				// stop timer and put thread in idle if signal was reset
				else if( (evt & 0x00000002U) == 0x00000002U){
 800092e:	f010 0f02 	tst.w	r0, #2
 8000932:	d0e0      	beq.n	80008f6 <BlinkTask+0x52>

					HAL_ADC_Stop_DMA(&hadc1);
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <BlinkTask+0xec>)
 8000936:	f002 f8de 	bl	8002af6 <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800093a:	4c16      	ldr	r4, [pc, #88]	; (8000994 <BlinkTask+0xf0>)
 800093c:	2104      	movs	r1, #4
 800093e:	4620      	mov	r0, r4
 8000940:	f005 fae6 	bl	8005f10 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8000944:	4620      	mov	r0, r4
 8000946:	f004 ffed 	bl	8005924 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <BlinkTask+0xe8>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	f007 f9f5 	bl	8007d3c <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000952:	f04f 32ff 	mov.w	r2, #4294967295
 8000956:	2100      	movs	r1, #0
 8000958:	2001      	movs	r0, #1
 800095a:	f006 fe99 	bl	8007690 <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 800095e:	2801      	cmp	r0, #1
 8000960:	d1f7      	bne.n	8000952 <BlinkTask+0xae>
			HAL_TIM_Base_Start(&htim2);
 8000962:	4c0c      	ldr	r4, [pc, #48]	; (8000994 <BlinkTask+0xf0>)
 8000964:	4620      	mov	r0, r4
 8000966:	f004 ffc5 	bl	80058f4 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800096a:	2104      	movs	r1, #4
 800096c:	4620      	mov	r0, r4
 800096e:	f005 faa5 	bl	8005ebc <HAL_TIM_PWM_Start>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8000972:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000976:	4904      	ldr	r1, [pc, #16]	; (8000988 <BlinkTask+0xe4>)
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <BlinkTask+0xec>)
 800097a:	f002 f813 	bl	80029a4 <HAL_ADC_Start_DMA>
 800097e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8000998 <BlinkTask+0xf4>
 8000982:	e7b8      	b.n	80008f6 <BlinkTask+0x52>
 8000984:	20000134 	.word	0x20000134
 8000988:	200001a0 	.word	0x200001a0
 800098c:	20004330 	.word	0x20004330
 8000990:	20004174 	.word	0x20004174
 8000994:	20004614 	.word	0x20004614
 8000998:	00000000 	.word	0x00000000

0800099c <HAL_ADC_ErrorCallback>:
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 800099c:	4a02      	ldr	r2, [pc, #8]	; (80009a8 <HAL_ADC_ErrorCallback+0xc>)
 800099e:	7813      	ldrb	r3, [r2, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	7013      	strb	r3, [r2, #0]
}
 80009a6:	4770      	bx	lr
 80009a8:	20000970 	.word	0x20000970

080009ac <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009ac:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_ADC_ConvCpltCallback+0x14>)
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_ADC_ConvCpltCallback+0x18>)
 80009b2:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80009b4:	2104      	movs	r1, #4
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	f006 fde3 	bl	8007584 <osThreadFlagsSet>

}
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	20004344 	.word	0x20004344
 80009c4:	20000588 	.word	0x20000588
 80009c8:	2000423c 	.word	0x2000423c

080009cc <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009cc:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer;
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80009d2:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80009d4:	2104      	movs	r1, #4
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	f006 fdd3 	bl	8007584 <osThreadFlagsSet>

}
 80009de:	bd08      	pop	{r3, pc}
 80009e0:	20004344 	.word	0x20004344
 80009e4:	200001a0 	.word	0x200001a0
 80009e8:	2000423c 	.word	0x2000423c

080009ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009ec:	b500      	push	{lr}
 80009ee:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009f6:	f042 0204 	orr.w	r2, r2, #4
 80009fa:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009fe:	f002 0204 	and.w	r2, r2, #4
 8000a02:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000a04:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a08:	f042 0201 	orr.w	r2, r2, #1
 8000a0c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000a16:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	200b      	movs	r0, #11
 8000a1e:	f002 f8bd 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a22:	200b      	movs	r0, #11
 8000a24:	f002 f8ee 	bl	8002c04 <HAL_NVIC_EnableIRQ>

}
 8000a28:	b003      	add	sp, #12
 8000a2a:	f85d fb04 	ldr.w	pc, [sp], #4

08000a2e <LpTimerCb>:
  /**
   * Nothing to be done
   */

  return;
}
 8000a2e:	4770      	bx	lr

08000a30 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8000a30:	b510      	push	{r4, lr}
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8000a32:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8000a36:	4298      	cmp	r0, r3
 8000a38:	d90f      	bls.n	8000a5a <LpTimerStart+0x2a>
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
  }
  else if(time_to_sleep <= 0x418937)
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <LpTimerStart+0x68>)
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d91c      	bls.n	8000a7a <LpTimerStart+0x4a>
      time_to_sleep = (~0); /* Max value */
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8000a40:	0981      	lsrs	r1, r0, #6
 8000a42:	4816      	ldr	r0, [pc, #88]	; (8000a9c <LpTimerStart+0x6c>)
 8000a44:	fba0 3101 	umull	r3, r1, r0, r1
 8000a48:	0949      	lsrs	r1, r1, #5
    if(time_to_sleep <= 0x10C6)
 8000a4a:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	d81f      	bhi.n	8000a92 <LpTimerStart+0x62>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <LpTimerStart+0x70>)
 8000a54:	fb03 f101 	mul.w	r1, r3, r1
 8000a58:	e007      	b.n	8000a6a <LpTimerStart+0x3a>
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8000a5a:	4911      	ldr	r1, [pc, #68]	; (8000aa0 <LpTimerStart+0x70>)
 8000a5c:	fb01 f100 	mul.w	r1, r1, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8000a60:	0989      	lsrs	r1, r1, #6
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <LpTimerStart+0x6c>)
 8000a64:	fba0 3101 	umull	r3, r1, r0, r1
 8000a68:	0949      	lsrs	r1, r1, #5
    {
      time_to_sleep = (~0); /* Max value */
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8000a6a:	4c0e      	ldr	r4, [pc, #56]	; (8000aa4 <LpTimerStart+0x74>)
 8000a6c:	7920      	ldrb	r0, [r4, #4]
 8000a6e:	f000 fc47 	bl	8001300 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8000a72:	f000 fc93 	bl	800139c <HW_TS_RTC_ReadLeftTicksToCount>
 8000a76:	6020      	str	r0, [r4, #0]

  return;
}
 8000a78:	bd10      	pop	{r4, pc}
    time_to_sleep = (time_to_sleep * 1000);
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fb03 f100 	mul.w	r1, r3, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8000a82:	0989      	lsrs	r1, r1, #6
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <LpTimerStart+0x6c>)
 8000a86:	fba0 2101 	umull	r2, r1, r0, r1
 8000a8a:	0949      	lsrs	r1, r1, #5
      time_to_sleep = (time_to_sleep * 1000);
 8000a8c:	fb03 f101 	mul.w	r1, r3, r1
 8000a90:	e7eb      	b.n	8000a6a <LpTimerStart+0x3a>
      time_to_sleep = (~0); /* Max value */
 8000a92:	f04f 31ff 	mov.w	r1, #4294967295
 8000a96:	e7e8      	b.n	8000a6a <LpTimerStart+0x3a>
 8000a98:	00418937 	.word	0x00418937
 8000a9c:	0113094d 	.word	0x0113094d
 8000aa0:	000f4240 	.word	0x000f4240
 8000aa4:	20000974 	.word	0x20000974

08000aa8 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8000aa8:	b538      	push	{r3, r4, r5, lr}
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8000aaa:	4d09      	ldr	r5, [pc, #36]	; (8000ad0 <LpGetElapsedTime+0x28>)
 8000aac:	682c      	ldr	r4, [r5, #0]
 8000aae:	f000 fc75 	bl	800139c <HW_TS_RTC_ReadLeftTicksToCount>
 8000ab2:	1a20      	subs	r0, r4, r0
  return_value = return_value / (1000 * 1000);
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <LpGetElapsedTime+0x2c>)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <LpGetElapsedTime+0x30>)
 8000aba:	fba0 0101 	umull	r0, r1, r0, r1
 8000abe:	f7ff fb69 	bl	8000194 <__aeabi_uldivmod>
 8000ac2:	4604      	mov	r4, r0
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8000ac4:	7928      	ldrb	r0, [r5, #4]
 8000ac6:	f000 fbb7 	bl	8001238 <HW_TS_Stop>

  return (uint32_t)return_value;
}
 8000aca:	4620      	mov	r0, r4
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000974 	.word	0x20000974
 8000ad4:	000f4240 	.word	0x000f4240
 8000ad8:	00077240 	.word	0x00077240

08000adc <LpTimerInit>:
{
 8000adc:	b508      	push	{r3, lr}
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <LpTimerInit+0x10>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4903      	ldr	r1, [pc, #12]	; (8000af0 <LpTimerInit+0x14>)
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	f000 fb75 	bl	80011d4 <HW_TS_Create>
}
 8000aea:	bd08      	pop	{r3, pc}
 8000aec:	08000a2f 	.word	0x08000a2f
 8000af0:	20000978 	.word	0x20000978

08000af4 <vPortSuppressTicksAndSleep>:
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	4604      	mov	r4, r0
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <vPortSuppressTicksAndSleep+0x68>)
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f023 0301 	bic.w	r3, r3, #1
 8000b00:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b02:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b08:	f3bf 8f6f 	isb	sy
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8000b0c:	f008 ff1a 	bl	8009944 <eTaskConfirmSleepModeStatus>
 8000b10:	b1a0      	cbz	r0, 8000b3c <vPortSuppressTicksAndSleep+0x48>
    if (xExpectedIdleTime != (~0))
 8000b12:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b16:	d118      	bne.n	8000b4a <vPortSuppressTicksAndSleep+0x56>
    if (xExpectedIdleTime != (~0))
 8000b18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b1c:	d119      	bne.n	8000b52 <vPortSuppressTicksAndSleep+0x5e>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <vPortSuppressTicksAndSleep+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <vPortSuppressTicksAndSleep+0x68>)
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <vPortSuppressTicksAndSleep+0x70>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	3204      	adds	r2, #4
 8000b36:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b38:	b662      	cpsie	i
}
 8000b3a:	bd10      	pop	{r4, pc}
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <vPortSuppressTicksAndSleep+0x68>)
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	b662      	cpsie	i
 8000b48:	e7f7      	b.n	8000b3a <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ff70 	bl	8000a30 <LpTimerStart>
 8000b50:	e7e2      	b.n	8000b18 <vPortSuppressTicksAndSleep+0x24>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8000b52:	f7ff ffa9 	bl	8000aa8 <LpGetElapsedTime>
      vTaskStepTick( ulCompleteTickPeriods );
 8000b56:	f008 fc5d 	bl	8009414 <vTaskStepTick>
 8000b5a:	e7e0      	b.n	8000b1e <vPortSuppressTicksAndSleep+0x2a>
 8000b5c:	e000e010 	.word	0xe000e010
 8000b60:	e000e018 	.word	0xe000e018
 8000b64:	2000097c 	.word	0x2000097c

08000b68 <vPortSetupTimerInterrupt>:
{
 8000b68:	b510      	push	{r4, lr}
  LpTimerInit( );
 8000b6a:	f7ff ffb7 	bl	8000adc <LpTimerInit>
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <vPortSetupTimerInterrupt+0x34>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	490b      	ldr	r1, [pc, #44]	; (8000ba0 <vPortSetupTimerInterrupt+0x38>)
 8000b74:	fba1 0202 	umull	r0, r2, r1, r2
 8000b78:	0992      	lsrs	r2, r2, #6
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <vPortSetupTimerInterrupt+0x3c>)
 8000b7c:	6002      	str	r2, [r0, #0]
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <vPortSetupTimerInterrupt+0x40>)
 8000b80:	2000      	movs	r0, #0
 8000b82:	6010      	str	r0, [r2, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b84:	4c09      	ldr	r4, [pc, #36]	; (8000bac <vPortSetupTimerInterrupt+0x44>)
 8000b86:	6020      	str	r0, [r4, #0]
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	fba1 1303 	umull	r1, r3, r1, r3
 8000b8e:	099b      	lsrs	r3, r3, #6
 8000b90:	3b01      	subs	r3, #1
 8000b92:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <vPortSetupTimerInterrupt+0x48>)
 8000b94:	600b      	str	r3, [r1, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b96:	2307      	movs	r3, #7
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bd10      	pop	{r4, pc}
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	10624dd3 	.word	0x10624dd3
 8000ba4:	2000097c 	.word	0x2000097c
 8000ba8:	e000e010 	.word	0xe000e010
 8000bac:	e000e018 	.word	0xe000e018
 8000bb0:	e000e014 	.word	0xe000e014

08000bb4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2400      	movs	r4, #0
 8000bba:	9407      	str	r4, [sp, #28]
 8000bbc:	9408      	str	r4, [sp, #32]
 8000bbe:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc6:	f042 0204 	orr.w	r2, r2, #4
 8000bca:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bce:	f002 0204 	and.w	r2, r2, #4
 8000bd2:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000bd4:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000be4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000be6:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bea:	f042 0202 	orr.w	r2, r2, #2
 8000bee:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf2:	f002 0202 	and.w	r2, r2, #2
 8000bf6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000bf8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bfc:	f042 0201 	orr.w	r2, r2, #1
 8000c00:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c04:	f002 0201 	and.w	r2, r2, #1
 8000c08:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000c0a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0e:	f042 0210 	orr.w	r2, r2, #16
 8000c12:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c1c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1e:	2608      	movs	r6, #8
 8000c20:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2503      	movs	r5, #3
 8000c24:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c26:	a905      	add	r1, sp, #20
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0xd8>)
 8000c2a:	f002 fa25 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8000c2e:	f240 3333 	movw	r3, #819	; 0x333
 8000c32:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c34:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	4f15      	ldr	r7, [pc, #84]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c3a:	a905      	add	r1, sp, #20
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	f002 fa1b 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA5 PA6 PA7 PA8 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000c42:	f649 13fe 	movw	r3, #39422	; 0x99fe
 8000c46:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c48:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	a905      	add	r1, sp, #20
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f002 fa11 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8000c56:	2304      	movs	r3, #4
 8000c58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_GPIO_Init+0xe0>)
 8000c5c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8000c60:	a905      	add	r1, sp, #20
 8000c62:	4638      	mov	r0, r7
 8000c64:	f002 fa08 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c70:	a905      	add	r1, sp, #20
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_GPIO_Init+0xe4>)
 8000c74:	f002 fa00 	bl	8003078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000c78:	4622      	mov	r2, r4
 8000c7a:	2105      	movs	r1, #5
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f001 ff8d 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c82:	4630      	mov	r0, r6
 8000c84:	f001 ffbe 	bl	8002c04 <HAL_NVIC_EnableIRQ>

}
 8000c88:	b00b      	add	sp, #44	; 0x2c
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8c:	48001c00 	.word	0x48001c00
 8000c90:	48000400 	.word	0x48000400
 8000c94:	10110000 	.word	0x10110000
 8000c98:	48001000 	.word	0x48001000

08000c9c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <ReadRtcSsrValue+0x1c>)
 8000c9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000ca0:	b29b      	uxth	r3, r3

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ca2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000ca4:	b280      	uxth	r0, r0

  while(first_read != second_read)
 8000ca6:	e003      	b.n	8000cb0 <ReadRtcSsrValue+0x14>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <ReadRtcSsrValue+0x1c>)
 8000caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    first_read = second_read;
 8000cac:	4603      	mov	r3, r0
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000cae:	b290      	uxth	r0, r2
  while(first_read != second_read)
 8000cb0:	4283      	cmp	r3, r0
 8000cb2:	d1f9      	bne.n	8000ca8 <ReadRtcSsrValue+0xc>
  }

  return second_read;
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40002800 	.word	0x40002800

08000cbc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000cbc:	b470      	push	{r4, r5, r6}
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000cbe:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8000cc2:	00da      	lsls	r2, r3, #3
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LinkTimerAfter+0x3c>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	7d5b      	ldrb	r3, [r3, #21]
 8000cca:	b2db      	uxtb	r3, r3

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ccc:	2b06      	cmp	r3, #6
 8000cce:	d005      	beq.n	8000cdc <LinkTimerAfter+0x20>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000cd0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000cd4:	00d4      	lsls	r4, r2, #3
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <LinkTimerAfter+0x3c>)
 8000cd8:	4422      	add	r2, r4
 8000cda:	7510      	strb	r0, [r2, #20]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <LinkTimerAfter+0x3c>)
 8000cde:	0044      	lsls	r4, r0, #1
 8000ce0:	1826      	adds	r6, r4, r0
 8000ce2:	00f5      	lsls	r5, r6, #3
 8000ce4:	4415      	add	r5, r2
 8000ce6:	756b      	strb	r3, [r5, #21]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ce8:	7529      	strb	r1, [r5, #20]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000cea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000cee:	00cb      	lsls	r3, r1, #3
 8000cf0:	441a      	add	r2, r3
 8000cf2:	7550      	strb	r0, [r2, #21]

  return;
}
 8000cf4:	bc70      	pop	{r4, r5, r6}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000068 	.word	0x20000068

08000cfc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000cfc:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <LinkTimerBefore+0x5c>)
 8000d00:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d01a      	beq.n	8000d40 <LinkTimerBefore+0x44>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <LinkTimerBefore+0x5c>)
 8000d0c:	004a      	lsls	r2, r1, #1
 8000d0e:	1855      	adds	r5, r2, r1
 8000d10:	00ec      	lsls	r4, r5, #3
 8000d12:	441c      	add	r4, r3
 8000d14:	7d24      	ldrb	r4, [r4, #20]
 8000d16:	b2e4      	uxtb	r4, r4

    aTimerContext[previous_id].NextID = TimerID;
 8000d18:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8000d1c:	00f5      	lsls	r5, r6, #3
 8000d1e:	441d      	add	r5, r3
 8000d20:	7568      	strb	r0, [r5, #21]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d22:	0045      	lsls	r5, r0, #1
 8000d24:	182f      	adds	r7, r5, r0
 8000d26:	00fe      	lsls	r6, r7, #3
 8000d28:	4637      	mov	r7, r6
 8000d2a:	441e      	add	r6, r3
 8000d2c:	7571      	strb	r1, [r6, #21]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d2e:	463e      	mov	r6, r7
 8000d30:	441e      	add	r6, r3
 8000d32:	7534      	strb	r4, [r6, #20]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d34:	4411      	add	r1, r2
 8000d36:	00ca      	lsls	r2, r1, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	7518      	strb	r0, [r3, #20]
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
}
 8000d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d3e:	4770      	bx	lr
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <LinkTimerBefore+0x5c>)
 8000d42:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000d46:	00e2      	lsls	r2, r4, #3
 8000d48:	441a      	add	r2, r3
 8000d4a:	7551      	strb	r1, [r2, #21]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000d50:	00ca      	lsls	r2, r1, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	7518      	strb	r0, [r3, #20]
  return;
 8000d56:	e7f1      	b.n	8000d3c <LinkTimerBefore+0x40>
 8000d58:	20000068 	.word	0x20000068

08000d5c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d5c:	b470      	push	{r4, r5, r6}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <UnlinkTimer+0x94>)
 8000d60:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d02a      	beq.n	8000dc0 <UnlinkTimer+0x64>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d6a:	4d21      	ldr	r5, [pc, #132]	; (8000df0 <UnlinkTimer+0x94>)
 8000d6c:	0043      	lsls	r3, r0, #1
 8000d6e:	4403      	add	r3, r0
 8000d70:	00da      	lsls	r2, r3, #3
 8000d72:	442a      	add	r2, r5
 8000d74:	7d14      	ldrb	r4, [r2, #20]
    next_id = aTimerContext[TimerID].NextID;
 8000d76:	7d53      	ldrb	r3, [r2, #21]
 8000d78:	b2db      	uxtb	r3, r3

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d7a:	7d56      	ldrb	r6, [r2, #21]
 8000d7c:	b2f6      	uxtb	r6, r6
 8000d7e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000d82:	00d4      	lsls	r4, r2, #3
 8000d84:	4425      	add	r5, r4
 8000d86:	756e      	strb	r6, [r5, #21]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d00b      	beq.n	8000da4 <UnlinkTimer+0x48>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <UnlinkTimer+0x94>)
 8000d8e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000d92:	00ec      	lsls	r4, r5, #3
 8000d94:	4414      	add	r4, r2
 8000d96:	7d24      	ldrb	r4, [r4, #20]
 8000d98:	b2e4      	uxtb	r4, r4
 8000d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d9e:	00dd      	lsls	r5, r3, #3
 8000da0:	442a      	add	r2, r5
 8000da2:	7514      	strb	r4, [r2, #20]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <UnlinkTimer+0x94>)
 8000da6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000daa:	00c3      	lsls	r3, r0, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	2001      	movs	r0, #1
 8000db0:	7318      	strb	r0, [r3, #12]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000db2:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d010      	beq.n	8000dde <UnlinkTimer+0x82>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8000dbc:	bc70      	pop	{r4, r5, r6}
 8000dbe:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <UnlinkTimer+0x94>)
 8000dc2:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000dcc:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000dd0:	00e2      	lsls	r2, r4, #3
 8000dd2:	441a      	add	r2, r3
 8000dd4:	7d52      	ldrb	r2, [r2, #21]
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8000ddc:	e7e2      	b.n	8000da4 <UnlinkTimer+0x48>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d1ec      	bne.n	8000dbc <UnlinkTimer+0x60>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000de2:	4613      	mov	r3, r2
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8000dec:	e7e6      	b.n	8000dbc <UnlinkTimer+0x60>
 8000dee:	bf00      	nop
 8000df0:	20000068 	.word	0x20000068

08000df4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000df4:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <ReturnTimeElapsed+0x4c>)
 8000df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d01b      	beq.n	8000e3a <ReturnTimeElapsed+0x46>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e02:	f7ff ff4b 	bl	8000c9c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <ReturnTimeElapsed+0x4c>)
 8000e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0c:	4283      	cmp	r3, r0
 8000e0e:	d30c      	bcc.n	8000e2a <ReturnTimeElapsed+0x36>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <ReturnTimeElapsed+0x4c>)
 8000e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e16:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <ReturnTimeElapsed+0x50>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <ReturnTimeElapsed+0x54>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8000e26:	b280      	uxth	r0, r0
 8000e28:	bd08      	pop	{r3, pc}
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <ReturnTimeElapsed+0x58>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	1a1b      	subs	r3, r3, r0
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <ReturnTimeElapsed+0x4c>)
 8000e32:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 8000e36:	4418      	add	r0, r3
 8000e38:	e7ee      	b.n	8000e18 <ReturnTimeElapsed+0x24>
    return_value = 0;
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	e7f3      	b.n	8000e26 <ReturnTimeElapsed+0x32>
 8000e3e:	bf00      	nop
 8000e40:	20000068 	.word	0x20000068
 8000e44:	20000980 	.word	0x20000980
 8000e48:	20000986 	.word	0x20000986
 8000e4c:	20000984 	.word	0x20000984

08000e50 <linkTimer>:
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <linkTimer+0xd4>)
 8000e54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d023      	beq.n	8000ea6 <linkTimer+0x56>
 8000e5e:	4604      	mov	r4, r0
    time_elapsed = ReturnTimeElapsed();
 8000e60:	f7ff ffc8 	bl	8000df4 <ReturnTimeElapsed>
 8000e64:	4605      	mov	r5, r0
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <linkTimer+0xd4>)
 8000e68:	0062      	lsls	r2, r4, #1
 8000e6a:	1910      	adds	r0, r2, r4
 8000e6c:	00c1      	lsls	r1, r0, #3
 8000e6e:	4419      	add	r1, r3
 8000e70:	6888      	ldr	r0, [r1, #8]
 8000e72:	4428      	add	r0, r5
 8000e74:	6088      	str	r0, [r1, #8]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e76:	4422      	add	r2, r4
 8000e78:	00d1      	lsls	r1, r2, #3
 8000e7a:	4419      	add	r1, r3
 8000e7c:	6888      	ldr	r0, [r1, #8]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e7e:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000e82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e86:	00d1      	lsls	r1, r2, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4283      	cmp	r3, r0
 8000e8e:	d83a      	bhi.n	8000f06 <linkTimer+0xb6>
      timer_id_lookup = CurrentRunningTimerID;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <linkTimer+0xd4>)
 8000e92:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8000e96:	b2c9      	uxtb	r1, r1
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e98:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e9c:	00f2      	lsls	r2, r6, #3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	7d5b      	ldrb	r3, [r3, #21]
 8000ea2:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ea4:	e021      	b.n	8000eea <linkTimer+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <linkTimer+0xd4>)
 8000ea8:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = TimerID;
 8000eb2:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000eb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000eba:	00c2      	lsls	r2, r0, #3
 8000ebc:	441a      	add	r2, r3
 8000ebe:	2106      	movs	r1, #6
 8000ec0:	7551      	strb	r1, [r2, #21]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8000eca:	2500      	movs	r5, #0
}
 8000ecc:	4628      	mov	r0, r5
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <linkTimer+0xd4>)
 8000ed2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000ed6:	00ca      	lsls	r2, r1, #3
 8000ed8:	441a      	add	r2, r3
 8000eda:	7d51      	ldrb	r1, [r2, #21]
 8000edc:	b2c9      	uxtb	r1, r1
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ede:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000ee2:	00f2      	lsls	r2, r6, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	7d5b      	ldrb	r3, [r3, #21]
 8000ee8:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d007      	beq.n	8000efe <linkTimer+0xae>
 8000eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ef2:	00da      	lsls	r2, r3, #3
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <linkTimer+0xd4>)
 8000ef6:	4413      	add	r3, r2
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4283      	cmp	r3, r0
 8000efc:	d9e8      	bls.n	8000ed0 <linkTimer+0x80>
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff fedc 	bl	8000cbc <LinkTimerAfter>
 8000f04:	e7e2      	b.n	8000ecc <linkTimer+0x7c>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000f06:	4e07      	ldr	r6, [pc, #28]	; (8000f24 <linkTimer+0xd4>)
 8000f08:	f896 1090 	ldrb.w	r1, [r6, #144]	; 0x90
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff fef5 	bl	8000cfc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000f12:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
      CurrentRunningTimerID = TimerID;
 8000f1c:	f886 4090 	strb.w	r4, [r6, #144]	; 0x90
 8000f20:	e7d4      	b.n	8000ecc <linkTimer+0x7c>
 8000f22:	bf00      	nop
 8000f24:	20000068 	.word	0x20000068

08000f28 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f28:	b510      	push	{r4, lr}
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000f2a:	b360      	cbz	r0, 8000f86 <RestartWakeupCounter+0x5e>
 8000f2c:	4604      	mov	r4, r0
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
  }
  else
  {
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f2e:	2801      	cmp	r0, #1
 8000f30:	d932      	bls.n	8000f98 <RestartWakeupCounter+0x70>
    {
      Value -= 1;
 8000f32:	3c01      	subs	r4, #1
 8000f34:	b2a4      	uxth	r4, r4
    }

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <RestartWakeupCounter+0x7c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	f012 0f04 	tst.w	r2, #4
 8000f42:	d0f8      	beq.n	8000f36 <RestartWakeupCounter+0xe>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f4c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <RestartWakeupCounter+0x80>)
 8000f50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f54:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f56:	2003      	movs	r0, #3
 8000f58:	f001 fe94 	bl	8002c84 <HAL_NVIC_ClearPendingIRQ>

    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <RestartWakeupCounter+0x84>)
 8000f5e:	6953      	ldr	r3, [r2, #20]
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431c      	orrs	r4, r3
 8000f66:	6154      	str	r4, [r2, #20]

    /**
     * Update the value here after the WUTWF polling that may take some time
     */
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f68:	f7ff fe98 	bl	8000c9c <ReadRtcSsrValue>
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <RestartWakeupCounter+0x88>)
 8000f6e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <RestartWakeupCounter+0x7c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6893      	ldr	r3, [r2, #8]
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	6093      	str	r3, [r2, #8]

    HW_TS_RTC_CountUpdated_AppNot();
 8000f80:	f3af 8000 	nop.w
  }

  return ;
}
 8000f84:	bd10      	pop	{r4, pc}
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f86:	f7ff fe89 	bl	8000c9c <ReadRtcSsrValue>
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <RestartWakeupCounter+0x88>)
 8000f8c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f001 fe69 	bl	8002c68 <HAL_NVIC_SetPendingIRQ>
 8000f96:	e7f5      	b.n	8000f84 <RestartWakeupCounter+0x5c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <RestartWakeupCounter+0x8c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d1c8      	bne.n	8000f32 <RestartWakeupCounter+0xa>
 8000fa0:	e7c9      	b.n	8000f36 <RestartWakeupCounter+0xe>
 8000fa2:	bf00      	nop
 8000fa4:	20000988 	.word	0x20000988
 8000fa8:	58000800 	.word	0x58000800
 8000fac:	40002800 	.word	0x40002800
 8000fb0:	20000068 	.word	0x20000068
 8000fb4:	20000986 	.word	0x20000986

08000fb8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000fb8:	b570      	push	{r4, r5, r6, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <RescheduleTimerList+0xc0>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000fc2:	d006      	beq.n	8000fd2 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <RescheduleTimerList+0xc4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f013 0f04 	tst.w	r3, #4
 8000fd0:	d1f8      	bne.n	8000fc4 <RescheduleTimerList+0xc>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <RescheduleTimerList+0xc4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	6893      	ldr	r3, [r2, #8]
 8000fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fde:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <RescheduleTimerList+0xc8>)
 8000fe2:	f893 4090 	ldrb.w	r4, [r3, #144]	; 0x90
 8000fe6:	b2e4      	uxtb	r4, r4

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fe8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000fec:	00ca      	lsls	r2, r1, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	689e      	ldr	r6, [r3, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000ff2:	f7ff feff 	bl	8000df4 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	42b0      	cmp	r0, r6
 8000ffa:	d905      	bls.n	8001008 <RescheduleTimerList+0x50>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <RescheduleTimerList+0xc8>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    wakeup_timer_value = 0;
 8001004:	2000      	movs	r0, #0
 8001006:	e023      	b.n	8001050 <RescheduleTimerList+0x98>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <RescheduleTimerList+0xcc>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	4403      	add	r3, r0
 800100e:	42b3      	cmp	r3, r6
 8001010:	d207      	bcs.n	8001022 <RescheduleTimerList+0x6a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <RescheduleTimerList+0xcc>)
 8001014:	8818      	ldrh	r0, [r3, #0]
 8001016:	b280      	uxth	r0, r0

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <RescheduleTimerList+0xc8>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001020:	e016      	b.n	8001050 <RescheduleTimerList+0x98>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001022:	b2b6      	uxth	r6, r6
 8001024:	1a30      	subs	r0, r6, r0
 8001026:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <RescheduleTimerList+0xc8>)
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001030:	e00e      	b.n	8001050 <RescheduleTimerList+0x98>
    {
      aTimerContext[localTimerID].CountLeft = 0;
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001032:	0062      	lsls	r2, r4, #1
 8001034:	4414      	add	r4, r2
 8001036:	00e1      	lsls	r1, r4, #3
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <RescheduleTimerList+0xc8>)
 800103a:	440a      	add	r2, r1
 800103c:	6891      	ldr	r1, [r2, #8]
 800103e:	1b49      	subs	r1, r1, r5
 8001040:	6091      	str	r1, [r2, #8]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001046:	00da      	lsls	r2, r3, #3
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <RescheduleTimerList+0xc8>)
 800104a:	4413      	add	r3, r2
 800104c:	7d5c      	ldrb	r4, [r3, #21]
 800104e:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001050:	2c06      	cmp	r4, #6
 8001052:	d00d      	beq.n	8001070 <RescheduleTimerList+0xb8>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001054:	4623      	mov	r3, r4
 8001056:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800105a:	00d1      	lsls	r1, r2, #3
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <RescheduleTimerList+0xc8>)
 800105e:	440a      	add	r2, r1
 8001060:	6892      	ldr	r2, [r2, #8]
 8001062:	4295      	cmp	r5, r2
 8001064:	d9e5      	bls.n	8001032 <RescheduleTimerList+0x7a>
      aTimerContext[localTimerID].CountLeft = 0;
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <RescheduleTimerList+0xc8>)
 8001068:	440a      	add	r2, r1
 800106a:	2100      	movs	r1, #0
 800106c:	6091      	str	r1, [r2, #8]
 800106e:	e7e8      	b.n	8001042 <RescheduleTimerList+0x8a>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001070:	f7ff ff5a 	bl	8000f28 <RestartWakeupCounter>

  return ;
}
 8001074:	bd70      	pop	{r4, r5, r6, pc}
 8001076:	bf00      	nop
 8001078:	40002800 	.word	0x40002800
 800107c:	20000988 	.word	0x20000988
 8001080:	20000068 	.word	0x20000068
 8001084:	20000982 	.word	0x20000982

08001088 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001088:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HW_TS_Init+0x12c>)
 800108c:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800108e:	680b      	ldr	r3, [r1, #0]
 8001090:	22ca      	movs	r2, #202	; 0xca
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
 8001094:	680b      	ldr	r3, [r1, #0]
 8001096:	2253      	movs	r2, #83	; 0x53
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800109a:	4c47      	ldr	r4, [pc, #284]	; (80011b8 <HW_TS_Init+0x130>)
 800109c:	68a3      	ldr	r3, [r4, #8]
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	60a3      	str	r3, [r4, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80010a4:	68a3      	ldr	r3, [r4, #8]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	f1c3 0304 	rsb	r3, r3, #4
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	4b42      	ldr	r3, [pc, #264]	; (80011bc <HW_TS_Init+0x134>)
 80010b2:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80010b4:	6923      	ldr	r3, [r4, #16]
 80010b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80010be:	fa92 f2a2 	rbit	r2, r2
 80010c2:	fab2 f282 	clz	r2, r2
 80010c6:	40d3      	lsrs	r3, r2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <HW_TS_Init+0x138>)
 80010d0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010d2:	6923      	ldr	r3, [r4, #16]
 80010d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010d8:	3301      	adds	r3, #1
 80010da:	4c3a      	ldr	r4, [pc, #232]	; (80011c4 <HW_TS_Init+0x13c>)
 80010dc:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010de:	3b01      	subs	r3, #1
 80010e0:	fb03 f302 	mul.w	r3, r3, r2
 80010e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010e8:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d91a      	bls.n	8001128 <HW_TS_Init+0xa0>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HW_TS_Init+0x140>)
 80010f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f8:	801a      	strh	r2, [r3, #0]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HW_TS_Init+0x144>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001102:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001104:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001108:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800110c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001110:	2800      	cmp	r0, #0
 8001112:	d144      	bne.n	800119e <HW_TS_Init+0x116>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HW_TS_Init+0x148>)
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001124:	2300      	movs	r3, #0
 8001126:	e00c      	b.n	8001142 <HW_TS_Init+0xba>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001128:	b29b      	uxth	r3, r3
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HW_TS_Init+0x140>)
 800112c:	8013      	strh	r3, [r2, #0]
 800112e:	e7e4      	b.n	80010fa <HW_TS_Init+0x72>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001130:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001134:	00d1      	lsls	r1, r2, #3
 8001136:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HW_TS_Init+0x148>)
 8001138:	440a      	add	r2, r1
 800113a:	2100      	movs	r1, #0
 800113c:	7311      	strb	r1, [r2, #12]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800113e:	3301      	adds	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b05      	cmp	r3, #5
 8001144:	d9f4      	bls.n	8001130 <HW_TS_Init+0xa8>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HW_TS_Init+0x148>)
 8001148:	2206      	movs	r2, #6
 800114a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800114e:	4c19      	ldr	r4, [pc, #100]	; (80011b4 <HW_TS_Init+0x12c>)
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6811      	ldr	r1, [r2, #0]
 8001154:	688b      	ldr	r3, [r1, #8]
 8001156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800115a:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	68d3      	ldr	r3, [r2, #12]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001166:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HW_TS_Init+0x144>)
 800116a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800116e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001170:	2003      	movs	r0, #3
 8001172:	f001 fd87 	bl	8002c84 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	6893      	ldr	r3, [r2, #8]
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HW_TS_Init+0x12c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	22ff      	movs	r2, #255	; 0xff
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800118c:	2200      	movs	r2, #0
 800118e:	2106      	movs	r1, #6
 8001190:	2003      	movs	r0, #3
 8001192:	f001 fd03 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001196:	2003      	movs	r0, #3
 8001198:	f001 fd34 	bl	8002c04 <HAL_NVIC_EnableIRQ>

  return;
}
 800119c:	bd10      	pop	{r4, pc}
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HW_TS_Init+0x12c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011aa:	d0ea      	beq.n	8001182 <HW_TS_Init+0xfa>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f001 fd5b 	bl	8002c68 <HAL_NVIC_SetPendingIRQ>
 80011b2:	e7e6      	b.n	8001182 <HW_TS_Init+0xfa>
 80011b4:	20000988 	.word	0x20000988
 80011b8:	40002800 	.word	0x40002800
 80011bc:	20000986 	.word	0x20000986
 80011c0:	20000980 	.word	0x20000980
 80011c4:	20000984 	.word	0x20000984
 80011c8:	20000982 	.word	0x20000982
 80011cc:	58000800 	.word	0x58000800
 80011d0:	20000068 	.word	0x20000068

080011d4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80011da:	b672      	cpsid	i
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80011dc:	2400      	movs	r4, #0
 80011de:	e001      	b.n	80011e4 <HW_TS_Create+0x10>
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
  {
    loop++;
 80011e0:	3401      	adds	r4, #1
 80011e2:	b2e4      	uxtb	r4, r4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011e4:	2c05      	cmp	r4, #5
 80011e6:	d807      	bhi.n	80011f8 <HW_TS_Create+0x24>
 80011e8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80011ec:	00ee      	lsls	r6, r5, #3
 80011ee:	4d11      	ldr	r5, [pc, #68]	; (8001234 <HW_TS_Create+0x60>)
 80011f0:	4435      	add	r5, r6
 80011f2:	7b2d      	ldrb	r5, [r5, #12]
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d1f3      	bne.n	80011e0 <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011f8:	2c06      	cmp	r4, #6
 80011fa:	d016      	beq.n	800122a <HW_TS_Create+0x56>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80011fc:	f8df c034 	ldr.w	ip, [pc, #52]	; 8001234 <HW_TS_Create+0x60>
 8001200:	0066      	lsls	r6, r4, #1
 8001202:	eb06 0e04 	add.w	lr, r6, r4
 8001206:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 800120a:	4465      	add	r5, ip
 800120c:	f04f 0e01 	mov.w	lr, #1
 8001210:	f885 e00c 	strb.w	lr, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001214:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001218:	6128      	str	r0, [r5, #16]
    aTimerContext[loop].TimerMode = TimerMode;
 800121a:	736a      	strb	r2, [r5, #13]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800121c:	1932      	adds	r2, r6, r4
 800121e:	00d0      	lsls	r0, r2, #3
 8001220:	f84c 3000 	str.w	r3, [ip, r0]
    *pTimerId = loop;
 8001224:	700c      	strb	r4, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 8001226:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 800122e:	2001      	movs	r0, #1
 8001230:	e7fa      	b.n	8001228 <HW_TS_Create+0x54>
 8001232:	bf00      	nop
 8001234:	20000068 	.word	0x20000068

08001238 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800123c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001242:	2003      	movs	r0, #3
 8001244:	f001 fcec 	bl	8002c20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HW_TS_Stop+0xb8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	21ca      	movs	r1, #202	; 0xca
 8001250:	6251      	str	r1, [r2, #36]	; 0x24
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2253      	movs	r2, #83	; 0x53
 8001256:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001258:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800125c:	00da      	lsls	r2, r3, #3
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HW_TS_Stop+0xbc>)
 8001260:	4413      	add	r3, r2
 8001262:	7b1b      	ldrb	r3, [r3, #12]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d00a      	beq.n	8001280 <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HW_TS_Stop+0xb8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001274:	2003      	movs	r0, #3
 8001276:	f001 fcc5 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800127a:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 800127e:	bd38      	pop	{r3, r4, r5, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001280:	2100      	movs	r1, #0
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fd6a 	bl	8000d5c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HW_TS_Stop+0xbc>)
 800128a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800128e:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001290:	2b06      	cmp	r3, #6
 8001292:	d008      	beq.n	80012a6 <HW_TS_Stop+0x6e>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HW_TS_Stop+0xbc>)
 8001296:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	429a      	cmp	r2, r3
 800129e:	d0e4      	beq.n	800126a <HW_TS_Stop+0x32>
      RescheduleTimerList();
 80012a0:	f7ff fe8a 	bl	8000fb8 <RescheduleTimerList>
 80012a4:	e7e1      	b.n	800126a <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HW_TS_Stop+0xc0>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012ae:	d006      	beq.n	80012be <HW_TS_Stop+0x86>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HW_TS_Stop+0xb8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f013 0f04 	tst.w	r3, #4
 80012bc:	d1f8      	bne.n	80012b0 <HW_TS_Stop+0x78>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HW_TS_Stop+0xb8>)
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	680a      	ldr	r2, [r1, #0]
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012ca:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012cc:	680b      	ldr	r3, [r1, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	f012 0f04 	tst.w	r2, #4
 80012d4:	d0fa      	beq.n	80012cc <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HW_TS_Stop+0xc4>)
 80012e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012e8:	2003      	movs	r0, #3
 80012ea:	f001 fccb 	bl	8002c84 <HAL_NVIC_ClearPendingIRQ>
 80012ee:	e7bc      	b.n	800126a <HW_TS_Stop+0x32>
 80012f0:	20000988 	.word	0x20000988
 80012f4:	20000068 	.word	0x20000068
 80012f8:	40002800 	.word	0x40002800
 80012fc:	58000800 	.word	0x58000800

08001300 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	460f      	mov	r7, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001306:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HW_TS_Start+0x94>)
 800130e:	4413      	add	r3, r2
 8001310:	7b1b      	ldrb	r3, [r3, #12]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d036      	beq.n	8001386 <HW_TS_Start+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001318:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800131e:	2003      	movs	r0, #3
 8001320:	f001 fc7e 	bl	8002c20 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HW_TS_Start+0x98>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	21ca      	movs	r1, #202	; 0xca
 800132c:	6251      	str	r1, [r2, #36]	; 0x24
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2253      	movs	r2, #83	; 0x53
 8001332:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001334:	4d17      	ldr	r5, [pc, #92]	; (8001394 <HW_TS_Start+0x94>)
 8001336:	0062      	lsls	r2, r4, #1
 8001338:	4422      	add	r2, r4
 800133a:	00d3      	lsls	r3, r2, #3
 800133c:	442b      	add	r3, r5
 800133e:	2202      	movs	r2, #2
 8001340:	731a      	strb	r2, [r3, #12]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001342:	609f      	str	r7, [r3, #8]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001344:	605f      	str	r7, [r3, #4]

  time_elapsed =  linkTimer(timer_id);
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fd82 	bl	8000e50 <linkTimer>

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800134c:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8001350:	b2db      	uxtb	r3, r3

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001352:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	429a      	cmp	r2, r3
 800135a:	d117      	bne.n	800138c <HW_TS_Start+0x8c>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HW_TS_Start+0x94>)
 800135e:	0063      	lsls	r3, r4, #1
 8001360:	191d      	adds	r5, r3, r4
 8001362:	00e9      	lsls	r1, r5, #3
 8001364:	460d      	mov	r5, r1
 8001366:	4411      	add	r1, r2
 8001368:	6889      	ldr	r1, [r1, #8]
 800136a:	1a08      	subs	r0, r1, r0
 800136c:	442a      	add	r2, r5
 800136e:	6090      	str	r0, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HW_TS_Start+0x98>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800137a:	2003      	movs	r0, #3
 800137c:	f001 fc42 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001380:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8001384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 8001386:	f7ff ff57 	bl	8001238 <HW_TS_Stop>
 800138a:	e7c5      	b.n	8001318 <HW_TS_Start+0x18>
    RescheduleTimerList();
 800138c:	f7ff fe14 	bl	8000fb8 <RescheduleTimerList>
 8001390:	e7ee      	b.n	8001370 <HW_TS_Start+0x70>
 8001392:	bf00      	nop
 8001394:	20000068 	.word	0x20000068
 8001398:	20000988 	.word	0x20000988

0800139c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800139c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800139e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80013a2:	b672      	cpsid	i
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80013ac:	d009      	beq.n	80013c2 <HW_TS_RTC_ReadLeftTicksToCount+0x26>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 80013b0:	695c      	ldr	r4, [r3, #20]
 80013b2:	b2a4      	uxth	r4, r4

    elapsed_time_value = ReturnTimeElapsed();
 80013b4:	f7ff fd1e 	bl	8000df4 <ReturnTimeElapsed>

    if(auro_reload_value > elapsed_time_value)
 80013b8:	4284      	cmp	r4, r0
 80013ba:	d907      	bls.n	80013cc <HW_TS_RTC_ReadLeftTicksToCount+0x30>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80013bc:	1a20      	subs	r0, r4, r0
 80013be:	b280      	uxth	r0, r0
 80013c0:	e001      	b.n	80013c6 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
      return_value = 0;
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80013c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c6:	f385 8810 	msr	PRIMASK, r5
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
}
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
      return_value = 0;
 80013cc:	2000      	movs	r0, #0
 80013ce:	e7fa      	b.n	80013c6 <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
 80013d0:	40002800 	.word	0x40002800

080013d4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    switch (hw_uart_id)
 80013d4:	b100      	cbz	r0, 80013d8 <HW_UART_Receive_IT+0x4>
 80013d6:	4770      	bx	lr
{
 80013d8:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <HW_UART_Receive_IT+0x18>)
 80013dc:	6003      	str	r3, [r0, #0]
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <HW_UART_Receive_IT+0x1c>)
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HW_UART_Receive_IT+0x20>)
 80013e2:	6003      	str	r3, [r0, #0]
 80013e4:	f004 ff04 	bl	80061f0 <HAL_UART_Receive_IT>
        default:
            break;
    }

    return;
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	20004348 	.word	0x20004348
 80013f0:	20004654 	.word	0x20004654
 80013f4:	40013800 	.word	0x40013800

080013f8 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
    switch (hw_uart_id)
 80013f8:	b100      	cbz	r0, 80013fc <HW_UART_Transmit_IT+0x4>
 80013fa:	4770      	bx	lr
{
 80013fc:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <HW_UART_Transmit_IT+0x18>)
 8001400:	6003      	str	r3, [r0, #0]
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <HW_UART_Transmit_IT+0x1c>)
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HW_UART_Transmit_IT+0x20>)
 8001406:	6003      	str	r3, [r0, #0]
 8001408:	f004 fe96 	bl	8006138 <HAL_UART_Transmit_IT>
        default:
            break;
    }

    return;
}
 800140c:	bd08      	pop	{r3, pc}
 800140e:	bf00      	nop
 8001410:	2000434c 	.word	0x2000434c
 8001414:	20004654 	.word	0x20004654
 8001418:	40013800 	.word	0x40013800

0800141c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800141c:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 800141e:	6802      	ldr	r2, [r0, #0]
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_UART_RxCpltCallback+0x14>)
 8001422:	429a      	cmp	r2, r3
 8001424:	d103      	bne.n	800142e <HAL_UART_RxCpltCallback+0x12>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001426:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_UART_RxCpltCallback+0x18>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b103      	cbz	r3, 800142e <HAL_UART_RxCpltCallback+0x12>
            {
                HW_huart1RxCb();
 800142c:	4798      	blx	r3
        default:
            break;
    }

    return;
}
 800142e:	bd08      	pop	{r3, pc}
 8001430:	40013800 	.word	0x40013800
 8001434:	20004348 	.word	0x20004348

08001438 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001438:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800143a:	4812      	ldr	r0, [pc, #72]	; (8001484 <MX_I2C1_Init+0x4c>)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x50>)
 800143e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x54>)
 8001442:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001448:	2201      	movs	r2, #1
 800144a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800144e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001450:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001452:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001456:	f002 f8a3 	bl	80035a0 <HAL_I2C_Init>
 800145a:	b950      	cbnz	r0, 8001472 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C1_Init+0x4c>)
 8001460:	f002 ff5f 	bl	8004322 <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	b940      	cbnz	r0, 8001478 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_I2C1_Init+0x4c>)
 800146a:	f002 ff88 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 800146e:	b930      	cbnz	r0, 800147e <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8001470:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001472:	f000 fa9b 	bl	80019ac <Error_Handler>
 8001476:	e7f1      	b.n	800145c <MX_I2C1_Init+0x24>
    Error_Handler();
 8001478:	f000 fa98 	bl	80019ac <Error_Handler>
 800147c:	e7f3      	b.n	8001466 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800147e:	f000 fa95 	bl	80019ac <Error_Handler>
}
 8001482:	e7f5      	b.n	8001470 <MX_I2C1_Init+0x38>
 8001484:	20004350 	.word	0x20004350
 8001488:	40005400 	.word	0x40005400
 800148c:	00e27cae 	.word	0x00e27cae

08001490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001490:	b510      	push	{r4, lr}
 8001492:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	2300      	movs	r3, #0
 8001496:	9303      	str	r3, [sp, #12]
 8001498:	9304      	str	r3, [sp, #16]
 800149a:	9305      	str	r3, [sp, #20]
 800149c:	9306      	str	r3, [sp, #24]
 800149e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80014a0:	6802      	ldr	r2, [r0, #0]
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_I2C_MspInit+0x70>)
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a8:	b008      	add	sp, #32
 80014aa:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80014b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80014c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	a903      	add	r1, sp, #12
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 fdcf 	bl	8003078 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e0:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80014ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2105      	movs	r1, #5
 80014f0:	201e      	movs	r0, #30
 80014f2:	f001 fb53 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014f6:	201e      	movs	r0, #30
 80014f8:	f001 fb84 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 80014fc:	e7d4      	b.n	80014a8 <HAL_I2C_MspInit+0x18>
 80014fe:	bf00      	nop
 8001500:	40005400 	.word	0x40005400

08001504 <InterProcessorTask>:
struct parsedSecondaryProcessorPacket parsedPacket;

extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;

void InterProcessorTask(void *argument){
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	e08a      	b.n	800161e <InterProcessorTask+0x11a>

 					// clear transmission flag
 					osThreadFlagsClear(0x00000010U);
 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &togLogMessageReceived, sizeof(struct LogMessage)) != HAL_OK){
 						osDelay(100);
 8001508:	2064      	movs	r0, #100	; 0x64
 800150a:	f006 f927 	bl	800775c <osDelay>
 					while(HAL_I2C_Master_Transmit_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &togLogMessageReceived, sizeof(struct LogMessage)) != HAL_OK){
 800150e:	2306      	movs	r3, #6
 8001510:	4a4e      	ldr	r2, [pc, #312]	; (800164c <InterProcessorTask+0x148>)
 8001512:	21e6      	movs	r1, #230	; 0xe6
 8001514:	484e      	ldr	r0, [pc, #312]	; (8001650 <InterProcessorTask+0x14c>)
 8001516:	f002 f8a1 	bl	800365c <HAL_I2C_Master_Transmit_IT>
 800151a:	2800      	cmp	r0, #0
 800151c:	d1f4      	bne.n	8001508 <InterProcessorTask+0x4>
 					}
 					// wait until transmission is successful
 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	2100      	movs	r1, #0
 8001524:	2010      	movs	r0, #16
 8001526:	f006 f8b3 	bl	8007690 <osThreadFlagsWait>
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 800152a:	2008      	movs	r0, #8
 800152c:	f006 f872 	bl	8007614 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8001530:	e002      	b.n	8001538 <InterProcessorTask+0x34>
 						osDelay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f006 f912 	bl	800775c <osDelay>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8001538:	23f0      	movs	r3, #240	; 0xf0
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <InterProcessorTask+0x150>)
 800153c:	21e6      	movs	r1, #230	; 0xe6
 800153e:	4844      	ldr	r0, [pc, #272]	; (8001650 <InterProcessorTask+0x14c>)
 8001540:	f002 f8d8 	bl	80036f4 <HAL_I2C_Master_Receive_IT>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f4      	bne.n	8001532 <InterProcessorTask+0x2e>
 					}
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	2100      	movs	r1, #0
 800154e:	200a      	movs	r0, #10
 8001550:	f006 f89e 	bl	8007690 <osThreadFlagsWait>
 8001554:	4607      	mov	r7, r0
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					// if thread was told to stop, STOP!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8001556:	f010 0f02 	tst.w	r0, #2
 800155a:	d160      	bne.n	800161e <InterProcessorTask+0x11a>
					// if evt is not a "stop logging" event
					if( (evt & 0x00000002U) != 0x00000002U){


						// package received data into 100ms chunks and put in queue
						memcpy(&parsedPacket.inferenceInfo, &receivedPacket.inertial.inferenceInfo, sizeof(struct inertialInferenceData));
 800155c:	4e3e      	ldr	r6, [pc, #248]	; (8001658 <InterProcessorTask+0x154>)
 800155e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001654 <InterProcessorTask+0x150>
 8001562:	f106 0428 	add.w	r4, r6, #40	; 0x28
 8001566:	f10c 05c8 	add.w	r5, ip, #200	; 0xc8
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						parsedPacket.tick_ms = receivedPacket.tick_ms;
 8001576:	f8dc 30e8 	ldr.w	r3, [ip, #232]	; 0xe8
 800157a:	64b3      	str	r3, [r6, #72]	; 0x48
						parsedPacket.epoch = receivedPacket.epoch;
 800157c:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 8001580:	64f3      	str	r3, [r6, #76]	; 0x4c

						for(int i = 0; i < 5; i++)
 8001582:	2600      	movs	r6, #0
 8001584:	e023      	b.n	80015ce <InterProcessorTask+0xca>
						{
							memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8001586:	4a33      	ldr	r2, [pc, #204]	; (8001654 <InterProcessorTask+0x150>)
 8001588:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800158c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8001658 <InterProcessorTask+0x154>
 8001590:	4664      	mov	r4, ip
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	c403      	stmia	r4!, {r0, r1}
							memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8001598:	1d73      	adds	r3, r6, #5
 800159a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	c403      	stmia	r4!, {r0, r1}
							memcpy(&parsedPacket.rotationMatrix, &receivedPacket.inertial.rotationMatrix[i], sizeof(struct rotationData));
 80015a4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80015a8:	00dd      	lsls	r5, r3, #3
 80015aa:	3550      	adds	r5, #80	; 0x50
 80015ac:	4415      	add	r5, r2
 80015ae:	6828      	ldr	r0, [r5, #0]
 80015b0:	6869      	ldr	r1, [r5, #4]
 80015b2:	68aa      	ldr	r2, [r5, #8]
 80015b4:	68eb      	ldr	r3, [r5, #12]
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	6928      	ldr	r0, [r5, #16]
 80015ba:	6969      	ldr	r1, [r5, #20]
 80015bc:	c403      	stmia	r4!, {r0, r1}

							// pass to master thread to handle
							osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 80015be:	2300      	movs	r3, #0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4661      	mov	r1, ip
 80015c4:	4825      	ldr	r0, [pc, #148]	; (800165c <InterProcessorTask+0x158>)
 80015c6:	6800      	ldr	r0, [r0, #0]
 80015c8:	f006 fb14 	bl	8007bf4 <osMessageQueuePut>
						for(int i = 0; i < 5; i++)
 80015cc:	3601      	adds	r6, #1
 80015ce:	2e04      	cmp	r6, #4
 80015d0:	ddd9      	ble.n	8001586 <InterProcessorTask+0x82>
//						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &receivedPacket, 0U, 0);
					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 80015d2:	f017 0f02 	tst.w	r7, #2
 80015d6:	d10d      	bne.n	80015f4 <InterProcessorTask+0xf0>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	2100      	movs	r1, #0
 80015de:	2006      	movs	r0, #6
 80015e0:	f006 f856 	bl	8007690 <osThreadFlagsWait>
 80015e4:	4607      	mov	r7, r0
 				if( (evt & 0x00000004U) == 0x00000004U){
 80015e6:	f010 0f04 	tst.w	r0, #4
 80015ea:	d0f2      	beq.n	80015d2 <InterProcessorTask+0xce>
 					osThreadFlagsClear(0x00000010U);
 80015ec:	2010      	movs	r0, #16
 80015ee:	f006 f811 	bl	8007614 <osThreadFlagsClear>
 					while(HAL_I2C_Master_Transmit_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &togLogMessageReceived, sizeof(struct LogMessage)) != HAL_OK){
 80015f2:	e78c      	b.n	800150e <InterProcessorTask+0xa>

					/// clear transmission flag
 					osThreadFlagsClear(0x00000010U);
 80015f4:	2010      	movs	r0, #16
 80015f6:	f006 f80d 	bl	8007614 <osThreadFlagsClear>
					// tell secondary processor to stop logging (in blocking mode)
					while(HAL_I2C_Master_Transmit_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &togLogMessageReceived, sizeof(togLogMessageReceived)) != HAL_OK);
 80015fa:	2306      	movs	r3, #6
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <InterProcessorTask+0x148>)
 80015fe:	21e6      	movs	r1, #230	; 0xe6
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <InterProcessorTask+0x14c>)
 8001602:	f002 f82b 	bl	800365c <HAL_I2C_Master_Transmit_IT>
 8001606:	2800      	cmp	r0, #0
 8001608:	d1f7      	bne.n	80015fa <InterProcessorTask+0xf6>
					// wait until transmit is complete
					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	2100      	movs	r1, #0
 8001610:	2010      	movs	r0, #16
 8001612:	f006 f83d 	bl	8007690 <osThreadFlagsWait>

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <InterProcessorTask+0x158>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f006 fb8f 	bl	8007d3c <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800161e:	f04f 32ff 	mov.w	r2, #4294967295
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f006 f833 	bl	8007690 <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 800162a:	2801      	cmp	r0, #1
 800162c:	d1f7      	bne.n	800161e <InterProcessorTask+0x11a>
			osThreadFlagsClear(0x0000000FU);
 800162e:	200f      	movs	r0, #15
 8001630:	f005 fff0 	bl	8007614 <osThreadFlagsClear>
			while(HAL_I2C_Master_Transmit_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &togLogMessageReceived, sizeof(togLogMessageReceived)) != HAL_OK);
 8001634:	2306      	movs	r3, #6
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <InterProcessorTask+0x148>)
 8001638:	21e6      	movs	r1, #230	; 0xe6
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <InterProcessorTask+0x14c>)
 800163c:	f002 f80e 	bl	800365c <HAL_I2C_Master_Transmit_IT>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1f7      	bne.n	8001634 <InterProcessorTask+0x130>
			HAL_Delay(100);
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f000 fd75 	bl	8002134 <HAL_Delay>
 800164a:	e7c5      	b.n	80015d8 <InterProcessorTask+0xd4>
 800164c:	20004244 	.word	0x20004244
 8001650:	20004350 	.word	0x20004350
 8001654:	2000439c 	.word	0x2000439c
 8001658:	2000448c 	.word	0x2000448c
 800165c:	20004254 	.word	0x20004254

08001660 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001660:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000010U);
 8001662:	2110      	movs	r1, #16
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_I2C_MasterTxCpltCallback+0x14>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	f005 ff8c 	bl	8007584 <osThreadFlagsSet>
	test_1 = 1;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_I2C_MasterTxCpltCallback+0x18>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
}
 8001672:	bd08      	pop	{r3, pc}
 8001674:	20004258 	.word	0x20004258
 8001678:	2000098c 	.word	0x2000098c

0800167c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800167c:	b508      	push	{r3, lr}
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
 800167e:	2108      	movs	r1, #8
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <HAL_I2C_MasterRxCpltCallback+0x10>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f005 ff7e 	bl	8007584 <osThreadFlagsSet>
}
 8001688:	bd08      	pop	{r3, pc}
 800168a:	bf00      	nop
 800168c:	20004258 	.word	0x20004258

08001690 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 8001690:	b530      	push	{r4, r5, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 8001694:	0040      	lsls	r0, r0, #1
 8001696:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 8001698:	2300      	movs	r3, #0
 800169a:	9307      	str	r3, [sp, #28]
 800169c:	9308      	str	r3, [sp, #32]
 800169e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80016a8:	b2ac      	uxth	r4, r5
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f10d 021b 	add.w	r2, sp, #27
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	4621      	mov	r1, r4
 80016be:	482d      	ldr	r0, [pc, #180]	; (8001774 <setup_LP5523+0xe4>)
 80016c0:	f002 f864 	bl	800378c <HAL_I2C_Mem_Write>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d1ef      	bne.n	80016a8 <setup_LP5523+0x18>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80016c8:	234f      	movs	r3, #79	; 0x4f
 80016ca:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	f10d 021b 	add.w	r2, sp, #27
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	2236      	movs	r2, #54	; 0x36
 80016e0:	4621      	mov	r1, r4
 80016e2:	4824      	ldr	r0, [pc, #144]	; (8001774 <setup_LP5523+0xe4>)
 80016e4:	f002 f852 	bl	800378c <HAL_I2C_Mem_Write>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d1f0      	bne.n	80016ce <setup_LP5523+0x3e>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2309      	movs	r3, #9
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	ab07      	add	r3, sp, #28
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2216      	movs	r2, #22
 80016fe:	4621      	mov	r1, r4
 8001700:	481c      	ldr	r0, [pc, #112]	; (8001774 <setup_LP5523+0xe4>)
 8001702:	f002 f843 	bl	800378c <HAL_I2C_Mem_Write>
 8001706:	2800      	cmp	r0, #0
 8001708:	d1f0      	bne.n	80016ec <setup_LP5523+0x5c>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2309      	movs	r3, #9
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <setup_LP5523+0xe8>)
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	2226      	movs	r2, #38	; 0x26
 800171c:	4621      	mov	r1, r4
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <setup_LP5523+0xe4>)
 8001720:	f002 f834 	bl	800378c <HAL_I2C_Mem_Write>
 8001724:	2800      	cmp	r0, #0
 8001726:	d1f0      	bne.n	800170a <setup_LP5523+0x7a>

	// enable logarithmic dimming
	packet = LOG_EN;
 8001728:	2320      	movs	r3, #32
 800172a:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 800172e:	f88d 3010 	strb.w	r3, [sp, #16]
 8001732:	f88d 3011 	strb.w	r3, [sp, #17]
 8001736:	f88d 3012 	strb.w	r3, [sp, #18]
 800173a:	f88d 3013 	strb.w	r3, [sp, #19]
 800173e:	f88d 3014 	strb.w	r3, [sp, #20]
 8001742:	f88d 3015 	strb.w	r3, [sp, #21]
 8001746:	f88d 3016 	strb.w	r3, [sp, #22]
 800174a:	f88d 3017 	strb.w	r3, [sp, #23]
 800174e:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2309      	movs	r3, #9
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	ab04      	add	r3, sp, #16
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	2206      	movs	r2, #6
 8001764:	4621      	mov	r1, r4
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <setup_LP5523+0xe4>)
 8001768:	f002 f810 	bl	800378c <HAL_I2C_Mem_Write>
 800176c:	2800      	cmp	r0, #0
 800176e:	d1f0      	bne.n	8001752 <setup_LP5523+0xc2>

}
 8001770:	b00b      	add	sp, #44	; 0x2c
 8001772:	bd30      	pop	{r4, r5, pc}
 8001774:	20004350 	.word	0x20004350
 8001778:	20000004 	.word	0x20000004

0800177c <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	4603      	mov	r3, r0
	memcpy(led_left_PWM, setColors, 9);
 8001782:	f8df c058 	ldr.w	ip, [pc, #88]	; 80017dc <FrontLightsSet+0x60>
 8001786:	4662      	mov	r2, ip
 8001788:	6800      	ldr	r0, [r0, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	c203      	stmia	r2!, {r0, r1}
 800178e:	7a19      	ldrb	r1, [r3, #8]
 8001790:	7011      	strb	r1, [r2, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8001792:	4d10      	ldr	r5, [pc, #64]	; (80017d4 <FrontLightsSet+0x58>)
 8001794:	462a      	mov	r2, r5
 8001796:	f853 0f09 	ldr.w	r0, [r3, #9]!
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	c203      	stmia	r2!, {r0, r1}
 800179e:	7a1b      	ldrb	r3, [r3, #8]
 80017a0:	7013      	strb	r3, [r2, #0]
#ifndef DONGLE_CODE
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80017a2:	4c0d      	ldr	r4, [pc, #52]	; (80017d8 <FrontLightsSet+0x5c>)
 80017a4:	f04f 37ff 	mov.w	r7, #4294967295
 80017a8:	9702      	str	r7, [sp, #8]
 80017aa:	2609      	movs	r6, #9
 80017ac:	9601      	str	r6, [sp, #4]
 80017ae:	f8cd c000 	str.w	ip, [sp]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2216      	movs	r2, #22
 80017b6:	2168      	movs	r1, #104	; 0x68
 80017b8:	4620      	mov	r0, r4
 80017ba:	f001 ffe7 	bl	800378c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80017be:	9702      	str	r7, [sp, #8]
 80017c0:	9601      	str	r6, [sp, #4]
 80017c2:	9500      	str	r5, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	2216      	movs	r2, #22
 80017c8:	216a      	movs	r1, #106	; 0x6a
 80017ca:	4620      	mov	r0, r4
 80017cc:	f001 ffde 	bl	800378c <HAL_I2C_Mem_Write>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80017d0:	b005      	add	sp, #20
 80017d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d4:	2000099c 	.word	0x2000099c
 80017d8:	20004350 	.word	0x20004350
 80017dc:	20000990 	.word	0x20000990

080017e0 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	b086      	sub	sp, #24
#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80017e4:	2034      	movs	r0, #52	; 0x34
 80017e6:	f7ff ff53 	bl	8001690 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80017ea:	2035      	movs	r0, #53	; 0x35
 80017ec:	f7ff ff50 	bl	8001690 <setup_LP5523>
 80017f0:	e02d      	b.n	800184e <ThreadFrontLightsTask+0x6e>

//		// REMOVE BELOW
//		lightsSimpleMessageReceived = 0X00005229;

		for(int i = 0; i<= 8; i++){
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80017f2:	9b05      	ldr	r3, [sp, #20]
 80017f4:	f343 0000 	sbfx	r0, r3, #0, #1
 80017f8:	491b      	ldr	r1, [pc, #108]	; (8001868 <ThreadFrontLightsTask+0x88>)
 80017fa:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 8001800:	3201      	adds	r2, #1
 8001802:	2a08      	cmp	r2, #8
 8001804:	ddf5      	ble.n	80017f2 <ThreadFrontLightsTask+0x12>
		}

		for(int i = 0; i<= 8; i++){
 8001806:	2200      	movs	r2, #0
 8001808:	e007      	b.n	800181a <ThreadFrontLightsTask+0x3a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800180a:	9b05      	ldr	r3, [sp, #20]
 800180c:	f343 0000 	sbfx	r0, r3, #0, #1
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <ThreadFrontLightsTask+0x8c>)
 8001812:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 8001818:	3201      	adds	r2, #1
 800181a:	2a08      	cmp	r2, #8
 800181c:	ddf5      	ble.n	800180a <ThreadFrontLightsTask+0x2a>


		//HAL_I2C_Mem_Write_IT(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_PWM, 9);
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);

		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800181e:	4c14      	ldr	r4, [pc, #80]	; (8001870 <ThreadFrontLightsTask+0x90>)
 8001820:	f04f 36ff 	mov.w	r6, #4294967295
 8001824:	9602      	str	r6, [sp, #8]
 8001826:	2509      	movs	r5, #9
 8001828:	9501      	str	r5, [sp, #4]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <ThreadFrontLightsTask+0x88>)
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	2216      	movs	r2, #22
 8001832:	2168      	movs	r1, #104	; 0x68
 8001834:	4620      	mov	r0, r4
 8001836:	f001 ffa9 	bl	800378c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800183a:	9602      	str	r6, [sp, #8]
 800183c:	9501      	str	r5, [sp, #4]
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <ThreadFrontLightsTask+0x8c>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	2216      	movs	r2, #22
 8001846:	216a      	movs	r1, #106	; 0x6a
 8001848:	4620      	mov	r0, r4
 800184a:	f001 ff9f 	bl	800378c <HAL_I2C_Mem_Write>
		lightsSimpleMessageReceived = 0;
 800184e:	2400      	movs	r4, #0
 8001850:	a906      	add	r1, sp, #24
 8001852:	f841 4d04 	str.w	r4, [r1, #-4]!
		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	4622      	mov	r2, r4
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <ThreadFrontLightsTask+0x94>)
 800185e:	6800      	ldr	r0, [r0, #0]
 8001860:	f006 fa1a 	bl	8007c98 <osMessageQueueGet>
		for(int i = 0; i<= 8; i++){
 8001864:	4622      	mov	r2, r4
 8001866:	e7cc      	b.n	8001802 <ThreadFrontLightsTask+0x22>
 8001868:	20000990 	.word	0x20000990
 800186c:	2000099c 	.word	0x2000099c
 8001870:	20004350 	.word	0x20004350
 8001874:	20004338 	.word	0x20004338

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187c:	2248      	movs	r2, #72	; 0x48
 800187e:	2100      	movs	r1, #0
 8001880:	a81c      	add	r0, sp, #112	; 0x70
 8001882:	f00a fae0 	bl	800be46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001886:	2400      	movs	r4, #0
 8001888:	9415      	str	r4, [sp, #84]	; 0x54
 800188a:	9416      	str	r4, [sp, #88]	; 0x58
 800188c:	9417      	str	r4, [sp, #92]	; 0x5c
 800188e:	9418      	str	r4, [sp, #96]	; 0x60
 8001890:	9419      	str	r4, [sp, #100]	; 0x64
 8001892:	941a      	str	r4, [sp, #104]	; 0x68
 8001894:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001896:	2250      	movs	r2, #80	; 0x50
 8001898:	4621      	mov	r1, r4
 800189a:	a801      	add	r0, sp, #4
 800189c:	f00a fad3 	bl	800be46 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018aa:	f042 0210 	orr.w	r2, r2, #16
 80018ae:	60da      	str	r2, [r3, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	f042 0203 	orr.w	r2, r2, #3
 80018b6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018bc:	f022 0218 	bic.w	r2, r2, #24
 80018c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <SystemClock_Config+0xe4>)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80018dc:	230f      	movs	r3, #15
 80018de:	931c      	str	r3, [sp, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018e6:	2701      	movs	r7, #1
 80018e8:	971e      	str	r7, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ea:	f44f 7680 	mov.w	r6, #256	; 0x100
 80018ee:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018f4:	2305      	movs	r3, #5
 80018f6:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f8:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	a81c      	add	r0, sp, #112	; 0x70
 80018fc:	f002 fe00 	bl	8004500 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001900:	236f      	movs	r3, #111	; 0x6f
 8001902:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001904:	2502      	movs	r5, #2
 8001906:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001908:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800190a:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190c:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800190e:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001910:	941b      	str	r4, [sp, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001912:	4639      	mov	r1, r7
 8001914:	a815      	add	r0, sp, #84	; 0x54
 8001916:	f003 f97d 	bl	8004c14 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800191a:	f643 4305 	movw	r3, #15365	; 0x3c05
 800191e:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001920:	2306      	movs	r3, #6
 8001922:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001928:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800192a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001930:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001934:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001936:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800193a:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800193c:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800193e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001942:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001944:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001946:	9611      	str	r6, [sp, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8001948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800194e:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001950:	9414      	str	r4, [sp, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001952:	a801      	add	r0, sp, #4
 8001954:	f003 fc19 	bl	800518a <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001958:	b02f      	add	sp, #188	; 0xbc
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195c:	58000400 	.word	0x58000400

08001960 <main>:
{
 8001960:	b508      	push	{r3, lr}
  HAL_Init();
 8001962:	f000 fbb9 	bl	80020d8 <HAL_Init>
  SystemClock_Config();
 8001966:	f7ff ff87 	bl	8001878 <SystemClock_Config>
  MX_GPIO_Init();
 800196a:	f7ff f923 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f7ff f83d 	bl	80009ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001972:	f7fe fd8f 	bl	8000494 <MX_ADC1_Init>
  MX_RTC_Init();
 8001976:	f000 f92d 	bl	8001bd4 <MX_RTC_Init>
  MX_TIM2_Init();
 800197a:	f000 fab3 	bl	8001ee4 <MX_TIM2_Init>
  MX_RF_Init();
 800197e:	f000 f927 	bl	8001bd0 <MX_RF_Init>
  MX_USART1_UART_Init();
 8001982:	f000 fb09 	bl	8001f98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001986:	f7ff fd57 	bl	8001438 <MX_I2C1_Init>
  MX_FREERTOS_Init();
 800198a:	f7fe feeb 	bl	8000764 <MX_FREERTOS_Init>
  osKernelStart();
 800198e:	f005 fd5f 	bl	8007450 <osKernelStart>
 8001992:	e7fe      	b.n	8001992 <main+0x32>

08001994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001996:	6802      	ldr	r2, [r0, #0]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800199a:	429a      	cmp	r2, r3
 800199c:	d000      	beq.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80019a0:	f000 fbb0 	bl	8002104 <HAL_IncTick>
}
 80019a4:	e7fb      	b.n	800199e <HAL_TIM_PeriodElapsedCallback+0xa>
 80019a6:	bf00      	nop
 80019a8:	40012c00 	.word	0x40012c00

080019ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019ac:	4770      	bx	lr
	...

080019b0 <RTC_ToEpoch>:
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80019b0:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80019b2:	784b      	ldrb	r3, [r1, #1]
 80019b4:	f1c3 040e 	rsb	r4, r3, #14
 80019b8:	4d22      	ldr	r5, [pc, #136]	; (8001a44 <RTC_ToEpoch+0x94>)
 80019ba:	fb85 2504 	smull	r2, r5, r5, r4
 80019be:	17e2      	asrs	r2, r4, #31
 80019c0:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 80019c4:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80019c6:	78cc      	ldrb	r4, [r1, #3]
 80019c8:	1aa4      	subs	r4, r4, r2
 80019ca:	f641 2590 	movw	r5, #6800	; 0x1a90
 80019ce:	fa15 f484 	uxtah	r4, r5, r4
 80019d2:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 80019d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019d8:	0095      	lsls	r5, r2, #2
 80019da:	442b      	add	r3, r5
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3b03      	subs	r3, #3
 80019e0:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 80019e2:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 80019e4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80019e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80019ec:	3302      	adds	r3, #2
 80019ee:	4916      	ldr	r1, [pc, #88]	; (8001a48 <RTC_ToEpoch+0x98>)
 80019f0:	fb81 1303 	smull	r1, r3, r1, r3
 80019f4:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 80019f8:	f240 136d 	movw	r3, #365	; 0x16d
 80019fc:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 8001a00:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 8001a04:	4262      	negs	r2, r4
 8001a06:	4911      	ldr	r1, [pc, #68]	; (8001a4c <RTC_ToEpoch+0x9c>)
 8001a08:	fb81 c502 	smull	ip, r5, r1, r2
 8001a0c:	17d2      	asrs	r2, r2, #31
 8001a0e:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 8001a12:	441a      	add	r2, r3
    JDN += y / 400;
 8001a14:	fba1 3404 	umull	r3, r4, r1, r4
 8001a18:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <RTC_ToEpoch+0xa0>)
 8001a1e:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8001a20:	7801      	ldrb	r1, [r0, #0]
 8001a22:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a26:	fb02 f201 	mul.w	r2, r2, r1
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <RTC_ToEpoch+0xa4>)
 8001a2c:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8001a30:	7842      	ldrb	r2, [r0, #1]
 8001a32:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001a36:	0091      	lsls	r1, r2, #2
 8001a38:	440b      	add	r3, r1
    JDN += time->Seconds;
 8001a3a:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8001a3c:	4418      	add	r0, r3
 8001a3e:	bc30      	pop	{r4, r5}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2aaaaaab 	.word	0x2aaaaaab
 8001a48:	66666667 	.word	0x66666667
 8001a4c:	51eb851f 	.word	0x51eb851f
 8001a50:	ffda4547 	.word	0xffda4547
 8001a54:	00015180 	.word	0x00015180

08001a58 <packetizeData>:
{
 8001a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	4689      	mov	r9, r1
 8001a60:	4698      	mov	r8, r3
	packet->tick_ms = HAL_GetTick();
 8001a62:	f000 fb5b 	bl	800211c <HAL_GetTick>
 8001a66:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8001a6a:	4d10      	ldr	r5, [pc, #64]	; (8001aac <packetizeData+0x54>)
 8001a6c:	4f10      	ldr	r7, [pc, #64]	; (8001ab0 <packetizeData+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4629      	mov	r1, r5
 8001a72:	4638      	mov	r0, r7
 8001a74:	f003 fdc0 	bl	80055f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8001a78:	4e0e      	ldr	r6, [pc, #56]	; (8001ab4 <packetizeData+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4631      	mov	r1, r6
 8001a7e:	4638      	mov	r0, r7
 8001a80:	f003 fde5 	bl	800564e <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8001a84:	4631      	mov	r1, r6
 8001a86:	4628      	mov	r0, r5
 8001a88:	f7ff ff92 	bl	80019b0 <RTC_ToEpoch>
 8001a8c:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 8001a90:	226c      	movs	r2, #108	; 0x6c
 8001a92:	4649      	mov	r1, r9
 8001a94:	4620      	mov	r0, r4
 8001a96:	f00a f9cb 	bl	800be30 <memcpy>
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
 8001a9a:	2250      	movs	r2, #80	; 0x50
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8001aa2:	f00a f9c5 	bl	800be30 <memcpy>
}
 8001aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001aaa:	bf00      	nop
 8001aac:	20004548 	.word	0x20004548
 8001ab0:	200045b0 	.word	0x200045b0
 8001ab4:	200045ac 	.word	0x200045ac

08001ab8 <MasterThreadTask>:
{
 8001ab8:	b508      	push	{r3, lr}
 8001aba:	e028      	b.n	8001b0e <MasterThreadTask+0x56>
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8001abc:	2101      	movs	r1, #1
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <MasterThreadTask+0xf0>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f005 fd5f 	bl	8007584 <osThreadFlagsSet>
 8001ac6:	e036      	b.n	8001b36 <MasterThreadTask+0x7e>
				osThreadFlagsSet(interProcessorTaskHandle, 0x00000001U);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <MasterThreadTask+0xf4>)
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	f005 fd59 	bl	8007584 <osThreadFlagsSet>
 8001ad2:	e038      	b.n	8001b46 <MasterThreadTask+0x8e>
					osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, osWaitForever);
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <MasterThreadTask+0xf8>)
 8001adc:	4835      	ldr	r0, [pc, #212]	; (8001bb4 <MasterThreadTask+0xfc>)
 8001ade:	6800      	ldr	r0, [r0, #0]
 8001ae0:	f006 f8da 	bl	8007c98 <osMessageQueueGet>
 8001ae4:	e033      	b.n	8001b4e <MasterThreadTask+0x96>
					osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, osWaitForever);
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	2200      	movs	r2, #0
 8001aec:	4932      	ldr	r1, [pc, #200]	; (8001bb8 <MasterThreadTask+0x100>)
 8001aee:	4833      	ldr	r0, [pc, #204]	; (8001bbc <MasterThreadTask+0x104>)
 8001af0:	6800      	ldr	r0, [r0, #0]
 8001af2:	f006 f8d1 	bl	8007c98 <osMessageQueueGet>
 8001af6:	e032      	b.n	8001b5e <MasterThreadTask+0xa6>
							osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8001af8:	2102      	movs	r1, #2
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <MasterThreadTask+0xf0>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f005 fd41 	bl	8007584 <osThreadFlagsSet>
 8001b02:	e047      	b.n	8001b94 <MasterThreadTask+0xdc>
							osThreadFlagsSet(interProcessorTaskHandle, 0x00000002U);
 8001b04:	2102      	movs	r1, #2
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <MasterThreadTask+0xf4>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f005 fd3b 	bl	8007584 <osThreadFlagsSet>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8001b0e:	4c2c      	ldr	r4, [pc, #176]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
 8001b14:	2200      	movs	r2, #0
 8001b16:	4621      	mov	r1, r4
 8001b18:	482a      	ldr	r0, [pc, #168]	; (8001bc4 <MasterThreadTask+0x10c>)
 8001b1a:	6800      	ldr	r0, [r0, #0]
 8001b1c:	f006 f8bc 	bl	8007c98 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8001b20:	7863      	ldrb	r3, [r4, #1]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d1f3      	bne.n	8001b0e <MasterThreadTask+0x56>
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8001b26:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <MasterThreadTask+0x110>)
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	6011      	str	r1, [r2, #0]
 8001b2c:	88a1      	ldrh	r1, [r4, #4]
 8001b2e:	8091      	strh	r1, [r2, #4]
			if(togLogMessageReceived.blinkEnabled == SENSOR_ENABLE)
 8001b30:	78a3      	ldrb	r3, [r4, #2]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d0c2      	beq.n	8001abc <MasterThreadTask+0x4>
			if( (togLogMessageReceived.tempEnabled == SENSOR_ENABLE) || (togLogMessageReceived.intertialEnabled == SENSOR_ENABLE) )
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b38:	78db      	ldrb	r3, [r3, #3]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d0c4      	beq.n	8001ac8 <MasterThreadTask+0x10>
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d0c0      	beq.n	8001ac8 <MasterThreadTask+0x10>
				if(togLogMessageReceived.blinkEnabled == SENSOR_ENABLE)
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d0c2      	beq.n	8001ad4 <MasterThreadTask+0x1c>
				if( (togLogMessageReceived.tempEnabled == SENSOR_ENABLE) || (togLogMessageReceived.intertialEnabled == SENSOR_ENABLE) )
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b50:	78db      	ldrb	r3, [r3, #3]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d0c7      	beq.n	8001ae6 <MasterThreadTask+0x2e>
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d0c3      	beq.n	8001ae6 <MasterThreadTask+0x2e>
				packetizeData(&sensorPacket, &blinkMsgReceived, NULL, &secondaryProcessorMsgReceived);
 8001b5e:	4c1b      	ldr	r4, [pc, #108]	; (8001bcc <MasterThreadTask+0x114>)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MasterThreadTask+0x100>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <MasterThreadTask+0xf8>)
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff ff76 	bl	8001a58 <packetizeData>
				APP_THREAD_SendBorderPacket(&sensorPacket);
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f009 fec1 	bl	800b8f4 <APP_THREAD_SendBorderPacket>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8001b72:	2300      	movs	r3, #0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4912      	ldr	r1, [pc, #72]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b78:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <MasterThreadTask+0x10c>)
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	f006 f88c 	bl	8007c98 <osMessageQueueGet>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d1e0      	bne.n	8001b46 <MasterThreadTask+0x8e>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MasterThreadTask+0x108>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1dc      	bne.n	8001b46 <MasterThreadTask+0x8e>
						if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MasterThreadTask+0x110>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d0b1      	beq.n	8001af8 <MasterThreadTask+0x40>
						if( (prevLogMessage.tempEnabled == SENSOR_ENABLE) || (prevLogMessage.intertialEnabled == SENSOR_ENABLE) )
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MasterThreadTask+0x110>)
 8001b96:	78db      	ldrb	r3, [r3, #3]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d0b3      	beq.n	8001b04 <MasterThreadTask+0x4c>
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MasterThreadTask+0x110>)
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d1b4      	bne.n	8001b0e <MasterThreadTask+0x56>
 8001ba4:	e7ae      	b.n	8001b04 <MasterThreadTask+0x4c>
 8001ba6:	bf00      	nop
 8001ba8:	2000423c 	.word	0x2000423c
 8001bac:	20004258 	.word	0x20004258
 8001bb0:	200044dc 	.word	0x200044dc
 8001bb4:	20004330 	.word	0x20004330
 8001bb8:	2000455c 	.word	0x2000455c
 8001bbc:	20004254 	.word	0x20004254
 8001bc0:	20004244 	.word	0x20004244
 8001bc4:	20004320 	.word	0x20004320
 8001bc8:	20004328 	.word	0x20004328
 8001bcc:	2000425c 	.word	0x2000425c

08001bd0 <MX_RF_Init>:

/* RF init function */
void MX_RF_Init(void)
{

}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bd4:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001bd6:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <MX_RTC_Init+0x24>)
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_RTC_Init+0x28>)
 8001bda:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001be0:	230f      	movs	r3, #15
 8001be2:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001be4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001be8:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bea:	f003 fc8f 	bl	800550c <HAL_RTC_Init>
 8001bee:	b900      	cbnz	r0, 8001bf2 <MX_RTC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8001bf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bf2:	f7ff fedb 	bl	80019ac <Error_Handler>
}
 8001bf6:	e7fb      	b.n	8001bf0 <MX_RTC_Init+0x1c>
 8001bf8:	200045b0 	.word	0x200045b0
 8001bfc:	40002800 	.word	0x40002800

08001c00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001c00:	6802      	ldr	r2, [r0, #0]
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RTC_MspInit+0x1c>)
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d000      	beq.n	8001c0a <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c08:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	e7f5      	b.n	8001c08 <HAL_RTC_MspInit+0x8>
 8001c1c:	40002800 	.word	0x40002800

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b500      	push	{lr}
 8001c22:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c2e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c36:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c38:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	f06f 0001 	mvn.w	r0, #1
 8001c42:	f000 ffab 	bl	8002b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	202c      	movs	r0, #44	; 0x2c
 8001c4c:	f000 ffa6 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	210f      	movs	r1, #15
 8001c54:	202d      	movs	r0, #45	; 0x2d
 8001c56:	f000 ffa1 	bl	8002b9c <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001c5a:	b003      	add	sp, #12
 8001c5c:	f85d fb04 	ldr.w	pc, [sp], #4

08001c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b500      	push	{lr}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001c64:	2200      	movs	r2, #0
 8001c66:	4601      	mov	r1, r0
 8001c68:	2019      	movs	r0, #25
 8001c6a:	f000 ff97 	bl	8002b9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001c6e:	2019      	movs	r0, #25
 8001c70:	f000 ffc8 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c88:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c8a:	a902      	add	r1, sp, #8
 8001c8c:	a803      	add	r0, sp, #12
 8001c8e:	f003 f981 	bl	8004f94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c92:	f003 f96d 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_InitTick+0x6c>)
 8001c98:	fba3 2300 	umull	r2, r3, r3, r0
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <HAL_InitTick+0x70>)
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_InitTick+0x74>)
 8001ca4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001ca6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001caa:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cac:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cb4:	f003 ff6e 	bl	8005b94 <HAL_TIM_Base_Init>
 8001cb8:	b118      	cbz	r0, 8001cc2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
}
 8001cbc:	b00b      	add	sp, #44	; 0x2c
 8001cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <HAL_InitTick+0x70>)
 8001cc4:	f003 fe46 	bl	8005954 <HAL_TIM_Base_Start_IT>
 8001cc8:	e7f8      	b.n	8001cbc <HAL_InitTick+0x5c>
 8001cca:	bf00      	nop
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	200045d4 	.word	0x200045d4
 8001cd4:	40012c00 	.word	0x40012c00

08001cd8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd8:	4770      	bx	lr

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler>

08001ce2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	4770      	bx	lr

08001ce4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ce4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ce6:	2004      	movs	r0, #4
 8001ce8:	f001 fa88 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcessorTaskHandle, 0x00000004U);
 8001cec:	2104      	movs	r1, #4
 8001cee:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <EXTI2_IRQHandler+0x14>)
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	f005 fc47 	bl	8007584 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	20004258 	.word	0x20004258

08001cfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cfe:	4802      	ldr	r0, [pc, #8]	; (8001d08 <DMA1_Channel1_IRQHandler+0xc>)
 8001d00:	f001 f957 	bl	8002fb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d04:	bd08      	pop	{r3, pc}
 8001d06:	bf00      	nop
 8001d08:	200041d8 	.word	0x200041d8

08001d0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d0e:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8001d10:	f003 fe3b 	bl	800598a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d14:	bd08      	pop	{r3, pc}
 8001d16:	bf00      	nop
 8001d18:	200045d4 	.word	0x200045d4

08001d1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <I2C1_EV_IRQHandler+0xc>)
 8001d20:	f001 fe06 	bl	8003930 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d24:	bd08      	pop	{r3, pc}
 8001d26:	bf00      	nop
 8001d28:	20004350 	.word	0x20004350

08001d2c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d2c:	b508      	push	{r3, lr}
  HW_IPCC_Tx_Handler();
 8001d2e:	f009 ff79 	bl	800bc24 <HW_IPCC_Tx_Handler>

  return;
}
 8001d32:	bd08      	pop	{r3, pc}

08001d34 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001d34:	b508      	push	{r3, lr}
  HW_IPCC_Rx_Handler();
 8001d36:	f009 fff1 	bl	800bd1c <HW_IPCC_Rx_Handler>
  return;
}
 8001d3a:	bd08      	pop	{r3, pc}

08001d3c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001d3c:	b40c      	push	{r2, r3}
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8001d3e:	b002      	add	sp, #8
 8001d40:	4770      	bx	lr
	...

08001d44 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <SystemInit+0x5c>)
 8001d46:	2100      	movs	r1, #0
 8001d48:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d4e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d62:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d66:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001d6e:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001d72:	4002      	ands	r2, r0
 8001d74:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001d7a:	f022 0205 	bic.w	r2, r2, #5
 8001d7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d82:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <SystemInit+0x60>)
 8001d90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001d92:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d9c:	6199      	str	r1, [r3, #24]
}
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	22041000 	.word	0x22041000

08001da8 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001db2:	4929      	ldr	r1, [pc, #164]	; (8001e58 <SystemCoreClockUpdate+0xb0>)
 8001db4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db8:	6893      	ldr	r3, [r2, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d846      	bhi.n	8001e50 <SystemCoreClockUpdate+0xa8>
 8001dc2:	e8df f003 	tbb	[pc, r3]
 8001dc6:	4507      	.short	0x4507
 8001dc8:	45174545 	.word	0x45174545
 8001dcc:	451b4545 	.word	0x451b4545
 8001dd0:	4545      	.short	0x4545
 8001dd2:	1f          	.byte	0x1f
 8001dd3:	00          	.byte	0x00
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001dd6:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <SystemCoreClockUpdate+0xb8>)
 8001de4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df0:	6013      	str	r3, [r2, #0]

}
 8001df2:	4770      	bx	lr
        SystemCoreClock = HSI_VALUE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <SystemCoreClockUpdate+0xbc>)
 8001df8:	601a      	str	r2, [r3, #0]
      break;
 8001dfa:	e7ed      	b.n	8001dd8 <SystemCoreClockUpdate+0x30>
      SystemCoreClock = HSE_VALUE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <SystemCoreClockUpdate+0xc0>)
 8001e00:	601a      	str	r2, [r3, #0]
      break;
 8001e02:	e7e9      	b.n	8001dd8 <SystemCoreClockUpdate+0x30>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e14:	3301      	adds	r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001e16:	2a02      	cmp	r2, #2
 8001e18:	d012      	beq.n	8001e40 <SystemCoreClockUpdate+0x98>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001e1a:	2a03      	cmp	r2, #3
 8001e1c:	d014      	beq.n	8001e48 <SystemCoreClockUpdate+0xa0>
        pllvco = (msirange / pllm);
 8001e1e:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e26:	68ca      	ldr	r2, [r1, #12]
 8001e28:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001e2c:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001e30:	68ca      	ldr	r2, [r1, #12]
 8001e32:	0f52      	lsrs	r2, r2, #29
 8001e34:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 8001e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001e3c:	6013      	str	r3, [r2, #0]
      break;
 8001e3e:	e7cb      	b.n	8001dd8 <SystemCoreClockUpdate+0x30>
        pllvco = (HSI_VALUE / pllm);
 8001e40:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <SystemCoreClockUpdate+0xbc>)
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	e7ec      	b.n	8001e22 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSE_VALUE / pllm);
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemCoreClockUpdate+0xc0>)
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	e7e8      	b.n	8001e22 <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <SystemCoreClockUpdate+0xb4>)
 8001e52:	6019      	str	r1, [r3, #0]
      break;
 8001e54:	e7c0      	b.n	8001dd8 <SystemCoreClockUpdate+0x30>
 8001e56:	bf00      	nop
 8001e58:	0800c004 	.word	0x0800c004
 8001e5c:	20000010 	.word	0x20000010
 8001e60:	0800bfa4 	.word	0x0800bfa4
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	01e84800 	.word	0x01e84800

08001e6c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001e6c:	6803      	ldr	r3, [r0, #0]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e72:	d000      	beq.n	8001e76 <HAL_TIM_Base_MspInit+0xa>
 8001e74:	4770      	bx	lr
{
 8001e76:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e8c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e8e:	b002      	add	sp, #8
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e94:	b500      	push	{lr}
 8001e96:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	9303      	str	r3, [sp, #12]
 8001ea0:	9304      	str	r3, [sp, #16]
 8001ea2:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eaa:	d002      	beq.n	8001eb2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eac:	b007      	add	sp, #28
 8001eae:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb8:	f042 0202 	orr.w	r2, r2, #2
 8001ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001ec6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	a901      	add	r1, sp, #4
 8001ed6:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <HAL_TIM_MspPostInit+0x4c>)
 8001ed8:	f001 f8ce 	bl	8003078 <HAL_GPIO_Init>
}
 8001edc:	e7e6      	b.n	8001eac <HAL_TIM_MspPostInit+0x18>
 8001ede:	bf00      	nop
 8001ee0:	48000400 	.word	0x48000400

08001ee4 <MX_TIM2_Init>:
{
 8001ee4:	b500      	push	{lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee8:	2300      	movs	r3, #0
 8001eea:	930a      	str	r3, [sp, #40]	; 0x28
 8001eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8001eee:	930c      	str	r3, [sp, #48]	; 0x30
 8001ef0:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef2:	9307      	str	r3, [sp, #28]
 8001ef4:	9308      	str	r3, [sp, #32]
 8001ef6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	9303      	str	r3, [sp, #12]
 8001f00:	9304      	str	r3, [sp, #16]
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8001f06:	4823      	ldr	r0, [pc, #140]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 639;
 8001f0e:	f240 227f 	movw	r2, #639	; 0x27f
 8001f12:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 8001f16:	2209      	movs	r2, #9
 8001f18:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f1e:	f003 fe39 	bl	8005b94 <HAL_TIM_Base_Init>
 8001f22:	bb40      	cbnz	r0, 8001f76 <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	a90e      	add	r1, sp, #56	; 0x38
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f30:	f003 ff44 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 8001f34:	bb10      	cbnz	r0, 8001f7c <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f38:	f003 fe45 	bl	8005bc6 <HAL_TIM_PWM_Init>
 8001f3c:	bb08      	cbnz	r0, 8001f82 <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f46:	a907      	add	r1, sp, #28
 8001f48:	4812      	ldr	r0, [pc, #72]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f4a:	f004 f819 	bl	8005f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	b9d8      	cbnz	r0, 8001f88 <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f50:	2360      	movs	r3, #96	; 0x60
 8001f52:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 7;
 8001f54:	2307      	movs	r3, #7
 8001f56:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4669      	mov	r1, sp
 8001f62:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f64:	f003 fe84 	bl	8005c70 <HAL_TIM_PWM_ConfigChannel>
 8001f68:	b988      	cbnz	r0, 8001f8e <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8001f6a:	480a      	ldr	r0, [pc, #40]	; (8001f94 <MX_TIM2_Init+0xb0>)
 8001f6c:	f7ff ff92 	bl	8001e94 <HAL_TIM_MspPostInit>
}
 8001f70:	b00f      	add	sp, #60	; 0x3c
 8001f72:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f76:	f7ff fd19 	bl	80019ac <Error_Handler>
 8001f7a:	e7d3      	b.n	8001f24 <MX_TIM2_Init+0x40>
    Error_Handler();
 8001f7c:	f7ff fd16 	bl	80019ac <Error_Handler>
 8001f80:	e7d9      	b.n	8001f36 <MX_TIM2_Init+0x52>
    Error_Handler();
 8001f82:	f7ff fd13 	bl	80019ac <Error_Handler>
 8001f86:	e7da      	b.n	8001f3e <MX_TIM2_Init+0x5a>
    Error_Handler();
 8001f88:	f7ff fd10 	bl	80019ac <Error_Handler>
 8001f8c:	e7e0      	b.n	8001f50 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8001f8e:	f7ff fd0d 	bl	80019ac <Error_Handler>
 8001f92:	e7ea      	b.n	8001f6a <MX_TIM2_Init+0x86>
 8001f94:	20004614 	.word	0x20004614

08001f98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f98:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001f9a:	4818      	ldr	r0, [pc, #96]	; (8001ffc <MX_USART1_UART_Init+0x64>)
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_USART1_UART_Init+0x68>)
 8001f9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001fa0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fa4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001faa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fae:	220c      	movs	r2, #12
 8001fb0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001fb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fb8:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fba:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fbc:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbe:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fc0:	f005 f94d 	bl	800725e <HAL_UART_Init>
 8001fc4:	b970      	cbnz	r0, 8001fe4 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x64>)
 8001fca:	f005 f9d4 	bl	8007376 <HAL_UARTEx_SetTxFifoThreshold>
 8001fce:	b960      	cbnz	r0, 8001fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <MX_USART1_UART_Init+0x64>)
 8001fd4:	f005 f9f4 	bl	80073c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fd8:	b950      	cbnz	r0, 8001ff0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x64>)
 8001fdc:	f005 f9ac 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 8001fe0:	b948      	cbnz	r0, 8001ff6 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }

}
 8001fe2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001fe4:	f7ff fce2 	bl	80019ac <Error_Handler>
 8001fe8:	e7ed      	b.n	8001fc6 <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8001fea:	f7ff fcdf 	bl	80019ac <Error_Handler>
 8001fee:	e7ef      	b.n	8001fd0 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8001ff0:	f7ff fcdc 	bl	80019ac <Error_Handler>
 8001ff4:	e7f1      	b.n	8001fda <MX_USART1_UART_Init+0x42>
    Error_Handler();
 8001ff6:	f7ff fcd9 	bl	80019ac <Error_Handler>
}
 8001ffa:	e7f2      	b.n	8001fe2 <MX_USART1_UART_Init+0x4a>
 8001ffc:	20004654 	.word	0x20004654
 8002000:	40013800 	.word	0x40013800

08002004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002004:	b500      	push	{lr}
 8002006:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	2300      	movs	r3, #0
 800200a:	9303      	str	r3, [sp, #12]
 800200c:	9304      	str	r3, [sp, #16]
 800200e:	9305      	str	r3, [sp, #20]
 8002010:	9306      	str	r3, [sp, #24]
 8002012:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_UART_MspInit+0x5c>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d002      	beq.n	8002022 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800201c:	b009      	add	sp, #36	; 0x24
 800201e:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800202c:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800202e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002030:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002034:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002036:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002048:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204a:	23c0      	movs	r3, #192	; 0xc0
 800204c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002052:	2307      	movs	r3, #7
 8002054:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	a903      	add	r1, sp, #12
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <HAL_UART_MspInit+0x60>)
 800205a:	f001 f80d 	bl	8003078 <HAL_GPIO_Init>
}
 800205e:	e7dd      	b.n	800201c <HAL_UART_MspInit+0x18>
 8002060:	40013800 	.word	0x40013800
 8002064:	48000400 	.word	0x48000400

08002068 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002068:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206c:	3304      	adds	r3, #4

0800206e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002070:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002072:	d3f9      	bcc.n	8002068 <CopyDataInit>
  bx lr
 8002074:	4770      	bx	lr

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002076:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002078:	3004      	adds	r0, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800207a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>
  bx lr
 800207e:	4770      	bx	lr

08002080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <LoopForever+0x8>)
 8002086:	490d      	ldr	r1, [pc, #52]	; (80020bc <LoopForever+0xc>)
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <LoopForever+0x10>)
 800208a:	2300      	movs	r3, #0
 800208c:	f7ff ffef 	bl	800206e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <LoopForever+0x14>)
 8002092:	490d      	ldr	r1, [pc, #52]	; (80020c8 <LoopForever+0x18>)
 8002094:	2300      	movs	r3, #0
 8002096:	f7ff fff0 	bl	800207a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x1c>)
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <LoopForever+0x20>)
 800209e:	2300      	movs	r3, #0
 80020a0:	f7ff ffeb 	bl	800207a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020a4:	f7ff fe4e 	bl	8001d44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020a8:	f009 fe9e 	bl	800bde8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80020ac:	f7ff fc58 	bl	8001960 <main>

080020b0 <LoopForever>:

LoopForever:
  b LoopForever
 80020b0:	e7fe      	b.n	80020b0 <LoopForever>
 80020b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80020b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000068 	.word	0x20000068
 80020c0:	0800c250 	.word	0x0800c250
  INIT_BSS _sbss, _ebss
 80020c4:	20000118 	.word	0x20000118
 80020c8:	200047ec 	.word	0x200047ec
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020cc:	200300c4 	.word	0x200300c4
 80020d0:	20030b5a 	.word	0x20030b5a

080020d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_Init+0x28>)
 80020dc:	6813      	ldr	r3, [r2, #0]
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 fd47 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fdb8 	bl	8001c60 <HAL_InitTick>
 80020f0:	b110      	cbz	r0, 80020f8 <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 80020f2:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80020f4:	4620      	mov	r0, r4
 80020f6:	bd10      	pop	{r4, pc}
 80020f8:	4604      	mov	r4, r0
    HAL_MspInit();
 80020fa:	f7ff fd91 	bl	8001c20 <HAL_MspInit>
 80020fe:	e7f9      	b.n	80020f4 <HAL_Init+0x1c>
 8002100:	58004000 	.word	0x58004000

08002104 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_IncTick+0x10>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	4903      	ldr	r1, [pc, #12]	; (8002118 <HAL_IncTick+0x14>)
 800210a:	6809      	ldr	r1, [r1, #0]
 800210c:	440b      	add	r3, r1
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200046e0 	.word	0x200046e0
 8002118:	20000014 	.word	0x20000014

0800211c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800211c:	4b01      	ldr	r3, [pc, #4]	; (8002124 <HAL_GetTick+0x8>)
 800211e:	6818      	ldr	r0, [r3, #0]
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200046e0 	.word	0x200046e0

08002128 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_GetTickPrio+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000018 	.word	0x20000018

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff0 	bl	800211c <HAL_GetTick>
 800213c:	4605      	mov	r5, r0
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800213e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002142:	d002      	beq.n	800214a <HAL_Delay+0x16>
    {
      wait += (uint32_t)(uwTickFreq);
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <HAL_Delay+0x24>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800214a:	f7ff ffe7 	bl	800211c <HAL_GetTick>
 800214e:	1b40      	subs	r0, r0, r5
 8002150:	42a0      	cmp	r0, r4
 8002152:	d3fa      	bcc.n	800214a <HAL_Delay+0x16>
    {
    }
  }
 8002154:	bd38      	pop	{r3, r4, r5, pc}
 8002156:	bf00      	nop
 8002158:	20000014 	.word	0x20000014

0800215c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800215c:	b530      	push	{r4, r5, lr}
 800215e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002164:	2800      	cmp	r0, #0
 8002166:	f000 80de 	beq.w	8002326 <HAL_ADC_Init+0x1ca>
 800216a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800216e:	b303      	cbz	r3, 80021b2 <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002170:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002178:	d005      	beq.n	8002186 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002180:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002184:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002186:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002188:	6893      	ldr	r3, [r2, #8]
 800218a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800218e:	d11d      	bne.n	80021cc <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8002190:	6893      	ldr	r3, [r2, #8]
 8002192:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002196:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021a0:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_ADC_Init+0x1d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	4a62      	ldr	r2, [pc, #392]	; (8002330 <HAL_ADC_Init+0x1d4>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80021b0:	e009      	b.n	80021c6 <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 80021b2:	f7fe f9b3 	bl	800051c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80021b6:	2300      	movs	r3, #0
 80021b8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80021ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80021be:	e7d7      	b.n	8002170 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80021c0:	9b01      	ldr	r3, [sp, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80021d4:	d178      	bne.n	80022c8 <HAL_ADC_Init+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021d8:	f042 0210 	orr.w	r2, r2, #16
 80021dc:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	f012 0f04 	tst.w	r2, #4
 80021ee:	d06d      	beq.n	80022cc <HAL_ADC_Init+0x170>
 80021f0:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021f4:	f012 0f10 	tst.w	r2, #16
 80021f8:	f040 808e 	bne.w	8002318 <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021fc:	2900      	cmp	r1, #0
 80021fe:	f040 808b 	bne.w	8002318 <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002202:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002204:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002208:	f042 0202 	orr.w	r2, r2, #2
 800220c:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f013 0f01 	tst.w	r3, #1
 8002214:	d10b      	bne.n	800222e <HAL_ADC_Init+0xd2>
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_ADC_Init+0x1d8>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f013 0f01 	tst.w	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002220:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002222:	4945      	ldr	r1, [pc, #276]	; (8002338 <HAL_ADC_Init+0x1dc>)
 8002224:	688a      	ldr	r2, [r1, #8]
 8002226:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800222e:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8002230:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002232:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8002236:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8002238:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800223a:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 800223c:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800223e:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002246:	2a01      	cmp	r2, #1
 8002248:	d042      	beq.n	80022d0 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800224c:	b122      	cbz	r2, 8002258 <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224e:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002252:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002254:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002256:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002258:	6821      	ldr	r1, [r4, #0]
 800225a:	68cd      	ldr	r5, [r1, #12]
 800225c:	4a37      	ldr	r2, [pc, #220]	; (800233c <HAL_ADC_Init+0x1e0>)
 800225e:	402a      	ands	r2, r5
 8002260:	4313      	orrs	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002264:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	f012 0f04 	tst.w	r2, #4
 800226c:	d035      	beq.n	80022da <HAL_ADC_Init+0x17e>
 800226e:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	f012 0f08 	tst.w	r2, #8
 8002276:	d032      	beq.n	80022de <HAL_ADC_Init+0x182>
 8002278:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227a:	b9b1      	cbnz	r1, 80022aa <HAL_ADC_Init+0x14e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227c:	b9aa      	cbnz	r2, 80022aa <HAL_ADC_Init+0x14e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800227e:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002280:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002284:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002286:	ea42 3181 	orr.w	r1, r2, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002298:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800229c:	2b01      	cmp	r3, #1
 800229e:	d020      	beq.n	80022e2 <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	6913      	ldr	r3, [r2, #16]
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d02a      	beq.n	8002306 <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022b4:	f023 030f 	bic.w	r3, r3, #15
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022bc:	f023 0303 	bic.w	r3, r3, #3
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6563      	str	r3, [r4, #84]	; 0x54
 80022c6:	e02c      	b.n	8002322 <HAL_ADC_Init+0x1c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2000      	movs	r0, #0
 80022ca:	e78d      	b.n	80021e8 <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022cc:	2100      	movs	r1, #0
 80022ce:	e790      	b.n	80021f2 <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022d2:	3a01      	subs	r2, #1
 80022d4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80022d8:	e7b7      	b.n	800224a <HAL_ADC_Init+0xee>
 80022da:	2100      	movs	r1, #0
 80022dc:	e7c8      	b.n	8002270 <HAL_ADC_Init+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022de:	2200      	movs	r2, #0
 80022e0:	e7cb      	b.n	800227a <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2,
 80022e2:	6821      	ldr	r1, [r4, #0]
 80022e4:	690b      	ldr	r3, [r1, #16]
 80022e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022f0:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80022f2:	432a      	orrs	r2, r5
 80022f4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80022f6:	432a      	orrs	r2, r5
 80022f8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80022fa:	432a      	orrs	r2, r5
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	610b      	str	r3, [r1, #16]
 8002304:	e7d1      	b.n	80022aa <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002306:	6821      	ldr	r1, [r4, #0]
 8002308:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800230a:	f023 030f 	bic.w	r3, r3, #15
 800230e:	69e2      	ldr	r2, [r4, #28]
 8002310:	3a01      	subs	r2, #1
 8002312:	4313      	orrs	r3, r2
 8002314:	630b      	str	r3, [r1, #48]	; 0x30
 8002316:	e7d0      	b.n	80022ba <HAL_ADC_Init+0x15e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002320:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002322:	b003      	add	sp, #12
 8002324:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
 8002328:	e7fb      	b.n	8002322 <HAL_ADC_Init+0x1c6>
 800232a:	bf00      	nop
 800232c:	20000010 	.word	0x20000010
 8002330:	053e2d63 	.word	0x053e2d63
 8002334:	50040000 	.word	0x50040000
 8002338:	50040300 	.word	0x50040300
 800233c:	fff0c007 	.word	0xfff0c007

08002340 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002340:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002342:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002344:	f7fe fb42 	bl	80009cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002348:	bd08      	pop	{r3, pc}

0800234a <ADC_DMAConvCplt>:
{
 800234a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800234e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002350:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002354:	d131      	bne.n	80023ba <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6811      	ldr	r1, [r2, #0]
 8002362:	f011 0f08 	tst.w	r1, #8
 8002366:	d014      	beq.n	8002392 <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002368:	68d1      	ldr	r1, [r2, #12]
 800236a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800236e:	d120      	bne.n	80023b2 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8002376:	d11c      	bne.n	80023b2 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800237a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002382:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002386:	d114      	bne.n	80023b2 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
 8002390:	e00f      	b.n	80023b2 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002392:	68d2      	ldr	r2, [r2, #12]
 8002394:	f012 0f02 	tst.w	r2, #2
 8002398:	d10b      	bne.n	80023b2 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800239a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023a4:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80023a8:	d103      	bne.n	80023b2 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fafa 	bl	80009ac <HAL_ADC_ConvCpltCallback>
}
 80023b8:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023bc:	f012 0f10 	tst.w	r2, #16
 80023c0:	d103      	bne.n	80023ca <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	4798      	blx	r3
}
 80023c8:	e7f6      	b.n	80023b8 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fae6 	bl	800099c <HAL_ADC_ErrorCallback>
 80023d0:	e7f2      	b.n	80023b8 <ADC_DMAConvCplt+0x6e>

080023d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023d2:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023dc:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023e6:	f7fe fad9 	bl	800099c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ea:	bd08      	pop	{r3, pc}

080023ec <HAL_ADC_ConfigChannel>:
{
 80023ec:	b4f0      	push	{r4, r5, r6, r7}
 80023ee:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80023f0:	2200      	movs	r2, #0
 80023f2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80023f4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80023f8:	2a01      	cmp	r2, #1
 80023fa:	f000 8204 	beq.w	8002806 <HAL_ADC_ConfigChannel+0x41a>
 80023fe:	4603      	mov	r3, r0
 8002400:	2201      	movs	r2, #1
 8002402:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002406:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002408:	68b0      	ldr	r0, [r6, #8]
 800240a:	f010 0f04 	tst.w	r0, #4
 800240e:	d00a      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8002420:	b002      	add	sp, #8
 8002422:	bcf0      	pop	{r4, r5, r6, r7}
 8002424:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002426:	684d      	ldr	r5, [r1, #4]
 8002428:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800242a:	3630      	adds	r6, #48	; 0x30
 800242c:	0a2a      	lsrs	r2, r5, #8
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8002434:	58b0      	ldr	r0, [r6, r2]
 8002436:	f005 051f 	and.w	r5, r5, #31
 800243a:	271f      	movs	r7, #31
 800243c:	40af      	lsls	r7, r5
 800243e:	ea20 0007 	bic.w	r0, r0, r7
 8002442:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002446:	40ac      	lsls	r4, r5
 8002448:	4320      	orrs	r0, r4
 800244a:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800244c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800244e:	6890      	ldr	r0, [r2, #8]
 8002450:	f010 0f04 	tst.w	r0, #4
 8002454:	d06a      	beq.n	800252c <HAL_ADC_ConfigChannel+0x140>
 8002456:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002458:	6894      	ldr	r4, [r2, #8]
 800245a:	f014 0f08 	tst.w	r4, #8
 800245e:	d067      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x144>
 8002460:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002462:	bb50      	cbnz	r0, 80024ba <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002464:	bb4c      	cbnz	r4, 80024ba <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002466:	680e      	ldr	r6, [r1, #0]
 8002468:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800246a:	3214      	adds	r2, #20
 800246c:	0e70      	lsrs	r0, r6, #25
 800246e:	0080      	lsls	r0, r0, #2
 8002470:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8002474:	5814      	ldr	r4, [r2, r0]
 8002476:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800247a:	2707      	movs	r7, #7
 800247c:	40b7      	lsls	r7, r6
 800247e:	ea24 0407 	bic.w	r4, r4, r7
 8002482:	40b5      	lsls	r5, r6
 8002484:	432c      	orrs	r4, r5
 8002486:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002488:	694c      	ldr	r4, [r1, #20]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	68c2      	ldr	r2, [r0, #12]
 800248e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002498:	690d      	ldr	r5, [r1, #16]
 800249a:	2d04      	cmp	r5, #4
 800249c:	d04a      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800249e:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a0:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80024a2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80024a6:	4cb6      	ldr	r4, [pc, #728]	; (8002780 <HAL_ADC_ConfigChannel+0x394>)
 80024a8:	403c      	ands	r4, r7
 80024aa:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80024ae:	4332      	orrs	r2, r6
 80024b0:	4314      	orrs	r4, r2
 80024b2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80024b6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ba:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024bc:	6882      	ldr	r2, [r0, #8]
 80024be:	f012 0f01 	tst.w	r2, #1
 80024c2:	f040 819a 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x40e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c6:	680a      	ldr	r2, [r1, #0]
 80024c8:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80024ca:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80024ce:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80024d2:	ea24 0406 	bic.w	r4, r4, r6
 80024d6:	f005 0618 	and.w	r6, r5, #24
 80024da:	4daa      	ldr	r5, [pc, #680]	; (8002784 <HAL_ADC_ConfigChannel+0x398>)
 80024dc:	40f5      	lsrs	r5, r6
 80024de:	402a      	ands	r2, r5
 80024e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80024e4:	4322      	orrs	r2, r4
 80024e6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ea:	68c8      	ldr	r0, [r1, #12]
 80024ec:	4aa6      	ldr	r2, [pc, #664]	; (8002788 <HAL_ADC_ConfigChannel+0x39c>)
 80024ee:	4290      	cmp	r0, r2
 80024f0:	d07b      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x1fe>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024f2:	680a      	ldr	r2, [r1, #0]
 80024f4:	49a5      	ldr	r1, [pc, #660]	; (800278c <HAL_ADC_ConfigChannel+0x3a0>)
 80024f6:	420a      	tst	r2, r1
 80024f8:	f000 8181 	beq.w	80027fe <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024fc:	49a4      	ldr	r1, [pc, #656]	; (8002790 <HAL_ADC_ConfigChannel+0x3a4>)
 80024fe:	6889      	ldr	r1, [r1, #8]
 8002500:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	48a3      	ldr	r0, [pc, #652]	; (8002794 <HAL_ADC_ConfigChannel+0x3a8>)
 8002506:	6880      	ldr	r0, [r0, #8]
 8002508:	f010 0f01 	tst.w	r0, #1
 800250c:	f040 810b 	bne.w	8002726 <HAL_ADC_ConfigChannel+0x33a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002510:	48a1      	ldr	r0, [pc, #644]	; (8002798 <HAL_ADC_ConfigChannel+0x3ac>)
 8002512:	4282      	cmp	r2, r0
 8002514:	f000 810d 	beq.w	8002732 <HAL_ADC_ConfigChannel+0x346>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002518:	48a0      	ldr	r0, [pc, #640]	; (800279c <HAL_ADC_ConfigChannel+0x3b0>)
 800251a:	4282      	cmp	r2, r0
 800251c:	f000 8146 	beq.w	80027ac <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002520:	489f      	ldr	r0, [pc, #636]	; (80027a0 <HAL_ADC_ConfigChannel+0x3b4>)
 8002522:	4282      	cmp	r2, r0
 8002524:	f000 8156 	beq.w	80027d4 <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002528:	2000      	movs	r0, #0
 800252a:	e776      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252c:	2000      	movs	r0, #0
 800252e:	e793      	b.n	8002458 <HAL_ADC_ConfigChannel+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002530:	2400      	movs	r4, #0
 8002532:	e796      	b.n	8002462 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002534:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002536:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002538:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800253c:	680a      	ldr	r2, [r1, #0]
 800253e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002542:	bb7d      	cbnz	r5, 80025a4 <HAL_ADC_ConfigChannel+0x1b8>
 8002544:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002548:	4294      	cmp	r4, r2
 800254a:	d030      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800254c:	681c      	ldr	r4, [r3, #0]
 800254e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002550:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002552:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002556:	680a      	ldr	r2, [r1, #0]
 8002558:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800255c:	bb65      	cbnz	r5, 80025b8 <HAL_ADC_ConfigChannel+0x1cc>
 800255e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002562:	4290      	cmp	r0, r2
 8002564:	d02d      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x1d6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800256a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800256c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002570:	680a      	ldr	r2, [r1, #0]
 8002572:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002576:	bb4d      	cbnz	r5, 80025cc <HAL_ADC_ConfigChannel+0x1e0>
 8002578:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800257c:	4290      	cmp	r0, r2
 800257e:	d02a      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x1ea>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002580:	681c      	ldr	r4, [r3, #0]
 8002582:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002584:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002586:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800258a:	680a      	ldr	r2, [r1, #0]
 800258c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002590:	bb35      	cbnz	r5, 80025e0 <HAL_ADC_ConfigChannel+0x1f4>
 8002592:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002596:	4290      	cmp	r0, r2
 8002598:	d18f      	bne.n	80024ba <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 800259a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800259c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a0:	66e2      	str	r2, [r4, #108]	; 0x6c
 80025a2:	e78a      	b.n	80024ba <HAL_ADC_ConfigChannel+0xce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	e7cc      	b.n	8002548 <HAL_ADC_ConfigChannel+0x15c>
 80025ae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80025b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b4:	6602      	str	r2, [r0, #96]	; 0x60
 80025b6:	e7c9      	b.n	800254c <HAL_ADC_ConfigChannel+0x160>
 80025b8:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	e7cf      	b.n	8002562 <HAL_ADC_ConfigChannel+0x176>
 80025c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025c8:	6662      	str	r2, [r4, #100]	; 0x64
 80025ca:	e7cc      	b.n	8002566 <HAL_ADC_ConfigChannel+0x17a>
 80025cc:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	e7d2      	b.n	800257c <HAL_ADC_ConfigChannel+0x190>
 80025d6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80025d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025dc:	66a2      	str	r2, [r4, #104]	; 0x68
 80025de:	e7cf      	b.n	8002580 <HAL_ADC_ConfigChannel+0x194>
 80025e0:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	e7d5      	b.n	8002596 <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ea:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ec:	680a      	ldr	r2, [r1, #0]
 80025ee:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80025f2:	bb96      	cbnz	r6, 800265a <HAL_ADC_ConfigChannel+0x26e>
 80025f4:	0e90      	lsrs	r0, r2, #26
 80025f6:	3001      	adds	r0, #1
 80025f8:	f000 001f 	and.w	r0, r0, #31
 80025fc:	2809      	cmp	r0, #9
 80025fe:	bf8c      	ite	hi
 8002600:	2000      	movhi	r0, #0
 8002602:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	2800      	cmp	r0, #0
 8002606:	d052      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x2c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002608:	bb9e      	cbnz	r6, 8002672 <HAL_ADC_ConfigChannel+0x286>
 800260a:	0e94      	lsrs	r4, r2, #26
 800260c:	3401      	adds	r4, #1
 800260e:	06a4      	lsls	r4, r4, #26
 8002610:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002614:	bbb6      	cbnz	r6, 8002684 <HAL_ADC_ConfigChannel+0x298>
 8002616:	0e90      	lsrs	r0, r2, #26
 8002618:	3001      	adds	r0, #1
 800261a:	f000 071f 	and.w	r7, r0, #31
 800261e:	2001      	movs	r0, #1
 8002620:	40b8      	lsls	r0, r7
 8002622:	4304      	orrs	r4, r0
 8002624:	bbc6      	cbnz	r6, 8002698 <HAL_ADC_ConfigChannel+0x2ac>
 8002626:	0e92      	lsrs	r2, r2, #26
 8002628:	3201      	adds	r2, #1
 800262a:	f002 021f 	and.w	r2, r2, #31
 800262e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002632:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	4322      	orrs	r2, r4
 8002636:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002638:	3514      	adds	r5, #20
 800263a:	0e50      	lsrs	r0, r2, #25
 800263c:	0080      	lsls	r0, r0, #2
 800263e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8002642:	582e      	ldr	r6, [r5, r0]
 8002644:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002648:	2707      	movs	r7, #7
 800264a:	4097      	lsls	r7, r2
 800264c:	ea26 0607 	bic.w	r6, r6, r7
 8002650:	fa04 f202 	lsl.w	r2, r4, r2
 8002654:	4332      	orrs	r2, r6
 8002656:	502a      	str	r2, [r5, r0]
 8002658:	e74b      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x106>
 800265a:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800265e:	fab0 f080 	clz	r0, r0
 8002662:	3001      	adds	r0, #1
 8002664:	f000 001f 	and.w	r0, r0, #31
 8002668:	2809      	cmp	r0, #9
 800266a:	bf8c      	ite	hi
 800266c:	2000      	movhi	r0, #0
 800266e:	2001      	movls	r0, #1
 8002670:	e7c8      	b.n	8002604 <HAL_ADC_ConfigChannel+0x218>
 8002672:	fa92 f4a2 	rbit	r4, r2
 8002676:	fab4 f484 	clz	r4, r4
 800267a:	3401      	adds	r4, #1
 800267c:	06a4      	lsls	r4, r4, #26
 800267e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002682:	e7c7      	b.n	8002614 <HAL_ADC_ConfigChannel+0x228>
 8002684:	fa92 f0a2 	rbit	r0, r2
 8002688:	fab0 f080 	clz	r0, r0
 800268c:	3001      	adds	r0, #1
 800268e:	f000 071f 	and.w	r7, r0, #31
 8002692:	2001      	movs	r0, #1
 8002694:	40b8      	lsls	r0, r7
 8002696:	e7c4      	b.n	8002622 <HAL_ADC_ConfigChannel+0x236>
 8002698:	fa92 f2a2 	rbit	r2, r2
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	3201      	adds	r2, #1
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026aa:	0512      	lsls	r2, r2, #20
 80026ac:	e7c2      	b.n	8002634 <HAL_ADC_ConfigChannel+0x248>
 80026ae:	b9ce      	cbnz	r6, 80026e4 <HAL_ADC_ConfigChannel+0x2f8>
 80026b0:	0e94      	lsrs	r4, r2, #26
 80026b2:	3401      	adds	r4, #1
 80026b4:	06a4      	lsls	r4, r4, #26
 80026b6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80026ba:	b9e6      	cbnz	r6, 80026f6 <HAL_ADC_ConfigChannel+0x30a>
 80026bc:	0e90      	lsrs	r0, r2, #26
 80026be:	3001      	adds	r0, #1
 80026c0:	f000 071f 	and.w	r7, r0, #31
 80026c4:	2001      	movs	r0, #1
 80026c6:	40b8      	lsls	r0, r7
 80026c8:	4304      	orrs	r4, r0
 80026ca:	b9f6      	cbnz	r6, 800270a <HAL_ADC_ConfigChannel+0x31e>
 80026cc:	0e90      	lsrs	r0, r2, #26
 80026ce:	3001      	adds	r0, #1
 80026d0:	f000 001f 	and.w	r0, r0, #31
 80026d4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80026d8:	3a1e      	subs	r2, #30
 80026da:	0512      	lsls	r2, r2, #20
 80026dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e0:	4322      	orrs	r2, r4
 80026e2:	e7a8      	b.n	8002636 <HAL_ADC_ConfigChannel+0x24a>
 80026e4:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026e8:	fab4 f484 	clz	r4, r4
 80026ec:	3401      	adds	r4, #1
 80026ee:	06a4      	lsls	r4, r4, #26
 80026f0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80026f4:	e7e1      	b.n	80026ba <HAL_ADC_ConfigChannel+0x2ce>
 80026f6:	fa92 f0a2 	rbit	r0, r2
 80026fa:	fab0 f080 	clz	r0, r0
 80026fe:	3001      	adds	r0, #1
 8002700:	f000 071f 	and.w	r7, r0, #31
 8002704:	2001      	movs	r0, #1
 8002706:	40b8      	lsls	r0, r7
 8002708:	e7de      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x2dc>
 800270a:	fa92 f0a2 	rbit	r0, r2
 800270e:	fab0 f080 	clz	r0, r0
 8002712:	3001      	adds	r0, #1
 8002714:	f000 001f 	and.w	r0, r0, #31
 8002718:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800271c:	3a1e      	subs	r2, #30
 800271e:	0512      	lsls	r2, r2, #20
 8002720:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002724:	e7dc      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x2f4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002726:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002728:	f042 0220 	orr.w	r2, r2, #32
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800272e:	2001      	movs	r0, #1
 8002730:	e673      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002732:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002736:	f47f aeef 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x12c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273a:	6819      	ldr	r1, [r3, #0]
 800273c:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_ADC_ConfigChannel+0x3a8>)
 800273e:	4291      	cmp	r1, r2
 8002740:	d001      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x35a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002742:	2000      	movs	r0, #0
 8002744:	e669      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002746:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800274a:	4811      	ldr	r0, [pc, #68]	; (8002790 <HAL_ADC_ConfigChannel+0x3a4>)
 800274c:	6881      	ldr	r1, [r0, #8]
 800274e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002752:	430a      	orrs	r2, r1
 8002754:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_ADC_ConfigChannel+0x3b8>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	0992      	lsrs	r2, r2, #6
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <HAL_ADC_ConfigChannel+0x3bc>)
 800275e:	fba1 1202 	umull	r1, r2, r1, r2
 8002762:	0992      	lsrs	r2, r2, #6
 8002764:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002768:	0091      	lsls	r1, r2, #2
 800276a:	9101      	str	r1, [sp, #4]
              while(wait_loop_index != 0UL)
 800276c:	e002      	b.n	8002774 <HAL_ADC_ConfigChannel+0x388>
                wait_loop_index--;
 800276e:	9a01      	ldr	r2, [sp, #4]
 8002770:	3a01      	subs	r2, #1
 8002772:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8002774:	9a01      	ldr	r2, [sp, #4]
 8002776:	2a00      	cmp	r2, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADC_ConfigChannel+0x382>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277a:	2000      	movs	r0, #0
 800277c:	e64d      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
 800277e:	bf00      	nop
 8002780:	03fff000 	.word	0x03fff000
 8002784:	0007ffff 	.word	0x0007ffff
 8002788:	407f0000 	.word	0x407f0000
 800278c:	80080000 	.word	0x80080000
 8002790:	50040300 	.word	0x50040300
 8002794:	50040000 	.word	0x50040000
 8002798:	c7520000 	.word	0xc7520000
 800279c:	cb840000 	.word	0xcb840000
 80027a0:	80000001 	.word	0x80000001
 80027a4:	20000010 	.word	0x20000010
 80027a8:	053e2d63 	.word	0x053e2d63
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ac:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80027b0:	f47f aeb6 	bne.w	8002520 <HAL_ADC_ConfigChannel+0x134>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_ADC_ConfigChannel+0x420>)
 80027b8:	4291      	cmp	r1, r2
 80027ba:	d001      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x3d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2000      	movs	r0, #0
 80027be:	e62c      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027c0:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 80027c4:	4812      	ldr	r0, [pc, #72]	; (8002810 <HAL_ADC_ConfigChannel+0x424>)
 80027c6:	6881      	ldr	r1, [r0, #8]
 80027c8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80027cc:	430a      	orrs	r2, r1
 80027ce:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2000      	movs	r0, #0
 80027d2:	e622      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d4:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80027d8:	d113      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x416>
            if (ADC_VREFINT_INSTANCE(hadc))
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	4a0b      	ldr	r2, [pc, #44]	; (800280c <HAL_ADC_ConfigChannel+0x420>)
 80027de:	4291      	cmp	r1, r2
 80027e0:	d001      	beq.n	80027e6 <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2000      	movs	r0, #0
 80027e4:	e619      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027e6:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 80027ea:	4809      	ldr	r0, [pc, #36]	; (8002810 <HAL_ADC_ConfigChannel+0x424>)
 80027ec:	6881      	ldr	r1, [r0, #8]
 80027ee:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80027f2:	430a      	orrs	r2, r1
 80027f4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2000      	movs	r0, #0
 80027f8:	e60f      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
 80027fa:	2000      	movs	r0, #0
 80027fc:	e60d      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
 80027fe:	2000      	movs	r0, #0
 8002800:	e60b      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
 8002802:	2000      	movs	r0, #0
 8002804:	e609      	b.n	800241a <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002806:	2002      	movs	r0, #2
 8002808:	e60a      	b.n	8002420 <HAL_ADC_ConfigChannel+0x34>
 800280a:	bf00      	nop
 800280c:	50040000 	.word	0x50040000
 8002810:	50040300 	.word	0x50040300

08002814 <ADC_ConversionStop>:
{
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002818:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	f012 0f04 	tst.w	r2, #4
 8002820:	d052      	beq.n	80028c8 <ADC_ConversionStop+0xb4>
 8002822:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	f012 0f08 	tst.w	r2, #8
 800282a:	d04f      	beq.n	80028cc <ADC_ConversionStop+0xb8>
 800282c:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800282e:	b908      	cbnz	r0, 8002834 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002830:	2a00      	cmp	r2, #0
 8002832:	d06b      	beq.n	800290c <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800283a:	d004      	beq.n	8002846 <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800283c:	8b20      	ldrh	r0, [r4, #24]
 800283e:	f240 1201 	movw	r2, #257	; 0x101
 8002842:	4290      	cmp	r0, r2
 8002844:	d04e      	beq.n	80028e4 <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002846:	2902      	cmp	r1, #2
 8002848:	d010      	beq.n	800286c <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800284a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	f012 0f04 	tst.w	r2, #4
 8002852:	d00b      	beq.n	800286c <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	f012 0f02 	tst.w	r2, #2
 800285a:	d107      	bne.n	800286c <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002862:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002866:	f042 0210 	orr.w	r2, r2, #16
 800286a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800286c:	2901      	cmp	r1, #1
 800286e:	d010      	beq.n	8002892 <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002870:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f012 0f08 	tst.w	r2, #8
 8002878:	d00b      	beq.n	8002892 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	f012 0f02 	tst.w	r2, #2
 8002880:	d107      	bne.n	8002892 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002888:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800288c:	f042 0220 	orr.w	r2, r2, #32
 8002890:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002892:	2902      	cmp	r1, #2
 8002894:	d036      	beq.n	8002904 <ADC_ConversionStop+0xf0>
 8002896:	2903      	cmp	r1, #3
 8002898:	d132      	bne.n	8002900 <ADC_ConversionStop+0xec>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800289a:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 800289c:	f7ff fc3e 	bl	800211c <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	422b      	tst	r3, r5
 80028a8:	d02e      	beq.n	8002908 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028aa:	f7ff fc37 	bl	800211c <HAL_GetTick>
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	2805      	cmp	r0, #5
 80028b2:	d9f6      	bls.n	80028a2 <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028b6:	f043 0310 	orr.w	r3, r3, #16
 80028ba:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80028c4:	2001      	movs	r0, #1
 80028c6:	e020      	b.n	800290a <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028c8:	2000      	movs	r0, #0
 80028ca:	e7ab      	b.n	8002824 <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028cc:	2200      	movs	r2, #0
 80028ce:	e7ae      	b.n	800282e <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028d2:	f043 0310 	orr.w	r3, r3, #16
 80028d6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
 80028e2:	e012      	b.n	800290a <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028e4:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80028ec:	d104      	bne.n	80028f8 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <ADC_ConversionStop+0xfc>)
 80028f0:	428a      	cmp	r2, r1
 80028f2:	d8ed      	bhi.n	80028d0 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 80028f4:	3201      	adds	r2, #1
 80028f6:	e7f6      	b.n	80028e6 <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028fc:	2101      	movs	r1, #1
 80028fe:	e7a4      	b.n	800284a <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002900:	2504      	movs	r5, #4
        break;
 8002902:	e7cb      	b.n	800289c <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002904:	2508      	movs	r5, #8
 8002906:	e7c9      	b.n	800289c <ADC_ConversionStop+0x88>
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
}
 800290a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800290c:	2000      	movs	r0, #0
 800290e:	e7fc      	b.n	800290a <ADC_ConversionStop+0xf6>
 8002910:	a33fffff 	.word	0xa33fffff

08002914 <ADC_Enable>:
{
 8002914:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002916:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	f012 0f01 	tst.w	r2, #1
 800291e:	d13d      	bne.n	800299c <ADC_Enable+0x88>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <ADC_Enable+0x8c>)
 8002924:	4211      	tst	r1, r2
 8002926:	d009      	beq.n	800293c <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800292a:	f043 0310 	orr.w	r3, r3, #16
 800292e:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
 800293a:	e030      	b.n	800299e <ADC_Enable+0x8a>
 800293c:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002944:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800294e:	f7ff fbe5 	bl	800211c <HAL_GetTick>
 8002952:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002954:	e004      	b.n	8002960 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002956:	f7ff fbe1 	bl	800211c <HAL_GetTick>
 800295a:	1b40      	subs	r0, r0, r5
 800295c:	2802      	cmp	r0, #2
 800295e:	d811      	bhi.n	8002984 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f012 0f01 	tst.w	r2, #1
 8002968:	d116      	bne.n	8002998 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	f012 0f01 	tst.w	r2, #1
 8002970:	d1f1      	bne.n	8002956 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002978:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	e7e8      	b.n	8002956 <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
 8002996:	e002      	b.n	800299e <ADC_Enable+0x8a>
  return HAL_OK;
 8002998:	2000      	movs	r0, #0
 800299a:	e000      	b.n	800299e <ADC_Enable+0x8a>
 800299c:	2000      	movs	r0, #0
}
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	8000003f 	.word	0x8000003f

080029a4 <HAL_ADC_Start_DMA>:
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029a8:	68a4      	ldr	r4, [r4, #8]
 80029aa:	f014 0f04 	tst.w	r4, #4
 80029ae:	d150      	bne.n	8002a52 <HAL_ADC_Start_DMA+0xae>
    __HAL_LOCK(hadc);
 80029b0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d04f      	beq.n	8002a58 <HAL_ADC_Start_DMA+0xb4>
 80029b8:	4615      	mov	r5, r2
 80029ba:	460e      	mov	r6, r1
 80029bc:	4604      	mov	r4, r0
 80029be:	2301      	movs	r3, #1
 80029c0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 80029c4:	f7ff ffa6 	bl	8002914 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80029c8:	4603      	mov	r3, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d13d      	bne.n	8002a4a <HAL_ADC_Start_DMA+0xa6>
        ADC_STATE_CLR_SET(hadc->State,
 80029ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029e0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029e4:	d02e      	beq.n	8002a44 <HAL_ADC_Start_DMA+0xa0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029e8:	f023 0306 	bic.w	r3, r3, #6
 80029ec:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_ADC_Start_DMA+0xb8>)
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_ADC_Start_DMA+0xbc>)
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_ADC_Start_DMA+0xc0>)
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	221c      	movs	r2, #28
 8002a04:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002a06:	2300      	movs	r3, #0
 8002a08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	6853      	ldr	r3, [r2, #4]
 8002a10:	f043 0310 	orr.w	r3, r3, #16
 8002a14:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	68d3      	ldr	r3, [r2, #12]
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a20:	6821      	ldr	r1, [r4, #0]
 8002a22:	462b      	mov	r3, r5
 8002a24:	4632      	mov	r2, r6
 8002a26:	3140      	adds	r1, #64	; 0x40
 8002a28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002a2a:	f000 fa05 	bl	8002e38 <HAL_DMA_Start_IT>
 8002a2e:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a30:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002a32:	688a      	ldr	r2, [r1, #8]
 8002a34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002a3c:	f042 0204 	orr.w	r2, r2, #4
 8002a40:	608a      	str	r2, [r1, #8]
 8002a42:	e007      	b.n	8002a54 <HAL_ADC_Start_DMA+0xb0>
          ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	2300      	movs	r3, #0
 8002a46:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a48:	e7d1      	b.n	80029ee <HAL_ADC_Start_DMA+0x4a>
        __HAL_UNLOCK(hadc);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8002a50:	e000      	b.n	8002a54 <HAL_ADC_Start_DMA+0xb0>
    tmp_hal_status = HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e7fb      	b.n	8002a54 <HAL_ADC_Start_DMA+0xb0>
 8002a5c:	0800234b 	.word	0x0800234b
 8002a60:	08002341 	.word	0x08002341
 8002a64:	080023d3 	.word	0x080023d3

08002a68 <ADC_Disable>:
{
 8002a68:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a6a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	f012 0f02 	tst.w	r2, #2
 8002a72:	d015      	beq.n	8002aa0 <ADC_Disable+0x38>
 8002a74:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	f012 0f01 	tst.w	r2, #1
 8002a7c:	d037      	beq.n	8002aee <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a7e:	2900      	cmp	r1, #0
 8002a80:	d137      	bne.n	8002af2 <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f002 020d 	and.w	r2, r2, #13
 8002a88:	2a01      	cmp	r2, #1
 8002a8a:	d00b      	beq.n	8002aa4 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a8e:	f043 0310 	orr.w	r3, r3, #16
 8002a92:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	e027      	b.n	8002af0 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	e7e8      	b.n	8002a76 <ADC_Disable+0xe>
 8002aa4:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ab0:	f042 0202 	orr.w	r2, r2, #2
 8002ab4:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002abc:	f7ff fb2e 	bl	800211c <HAL_GetTick>
 8002ac0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f013 0f01 	tst.w	r3, #1
 8002aca:	d00e      	beq.n	8002aea <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002acc:	f7ff fb26 	bl	800211c <HAL_GetTick>
 8002ad0:	1b40      	subs	r0, r0, r5
 8002ad2:	2802      	cmp	r0, #2
 8002ad4:	d9f5      	bls.n	8002ac2 <ADC_Disable+0x5a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	e002      	b.n	8002af0 <ADC_Disable+0x88>
  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e000      	b.n	8002af0 <ADC_Disable+0x88>
 8002aee:	2000      	movs	r0, #0
}
 8002af0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002af2:	2000      	movs	r0, #0
 8002af4:	e7fc      	b.n	8002af0 <ADC_Disable+0x88>

08002af6 <HAL_ADC_Stop_DMA>:
{
 8002af6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002af8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d039      	beq.n	8002b74 <HAL_ADC_Stop_DMA+0x7e>
 8002b00:	4604      	mov	r4, r0
 8002b02:	2301      	movs	r3, #1
 8002b04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b08:	2103      	movs	r1, #3
 8002b0a:	f7ff fe83 	bl	8002814 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002b0e:	4605      	mov	r5, r0
 8002b10:	b9e8      	cbnz	r0, 8002b4e <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	68d3      	ldr	r3, [r2, #12]
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002b1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b1e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d017      	beq.n	8002b58 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	6853      	ldr	r3, [r2, #4]
 8002b2c:	f023 0310 	bic.w	r3, r3, #16
 8002b30:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002b32:	b9dd      	cbnz	r5, 8002b6c <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff ff97 	bl	8002a68 <ADC_Disable>
 8002b3a:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002b3c:	b93d      	cbnz	r5, 8002b4e <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b54:	4628      	mov	r0, r5
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002b58:	f000 f9b8 	bl	8002ecc <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d0e2      	beq.n	8002b28 <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b68:	6563      	str	r3, [r4, #84]	; 0x54
 8002b6a:	e7dd      	b.n	8002b28 <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff ff7b 	bl	8002a68 <ADC_Disable>
 8002b72:	e7e3      	b.n	8002b3c <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 8002b74:	2502      	movs	r5, #2
 8002b76:	e7ed      	b.n	8002b54 <HAL_ADC_Stop_DMA+0x5e>

08002b78 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b7a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	0200      	lsls	r0, r0, #8
 8002b86:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002b8c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002b90:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b94:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_NVIC_SetPriority+0x60>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba6:	f1c3 0407 	rsb	r4, r3, #7
 8002baa:	2c04      	cmp	r4, #4
 8002bac:	bf28      	it	cs
 8002bae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb0:	1d1d      	adds	r5, r3, #4
 8002bb2:	2d06      	cmp	r5, #6
 8002bb4:	d918      	bls.n	8002be8 <HAL_NVIC_SetPriority+0x4c>
 8002bb6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8002bbc:	fa05 f404 	lsl.w	r4, r5, r4
 8002bc0:	ea21 0104 	bic.w	r1, r1, r4
 8002bc4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc6:	fa05 f303 	lsl.w	r3, r5, r3
 8002bca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	db0b      	blt.n	8002bec <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	0109      	lsls	r1, r1, #4
 8002bd6:	b2c9      	uxtb	r1, r1
 8002bd8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002bdc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002be0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002be4:	bc30      	pop	{r4, r5}
 8002be6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be8:	2300      	movs	r3, #0
 8002bea:	e7e5      	b.n	8002bb8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	f000 000f 	and.w	r0, r0, #15
 8002bf0:	0109      	lsls	r1, r1, #4
 8002bf2:	b2c9      	uxtb	r1, r1
 8002bf4:	4b02      	ldr	r3, [pc, #8]	; (8002c00 <HAL_NVIC_SetPriority+0x64>)
 8002bf6:	5419      	strb	r1, [r3, r0]
 8002bf8:	e7f4      	b.n	8002be4 <HAL_NVIC_SetPriority+0x48>
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	e000ed14 	.word	0xe000ed14

08002c04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c04:	2800      	cmp	r0, #0
 8002c06:	db07      	blt.n	8002c18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c08:	f000 021f 	and.w	r2, r0, #31
 8002c0c:	0940      	lsrs	r0, r0, #5
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4093      	lsls	r3, r2
 8002c12:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <HAL_NVIC_EnableIRQ+0x18>)
 8002c14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c20:	2800      	cmp	r0, #0
 8002c22:	db0c      	blt.n	8002c3e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c24:	f000 021f 	and.w	r2, r0, #31
 8002c28:	0940      	lsrs	r0, r0, #5
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	3020      	adds	r0, #32
 8002c30:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <HAL_NVIC_DisableIRQ+0x20>)
 8002c32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c3a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002c44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c48:	4905      	ldr	r1, [pc, #20]	; (8002c60 <HAL_NVIC_SystemReset+0x1c>)
 8002c4a:	68ca      	ldr	r2, [r1, #12]
 8002c4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <HAL_NVIC_SystemReset+0x20>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]
 8002c56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002c5a:	bf00      	nop
 8002c5c:	e7fd      	b.n	8002c5a <HAL_NVIC_SystemReset+0x16>
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	05fa0004 	.word	0x05fa0004

08002c68 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	db08      	blt.n	8002c7e <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6c:	f000 021f 	and.w	r2, r0, #31
 8002c70:	0940      	lsrs	r0, r0, #5
 8002c72:	2301      	movs	r3, #1
 8002c74:	4093      	lsls	r3, r2
 8002c76:	3040      	adds	r0, #64	; 0x40
 8002c78:	4a01      	ldr	r2, [pc, #4]	; (8002c80 <HAL_NVIC_SetPendingIRQ+0x18>)
 8002c7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c84:	2800      	cmp	r0, #0
 8002c86:	db08      	blt.n	8002c9a <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c88:	f000 021f 	and.w	r2, r0, #31
 8002c8c:	0940      	lsrs	r0, r0, #5
 8002c8e:	2301      	movs	r3, #1
 8002c90:	4093      	lsls	r3, r2
 8002c92:	3060      	adds	r0, #96	; 0x60
 8002c94:	4a01      	ldr	r2, [pc, #4]	; (8002c9c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8002c96:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca0:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002ca4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002ca6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ca8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002caa:	b114      	cbz	r4, 8002cb2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cac:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002cae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002cb0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cb2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002cb4:	f004 051c 	and.w	r5, r4, #28
 8002cb8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002cba:	2401      	movs	r4, #1
 8002cbc:	40ac      	lsls	r4, r5
 8002cbe:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cc0:	6804      	ldr	r4, [r0, #0]
 8002cc2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cc4:	6883      	ldr	r3, [r0, #8]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d005      	beq.n	8002cd6 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002cce:	6803      	ldr	r3, [r0, #0]
 8002cd0:	60da      	str	r2, [r3, #12]
  }
}
 8002cd2:	bc70      	pop	{r4, r5, r6}
 8002cd4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002cda:	6803      	ldr	r3, [r0, #0]
 8002cdc:	60d9      	str	r1, [r3, #12]
 8002cde:	e7f8      	b.n	8002cd2 <DMA_SetConfig+0x32>

08002ce0 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d914      	bls.n	8002d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002cea:	f022 0103 	bic.w	r1, r2, #3
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8002cf0:	440a      	add	r2, r1
 8002cf2:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3b08      	subs	r3, #8
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002d02:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002d04:	f003 031c 	and.w	r3, r3, #28
 8002d08:	2201      	movs	r2, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002d10:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002d12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d14:	f022 0203 	bic.w	r2, r2, #3
 8002d18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002d1c:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002d20:	6482      	str	r2, [r0, #72]	; 0x48
 8002d22:	e7e7      	b.n	8002cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x14>
 8002d24:	40020407 	.word	0x40020407
 8002d28:	4002081c 	.word	0x4002081c
 8002d2c:	cccccccd 	.word	0xcccccccd
 8002d30:	40020880 	.word	0x40020880

08002d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d34:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8002d38:	441a      	add	r2, r3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d3e:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002d40:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2201      	movs	r2, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	1000823f 	.word	0x1000823f
 8002d58:	40020940 	.word	0x40020940

08002d5c <HAL_DMA_Init>:
  if (hdma == NULL)
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d05c      	beq.n	8002e1a <HAL_DMA_Init+0xbe>
{
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d64:	6802      	ldr	r2, [r0, #0]
 8002d66:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_DMA_Init+0xc4>)
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d83e      	bhi.n	8002dea <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_DMA_Init+0xc8>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_DMA_Init+0xcc>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_DMA_Init+0xd0>)
 8002d7e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8002d86:	6821      	ldr	r1, [r4, #0]
 8002d88:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d8a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002d8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8002d92:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8002d96:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	6920      	ldr	r0, [r4, #16]
 8002d9a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	69a0      	ldr	r0, [r4, #24]
 8002da2:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da6:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	6a20      	ldr	r0, [r4, #32]
 8002daa:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002dac:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002dae:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff ff95 	bl	8002ce0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002db6:	68a3      	ldr	r3, [r4, #8]
 8002db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dbc:	d020      	beq.n	8002e00 <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dc0:	7922      	ldrb	r2, [r4, #4]
 8002dc2:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002dc8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d919      	bls.n	8002e06 <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002dd6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dd8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dda:	2000      	movs	r0, #0
 8002ddc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8002de4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002de8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_DMA_Init+0xd4>)
 8002dec:	4413      	add	r3, r2
 8002dee:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_DMA_Init+0xcc>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <HAL_DMA_Init+0xd8>)
 8002dfc:	6403      	str	r3, [r0, #64]	; 0x40
 8002dfe:	e7bf      	b.n	8002d80 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e00:	2300      	movs	r3, #0
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	e7db      	b.n	8002dbe <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff94 	bl	8002d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	e7df      	b.n	8002dda <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40020407 	.word	0x40020407
 8002e24:	bffdfff8 	.word	0xbffdfff8
 8002e28:	cccccccd 	.word	0xcccccccd
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	bffdfbf8 	.word	0xbffdfbf8
 8002e34:	40020400 	.word	0x40020400

08002e38 <HAL_DMA_Start_IT>:
{
 8002e38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8002e3a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002e3e:	2c01      	cmp	r4, #1
 8002e40:	d042      	beq.n	8002ec8 <HAL_DMA_Start_IT+0x90>
 8002e42:	2401      	movs	r4, #1
 8002e44:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002e48:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8002e4c:	b2e4      	uxtb	r4, r4
 8002e4e:	2c01      	cmp	r4, #1
 8002e50:	d004      	beq.n	8002e5c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8002e52:	2300      	movs	r3, #0
 8002e54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8002e58:	2002      	movs	r0, #2
}
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e64:	2000      	movs	r0, #0
 8002e66:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002e68:	6825      	ldr	r5, [r4, #0]
 8002e6a:	6828      	ldr	r0, [r5, #0]
 8002e6c:	f020 0001 	bic.w	r0, r0, #1
 8002e70:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff ff14 	bl	8002ca0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002e78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e7a:	b1d3      	cbz	r3, 8002eb2 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	f043 030e 	orr.w	r3, r3, #14
 8002e84:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e9a:	b11b      	cbz	r3, 8002ea4 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e7d3      	b.n	8002e5a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	f043 030a 	orr.w	r3, r3, #10
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e7de      	b.n	8002e86 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002ec8:	2002      	movs	r0, #2
 8002eca:	e7c6      	b.n	8002e5a <HAL_DMA_Start_IT+0x22>

08002ecc <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d034      	beq.n	8002f3c <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	2a02      	cmp	r2, #2
 8002eda:	d006      	beq.n	8002eea <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	2204      	movs	r2, #4
 8002ede:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	6801      	ldr	r1, [r0, #0]
 8002eec:	680a      	ldr	r2, [r1, #0]
 8002eee:	f022 020e 	bic.w	r2, r2, #14
 8002ef2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ef4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ef6:	680a      	ldr	r2, [r1, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002efe:	6801      	ldr	r1, [r0, #0]
 8002f00:	680a      	ldr	r2, [r1, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f0a:	f002 011c 	and.w	r1, r2, #28
 8002f0e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002f10:	2201      	movs	r2, #1
 8002f12:	408a      	lsls	r2, r1
 8002f14:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f1a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f1e:	b132      	cbz	r2, 8002f2e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f20:	6811      	ldr	r1, [r2, #0]
 8002f22:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f26:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f2c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002f3a:	4770      	bx	lr
    return HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DMA_Abort_IT>:
{
 8002f40:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f42:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d003      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
}
 8002f52:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f54:	6802      	ldr	r2, [r0, #0]
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	f023 030e 	bic.w	r3, r3, #14
 8002f5c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	6802      	ldr	r2, [r0, #0]
 8002f60:	6813      	ldr	r3, [r2, #0]
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f68:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f74:	f003 021c 	and.w	r2, r3, #28
 8002f78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f82:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002f84:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f86:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f88:	b133      	cbz	r3, 8002f98 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f96:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002fa4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002fa6:	b113      	cbz	r3, 8002fae <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002fa8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2000      	movs	r0, #0
 8002fac:	e7d1      	b.n	8002f52 <HAL_DMA_Abort_IT+0x12>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7cf      	b.n	8002f52 <HAL_DMA_Abort_IT+0x12>

08002fb2 <HAL_DMA_IRQHandler>:
{
 8002fb2:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fb6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb8:	6804      	ldr	r4, [r0, #0]
 8002fba:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fbe:	f003 031c 	and.w	r3, r3, #28
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	420a      	tst	r2, r1
 8002fc8:	d015      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x44>
 8002fca:	f015 0f04 	tst.w	r5, #4
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	f013 0f20 	tst.w	r3, #32
 8002fd6:	d103      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fe0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fe2:	f003 021c 	and.w	r2, r3, #28
 8002fe6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fe8:	2304      	movs	r3, #4
 8002fea:	4093      	lsls	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002fee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ff0:	b103      	cbz	r3, 8002ff4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002ff2:	4798      	blx	r3
}
 8002ff4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	420a      	tst	r2, r1
 8002ffc:	d01c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x86>
 8002ffe:	f015 0f02 	tst.w	r5, #2
 8003002:	d019      	beq.n	8003038 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	f013 0f20 	tst.w	r3, #32
 800300a:	d106      	bne.n	800301a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f023 030a 	bic.w	r3, r3, #10
 8003012:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003014:	2301      	movs	r3, #1
 8003016:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800301a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800301c:	f003 021c 	and.w	r2, r3, #28
 8003020:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003022:	2302      	movs	r3, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003028:	2300      	movs	r3, #0
 800302a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800302e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0df      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003034:	4798      	blx	r3
 8003036:	e7dd      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003038:	2208      	movs	r2, #8
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	420b      	tst	r3, r1
 8003040:	d0d8      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
 8003042:	f015 0f08 	tst.w	r5, #8
 8003046:	d0d5      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f023 030e 	bic.w	r3, r3, #14
 800304e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003050:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003052:	f003 031c 	and.w	r3, r3, #28
 8003056:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003058:	2201      	movs	r2, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003060:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003062:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003066:	2300      	movs	r3, #0
 8003068:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800306c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0c0      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003072:	4798      	blx	r3
  return;
 8003074:	e7be      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x42>
	...

08003078 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	e03a      	b.n	80030f4 <HAL_GPIO_Init+0x7c>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800307e:	2404      	movs	r4, #4
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0xc>
 8003082:	2400      	movs	r4, #0
 8003084:	40b4      	lsls	r4, r6
 8003086:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003088:	3502      	adds	r5, #2
 800308a:	4e58      	ldr	r6, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x174>)
 800308c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003090:	4c57      	ldr	r4, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x178>)
 8003092:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8003096:	43d4      	mvns	r4, r2
 8003098:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800309c:	684f      	ldr	r7, [r1, #4]
 800309e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80030a2:	d001      	beq.n	80030a8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80030a4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80030a8:	4d51      	ldr	r5, [pc, #324]	; (80031f0 <HAL_GPIO_Init+0x178>)
 80030aa:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 80030ae:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80030b2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030b6:	684f      	ldr	r7, [r1, #4]
 80030b8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80030bc:	d001      	beq.n	80030c2 <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 80030be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80030c2:	4d4b      	ldr	r5, [pc, #300]	; (80031f0 <HAL_GPIO_Init+0x178>)
 80030c4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030c8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80030ca:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ce:	684f      	ldr	r7, [r1, #4]
 80030d0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80030d4:	d001      	beq.n	80030da <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80030d6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80030da:	4d45      	ldr	r5, [pc, #276]	; (80031f0 <HAL_GPIO_Init+0x178>)
 80030dc:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80030de:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80030e0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e2:	684e      	ldr	r6, [r1, #4]
 80030e4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80030e8:	d001      	beq.n	80030ee <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80030ea:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <HAL_GPIO_Init+0x178>)
 80030f0:	6054      	str	r4, [r2, #4]
      }
    }
    
    position++;
 80030f2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f4:	680a      	ldr	r2, [r1, #0]
 80030f6:	fa32 f403 	lsrs.w	r4, r2, r3
 80030fa:	d074      	beq.n	80031e6 <HAL_GPIO_Init+0x16e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	2401      	movs	r4, #1
 80030fe:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003100:	4022      	ands	r2, r4
 8003102:	d0f6      	beq.n	80030f2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003104:	684d      	ldr	r5, [r1, #4]
 8003106:	2d02      	cmp	r5, #2
 8003108:	d001      	beq.n	800310e <HAL_GPIO_Init+0x96>
 800310a:	2d12      	cmp	r5, #18
 800310c:	d110      	bne.n	8003130 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 800310e:	08de      	lsrs	r6, r3, #3
 8003110:	3608      	adds	r6, #8
 8003112:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003116:	f003 0507 	and.w	r5, r3, #7
 800311a:	00af      	lsls	r7, r5, #2
 800311c:	250f      	movs	r5, #15
 800311e:	40bd      	lsls	r5, r7
 8003120:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003124:	690d      	ldr	r5, [r1, #16]
 8003126:	40bd      	lsls	r5, r7
 8003128:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800312c:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003130:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003132:	005f      	lsls	r7, r3, #1
 8003134:	2503      	movs	r5, #3
 8003136:	40bd      	lsls	r5, r7
 8003138:	43ed      	mvns	r5, r5
 800313a:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800313e:	684e      	ldr	r6, [r1, #4]
 8003140:	f006 0603 	and.w	r6, r6, #3
 8003144:	40be      	lsls	r6, r7
 8003146:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 800314a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800314c:	684e      	ldr	r6, [r1, #4]
 800314e:	f106 3cff 	add.w	ip, r6, #4294967295
 8003152:	f1bc 0f01 	cmp.w	ip, #1
 8003156:	d903      	bls.n	8003160 <HAL_GPIO_Init+0xe8>
 8003158:	2e11      	cmp	r6, #17
 800315a:	d001      	beq.n	8003160 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315c:	2e12      	cmp	r6, #18
 800315e:	d110      	bne.n	8003182 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 8003160:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003162:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003166:	68ce      	ldr	r6, [r1, #12]
 8003168:	40be      	lsls	r6, r7
 800316a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 800316e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003170:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003172:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003176:	684e      	ldr	r6, [r1, #4]
 8003178:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800317c:	409e      	lsls	r6, r3
 800317e:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8003180:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8003182:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003184:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003186:	688c      	ldr	r4, [r1, #8]
 8003188:	40bc      	lsls	r4, r7
 800318a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800318c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800318e:	684c      	ldr	r4, [r1, #4]
 8003190:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003194:	d0ad      	beq.n	80030f2 <HAL_GPIO_Init+0x7a>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003196:	089d      	lsrs	r5, r3, #2
 8003198:	1cae      	adds	r6, r5, #2
 800319a:	4c14      	ldr	r4, [pc, #80]	; (80031ec <HAL_GPIO_Init+0x174>)
 800319c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031a0:	f003 0403 	and.w	r4, r3, #3
 80031a4:	00a6      	lsls	r6, r4, #2
 80031a6:	240f      	movs	r4, #15
 80031a8:	40b4      	lsls	r4, r6
 80031aa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80031b2:	f43f af66 	beq.w	8003082 <HAL_GPIO_Init+0xa>
 80031b6:	4c0f      	ldr	r4, [pc, #60]	; (80031f4 <HAL_GPIO_Init+0x17c>)
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d00e      	beq.n	80031da <HAL_GPIO_Init+0x162>
 80031bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d00c      	beq.n	80031de <HAL_GPIO_Init+0x166>
 80031c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80031c8:	42a0      	cmp	r0, r4
 80031ca:	d00a      	beq.n	80031e2 <HAL_GPIO_Init+0x16a>
 80031cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80031d0:	42a0      	cmp	r0, r4
 80031d2:	f43f af54 	beq.w	800307e <HAL_GPIO_Init+0x6>
 80031d6:	2407      	movs	r4, #7
 80031d8:	e754      	b.n	8003084 <HAL_GPIO_Init+0xc>
 80031da:	2401      	movs	r4, #1
 80031dc:	e752      	b.n	8003084 <HAL_GPIO_Init+0xc>
 80031de:	2402      	movs	r4, #2
 80031e0:	e750      	b.n	8003084 <HAL_GPIO_Init+0xc>
 80031e2:	2403      	movs	r4, #3
 80031e4:	e74e      	b.n	8003084 <HAL_GPIO_Init+0xc>
  }
}
 80031e6:	bcf0      	pop	{r4, r5, r6, r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	58000800 	.word	0x58000800
 80031f4:	48000400 	.word	0x48000400

080031f8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_GPIO_EXTI_IRQHandler>:
{
 80031fc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	4203      	tst	r3, r0
 8003204:	d100      	bne.n	8003208 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003206:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800320a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800320c:	f7ff fff4 	bl	80031f8 <HAL_GPIO_EXTI_Callback>
}
 8003210:	e7f9      	b.n	8003206 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003212:	bf00      	nop
 8003214:	58000800 	.word	0x58000800

08003218 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	f012 0f02 	tst.w	r2, #2
 8003220:	d001      	beq.n	8003226 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	f012 0f01 	tst.w	r2, #1
 800322e:	d103      	bne.n	8003238 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	619a      	str	r2, [r3, #24]
  }
}
 8003238:	4770      	bx	lr

0800323a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800323a:	b470      	push	{r4, r5, r6}
 800323c:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800323e:	6805      	ldr	r5, [r0, #0]
 8003240:	6868      	ldr	r0, [r5, #4]
 8003242:	0d74      	lsrs	r4, r6, #21
 8003244:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003248:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800324c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003250:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003254:	f044 0403 	orr.w	r4, r4, #3
 8003258:	ea20 0004 	bic.w	r0, r0, r4
 800325c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003264:	4319      	orrs	r1, r3
 8003266:	4331      	orrs	r1, r6
 8003268:	4301      	orrs	r1, r0
 800326a:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800326c:	bc70      	pop	{r4, r5, r6}
 800326e:	4770      	bx	lr

08003270 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003270:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <I2C_Enable_IRQ+0x78>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d017      	beq.n	80032a8 <I2C_Enable_IRQ+0x38>
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <I2C_Enable_IRQ+0x7c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d014      	beq.n	80032a8 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800327e:	f011 0f04 	tst.w	r1, #4
 8003282:	d12f      	bne.n	80032e4 <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8003284:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003286:	f011 0f01 	tst.w	r1, #1
 800328a:	d001      	beq.n	8003290 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800328c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003290:	f011 0f02 	tst.w	r1, #2
 8003294:	d001      	beq.n	800329a <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003296:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800329a:	f001 0112 	and.w	r1, r1, #18
 800329e:	2912      	cmp	r1, #18
 80032a0:	d110      	bne.n	80032c4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	e00d      	b.n	80032c4 <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032a8:	f011 0f04 	tst.w	r1, #4
 80032ac:	d10f      	bne.n	80032ce <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 80032ae:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80032b0:	f001 0211 	and.w	r2, r1, #17
 80032b4:	2a11      	cmp	r2, #17
 80032b6:	d00c      	beq.n	80032d2 <I2C_Enable_IRQ+0x62>
 80032b8:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80032bc:	2912      	cmp	r1, #18
 80032be:	d00b      	beq.n	80032d8 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80032c0:	2912      	cmp	r1, #18
 80032c2:	d00c      	beq.n	80032de <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032c4:	6801      	ldr	r1, [r0, #0]
 80032c6:	680a      	ldr	r2, [r1, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
}
 80032cc:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032ce:	23b8      	movs	r3, #184	; 0xb8
 80032d0:	e7ee      	b.n	80032b0 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032d2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80032d6:	e7ef      	b.n	80032b8 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	e7f0      	b.n	80032c0 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	e7ef      	b.n	80032c4 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032e4:	23b8      	movs	r3, #184	; 0xb8
 80032e6:	e7ce      	b.n	8003286 <I2C_Enable_IRQ+0x16>
 80032e8:	080041b9 	.word	0x080041b9
 80032ec:	080040c1 	.word	0x080040c1

080032f0 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032f0:	f011 0f01 	tst.w	r1, #1
 80032f4:	d009      	beq.n	800330a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032fe:	2b28      	cmp	r3, #40	; 0x28
 8003300:	d001      	beq.n	8003306 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003302:	23f2      	movs	r3, #242	; 0xf2
 8003304:	e002      	b.n	800330c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003306:	2342      	movs	r3, #66	; 0x42
 8003308:	e000      	b.n	800330c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800330a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800330c:	f011 0f02 	tst.w	r1, #2
 8003310:	d02c      	beq.n	800336c <I2C_Disable_IRQ+0x7c>
{
 8003312:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003314:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003318:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800331c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003320:	2a28      	cmp	r2, #40	; 0x28
 8003322:	d018      	beq.n	8003356 <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003324:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003328:	f011 0f04 	tst.w	r1, #4
 800332c:	d001      	beq.n	8003332 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800332e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003332:	f001 0211 	and.w	r2, r1, #17
 8003336:	2a11      	cmp	r2, #17
 8003338:	d00f      	beq.n	800335a <I2C_Disable_IRQ+0x6a>
 800333a:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800333e:	2912      	cmp	r1, #18
 8003340:	d00e      	beq.n	8003360 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003342:	2912      	cmp	r1, #18
 8003344:	d00f      	beq.n	8003366 <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003346:	6801      	ldr	r1, [r0, #0]
 8003348:	680a      	ldr	r2, [r1, #0]
 800334a:	ea22 0303 	bic.w	r3, r2, r3
 800334e:	600b      	str	r3, [r1, #0]
}
 8003350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003354:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003356:	4623      	mov	r3, r4
 8003358:	e7e6      	b.n	8003328 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800335a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800335e:	e7ec      	b.n	800333a <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	e7ed      	b.n	8003342 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	e7ec      	b.n	8003346 <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800336c:	f011 0f04 	tst.w	r1, #4
 8003370:	d001      	beq.n	8003376 <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003372:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003376:	f001 0211 	and.w	r2, r1, #17
 800337a:	2a11      	cmp	r2, #17
 800337c:	d00b      	beq.n	8003396 <I2C_Disable_IRQ+0xa6>
 800337e:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003382:	2912      	cmp	r1, #18
 8003384:	d00a      	beq.n	800339c <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003386:	2912      	cmp	r1, #18
 8003388:	d00b      	beq.n	80033a2 <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800338a:	6801      	ldr	r1, [r0, #0]
 800338c:	680a      	ldr	r2, [r1, #0]
 800338e:	ea22 0303 	bic.w	r3, r2, r3
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003396:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800339a:	e7f0      	b.n	800337e <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	e7f1      	b.n	8003386 <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 80033a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a6:	e7f0      	b.n	800338a <I2C_Disable_IRQ+0x9a>

080033a8 <I2C_IsAcknowledgeFailed>:
{
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b0:	6803      	ldr	r3, [r0, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f013 0f10 	tst.w	r3, #16
 80033b8:	d01c      	beq.n	80033f4 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	f012 0f20 	tst.w	r2, #32
 80033c2:	d119      	bne.n	80033f8 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80033c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80033c8:	d0f7      	beq.n	80033ba <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe fea7 	bl	800211c <HAL_GetTick>
 80033ce:	1b80      	subs	r0, r0, r6
 80033d0:	42a8      	cmp	r0, r5
 80033d2:	d801      	bhi.n	80033d8 <I2C_IsAcknowledgeFailed+0x30>
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	d1f0      	bne.n	80033ba <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033da:	f043 0320 	orr.w	r3, r3, #32
 80033de:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	2320      	movs	r3, #32
 80033e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80033ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
 80033f2:	e020      	b.n	8003436 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80033f4:	2000      	movs	r0, #0
 80033f6:	e01e      	b.n	8003436 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	2520      	movs	r5, #32
 8003400:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff08 	bl	8003218 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	6853      	ldr	r3, [r2, #4]
 800340c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003410:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003414:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800341e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	2300      	movs	r3, #0
 800342c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003430:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8003434:	2001      	movs	r0, #1
}
 8003436:	bd70      	pop	{r4, r5, r6, pc}

08003438 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4604      	mov	r4, r0
 800343c:	460d      	mov	r5, r1
 800343e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f013 0f02 	tst.w	r3, #2
 8003448:	d11d      	bne.n	8003486 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	4632      	mov	r2, r6
 800344c:	4629      	mov	r1, r5
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ffaa 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 8003454:	b9c8      	cbnz	r0, 800348a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003456:	f1b5 3fff 	cmp.w	r5, #4294967295
 800345a:	d0f1      	beq.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345c:	f7fe fe5e 	bl	800211c <HAL_GetTick>
 8003460:	1b80      	subs	r0, r0, r6
 8003462:	42a8      	cmp	r0, r5
 8003464:	d801      	bhi.n	800346a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003466:	2d00      	cmp	r5, #0
 8003468:	d1ea      	bne.n	8003440 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800346c:	f043 0320 	orr.w	r3, r3, #32
 8003470:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003472:	2320      	movs	r3, #32
 8003474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800347e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
 8003484:	e000      	b.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003486:	2000      	movs	r0, #0
}
 8003488:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7fc      	b.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800348e <I2C_WaitOnFlagUntilTimeout>:
{
 800348e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003490:	4605      	mov	r5, r0
 8003492:	460f      	mov	r7, r1
 8003494:	4616      	mov	r6, r2
 8003496:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	ea37 0303 	bics.w	r3, r7, r3
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	d118      	bne.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034ae:	d0f3      	beq.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7fe fe34 	bl	800211c <HAL_GetTick>
 80034b4:	9b06      	ldr	r3, [sp, #24]
 80034b6:	1ac0      	subs	r0, r0, r3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d801      	bhi.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x32>
 80034bc:	2c00      	cmp	r4, #0
 80034be:	d1eb      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034c2:	f043 0320 	orr.w	r3, r3, #32
 80034c6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	2320      	movs	r3, #32
 80034ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80034d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e000      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
}
 80034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034e0 <I2C_RequestMemoryWrite>:
{
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	4604      	mov	r4, r0
 80034e6:	4616      	mov	r6, r2
 80034e8:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034ea:	4b18      	ldr	r3, [pc, #96]	; (800354c <I2C_RequestMemoryWrite+0x6c>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034f2:	b2ea      	uxtb	r2, r5
 80034f4:	f7ff fea1 	bl	800323a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	9a07      	ldr	r2, [sp, #28]
 80034fa:	9906      	ldr	r1, [sp, #24]
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7ff ff9b 	bl	8003438 <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	b9e8      	cbnz	r0, 8003540 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003504:	2d01      	cmp	r5, #1
 8003506:	d10e      	bne.n	8003526 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	b2f6      	uxtb	r6, r6
 800350c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800350e:	9b07      	ldr	r3, [sp, #28]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	9b06      	ldr	r3, [sp, #24]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff ffb8 	bl	800348e <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	b178      	cbz	r0, 8003542 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e00d      	b.n	8003542 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	0a32      	lsrs	r2, r6, #8
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	9a07      	ldr	r2, [sp, #28]
 800352e:	9906      	ldr	r1, [sp, #24]
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff ff81 	bl	8003438 <I2C_WaitOnTXISFlagUntilTimeout>
 8003536:	b938      	cbnz	r0, 8003548 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	b2f6      	uxtb	r6, r6
 800353c:	629e      	str	r6, [r3, #40]	; 0x28
 800353e:	e7e6      	b.n	800350e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
}
 8003542:	4618      	mov	r0, r3
 8003544:	b002      	add	sp, #8
 8003546:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e7fa      	b.n	8003542 <I2C_RequestMemoryWrite+0x62>
 800354c:	80002000 	.word	0x80002000

08003550 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4605      	mov	r5, r0
 8003554:	460c      	mov	r4, r1
 8003556:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f013 0f20 	tst.w	r3, #32
 8003560:	d11a      	bne.n	8003598 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	4632      	mov	r2, r6
 8003564:	4621      	mov	r1, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f7ff ff1e 	bl	80033a8 <I2C_IsAcknowledgeFailed>
 800356c:	b9b0      	cbnz	r0, 800359c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe fdd5 	bl	800211c <HAL_GetTick>
 8003572:	1b80      	subs	r0, r0, r6
 8003574:	42a0      	cmp	r0, r4
 8003576:	d801      	bhi.n	800357c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003578:	2c00      	cmp	r4, #0
 800357a:	d1ed      	bne.n	8003558 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800357e:	f043 0320 	orr.w	r3, r3, #32
 8003582:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003584:	2320      	movs	r3, #32
 8003586:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003590:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
}
 8003596:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003598:	2000      	movs	r0, #0
 800359a:	e7fc      	b.n	8003596 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
 800359e:	e7fa      	b.n	8003596 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080035a0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d059      	beq.n	8003658 <HAL_I2C_Init+0xb8>
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d043      	beq.n	8003638 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	2324      	movs	r3, #36	; 0x24
 80035b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80035c8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	6893      	ldr	r3, [r2, #8]
 80035ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035d2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d4:	68e3      	ldr	r3, [r4, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d033      	beq.n	8003642 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80035e2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d031      	beq.n	800364e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	6853      	ldr	r3, [r2, #4]
 80035ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	68d3      	ldr	r3, [r2, #12]
 80035fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003600:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	6962      	ldr	r2, [r4, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	69a1      	ldr	r1, [r4, #24]
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003610:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003612:	69e3      	ldr	r3, [r4, #28]
 8003614:	6a21      	ldr	r1, [r4, #32]
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003626:	2000      	movs	r0, #0
 8003628:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800362a:	2320      	movs	r3, #32
 800362c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003636:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003638:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800363c:	f7fd ff28 	bl	8001490 <HAL_I2C_MspInit>
 8003640:	e7b6      	b.n	80035b0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003642:	68a3      	ldr	r3, [r4, #8]
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364a:	6093      	str	r3, [r2, #8]
 800364c:	e7ca      	b.n	80035e4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	e7c8      	b.n	80035ea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003658:	2001      	movs	r0, #1
}
 800365a:	4770      	bx	lr

0800365c <HAL_I2C_Master_Transmit_IT>:
{
 800365c:	b530      	push	{r4, r5, lr}
 800365e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003664:	b2e4      	uxtb	r4, r4
 8003666:	2c20      	cmp	r4, #32
 8003668:	d137      	bne.n	80036da <HAL_I2C_Master_Transmit_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800366a:	6804      	ldr	r4, [r0, #0]
 800366c:	69a4      	ldr	r4, [r4, #24]
 800366e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003672:	d135      	bne.n	80036e0 <HAL_I2C_Master_Transmit_IT+0x84>
    __HAL_LOCK(hi2c);
 8003674:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003678:	2c01      	cmp	r4, #1
 800367a:	d033      	beq.n	80036e4 <HAL_I2C_Master_Transmit_IT+0x88>
 800367c:	2401      	movs	r4, #1
 800367e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003682:	2421      	movs	r4, #33	; 0x21
 8003684:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003688:	2410      	movs	r4, #16
 800368a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800368e:	2400      	movs	r4, #0
 8003690:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8003692:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003694:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_I2C_Master_Transmit_IT+0x8c>)
 8003698:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_I2C_Master_Transmit_IT+0x90>)
 800369c:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2bff      	cmp	r3, #255	; 0xff
 80036a4:	d914      	bls.n	80036d0 <HAL_I2C_Master_Transmit_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a6:	23ff      	movs	r3, #255	; 0xff
 80036a8:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80036aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ae:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80036b0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80036b4:	480e      	ldr	r0, [pc, #56]	; (80036f0 <HAL_I2C_Master_Transmit_IT+0x94>)
 80036b6:	9000      	str	r0, [sp, #0]
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff fdbe 	bl	800323a <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 80036be:	2500      	movs	r5, #0
 80036c0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036c4:	2101      	movs	r1, #1
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fdd2 	bl	8003270 <I2C_Enable_IRQ>
    return HAL_OK;
 80036cc:	4628      	mov	r0, r5
 80036ce:	e005      	b.n	80036dc <HAL_I2C_Master_Transmit_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 80036d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036d2:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d8:	e7e9      	b.n	80036ae <HAL_I2C_Master_Transmit_IT+0x52>
    return HAL_BUSY;
 80036da:	2002      	movs	r0, #2
}
 80036dc:	b003      	add	sp, #12
 80036de:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 80036e0:	2002      	movs	r0, #2
 80036e2:	e7fb      	b.n	80036dc <HAL_I2C_Master_Transmit_IT+0x80>
    __HAL_LOCK(hi2c);
 80036e4:	2002      	movs	r0, #2
 80036e6:	e7f9      	b.n	80036dc <HAL_I2C_Master_Transmit_IT+0x80>
 80036e8:	ffff0000 	.word	0xffff0000
 80036ec:	08003f45 	.word	0x08003f45
 80036f0:	80002000 	.word	0x80002000

080036f4 <HAL_I2C_Master_Receive_IT>:
{
 80036f4:	b530      	push	{r4, r5, lr}
 80036f6:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80036fc:	b2e4      	uxtb	r4, r4
 80036fe:	2c20      	cmp	r4, #32
 8003700:	d137      	bne.n	8003772 <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003702:	6804      	ldr	r4, [r0, #0]
 8003704:	69a4      	ldr	r4, [r4, #24]
 8003706:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800370a:	d135      	bne.n	8003778 <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 800370c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8003710:	2c01      	cmp	r4, #1
 8003712:	d033      	beq.n	800377c <HAL_I2C_Master_Receive_IT+0x88>
 8003714:	2401      	movs	r4, #1
 8003716:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800371a:	2422      	movs	r4, #34	; 0x22
 800371c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003720:	2410      	movs	r4, #16
 8003722:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003726:	2400      	movs	r4, #0
 8003728:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 800372a:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800372c:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_I2C_Master_Receive_IT+0x8c>)
 8003730:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_I2C_Master_Receive_IT+0x90>)
 8003734:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003736:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2bff      	cmp	r3, #255	; 0xff
 800373c:	d914      	bls.n	8003768 <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800373e:	23ff      	movs	r3, #255	; 0xff
 8003740:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003746:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003748:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800374c:	480e      	ldr	r0, [pc, #56]	; (8003788 <HAL_I2C_Master_Receive_IT+0x94>)
 800374e:	9000      	str	r0, [sp, #0]
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff fd72 	bl	800323a <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8003756:	2500      	movs	r5, #0
 8003758:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800375c:	2102      	movs	r1, #2
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff fd86 	bl	8003270 <I2C_Enable_IRQ>
    return HAL_OK;
 8003764:	4628      	mov	r0, r5
 8003766:	e005      	b.n	8003774 <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8003768:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800376a:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800376c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003770:	e7e9      	b.n	8003746 <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 8003772:	2002      	movs	r0, #2
}
 8003774:	b003      	add	sp, #12
 8003776:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 8003778:	2002      	movs	r0, #2
 800377a:	e7fb      	b.n	8003774 <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 800377c:	2002      	movs	r0, #2
 800377e:	e7f9      	b.n	8003774 <HAL_I2C_Master_Receive_IT+0x80>
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	08003f45 	.word	0x08003f45
 8003788:	80002400 	.word	0x80002400

0800378c <HAL_I2C_Mem_Write>:
{
 800378c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003796:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800379a:	b2ed      	uxtb	r5, r5
 800379c:	2d20      	cmp	r5, #32
 800379e:	f040 80ba 	bne.w	8003916 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80037a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037a4:	b1dc      	cbz	r4, 80037de <HAL_I2C_Mem_Write+0x52>
 80037a6:	b1d7      	cbz	r7, 80037de <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80037a8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80037ac:	2c01      	cmp	r4, #1
 80037ae:	f000 80b7 	beq.w	8003920 <HAL_I2C_Mem_Write+0x194>
 80037b2:	4698      	mov	r8, r3
 80037b4:	4691      	mov	r9, r2
 80037b6:	460d      	mov	r5, r1
 80037b8:	4604      	mov	r4, r0
 80037ba:	f04f 0a01 	mov.w	sl, #1
 80037be:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80037c2:	f7fe fcab 	bl	800211c <HAL_GetTick>
 80037c6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c8:	9000      	str	r0, [sp, #0]
 80037ca:	2319      	movs	r3, #25
 80037cc:	4652      	mov	r2, sl
 80037ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff fe5b 	bl	800348e <I2C_WaitOnFlagUntilTimeout>
 80037d8:	b130      	cbz	r0, 80037e8 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e09c      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e097      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037e8:	2321      	movs	r3, #33	; 0x21
 80037ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80037f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037fa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80037fc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037fe:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003800:	9601      	str	r6, [sp, #4]
 8003802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4643      	mov	r3, r8
 8003808:	464a      	mov	r2, r9
 800380a:	4629      	mov	r1, r5
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff fe67 	bl	80034e0 <I2C_RequestMemoryWrite>
 8003812:	b970      	cbnz	r0, 8003832 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2bff      	cmp	r3, #255	; 0xff
 800381a:	d90f      	bls.n	800383c <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003828:	4629      	mov	r1, r5
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fd05 	bl	800323a <I2C_TransferConfig>
 8003830:	e021      	b.n	8003876 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003838:	4653      	mov	r3, sl
 800383a:	e06d      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 800383c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800383e:	b292      	uxth	r2, r2
 8003840:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	4629      	mov	r1, r5
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fcf3 	bl	800323a <I2C_TransferConfig>
 8003854:	e00f      	b.n	8003876 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8003856:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003858:	b292      	uxth	r2, r2
 800385a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	4629      	mov	r1, r5
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fce6 	bl	800323a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800386e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d032      	beq.n	80038dc <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003876:	4632      	mov	r2, r6
 8003878:	990c      	ldr	r1, [sp, #48]	; 0x30
 800387a:	4620      	mov	r0, r4
 800387c:	f7ff fddc 	bl	8003438 <I2C_WaitOnTXISFlagUntilTimeout>
 8003880:	2800      	cmp	r0, #0
 8003882:	d14f      	bne.n	8003924 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003884:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800388c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800388e:	3301      	adds	r3, #1
 8003890:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003892:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003894:	3b01      	subs	r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800389a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038a4:	b292      	uxth	r2, r2
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d0e1      	beq.n	800386e <HAL_I2C_Mem_Write+0xe2>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1df      	bne.n	800386e <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	9600      	str	r6, [sp, #0]
 80038b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff fde9 	bl	800348e <I2C_WaitOnFlagUntilTimeout>
 80038bc:	bba0      	cbnz	r0, 8003928 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2bff      	cmp	r3, #255	; 0xff
 80038c4:	d9c7      	bls.n	8003856 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038ca:	2300      	movs	r3, #0
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d2:	4629      	mov	r1, r5
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff fcb0 	bl	800323a <I2C_TransferConfig>
 80038da:	e7c8      	b.n	800386e <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038dc:	4632      	mov	r2, r6
 80038de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff fe35 	bl	8003550 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	bb00      	cbnz	r0, 800392c <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	2120      	movs	r1, #32
 80038ee:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	6842      	ldr	r2, [r0, #4]
 80038f4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80038f8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80038fc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390a:	2200      	movs	r2, #0
 800390c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003910:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003914:	e000      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
}
 8003918:	4618      	mov	r0, r3
 800391a:	b002      	add	sp, #8
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003920:	2302      	movs	r3, #2
 8003922:	e7f9      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e7f7      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e7f5      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e7f3      	b.n	8003918 <HAL_I2C_Mem_Write+0x18c>

08003930 <HAL_I2C_EV_IRQHandler>:
{
 8003930:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003932:	6803      	ldr	r3, [r0, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003936:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8003938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800393a:	b103      	cbz	r3, 800393e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800393c:	4798      	blx	r3
}
 800393e:	bd08      	pop	{r3, pc}

08003940 <I2C_ITMasterSeqCplt>:
{
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	2300      	movs	r3, #0
 8003946:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800394a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b21      	cmp	r3, #33	; 0x21
 8003952:	d00f      	beq.n	8003974 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003954:	2320      	movs	r3, #32
 8003956:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800395a:	2312      	movs	r3, #18
 800395c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800395e:	2500      	movs	r5, #0
 8003960:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003962:	2102      	movs	r1, #2
 8003964:	f7ff fcc4 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003968:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800396c:	4620      	mov	r0, r4
 800396e:	f7fd fe85 	bl	800167c <HAL_I2C_MasterRxCpltCallback>
}
 8003972:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8003974:	2320      	movs	r3, #32
 8003976:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800397a:	2311      	movs	r3, #17
 800397c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800397e:	2500      	movs	r5, #0
 8003980:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003982:	2101      	movs	r1, #1
 8003984:	f7ff fcb4 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003988:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800398c:	4620      	mov	r0, r4
 800398e:	f7fd fe67 	bl	8001660 <HAL_I2C_MasterTxCpltCallback>
 8003992:	e7ee      	b.n	8003972 <I2C_ITMasterSeqCplt+0x32>

08003994 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003994:	4770      	bx	lr

08003996 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003996:	4770      	bx	lr

08003998 <I2C_ITSlaveSeqCplt>:
{
 8003998:	b510      	push	{r4, lr}
 800399a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	2300      	movs	r3, #0
 800399e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b29      	cmp	r3, #41	; 0x29
 80039aa:	d005      	beq.n	80039b8 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b2a      	cmp	r3, #42	; 0x2a
 80039b4:	d00f      	beq.n	80039d6 <I2C_ITSlaveSeqCplt+0x3e>
}
 80039b6:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039b8:	2328      	movs	r3, #40	; 0x28
 80039ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039be:	2321      	movs	r3, #33	; 0x21
 80039c0:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039c2:	2101      	movs	r1, #1
 80039c4:	f7ff fc94 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039c8:	2300      	movs	r3, #0
 80039ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff ffe0 	bl	8003994 <HAL_I2C_SlaveTxCpltCallback>
 80039d4:	e7ef      	b.n	80039b6 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039d6:	2328      	movs	r3, #40	; 0x28
 80039d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039dc:	2322      	movs	r3, #34	; 0x22
 80039de:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039e0:	2102      	movs	r1, #2
 80039e2:	f7ff fc85 	bl	80032f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff ffd2 	bl	8003996 <HAL_I2C_SlaveRxCpltCallback>
}
 80039f2:	e7e0      	b.n	80039b6 <I2C_ITSlaveSeqCplt+0x1e>

080039f4 <HAL_I2C_AddrCallback>:
}
 80039f4:	4770      	bx	lr

080039f6 <I2C_ITAddrCplt>:
{
 80039f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a00:	2b28      	cmp	r3, #40	; 0x28
 8003a02:	d006      	beq.n	8003a12 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a04:	6803      	ldr	r3, [r0, #0]
 8003a06:	2208      	movs	r2, #8
 8003a08:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8003a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a12:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8003a14:	6803      	ldr	r3, [r0, #0]
 8003a16:	699e      	ldr	r6, [r3, #24]
 8003a18:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	0c12      	lsrs	r2, r2, #16
 8003a20:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a2a:	68df      	ldr	r7, [r3, #12]
 8003a2c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a30:	68c1      	ldr	r1, [r0, #12]
 8003a32:	2902      	cmp	r1, #2
 8003a34:	d121      	bne.n	8003a7a <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003a36:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8003a3a:	f015 0f06 	tst.w	r5, #6
 8003a3e:	d110      	bne.n	8003a62 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8003a40:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a42:	3101      	adds	r1, #1
 8003a44:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a46:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a48:	2902      	cmp	r1, #2
 8003a4a:	d1e1      	bne.n	8003a10 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a50:	2008      	movs	r0, #8
 8003a52:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8003a54:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff ffca 	bl	80039f4 <HAL_I2C_AddrCallback>
 8003a60:	e7d6      	b.n	8003a10 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a62:	2104      	movs	r1, #4
 8003a64:	f7ff fc44 	bl	80032f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a6e:	463a      	mov	r2, r7
 8003a70:	4631      	mov	r1, r6
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7ff ffbe 	bl	80039f4 <HAL_I2C_AddrCallback>
 8003a78:	e7ca      	b.n	8003a10 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a7a:	2104      	movs	r1, #4
 8003a7c:	f7ff fc38 	bl	80032f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a80:	2300      	movs	r3, #0
 8003a82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a86:	462a      	mov	r2, r5
 8003a88:	4631      	mov	r1, r6
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff ffb2 	bl	80039f4 <HAL_I2C_AddrCallback>
 8003a90:	e7be      	b.n	8003a10 <I2C_ITAddrCplt+0x1a>

08003a92 <HAL_I2C_ListenCpltCallback>:
}
 8003a92:	4770      	bx	lr

08003a94 <I2C_ITListenCplt>:
{
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <I2C_ITListenCplt+0x60>)
 8003a9a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003aaa:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003aac:	f011 0f04 	tst.w	r1, #4
 8003ab0:	d012      	beq.n	8003ad8 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ab8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003abc:	3301      	adds	r3, #1
 8003abe:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003ac0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003ac2:	b14b      	cbz	r3, 8003ad8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8003ac8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ad8:	2107      	movs	r1, #7
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff fc08 	bl	80032f0 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff ffd0 	bl	8003a92 <HAL_I2C_ListenCpltCallback>
}
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	ffff0000 	.word	0xffff0000

08003af8 <HAL_I2C_MemTxCpltCallback>:
}
 8003af8:	4770      	bx	lr

08003afa <HAL_I2C_MemRxCpltCallback>:
}
 8003afa:	4770      	bx	lr

08003afc <HAL_I2C_ErrorCallback>:
}
 8003afc:	4770      	bx	lr

08003afe <HAL_I2C_AbortCpltCallback>:
}
 8003afe:	4770      	bx	lr

08003b00 <I2C_ITError>:
{
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b04:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b0e:	4836      	ldr	r0, [pc, #216]	; (8003be8 <I2C_ITError+0xe8>)
 8003b10:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b12:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003b14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003b16:	4311      	orrs	r1, r2
 8003b18:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b1a:	3b28      	subs	r3, #40	; 0x28
 8003b1c:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d822      	bhi.n	8003b68 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b22:	2103      	movs	r1, #3
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7ff fbe3 	bl	80032f0 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b2a:	2328      	movs	r3, #40	; 0x28
 8003b2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <I2C_ITError+0xec>)
 8003b36:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003b40:	d022      	beq.n	8003b88 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b48:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b4c:	b15b      	cbz	r3, 8003b66 <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <I2C_ITError+0xf0>)
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b5a:	f7ff f9f1 	bl	8002f40 <HAL_DMA_Abort_IT>
 8003b5e:	b110      	cbz	r0, 8003b66 <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b64:	4798      	blx	r3
}
 8003b66:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b68:	2107      	movs	r1, #7
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7ff fbc0 	bl	80032f0 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b60      	cmp	r3, #96	; 0x60
 8003b78:	d002      	beq.n	8003b80 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003b84:	6363      	str	r3, [r4, #52]	; 0x34
 8003b86:	e7d7      	b.n	8003b38 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003b8e:	d014      	beq.n	8003bba <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b96:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0e3      	beq.n	8003b66 <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <I2C_ITError+0xf0>)
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ba8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003baa:	f7ff f9c9 	bl	8002f40 <HAL_DMA_Abort_IT>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0d9      	beq.n	8003b66 <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003bb6:	4798      	blx	r3
 8003bb8:	e7d5      	b.n	8003b66 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b60      	cmp	r3, #96	; 0x60
 8003bc2:	d006      	beq.n	8003bd2 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff ff96 	bl	8003afc <HAL_I2C_ErrorCallback>
}
 8003bd0:	e7c9      	b.n	8003b66 <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7ff ff8d 	bl	8003afe <HAL_I2C_AbortCpltCallback>
 8003be4:	e7bf      	b.n	8003b66 <I2C_ITError+0x66>
 8003be6:	bf00      	nop
 8003be8:	ffff0000 	.word	0xffff0000
 8003bec:	08003d15 	.word	0x08003d15
 8003bf0:	080042f9 	.word	0x080042f9

08003bf4 <I2C_ITSlaveCplt>:
{
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003bfa:	6803      	ldr	r3, [r0, #0]
 8003bfc:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfe:	2220      	movs	r2, #32
 8003c00:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c02:	2107      	movs	r1, #7
 8003c04:	f7ff fb74 	bl	80032f0 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	6853      	ldr	r3, [r2, #4]
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c10:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	6853      	ldr	r3, [r2, #4]
 8003c16:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003c1a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003c1e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff faf5 	bl	8003218 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c2e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003c32:	d03a      	beq.n	8003caa <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 8003c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c36:	b11b      	cbz	r3, 8003c40 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c40:	f015 0f04 	tst.w	r5, #4
 8003c44:	d010      	beq.n	8003c68 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c46:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003c58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c5a:	b12b      	cbz	r3, 8003c68 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003c68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b11b      	cbz	r3, 8003c76 <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c7e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c82:	b9eb      	cbnz	r3, 8003cc0 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c8a:	d127      	bne.n	8003cdc <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b22      	cmp	r3, #34	; 0x22
 8003c94:	d031      	beq.n	8003cfa <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	2320      	movs	r3, #32
 8003c98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7ff fe76 	bl	8003994 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ca8:	e026      	b.n	8003cf8 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003caa:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003cae:	d0c7      	beq.n	8003c40 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8003cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0c4      	beq.n	8003c40 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003cbe:	e7bf      	b.n	8003c40 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff ff1c 	bl	8003b00 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b28      	cmp	r3, #40	; 0x28
 8003cd0:	d112      	bne.n	8003cf8 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f7ff fedd 	bl	8003a94 <I2C_ITListenCplt>
 8003cda:	e00d      	b.n	8003cf8 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff fe5b 	bl	8003998 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <I2C_ITSlaveCplt+0x11c>)
 8003ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fecd 	bl	8003a92 <HAL_I2C_ListenCpltCallback>
}
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7ff fe45 	bl	8003996 <HAL_I2C_SlaveRxCpltCallback>
 8003d0c:	e7f4      	b.n	8003cf8 <I2C_ITSlaveCplt+0x104>
 8003d0e:	bf00      	nop
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <I2C_Slave_ISR_IT>:
{
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003d1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f000 809d 	beq.w	8003e5e <I2C_Slave_ISR_IT+0x14a>
 8003d24:	4604      	mov	r4, r0
 8003d26:	460d      	mov	r5, r1
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d2e:	f011 0f10 	tst.w	r1, #16
 8003d32:	d03f      	beq.n	8003db4 <I2C_Slave_ISR_IT+0xa0>
 8003d34:	f016 0f10 	tst.w	r6, #16
 8003d38:	d03c      	beq.n	8003db4 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 8003d3a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	bb4b      	cbnz	r3, 8003d94 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003d40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b28      	cmp	r3, #40	; 0x28
 8003d48:	d011      	beq.n	8003d6e <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b29      	cmp	r3, #41	; 0x29
 8003d52:	d012      	beq.n	8003d7a <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	2210      	movs	r2, #16
 8003d58:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d5a:	f015 0f20 	tst.w	r5, #32
 8003d5e:	d002      	beq.n	8003d66 <I2C_Slave_ISR_IT+0x52>
 8003d60:	f016 0f20 	tst.w	r6, #32
 8003d64:	d176      	bne.n	8003e54 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003d6e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003d72:	d1ea      	bne.n	8003d4a <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d74:	f7ff fe8e 	bl	8003a94 <I2C_ITListenCplt>
 8003d78:	e7ef      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d7a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003d7e:	d0e9      	beq.n	8003d54 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	2210      	movs	r2, #16
 8003d84:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff fa46 	bl	8003218 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff fe03 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003d92:	e7e2      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	6803      	ldr	r3, [r0, #0]
 8003d96:	2110      	movs	r1, #16
 8003d98:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003da2:	b112      	cbz	r2, 8003daa <I2C_Slave_ISR_IT+0x96>
 8003da4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003da8:	d1d7      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003daa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff fea7 	bl	8003b00 <I2C_ITError>
 8003db2:	e7d2      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003db4:	f015 0f04 	tst.w	r5, #4
 8003db8:	d020      	beq.n	8003dfc <I2C_Slave_ISR_IT+0xe8>
 8003dba:	f016 0f04 	tst.w	r6, #4
 8003dbe:	d01d      	beq.n	8003dfc <I2C_Slave_ISR_IT+0xe8>
    if (hi2c->XferCount > 0U)
 8003dc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	b17b      	cbz	r3, 8003de6 <I2C_Slave_ISR_IT+0xd2>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8003dc6:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dd0:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003dd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003dde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1b5      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x46>
 8003dee:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003df2:	d0b2      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff fdcf 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003dfa:	e7ae      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003dfc:	f015 0f08 	tst.w	r5, #8
 8003e00:	d002      	beq.n	8003e08 <I2C_Slave_ISR_IT+0xf4>
 8003e02:	f016 0f08 	tst.w	r6, #8
 8003e06:	d117      	bne.n	8003e38 <I2C_Slave_ISR_IT+0x124>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e08:	f015 0f02 	tst.w	r5, #2
 8003e0c:	d0a5      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x46>
 8003e0e:	f016 0f02 	tst.w	r6, #2
 8003e12:	d0a2      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8003e14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b19b      	cbz	r3, 8003e42 <I2C_Slave_ISR_IT+0x12e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	7812      	ldrb	r2, [r2, #0]
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e24:	3301      	adds	r3, #1
 8003e26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e32:	3b01      	subs	r3, #1
 8003e34:	8523      	strh	r3, [r4, #40]	; 0x28
 8003e36:	e790      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7ff fddb 	bl	80039f6 <I2C_ITAddrCplt>
 8003e40:	e78b      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003e42:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003e46:	d001      	beq.n	8003e4c <I2C_Slave_ISR_IT+0x138>
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d186      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f7ff fda3 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003e52:	e782      	b.n	8003d5a <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e54:	4629      	mov	r1, r5
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7ff fecc 	bl	8003bf4 <I2C_ITSlaveCplt>
 8003e5c:	e783      	b.n	8003d66 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8003e5e:	2002      	movs	r0, #2
 8003e60:	e784      	b.n	8003d6c <I2C_Slave_ISR_IT+0x58>

08003e62 <I2C_ITMasterCplt>:
{
 8003e62:	b510      	push	{r4, lr}
 8003e64:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e66:	6803      	ldr	r3, [r0, #0]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8003e6c:	6802      	ldr	r2, [r0, #0]
 8003e6e:	6853      	ldr	r3, [r2, #4]
 8003e70:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003e74:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003e78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8003e86:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e88:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003e8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003e8e:	f011 0f10 	tst.w	r1, #16
 8003e92:	d006      	beq.n	8003ea2 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	6803      	ldr	r3, [r0, #0]
 8003e96:	2210      	movs	r2, #16
 8003e98:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7ff f9b8 	bl	8003218 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f7ff fa20 	bl	80032f0 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 8003eb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003eb2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d01b      	beq.n	8003ef4 <I2C_ITMasterCplt+0x92>
 8003ebc:	b9d2      	cbnz	r2, 8003ef4 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ebe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b21      	cmp	r3, #33	; 0x21
 8003ec6:	d01a      	beq.n	8003efe <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ec8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b22      	cmp	r3, #34	; 0x22
 8003ed0:	d114      	bne.n	8003efc <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ed8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d027      	beq.n	8003f32 <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ee8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7fd fbc5 	bl	800167c <HAL_I2C_MasterRxCpltCallback>
}
 8003ef2:	e003      	b.n	8003efc <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ef4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f7ff fe02 	bl	8003b00 <I2C_ITError>
}
 8003efc:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	2320      	movs	r3, #32
 8003f00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f04:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d008      	beq.n	8003f20 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7fd fba1 	bl	8001660 <HAL_I2C_MasterTxCpltCallback>
 8003f1e:	e7ed      	b.n	8003efc <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff fde4 	bl	8003af8 <HAL_I2C_MemTxCpltCallback>
 8003f30:	e7e4      	b.n	8003efc <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff fddc 	bl	8003afa <HAL_I2C_MemRxCpltCallback>
 8003f42:	e7db      	b.n	8003efc <I2C_ITMasterCplt+0x9a>

08003f44 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8003f44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f000 80b7 	beq.w	80040bc <I2C_Master_ISR_IT+0x178>
{
 8003f4e:	b570      	push	{r4, r5, r6, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	4604      	mov	r4, r0
 8003f54:	460d      	mov	r5, r1
 8003f56:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f5e:	f011 0f10 	tst.w	r1, #16
 8003f62:	d002      	beq.n	8003f6a <I2C_Master_ISR_IT+0x26>
 8003f64:	f012 0f10 	tst.w	r2, #16
 8003f68:	d121      	bne.n	8003fae <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f6a:	f015 0f04 	tst.w	r5, #4
 8003f6e:	d028      	beq.n	8003fc2 <I2C_Master_ISR_IT+0x7e>
 8003f70:	f016 0f04 	tst.w	r6, #4
 8003f74:	d025      	beq.n	8003fc2 <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f76:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f84:	3301      	adds	r3, #1
 8003f86:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003f8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f96:	f015 0f20 	tst.w	r5, #32
 8003f9a:	d003      	beq.n	8003fa4 <I2C_Master_ISR_IT+0x60>
 8003f9c:	f016 0f20 	tst.w	r6, #32
 8003fa0:	f040 8087 	bne.w	80040b2 <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003faa:	b002      	add	sp, #8
 8003fac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fae:	6803      	ldr	r3, [r0, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 8003fbc:	f7ff f92c 	bl	8003218 <I2C_Flush_TXDR>
 8003fc0:	e7e9      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fc2:	f015 0f02 	tst.w	r5, #2
 8003fc6:	d011      	beq.n	8003fec <I2C_Master_ISR_IT+0xa8>
 8003fc8:	f016 0f02 	tst.w	r6, #2
 8003fcc:	d00e      	beq.n	8003fec <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 8003fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8003fdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8003fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003fea:	e7d4      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003fec:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003ff0:	d03f      	beq.n	8004072 <I2C_Master_ISR_IT+0x12e>
 8003ff2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003ff6:	d03c      	beq.n	8004072 <I2C_Master_ISR_IT+0x12e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	b35b      	cbz	r3, 8004056 <I2C_Master_ISR_IT+0x112>
 8003ffe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004000:	bb4b      	cbnz	r3, 8004056 <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800400a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2bff      	cmp	r3, #255	; 0xff
 8004010:	d80e      	bhi.n	8004030 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 8004012:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004014:	b292      	uxth	r2, r2
 8004016:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800401a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800401e:	d011      	beq.n	8004044 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004022:	2000      	movs	r0, #0
 8004024:	9000      	str	r0, [sp, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	4620      	mov	r0, r4
 800402a:	f7ff f906 	bl	800323a <I2C_TransferConfig>
 800402e:	e7b2      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004034:	2300      	movs	r3, #0
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff f8fc 	bl	800323a <I2C_TransferConfig>
 8004042:	e7a8      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff f8f3 	bl	800323a <I2C_TransferConfig>
 8004054:	e79f      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800405e:	d103      	bne.n	8004068 <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 8004060:	4620      	mov	r0, r4
 8004062:	f7ff fc6d 	bl	8003940 <I2C_ITMasterSeqCplt>
 8004066:	e796      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff fd48 	bl	8003b00 <I2C_ITError>
 8004070:	e791      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004072:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004076:	d08e      	beq.n	8003f96 <I2C_Master_ISR_IT+0x52>
 8004078:	f016 0f40 	tst.w	r6, #64	; 0x40
 800407c:	d08b      	beq.n	8003f96 <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 800407e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	b98b      	cbnz	r3, 80040a8 <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800408c:	d183      	bne.n	8003f96 <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800408e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004090:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004094:	d104      	bne.n	80040a0 <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	e77a      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff fc4d 	bl	8003940 <I2C_ITMasterSeqCplt>
 80040a6:	e776      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040a8:	2140      	movs	r1, #64	; 0x40
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff fd28 	bl	8003b00 <I2C_ITError>
 80040b0:	e771      	b.n	8003f96 <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80040b2:	4629      	mov	r1, r5
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff fed4 	bl	8003e62 <I2C_ITMasterCplt>
 80040ba:	e773      	b.n	8003fa4 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 80040bc:	2002      	movs	r0, #2
}
 80040be:	4770      	bx	lr

080040c0 <I2C_Slave_ISR_DMA>:
{
 80040c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80040c2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80040c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d073      	beq.n	80041b4 <I2C_Slave_ISR_DMA+0xf4>
 80040cc:	4604      	mov	r4, r0
 80040ce:	2301      	movs	r3, #1
 80040d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040d4:	f011 0f10 	tst.w	r1, #16
 80040d8:	d054      	beq.n	8004184 <I2C_Slave_ISR_DMA+0xc4>
 80040da:	f012 0f10 	tst.w	r2, #16
 80040de:	d051      	beq.n	8004184 <I2C_Slave_ISR_DMA+0xc4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040e0:	f3c2 3380 	ubfx	r3, r2, #14, #1
 80040e4:	b913      	cbnz	r3, 80040ec <I2C_Slave_ISR_DMA+0x2c>
 80040e6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80040ea:	d047      	beq.n	800417c <I2C_Slave_ISR_DMA+0xbc>
      if (hi2c->hdmarx != NULL)
 80040ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80040ee:	b138      	cbz	r0, 8004100 <I2C_Slave_ISR_DMA+0x40>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80040f0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80040f4:	d006      	beq.n	8004104 <I2C_Slave_ISR_DMA+0x44>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80040f6:	6802      	ldr	r2, [r0, #0]
 80040f8:	6852      	ldr	r2, [r2, #4]
 80040fa:	b1da      	cbz	r2, 8004134 <I2C_Slave_ISR_DMA+0x74>
  uint32_t treatdmanack = 0U;
 80040fc:	2000      	movs	r0, #0
 80040fe:	e002      	b.n	8004106 <I2C_Slave_ISR_DMA+0x46>
 8004100:	2000      	movs	r0, #0
 8004102:	e000      	b.n	8004106 <I2C_Slave_ISR_DMA+0x46>
 8004104:	2000      	movs	r0, #0
      if (hi2c->hdmatx != NULL)
 8004106:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004108:	b11a      	cbz	r2, 8004112 <I2C_Slave_ISR_DMA+0x52>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800410a:	b113      	cbz	r3, 8004112 <I2C_Slave_ISR_DMA+0x52>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800410c:	6813      	ldr	r3, [r2, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b193      	cbz	r3, 8004138 <I2C_Slave_ISR_DMA+0x78>
      if (treatdmanack == 1U)
 8004112:	b988      	cbnz	r0, 8004138 <I2C_Slave_ISR_DMA+0x78>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	2210      	movs	r2, #16
 8004118:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800411a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004122:	b115      	cbz	r5, 800412a <I2C_Slave_ISR_DMA+0x6a>
 8004124:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8004128:	d138      	bne.n	800419c <I2C_Slave_ISR_DMA+0xdc>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800412a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff fce7 	bl	8003b00 <I2C_ITError>
 8004132:	e033      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
            treatdmanack = 1U;
 8004134:	2001      	movs	r0, #1
 8004136:	e7e6      	b.n	8004106 <I2C_Slave_ISR_DMA+0x46>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8004138:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b28      	cmp	r3, #40	; 0x28
 8004140:	d008      	beq.n	8004154 <I2C_Slave_ISR_DMA+0x94>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004142:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b29      	cmp	r3, #41	; 0x29
 800414a:	d00a      	beq.n	8004162 <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e023      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8004154:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
 8004158:	d1f3      	bne.n	8004142 <I2C_Slave_ISR_DMA+0x82>
          I2C_ITListenCplt(hi2c, ITFlags);
 800415a:	4620      	mov	r0, r4
 800415c:	f7ff fc9a 	bl	8003a94 <I2C_ITListenCplt>
 8004160:	e01c      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004162:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004166:	d0f1      	beq.n	800414c <I2C_Slave_ISR_DMA+0x8c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	2210      	movs	r2, #16
 800416c:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 800416e:	4620      	mov	r0, r4
 8004170:	f7ff f852 	bl	8003218 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff fc0f 	bl	8003998 <I2C_ITSlaveSeqCplt>
 800417a:	e00f      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	6803      	ldr	r3, [r0, #0]
 800417e:	2210      	movs	r2, #16
 8004180:	61da      	str	r2, [r3, #28]
 8004182:	e00b      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004184:	f011 0f08 	tst.w	r1, #8
 8004188:	d002      	beq.n	8004190 <I2C_Slave_ISR_DMA+0xd0>
 800418a:	f012 0f08 	tst.w	r2, #8
 800418e:	d109      	bne.n	80041a4 <I2C_Slave_ISR_DMA+0xe4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004190:	f011 0f20 	tst.w	r1, #32
 8004194:	d002      	beq.n	800419c <I2C_Slave_ISR_DMA+0xdc>
 8004196:	f012 0f20 	tst.w	r2, #32
 800419a:	d107      	bne.n	80041ac <I2C_Slave_ISR_DMA+0xec>
  __HAL_UNLOCK(hi2c);
 800419c:	2000      	movs	r0, #0
 800419e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff fc26 	bl	80039f6 <I2C_ITAddrCplt>
 80041aa:	e7f7      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff fd21 	bl	8003bf4 <I2C_ITSlaveCplt>
 80041b2:	e7f3      	b.n	800419c <I2C_Slave_ISR_DMA+0xdc>
  __HAL_LOCK(hi2c);
 80041b4:	2002      	movs	r0, #2
 80041b6:	e7f4      	b.n	80041a2 <I2C_Slave_ISR_DMA+0xe2>

080041b8 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80041b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f000 8099 	beq.w	80042f4 <I2C_Master_ISR_DMA+0x13c>
{
 80041c2:	b510      	push	{r4, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80041c8:	2301      	movs	r3, #1
 80041ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041ce:	f011 0f10 	tst.w	r1, #16
 80041d2:	d002      	beq.n	80041da <I2C_Master_ISR_DMA+0x22>
 80041d4:	f012 0f10 	tst.w	r2, #16
 80041d8:	d131      	bne.n	800423e <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041de:	d05f      	beq.n	80042a0 <I2C_Master_ISR_DMA+0xe8>
 80041e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80041e4:	d05c      	beq.n	80042a0 <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ee:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80041f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d045      	beq.n	8004284 <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2bff      	cmp	r3, #255	; 0xff
 8004206:	d92c      	bls.n	8004262 <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004208:	23ff      	movs	r3, #255	; 0xff
 800420a:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800420c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004210:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004214:	2000      	movs	r0, #0
 8004216:	9000      	str	r0, [sp, #0]
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff f80e 	bl	800323a <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800421e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004220:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004228:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	d022      	beq.n	8004278 <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e00c      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004244:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800424c:	2112      	movs	r1, #18
 800424e:	f7ff f80f 	bl	8003270 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8004252:	4620      	mov	r0, r4
 8004254:	f7fe ffe0 	bl	8003218 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8004258:	2000      	movs	r0, #0
 800425a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800425e:	b002      	add	sp, #8
 8004260:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8004262:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004264:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800426c:	d001      	beq.n	8004272 <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 800426e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004270:	e7ce      	b.n	8004210 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8004272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004276:	e7cb      	b.n	8004210 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e7e9      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800428c:	d103      	bne.n	8004296 <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff fb56 	bl	8003940 <I2C_ITMasterSeqCplt>
 8004294:	e7e0      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004296:	2140      	movs	r1, #64	; 0x40
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff fc31 	bl	8003b00 <I2C_ITError>
 800429e:	e7db      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042a4:	d01c      	beq.n	80042e0 <I2C_Master_ISR_DMA+0x128>
 80042a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80042aa:	d019      	beq.n	80042e0 <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 80042ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	b98b      	cbnz	r3, 80042d6 <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80042ba:	d1cd      	bne.n	8004258 <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80042bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042be:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80042c2:	d104      	bne.n	80042ce <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	e7c4      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7ff fb36 	bl	8003940 <I2C_ITMasterSeqCplt>
 80042d4:	e7c0      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042d6:	2140      	movs	r1, #64	; 0x40
 80042d8:	4620      	mov	r0, r4
 80042da:	f7ff fc11 	bl	8003b00 <I2C_ITError>
 80042de:	e7bb      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042e0:	f011 0f20 	tst.w	r1, #32
 80042e4:	d0b8      	beq.n	8004258 <I2C_Master_ISR_DMA+0xa0>
 80042e6:	f012 0f20 	tst.w	r2, #32
 80042ea:	d0b5      	beq.n	8004258 <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff fdb8 	bl	8003e62 <I2C_ITMasterCplt>
 80042f2:	e7b1      	b.n	8004258 <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 80042f4:	2002      	movs	r0, #2
}
 80042f6:	4770      	bx	lr

080042f8 <I2C_DMAAbort>:
{
 80042f8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80042fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80042fe:	2300      	movs	r3, #0
 8004300:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004302:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004304:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004306:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b60      	cmp	r3, #96	; 0x60
 800430e:	d002      	beq.n	8004316 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8004310:	f7ff fbf4 	bl	8003afc <HAL_I2C_ErrorCallback>
}
 8004314:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004316:	2320      	movs	r3, #32
 8004318:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800431c:	f7ff fbef 	bl	8003afe <HAL_I2C_AbortCpltCallback>
 8004320:	e7f8      	b.n	8004314 <I2C_DMAAbort+0x1c>

08004322 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b20      	cmp	r3, #32
 800432a:	d124      	bne.n	8004376 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004330:	2b01      	cmp	r3, #1
 8004332:	d022      	beq.n	800437a <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004334:	2301      	movs	r3, #1
 8004336:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800433a:	2324      	movs	r3, #36	; 0x24
 800433c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004340:	6802      	ldr	r2, [r0, #0]
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800434a:	6802      	ldr	r2, [r0, #0]
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004352:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	4319      	orrs	r1, r3
 800435a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800435c:	6802      	ldr	r2, [r0, #0]
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004366:	2320      	movs	r3, #32
 8004368:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	2300      	movs	r3, #0
 800436e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004372:	4618      	mov	r0, r3
 8004374:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004376:	2002      	movs	r0, #2
 8004378:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800437a:	2002      	movs	r0, #2
  }
}
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800437e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b20      	cmp	r3, #32
 8004386:	d122      	bne.n	80043ce <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004388:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800438c:	2b01      	cmp	r3, #1
 800438e:	d020      	beq.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004390:	2301      	movs	r3, #1
 8004392:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	2324      	movs	r3, #36	; 0x24
 8004398:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439c:	6802      	ldr	r2, [r0, #0]
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a6:	6802      	ldr	r2, [r0, #0]
 80043a8:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ae:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043b2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043b4:	6802      	ldr	r2, [r0, #0]
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	2320      	movs	r3, #32
 80043c0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	2300      	movs	r3, #0
 80043c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80043ca:	4618      	mov	r0, r3
 80043cc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2002      	movs	r0, #2
 80043d0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80043d2:	2002      	movs	r0, #2
  }
}
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d8:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]
}
 80043e2:	4770      	bx	lr
 80043e4:	58000400 	.word	0x58000400

080043e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <HAL_PWREx_GetVoltageRange+0xc>)
 80043ea:	6818      	ldr	r0, [r3, #0]
}
 80043ec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	58000400 	.word	0x58000400

080043f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	b08d      	sub	sp, #52	; 0x34
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004400:	4c2a      	ldr	r4, [pc, #168]	; (80044ac <RCC_SetFlashLatency+0xb4>)
 8004402:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004406:	ad0c      	add	r5, sp, #48	; 0x30
 8004408:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800440c:	ab05      	add	r3, sp, #20
 800440e:	f104 0210 	add.w	r2, r4, #16
 8004412:	ca07      	ldmia	r2, {r0, r1, r2}
 8004414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004418:	ad01      	add	r5, sp, #4
 800441a:	341c      	adds	r4, #28
 800441c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004420:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004424:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8004428:	d011      	beq.n	800444e <RCC_SetFlashLatency+0x56>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800442a:	2300      	movs	r3, #0
 800442c:	2b02      	cmp	r3, #2
 800442e:	d822      	bhi.n	8004476 <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004430:	aa0c      	add	r2, sp, #48	; 0x30
 8004432:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004436:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800443a:	42b2      	cmp	r2, r6
 800443c:	d215      	bcs.n	800446a <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800443e:	3301      	adds	r3, #1
 8004440:	e7f4      	b.n	800442c <RCC_SetFlashLatency+0x34>
        latency = FLASH_LATENCY_RANGE[index];
 8004442:	aa0c      	add	r2, sp, #48	; 0x30
 8004444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004448:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 800444c:	e014      	b.n	8004478 <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800444e:	2300      	movs	r3, #0
 8004450:	2b03      	cmp	r3, #3
 8004452:	d808      	bhi.n	8004466 <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004454:	aa0c      	add	r2, sp, #48	; 0x30
 8004456:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800445a:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800445e:	42b2      	cmp	r2, r6
 8004460:	d2ef      	bcs.n	8004442 <RCC_SetFlashLatency+0x4a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004462:	3301      	adds	r3, #1
 8004464:	e7f4      	b.n	8004450 <RCC_SetFlashLatency+0x58>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004466:	2400      	movs	r4, #0
 8004468:	e006      	b.n	8004478 <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800446a:	aa0c      	add	r2, sp, #48	; 0x30
 800446c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004470:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8004474:	e000      	b.n	8004478 <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004476:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004478:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <RCC_SetFlashLatency+0xb8>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	4323      	orrs	r3, r4
 8004482:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004484:	f7fd fe4a 	bl	800211c <HAL_GetTick>
 8004488:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <RCC_SetFlashLatency+0xb8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	42a3      	cmp	r3, r4
 8004494:	d006      	beq.n	80044a4 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004496:	f7fd fe41 	bl	800211c <HAL_GetTick>
 800449a:	1b40      	subs	r0, r0, r5
 800449c:	2802      	cmp	r0, #2
 800449e:	d9f4      	bls.n	800448a <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 80044a0:	2003      	movs	r0, #3
 80044a2:	e000      	b.n	80044a6 <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 80044a4:	2000      	movs	r0, #0
}
 80044a6:	b00d      	add	sp, #52	; 0x34
 80044a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044aa:	bf00      	nop
 80044ac:	0800be70 	.word	0x0800be70
 80044b0:	58004000 	.word	0x58004000

080044b4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80044b4:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 80044b6:	28b0      	cmp	r0, #176	; 0xb0
 80044b8:	d819      	bhi.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x3a>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80044ba:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80044c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0x44>)
 80044d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d6:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80044da:	f7ff ff85 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0x48>)
 80044e0:	fba3 3404 	umull	r3, r4, r3, r4
 80044e4:	4601      	mov	r1, r0
 80044e6:	0ca0      	lsrs	r0, r4, #18
 80044e8:	f7ff ff86 	bl	80043f8 <RCC_SetFlashLatency>
}
 80044ec:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80044ee:	4b01      	ldr	r3, [pc, #4]	; (80044f4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80044f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80044f2:	e7e7      	b.n	80044c4 <RCC_SetFlashLatencyFromMSIRange+0x10>
 80044f4:	0800c004 	.word	0x0800c004
 80044f8:	0800bfa4 	.word	0x0800bfa4
 80044fc:	431bde83 	.word	0x431bde83

08004500 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004500:	2800      	cmp	r0, #0
 8004502:	f000 836c 	beq.w	8004bde <HAL_RCC_OscConfig+0x6de>
{
 8004506:	b538      	push	{r3, r4, r5, lr}
 8004508:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450a:	6803      	ldr	r3, [r0, #0]
 800450c:	f013 0f20 	tst.w	r3, #32
 8004510:	d059      	beq.n	80045c6 <HAL_RCC_OscConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004516:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800451e:	f013 030c 	ands.w	r3, r3, #12
 8004522:	d01e      	beq.n	8004562 <HAL_RCC_OscConfig+0x62>
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d01a      	beq.n	800455e <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004528:	69e3      	ldr	r3, [r4, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a7 	beq.w	800467e <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800453c:	f7fd fdee 	bl	800211c <HAL_GetTick>
 8004540:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f013 0f02 	tst.w	r3, #2
 800454c:	f040 8087 	bne.w	800465e <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004550:	f7fd fde4 	bl	800211c <HAL_GetTick>
 8004554:	1b40      	subs	r0, r0, r5
 8004556:	2802      	cmp	r0, #2
 8004558:	d9f3      	bls.n	8004542 <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 800455a:	2003      	movs	r0, #3
 800455c:	e34c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800455e:	2a01      	cmp	r2, #1
 8004560:	d1e2      	bne.n	8004528 <HAL_RCC_OscConfig+0x28>
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f013 0f02 	tst.w	r3, #2
 800456c:	d003      	beq.n	8004576 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800456e:	69e3      	ldr	r3, [r4, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8336 	beq.w	8004be2 <HAL_RCC_OscConfig+0x6e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004576:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004582:	2bb0      	cmp	r3, #176	; 0xb0
 8004584:	d900      	bls.n	8004588 <HAL_RCC_OscConfig+0x88>
    msiRange = LL_RCC_MSIRANGE_11;
 8004586:	23b0      	movs	r3, #176	; 0xb0
 8004588:	4298      	cmp	r0, r3
 800458a:	d953      	bls.n	8004634 <HAL_RCC_OscConfig+0x134>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458c:	f7ff ff92 	bl	80044b4 <RCC_SetFlashLatencyFromMSIRange>
 8004590:	2800      	cmp	r0, #0
 8004592:	f040 8328 	bne.w	8004be6 <HAL_RCC_OscConfig+0x6e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004596:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a6:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80045a8:	6853      	ldr	r3, [r2, #4]
 80045aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045b2:	6053      	str	r3, [r2, #4]
        SystemCoreClockUpdate();
 80045b4:	f7fd fbf8 	bl	8001da8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045b8:	4bc2      	ldr	r3, [pc, #776]	; (80048c4 <HAL_RCC_OscConfig+0x3c4>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	f7fd fb50 	bl	8001c60 <HAL_InitTick>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f040 8312 	bne.w	8004bea <HAL_RCC_OscConfig+0x6ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f013 0f01 	tst.w	r3, #1
 80045cc:	d079      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1c2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d2:	6893      	ldr	r3, [r2, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d065      	beq.n	80046ae <HAL_RCC_OscConfig+0x1ae>
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d061      	beq.n	80046aa <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	f000 8093 	beq.w	8004716 <HAL_RCC_OscConfig+0x216>
 80045f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f4:	f000 8096 	beq.w	8004724 <HAL_RCC_OscConfig+0x224>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004602:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800460a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8093 	beq.w	800473a <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8004614:	f7fd fd82 	bl	800211c <HAL_GetTick>
 8004618:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004624:	d14d      	bne.n	80046c2 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004626:	f7fd fd79 	bl	800211c <HAL_GetTick>
 800462a:	1b40      	subs	r0, r0, r5
 800462c:	2864      	cmp	r0, #100	; 0x64
 800462e:	d9f4      	bls.n	800461a <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8004630:	2003      	movs	r0, #3
 8004632:	e2e1      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463e:	4318      	orrs	r0, r3
 8004640:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004644:	6853      	ldr	r3, [r2, #4]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800464e:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004650:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004652:	f7ff ff2f 	bl	80044b4 <RCC_SetFlashLatencyFromMSIRange>
 8004656:	2800      	cmp	r0, #0
 8004658:	d0ac      	beq.n	80045b4 <HAL_RCC_OscConfig+0xb4>
            return HAL_ERROR;
 800465a:	2001      	movs	r0, #1
 800465c:	e2cc      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800466a:	430b      	orrs	r3, r1
 800466c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004670:	6853      	ldr	r3, [r2, #4]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800467a:	6053      	str	r3, [r2, #4]
 800467c:	e7a3      	b.n	80045c6 <HAL_RCC_OscConfig+0xc6>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800467e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800468a:	f7fd fd47 	bl	800211c <HAL_GetTick>
 800468e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f013 0f02 	tst.w	r3, #2
 800469a:	d094      	beq.n	80045c6 <HAL_RCC_OscConfig+0xc6>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469c:	f7fd fd3e 	bl	800211c <HAL_GetTick>
 80046a0:	1b40      	subs	r0, r0, r5
 80046a2:	2802      	cmp	r0, #2
 80046a4:	d9f4      	bls.n	8004690 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80046a6:	2003      	movs	r0, #3
 80046a8:	e2a6      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046aa:	2a03      	cmp	r2, #3
 80046ac:	d19b      	bne.n	80045e6 <HAL_RCC_OscConfig+0xe6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1c2>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8296 	beq.w	8004bee <HAL_RCC_OscConfig+0x6ee>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f013 0f02 	tst.w	r3, #2
 80046c8:	d05c      	beq.n	8004784 <HAL_RCC_OscConfig+0x284>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	6893      	ldr	r3, [r2, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046d4:	68d2      	ldr	r2, [r2, #12]
 80046d6:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d03f      	beq.n	800475e <HAL_RCC_OscConfig+0x25e>
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d03b      	beq.n	800475a <HAL_RCC_OscConfig+0x25a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8083 	beq.w	80047f0 <HAL_RCC_OscConfig+0x2f0>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046f6:	f7fd fd11 	bl	800211c <HAL_GetTick>
 80046fa:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004706:	d169      	bne.n	80047dc <HAL_RCC_OscConfig+0x2dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fd fd08 	bl	800211c <HAL_GetTick>
 800470c:	1b40      	subs	r0, r0, r5
 800470e:	2802      	cmp	r0, #2
 8004710:	d9f4      	bls.n	80046fc <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8004712:	2003      	movs	r0, #3
 8004714:	e270      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e773      	b.n	800460c <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800472e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e768      	b.n	800460c <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 800473a:	f7fd fcef 	bl	800211c <HAL_GetTick>
 800473e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800474a:	d0ba      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd fce6 	bl	800211c <HAL_GetTick>
 8004750:	1b40      	subs	r0, r0, r5
 8004752:	2864      	cmp	r0, #100	; 0x64
 8004754:	d9f4      	bls.n	8004740 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8004756:	2003      	movs	r0, #3
 8004758:	e24e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800475a:	2a02      	cmp	r2, #2
 800475c:	d1c1      	bne.n	80046e2 <HAL_RCC_OscConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800475e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004768:	d003      	beq.n	8004772 <HAL_RCC_OscConfig+0x272>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8240 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x6f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004772:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004778:	6853      	ldr	r3, [r2, #4]
 800477a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800477e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004782:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f013 0f18 	tst.w	r3, #24
 800478a:	f000 80e5 	beq.w	8004958 <HAL_RCC_OscConfig+0x458>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800478e:	6962      	ldr	r2, [r4, #20]
 8004790:	2a00      	cmp	r2, #0
 8004792:	f000 80af 	beq.w	80048f4 <HAL_RCC_OscConfig+0x3f4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004796:	f013 0f10 	tst.w	r3, #16
 800479a:	d07a      	beq.n	8004892 <HAL_RCC_OscConfig+0x392>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a4:	f013 0f02 	tst.w	r3, #2
 80047a8:	d138      	bne.n	800481c <HAL_RCC_OscConfig+0x31c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ae:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80047ba:	f7fd fcaf 	bl	800211c <HAL_GetTick>
 80047be:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c8:	f013 0f02 	tst.w	r3, #2
 80047cc:	d126      	bne.n	800481c <HAL_RCC_OscConfig+0x31c>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047ce:	f7fd fca5 	bl	800211c <HAL_GetTick>
 80047d2:	1b40      	subs	r0, r0, r5
 80047d4:	2802      	cmp	r0, #2
 80047d6:	d9f3      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2c0>
              return HAL_TIMEOUT;
 80047d8:	2003      	movs	r0, #3
 80047da:	e20d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e2:	6853      	ldr	r3, [r2, #4]
 80047e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80047ec:	6053      	str	r3, [r2, #4]
 80047ee:	e7c9      	b.n	8004784 <HAL_RCC_OscConfig+0x284>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80047f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f4:	6813      	ldr	r3, [r2, #0]
 80047f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047fc:	f7fd fc8e 	bl	800211c <HAL_GetTick>
 8004800:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800480c:	d0ba      	beq.n	8004784 <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480e:	f7fd fc85 	bl	800211c <HAL_GetTick>
 8004812:	1b40      	subs	r0, r0, r5
 8004814:	2802      	cmp	r0, #2
 8004816:	d9f4      	bls.n	8004802 <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 8004818:	2003      	movs	r0, #3
 800481a:	e1ed      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800481c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004820:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 800482c:	f7fd fc76 	bl	800211c <HAL_GetTick>
 8004830:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	f013 0f08 	tst.w	r3, #8
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x34e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004840:	f7fd fc6c 	bl	800211c <HAL_GetTick>
 8004844:	1b40      	subs	r0, r0, r5
 8004846:	2803      	cmp	r0, #3
 8004848:	d9f3      	bls.n	8004832 <HAL_RCC_OscConfig+0x332>
            return HAL_TIMEOUT;
 800484a:	2003      	movs	r0, #3
 800484c:	e1d4      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800484e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004854:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800485c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004864:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8004870:	f7fd fc54 	bl	800211c <HAL_GetTick>
 8004874:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487e:	f013 0f02 	tst.w	r3, #2
 8004882:	d069      	beq.n	8004958 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004884:	f7fd fc4a 	bl	800211c <HAL_GetTick>
 8004888:	1b40      	subs	r0, r0, r5
 800488a:	2802      	cmp	r0, #2
 800488c:	d9f3      	bls.n	8004876 <HAL_RCC_OscConfig+0x376>
            return HAL_TIMEOUT;
 800488e:	2003      	movs	r0, #3
 8004890:	e1b2      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004896:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80048a2:	f7fd fc3b 	bl	800211c <HAL_GetTick>
 80048a6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	f013 0f02 	tst.w	r3, #2
 80048b4:	d108      	bne.n	80048c8 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048b6:	f7fd fc31 	bl	800211c <HAL_GetTick>
 80048ba:	1b40      	subs	r0, r0, r5
 80048bc:	2802      	cmp	r0, #2
 80048be:	d9f3      	bls.n	80048a8 <HAL_RCC_OscConfig+0x3a8>
            return HAL_TIMEOUT;
 80048c0:	2003      	movs	r0, #3
 80048c2:	e199      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
 80048c4:	20000018 	.word	0x20000018
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048cc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e0:	f013 0f08 	tst.w	r3, #8
 80048e4:	d038      	beq.n	8004958 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048e6:	f7fd fc19 	bl	800211c <HAL_GetTick>
 80048ea:	1b40      	subs	r0, r0, r5
 80048ec:	2803      	cmp	r0, #3
 80048ee:	d9f3      	bls.n	80048d8 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 80048f0:	2003      	movs	r0, #3
 80048f2:	e181      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004904:	f7fd fc0a 	bl	800211c <HAL_GetTick>
 8004908:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	f013 0f08 	tst.w	r3, #8
 8004916:	d006      	beq.n	8004926 <HAL_RCC_OscConfig+0x426>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004918:	f7fd fc00 	bl	800211c <HAL_GetTick>
 800491c:	1b40      	subs	r0, r0, r5
 800491e:	2803      	cmp	r0, #3
 8004920:	d9f3      	bls.n	800490a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8004922:	2003      	movs	r0, #3
 8004924:	e168      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800492a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004936:	f7fd fbf1 	bl	800211c <HAL_GetTick>
 800493a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	f013 0f02 	tst.w	r3, #2
 8004948:	d006      	beq.n	8004958 <HAL_RCC_OscConfig+0x458>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800494a:	f7fd fbe7 	bl	800211c <HAL_GetTick>
 800494e:	1b40      	subs	r0, r0, r5
 8004950:	2802      	cmp	r0, #2
 8004952:	d9f3      	bls.n	800493c <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8004954:	2003      	movs	r0, #3
 8004956:	e14f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f013 0f04 	tst.w	r3, #4
 800495e:	d068      	beq.n	8004a32 <HAL_RCC_OscConfig+0x532>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004960:	4baa      	ldr	r3, [pc, #680]	; (8004c0c <HAL_RCC_OscConfig+0x70c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004968:	d027      	beq.n	80049ba <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d035      	beq.n	80049dc <HAL_RCC_OscConfig+0x4dc>
 8004970:	2b05      	cmp	r3, #5
 8004972:	d03c      	beq.n	80049ee <HAL_RCC_OscConfig+0x4ee>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004984:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004988:	f022 0204 	bic.w	r2, r2, #4
 800498c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	b3db      	cbz	r3, 8004a0c <HAL_RCC_OscConfig+0x50c>
      tickstart = HAL_GetTick();
 8004994:	f7fd fbc2 	bl	800211c <HAL_GetTick>
 8004998:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f013 0f02 	tst.w	r3, #2
 80049a6:	d144      	bne.n	8004a32 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd fbb8 	bl	800211c <HAL_GetTick>
 80049ac:	1b40      	subs	r0, r0, r5
 80049ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80049b2:	4298      	cmp	r0, r3
 80049b4:	d9f1      	bls.n	800499a <HAL_RCC_OscConfig+0x49a>
          return HAL_TIMEOUT;
 80049b6:	2003      	movs	r0, #3
 80049b8:	e11e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
      HAL_PWR_EnableBkUpAccess();
 80049ba:	f7ff fd0d 	bl	80043d8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80049be:	f7fd fbad 	bl	800211c <HAL_GetTick>
 80049c2:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c4:	4b91      	ldr	r3, [pc, #580]	; (8004c0c <HAL_RCC_OscConfig+0x70c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049cc:	d1cd      	bne.n	800496a <HAL_RCC_OscConfig+0x46a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fd fba5 	bl	800211c <HAL_GetTick>
 80049d2:	1b40      	subs	r0, r0, r5
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9f5      	bls.n	80049c4 <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
 80049da:	e10d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ec:	e7d0      	b.n	8004990 <HAL_RCC_OscConfig+0x490>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049f6:	f042 0204 	orr.w	r2, r2, #4
 80049fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004a0a:	e7c1      	b.n	8004990 <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8004a0c:	f7fd fb86 	bl	800211c <HAL_GetTick>
 8004a10:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f013 0f02 	tst.w	r3, #2
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd fb7c 	bl	800211c <HAL_GetTick>
 8004a24:	1b40      	subs	r0, r0, r5
 8004a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a2a:	4298      	cmp	r0, r3
 8004a2c:	d9f1      	bls.n	8004a12 <HAL_RCC_OscConfig+0x512>
          return HAL_TIMEOUT;
 8004a2e:	2003      	movs	r0, #3
 8004a30:	e0e2      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a38:	d033      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x5a2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a3c:	b1c3      	cbz	r3, 8004a70 <HAL_RCC_OscConfig+0x570>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a42:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fb65 	bl	800211c <HAL_GetTick>
 8004a52:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a5c:	f013 0f02 	tst.w	r3, #2
 8004a60:	d11f      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fd fb5b 	bl	800211c <HAL_GetTick>
 8004a66:	1b40      	subs	r0, r0, r5
 8004a68:	2802      	cmp	r0, #2
 8004a6a:	d9f3      	bls.n	8004a54 <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 8004a6c:	2003      	movs	r0, #3
 8004a6e:	e0c3      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a74:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004a80:	f7fd fb4c 	bl	800211c <HAL_GetTick>
 8004a84:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8e:	f013 0f02 	tst.w	r3, #2
 8004a92:	d006      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a94:	f7fd fb42 	bl	800211c <HAL_GetTick>
 8004a98:	1b40      	subs	r0, r0, r5
 8004a9a:	2802      	cmp	r0, #2
 8004a9c:	d9f3      	bls.n	8004a86 <HAL_RCC_OscConfig+0x586>
          return HAL_TIMEOUT;
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	e0aa      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80a6 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x6f6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aae:	6892      	ldr	r2, [r2, #8]
 8004ab0:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab4:	2a0c      	cmp	r2, #12
 8004ab6:	d063      	beq.n	8004b80 <HAL_RCC_OscConfig+0x680>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_OscConfig+0x5fe>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ac6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	f022 0203 	bic.w	r2, r2, #3
 8004ace:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004ad6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ada:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004adc:	f7fd fb1e 	bl	800211c <HAL_GetTick>
 8004ae0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004aec:	f000 8087 	beq.w	8004bfe <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd fb14 	bl	800211c <HAL_GetTick>
 8004af4:	1b00      	subs	r0, r0, r4
 8004af6:	2802      	cmp	r0, #2
 8004af8:	d9f3      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x5e2>
            return HAL_TIMEOUT;
 8004afa:	2003      	movs	r0, #3
 8004afc:	e07c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fb07 	bl	800211c <HAL_GetTick>
 8004b0e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b1a:	d006      	beq.n	8004b2a <HAL_RCC_OscConfig+0x62a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fafe 	bl	800211c <HAL_GetTick>
 8004b20:	1b40      	subs	r0, r0, r5
 8004b22:	2802      	cmp	r0, #2
 8004b24:	d9f4      	bls.n	8004b10 <HAL_RCC_OscConfig+0x610>
            return HAL_TIMEOUT;
 8004b26:	2003      	movs	r0, #3
 8004b28:	e066      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2e:	68d3      	ldr	r3, [r2, #12]
 8004b30:	4937      	ldr	r1, [pc, #220]	; (8004c10 <HAL_RCC_OscConfig+0x710>)
 8004b32:	4019      	ands	r1, r3
 8004b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b36:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004b38:	4303      	orrs	r3, r0
 8004b3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b3c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004b40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b42:	4303      	orrs	r3, r0
 8004b44:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b46:	4303      	orrs	r3, r0
 8004b48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004b4a:	4303      	orrs	r3, r0
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b56:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b58:	68d3      	ldr	r3, [r2, #12]
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004b60:	f7fd fadc 	bl	800211c <HAL_GetTick>
 8004b64:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b70:	d143      	bne.n	8004bfa <HAL_RCC_OscConfig+0x6fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fd fad3 	bl	800211c <HAL_GetTick>
 8004b76:	1b00      	subs	r0, r0, r4
 8004b78:	2802      	cmp	r0, #2
 8004b7a:	d9f4      	bls.n	8004b66 <HAL_RCC_OscConfig+0x666>
            return HAL_TIMEOUT;
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	e03b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d03e      	beq.n	8004c02 <HAL_RCC_OscConfig+0x702>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	f003 0103 	and.w	r1, r3, #3
 8004b8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b90:	4291      	cmp	r1, r2
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x698>
          return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
 8004b96:	e02f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	428a      	cmp	r2, r1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x6a6>
          return HAL_ERROR;
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	e028      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ba6:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8004baa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bac:	428a      	cmp	r2, r1
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x6b4>
          return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	e021      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bb4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004bb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bba:	428a      	cmp	r2, r1
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x6c2>
          return HAL_ERROR;
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	e01a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004bc2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004bc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bc8:	428a      	cmp	r2, r1
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x6d0>
          return HAL_ERROR;
 8004bcc:	2001      	movs	r0, #1
 8004bce:	e013      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004bd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004bd4:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d015      	beq.n	8004c06 <HAL_RCC_OscConfig+0x706>
          return HAL_ERROR;
 8004bda:	2001      	movs	r0, #1
 8004bdc:	e00c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
    return HAL_ERROR;
 8004bde:	2001      	movs	r0, #1
}
 8004be0:	4770      	bx	lr
        return HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
            return HAL_ERROR;
 8004be6:	2001      	movs	r0, #1
 8004be8:	e006      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
          return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
 8004bec:	e004      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8004bf6:	2000      	movs	r0, #0
}
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e7fc      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e7fa      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 8004c02:	2001      	movs	r0, #1
 8004c04:	e7f8      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 8004c06:	2000      	movs	r0, #0
 8004c08:	e7f6      	b.n	8004bf8 <HAL_RCC_OscConfig+0x6f8>
 8004c0a:	bf00      	nop
 8004c0c:	58000400 	.word	0x58000400
 8004c10:	11c1808c 	.word	0x11c1808c

08004c14 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f000 8127 	beq.w	8004e68 <HAL_RCC_ClockConfig+0x254>
{
 8004c1a:	b570      	push	{r4, r5, r6, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d32d      	bcc.n	8004c88 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	f013 0f02 	tst.w	r3, #2
 8004c32:	d13f      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	f013 0f20 	tst.w	r3, #32
 8004c3a:	d153      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c42:	d16a      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f013 0f04 	tst.w	r3, #4
 8004c4a:	f040 8083 	bne.w	8004d54 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f013 0f08 	tst.w	r3, #8
 8004c54:	f040 8097 	bne.w	8004d86 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f013 0f01 	tst.w	r3, #1
 8004c5e:	f000 80e0 	beq.w	8004e22 <HAL_RCC_ClockConfig+0x20e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f000 80a8 	beq.w	8004dba <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	f000 80c9 	beq.w	8004e02 <HAL_RCC_ClockConfig+0x1ee>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 80ce 	bne.w	8004e12 <HAL_RCC_ClockConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	f012 0f02 	tst.w	r2, #2
 8004c80:	f040 80a1 	bne.w	8004dc6 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
 8004c86:	e0ee      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c88:	4a78      	ldr	r2, [pc, #480]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	f023 0307 	bic.w	r3, r3, #7
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c94:	f7fd fa42 	bl	800211c <HAL_GetTick>
 8004c98:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b74      	ldr	r3, [pc, #464]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	42ab      	cmp	r3, r5
 8004ca4:	d0c2      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ca6:	f7fd fa39 	bl	800211c <HAL_GetTick>
 8004caa:	1b80      	subs	r0, r0, r6
 8004cac:	2802      	cmp	r0, #2
 8004cae:	d9f4      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	e0d8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cba:	688a      	ldr	r2, [r1, #8]
 8004cbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fa2a 	bl	800211c <HAL_GetTick>
 8004cc8:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004cd4:	d1ae      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cd6:	f7fd fa21 	bl	800211c <HAL_GetTick>
 8004cda:	1b80      	subs	r0, r0, r6
 8004cdc:	2802      	cmp	r0, #2
 8004cde:	d9f4      	bls.n	8004cca <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004ce0:	2003      	movs	r0, #3
 8004ce2:	e0c0      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004ce4:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cea:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004cf8:	f7fd fa10 	bl	800211c <HAL_GetTick>
 8004cfc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d0a:	d197      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d0c:	f7fd fa06 	bl	800211c <HAL_GetTick>
 8004d10:	1b80      	subs	r0, r0, r6
 8004d12:	2802      	cmp	r0, #2
 8004d14:	d9f3      	bls.n	8004cfe <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004d16:	2003      	movs	r0, #3
 8004d18:	e0a5      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d1a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004d24:	f023 030f 	bic.w	r3, r3, #15
 8004d28:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004d2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004d30:	f7fd f9f4 	bl	800211c <HAL_GetTick>
 8004d34:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d42:	f47f af7f 	bne.w	8004c44 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d46:	f7fd f9e9 	bl	800211c <HAL_GetTick>
 8004d4a:	1b80      	subs	r0, r0, r6
 8004d4c:	2802      	cmp	r0, #2
 8004d4e:	d9f2      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004d50:	2003      	movs	r0, #3
 8004d52:	e088      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d54:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5a:	688a      	ldr	r2, [r1, #8]
 8004d5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004d64:	f7fd f9da 	bl	800211c <HAL_GetTick>
 8004d68:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d74:	f47f af6b 	bne.w	8004c4e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d78:	f7fd f9d0 	bl	800211c <HAL_GetTick>
 8004d7c:	1b80      	subs	r0, r0, r6
 8004d7e:	2802      	cmp	r0, #2
 8004d80:	d9f3      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004d82:	2003      	movs	r0, #3
 8004d84:	e06f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d86:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8c:	6893      	ldr	r3, [r2, #8]
 8004d8e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004d92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d96:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004d98:	f7fd f9c0 	bl	800211c <HAL_GetTick>
 8004d9c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004da8:	f47f af56 	bne.w	8004c58 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dac:	f7fd f9b6 	bl	800211c <HAL_GetTick>
 8004db0:	1b80      	subs	r0, r0, r6
 8004db2:	2802      	cmp	r0, #2
 8004db4:	d9f3      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004db6:	2003      	movs	r0, #3
 8004db8:	e055      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004dc4:	d01b      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x1ea>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dca:	688a      	ldr	r2, [r1, #8]
 8004dcc:	f022 0203 	bic.w	r2, r2, #3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004dd4:	f7fd f9a2 	bl	800211c <HAL_GetTick>
 8004dd8:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de4:	6862      	ldr	r2, [r4, #4]
 8004de6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004dea:	d01a      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x20e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fd f996 	bl	800211c <HAL_GetTick>
 8004df0:	1b80      	subs	r0, r0, r6
 8004df2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004df6:	4298      	cmp	r0, r3
 8004df8:	d9ef      	bls.n	8004dda <HAL_RCC_ClockConfig+0x1c6>
        return HAL_TIMEOUT;
 8004dfa:	2003      	movs	r0, #3
 8004dfc:	e033      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
        return HAL_ERROR;
 8004dfe:	2001      	movs	r0, #1
 8004e00:	e031      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004e0c:	d1db      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e029      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004e1c:	d1d3      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e021      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	d915      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x246>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004e30:	6813      	ldr	r3, [r2, #0]
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	432b      	orrs	r3, r5
 8004e38:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e3a:	f7fd f96f 	bl	800211c <HAL_GetTick>
 8004e3e:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x258>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	d006      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x246>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e4c:	f7fd f966 	bl	800211c <HAL_GetTick>
 8004e50:	1b00      	subs	r0, r0, r4
 8004e52:	2802      	cmp	r0, #2
 8004e54:	d9f4      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x22c>
        return HAL_TIMEOUT;
 8004e56:	2003      	movs	r0, #3
 8004e58:	e005      	b.n	8004e66 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClockUpdate();
 8004e5a:	f7fc ffa5 	bl	8001da8 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8004e5e:	f7fd f963 	bl	8002128 <HAL_GetTickPrio>
 8004e62:	f7fc fefd 	bl	8001c60 <HAL_InitTick>
}
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e68:	2001      	movs	r0, #1
}
 8004e6a:	4770      	bx	lr
 8004e6c:	58004000 	.word	0x58004000

08004e70 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e76:	f013 030c 	ands.w	r3, r3, #12
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004e86:	2bb0      	cmp	r3, #176	; 0xb0
 8004e88:	d900      	bls.n	8004e8c <HAL_RCC_GetSysClockFreq+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004e8a:	23b0      	movs	r3, #176	; 0xb0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e94:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d03d      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0xa6>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x50>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d030      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x9e>
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d10f      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x60>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004eba:	d12a      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0xa2>
          pllinputfreq = HSE_VALUE;
 8004ebc:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ebe:	e013      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x78>
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004eca:	d026      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0xaa>
      sysclockfreq = HSE_VALUE / 2U;
 8004ecc:	4816      	ldr	r0, [pc, #88]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ece:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004eda:	2bb0      	cmp	r3, #176	; 0xb0
 8004edc:	d900      	bls.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x70>
    msiRange = LL_RCC_MSIRANGE_11;
 8004ede:	23b0      	movs	r3, #176	; 0xb0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eec:	68d0      	ldr	r0, [r2, #12]
 8004eee:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004ef2:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ef6:	68d3      	ldr	r3, [r2, #12]
 8004ef8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004efc:	3301      	adds	r3, #1
 8004efe:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f02:	68d3      	ldr	r3, [r2, #12]
 8004f04:	0f5b      	lsrs	r3, r3, #29
 8004f06:	3301      	adds	r3, #1
 8004f08:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f0c:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f10:	e7ea      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x78>
          pllinputfreq = HSE_VALUE / 2U;
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f14:	e7e8      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSI_VALUE;
 8004f16:	4804      	ldr	r0, [pc, #16]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f18:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004f1a:	4802      	ldr	r0, [pc, #8]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xb4>)
}
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	0800c004 	.word	0x0800c004
 8004f24:	01e84800 	.word	0x01e84800
 8004f28:	00f42400 	.word	0x00f42400

08004f2c <HAL_RCC_GetHCLKFreq>:
{
 8004f2c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f2e:	f7ff ff9f 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f3c:	4a02      	ldr	r2, [pc, #8]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004f42:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f46:	bd08      	pop	{r3, pc}
 8004f48:	0800bfa4 	.word	0x0800bfa4

08004f4c <HAL_RCC_GetPCLK1Freq>:
{
 8004f4c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f4e:	f7ff ffed 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004f5c:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	f003 031f 	and.w	r3, r3, #31
}
 8004f66:	40d8      	lsrs	r0, r3
 8004f68:	bd08      	pop	{r3, pc}
 8004f6a:	bf00      	nop
 8004f6c:	0800bfe4 	.word	0x0800bfe4

08004f70 <HAL_RCC_GetPCLK2Freq>:
{
 8004f70:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f72:	f7ff ffdb 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004f80:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	f003 031f 	and.w	r3, r3, #31
}
 8004f8a:	40d8      	lsrs	r0, r3
 8004f8c:	bd08      	pop	{r3, pc}
 8004f8e:	bf00      	nop
 8004f90:	0800bfe4 	.word	0x0800bfe4

08004f94 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8004f94:	236f      	movs	r3, #111	; 0x6f
 8004f96:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8004fa2:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8004faa:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8004fb2:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8004fba:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004fbc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004fc0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8004fc4:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8004fce:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004fd0:	4b02      	ldr	r3, [pc, #8]	; (8004fdc <HAL_RCC_GetClockConfig+0x48>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	600b      	str	r3, [r1, #0]
}
 8004fda:	4770      	bx	lr
 8004fdc:	58004000 	.word	0x58004000

08004fe0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe8:	6813      	ldr	r3, [r2, #0]
 8004fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fee:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fd f894 	bl	800211c <HAL_GetTick>
 8004ff4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005000:	d006      	beq.n	8005010 <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005002:	f7fd f88b 	bl	800211c <HAL_GetTick>
 8005006:	1b00      	subs	r0, r0, r4
 8005008:	2802      	cmp	r0, #2
 800500a:	d9f4      	bls.n	8004ff6 <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 800500c:	2403      	movs	r4, #3
 800500e:	e000      	b.n	8005012 <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8005012:	b10c      	cbz	r4, 8005018 <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8005014:	4620      	mov	r0, r4
 8005016:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8005022:	6829      	ldr	r1, [r5, #0]
 8005024:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005028:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8005030:	6869      	ldr	r1, [r5, #4]
 8005032:	430a      	orrs	r2, r1
 8005034:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800503c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800503e:	f7fd f86d 	bl	800211c <HAL_GetTick>
 8005042:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800504e:	d105      	bne.n	800505c <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005050:	f7fd f864 	bl	800211c <HAL_GetTick>
 8005054:	1b80      	subs	r0, r0, r6
 8005056:	2802      	cmp	r0, #2
 8005058:	d9f4      	bls.n	8005044 <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 800505a:	2403      	movs	r4, #3
    if (status == HAL_OK)
 800505c:	2c00      	cmp	r4, #0
 800505e:	d1d9      	bne.n	8005014 <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005064:	6913      	ldr	r3, [r2, #16]
 8005066:	6929      	ldr	r1, [r5, #16]
 8005068:	430b      	orrs	r3, r1
 800506a:	6113      	str	r3, [r2, #16]
 800506c:	e7d2      	b.n	8005014 <RCCEx_PLLSAI1_ConfigNP+0x34>

0800506e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800506e:	b570      	push	{r4, r5, r6, lr}
 8005070:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800507c:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800507e:	f7fd f84d 	bl	800211c <HAL_GetTick>
 8005082:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800508e:	d006      	beq.n	800509e <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005090:	f7fd f844 	bl	800211c <HAL_GetTick>
 8005094:	1b00      	subs	r0, r0, r4
 8005096:	2802      	cmp	r0, #2
 8005098:	d9f4      	bls.n	8005084 <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 800509a:	2403      	movs	r4, #3
 800509c:	e000      	b.n	80050a0 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 80050a0:	b10c      	cbz	r4, 80050a6 <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 80050a2:	4620      	mov	r0, r4
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80050b0:	6829      	ldr	r1, [r5, #0]
 80050b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80050b6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80050be:	68a9      	ldr	r1, [r5, #8]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80050ca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80050cc:	f7fd f826 	bl	800211c <HAL_GetTick>
 80050d0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80050dc:	d105      	bne.n	80050ea <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050de:	f7fd f81d 	bl	800211c <HAL_GetTick>
 80050e2:	1b80      	subs	r0, r0, r6
 80050e4:	2802      	cmp	r0, #2
 80050e6:	d9f4      	bls.n	80050d2 <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 80050e8:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80050ea:	2c00      	cmp	r4, #0
 80050ec:	d1d9      	bne.n	80050a2 <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f2:	6913      	ldr	r3, [r2, #16]
 80050f4:	6929      	ldr	r1, [r5, #16]
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6113      	str	r3, [r2, #16]
 80050fa:	e7d2      	b.n	80050a2 <RCCEx_PLLSAI1_ConfigNQ+0x34>

080050fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005104:	6813      	ldr	r3, [r2, #0]
 8005106:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800510a:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800510c:	f7fd f806 	bl	800211c <HAL_GetTick>
 8005110:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800511c:	d006      	beq.n	800512c <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511e:	f7fc fffd 	bl	800211c <HAL_GetTick>
 8005122:	1b00      	subs	r0, r0, r4
 8005124:	2802      	cmp	r0, #2
 8005126:	d9f4      	bls.n	8005112 <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 8005128:	2403      	movs	r4, #3
 800512a:	e000      	b.n	800512e <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 800512e:	b10c      	cbz	r4, 8005134 <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8005130:	4620      	mov	r0, r4
 8005132:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800513e:	6829      	ldr	r1, [r5, #0]
 8005140:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005144:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800514c:	68e9      	ldr	r1, [r5, #12]
 800514e:	430a      	orrs	r2, r1
 8005150:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005158:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800515a:	f7fc ffdf 	bl	800211c <HAL_GetTick>
 800515e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800516a:	d105      	bne.n	8005178 <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800516c:	f7fc ffd6 	bl	800211c <HAL_GetTick>
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	2802      	cmp	r0, #2
 8005174:	d9f4      	bls.n	8005160 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 8005176:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8005178:	2c00      	cmp	r4, #0
 800517a:	d1d9      	bne.n	8005130 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	6913      	ldr	r3, [r2, #16]
 8005182:	6929      	ldr	r1, [r5, #16]
 8005184:	430b      	orrs	r3, r1
 8005186:	6113      	str	r3, [r2, #16]
 8005188:	e7d2      	b.n	8005130 <RCCEx_PLLSAI1_ConfigNR+0x34>

0800518a <HAL_RCCEx_PeriphCLKConfig>:
{
 800518a:	b570      	push	{r4, r5, r6, lr}
 800518c:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800518e:	6803      	ldr	r3, [r0, #0]
 8005190:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005194:	d02a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005196:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519c:	d011      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800519e:	d807      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051a0:	b963      	cbnz	r3, 80051bc <HAL_RCCEx_PeriphCLKConfig+0x32>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80051a2:	3004      	adds	r0, #4
 80051a4:	f7ff ff1c 	bl	8004fe0 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 80051a8:	4606      	mov	r6, r0
 80051aa:	b188      	cbz	r0, 80051d0 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80051ac:	4605      	mov	r5, r0
 80051ae:	e01f      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->Sai1ClockSelection)
 80051b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b4:	d018      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80051b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ba:	d015      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        ret = HAL_ERROR;
 80051bc:	2501      	movs	r5, #1
 80051be:	462e      	mov	r6, r5
 80051c0:	e016      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x66>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80051c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c6:	68d3      	ldr	r3, [r2, #12]
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051cc:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051ce:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80051d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80051da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051e4:	2500      	movs	r5, #0
 80051e6:	e003      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051e8:	2600      	movs	r6, #0
 80051ea:	e7f1      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x46>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051ec:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051ee:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x84>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8005200:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005206:	42ab      	cmp	r3, r5
 8005208:	f040 80d5 	bne.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      status = ret;
 800520c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f013 0f01 	tst.w	r3, #1
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005216:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005220:	f022 0203 	bic.w	r2, r2, #3
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	f013 0f02 	tst.w	r3, #2
 8005230:	d009      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005232:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005238:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800523c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f013 0f10 	tst.w	r3, #16
 800524c:	d00c      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800524e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005254:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005258:	0c02      	lsrs	r2, r0, #16
 800525a:	0412      	lsls	r2, r2, #16
 800525c:	ea23 0302 	bic.w	r3, r3, r2
 8005260:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	f013 0f20 	tst.w	r3, #32
 800526e:	d00c      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005270:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005276:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800527a:	0c02      	lsrs	r2, r0, #16
 800527c:	0412      	lsls	r2, r2, #16
 800527e:	ea23 0302 	bic.w	r3, r3, r2
 8005282:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f013 0f04 	tst.w	r3, #4
 8005290:	d00f      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005292:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005294:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005298:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800529c:	0919      	lsrs	r1, r3, #4
 800529e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80052a2:	ea22 0201 	bic.w	r2, r2, r1
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f013 0f08 	tst.w	r3, #8
 80052b8:	d00f      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052bc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80052c0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80052c4:	0919      	lsrs	r1, r3, #4
 80052c6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80052ca:	ea22 0201 	bic.w	r2, r2, r1
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052e0:	d013      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80052e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052ec:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fc:	f000 809c 	beq.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005306:	f000 809c 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005310:	d017      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d005      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800531a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800531e:	d002      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 8096 	bne.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800532a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800532e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800533a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800533e:	f000 809a 	beq.w	8005476 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005348:	d013      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800534a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800534c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005350:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800535e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	f000 808e 	beq.w	8005484 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005368:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800536a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536e:	f000 808e 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005378:	d009      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800537a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800537c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005380:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8005384:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005394:	d00d      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005396:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800539e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80053a2:	430a      	orrs	r2, r1
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80053a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80053a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053aa:	f021 0103 	bic.w	r1, r1, #3
 80053ae:	430a      	orrs	r2, r1
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80053b2:	4628      	mov	r0, r5
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 80053b6:	f7ff f80f 	bl	80043d8 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053ba:	b95d      	cbnz	r5, 80053d4 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80053c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053d0:	4635      	mov	r5, r6
 80053d2:	e71c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x84>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053dc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80053e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80053e4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053e8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80053ec:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80053f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80053fa:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 80053fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f013 0f01 	tst.w	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x284>
 800540a:	4635      	mov	r5, r6
 800540c:	e6ff      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x84>
          tickstart = HAL_GetTick();
 800540e:	f7fc fe85 	bl	800211c <HAL_GetTick>
 8005412:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f013 0f02 	tst.w	r3, #2
 8005420:	d108      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fc fe7b 	bl	800211c <HAL_GetTick>
 8005426:	1b40      	subs	r0, r0, r5
 8005428:	f241 3388 	movw	r3, #5000	; 0x1388
 800542c:	4298      	cmp	r0, r3
 800542e:	d9f1      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x28a>
              ret = HAL_TIMEOUT;
 8005430:	2503      	movs	r5, #3
 8005432:	e6ec      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x84>
 8005434:	4635      	mov	r5, r6
 8005436:	e6ea      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005438:	68cb      	ldr	r3, [r1, #12]
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800543e:	60cb      	str	r3, [r1, #12]
 8005440:	e75e      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005442:	1d20      	adds	r0, r4, #4
 8005444:	f7ff fe13 	bl	800506e <RCCEx_PLLSAI1_ConfigNQ>
      if (ret != HAL_OK)
 8005448:	2800      	cmp	r0, #0
 800544a:	f43f af5e 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x180>
        status = ret;
 800544e:	4605      	mov	r5, r0
 8005450:	e75b      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800545a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800545e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8005462:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005466:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800546a:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800546e:	430b      	orrs	r3, r1
 8005470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005474:	e760      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800547a:	68d3      	ldr	r3, [r2, #12]
 800547c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005480:	60d3      	str	r3, [r2, #12]
 8005482:	e75e      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005484:	68cb      	ldr	r3, [r1, #12]
 8005486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548a:	60cb      	str	r3, [r1, #12]
 800548c:	e76c      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800548e:	1d20      	adds	r0, r4, #4
 8005490:	f7ff fe34 	bl	80050fc <RCCEx_PLLSAI1_ConfigNR>
      if (ret != HAL_OK)
 8005494:	2800      	cmp	r0, #0
 8005496:	f43f af6c 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        status = ret;
 800549a:	4605      	mov	r5, r0
 800549c:	e769      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1e8>

0800549e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800549e:	b538      	push	{r3, r4, r5, lr}
 80054a0:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	68d3      	ldr	r3, [r2, #12]
 80054a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054aa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80054ac:	f7fc fe36 	bl	800211c <HAL_GetTick>
 80054b0:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f013 0f20 	tst.w	r3, #32
 80054ba:	d107      	bne.n	80054cc <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054bc:	f7fc fe2e 	bl	800211c <HAL_GetTick>
 80054c0:	1b40      	subs	r0, r0, r5
 80054c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054c6:	d9f4      	bls.n	80054b2 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80054c8:	2003      	movs	r0, #3
 80054ca:	e000      	b.n	80054ce <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80054cc:	2000      	movs	r0, #0
}
 80054ce:	bd38      	pop	{r3, r4, r5, pc}

080054d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054d2:	6803      	ldr	r3, [r0, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80054da:	d001      	beq.n	80054e0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80054dc:	2000      	movs	r0, #0
}
 80054de:	bd38      	pop	{r3, r4, r5, pc}
 80054e0:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295
 80054e6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80054e8:	f7fc fe18 	bl	800211c <HAL_GetTick>
 80054ec:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054f6:	d107      	bne.n	8005508 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80054f8:	f7fc fe10 	bl	800211c <HAL_GetTick>
 80054fc:	1b40      	subs	r0, r0, r5
 80054fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005502:	d9f4      	bls.n	80054ee <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005504:	2003      	movs	r0, #3
 8005506:	e7ea      	b.n	80054de <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005508:	2000      	movs	r0, #0
 800550a:	e7e8      	b.n	80054de <RTC_EnterInitMode+0xe>

0800550c <HAL_RTC_Init>:
{
 800550c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800550e:	2800      	cmp	r0, #0
 8005510:	d067      	beq.n	80055e2 <HAL_RTC_Init+0xd6>
 8005512:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005514:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005518:	2b00      	cmp	r3, #0
 800551a:	d044      	beq.n	80055a6 <HAL_RTC_Init+0x9a>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	22ca      	movs	r2, #202	; 0xca
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	2253      	movs	r2, #83	; 0x53
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff ffce 	bl	80054d0 <RTC_EnterInitMode>
 8005534:	4605      	mov	r5, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	d13a      	bne.n	80055b0 <HAL_RTC_Init+0xa4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	6893      	ldr	r3, [r2, #8]
 800553e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005548:	6821      	ldr	r1, [r4, #0]
 800554a:	688a      	ldr	r2, [r1, #8]
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	6920      	ldr	r0, [r4, #16]
 8005550:	4303      	orrs	r3, r0
 8005552:	69a0      	ldr	r0, [r4, #24]
 8005554:	4303      	orrs	r3, r0
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	68e2      	ldr	r2, [r4, #12]
 800555e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	6913      	ldr	r3, [r2, #16]
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800556a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800556c:	6822      	ldr	r2, [r4, #0]
 800556e:	68d3      	ldr	r3, [r2, #12]
 8005570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005574:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005580:	6821      	ldr	r1, [r4, #0]
 8005582:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005584:	69e2      	ldr	r2, [r4, #28]
 8005586:	6960      	ldr	r0, [r4, #20]
 8005588:	4302      	orrs	r2, r0
 800558a:	4313      	orrs	r3, r2
 800558c:	64cb      	str	r3, [r1, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f013 0f20 	tst.w	r3, #32
 8005596:	d014      	beq.n	80055c2 <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	22ff      	movs	r2, #255	; 0xff
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800559e:	2301      	movs	r3, #1
 80055a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 80055a4:	e00b      	b.n	80055be <HAL_RTC_Init+0xb2>
    hrtc->Lock = HAL_UNLOCKED;
 80055a6:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80055aa:	f7fc fb29 	bl	8001c00 <HAL_RTC_MspInit>
 80055ae:	e7b5      	b.n	800551c <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	22ff      	movs	r2, #255	; 0xff
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055b6:	2304      	movs	r3, #4
 80055b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 80055bc:	2501      	movs	r5, #1
}
 80055be:	4628      	mov	r0, r5
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7ff ff6b 	bl	800549e <HAL_RTC_WaitForSynchro>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0e5      	beq.n	8005598 <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	22ff      	movs	r2, #255	; 0xff
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055d2:	2304      	movs	r3, #4
 80055d4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80055d8:	2300      	movs	r3, #0
 80055da:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80055de:	2501      	movs	r5, #1
 80055e0:	e7ed      	b.n	80055be <HAL_RTC_Init+0xb2>
     return HAL_ERROR;
 80055e2:	2501      	movs	r5, #1
 80055e4:	e7eb      	b.n	80055be <HAL_RTC_Init+0xb2>

080055e6 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80055e6:	0903      	lsrs	r3, r0, #4
 80055e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055ec:	005a      	lsls	r2, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80055ee:	f000 000f 	and.w	r0, r0, #15
 80055f2:	4410      	add	r0, r2
}
 80055f4:	b2c0      	uxtb	r0, r0
 80055f6:	4770      	bx	lr

080055f8 <HAL_RTC_GetTime>:
{
 80055f8:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005600:	6803      	ldr	r3, [r0, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005608:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005616:	0c1d      	lsrs	r5, r3, #16
 8005618:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 800561c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800561e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8005622:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005624:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8005628:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800562a:	f005 0540 	and.w	r5, r5, #64	; 0x40
 800562e:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8005630:	b95a      	cbnz	r2, 800564a <HAL_RTC_GetTime+0x52>
 8005632:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005634:	f7ff ffd7 	bl	80055e6 <RTC_Bcd2ToByte>
 8005638:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ffd3 	bl	80055e6 <RTC_Bcd2ToByte>
 8005640:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff ffcf 	bl	80055e6 <RTC_Bcd2ToByte>
 8005648:	70a8      	strb	r0, [r5, #2]
}
 800564a:	2000      	movs	r0, #0
 800564c:	bd70      	pop	{r4, r5, r6, pc}

0800564e <HAL_RTC_GetDate>:
{
 800564e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005650:	6803      	ldr	r3, [r0, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005658:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800565c:	0c18      	lsrs	r0, r3, #16
 800565e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005660:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8005664:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005666:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 800566a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800566c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005670:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8005672:	b95a      	cbnz	r2, 800568c <HAL_RTC_GetDate+0x3e>
 8005674:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005676:	f7ff ffb6 	bl	80055e6 <RTC_Bcd2ToByte>
 800567a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff ffb2 	bl	80055e6 <RTC_Bcd2ToByte>
 8005682:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005684:	4628      	mov	r0, r5
 8005686:	f7ff ffae 	bl	80055e6 <RTC_Bcd2ToByte>
 800568a:	70a0      	strb	r0, [r4, #2]
}
 800568c:	2000      	movs	r0, #0
 800568e:	bd70      	pop	{r4, r5, r6, pc}

08005690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005692:	6a03      	ldr	r3, [r0, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	680d      	ldr	r5, [r1, #0]
 80056aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ac:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b0:	688d      	ldr	r5, [r1, #8]
 80056b2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	4d14      	ldr	r5, [pc, #80]	; (8005708 <TIM_OC1_SetConfig+0x78>)
 80056b6:	42a8      	cmp	r0, r5
 80056b8:	d007      	beq.n	80056ca <TIM_OC1_SetConfig+0x3a>
 80056ba:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80056be:	42a8      	cmp	r0, r5
 80056c0:	d003      	beq.n	80056ca <TIM_OC1_SetConfig+0x3a>
 80056c2:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 80056c6:	42a8      	cmp	r0, r5
 80056c8:	d105      	bne.n	80056d6 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ca:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056ce:	68cd      	ldr	r5, [r1, #12]
 80056d0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	4d0c      	ldr	r5, [pc, #48]	; (8005708 <TIM_OC1_SetConfig+0x78>)
 80056d8:	42a8      	cmp	r0, r5
 80056da:	d007      	beq.n	80056ec <TIM_OC1_SetConfig+0x5c>
 80056dc:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80056e0:	42a8      	cmp	r0, r5
 80056e2:	d003      	beq.n	80056ec <TIM_OC1_SetConfig+0x5c>
 80056e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e8:	42a8      	cmp	r0, r5
 80056ea:	d105      	bne.n	80056f8 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ec:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f0:	694c      	ldr	r4, [r1, #20]
 80056f2:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f4:	698d      	ldr	r5, [r1, #24]
 80056f6:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056fc:	684a      	ldr	r2, [r1, #4]
 80056fe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	6203      	str	r3, [r0, #32]
}
 8005702:	bc30      	pop	{r4, r5}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00

0800570c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800570e:	6a03      	ldr	r3, [r0, #32]
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800571c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005720:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	680d      	ldr	r5, [r1, #0]
 8005726:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572c:	688d      	ldr	r5, [r1, #8]
 800572e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005732:	4d12      	ldr	r5, [pc, #72]	; (800577c <TIM_OC3_SetConfig+0x70>)
 8005734:	42a8      	cmp	r0, r5
 8005736:	d019      	beq.n	800576c <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	4d10      	ldr	r5, [pc, #64]	; (800577c <TIM_OC3_SetConfig+0x70>)
 800573a:	42a8      	cmp	r0, r5
 800573c:	d007      	beq.n	800574e <TIM_OC3_SetConfig+0x42>
 800573e:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005742:	42a8      	cmp	r0, r5
 8005744:	d003      	beq.n	800574e <TIM_OC3_SetConfig+0x42>
 8005746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800574a:	42a8      	cmp	r0, r5
 800574c:	d107      	bne.n	800575e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800574e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005752:	694d      	ldr	r5, [r1, #20]
 8005754:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005758:	698d      	ldr	r5, [r1, #24]
 800575a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005760:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005762:	684a      	ldr	r2, [r1, #4]
 8005764:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	6203      	str	r3, [r0, #32]
}
 8005768:	bc30      	pop	{r4, r5}
 800576a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800576c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005770:	68cd      	ldr	r5, [r1, #12]
 8005772:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577a:	e7dd      	b.n	8005738 <TIM_OC3_SetConfig+0x2c>
 800577c:	40012c00 	.word	0x40012c00

08005780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005782:	6a03      	ldr	r3, [r0, #32]
 8005784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005788:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005794:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	680d      	ldr	r5, [r1, #0]
 800579a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800579e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a2:	688d      	ldr	r5, [r1, #8]
 80057a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	4d0b      	ldr	r5, [pc, #44]	; (80057d8 <TIM_OC4_SetConfig+0x58>)
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d007      	beq.n	80057be <TIM_OC4_SetConfig+0x3e>
 80057ae:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80057b2:	42a8      	cmp	r0, r5
 80057b4:	d003      	beq.n	80057be <TIM_OC4_SetConfig+0x3e>
 80057b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ba:	42a8      	cmp	r0, r5
 80057bc:	d104      	bne.n	80057c8 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c2:	694d      	ldr	r5, [r1, #20]
 80057c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ca:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	684b      	ldr	r3, [r1, #4]
 80057ce:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	6202      	str	r2, [r0, #32]
}
 80057d2:	bc30      	pop	{r4, r5}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00

080057dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057de:	6a03      	ldr	r3, [r0, #32]
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ea:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	680d      	ldr	r5, [r1, #0]
 80057f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057fc:	688d      	ldr	r5, [r1, #8]
 80057fe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	4d0b      	ldr	r5, [pc, #44]	; (8005830 <TIM_OC5_SetConfig+0x54>)
 8005804:	42a8      	cmp	r0, r5
 8005806:	d007      	beq.n	8005818 <TIM_OC5_SetConfig+0x3c>
 8005808:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800580c:	42a8      	cmp	r0, r5
 800580e:	d003      	beq.n	8005818 <TIM_OC5_SetConfig+0x3c>
 8005810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005814:	42a8      	cmp	r0, r5
 8005816:	d104      	bne.n	8005822 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005818:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800581c:	694d      	ldr	r5, [r1, #20]
 800581e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005822:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005824:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005826:	684a      	ldr	r2, [r1, #4]
 8005828:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582a:	6203      	str	r3, [r0, #32]
}
 800582c:	bc30      	pop	{r4, r5}
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00

08005834 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005836:	6a03      	ldr	r3, [r0, #32]
 8005838:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800583c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005842:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	680d      	ldr	r5, [r1, #0]
 800584e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005852:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005856:	688d      	ldr	r5, [r1, #8]
 8005858:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585c:	4d0b      	ldr	r5, [pc, #44]	; (800588c <TIM_OC6_SetConfig+0x58>)
 800585e:	42a8      	cmp	r0, r5
 8005860:	d007      	beq.n	8005872 <TIM_OC6_SetConfig+0x3e>
 8005862:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005866:	42a8      	cmp	r0, r5
 8005868:	d003      	beq.n	8005872 <TIM_OC6_SetConfig+0x3e>
 800586a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800586e:	42a8      	cmp	r0, r5
 8005870:	d104      	bne.n	800587c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005872:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005876:	694d      	ldr	r5, [r1, #20]
 8005878:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005880:	684b      	ldr	r3, [r1, #4]
 8005882:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	6202      	str	r2, [r0, #32]
}
 8005886:	bc30      	pop	{r4, r5}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00

08005890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005890:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005892:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005894:	6a04      	ldr	r4, [r0, #32]
 8005896:	f024 0401 	bic.w	r4, r4, #1
 800589a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80058aa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80058ae:	6203      	str	r3, [r0, #32]
}
 80058b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b8:	6a03      	ldr	r3, [r0, #32]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80058c2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80058d6:	6203      	str	r3, [r0, #32]
}
 80058d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058dc:	4770      	bx	lr

080058de <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058de:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e8:	4319      	orrs	r1, r3
 80058ea:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	6081      	str	r1, [r0, #8]
}
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	2302      	movs	r3, #2
 80058f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fa:	6802      	ldr	r2, [r0, #0]
 80058fc:	6891      	ldr	r1, [r2, #8]
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <HAL_TIM_Base_Start+0x2c>)
 8005900:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	2b06      	cmp	r3, #6
 8005904:	d006      	beq.n	8005914 <HAL_TIM_Base_Start+0x20>
 8005906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590a:	d003      	beq.n	8005914 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005914:	2301      	movs	r3, #1
 8005916:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800591a:	2000      	movs	r0, #0
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	00010007 	.word	0x00010007

08005924 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	2302      	movs	r3, #2
 8005926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800592a:	6803      	ldr	r3, [r0, #0]
 800592c:	6a19      	ldr	r1, [r3, #32]
 800592e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005932:	4211      	tst	r1, r2
 8005934:	d108      	bne.n	8005948 <HAL_TIM_Base_Stop+0x24>
 8005936:	6a19      	ldr	r1, [r3, #32]
 8005938:	f240 4244 	movw	r2, #1092	; 0x444
 800593c:	4211      	tst	r1, r2
 800593e:	d103      	bne.n	8005948 <HAL_TIM_Base_Stop+0x24>
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005948:	2301      	movs	r3, #1
 800594a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800594e:	2000      	movs	r0, #0
 8005950:	4770      	bx	lr
	...

08005954 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005954:	6802      	ldr	r2, [r0, #0]
 8005956:	68d3      	ldr	r3, [r2, #12]
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595e:	6802      	ldr	r2, [r0, #0]
 8005960:	6891      	ldr	r1, [r2, #8]
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_TIM_Base_Start_IT+0x28>)
 8005964:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	2b06      	cmp	r3, #6
 8005968:	d006      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x24>
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d003      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6013      	str	r3, [r2, #0]
}
 8005978:	2000      	movs	r0, #0
 800597a:	4770      	bx	lr
 800597c:	00010007 	.word	0x00010007

08005980 <HAL_TIM_PWM_MspInit>:
}
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_IC_CaptureCallback>:
}
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_TriggerCallback>:
}
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_IRQHandler>:
{
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800598e:	6803      	ldr	r3, [r0, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	f012 0f02 	tst.w	r2, #2
 8005996:	d011      	beq.n	80059bc <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	f012 0f02 	tst.w	r2, #2
 800599e:	d00d      	beq.n	80059bc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a0:	f06f 0202 	mvn.w	r2, #2
 80059a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059aa:	6803      	ldr	r3, [r0, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f013 0f03 	tst.w	r3, #3
 80059b2:	d079      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80059b4:	f7ff ffe6 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b8:	2300      	movs	r3, #0
 80059ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	f012 0f04 	tst.w	r2, #4
 80059c4:	d012      	beq.n	80059ec <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	f012 0f04 	tst.w	r2, #4
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ce:	f06f 0204 	mvn.w	r2, #4
 80059d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d4:	2302      	movs	r3, #2
 80059d6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80059e0:	d068      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	4620      	mov	r0, r4
 80059e4:	f7ff ffce 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e8:	2300      	movs	r3, #0
 80059ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	f012 0f08 	tst.w	r2, #8
 80059f4:	d012      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	f012 0f08 	tst.w	r2, #8
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059fe:	f06f 0208 	mvn.w	r2, #8
 8005a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a04:	2304      	movs	r3, #4
 8005a06:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f013 0f03 	tst.w	r3, #3
 8005a10:	d057      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ffb6 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	f012 0f10 	tst.w	r2, #16
 8005a24:	d012      	beq.n	8005a4c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	f012 0f10 	tst.w	r2, #16
 8005a2c:	d00e      	beq.n	8005a4c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a2e:	f06f 0210 	mvn.w	r2, #16
 8005a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a34:	2308      	movs	r3, #8
 8005a36:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a40:	d046      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff ff9e 	bl	8005984 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	f012 0f01 	tst.w	r2, #1
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	f012 0f01 	tst.w	r2, #1
 8005a5c:	d13f      	bne.n	8005ade <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a6e:	d13d      	bne.n	8005aec <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a80:	d13b      	bne.n	8005afa <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a8a:	d003      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a92:	d139      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	f012 0f20 	tst.w	r2, #32
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	f012 0f20 	tst.w	r2, #32
 8005aa4:	d137      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x18c>
}
 8005aa6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa8:	f7ff ff6b 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff ff6a 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ab2:	e781      	b.n	80059b8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f7ff ff64 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff ff63 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ac0:	e792      	b.n	80059e8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff ff5d 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff ff5c 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ace:	e7a3      	b.n	8005a18 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff ff56 	bl	8005982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7ff ff55 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
 8005adc:	e7b4      	b.n	8005a48 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ade:	f06f 0201 	mvn.w	r2, #1
 8005ae2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7fb ff55 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
 8005aea:	e7b8      	b.n	8005a5e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fa79 	bl	8005fea <HAL_TIMEx_BreakCallback>
 8005af8:	e7ba      	b.n	8005a70 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005afe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fa73 	bl	8005fec <HAL_TIMEx_Break2Callback>
 8005b06:	e7bc      	b.n	8005a82 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff ff3a 	bl	8005988 <HAL_TIM_TriggerCallback>
 8005b14:	e7be      	b.n	8005a94 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b16:	f06f 0220 	mvn.w	r2, #32
 8005b1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fa63 	bl	8005fe8 <HAL_TIMEx_CommutCallback>
}
 8005b22:	e7c0      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x11c>

08005b24 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005b24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b26:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <TIM_Base_SetConfig+0x6c>)
 8005b28:	4290      	cmp	r0, r2
 8005b2a:	d002      	beq.n	8005b32 <TIM_Base_SetConfig+0xe>
 8005b2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b30:	d103      	bne.n	8005b3a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b36:	684a      	ldr	r2, [r1, #4]
 8005b38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3a:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <TIM_Base_SetConfig+0x6c>)
 8005b3c:	4290      	cmp	r0, r2
 8005b3e:	d00a      	beq.n	8005b56 <TIM_Base_SetConfig+0x32>
 8005b40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b44:	d007      	beq.n	8005b56 <TIM_Base_SetConfig+0x32>
 8005b46:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8005b4a:	4290      	cmp	r0, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_Base_SetConfig+0x32>
 8005b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b52:	4290      	cmp	r0, r2
 8005b54:	d103      	bne.n	8005b5e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	68ca      	ldr	r2, [r1, #12]
 8005b5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b62:	694a      	ldr	r2, [r1, #20]
 8005b64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005b66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b68:	688b      	ldr	r3, [r1, #8]
 8005b6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	680b      	ldr	r3, [r1, #0]
 8005b6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <TIM_Base_SetConfig+0x6c>)
 8005b72:	4298      	cmp	r0, r3
 8005b74:	d007      	beq.n	8005b86 <TIM_Base_SetConfig+0x62>
 8005b76:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	d003      	beq.n	8005b86 <TIM_Base_SetConfig+0x62>
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	4298      	cmp	r0, r3
 8005b84:	d101      	bne.n	8005b8a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	6143      	str	r3, [r0, #20]
}
 8005b8e:	4770      	bx	lr
 8005b90:	40012c00 	.word	0x40012c00

08005b94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005b94:	b1a8      	cbz	r0, 8005bc2 <HAL_TIM_Base_Init+0x2e>
{
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b9e:	b15b      	cbz	r3, 8005bb8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba6:	1d21      	adds	r1, r4, #4
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	f7ff ffbb 	bl	8005b24 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
}
 8005bb6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005bb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005bbc:	f7fc f956 	bl	8001e6c <HAL_TIM_Base_MspInit>
 8005bc0:	e7ee      	b.n	8005ba0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005bc2:	2001      	movs	r0, #1
}
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005bc6:	b1a8      	cbz	r0, 8005bf4 <HAL_TIM_PWM_Init+0x2e>
{
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005bcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005bd0:	b15b      	cbz	r3, 8005bea <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd8:	1d21      	adds	r1, r4, #4
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	f7ff ffa2 	bl	8005b24 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005be6:	2000      	movs	r0, #0
}
 8005be8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005bee:	f7ff fec7 	bl	8005980 <HAL_TIM_PWM_MspInit>
 8005bf2:	e7ee      	b.n	8005bd2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005bf4:	2001      	movs	r0, #1
}
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_OC2_SetConfig>:
{
 8005bf8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfa:	6a03      	ldr	r3, [r0, #32]
 8005bfc:	f023 0310 	bic.w	r3, r3, #16
 8005c00:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005c02:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005c04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005c0c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	680d      	ldr	r5, [r1, #0]
 8005c12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005c16:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c1a:	688d      	ldr	r5, [r1, #8]
 8005c1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c20:	4d12      	ldr	r5, [pc, #72]	; (8005c6c <TIM_OC2_SetConfig+0x74>)
 8005c22:	42a8      	cmp	r0, r5
 8005c24:	d019      	beq.n	8005c5a <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	4d11      	ldr	r5, [pc, #68]	; (8005c6c <TIM_OC2_SetConfig+0x74>)
 8005c28:	42a8      	cmp	r0, r5
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC2_SetConfig+0x44>
 8005c2c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8005c30:	42a8      	cmp	r0, r5
 8005c32:	d003      	beq.n	8005c3c <TIM_OC2_SetConfig+0x44>
 8005c34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c38:	42a8      	cmp	r0, r5
 8005c3a:	d107      	bne.n	8005c4c <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c3c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c40:	694d      	ldr	r5, [r1, #20]
 8005c42:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c46:	698d      	ldr	r5, [r1, #24]
 8005c48:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005c4c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c4e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c50:	684a      	ldr	r2, [r1, #4]
 8005c52:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005c54:	6203      	str	r3, [r0, #32]
}
 8005c56:	bc30      	pop	{r4, r5}
 8005c58:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c5e:	68cd      	ldr	r5, [r1, #12]
 8005c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c68:	e7dd      	b.n	8005c26 <TIM_OC2_SetConfig+0x2e>
 8005c6a:	bf00      	nop
 8005c6c:	40012c00 	.word	0x40012c00

08005c70 <HAL_TIM_PWM_ConfigChannel>:
{
 8005c70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005c72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	f000 8092 	beq.w	8005da0 <HAL_TIM_PWM_ConfigChannel+0x130>
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	4604      	mov	r4, r0
 8005c80:	2301      	movs	r3, #1
 8005c82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005c86:	2302      	movs	r3, #2
 8005c88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005c8c:	2a14      	cmp	r2, #20
 8005c8e:	d81e      	bhi.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
 8005c90:	e8df f002 	tbb	[pc, r2]
 8005c94:	1d1d1d0b 	.word	0x1d1d1d0b
 8005c98:	1d1d1d24 	.word	0x1d1d1d24
 8005c9c:	1d1d1d38 	.word	0x1d1d1d38
 8005ca0:	1d1d1d4b 	.word	0x1d1d1d4b
 8005ca4:	1d1d1d5f 	.word	0x1d1d1d5f
 8005ca8:	72          	.byte	0x72
 8005ca9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	f7ff fcf0 	bl	8005690 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	6993      	ldr	r3, [r2, #24]
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	6993      	ldr	r3, [r2, #24]
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	6993      	ldr	r3, [r2, #24]
 8005cc8:	6929      	ldr	r1, [r5, #16]
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cdc:	6800      	ldr	r0, [r0, #0]
 8005cde:	f7ff ff8b 	bl	8005bf8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	6993      	ldr	r3, [r2, #24]
 8005ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	6993      	ldr	r3, [r2, #24]
 8005cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cf4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	6993      	ldr	r3, [r2, #24]
 8005cfa:	6929      	ldr	r1, [r5, #16]
 8005cfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d00:	6193      	str	r3, [r2, #24]
      break;
 8005d02:	e7e4      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d04:	6800      	ldr	r0, [r0, #0]
 8005d06:	f7ff fd01 	bl	800570c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	69d3      	ldr	r3, [r2, #28]
 8005d0e:	f043 0308 	orr.w	r3, r3, #8
 8005d12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	69d3      	ldr	r3, [r2, #28]
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	69d3      	ldr	r3, [r2, #28]
 8005d22:	6929      	ldr	r1, [r5, #16]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	61d3      	str	r3, [r2, #28]
      break;
 8005d28:	e7d1      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	f7ff fd28 	bl	8005780 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	69d3      	ldr	r3, [r2, #28]
 8005d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	69d3      	ldr	r3, [r2, #28]
 8005d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	69d3      	ldr	r3, [r2, #28]
 8005d48:	6929      	ldr	r1, [r5, #16]
 8005d4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d4e:	61d3      	str	r3, [r2, #28]
      break;
 8005d50:	e7bd      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	f7ff fd42 	bl	80057dc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d5c:	f043 0308 	orr.w	r3, r3, #8
 8005d60:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d70:	6929      	ldr	r1, [r5, #16]
 8005d72:	430b      	orrs	r3, r1
 8005d74:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8005d76:	e7aa      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d78:	6800      	ldr	r0, [r0, #0]
 8005d7a:	f7ff fd5b 	bl	8005834 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d86:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d90:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d96:	6929      	ldr	r1, [r5, #16]
 8005d98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d9c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8005d9e:	e796      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8005da0:	2002      	movs	r0, #2
 8005da2:	e79a      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x6a>

08005da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005da4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005db0:	430b      	orrs	r3, r1
 8005db2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db4:	6083      	str	r3, [r0, #8]
}
 8005db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005dbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d064      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0xd2>
{
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	6802      	ldr	r2, [r0, #0]
 8005dd6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <HAL_TIM_ConfigClockSource+0xd8>)
 8005dda:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005ddc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d04a      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0xbe>
 8005de4:	d913      	bls.n	8005e0e <HAL_TIM_ConfigClockSource+0x52>
 8005de6:	2b60      	cmp	r3, #96	; 0x60
 8005de8:	d03d      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0xaa>
 8005dea:	d91e      	bls.n	8005e2a <HAL_TIM_ConfigClockSource+0x6e>
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d028      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x86>
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df4:	d130      	bne.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8005df6:	68cb      	ldr	r3, [r1, #12]
 8005df8:	684a      	ldr	r2, [r1, #4]
 8005dfa:	6889      	ldr	r1, [r1, #8]
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	f7ff ffd1 	bl	8005da4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	6893      	ldr	r3, [r2, #8]
 8005e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e0a:	6093      	str	r3, [r2, #8]
      break;
 8005e0c:	e024      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d006      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x64>
 8005e12:	d904      	bls.n	8005e1e <HAL_TIM_ConfigClockSource+0x62>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d003      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x64>
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x64>
 8005e1c:	e01c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
 8005e1e:	b9db      	cbnz	r3, 8005e58 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e20:	4619      	mov	r1, r3
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	f7ff fd5b 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005e28:	e016      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005e2a:	2b50      	cmp	r3, #80	; 0x50
 8005e2c:	d114      	bne.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	68ca      	ldr	r2, [r1, #12]
 8005e30:	6849      	ldr	r1, [r1, #4]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	f7ff fd2c 	bl	8005890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e38:	2150      	movs	r1, #80	; 0x50
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	f7ff fd4f 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005e40:	e00a      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8005e42:	68cb      	ldr	r3, [r1, #12]
 8005e44:	684a      	ldr	r2, [r1, #4]
 8005e46:	6889      	ldr	r1, [r1, #8]
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	f7ff ffab 	bl	8005da4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005e56:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005e64:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	68ca      	ldr	r2, [r1, #12]
 8005e68:	6849      	ldr	r1, [r1, #4]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	f7ff fd23 	bl	80058b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e70:	2160      	movs	r1, #96	; 0x60
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	f7ff fd33 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005e78:	e7ee      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	68ca      	ldr	r2, [r1, #12]
 8005e7c:	6849      	ldr	r1, [r1, #4]
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	f7ff fd06 	bl	8005890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e84:	2140      	movs	r1, #64	; 0x40
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	f7ff fd29 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e7e4      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8005e8e:	2002      	movs	r0, #2
}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	ffce0088 	.word	0xffce0088

08005e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e98:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e9a:	f001 011f 	and.w	r1, r1, #31
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ea4:	6a03      	ldr	r3, [r0, #32]
 8005ea6:	ea23 0304 	bic.w	r3, r3, r4
 8005eaa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	6a03      	ldr	r3, [r0, #32]
 8005eae:	408a      	lsls	r2, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	6203      	str	r3, [r0, #32]
}
 8005eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_TIM_PWM_Start>:
{
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	f7ff ffe8 	bl	8005e98 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <HAL_TIM_PWM_Start+0x4c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIM_PWM_Start+0x24>
 8005ed0:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <HAL_TIM_PWM_Start+0x24>
 8005ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <HAL_TIM_PWM_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	6891      	ldr	r1, [r2, #8]
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <HAL_TIM_PWM_Start+0x50>)
 8005eee:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	d006      	beq.n	8005f02 <HAL_TIM_PWM_Start+0x46>
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 8005efa:	6813      	ldr	r3, [r2, #0]
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6013      	str	r3, [r2, #0]
}
 8005f02:	2000      	movs	r0, #0
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	00010007 	.word	0x00010007

08005f10 <HAL_TIM_PWM_Stop>:
{
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f14:	2200      	movs	r2, #0
 8005f16:	6800      	ldr	r0, [r0, #0]
 8005f18:	f7ff ffbe 	bl	8005e98 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <HAL_TIM_PWM_Stop+0x6c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_PWM_Stop+0x4c>
 8005f24:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d017      	beq.n	8005f5c <HAL_TIM_PWM_Stop+0x4c>
 8005f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	6a19      	ldr	r1, [r3, #32]
 8005f38:	f241 1211 	movw	r2, #4369	; 0x1111
 8005f3c:	4211      	tst	r1, r2
 8005f3e:	d108      	bne.n	8005f52 <HAL_TIM_PWM_Stop+0x42>
 8005f40:	6a19      	ldr	r1, [r3, #32]
 8005f42:	f240 4244 	movw	r2, #1092	; 0x444
 8005f46:	4211      	tst	r1, r2
 8005f48:	d103      	bne.n	8005f52 <HAL_TIM_PWM_Stop+0x42>
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005f5c:	6a19      	ldr	r1, [r3, #32]
 8005f5e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005f62:	4211      	tst	r1, r2
 8005f64:	d1e6      	bne.n	8005f34 <HAL_TIM_PWM_Stop+0x24>
 8005f66:	6a19      	ldr	r1, [r3, #32]
 8005f68:	f240 4244 	movw	r2, #1092	; 0x444
 8005f6c:	4211      	tst	r1, r2
 8005f6e:	d1e1      	bne.n	8005f34 <HAL_TIM_PWM_Stop+0x24>
 8005f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
 8005f78:	e7dc      	b.n	8005f34 <HAL_TIM_PWM_Stop+0x24>
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00

08005f80 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d02b      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8005f88:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	2302      	movs	r3, #2
 8005f92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f96:	6802      	ldr	r2, [r0, #0]
 8005f98:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9a:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f9c:	4c11      	ldr	r4, [pc, #68]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005f9e:	42a2      	cmp	r2, r4
 8005fa0:	d019      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa6:	680c      	ldr	r4, [r1, #0]
 8005fa8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005faa:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	6803      	ldr	r3, [r0, #0]
 8005fae:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d002      	beq.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fba:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbe:	688a      	ldr	r2, [r1, #8]
 8005fc0:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc2:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005fd0:	4618      	mov	r0, r3
}
 8005fd2:	bc30      	pop	{r4, r5}
 8005fd4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fda:	684c      	ldr	r4, [r1, #4]
 8005fdc:	4323      	orrs	r3, r4
 8005fde:	e7e0      	b.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005fe0:	2002      	movs	r0, #2
}
 8005fe2:	4770      	bx	lr
 8005fe4:	40012c00 	.word	0x40012c00

08005fe8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fec:	4770      	bx	lr

08005fee <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005ff2:	2b21      	cmp	r3, #33	; 0x21
 8005ff4:	d000      	beq.n	8005ff8 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005ff6:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8005ff8:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	b16b      	cbz	r3, 800601c <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006000:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	6803      	ldr	r3, [r0, #0]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006008:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800600a:	3301      	adds	r3, #1
 800600c:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800600e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8006012:	3b01      	subs	r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800601a:	e7ec      	b.n	8005ff6 <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800601c:	6802      	ldr	r2, [r0, #0]
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006024:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006026:	6802      	ldr	r2, [r0, #0]
 8006028:	6813      	ldr	r3, [r2, #0]
 800602a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4770      	bx	lr

08006032 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006032:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006036:	2b21      	cmp	r3, #33	; 0x21
 8006038:	d000      	beq.n	800603c <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800603a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800603c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8006040:	b29b      	uxth	r3, r3
 8006042:	b17b      	cbz	r3, 8006064 <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006044:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	6802      	ldr	r2, [r0, #0]
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006050:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006052:	3302      	adds	r3, #2
 8006054:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8006056:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800605a:	3b01      	subs	r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8006062:	e7ea      	b.n	800603a <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006064:	6802      	ldr	r2, [r0, #0]
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800606e:	6802      	ldr	r2, [r0, #0]
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4770      	bx	lr

0800607a <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800607a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800607e:	2b21      	cmp	r3, #33	; 0x21
 8006080:	d000      	beq.n	8006084 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006082:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006084:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8006088:	e00c      	b.n	80060a4 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800608a:	6802      	ldr	r2, [r0, #0]
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006092:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006094:	6802      	ldr	r2, [r0, #0]
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609c:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 800609e:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0ec      	beq.n	8006082 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80060a8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80060ac:	b292      	uxth	r2, r2
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	d0eb      	beq.n	800608a <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80060b2:	6802      	ldr	r2, [r0, #0]
 80060b4:	69d1      	ldr	r1, [r2, #28]
 80060b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80060ba:	d0f1      	beq.n	80060a0 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80060bc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80060be:	7809      	ldrb	r1, [r1, #0]
 80060c0:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 80060c2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80060c4:	3201      	adds	r2, #1
 80060c6:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80060c8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80060cc:	3a01      	subs	r2, #1
 80060ce:	b292      	uxth	r2, r2
 80060d0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 80060d4:	e7e4      	b.n	80060a0 <UART_TxISR_8BIT_FIFOEN+0x26>

080060d6 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060d6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80060da:	2b21      	cmp	r3, #33	; 0x21
 80060dc:	d000      	beq.n	80060e0 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 80060de:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80060e0:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80060e4:	e00c      	b.n	8006100 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80060e6:	6802      	ldr	r2, [r0, #0]
 80060e8:	6893      	ldr	r3, [r2, #8]
 80060ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060ee:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f0:	6802      	ldr	r2, [r0, #0]
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f8:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80060fa:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0ec      	beq.n	80060de <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8006104:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8006108:	b292      	uxth	r2, r2
 800610a:	2a00      	cmp	r2, #0
 800610c:	d0eb      	beq.n	80060e6 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800610e:	6802      	ldr	r2, [r0, #0]
 8006110:	69d1      	ldr	r1, [r2, #28]
 8006112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006116:	d0f1      	beq.n	80060fc <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006118:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800611a:	8809      	ldrh	r1, [r1, #0]
 800611c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006120:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006122:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006124:	3202      	adds	r2, #2
 8006126:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8006128:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800612c:	3a01      	subs	r2, #1
 800612e:	b292      	uxth	r2, r2
 8006130:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8006134:	e7e2      	b.n	80060fc <UART_TxISR_16BIT_FIFOEN+0x26>
	...

08006138 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006138:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800613c:	2b20      	cmp	r3, #32
 800613e:	d146      	bne.n	80061ce <HAL_UART_Transmit_IT+0x96>
    if ((pData == NULL) || (Size == 0U))
 8006140:	2900      	cmp	r1, #0
 8006142:	d046      	beq.n	80061d2 <HAL_UART_Transmit_IT+0x9a>
 8006144:	2a00      	cmp	r2, #0
 8006146:	d046      	beq.n	80061d6 <HAL_UART_Transmit_IT+0x9e>
    __HAL_LOCK(huart);
 8006148:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d044      	beq.n	80061da <HAL_UART_Transmit_IT+0xa2>
 8006150:	2301      	movs	r3, #1
 8006152:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8006156:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006158:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800615c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006168:	2321      	movs	r3, #33	; 0x21
 800616a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800616e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006174:	d00f      	beq.n	8006196 <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006176:	6883      	ldr	r3, [r0, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d021      	beq.n	80061c2 <HAL_UART_Transmit_IT+0x8a>
        huart->TxISR = UART_TxISR_8BIT;
 800617e:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <HAL_UART_Transmit_IT+0xa8>)
 8006180:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8006182:	2300      	movs	r3, #0
 8006184:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006188:	6801      	ldr	r1, [r0, #0]
 800618a:	680a      	ldr	r2, [r1, #0]
 800618c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006190:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8006192:	4618      	mov	r0, r3
 8006194:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006196:	6883      	ldr	r3, [r0, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_UART_Transmit_IT+0xac>)
 80061a0:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80061a2:	2300      	movs	r3, #0
 80061a4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80061a8:	6801      	ldr	r1, [r0, #0]
 80061aa:	688a      	ldr	r2, [r1, #8]
 80061ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80061b0:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80061b2:	4618      	mov	r0, r3
 80061b4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b6:	6903      	ldr	r3, [r0, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <HAL_UART_Transmit_IT+0x66>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <HAL_UART_Transmit_IT+0xb0>)
 80061be:	6703      	str	r3, [r0, #112]	; 0x70
 80061c0:	e7ef      	b.n	80061a2 <HAL_UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c2:	6903      	ldr	r3, [r0, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1da      	bne.n	800617e <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <HAL_UART_Transmit_IT+0xb4>)
 80061ca:	6703      	str	r3, [r0, #112]	; 0x70
 80061cc:	e7d9      	b.n	8006182 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 80061ce:	2002      	movs	r0, #2
 80061d0:	4770      	bx	lr
      return HAL_ERROR;
 80061d2:	2001      	movs	r0, #1
 80061d4:	4770      	bx	lr
 80061d6:	2001      	movs	r0, #1
 80061d8:	4770      	bx	lr
    __HAL_LOCK(huart);
 80061da:	2002      	movs	r0, #2
}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	08005fef 	.word	0x08005fef
 80061e4:	0800607b 	.word	0x0800607b
 80061e8:	080060d7 	.word	0x080060d7
 80061ec:	08006033 	.word	0x08006033

080061f0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d17f      	bne.n	80062f8 <HAL_UART_Receive_IT+0x108>
    if ((pData == NULL) || (Size == 0U))
 80061f8:	2900      	cmp	r1, #0
 80061fa:	d07f      	beq.n	80062fc <HAL_UART_Receive_IT+0x10c>
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d07f      	beq.n	8006300 <HAL_UART_Receive_IT+0x110>
    __HAL_LOCK(huart);
 8006200:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d07d      	beq.n	8006304 <HAL_UART_Receive_IT+0x114>
 8006208:	2301      	movs	r3, #1
 800620a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pRxBuffPtr  = pData;
 800620e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006210:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006214:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	66c3      	str	r3, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800621c:	6883      	ldr	r3, [r0, #8]
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d006      	beq.n	8006232 <HAL_UART_Receive_IT+0x42>
 8006224:	b9a3      	cbnz	r3, 8006250 <HAL_UART_Receive_IT+0x60>
 8006226:	6903      	ldr	r3, [r0, #16]
 8006228:	b973      	cbnz	r3, 8006248 <HAL_UART_Receive_IT+0x58>
 800622a:	23ff      	movs	r3, #255	; 0xff
 800622c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006230:	e014      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
 8006232:	6903      	ldr	r3, [r0, #16]
 8006234:	b923      	cbnz	r3, 8006240 <HAL_UART_Receive_IT+0x50>
 8006236:	f240 13ff 	movw	r3, #511	; 0x1ff
 800623a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800623e:	e00d      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
 8006240:	23ff      	movs	r3, #255	; 0xff
 8006242:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006246:	e009      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
 8006248:	237f      	movs	r3, #127	; 0x7f
 800624a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800624e:	e005      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
 8006250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006254:	d021      	beq.n	800629a <HAL_UART_Receive_IT+0xaa>
 8006256:	2300      	movs	r3, #0
 8006258:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	2300      	movs	r3, #0
 800625e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006262:	2322      	movs	r3, #34	; 0x22
 8006264:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006268:	6801      	ldr	r1, [r0, #0]
 800626a:	688b      	ldr	r3, [r1, #8]
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006272:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006278:	d019      	beq.n	80062ae <HAL_UART_Receive_IT+0xbe>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	6883      	ldr	r3, [r0, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006280:	d034      	beq.n	80062ec <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_8BIT;
 8006282:	4b21      	ldr	r3, [pc, #132]	; (8006308 <HAL_UART_Receive_IT+0x118>)
 8006284:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 8006286:	2300      	movs	r3, #0
 8006288:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800628c:	6801      	ldr	r1, [r0, #0]
 800628e:	680a      	ldr	r2, [r1, #0]
 8006290:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006294:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8006296:	4618      	mov	r0, r3
 8006298:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800629a:	6903      	ldr	r3, [r0, #16]
 800629c:	b91b      	cbnz	r3, 80062a6 <HAL_UART_Receive_IT+0xb6>
 800629e:	237f      	movs	r3, #127	; 0x7f
 80062a0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80062a4:	e7da      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
 80062a6:	233f      	movs	r3, #63	; 0x3f
 80062a8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80062ac:	e7d6      	b.n	800625c <HAL_UART_Receive_IT+0x6c>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80062ae:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d8e1      	bhi.n	800627a <HAL_UART_Receive_IT+0x8a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b6:	6883      	ldr	r3, [r0, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d010      	beq.n	80062e0 <HAL_UART_Receive_IT+0xf0>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <HAL_UART_Receive_IT+0x11c>)
 80062c0:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 80062c2:	2300      	movs	r3, #0
 80062c4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c8:	6801      	ldr	r1, [r0, #0]
 80062ca:	680a      	ldr	r2, [r1, #0]
 80062cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062d2:	6801      	ldr	r1, [r0, #0]
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062da:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80062dc:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062de:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e0:	6903      	ldr	r3, [r0, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1eb      	bne.n	80062be <HAL_UART_Receive_IT+0xce>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_UART_Receive_IT+0x120>)
 80062e8:	66c3      	str	r3, [r0, #108]	; 0x6c
 80062ea:	e7ea      	b.n	80062c2 <HAL_UART_Receive_IT+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ec:	6903      	ldr	r3, [r0, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1c7      	bne.n	8006282 <HAL_UART_Receive_IT+0x92>
        huart->RxISR = UART_RxISR_16BIT;
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <HAL_UART_Receive_IT+0x124>)
 80062f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80062f6:	e7c6      	b.n	8006286 <HAL_UART_Receive_IT+0x96>
    return HAL_BUSY;
 80062f8:	2002      	movs	r0, #2
 80062fa:	4770      	bx	lr
      return HAL_ERROR;
 80062fc:	2001      	movs	r0, #1
 80062fe:	4770      	bx	lr
 8006300:	2001      	movs	r0, #1
 8006302:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006304:	2002      	movs	r0, #2
}
 8006306:	4770      	bx	lr
 8006308:	08006319 	.word	0x08006319
 800630c:	080063e5 	.word	0x080063e5
 8006310:	08006491 	.word	0x08006491
 8006314:	0800637f 	.word	0x0800637f

08006318 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006318:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800631a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800631e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006322:	2a22      	cmp	r2, #34	; 0x22
 8006324:	d005      	beq.n	8006332 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006326:	6802      	ldr	r2, [r0, #0]
 8006328:	6993      	ldr	r3, [r2, #24]
 800632a:	f043 0308 	orr.w	r3, r3, #8
 800632e:	6193      	str	r3, [r2, #24]
  }
}
 8006330:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006332:	6802      	ldr	r2, [r0, #0]
 8006334:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006336:	b2db      	uxtb	r3, r3
 8006338:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800633a:	400b      	ands	r3, r1
 800633c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800633e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006340:	3301      	adds	r3, #1
 8006342:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006344:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006348:	3b01      	subs	r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006350:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1ea      	bne.n	8006330 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800635a:	6802      	ldr	r2, [r0, #0]
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006362:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	6802      	ldr	r2, [r0, #0]
 8006366:	6893      	ldr	r3, [r2, #8]
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800636e:	2320      	movs	r3, #32
 8006370:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8006378:	f7fb f850 	bl	800141c <HAL_UART_RxCpltCallback>
 800637c:	e7d8      	b.n	8006330 <UART_RxISR_8BIT+0x18>

0800637e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800637e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006380:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006384:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006388:	2b22      	cmp	r3, #34	; 0x22
 800638a:	d005      	beq.n	8006398 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800638c:	6802      	ldr	r2, [r0, #0]
 800638e:	6993      	ldr	r3, [r2, #24]
 8006390:	f043 0308 	orr.w	r3, r3, #8
 8006394:	6193      	str	r3, [r2, #24]
  }
}
 8006396:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800639c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800639e:	4013      	ands	r3, r2
 80063a0:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80063a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80063a4:	3302      	adds	r3, #2
 80063a6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80063a8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80063b4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1eb      	bne.n	8006396 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063be:	6802      	ldr	r2, [r0, #0]
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063c6:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	6802      	ldr	r2, [r0, #0]
 80063ca:	6893      	ldr	r3, [r2, #8]
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80063d2:	2320      	movs	r3, #32
 80063d4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 80063dc:	f7fb f81e 	bl	800141c <HAL_UART_RxCpltCallback>
 80063e0:	e7d9      	b.n	8006396 <UART_RxISR_16BIT+0x18>
	...

080063e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063e4:	b570      	push	{r4, r5, r6, lr}
  uint16_t  uhMask = huart->Mask;
 80063e6:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80063ee:	2b22      	cmp	r3, #34	; 0x22
 80063f0:	d005      	beq.n	80063fe <UART_RxISR_8BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063f2:	6802      	ldr	r2, [r0, #0]
 80063f4:	6993      	ldr	r3, [r2, #24]
 80063f6:	f043 0308 	orr.w	r3, r3, #8
 80063fa:	6193      	str	r3, [r2, #24]
  }
}
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
 80063fe:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006400:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8006404:	e001      	b.n	800640a <UART_RxISR_8BIT_FIFOEN+0x26>
 8006406:	3e01      	subs	r6, #1
 8006408:	b2b6      	uxth	r6, r6
 800640a:	b346      	cbz	r6, 800645e <UART_RxISR_8BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006410:	b2eb      	uxtb	r3, r5
 8006412:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006414:	400b      	ands	r3, r1
 8006416:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800641a:	3301      	adds	r3, #1
 800641c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800641e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006422:	3b01      	subs	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800642a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e8      	bne.n	8006406 <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800643c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	6893      	ldr	r3, [r2, #8]
 8006442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800644c:	2320      	movs	r3, #32
 800644e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8006456:	4620      	mov	r0, r4
 8006458:	f7fa ffe0 	bl	800141c <HAL_UART_RxCpltCallback>
 800645c:	e7d3      	b.n	8006406 <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800645e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006462:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0c9      	beq.n	80063fc <UART_RxISR_8BIT_FIFOEN+0x18>
 8006468:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800646c:	429a      	cmp	r2, r3
 800646e:	d9c5      	bls.n	80063fc <UART_RxISR_8BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	6893      	ldr	r3, [r2, #8]
 8006474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006478:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800647c:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	6813      	ldr	r3, [r2, #0]
 8006482:	f043 0320 	orr.w	r3, r3, #32
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e7b8      	b.n	80063fc <UART_RxISR_8BIT_FIFOEN+0x18>
 800648a:	bf00      	nop
 800648c:	08006319 	.word	0x08006319

08006490 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006490:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006492:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006496:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800649a:	2b22      	cmp	r3, #34	; 0x22
 800649c:	d005      	beq.n	80064aa <UART_RxISR_16BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800649e:	6802      	ldr	r2, [r0, #0]
 80064a0:	6993      	ldr	r3, [r2, #24]
 80064a2:	f043 0308 	orr.w	r3, r3, #8
 80064a6:	6193      	str	r3, [r2, #24]
  }
}
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80064ac:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80064b0:	e001      	b.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x26>
 80064b2:	3d01      	subs	r5, #1
 80064b4:	b2ad      	uxth	r5, r5
 80064b6:	b33d      	cbz	r5, 8006508 <UART_RxISR_16BIT_FIFOEN+0x78>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80064be:	4033      	ands	r3, r6
 80064c0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80064c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c4:	3302      	adds	r3, #2
 80064c6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80064c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80064d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e9      	bne.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	6893      	ldr	r3, [r2, #8]
 80064ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80064f6:	2320      	movs	r3, #32
 80064f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8006500:	4620      	mov	r0, r4
 8006502:	f7fa ff8b 	bl	800141c <HAL_UART_RxCpltCallback>
 8006506:	e7d4      	b.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 8006508:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800650c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ca      	beq.n	80064a8 <UART_RxISR_16BIT_FIFOEN+0x18>
 8006512:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006516:	429a      	cmp	r2, r3
 8006518:	d9c6      	bls.n	80064a8 <UART_RxISR_16BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	6893      	ldr	r3, [r2, #8]
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006522:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 8006526:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	f043 0320 	orr.w	r3, r3, #32
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e7b9      	b.n	80064a8 <UART_RxISR_16BIT_FIFOEN+0x18>
 8006534:	0800637f 	.word	0x0800637f

08006538 <UART_SetConfig>:
{
 8006538:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800653c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800653e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006540:	6883      	ldr	r3, [r0, #8]
 8006542:	6902      	ldr	r2, [r0, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	6942      	ldr	r2, [r0, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	69c2      	ldr	r2, [r0, #28]
 800654c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 800654e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006550:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006552:	6808      	ldr	r0, [r1, #0]
 8006554:	4aa1      	ldr	r2, [pc, #644]	; (80067dc <UART_SetConfig+0x2a4>)
 8006556:	4002      	ands	r2, r0
 8006558:	431a      	orrs	r2, r3
 800655a:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	6853      	ldr	r3, [r2, #4]
 8006560:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006564:	68e1      	ldr	r1, [r4, #12]
 8006566:	430b      	orrs	r3, r1
 8006568:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	4b9c      	ldr	r3, [pc, #624]	; (80067e0 <UART_SetConfig+0x2a8>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 8006574:	6a23      	ldr	r3, [r4, #32]
 8006576:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006578:	6893      	ldr	r3, [r2, #8]
 800657a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800657e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006582:	430b      	orrs	r3, r1
 8006584:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800658a:	f023 030f 	bic.w	r3, r3, #15
 800658e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006590:	430b      	orrs	r3, r1
 8006592:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	4a93      	ldr	r2, [pc, #588]	; (80067e4 <UART_SetConfig+0x2ac>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d019      	beq.n	80065d0 <UART_SetConfig+0x98>
 800659c:	4a90      	ldr	r2, [pc, #576]	; (80067e0 <UART_SetConfig+0x2a8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02a      	beq.n	80065f8 <UART_SetConfig+0xc0>
 80065a2:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a4:	4a8e      	ldr	r2, [pc, #568]	; (80067e0 <UART_SetConfig+0x2a8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d043      	beq.n	8006632 <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065aa:	69e3      	ldr	r3, [r4, #28]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	f000 8307 	beq.w	8006bc2 <UART_SetConfig+0x68a>
    switch (clocksource)
 80065b4:	3d01      	subs	r5, #1
 80065b6:	2d07      	cmp	r5, #7
 80065b8:	f200 854f 	bhi.w	800705a <UART_SetConfig+0xb22>
 80065bc:	e8df f015 	tbh	[pc, r5, lsl #1]
 80065c0:	046e041e 	.word	0x046e041e
 80065c4:	04ca054d 	.word	0x04ca054d
 80065c8:	054d054d 	.word	0x054d054d
 80065cc:	0508054d 	.word	0x0508054d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80065d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80065d8:	f002 0203 	and.w	r2, r2, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065dc:	2a03      	cmp	r2, #3
 80065de:	d809      	bhi.n	80065f4 <UART_SetConfig+0xbc>
 80065e0:	e8df f002 	tbb	[pc, r2]
 80065e4:	06230402 	.word	0x06230402
 80065e8:	2501      	movs	r5, #1
 80065ea:	e7db      	b.n	80065a4 <UART_SetConfig+0x6c>
 80065ec:	2504      	movs	r5, #4
 80065ee:	e7d9      	b.n	80065a4 <UART_SetConfig+0x6c>
 80065f0:	2508      	movs	r5, #8
 80065f2:	e7d7      	b.n	80065a4 <UART_SetConfig+0x6c>
 80065f4:	2510      	movs	r5, #16
 80065f6:	e7d5      	b.n	80065a4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006600:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006604:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006608:	d00b      	beq.n	8006622 <UART_SetConfig+0xea>
 800660a:	d907      	bls.n	800661c <UART_SetConfig+0xe4>
 800660c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006610:	d00d      	beq.n	800662e <UART_SetConfig+0xf6>
 8006612:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006616:	d106      	bne.n	8006626 <UART_SetConfig+0xee>
 8006618:	2508      	movs	r5, #8
 800661a:	e7c3      	b.n	80065a4 <UART_SetConfig+0x6c>
 800661c:	b91a      	cbnz	r2, 8006626 <UART_SetConfig+0xee>
 800661e:	2500      	movs	r5, #0
 8006620:	e7c0      	b.n	80065a4 <UART_SetConfig+0x6c>
 8006622:	2504      	movs	r5, #4
 8006624:	e7be      	b.n	80065a4 <UART_SetConfig+0x6c>
 8006626:	2510      	movs	r5, #16
 8006628:	e7bc      	b.n	80065a4 <UART_SetConfig+0x6c>
 800662a:	2502      	movs	r5, #2
 800662c:	e7ba      	b.n	80065a4 <UART_SetConfig+0x6c>
 800662e:	2502      	movs	r5, #2
 8006630:	e7b8      	b.n	80065a4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006632:	2d08      	cmp	r5, #8
 8006634:	f200 8514 	bhi.w	8007060 <UART_SetConfig+0xb28>
 8006638:	e8df f015 	tbh	[pc, r5, lsl #1]
 800663c:	05120009 	.word	0x05120009
 8006640:	0512005a 	.word	0x0512005a
 8006644:	05120078 	.word	0x05120078
 8006648:	05120512 	.word	0x05120512
 800664c:	00af      	.short	0x00af
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800664e:	f7fe fc7d 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006654:	b1d3      	cbz	r3, 800668c <UART_SetConfig+0x154>
 8006656:	2b01      	cmp	r3, #1
 8006658:	d036      	beq.n	80066c8 <UART_SetConfig+0x190>
 800665a:	2b02      	cmp	r3, #2
 800665c:	d036      	beq.n	80066cc <UART_SetConfig+0x194>
 800665e:	2b03      	cmp	r3, #3
 8006660:	d036      	beq.n	80066d0 <UART_SetConfig+0x198>
 8006662:	2b04      	cmp	r3, #4
 8006664:	d036      	beq.n	80066d4 <UART_SetConfig+0x19c>
 8006666:	2b05      	cmp	r3, #5
 8006668:	d036      	beq.n	80066d8 <UART_SetConfig+0x1a0>
 800666a:	2b06      	cmp	r3, #6
 800666c:	d036      	beq.n	80066dc <UART_SetConfig+0x1a4>
 800666e:	2b07      	cmp	r3, #7
 8006670:	d036      	beq.n	80066e0 <UART_SetConfig+0x1a8>
 8006672:	2b08      	cmp	r3, #8
 8006674:	d036      	beq.n	80066e4 <UART_SetConfig+0x1ac>
 8006676:	2b09      	cmp	r3, #9
 8006678:	d036      	beq.n	80066e8 <UART_SetConfig+0x1b0>
 800667a:	2b0a      	cmp	r3, #10
 800667c:	d036      	beq.n	80066ec <UART_SetConfig+0x1b4>
 800667e:	2b0b      	cmp	r3, #11
 8006680:	d001      	beq.n	8006686 <UART_SetConfig+0x14e>
 8006682:	2301      	movs	r3, #1
 8006684:	e003      	b.n	800668e <UART_SetConfig+0x156>
 8006686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800668a:	e000      	b.n	800668e <UART_SetConfig+0x156>
 800668c:	2301      	movs	r3, #1
 800668e:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8006692:	2800      	cmp	r0, #0
 8006694:	f000 84e6 	beq.w	8007064 <UART_SetConfig+0xb2c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800669e:	4283      	cmp	r3, r0
 80066a0:	f200 84e2 	bhi.w	8007068 <UART_SetConfig+0xb30>
 80066a4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80066a8:	f200 84e0 	bhi.w	800706c <UART_SetConfig+0xb34>
        switch (clocksource)
 80066ac:	2d08      	cmp	r5, #8
 80066ae:	f200 8285 	bhi.w	8006bbc <UART_SetConfig+0x684>
 80066b2:	e8df f015 	tbh	[pc, r5, lsl #1]
 80066b6:	00d0      	.short	0x00d0
 80066b8:	012f0283 	.word	0x012f0283
 80066bc:	01930283 	.word	0x01930283
 80066c0:	02830283 	.word	0x02830283
 80066c4:	021f0283 	.word	0x021f0283
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80066c8:	2302      	movs	r3, #2
 80066ca:	e7e0      	b.n	800668e <UART_SetConfig+0x156>
 80066cc:	2304      	movs	r3, #4
 80066ce:	e7de      	b.n	800668e <UART_SetConfig+0x156>
 80066d0:	2306      	movs	r3, #6
 80066d2:	e7dc      	b.n	800668e <UART_SetConfig+0x156>
 80066d4:	2308      	movs	r3, #8
 80066d6:	e7da      	b.n	800668e <UART_SetConfig+0x156>
 80066d8:	230a      	movs	r3, #10
 80066da:	e7d8      	b.n	800668e <UART_SetConfig+0x156>
 80066dc:	230c      	movs	r3, #12
 80066de:	e7d6      	b.n	800668e <UART_SetConfig+0x156>
 80066e0:	2310      	movs	r3, #16
 80066e2:	e7d4      	b.n	800668e <UART_SetConfig+0x156>
 80066e4:	2320      	movs	r3, #32
 80066e6:	e7d2      	b.n	800668e <UART_SetConfig+0x156>
 80066e8:	2340      	movs	r3, #64	; 0x40
 80066ea:	e7d0      	b.n	800668e <UART_SetConfig+0x156>
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	e7ce      	b.n	800668e <UART_SetConfig+0x156>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80066f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d06f      	beq.n	80067d6 <UART_SetConfig+0x29e>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d078      	beq.n	80067ec <UART_SetConfig+0x2b4>
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d078      	beq.n	80067f0 <UART_SetConfig+0x2b8>
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d078      	beq.n	80067f4 <UART_SetConfig+0x2bc>
 8006702:	2b04      	cmp	r3, #4
 8006704:	d078      	beq.n	80067f8 <UART_SetConfig+0x2c0>
 8006706:	2b05      	cmp	r3, #5
 8006708:	d078      	beq.n	80067fc <UART_SetConfig+0x2c4>
 800670a:	2b06      	cmp	r3, #6
 800670c:	d078      	beq.n	8006800 <UART_SetConfig+0x2c8>
 800670e:	2b07      	cmp	r3, #7
 8006710:	d078      	beq.n	8006804 <UART_SetConfig+0x2cc>
 8006712:	2b08      	cmp	r3, #8
 8006714:	d078      	beq.n	8006808 <UART_SetConfig+0x2d0>
 8006716:	2b09      	cmp	r3, #9
 8006718:	d078      	beq.n	800680c <UART_SetConfig+0x2d4>
 800671a:	2b0a      	cmp	r3, #10
 800671c:	d078      	beq.n	8006810 <UART_SetConfig+0x2d8>
 800671e:	2b0b      	cmp	r3, #11
 8006720:	d001      	beq.n	8006726 <UART_SetConfig+0x1ee>
 8006722:	4831      	ldr	r0, [pc, #196]	; (80067e8 <UART_SetConfig+0x2b0>)
 8006724:	e7b5      	b.n	8006692 <UART_SetConfig+0x15a>
 8006726:	f24f 4024 	movw	r0, #62500	; 0xf424
 800672a:	e7b2      	b.n	8006692 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800672c:	f7fe fba0 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8006730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006732:	b1d3      	cbz	r3, 800676a <UART_SetConfig+0x232>
 8006734:	2b01      	cmp	r3, #1
 8006736:	d01c      	beq.n	8006772 <UART_SetConfig+0x23a>
 8006738:	2b02      	cmp	r3, #2
 800673a:	d01c      	beq.n	8006776 <UART_SetConfig+0x23e>
 800673c:	2b03      	cmp	r3, #3
 800673e:	d01c      	beq.n	800677a <UART_SetConfig+0x242>
 8006740:	2b04      	cmp	r3, #4
 8006742:	d01c      	beq.n	800677e <UART_SetConfig+0x246>
 8006744:	2b05      	cmp	r3, #5
 8006746:	d01c      	beq.n	8006782 <UART_SetConfig+0x24a>
 8006748:	2b06      	cmp	r3, #6
 800674a:	d01c      	beq.n	8006786 <UART_SetConfig+0x24e>
 800674c:	2b07      	cmp	r3, #7
 800674e:	d01c      	beq.n	800678a <UART_SetConfig+0x252>
 8006750:	2b08      	cmp	r3, #8
 8006752:	d01c      	beq.n	800678e <UART_SetConfig+0x256>
 8006754:	2b09      	cmp	r3, #9
 8006756:	d01c      	beq.n	8006792 <UART_SetConfig+0x25a>
 8006758:	2b0a      	cmp	r3, #10
 800675a:	d01c      	beq.n	8006796 <UART_SetConfig+0x25e>
 800675c:	2b0b      	cmp	r3, #11
 800675e:	d001      	beq.n	8006764 <UART_SetConfig+0x22c>
 8006760:	2301      	movs	r3, #1
 8006762:	e003      	b.n	800676c <UART_SetConfig+0x234>
 8006764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006768:	e000      	b.n	800676c <UART_SetConfig+0x234>
 800676a:	2301      	movs	r3, #1
 800676c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8006770:	e78f      	b.n	8006692 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006772:	2302      	movs	r3, #2
 8006774:	e7fa      	b.n	800676c <UART_SetConfig+0x234>
 8006776:	2304      	movs	r3, #4
 8006778:	e7f8      	b.n	800676c <UART_SetConfig+0x234>
 800677a:	2306      	movs	r3, #6
 800677c:	e7f6      	b.n	800676c <UART_SetConfig+0x234>
 800677e:	2308      	movs	r3, #8
 8006780:	e7f4      	b.n	800676c <UART_SetConfig+0x234>
 8006782:	230a      	movs	r3, #10
 8006784:	e7f2      	b.n	800676c <UART_SetConfig+0x234>
 8006786:	230c      	movs	r3, #12
 8006788:	e7f0      	b.n	800676c <UART_SetConfig+0x234>
 800678a:	2310      	movs	r3, #16
 800678c:	e7ee      	b.n	800676c <UART_SetConfig+0x234>
 800678e:	2320      	movs	r3, #32
 8006790:	e7ec      	b.n	800676c <UART_SetConfig+0x234>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	e7ea      	b.n	800676c <UART_SetConfig+0x234>
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	e7e8      	b.n	800676c <UART_SetConfig+0x234>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800679a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d039      	beq.n	8006814 <UART_SetConfig+0x2dc>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d03a      	beq.n	800681a <UART_SetConfig+0x2e2>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d03b      	beq.n	8006820 <UART_SetConfig+0x2e8>
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d03c      	beq.n	8006826 <UART_SetConfig+0x2ee>
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d03d      	beq.n	800682c <UART_SetConfig+0x2f4>
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d03e      	beq.n	8006832 <UART_SetConfig+0x2fa>
 80067b4:	2b06      	cmp	r3, #6
 80067b6:	d03f      	beq.n	8006838 <UART_SetConfig+0x300>
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	d040      	beq.n	800683e <UART_SetConfig+0x306>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d041      	beq.n	8006844 <UART_SetConfig+0x30c>
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d042      	beq.n	800684a <UART_SetConfig+0x312>
 80067c4:	2b0a      	cmp	r3, #10
 80067c6:	d043      	beq.n	8006850 <UART_SetConfig+0x318>
 80067c8:	2b0b      	cmp	r3, #11
 80067ca:	d002      	beq.n	80067d2 <UART_SetConfig+0x29a>
 80067cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067d0:	e75f      	b.n	8006692 <UART_SetConfig+0x15a>
 80067d2:	2080      	movs	r0, #128	; 0x80
 80067d4:	e75d      	b.n	8006692 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067d6:	4804      	ldr	r0, [pc, #16]	; (80067e8 <UART_SetConfig+0x2b0>)
 80067d8:	e75b      	b.n	8006692 <UART_SetConfig+0x15a>
 80067da:	bf00      	nop
 80067dc:	cfff69f3 	.word	0xcfff69f3
 80067e0:	40008000 	.word	0x40008000
 80067e4:	40013800 	.word	0x40013800
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	48ac      	ldr	r0, [pc, #688]	; (8006aa0 <UART_SetConfig+0x568>)
 80067ee:	e750      	b.n	8006692 <UART_SetConfig+0x15a>
 80067f0:	48ac      	ldr	r0, [pc, #688]	; (8006aa4 <UART_SetConfig+0x56c>)
 80067f2:	e74e      	b.n	8006692 <UART_SetConfig+0x15a>
 80067f4:	48ac      	ldr	r0, [pc, #688]	; (8006aa8 <UART_SetConfig+0x570>)
 80067f6:	e74c      	b.n	8006692 <UART_SetConfig+0x15a>
 80067f8:	48ac      	ldr	r0, [pc, #688]	; (8006aac <UART_SetConfig+0x574>)
 80067fa:	e74a      	b.n	8006692 <UART_SetConfig+0x15a>
 80067fc:	48ac      	ldr	r0, [pc, #688]	; (8006ab0 <UART_SetConfig+0x578>)
 80067fe:	e748      	b.n	8006692 <UART_SetConfig+0x15a>
 8006800:	48ac      	ldr	r0, [pc, #688]	; (8006ab4 <UART_SetConfig+0x57c>)
 8006802:	e746      	b.n	8006692 <UART_SetConfig+0x15a>
 8006804:	48ac      	ldr	r0, [pc, #688]	; (8006ab8 <UART_SetConfig+0x580>)
 8006806:	e744      	b.n	8006692 <UART_SetConfig+0x15a>
 8006808:	48ac      	ldr	r0, [pc, #688]	; (8006abc <UART_SetConfig+0x584>)
 800680a:	e742      	b.n	8006692 <UART_SetConfig+0x15a>
 800680c:	48ac      	ldr	r0, [pc, #688]	; (8006ac0 <UART_SetConfig+0x588>)
 800680e:	e740      	b.n	8006692 <UART_SetConfig+0x15a>
 8006810:	48ac      	ldr	r0, [pc, #688]	; (8006ac4 <UART_SetConfig+0x58c>)
 8006812:	e73e      	b.n	8006692 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006818:	e73b      	b.n	8006692 <UART_SetConfig+0x15a>
 800681a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800681e:	e738      	b.n	8006692 <UART_SetConfig+0x15a>
 8006820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006824:	e735      	b.n	8006692 <UART_SetConfig+0x15a>
 8006826:	f241 5055 	movw	r0, #5461	; 0x1555
 800682a:	e732      	b.n	8006692 <UART_SetConfig+0x15a>
 800682c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006830:	e72f      	b.n	8006692 <UART_SetConfig+0x15a>
 8006832:	f640 40cc 	movw	r0, #3276	; 0xccc
 8006836:	e72c      	b.n	8006692 <UART_SetConfig+0x15a>
 8006838:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800683c:	e729      	b.n	8006692 <UART_SetConfig+0x15a>
 800683e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006842:	e726      	b.n	8006692 <UART_SetConfig+0x15a>
 8006844:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006848:	e723      	b.n	8006692 <UART_SetConfig+0x15a>
 800684a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800684e:	e720      	b.n	8006692 <UART_SetConfig+0x15a>
 8006850:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006854:	e71d      	b.n	8006692 <UART_SetConfig+0x15a>
            pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fe fb79 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800685c:	b1e3      	cbz	r3, 8006898 <UART_SetConfig+0x360>
 800685e:	2b01      	cmp	r3, #1
 8006860:	d03a      	beq.n	80068d8 <UART_SetConfig+0x3a0>
 8006862:	2b02      	cmp	r3, #2
 8006864:	d03b      	beq.n	80068de <UART_SetConfig+0x3a6>
 8006866:	2b03      	cmp	r3, #3
 8006868:	d03c      	beq.n	80068e4 <UART_SetConfig+0x3ac>
 800686a:	2b04      	cmp	r3, #4
 800686c:	d03d      	beq.n	80068ea <UART_SetConfig+0x3b2>
 800686e:	2b05      	cmp	r3, #5
 8006870:	d03e      	beq.n	80068f0 <UART_SetConfig+0x3b8>
 8006872:	2b06      	cmp	r3, #6
 8006874:	d03f      	beq.n	80068f6 <UART_SetConfig+0x3be>
 8006876:	2b07      	cmp	r3, #7
 8006878:	d040      	beq.n	80068fc <UART_SetConfig+0x3c4>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d041      	beq.n	8006902 <UART_SetConfig+0x3ca>
 800687e:	2b09      	cmp	r3, #9
 8006880:	d042      	beq.n	8006908 <UART_SetConfig+0x3d0>
 8006882:	2b0a      	cmp	r3, #10
 8006884:	d043      	beq.n	800690e <UART_SetConfig+0x3d6>
 8006886:	2b0b      	cmp	r3, #11
 8006888:	d002      	beq.n	8006890 <UART_SetConfig+0x358>
 800688a:	2201      	movs	r2, #1
 800688c:	2300      	movs	r3, #0
 800688e:	e005      	b.n	800689c <UART_SetConfig+0x364>
 8006890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006894:	2300      	movs	r3, #0
 8006896:	e001      	b.n	800689c <UART_SetConfig+0x364>
 8006898:	2201      	movs	r2, #1
 800689a:	2300      	movs	r3, #0
 800689c:	2100      	movs	r1, #0
 800689e:	f7f9 fc79 	bl	8000194 <__aeabi_uldivmod>
 80068a2:	020f      	lsls	r7, r1, #8
 80068a4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80068a8:	0206      	lsls	r6, r0, #8
 80068aa:	6862      	ldr	r2, [r4, #4]
 80068ac:	0850      	lsrs	r0, r2, #1
 80068ae:	2500      	movs	r5, #0
 80068b0:	462b      	mov	r3, r5
 80068b2:	eb16 0b00 	adds.w	fp, r6, r0
 80068b6:	f147 0c00 	adc.w	ip, r7, #0
 80068ba:	4658      	mov	r0, fp
 80068bc:	4661      	mov	r1, ip
 80068be:	f7f9 fc69 	bl	8000194 <__aeabi_uldivmod>
 80068c2:	4603      	mov	r3, r0
            break;
 80068c4:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068c6:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 80068ca:	4a7f      	ldr	r2, [pc, #508]	; (8006ac8 <UART_SetConfig+0x590>)
 80068cc:	4291      	cmp	r1, r2
 80068ce:	f200 83cf 	bhi.w	8007070 <UART_SetConfig+0xb38>
          huart->Instance->BRR = usartdiv;
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	60d3      	str	r3, [r2, #12]
 80068d6:	e2c3      	b.n	8006e60 <UART_SetConfig+0x928>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d8:	2202      	movs	r2, #2
 80068da:	2300      	movs	r3, #0
 80068dc:	e7de      	b.n	800689c <UART_SetConfig+0x364>
 80068de:	2204      	movs	r2, #4
 80068e0:	2300      	movs	r3, #0
 80068e2:	e7db      	b.n	800689c <UART_SetConfig+0x364>
 80068e4:	2206      	movs	r2, #6
 80068e6:	2300      	movs	r3, #0
 80068e8:	e7d8      	b.n	800689c <UART_SetConfig+0x364>
 80068ea:	2208      	movs	r2, #8
 80068ec:	2300      	movs	r3, #0
 80068ee:	e7d5      	b.n	800689c <UART_SetConfig+0x364>
 80068f0:	220a      	movs	r2, #10
 80068f2:	2300      	movs	r3, #0
 80068f4:	e7d2      	b.n	800689c <UART_SetConfig+0x364>
 80068f6:	220c      	movs	r2, #12
 80068f8:	2300      	movs	r3, #0
 80068fa:	e7cf      	b.n	800689c <UART_SetConfig+0x364>
 80068fc:	2210      	movs	r2, #16
 80068fe:	2300      	movs	r3, #0
 8006900:	e7cc      	b.n	800689c <UART_SetConfig+0x364>
 8006902:	2220      	movs	r2, #32
 8006904:	2300      	movs	r3, #0
 8006906:	e7c9      	b.n	800689c <UART_SetConfig+0x364>
 8006908:	2240      	movs	r2, #64	; 0x40
 800690a:	2300      	movs	r3, #0
 800690c:	e7c6      	b.n	800689c <UART_SetConfig+0x364>
 800690e:	2280      	movs	r2, #128	; 0x80
 8006910:	2300      	movs	r3, #0
 8006912:	e7c3      	b.n	800689c <UART_SetConfig+0x364>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006916:	b1fb      	cbz	r3, 8006958 <UART_SetConfig+0x420>
 8006918:	2b01      	cmp	r3, #1
 800691a:	d02d      	beq.n	8006978 <UART_SetConfig+0x440>
 800691c:	2b02      	cmp	r3, #2
 800691e:	d030      	beq.n	8006982 <UART_SetConfig+0x44a>
 8006920:	2b03      	cmp	r3, #3
 8006922:	d033      	beq.n	800698c <UART_SetConfig+0x454>
 8006924:	2b04      	cmp	r3, #4
 8006926:	d036      	beq.n	8006996 <UART_SetConfig+0x45e>
 8006928:	2b05      	cmp	r3, #5
 800692a:	d039      	beq.n	80069a0 <UART_SetConfig+0x468>
 800692c:	2b06      	cmp	r3, #6
 800692e:	d03c      	beq.n	80069aa <UART_SetConfig+0x472>
 8006930:	2b07      	cmp	r3, #7
 8006932:	d03f      	beq.n	80069b4 <UART_SetConfig+0x47c>
 8006934:	2b08      	cmp	r3, #8
 8006936:	d042      	beq.n	80069be <UART_SetConfig+0x486>
 8006938:	2b09      	cmp	r3, #9
 800693a:	d045      	beq.n	80069c8 <UART_SetConfig+0x490>
 800693c:	2b0a      	cmp	r3, #10
 800693e:	d048      	beq.n	80069d2 <UART_SetConfig+0x49a>
 8006940:	2b0b      	cmp	r3, #11
 8006942:	d004      	beq.n	800694e <UART_SetConfig+0x416>
 8006944:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006acc <UART_SetConfig+0x594>
 8006948:	f04f 0c00 	mov.w	ip, #0
 800694c:	e008      	b.n	8006960 <UART_SetConfig+0x428>
 800694e:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006ad0 <UART_SetConfig+0x598>
 8006952:	f04f 0c00 	mov.w	ip, #0
 8006956:	e003      	b.n	8006960 <UART_SetConfig+0x428>
 8006958:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006acc <UART_SetConfig+0x594>
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	0856      	lsrs	r6, r2, #1
 8006962:	2500      	movs	r5, #0
 8006964:	462b      	mov	r3, r5
 8006966:	eb1b 0006 	adds.w	r0, fp, r6
 800696a:	f14c 0100 	adc.w	r1, ip, #0
 800696e:	f7f9 fc11 	bl	8000194 <__aeabi_uldivmod>
 8006972:	4603      	mov	r3, r0
            break;
 8006974:	4628      	mov	r0, r5
 8006976:	e7a6      	b.n	80068c6 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006978:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006ad4 <UART_SetConfig+0x59c>
 800697c:	f04f 0c00 	mov.w	ip, #0
 8006980:	e7ee      	b.n	8006960 <UART_SetConfig+0x428>
 8006982:	f8df b154 	ldr.w	fp, [pc, #340]	; 8006ad8 <UART_SetConfig+0x5a0>
 8006986:	f04f 0c00 	mov.w	ip, #0
 800698a:	e7e9      	b.n	8006960 <UART_SetConfig+0x428>
 800698c:	f20f 1c00 	addw	ip, pc, #256	; 0x100
 8006990:	e9dc bc00 	ldrd	fp, ip, [ip]
 8006994:	e7e4      	b.n	8006960 <UART_SetConfig+0x428>
 8006996:	f8df b144 	ldr.w	fp, [pc, #324]	; 8006adc <UART_SetConfig+0x5a4>
 800699a:	f04f 0c00 	mov.w	ip, #0
 800699e:	e7df      	b.n	8006960 <UART_SetConfig+0x428>
 80069a0:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8006ae0 <UART_SetConfig+0x5a8>
 80069a4:	f04f 0c00 	mov.w	ip, #0
 80069a8:	e7da      	b.n	8006960 <UART_SetConfig+0x428>
 80069aa:	f20f 0cec 	addw	ip, pc, #236	; 0xec
 80069ae:	e9dc bc00 	ldrd	fp, ip, [ip]
 80069b2:	e7d5      	b.n	8006960 <UART_SetConfig+0x428>
 80069b4:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006ae4 <UART_SetConfig+0x5ac>
 80069b8:	f04f 0c00 	mov.w	ip, #0
 80069bc:	e7d0      	b.n	8006960 <UART_SetConfig+0x428>
 80069be:	f8df b128 	ldr.w	fp, [pc, #296]	; 8006ae8 <UART_SetConfig+0x5b0>
 80069c2:	f04f 0c00 	mov.w	ip, #0
 80069c6:	e7cb      	b.n	8006960 <UART_SetConfig+0x428>
 80069c8:	f8df b120 	ldr.w	fp, [pc, #288]	; 8006aec <UART_SetConfig+0x5b4>
 80069cc:	f04f 0c00 	mov.w	ip, #0
 80069d0:	e7c6      	b.n	8006960 <UART_SetConfig+0x428>
 80069d2:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8006af0 <UART_SetConfig+0x5b8>
 80069d6:	f04f 0c00 	mov.w	ip, #0
 80069da:	e7c1      	b.n	8006960 <UART_SetConfig+0x428>
            pclk = HAL_RCC_GetSysClockFreq();
 80069dc:	f7fe fa48 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e2:	b1e3      	cbz	r3, 8006a1e <UART_SetConfig+0x4e6>
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d032      	beq.n	8006a4e <UART_SetConfig+0x516>
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d033      	beq.n	8006a54 <UART_SetConfig+0x51c>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d034      	beq.n	8006a5a <UART_SetConfig+0x522>
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d035      	beq.n	8006a60 <UART_SetConfig+0x528>
 80069f4:	2b05      	cmp	r3, #5
 80069f6:	d036      	beq.n	8006a66 <UART_SetConfig+0x52e>
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d037      	beq.n	8006a6c <UART_SetConfig+0x534>
 80069fc:	2b07      	cmp	r3, #7
 80069fe:	d038      	beq.n	8006a72 <UART_SetConfig+0x53a>
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d039      	beq.n	8006a78 <UART_SetConfig+0x540>
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d03a      	beq.n	8006a7e <UART_SetConfig+0x546>
 8006a08:	2b0a      	cmp	r3, #10
 8006a0a:	d03b      	beq.n	8006a84 <UART_SetConfig+0x54c>
 8006a0c:	2b0b      	cmp	r3, #11
 8006a0e:	d002      	beq.n	8006a16 <UART_SetConfig+0x4de>
 8006a10:	2201      	movs	r2, #1
 8006a12:	2300      	movs	r3, #0
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e001      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a1e:	2201      	movs	r2, #1
 8006a20:	2300      	movs	r3, #0
 8006a22:	2100      	movs	r1, #0
 8006a24:	f7f9 fbb6 	bl	8000194 <__aeabi_uldivmod>
 8006a28:	020f      	lsls	r7, r1, #8
 8006a2a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006a2e:	0206      	lsls	r6, r0, #8
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	0850      	lsrs	r0, r2, #1
 8006a34:	2500      	movs	r5, #0
 8006a36:	462b      	mov	r3, r5
 8006a38:	eb16 0b00 	adds.w	fp, r6, r0
 8006a3c:	f147 0c00 	adc.w	ip, r7, #0
 8006a40:	4658      	mov	r0, fp
 8006a42:	4661      	mov	r1, ip
 8006a44:	f7f9 fba6 	bl	8000194 <__aeabi_uldivmod>
 8006a48:	4603      	mov	r3, r0
            break;
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	e73b      	b.n	80068c6 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a4e:	2202      	movs	r2, #2
 8006a50:	2300      	movs	r3, #0
 8006a52:	e7e6      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a54:	2204      	movs	r2, #4
 8006a56:	2300      	movs	r3, #0
 8006a58:	e7e3      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e7e0      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a60:	2208      	movs	r2, #8
 8006a62:	2300      	movs	r3, #0
 8006a64:	e7dd      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a66:	220a      	movs	r2, #10
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e7da      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a6c:	220c      	movs	r2, #12
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e7d7      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a72:	2210      	movs	r2, #16
 8006a74:	2300      	movs	r3, #0
 8006a76:	e7d4      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a78:	2220      	movs	r2, #32
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e7d1      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	2300      	movs	r3, #0
 8006a82:	e7ce      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a84:	2280      	movs	r2, #128	; 0x80
 8006a86:	2300      	movs	r3, #0
 8006a88:	e7cb      	b.n	8006a22 <UART_SetConfig+0x4ea>
 8006a8a:	bf00      	nop
 8006a8c:	f3af 8000 	nop.w
 8006a90:	28b0aa00 	.word	0x28b0aa00
 8006a94:	00000000 	.word	0x00000000
 8006a98:	14585500 	.word	0x14585500
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	007a1200 	.word	0x007a1200
 8006aa4:	003d0900 	.word	0x003d0900
 8006aa8:	0028b0aa 	.word	0x0028b0aa
 8006aac:	001e8480 	.word	0x001e8480
 8006ab0:	00186a00 	.word	0x00186a00
 8006ab4:	00145855 	.word	0x00145855
 8006ab8:	000f4240 	.word	0x000f4240
 8006abc:	0007a120 	.word	0x0007a120
 8006ac0:	0003d090 	.word	0x0003d090
 8006ac4:	0001e848 	.word	0x0001e848
 8006ac8:	000ffcff 	.word	0x000ffcff
 8006acc:	f4240000 	.word	0xf4240000
 8006ad0:	00f42400 	.word	0x00f42400
 8006ad4:	7a120000 	.word	0x7a120000
 8006ad8:	3d090000 	.word	0x3d090000
 8006adc:	1e848000 	.word	0x1e848000
 8006ae0:	186a0000 	.word	0x186a0000
 8006ae4:	0f424000 	.word	0x0f424000
 8006ae8:	07a12000 	.word	0x07a12000
 8006aec:	03d09000 	.word	0x03d09000
 8006af0:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af6:	b1fb      	cbz	r3, 8006b38 <UART_SetConfig+0x600>
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d02d      	beq.n	8006b58 <UART_SetConfig+0x620>
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d030      	beq.n	8006b62 <UART_SetConfig+0x62a>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d033      	beq.n	8006b6c <UART_SetConfig+0x634>
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d036      	beq.n	8006b76 <UART_SetConfig+0x63e>
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d039      	beq.n	8006b80 <UART_SetConfig+0x648>
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d03c      	beq.n	8006b8a <UART_SetConfig+0x652>
 8006b10:	2b07      	cmp	r3, #7
 8006b12:	d03f      	beq.n	8006b94 <UART_SetConfig+0x65c>
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d042      	beq.n	8006b9e <UART_SetConfig+0x666>
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d045      	beq.n	8006ba8 <UART_SetConfig+0x670>
 8006b1c:	2b0a      	cmp	r3, #10
 8006b1e:	d048      	beq.n	8006bb2 <UART_SetConfig+0x67a>
 8006b20:	2b0b      	cmp	r3, #11
 8006b22:	d004      	beq.n	8006b2e <UART_SetConfig+0x5f6>
 8006b24:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8006b28:	f04f 0c00 	mov.w	ip, #0
 8006b2c:	e008      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b2e:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	e003      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b38:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8006b3c:	f04f 0c00 	mov.w	ip, #0
 8006b40:	0856      	lsrs	r6, r2, #1
 8006b42:	2500      	movs	r5, #0
 8006b44:	462b      	mov	r3, r5
 8006b46:	eb1b 0006 	adds.w	r0, fp, r6
 8006b4a:	f14c 0100 	adc.w	r1, ip, #0
 8006b4e:	f7f9 fb21 	bl	8000194 <__aeabi_uldivmod>
 8006b52:	4603      	mov	r3, r0
            break;
 8006b54:	4628      	mov	r0, r5
 8006b56:	e6b6      	b.n	80068c6 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b58:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8006b5c:	f04f 0c00 	mov.w	ip, #0
 8006b60:	e7ee      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b62:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8006b66:	f04f 0c00 	mov.w	ip, #0
 8006b6a:	e7e9      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b6c:	f8df b3d8 	ldr.w	fp, [pc, #984]	; 8006f48 <UART_SetConfig+0xa10>
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	e7e4      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b76:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8006b7a:	f04f 0c00 	mov.w	ip, #0
 8006b7e:	e7df      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b80:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 8006f4c <UART_SetConfig+0xa14>
 8006b84:	f04f 0c00 	mov.w	ip, #0
 8006b88:	e7da      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b8a:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 8006f50 <UART_SetConfig+0xa18>
 8006b8e:	f04f 0c00 	mov.w	ip, #0
 8006b92:	e7d5      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b94:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8006b98:	f04f 0c00 	mov.w	ip, #0
 8006b9c:	e7d0      	b.n	8006b40 <UART_SetConfig+0x608>
 8006b9e:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8006ba2:	f04f 0c00 	mov.w	ip, #0
 8006ba6:	e7cb      	b.n	8006b40 <UART_SetConfig+0x608>
 8006ba8:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	e7c6      	b.n	8006b40 <UART_SetConfig+0x608>
 8006bb2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8006bb6:	f04f 0c00 	mov.w	ip, #0
 8006bba:	e7c1      	b.n	8006b40 <UART_SetConfig+0x608>
            ret = HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e681      	b.n	80068c6 <UART_SetConfig+0x38e>
    switch (clocksource)
 8006bc2:	3d01      	subs	r5, #1
 8006bc4:	2d07      	cmp	r5, #7
 8006bc6:	f200 8116 	bhi.w	8006df6 <UART_SetConfig+0x8be>
 8006bca:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006bce:	0008      	.short	0x0008
 8006bd0:	01140056 	.word	0x01140056
 8006bd4:	0114008f 	.word	0x0114008f
 8006bd8:	01140114 	.word	0x01140114
 8006bdc:	00ce      	.short	0x00ce
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bde:	f7fe f9c7 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be4:	b1d3      	cbz	r3, 8006c1c <UART_SetConfig+0x6e4>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d033      	beq.n	8006c52 <UART_SetConfig+0x71a>
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d033      	beq.n	8006c56 <UART_SetConfig+0x71e>
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d033      	beq.n	8006c5a <UART_SetConfig+0x722>
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d033      	beq.n	8006c5e <UART_SetConfig+0x726>
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d033      	beq.n	8006c62 <UART_SetConfig+0x72a>
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d033      	beq.n	8006c66 <UART_SetConfig+0x72e>
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d033      	beq.n	8006c6a <UART_SetConfig+0x732>
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d033      	beq.n	8006c6e <UART_SetConfig+0x736>
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d033      	beq.n	8006c72 <UART_SetConfig+0x73a>
 8006c0a:	2b0a      	cmp	r3, #10
 8006c0c:	d033      	beq.n	8006c76 <UART_SetConfig+0x73e>
 8006c0e:	2b0b      	cmp	r3, #11
 8006c10:	d001      	beq.n	8006c16 <UART_SetConfig+0x6de>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e003      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c1a:	e000      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c22:	6862      	ldr	r2, [r4, #4]
 8006c24:	0853      	lsrs	r3, r2, #1
 8006c26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c30:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c32:	f1a3 0110 	sub.w	r1, r3, #16
 8006c36:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	f200 821a 	bhi.w	8007074 <UART_SetConfig+0xb3c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c46:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006c4a:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	60d3      	str	r3, [r2, #12]
 8006c50:	e106      	b.n	8006e60 <UART_SetConfig+0x928>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	2302      	movs	r3, #2
 8006c54:	e7e3      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c56:	2304      	movs	r3, #4
 8006c58:	e7e1      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c5a:	2306      	movs	r3, #6
 8006c5c:	e7df      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c5e:	2308      	movs	r3, #8
 8006c60:	e7dd      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c62:	230a      	movs	r3, #10
 8006c64:	e7db      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c66:	230c      	movs	r3, #12
 8006c68:	e7d9      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	e7d7      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c6e:	2320      	movs	r3, #32
 8006c70:	e7d5      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	e7d3      	b.n	8006c1e <UART_SetConfig+0x6e6>
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	e7d1      	b.n	8006c1e <UART_SetConfig+0x6e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c7c:	b1cb      	cbz	r3, 8006cb2 <UART_SetConfig+0x77a>
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d020      	beq.n	8006cc4 <UART_SetConfig+0x78c>
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d020      	beq.n	8006cc8 <UART_SetConfig+0x790>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d020      	beq.n	8006ccc <UART_SetConfig+0x794>
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d020      	beq.n	8006cd0 <UART_SetConfig+0x798>
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d020      	beq.n	8006cd4 <UART_SetConfig+0x79c>
 8006c92:	2b06      	cmp	r3, #6
 8006c94:	d020      	beq.n	8006cd8 <UART_SetConfig+0x7a0>
 8006c96:	2b07      	cmp	r3, #7
 8006c98:	d020      	beq.n	8006cdc <UART_SetConfig+0x7a4>
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d020      	beq.n	8006ce0 <UART_SetConfig+0x7a8>
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	d020      	beq.n	8006ce4 <UART_SetConfig+0x7ac>
 8006ca2:	2b0a      	cmp	r3, #10
 8006ca4:	d020      	beq.n	8006ce8 <UART_SetConfig+0x7b0>
 8006ca6:	2b0b      	cmp	r3, #11
 8006ca8:	d001      	beq.n	8006cae <UART_SetConfig+0x776>
 8006caa:	4b99      	ldr	r3, [pc, #612]	; (8006f10 <UART_SetConfig+0x9d8>)
 8006cac:	e002      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cae:	4b99      	ldr	r3, [pc, #612]	; (8006f14 <UART_SetConfig+0x9dc>)
 8006cb0:	e000      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cb2:	4b97      	ldr	r3, [pc, #604]	; (8006f10 <UART_SetConfig+0x9d8>)
 8006cb4:	6862      	ldr	r2, [r4, #4]
 8006cb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cbe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cc0:	2000      	movs	r0, #0
        break;
 8006cc2:	e7b6      	b.n	8006c32 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc4:	4b94      	ldr	r3, [pc, #592]	; (8006f18 <UART_SetConfig+0x9e0>)
 8006cc6:	e7f5      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cc8:	4b94      	ldr	r3, [pc, #592]	; (8006f1c <UART_SetConfig+0x9e4>)
 8006cca:	e7f3      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006ccc:	4b94      	ldr	r3, [pc, #592]	; (8006f20 <UART_SetConfig+0x9e8>)
 8006cce:	e7f1      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cd0:	4b94      	ldr	r3, [pc, #592]	; (8006f24 <UART_SetConfig+0x9ec>)
 8006cd2:	e7ef      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cd4:	4b94      	ldr	r3, [pc, #592]	; (8006f28 <UART_SetConfig+0x9f0>)
 8006cd6:	e7ed      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cd8:	4b94      	ldr	r3, [pc, #592]	; (8006f2c <UART_SetConfig+0x9f4>)
 8006cda:	e7eb      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006cdc:	4b94      	ldr	r3, [pc, #592]	; (8006f30 <UART_SetConfig+0x9f8>)
 8006cde:	e7e9      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006ce0:	4b94      	ldr	r3, [pc, #592]	; (8006f34 <UART_SetConfig+0x9fc>)
 8006ce2:	e7e7      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006ce4:	4b94      	ldr	r3, [pc, #592]	; (8006f38 <UART_SetConfig+0xa00>)
 8006ce6:	e7e5      	b.n	8006cb4 <UART_SetConfig+0x77c>
 8006ce8:	4b94      	ldr	r3, [pc, #592]	; (8006f3c <UART_SetConfig+0xa04>)
 8006cea:	e7e3      	b.n	8006cb4 <UART_SetConfig+0x77c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006cec:	f7fe f8c0 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	b1d3      	cbz	r3, 8006d2a <UART_SetConfig+0x7f2>
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d024      	beq.n	8006d42 <UART_SetConfig+0x80a>
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d024      	beq.n	8006d46 <UART_SetConfig+0x80e>
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d024      	beq.n	8006d4a <UART_SetConfig+0x812>
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d024      	beq.n	8006d4e <UART_SetConfig+0x816>
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d024      	beq.n	8006d52 <UART_SetConfig+0x81a>
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d024      	beq.n	8006d56 <UART_SetConfig+0x81e>
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	d024      	beq.n	8006d5a <UART_SetConfig+0x822>
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d024      	beq.n	8006d5e <UART_SetConfig+0x826>
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d024      	beq.n	8006d62 <UART_SetConfig+0x82a>
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d024      	beq.n	8006d66 <UART_SetConfig+0x82e>
 8006d1c:	2b0b      	cmp	r3, #11
 8006d1e:	d001      	beq.n	8006d24 <UART_SetConfig+0x7ec>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e003      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d28:	e000      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	0853      	lsrs	r3, r2, #1
 8006d34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d3c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d3e:	2000      	movs	r0, #0
        break;
 8006d40:	e777      	b.n	8006c32 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d42:	2302      	movs	r3, #2
 8006d44:	e7f2      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d46:	2304      	movs	r3, #4
 8006d48:	e7f0      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d4a:	2306      	movs	r3, #6
 8006d4c:	e7ee      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d4e:	2308      	movs	r3, #8
 8006d50:	e7ec      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d52:	230a      	movs	r3, #10
 8006d54:	e7ea      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d56:	230c      	movs	r3, #12
 8006d58:	e7e8      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	e7e6      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d5e:	2320      	movs	r3, #32
 8006d60:	e7e4      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	e7e2      	b.n	8006d2c <UART_SetConfig+0x7f4>
 8006d66:	2380      	movs	r3, #128	; 0x80
 8006d68:	e7e0      	b.n	8006d2c <UART_SetConfig+0x7f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6c:	b1db      	cbz	r3, 8006da6 <UART_SetConfig+0x86e>
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d023      	beq.n	8006dba <UART_SetConfig+0x882>
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d024      	beq.n	8006dc0 <UART_SetConfig+0x888>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d025      	beq.n	8006dc6 <UART_SetConfig+0x88e>
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d026      	beq.n	8006dcc <UART_SetConfig+0x894>
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d027      	beq.n	8006dd2 <UART_SetConfig+0x89a>
 8006d82:	2b06      	cmp	r3, #6
 8006d84:	d028      	beq.n	8006dd8 <UART_SetConfig+0x8a0>
 8006d86:	2b07      	cmp	r3, #7
 8006d88:	d029      	beq.n	8006dde <UART_SetConfig+0x8a6>
 8006d8a:	2b08      	cmp	r3, #8
 8006d8c:	d02a      	beq.n	8006de4 <UART_SetConfig+0x8ac>
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d02b      	beq.n	8006dea <UART_SetConfig+0x8b2>
 8006d92:	2b0a      	cmp	r3, #10
 8006d94:	d02c      	beq.n	8006df0 <UART_SetConfig+0x8b8>
 8006d96:	2b0b      	cmp	r3, #11
 8006d98:	d002      	beq.n	8006da0 <UART_SetConfig+0x868>
 8006d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d9e:	e004      	b.n	8006daa <UART_SetConfig+0x872>
 8006da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006da4:	e001      	b.n	8006daa <UART_SetConfig+0x872>
 8006da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006daa:	6862      	ldr	r2, [r4, #4]
 8006dac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db6:	2000      	movs	r0, #0
        break;
 8006db8:	e73b      	b.n	8006c32 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	e7f4      	b.n	8006daa <UART_SetConfig+0x872>
 8006dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc4:	e7f1      	b.n	8006daa <UART_SetConfig+0x872>
 8006dc6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006dca:	e7ee      	b.n	8006daa <UART_SetConfig+0x872>
 8006dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dd0:	e7eb      	b.n	8006daa <UART_SetConfig+0x872>
 8006dd2:	f641 1398 	movw	r3, #6552	; 0x1998
 8006dd6:	e7e8      	b.n	8006daa <UART_SetConfig+0x872>
 8006dd8:	f241 5354 	movw	r3, #5460	; 0x1554
 8006ddc:	e7e5      	b.n	8006daa <UART_SetConfig+0x872>
 8006dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de2:	e7e2      	b.n	8006daa <UART_SetConfig+0x872>
 8006de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006de8:	e7df      	b.n	8006daa <UART_SetConfig+0x872>
 8006dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dee:	e7dc      	b.n	8006daa <UART_SetConfig+0x872>
 8006df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df4:	e7d9      	b.n	8006daa <UART_SetConfig+0x872>
        ret = HAL_ERROR;
 8006df6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e71a      	b.n	8006c32 <UART_SetConfig+0x6fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dfc:	f7fe f8b8 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e02:	b1d3      	cbz	r3, 8006e3a <UART_SetConfig+0x902>
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d035      	beq.n	8006e74 <UART_SetConfig+0x93c>
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d035      	beq.n	8006e78 <UART_SetConfig+0x940>
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d035      	beq.n	8006e7c <UART_SetConfig+0x944>
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d035      	beq.n	8006e80 <UART_SetConfig+0x948>
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d035      	beq.n	8006e84 <UART_SetConfig+0x94c>
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	d035      	beq.n	8006e88 <UART_SetConfig+0x950>
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	d035      	beq.n	8006e8c <UART_SetConfig+0x954>
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d035      	beq.n	8006e90 <UART_SetConfig+0x958>
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d035      	beq.n	8006e94 <UART_SetConfig+0x95c>
 8006e28:	2b0a      	cmp	r3, #10
 8006e2a:	d035      	beq.n	8006e98 <UART_SetConfig+0x960>
 8006e2c:	2b0b      	cmp	r3, #11
 8006e2e:	d001      	beq.n	8006e34 <UART_SetConfig+0x8fc>
 8006e30:	2201      	movs	r2, #1
 8006e32:	e003      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e38:	e000      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	fbb0 f2f2 	udiv	r2, r0, r2
 8006e40:	6863      	ldr	r3, [r4, #4]
 8006e42:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8006e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e4a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e4c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4e:	f1a2 0110 	sub.w	r1, r2, #16
 8006e52:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006e56:	4299      	cmp	r1, r3
 8006e58:	f200 810e 	bhi.w	8007078 <UART_SetConfig+0xb40>
      huart->Instance->BRR = usartdiv;
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	60da      	str	r2, [r3, #12]
  huart->NbTxDataToProcess = 1;
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e66:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006e6e:	6722      	str	r2, [r4, #112]	; 0x70
}
 8006e70:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e74:	2202      	movs	r2, #2
 8006e76:	e7e1      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e78:	2204      	movs	r2, #4
 8006e7a:	e7df      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e7c:	2206      	movs	r2, #6
 8006e7e:	e7dd      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e80:	2208      	movs	r2, #8
 8006e82:	e7db      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e84:	220a      	movs	r2, #10
 8006e86:	e7d9      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e88:	220c      	movs	r2, #12
 8006e8a:	e7d7      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	e7d5      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e90:	2220      	movs	r2, #32
 8006e92:	e7d3      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e94:	2240      	movs	r2, #64	; 0x40
 8006e96:	e7d1      	b.n	8006e3c <UART_SetConfig+0x904>
 8006e98:	2280      	movs	r2, #128	; 0x80
 8006e9a:	e7cf      	b.n	8006e3c <UART_SetConfig+0x904>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9e:	b1d3      	cbz	r3, 8006ed6 <UART_SetConfig+0x99e>
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d021      	beq.n	8006ee8 <UART_SetConfig+0x9b0>
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d021      	beq.n	8006eec <UART_SetConfig+0x9b4>
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d021      	beq.n	8006ef0 <UART_SetConfig+0x9b8>
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d021      	beq.n	8006ef4 <UART_SetConfig+0x9bc>
 8006eb0:	2b05      	cmp	r3, #5
 8006eb2:	d021      	beq.n	8006ef8 <UART_SetConfig+0x9c0>
 8006eb4:	2b06      	cmp	r3, #6
 8006eb6:	d021      	beq.n	8006efc <UART_SetConfig+0x9c4>
 8006eb8:	2b07      	cmp	r3, #7
 8006eba:	d021      	beq.n	8006f00 <UART_SetConfig+0x9c8>
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d021      	beq.n	8006f04 <UART_SetConfig+0x9cc>
 8006ec0:	2b09      	cmp	r3, #9
 8006ec2:	d021      	beq.n	8006f08 <UART_SetConfig+0x9d0>
 8006ec4:	2b0a      	cmp	r3, #10
 8006ec6:	d021      	beq.n	8006f0c <UART_SetConfig+0x9d4>
 8006ec8:	2b0b      	cmp	r3, #11
 8006eca:	d001      	beq.n	8006ed0 <UART_SetConfig+0x998>
 8006ecc:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <UART_SetConfig+0x9e0>)
 8006ece:	e003      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006ed0:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006ed4:	e000      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006ed6:	4a10      	ldr	r2, [pc, #64]	; (8006f18 <UART_SetConfig+0x9e0>)
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8006ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ee2:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ee4:	2000      	movs	r0, #0
        break;
 8006ee6:	e7b2      	b.n	8006e4e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ee8:	4a0c      	ldr	r2, [pc, #48]	; (8006f1c <UART_SetConfig+0x9e4>)
 8006eea:	e7f5      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <UART_SetConfig+0x9ec>)
 8006eee:	e7f3      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006ef0:	4a0e      	ldr	r2, [pc, #56]	; (8006f2c <UART_SetConfig+0x9f4>)
 8006ef2:	e7f1      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <UART_SetConfig+0x9f8>)
 8006ef6:	e7ef      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006ef8:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <UART_SetConfig+0xa08>)
 8006efa:	e7ed      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006efc:	4a11      	ldr	r2, [pc, #68]	; (8006f44 <UART_SetConfig+0xa0c>)
 8006efe:	e7eb      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006f00:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <UART_SetConfig+0x9fc>)
 8006f02:	e7e9      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006f04:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <UART_SetConfig+0xa00>)
 8006f06:	e7e7      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006f08:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <UART_SetConfig+0xa04>)
 8006f0a:	e7e5      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006f0c:	4a01      	ldr	r2, [pc, #4]	; (8006f14 <UART_SetConfig+0x9dc>)
 8006f0e:	e7e3      	b.n	8006ed8 <UART_SetConfig+0x9a0>
 8006f10:	01e84800 	.word	0x01e84800
 8006f14:	0001e848 	.word	0x0001e848
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	007a1200 	.word	0x007a1200
 8006f20:	00516154 	.word	0x00516154
 8006f24:	003d0900 	.word	0x003d0900
 8006f28:	0030d400 	.word	0x0030d400
 8006f2c:	0028b0aa 	.word	0x0028b0aa
 8006f30:	001e8480 	.word	0x001e8480
 8006f34:	000f4240 	.word	0x000f4240
 8006f38:	0007a120 	.word	0x0007a120
 8006f3c:	0003d090 	.word	0x0003d090
 8006f40:	00186a00 	.word	0x00186a00
 8006f44:	00145855 	.word	0x00145855
 8006f48:	00155500 	.word	0x00155500
 8006f4c:	000ccc00 	.word	0x000ccc00
 8006f50:	000aaa00 	.word	0x000aaa00
        pclk = HAL_RCC_GetSysClockFreq();
 8006f54:	f7fd ff8c 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f5a:	b1d3      	cbz	r3, 8006f92 <UART_SetConfig+0xa5a>
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d023      	beq.n	8006fa8 <UART_SetConfig+0xa70>
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d023      	beq.n	8006fac <UART_SetConfig+0xa74>
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d023      	beq.n	8006fb0 <UART_SetConfig+0xa78>
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d023      	beq.n	8006fb4 <UART_SetConfig+0xa7c>
 8006f6c:	2b05      	cmp	r3, #5
 8006f6e:	d023      	beq.n	8006fb8 <UART_SetConfig+0xa80>
 8006f70:	2b06      	cmp	r3, #6
 8006f72:	d023      	beq.n	8006fbc <UART_SetConfig+0xa84>
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	d023      	beq.n	8006fc0 <UART_SetConfig+0xa88>
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d023      	beq.n	8006fc4 <UART_SetConfig+0xa8c>
 8006f7c:	2b09      	cmp	r3, #9
 8006f7e:	d023      	beq.n	8006fc8 <UART_SetConfig+0xa90>
 8006f80:	2b0a      	cmp	r3, #10
 8006f82:	d023      	beq.n	8006fcc <UART_SetConfig+0xa94>
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	d001      	beq.n	8006f8c <UART_SetConfig+0xa54>
 8006f88:	2201      	movs	r2, #1
 8006f8a:	e003      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f90:	e000      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006f92:	2201      	movs	r2, #1
 8006f94:	fbb0 f2f2 	udiv	r2, r0, r2
 8006f98:	6863      	ldr	r3, [r4, #4]
 8006f9a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8006f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fa2:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fa4:	2000      	movs	r0, #0
        break;
 8006fa6:	e752      	b.n	8006e4e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa8:	2202      	movs	r2, #2
 8006faa:	e7f3      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fac:	2204      	movs	r2, #4
 8006fae:	e7f1      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fb0:	2206      	movs	r2, #6
 8006fb2:	e7ef      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	e7ed      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fb8:	220a      	movs	r2, #10
 8006fba:	e7eb      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fbc:	220c      	movs	r2, #12
 8006fbe:	e7e9      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fc0:	2210      	movs	r2, #16
 8006fc2:	e7e7      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	e7e5      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fc8:	2240      	movs	r2, #64	; 0x40
 8006fca:	e7e3      	b.n	8006f94 <UART_SetConfig+0xa5c>
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	e7e1      	b.n	8006f94 <UART_SetConfig+0xa5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd2:	b1d3      	cbz	r3, 800700a <UART_SetConfig+0xad2>
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d022      	beq.n	800701e <UART_SetConfig+0xae6>
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d023      	beq.n	8007024 <UART_SetConfig+0xaec>
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d024      	beq.n	800702a <UART_SetConfig+0xaf2>
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d025      	beq.n	8007030 <UART_SetConfig+0xaf8>
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d026      	beq.n	8007036 <UART_SetConfig+0xafe>
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	d027      	beq.n	800703c <UART_SetConfig+0xb04>
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	d028      	beq.n	8007042 <UART_SetConfig+0xb0a>
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d029      	beq.n	8007048 <UART_SetConfig+0xb10>
 8006ff4:	2b09      	cmp	r3, #9
 8006ff6:	d02a      	beq.n	800704e <UART_SetConfig+0xb16>
 8006ff8:	2b0a      	cmp	r3, #10
 8006ffa:	d02b      	beq.n	8007054 <UART_SetConfig+0xb1c>
 8006ffc:	2b0b      	cmp	r3, #11
 8006ffe:	d002      	beq.n	8007006 <UART_SetConfig+0xace>
 8007000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007004:	e003      	b.n	800700e <UART_SetConfig+0xad6>
 8007006:	2280      	movs	r2, #128	; 0x80
 8007008:	e001      	b.n	800700e <UART_SetConfig+0xad6>
 800700a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8007014:	fbb2 f2f3 	udiv	r2, r2, r3
 8007018:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800701a:	2000      	movs	r0, #0
        break;
 800701c:	e717      	b.n	8006e4e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800701e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007022:	e7f4      	b.n	800700e <UART_SetConfig+0xad6>
 8007024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007028:	e7f1      	b.n	800700e <UART_SetConfig+0xad6>
 800702a:	f241 5255 	movw	r2, #5461	; 0x1555
 800702e:	e7ee      	b.n	800700e <UART_SetConfig+0xad6>
 8007030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007034:	e7eb      	b.n	800700e <UART_SetConfig+0xad6>
 8007036:	f640 42cc 	movw	r2, #3276	; 0xccc
 800703a:	e7e8      	b.n	800700e <UART_SetConfig+0xad6>
 800703c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8007040:	e7e5      	b.n	800700e <UART_SetConfig+0xad6>
 8007042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007046:	e7e2      	b.n	800700e <UART_SetConfig+0xad6>
 8007048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800704c:	e7df      	b.n	800700e <UART_SetConfig+0xad6>
 800704e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007052:	e7dc      	b.n	800700e <UART_SetConfig+0xad6>
 8007054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007058:	e7d9      	b.n	800700e <UART_SetConfig+0xad6>
        ret = HAL_ERROR;
 800705a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800705c:	2200      	movs	r2, #0
 800705e:	e6f6      	b.n	8006e4e <UART_SetConfig+0x916>
        ret = HAL_ERROR;
 8007060:	2001      	movs	r0, #1
 8007062:	e6fd      	b.n	8006e60 <UART_SetConfig+0x928>
 8007064:	2000      	movs	r0, #0
 8007066:	e6fb      	b.n	8006e60 <UART_SetConfig+0x928>
        ret = HAL_ERROR;
 8007068:	2001      	movs	r0, #1
 800706a:	e6f9      	b.n	8006e60 <UART_SetConfig+0x928>
 800706c:	2001      	movs	r0, #1
 800706e:	e6f7      	b.n	8006e60 <UART_SetConfig+0x928>
          ret = HAL_ERROR;
 8007070:	2001      	movs	r0, #1
 8007072:	e6f5      	b.n	8006e60 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 8007074:	2001      	movs	r0, #1
 8007076:	e6f3      	b.n	8006e60 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 8007078:	2001      	movs	r0, #1
 800707a:	e6f1      	b.n	8006e60 <UART_SetConfig+0x928>

0800707c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800707c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800707e:	f013 0f01 	tst.w	r3, #1
 8007082:	d006      	beq.n	8007092 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007084:	6802      	ldr	r2, [r0, #0]
 8007086:	6853      	ldr	r3, [r2, #4]
 8007088:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800708c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800708e:	430b      	orrs	r3, r1
 8007090:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007092:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007094:	f013 0f02 	tst.w	r3, #2
 8007098:	d006      	beq.n	80070a8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709a:	6802      	ldr	r2, [r0, #0]
 800709c:	6853      	ldr	r3, [r2, #4]
 800709e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070aa:	f013 0f04 	tst.w	r3, #4
 80070ae:	d006      	beq.n	80070be <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	6802      	ldr	r2, [r0, #0]
 80070b2:	6853      	ldr	r3, [r2, #4]
 80070b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070c0:	f013 0f08 	tst.w	r3, #8
 80070c4:	d006      	beq.n	80070d4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070c6:	6802      	ldr	r2, [r0, #0]
 80070c8:	6853      	ldr	r3, [r2, #4]
 80070ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ce:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070d6:	f013 0f10 	tst.w	r3, #16
 80070da:	d006      	beq.n	80070ea <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070dc:	6802      	ldr	r2, [r0, #0]
 80070de:	6893      	ldr	r3, [r2, #8]
 80070e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070ec:	f013 0f20 	tst.w	r3, #32
 80070f0:	d006      	beq.n	8007100 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070f2:	6802      	ldr	r2, [r0, #0]
 80070f4:	6893      	ldr	r3, [r2, #8]
 80070f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007100:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007102:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007108:	6802      	ldr	r2, [r0, #0]
 800710a:	6853      	ldr	r3, [r2, #4]
 800710c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007110:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007112:	430b      	orrs	r3, r1
 8007114:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007116:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711c:	d00b      	beq.n	8007136 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800711e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007120:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007124:	d006      	beq.n	8007134 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007126:	6802      	ldr	r2, [r0, #0]
 8007128:	6853      	ldr	r3, [r2, #4]
 800712a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800712e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007130:	430b      	orrs	r3, r1
 8007132:	6053      	str	r3, [r2, #4]
}
 8007134:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007136:	6802      	ldr	r2, [r0, #0]
 8007138:	6853      	ldr	r3, [r2, #4]
 800713a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800713e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007140:	430b      	orrs	r3, r1
 8007142:	6053      	str	r3, [r2, #4]
 8007144:	e7eb      	b.n	800711e <UART_AdvFeatureConfig+0xa2>

08007146 <UART_WaitOnFlagUntilTimeout>:
{
 8007146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714a:	4604      	mov	r4, r0
 800714c:	460f      	mov	r7, r1
 800714e:	4616      	mov	r6, r2
 8007150:	4698      	mov	r8, r3
 8007152:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	ea37 0303 	bics.w	r3, r7, r3
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	42b3      	cmp	r3, r6
 8007164:	d13f      	bne.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 8007166:	f1b5 3fff 	cmp.w	r5, #4294967295
 800716a:	d0f3      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716c:	f7fa ffd6 	bl	800211c <HAL_GetTick>
 8007170:	eba0 0008 	sub.w	r0, r0, r8
 8007174:	42a8      	cmp	r0, r5
 8007176:	d822      	bhi.n	80071be <UART_WaitOnFlagUntilTimeout+0x78>
 8007178:	b30d      	cbz	r5, 80071be <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	f012 0f04 	tst.w	r2, #4
 8007182:	d0e7      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800718a:	d0e3      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007190:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	6813      	ldr	r3, [r2, #0]
 8007196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800719a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	6893      	ldr	r3, [r2, #8]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80071a6:	2320      	movs	r3, #32
 80071a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80071ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 80071b4:	2300      	movs	r3, #0
 80071b6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80071ba:	2003      	movs	r0, #3
 80071bc:	e014      	b.n	80071e8 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	6893      	ldr	r3, [r2, #8]
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80071d2:	2320      	movs	r3, #32
 80071d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80071d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80071dc:	2300      	movs	r3, #0
 80071de:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80071e2:	2003      	movs	r0, #3
 80071e4:	e000      	b.n	80071e8 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 80071e6:	2000      	movs	r0, #0
}
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071ec <UART_CheckIdleState>:
{
 80071ec:	b530      	push	{r4, r5, lr}
 80071ee:	b083      	sub	sp, #12
 80071f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80071f8:	f7fa ff90 	bl	800211c <HAL_GetTick>
 80071fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f013 0f08 	tst.w	r3, #8
 8007206:	d10e      	bne.n	8007226 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f013 0f04 	tst.w	r3, #4
 8007210:	d117      	bne.n	8007242 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8007212:	2320      	movs	r3, #32
 8007214:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007218:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800721c:	2000      	movs	r0, #0
 800721e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8007222:	b003      	add	sp, #12
 8007224:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	4603      	mov	r3, r0
 800722e:	2200      	movs	r2, #0
 8007230:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007234:	4620      	mov	r0, r4
 8007236:	f7ff ff86 	bl	8007146 <UART_WaitOnFlagUntilTimeout>
 800723a:	2800      	cmp	r0, #0
 800723c:	d0e4      	beq.n	8007208 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800723e:	2003      	movs	r0, #3
 8007240:	e7ef      	b.n	8007222 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	462b      	mov	r3, r5
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007250:	4620      	mov	r0, r4
 8007252:	f7ff ff78 	bl	8007146 <UART_WaitOnFlagUntilTimeout>
 8007256:	2800      	cmp	r0, #0
 8007258:	d0db      	beq.n	8007212 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800725a:	2003      	movs	r0, #3
 800725c:	e7e1      	b.n	8007222 <UART_CheckIdleState+0x36>

0800725e <HAL_UART_Init>:
  if (huart == NULL)
 800725e:	b378      	cbz	r0, 80072c0 <HAL_UART_Init+0x62>
{
 8007260:	b510      	push	{r4, lr}
 8007262:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007264:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007268:	b30b      	cbz	r3, 80072ae <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800726a:	2324      	movs	r3, #36	; 0x24
 800726c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff f95c 	bl	8006538 <UART_SetConfig>
 8007280:	2801      	cmp	r0, #1
 8007282:	d013      	beq.n	80072ac <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007286:	b9bb      	cbnz	r3, 80072b8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	6853      	ldr	r3, [r2, #4]
 800728c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007290:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	6893      	ldr	r3, [r2, #8]
 8007296:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800729a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7ff ffa0 	bl	80071ec <UART_CheckIdleState>
}
 80072ac:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80072ae:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80072b2:	f7fa fea7 	bl	8002004 <HAL_UART_MspInit>
 80072b6:	e7d8      	b.n	800726a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff fedf 	bl	800707c <UART_AdvFeatureConfig>
 80072be:	e7e3      	b.n	8007288 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80072c0:	2001      	movs	r0, #1
}
 80072c2:	4770      	bx	lr

080072c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072c4:	b410      	push	{r4}
 80072c6:	b085      	sub	sp, #20
 80072c8:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80072ca:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <UARTEx_SetNbDataToProcess+0x70>)
 80072cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80072d0:	ac04      	add	r4, sp, #16
 80072d2:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80072d6:	466c      	mov	r4, sp
 80072d8:	3308      	adds	r3, #8
 80072da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80072de:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072e2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80072e4:	b1fb      	cbz	r3, 8007326 <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072e6:	6811      	ldr	r1, [r2, #0]
 80072e8:	688b      	ldr	r3, [r1, #8]
 80072ea:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ee:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80072f0:	a904      	add	r1, sp, #16
 80072f2:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 80072f6:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 80072fa:	00c9      	lsls	r1, r1, #3
 80072fc:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8007300:	fb91 f1f0 	sdiv	r1, r1, r0
 8007304:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007308:	a904      	add	r1, sp, #16
 800730a:	440b      	add	r3, r1
 800730c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8007310:	00c9      	lsls	r1, r1, #3
 8007312:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007316:	fb91 f3f3 	sdiv	r3, r1, r3
 800731a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 800731e:	b005      	add	sp, #20
 8007320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007324:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 8007326:	2301      	movs	r3, #1
 8007328:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800732c:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8007330:	e7f5      	b.n	800731e <UARTEx_SetNbDataToProcess+0x5a>
 8007332:	bf00      	nop
 8007334:	0800be9c 	.word	0x0800be9c

08007338 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007338:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800733c:	2b01      	cmp	r3, #1
 800733e:	d018      	beq.n	8007372 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007340:	2301      	movs	r3, #1
 8007342:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8007346:	2324      	movs	r3, #36	; 0x24
 8007348:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800734c:	6803      	ldr	r3, [r0, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007350:	6819      	ldr	r1, [r3, #0]
 8007352:	f021 0101 	bic.w	r1, r1, #1
 8007356:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007358:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800735c:	2300      	movs	r3, #0
 800735e:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007360:	6801      	ldr	r1, [r0, #0]
 8007362:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007364:	2220      	movs	r2, #32
 8007366:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800736a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800736e:	4618      	mov	r0, r3
 8007370:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007372:	2002      	movs	r0, #2
}
 8007374:	4770      	bx	lr

08007376 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007376:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007378:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d01d      	beq.n	80073bc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007380:	4604      	mov	r4, r0
 8007382:	2301      	movs	r3, #1
 8007384:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8007388:	2324      	movs	r3, #36	; 0x24
 800738a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738e:	6803      	ldr	r3, [r0, #0]
 8007390:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800739a:	6802      	ldr	r2, [r0, #0]
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80073a2:	4319      	orrs	r1, r3
 80073a4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80073a6:	f7ff ff8d 	bl	80072c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	2320      	movs	r3, #32
 80073b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80073b4:	2000      	movs	r0, #0
 80073b6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80073bc:	2002      	movs	r0, #2
 80073be:	e7fc      	b.n	80073ba <HAL_UARTEx_SetTxFifoThreshold+0x44>

080073c0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80073c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80073c2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d01d      	beq.n	8007406 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80073ca:	4604      	mov	r4, r0
 80073cc:	2301      	movs	r3, #1
 80073ce:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80073d2:	2324      	movs	r3, #36	; 0x24
 80073d4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d8:	6803      	ldr	r3, [r0, #0]
 80073da:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073e4:	6802      	ldr	r2, [r0, #0]
 80073e6:	6893      	ldr	r3, [r2, #8]
 80073e8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80073ec:	4319      	orrs	r1, r3
 80073ee:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80073f0:	f7ff ff68 	bl	80072c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073f8:	2320      	movs	r3, #32
 80073fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80073fe:	2000      	movs	r0, #0
 8007400:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8007404:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007406:	2002      	movs	r0, #2
 8007408:	e7fc      	b.n	8007404 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800740c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007410:	b99b      	cbnz	r3, 800743a <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007412:	f3ef 8310 	mrs	r3, PRIMASK
 8007416:	b99b      	cbnz	r3, 8007440 <osKernelInitialize+0x34>
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <osKernelInitialize+0x40>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d005      	beq.n	800742c <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007420:	b98b      	cbnz	r3, 8007446 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <osKernelInitialize+0x40>)
 8007424:	2201      	movs	r2, #1
 8007426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007428:	2000      	movs	r0, #0
 800742a:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800742c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8007430:	2a00      	cmp	r2, #0
 8007432:	d0f5      	beq.n	8007420 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8007434:	f06f 0005 	mvn.w	r0, #5
 8007438:	4770      	bx	lr
 800743a:	f06f 0005 	mvn.w	r0, #5
 800743e:	4770      	bx	lr
 8007440:	f06f 0005 	mvn.w	r0, #5
 8007444:	4770      	bx	lr
    } else {
      stat = osError;
 8007446:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800744a:	4770      	bx	lr
 800744c:	20000c04 	.word	0x20000c04

08007450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007450:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007452:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007456:	b9b3      	cbnz	r3, 8007486 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007458:	f3ef 8310 	mrs	r3, PRIMASK
 800745c:	b9b3      	cbnz	r3, 800748c <osKernelStart+0x3c>
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <osKernelStart+0x48>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d008      	beq.n	8007478 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007466:	2b01      	cmp	r3, #1
 8007468:	d113      	bne.n	8007492 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <osKernelStart+0x48>)
 800746c:	2202      	movs	r2, #2
 800746e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007470:	f001 ff78 	bl	8009364 <vTaskStartScheduler>
      stat = osOK;
 8007474:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8007476:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007478:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 800747c:	2a00      	cmp	r2, #0
 800747e:	d0f2      	beq.n	8007466 <osKernelStart+0x16>
    stat = osErrorISR;
 8007480:	f06f 0005 	mvn.w	r0, #5
 8007484:	e7f7      	b.n	8007476 <osKernelStart+0x26>
 8007486:	f06f 0005 	mvn.w	r0, #5
 800748a:	e7f4      	b.n	8007476 <osKernelStart+0x26>
 800748c:	f06f 0005 	mvn.w	r0, #5
 8007490:	e7f1      	b.n	8007476 <osKernelStart+0x26>
      stat = osError;
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007496:	e7ee      	b.n	8007476 <osKernelStart+0x26>
 8007498:	20000c04 	.word	0x20000c04

0800749c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074a0:	2400      	movs	r4, #0
 80074a2:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80074a8:	bb4c      	cbnz	r4, 80074fe <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	bb33      	cbnz	r3, 80074fe <osThreadNew+0x62>
 80074b0:	4b33      	ldr	r3, [pc, #204]	; (8007580 <osThreadNew+0xe4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d025      	beq.n	8007504 <osThreadNew+0x68>
 80074b8:	b308      	cbz	r0, 80074fe <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80074ba:	2300      	movs	r3, #0
 80074bc:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80074c0:	b392      	cbz	r2, 8007528 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 80074c2:	6816      	ldr	r6, [r2, #0]
 80074c4:	b31e      	cbz	r6, 800750e <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80074c6:	6994      	ldr	r4, [r2, #24]
 80074c8:	b904      	cbnz	r4, 80074cc <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80074ca:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074cc:	1e63      	subs	r3, r4, #1
 80074ce:	2b37      	cmp	r3, #55	; 0x37
 80074d0:	d852      	bhi.n	8007578 <osThreadNew+0xdc>
 80074d2:	6853      	ldr	r3, [r2, #4]
 80074d4:	f013 0f01 	tst.w	r3, #1
 80074d8:	d150      	bne.n	800757c <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80074da:	6955      	ldr	r5, [r2, #20]
 80074dc:	b1d5      	cbz	r5, 8007514 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074de:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074e2:	6893      	ldr	r3, [r2, #8]
 80074e4:	b12b      	cbz	r3, 80074f2 <osThreadNew+0x56>
 80074e6:	68d7      	ldr	r7, [r2, #12]
 80074e8:	2f5b      	cmp	r7, #91	; 0x5b
 80074ea:	d902      	bls.n	80074f2 <osThreadNew+0x56>
 80074ec:	6917      	ldr	r7, [r2, #16]
 80074ee:	b107      	cbz	r7, 80074f2 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f0:	bb0d      	cbnz	r5, 8007536 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074f2:	b193      	cbz	r3, 800751a <osThreadNew+0x7e>
    mem   = -1;
 80074f4:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 80074f8:	2d01      	cmp	r5, #1
 80074fa:	d023      	beq.n	8007544 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80074fc:	b375      	cbz	r5, 800755c <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074fe:	9804      	ldr	r0, [sp, #16]
}
 8007500:	b007      	add	sp, #28
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007504:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f8      	bne.n	80074fe <osThreadNew+0x62>
 800750c:	e7d4      	b.n	80074b8 <osThreadNew+0x1c>
    name  = &empty;
 800750e:	f10d 0617 	add.w	r6, sp, #23
 8007512:	e7d8      	b.n	80074c6 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8007514:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007518:	e7e3      	b.n	80074e2 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800751a:	68d3      	ldr	r3, [r2, #12]
 800751c:	b96b      	cbnz	r3, 800753a <osThreadNew+0x9e>
 800751e:	6913      	ldr	r3, [r2, #16]
 8007520:	b173      	cbz	r3, 8007540 <osThreadNew+0xa4>
    mem   = -1;
 8007522:	f04f 35ff 	mov.w	r5, #4294967295
 8007526:	e7e7      	b.n	80074f8 <osThreadNew+0x5c>
      mem = 0;
 8007528:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800752a:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 800752c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8007530:	f10d 0617 	add.w	r6, sp, #23
 8007534:	e7e0      	b.n	80074f8 <osThreadNew+0x5c>
        mem = 1;
 8007536:	2501      	movs	r5, #1
 8007538:	e7de      	b.n	80074f8 <osThreadNew+0x5c>
    mem   = -1;
 800753a:	f04f 35ff 	mov.w	r5, #4294967295
 800753e:	e7db      	b.n	80074f8 <osThreadNew+0x5c>
          mem = 0;
 8007540:	2500      	movs	r5, #0
 8007542:	e7d9      	b.n	80074f8 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007544:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007546:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007548:	9202      	str	r2, [sp, #8]
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	9400      	str	r4, [sp, #0]
 800754e:	460b      	mov	r3, r1
 8007550:	4662      	mov	r2, ip
 8007552:	4631      	mov	r1, r6
 8007554:	f001 fe9a 	bl	800928c <xTaskCreateStatic>
 8007558:	9004      	str	r0, [sp, #16]
 800755a:	e7d0      	b.n	80074fe <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800755c:	aa04      	add	r2, sp, #16
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9400      	str	r4, [sp, #0]
 8007562:	460b      	mov	r3, r1
 8007564:	fa1f f28c 	uxth.w	r2, ip
 8007568:	4631      	mov	r1, r6
 800756a:	f001 fec8 	bl	80092fe <xTaskCreate>
 800756e:	2801      	cmp	r0, #1
 8007570:	d0c5      	beq.n	80074fe <osThreadNew+0x62>
          hTask = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	e7c2      	b.n	80074fe <osThreadNew+0x62>
        return (NULL);
 8007578:	2000      	movs	r0, #0
 800757a:	e7c1      	b.n	8007500 <osThreadNew+0x64>
 800757c:	2000      	movs	r0, #0
 800757e:	e7bf      	b.n	8007500 <osThreadNew+0x64>
 8007580:	20000c04 	.word	0x20000c04

08007584 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007588:	b370      	cbz	r0, 80075e8 <osThreadFlagsSet+0x64>
 800758a:	4605      	mov	r5, r0
 800758c:	2900      	cmp	r1, #0
 800758e:	db2b      	blt.n	80075e8 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8007590:	f04f 33ff 	mov.w	r3, #4294967295
 8007594:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007596:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 800759a:	b94b      	cbnz	r3, 80075b0 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759c:	f3ef 8310 	mrs	r3, PRIMASK
 80075a0:	b933      	cbnz	r3, 80075b0 <osThreadFlagsSet+0x2c>
 80075a2:	4b1a      	ldr	r3, [pc, #104]	; (800760c <osThreadFlagsSet+0x88>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d124      	bne.n	80075f4 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075aa:	f3ef 8311 	mrs	r3, BASEPRI
 80075ae:	b30b      	cbz	r3, 80075f4 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 80075b0:	2400      	movs	r4, #0
 80075b2:	ab04      	add	r3, sp, #16
 80075b4:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4623      	mov	r3, r4
 80075bc:	2201      	movs	r2, #1
 80075be:	4628      	mov	r0, r5
 80075c0:	f002 fba4 	bl	8009d0c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80075c4:	9400      	str	r4, [sp, #0]
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	4622      	mov	r2, r4
 80075ca:	4621      	mov	r1, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f002 fb9d 	bl	8009d0c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	b15b      	cbz	r3, 80075ee <osThreadFlagsSet+0x6a>
 80075d6:	4b0e      	ldr	r3, [pc, #56]	; (8007610 <osThreadFlagsSet+0x8c>)
 80075d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	e002      	b.n	80075ee <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 80075e8:	f06f 0303 	mvn.w	r3, #3
 80075ec:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 80075ee:	9803      	ldr	r0, [sp, #12]
 80075f0:	b005      	add	sp, #20
 80075f2:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 80075f4:	2300      	movs	r3, #0
 80075f6:	2201      	movs	r2, #1
 80075f8:	4628      	mov	r0, r5
 80075fa:	f002 fb15 	bl	8009c28 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	2200      	movs	r2, #0
 8007602:	4611      	mov	r1, r2
 8007604:	4628      	mov	r0, r5
 8007606:	f002 fb0f 	bl	8009c28 <xTaskGenericNotify>
 800760a:	e7f0      	b.n	80075ee <osThreadFlagsSet+0x6a>
 800760c:	20000c04 	.word	0x20000c04
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007618:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800761c:	bb5b      	cbnz	r3, 8007676 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761e:	f3ef 8310 	mrs	r3, PRIMASK
 8007622:	bb6b      	cbnz	r3, 8007680 <osThreadFlagsClear+0x6c>
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <osThreadFlagsClear+0x78>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d00f      	beq.n	800764c <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800762c:	2800      	cmp	r0, #0
 800762e:	db2a      	blt.n	8007686 <osThreadFlagsClear+0x72>
 8007630:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8007632:	f002 f9a5 	bl	8009980 <xTaskGetCurrentTaskHandle>
 8007636:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8007638:	ab01      	add	r3, sp, #4
 800763a:	2200      	movs	r2, #0
 800763c:	4611      	mov	r1, r2
 800763e:	f002 faf3 	bl	8009c28 <xTaskGenericNotify>
 8007642:	2801      	cmp	r0, #1
 8007644:	d009      	beq.n	800765a <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 8007646:	f04f 35ff 	mov.w	r5, #4294967295
 800764a:	e016      	b.n	800767a <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800764c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0eb      	beq.n	800762c <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 8007654:	f06f 0505 	mvn.w	r5, #5
 8007658:	e00f      	b.n	800767a <osThreadFlagsClear+0x66>
      rflags = cflags;
 800765a:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 800765c:	ea25 0104 	bic.w	r1, r5, r4
 8007660:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8007662:	2300      	movs	r3, #0
 8007664:	2203      	movs	r2, #3
 8007666:	4630      	mov	r0, r6
 8007668:	f002 fade 	bl	8009c28 <xTaskGenericNotify>
 800766c:	2801      	cmp	r0, #1
 800766e:	d004      	beq.n	800767a <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 8007670:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8007674:	e001      	b.n	800767a <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 8007676:	f06f 0505 	mvn.w	r5, #5
}
 800767a:	4628      	mov	r0, r5
 800767c:	b002      	add	sp, #8
 800767e:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8007680:	f06f 0505 	mvn.w	r5, #5
 8007684:	e7f9      	b.n	800767a <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 8007686:	f06f 0503 	mvn.w	r5, #3
 800768a:	e7f6      	b.n	800767a <osThreadFlagsClear+0x66>
 800768c:	20000c04 	.word	0x20000c04

08007690 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007696:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800769a:	2b00      	cmp	r3, #0
 800769c:	d14d      	bne.n	800773a <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769e:	f3ef 8710 	mrs	r7, PRIMASK
 80076a2:	463d      	mov	r5, r7
 80076a4:	2f00      	cmp	r7, #0
 80076a6:	d14e      	bne.n	8007746 <osThreadFlagsWait+0xb6>
 80076a8:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <osThreadFlagsWait+0xc8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d00d      	beq.n	80076cc <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80076b0:	2800      	cmp	r0, #0
 80076b2:	db4b      	blt.n	800774c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80076b4:	f011 0f02 	tst.w	r1, #2
 80076b8:	d00f      	beq.n	80076da <osThreadFlagsWait+0x4a>
      clear = 0U;
 80076ba:	46b8      	mov	r8, r7
 80076bc:	4617      	mov	r7, r2
 80076be:	468a      	mov	sl, r1
 80076c0:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 80076c2:	f001 fea1 	bl	8009408 <xTaskGetTickCount>
 80076c6:	4683      	mov	fp, r0
    tout   = timeout;
 80076c8:	463e      	mov	r6, r7
 80076ca:	e028      	b.n	800771e <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076cc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ed      	beq.n	80076b0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80076d4:	f06f 0505 	mvn.w	r5, #5
 80076d8:	e031      	b.n	800773e <osThreadFlagsWait+0xae>
      clear = flags;
 80076da:	4680      	mov	r8, r0
 80076dc:	e7ee      	b.n	80076bc <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 80076de:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80076e6:	f01a 0f01 	tst.w	sl, #1
 80076ea:	d00b      	beq.n	8007704 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 80076ec:	ea39 0305 	bics.w	r3, r9, r5
 80076f0:	d025      	beq.n	800773e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 80076f2:	b377      	cbz	r7, 8007752 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80076f4:	f001 fe88 	bl	8009408 <xTaskGetTickCount>
 80076f8:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 80076fc:	4286      	cmp	r6, r0
 80076fe:	d309      	bcc.n	8007714 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8007700:	1a36      	subs	r6, r6, r0
 8007702:	e00b      	b.n	800771c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8007704:	ea19 0f05 	tst.w	r9, r5
 8007708:	d119      	bne.n	800773e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800770a:	2f00      	cmp	r7, #0
 800770c:	d1f2      	bne.n	80076f4 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 800770e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8007712:	e014      	b.n	800773e <osThreadFlagsWait+0xae>
          tout  = 0;
 8007714:	2600      	movs	r6, #0
 8007716:	e001      	b.n	800771c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8007718:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 800771c:	b17c      	cbz	r4, 800773e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800771e:	4633      	mov	r3, r6
 8007720:	aa01      	add	r2, sp, #4
 8007722:	4641      	mov	r1, r8
 8007724:	2000      	movs	r0, #0
 8007726:	f002 fa33 	bl	8009b90 <xTaskNotifyWait>
 800772a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 800772c:	2801      	cmp	r0, #1
 800772e:	d0d6      	beq.n	80076de <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 8007730:	2f00      	cmp	r7, #0
 8007732:	d1f1      	bne.n	8007718 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8007734:	f06f 0502 	mvn.w	r5, #2
 8007738:	e7f0      	b.n	800771c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 800773a:	f06f 0505 	mvn.w	r5, #5
}
 800773e:	4628      	mov	r0, r5
 8007740:	b003      	add	sp, #12
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8007746:	f06f 0505 	mvn.w	r5, #5
 800774a:	e7f8      	b.n	800773e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 800774c:	f06f 0503 	mvn.w	r5, #3
 8007750:	e7f5      	b.n	800773e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8007752:	f06f 0502 	mvn.w	r5, #2
 8007756:	e7f2      	b.n	800773e <osThreadFlagsWait+0xae>
 8007758:	20000c04 	.word	0x20000c04

0800775c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800775c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800775e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007762:	b9a3      	cbnz	r3, 800778e <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	b9a3      	cbnz	r3, 8007794 <osDelay+0x38>
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <osDelay+0x40>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d002      	beq.n	8007778 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8007772:	b940      	cbnz	r0, 8007786 <osDelay+0x2a>
    stat = osOK;
 8007774:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007776:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007778:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f8      	beq.n	8007772 <osDelay+0x16>
    stat = osErrorISR;
 8007780:	f06f 0005 	mvn.w	r0, #5
 8007784:	e7f7      	b.n	8007776 <osDelay+0x1a>
      vTaskDelay(ticks);
 8007786:	f001 ff65 	bl	8009654 <vTaskDelay>
    stat = osOK;
 800778a:	2000      	movs	r0, #0
 800778c:	e7f3      	b.n	8007776 <osDelay+0x1a>
    stat = osErrorISR;
 800778e:	f06f 0005 	mvn.w	r0, #5
 8007792:	e7f0      	b.n	8007776 <osDelay+0x1a>
 8007794:	f06f 0005 	mvn.w	r0, #5
 8007798:	e7ed      	b.n	8007776 <osDelay+0x1a>
 800779a:	bf00      	nop
 800779c:	20000c04 	.word	0x20000c04

080077a0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80077a0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d150      	bne.n	800784c <osMutexNew+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077aa:	f3ef 8310 	mrs	r3, PRIMASK
 80077ae:	461e      	mov	r6, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d14d      	bne.n	8007850 <osMutexNew+0xb0>
 80077b4:	4a28      	ldr	r2, [pc, #160]	; (8007858 <osMutexNew+0xb8>)
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	2a02      	cmp	r2, #2
 80077ba:	d024      	beq.n	8007806 <osMutexNew+0x66>
    if (attr != NULL) {
 80077bc:	b100      	cbz	r0, 80077c0 <osMutexNew+0x20>
      type = attr->attr_bits;
 80077be:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80077c0:	f013 0f01 	tst.w	r3, #1
 80077c4:	d000      	beq.n	80077c8 <osMutexNew+0x28>
      rmtx = 1U;
 80077c6:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80077c8:	f013 0f08 	tst.w	r3, #8
 80077cc:	d142      	bne.n	8007854 <osMutexNew+0xb4>
 80077ce:	4604      	mov	r4, r0
      mem = -1;

      if (attr != NULL) {
 80077d0:	b378      	cbz	r0, 8007832 <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80077d2:	6881      	ldr	r1, [r0, #8]
 80077d4:	b111      	cbz	r1, 80077dc <osMutexNew+0x3c>
 80077d6:	68c3      	ldr	r3, [r0, #12]
 80077d8:	2b4f      	cmp	r3, #79	; 0x4f
 80077da:	d81f      	bhi.n	800781c <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077dc:	b1c9      	cbz	r1, 8007812 <osMutexNew+0x72>
      mem = -1;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 80077e2:	bb8b      	cbnz	r3, 8007848 <osMutexNew+0xa8>
          if (rmtx != 0U) {
 80077e4:	b34e      	cbz	r6, 800783a <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80077e6:	2004      	movs	r0, #4
 80077e8:	f001 f86c 	bl	80088c4 <xQueueCreateMutex>
 80077ec:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077ee:	b125      	cbz	r5, 80077fa <osMutexNew+0x5a>
        if (attr != NULL) {
 80077f0:	b344      	cbz	r4, 8007844 <osMutexNew+0xa4>
          name = attr->name;
 80077f2:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80077f4:	4628      	mov	r0, r5
 80077f6:	f001 fb51 	bl	8008e9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80077fa:	b115      	cbz	r5, 8007802 <osMutexNew+0x62>
 80077fc:	b10e      	cbz	r6, 8007802 <osMutexNew+0x62>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80077fe:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007802:	4628      	mov	r0, r5
 8007804:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007806:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 800780a:	2a00      	cmp	r2, #0
 800780c:	d0d6      	beq.n	80077bc <osMutexNew+0x1c>
  hMutex = NULL;
 800780e:	2500      	movs	r5, #0
 8007810:	e7f7      	b.n	8007802 <osMutexNew+0x62>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	b17b      	cbz	r3, 8007836 <osMutexNew+0x96>
      mem = -1;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	e7e2      	b.n	80077e2 <osMutexNew+0x42>
        if (rmtx != 0U) {
 800781c:	b126      	cbz	r6, 8007828 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800781e:	2004      	movs	r0, #4
 8007820:	f001 f85b 	bl	80088da <xQueueCreateMutexStatic>
 8007824:	4605      	mov	r5, r0
 8007826:	e7e2      	b.n	80077ee <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007828:	2001      	movs	r0, #1
 800782a:	f001 f856 	bl	80088da <xQueueCreateMutexStatic>
 800782e:	4605      	mov	r5, r0
 8007830:	e7dd      	b.n	80077ee <osMutexNew+0x4e>
        mem = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	e7d5      	b.n	80077e2 <osMutexNew+0x42>
            mem = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	e7d3      	b.n	80077e2 <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 800783a:	2001      	movs	r0, #1
 800783c:	f001 f842 	bl	80088c4 <xQueueCreateMutex>
 8007840:	4605      	mov	r5, r0
 8007842:	e7d4      	b.n	80077ee <osMutexNew+0x4e>
          name = NULL;
 8007844:	2100      	movs	r1, #0
 8007846:	e7d5      	b.n	80077f4 <osMutexNew+0x54>
  hMutex = NULL;
 8007848:	2500      	movs	r5, #0
 800784a:	e7d6      	b.n	80077fa <osMutexNew+0x5a>
 800784c:	2500      	movs	r5, #0
 800784e:	e7d8      	b.n	8007802 <osMutexNew+0x62>
 8007850:	2500      	movs	r5, #0
 8007852:	e7d6      	b.n	8007802 <osMutexNew+0x62>
 8007854:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8007856:	e7d4      	b.n	8007802 <osMutexNew+0x62>
 8007858:	20000c04 	.word	0x20000c04

0800785c <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800785c:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8007860:	f000 0301 	and.w	r3, r0, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007864:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007868:	bb18      	cbnz	r0, 80078b2 <osMutexAcquire+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786a:	f3ef 8010 	mrs	r0, PRIMASK
 800786e:	bb18      	cbnz	r0, 80078b8 <osMutexAcquire+0x5c>
 8007870:	4819      	ldr	r0, [pc, #100]	; (80078d8 <osMutexAcquire+0x7c>)
 8007872:	6800      	ldr	r0, [r0, #0]
 8007874:	2802      	cmp	r0, #2
 8007876:	d00c      	beq.n	8007892 <osMutexAcquire+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8007878:	b30a      	cbz	r2, 80078be <osMutexAcquire+0x62>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800787e:	b17b      	cbz	r3, 80078a0 <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007880:	4610      	mov	r0, r2
 8007882:	f001 fa93 	bl	8008dac <xQueueTakeMutexRecursive>
 8007886:	2801      	cmp	r0, #1
 8007888:	d01c      	beq.n	80078c4 <osMutexAcquire+0x68>
        if (timeout != 0U) {
 800788a:	b1ec      	cbz	r4, 80078c8 <osMutexAcquire+0x6c>
          stat = osErrorTimeout;
 800788c:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 8007890:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007892:	f3ef 8011 	mrs	r0, BASEPRI
  if (IS_IRQ()) {
 8007896:	2800      	cmp	r0, #0
 8007898:	d0ee      	beq.n	8007878 <osMutexAcquire+0x1c>
    stat = osErrorISR;
 800789a:	f06f 0005 	mvn.w	r0, #5
 800789e:	4770      	bx	lr
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80078a0:	4610      	mov	r0, r2
 80078a2:	f001 f9b5 	bl	8008c10 <xQueueSemaphoreTake>
 80078a6:	2801      	cmp	r0, #1
 80078a8:	d011      	beq.n	80078ce <osMutexAcquire+0x72>
        if (timeout != 0U) {
 80078aa:	b194      	cbz	r4, 80078d2 <osMutexAcquire+0x76>
          stat = osErrorTimeout;
 80078ac:	f06f 0001 	mvn.w	r0, #1
 80078b0:	e7ee      	b.n	8007890 <osMutexAcquire+0x34>
    stat = osErrorISR;
 80078b2:	f06f 0005 	mvn.w	r0, #5
 80078b6:	4770      	bx	lr
 80078b8:	f06f 0005 	mvn.w	r0, #5
 80078bc:	4770      	bx	lr
    stat = osErrorParameter;
 80078be:	f06f 0003 	mvn.w	r0, #3
}
 80078c2:	4770      	bx	lr
  stat = osOK;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7e3      	b.n	8007890 <osMutexAcquire+0x34>
          stat = osErrorResource;
 80078c8:	f06f 0002 	mvn.w	r0, #2
 80078cc:	e7e0      	b.n	8007890 <osMutexAcquire+0x34>
  stat = osOK;
 80078ce:	2000      	movs	r0, #0
 80078d0:	e7de      	b.n	8007890 <osMutexAcquire+0x34>
          stat = osErrorResource;
 80078d2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80078d6:	e7db      	b.n	8007890 <osMutexAcquire+0x34>
 80078d8:	20000c04 	.word	0x20000c04

080078dc <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078dc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80078e0:	bb2a      	cbnz	r2, 800792e <osMutexRelease+0x52>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80078e2:	b510      	push	{r4, lr}
 80078e4:	f020 0401 	bic.w	r4, r0, #1
 80078e8:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ec:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80078f0:	bb02      	cbnz	r2, 8007934 <osMutexRelease+0x58>
 80078f2:	4a16      	ldr	r2, [pc, #88]	; (800794c <osMutexRelease+0x70>)
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	2a02      	cmp	r2, #2
 80078f8:	d008      	beq.n	800790c <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80078fa:	b1f4      	cbz	r4, 800793a <osMutexRelease+0x5e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80078fc:	b168      	cbz	r0, 800791a <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 fffa 	bl	80088f8 <xQueueGiveMutexRecursive>
 8007904:	2801      	cmp	r0, #1
 8007906:	d11b      	bne.n	8007940 <osMutexRelease+0x64>
  stat = osOK;
 8007908:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800790a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800790c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8007910:	2a00      	cmp	r2, #0
 8007912:	d0f2      	beq.n	80078fa <osMutexRelease+0x1e>
    stat = osErrorISR;
 8007914:	f06f 0005 	mvn.w	r0, #5
 8007918:	e7f7      	b.n	800790a <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800791a:	2300      	movs	r3, #0
 800791c:	461a      	mov	r2, r3
 800791e:	4619      	mov	r1, r3
 8007920:	4620      	mov	r0, r4
 8007922:	f000 ff05 	bl	8008730 <xQueueGenericSend>
 8007926:	2801      	cmp	r0, #1
 8007928:	d10d      	bne.n	8007946 <osMutexRelease+0x6a>
  stat = osOK;
 800792a:	2000      	movs	r0, #0
 800792c:	e7ed      	b.n	800790a <osMutexRelease+0x2e>
    stat = osErrorISR;
 800792e:	f06f 0005 	mvn.w	r0, #5
}
 8007932:	4770      	bx	lr
    stat = osErrorISR;
 8007934:	f06f 0005 	mvn.w	r0, #5
 8007938:	e7e7      	b.n	800790a <osMutexRelease+0x2e>
    stat = osErrorParameter;
 800793a:	f06f 0003 	mvn.w	r0, #3
 800793e:	e7e4      	b.n	800790a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8007940:	f06f 0002 	mvn.w	r0, #2
 8007944:	e7e1      	b.n	800790a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8007946:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800794a:	e7de      	b.n	800790a <osMutexRelease+0x2e>
 800794c:	20000c04 	.word	0x20000c04

08007950 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007954:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007958:	2b00      	cmp	r3, #0
 800795a:	d15b      	bne.n	8007a14 <osSemaphoreNew+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795c:	f3ef 8310 	mrs	r3, PRIMASK
 8007960:	2b00      	cmp	r3, #0
 8007962:	d159      	bne.n	8007a18 <osSemaphoreNew+0xc8>
 8007964:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <osSemaphoreNew+0xdc>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d021      	beq.n	80079b0 <osSemaphoreNew+0x60>
 800796c:	2800      	cmp	r0, #0
 800796e:	d055      	beq.n	8007a1c <osSemaphoreNew+0xcc>
 8007970:	4288      	cmp	r0, r1
 8007972:	d355      	bcc.n	8007a20 <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 8007974:	b312      	cbz	r2, 80079bc <osSemaphoreNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007976:	6893      	ldr	r3, [r2, #8]
 8007978:	b113      	cbz	r3, 8007980 <osSemaphoreNew+0x30>
 800797a:	68d4      	ldr	r4, [r2, #12]
 800797c:	2c4f      	cmp	r4, #79	; 0x4f
 800797e:	d81f      	bhi.n	80079c0 <osSemaphoreNew+0x70>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007980:	2b00      	cmp	r3, #0
 8007982:	d14f      	bne.n	8007a24 <osSemaphoreNew+0xd4>
 8007984:	68d3      	ldr	r3, [r2, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d14e      	bne.n	8007a28 <osSemaphoreNew+0xd8>
 800798a:	4614      	mov	r4, r2
 800798c:	460d      	mov	r5, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800798e:	2801      	cmp	r0, #1
 8007990:	d018      	beq.n	80079c4 <osSemaphoreNew+0x74>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8007992:	2b00      	cmp	r3, #0
 8007994:	d137      	bne.n	8007a06 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007996:	f000 feaa 	bl	80086ee <xQueueCreateCountingSemaphore>
 800799a:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800799c:	b12e      	cbz	r6, 80079aa <osSemaphoreNew+0x5a>
        if (attr != NULL) {
 800799e:	2c00      	cmp	r4, #0
 80079a0:	d036      	beq.n	8007a10 <osSemaphoreNew+0xc0>
          name = attr->name;
 80079a2:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80079a4:	4630      	mov	r0, r6
 80079a6:	f001 fa79 	bl	8008e9c <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80079aa:	4630      	mov	r0, r6
 80079ac:	b002      	add	sp, #8
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079b0:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0d9      	beq.n	800796c <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 80079b8:	2600      	movs	r6, #0
 80079ba:	e7f6      	b.n	80079aa <osSemaphoreNew+0x5a>
      mem = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	e7e4      	b.n	800798a <osSemaphoreNew+0x3a>
        mem = 1;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e7e2      	b.n	800798a <osSemaphoreNew+0x3a>
        if (mem == 1) {
 80079c4:	b9b3      	cbnz	r3, 80079f4 <osSemaphoreNew+0xa4>
          hSemaphore = xSemaphoreCreateBinary();
 80079c6:	2203      	movs	r2, #3
 80079c8:	2100      	movs	r1, #0
 80079ca:	2001      	movs	r0, #1
 80079cc:	f000 fe43 	bl	8008656 <xQueueGenericCreate>
 80079d0:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079d2:	2e00      	cmp	r6, #0
 80079d4:	d0e2      	beq.n	800799c <osSemaphoreNew+0x4c>
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	d0e0      	beq.n	800799c <osSemaphoreNew+0x4c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079da:	2300      	movs	r3, #0
 80079dc:	461a      	mov	r2, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 fea5 	bl	8008730 <xQueueGenericSend>
 80079e6:	2801      	cmp	r0, #1
 80079e8:	d0d8      	beq.n	800799c <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80079ea:	4630      	mov	r0, r6
 80079ec:	f001 fa80 	bl	8008ef0 <vQueueDelete>
            hSemaphore = NULL;
 80079f0:	2600      	movs	r6, #0
 80079f2:	e7da      	b.n	80079aa <osSemaphoreNew+0x5a>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80079f4:	2303      	movs	r3, #3
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	6893      	ldr	r3, [r2, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	4611      	mov	r1, r2
 80079fe:	f000 fde2 	bl	80085c6 <xQueueGenericCreateStatic>
 8007a02:	4606      	mov	r6, r0
 8007a04:	e7e5      	b.n	80079d2 <osSemaphoreNew+0x82>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007a06:	6892      	ldr	r2, [r2, #8]
 8007a08:	f000 fe4c 	bl	80086a4 <xQueueCreateCountingSemaphoreStatic>
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	e7c5      	b.n	800799c <osSemaphoreNew+0x4c>
          name = NULL;
 8007a10:	2100      	movs	r1, #0
 8007a12:	e7c7      	b.n	80079a4 <osSemaphoreNew+0x54>
  hSemaphore = NULL;
 8007a14:	2600      	movs	r6, #0
 8007a16:	e7c8      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a18:	2600      	movs	r6, #0
 8007a1a:	e7c6      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	e7c4      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a20:	2600      	movs	r6, #0
 8007a22:	e7c2      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a24:	2600      	movs	r6, #0
 8007a26:	e7c0      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a28:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8007a2a:	e7be      	b.n	80079aa <osSemaphoreNew+0x5a>
 8007a2c:	20000c04 	.word	0x20000c04

08007a30 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007a30:	b370      	cbz	r0, 8007a90 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007a32:	b510      	push	{r4, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007a3c:	b94b      	cbnz	r3, 8007a52 <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a42:	b933      	cbnz	r3, 8007a52 <osSemaphoreAcquire+0x22>
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <osSemaphoreAcquire+0x80>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d118      	bne.n	8007a7e <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a50:	b1ab      	cbz	r3, 8007a7e <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 8007a52:	bb04      	cbnz	r4, 8007a96 <osSemaphoreAcquire+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8007a54:	2100      	movs	r1, #0
 8007a56:	aa02      	add	r2, sp, #8
 8007a58:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007a5c:	f001 f9c8 	bl	8008df0 <xQueueReceiveFromISR>
 8007a60:	2801      	cmp	r0, #1
 8007a62:	d11b      	bne.n	8007a9c <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	b1e3      	cbz	r3, 8007aa2 <osSemaphoreAcquire+0x72>
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <osSemaphoreAcquire+0x84>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007a78:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007a7a:	b002      	add	sp, #8
 8007a7c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f001 f8c6 	bl	8008c10 <xQueueSemaphoreTake>
 8007a84:	2801      	cmp	r0, #1
 8007a86:	d00e      	beq.n	8007aa6 <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8007a88:	b17c      	cbz	r4, 8007aaa <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8007a8a:	f06f 0001 	mvn.w	r0, #1
 8007a8e:	e7f4      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 8007a90:	f06f 0003 	mvn.w	r0, #3
}
 8007a94:	4770      	bx	lr
      stat = osErrorParameter;
 8007a96:	f06f 0003 	mvn.w	r0, #3
 8007a9a:	e7ee      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8007a9c:	f06f 0002 	mvn.w	r0, #2
 8007aa0:	e7eb      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
  stat = osOK;
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e7e9      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e7e7      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8007aaa:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007aae:	e7e4      	b.n	8007a7a <osSemaphoreAcquire+0x4a>
 8007ab0:	20000c04 	.word	0x20000c04
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007ab8:	b368      	cbz	r0, 8007b16 <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007aba:	b500      	push	{lr}
 8007abc:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abe:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007ac2:	b94b      	cbnz	r3, 8007ad8 <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac8:	b933      	cbnz	r3, 8007ad8 <osSemaphoreRelease+0x20>
 8007aca:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <osSemaphoreRelease+0x74>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d118      	bne.n	8007b04 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad6:	b1ab      	cbz	r3, 8007b04 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 8007ad8:	a902      	add	r1, sp, #8
 8007ada:	2300      	movs	r3, #0
 8007adc:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007ae0:	f000 ff90 	bl	8008a04 <xQueueGiveFromISR>
 8007ae4:	2801      	cmp	r0, #1
 8007ae6:	d119      	bne.n	8007b1c <osSemaphoreRelease+0x64>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	b1d3      	cbz	r3, 8007b22 <osSemaphoreRelease+0x6a>
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <osSemaphoreRelease+0x78>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007afc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8007afe:	b003      	add	sp, #12
 8007b00:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007b04:	2300      	movs	r3, #0
 8007b06:	461a      	mov	r2, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f000 fe11 	bl	8008730 <xQueueGenericSend>
 8007b0e:	2801      	cmp	r0, #1
 8007b10:	d109      	bne.n	8007b26 <osSemaphoreRelease+0x6e>
  stat = osOK;
 8007b12:	2000      	movs	r0, #0
 8007b14:	e7f3      	b.n	8007afe <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007b16:	f06f 0003 	mvn.w	r0, #3
}
 8007b1a:	4770      	bx	lr
      stat = osErrorResource;
 8007b1c:	f06f 0002 	mvn.w	r0, #2
 8007b20:	e7ed      	b.n	8007afe <osSemaphoreRelease+0x46>
  stat = osOK;
 8007b22:	2000      	movs	r0, #0
 8007b24:	e7eb      	b.n	8007afe <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8007b26:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007b2a:	e7e8      	b.n	8007afe <osSemaphoreRelease+0x46>
 8007b2c:	20000c04 	.word	0x20000c04
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b38:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d14c      	bne.n	8007bda <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b40:	f3ef 8310 	mrs	r3, PRIMASK
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d14a      	bne.n	8007bde <osMessageQueueNew+0xaa>
 8007b48:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <osMessageQueueNew+0xbc>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d023      	beq.n	8007b98 <osMessageQueueNew+0x64>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d046      	beq.n	8007be2 <osMessageQueueNew+0xae>
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d046      	beq.n	8007be6 <osMessageQueueNew+0xb2>
 8007b58:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d034      	beq.n	8007bc8 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b5e:	6893      	ldr	r3, [r2, #8]
 8007b60:	b14b      	cbz	r3, 8007b76 <osMessageQueueNew+0x42>
 8007b62:	68d2      	ldr	r2, [r2, #12]
 8007b64:	2a4f      	cmp	r2, #79	; 0x4f
 8007b66:	d906      	bls.n	8007b76 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b68:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b6a:	b122      	cbz	r2, 8007b76 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b6c:	6966      	ldr	r6, [r4, #20]
 8007b6e:	fb01 f500 	mul.w	r5, r1, r0
 8007b72:	42ae      	cmp	r6, r5
 8007b74:	d222      	bcs.n	8007bbc <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b76:	b1ab      	cbz	r3, 8007ba4 <osMessageQueueNew+0x70>
    mem = -1;
 8007b78:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8007b7c:	bbab      	cbnz	r3, 8007bea <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f000 fd69 	bl	8008656 <xQueueGenericCreate>
 8007b84:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b86:	b125      	cbz	r5, 8007b92 <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8007b88:	b32c      	cbz	r4, 8007bd6 <osMessageQueueNew+0xa2>
        name = attr->name;
 8007b8a:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f001 f985 	bl	8008e9c <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007b92:	4628      	mov	r0, r5
 8007b94:	b002      	add	sp, #8
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b98:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0d7      	beq.n	8007b50 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8007ba0:	2500      	movs	r5, #0
 8007ba2:	e7f6      	b.n	8007b92 <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007ba4:	68e3      	ldr	r3, [r4, #12]
 8007ba6:	b98b      	cbnz	r3, 8007bcc <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007ba8:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007baa:	b113      	cbz	r3, 8007bb2 <osMessageQueueNew+0x7e>
    mem = -1;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	e7e4      	b.n	8007b7c <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	b16b      	cbz	r3, 8007bd2 <osMessageQueueNew+0x9e>
    mem = -1;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bba:	e7df      	b.n	8007b7c <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	9500      	str	r5, [sp, #0]
 8007bc0:	f000 fd01 	bl	80085c6 <xQueueGenericCreateStatic>
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	e7de      	b.n	8007b86 <osMessageQueueNew+0x52>
      mem = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e7d7      	b.n	8007b7c <osMessageQueueNew+0x48>
    mem = -1;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd0:	e7d4      	b.n	8007b7c <osMessageQueueNew+0x48>
          mem = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e7d2      	b.n	8007b7c <osMessageQueueNew+0x48>
        name = NULL;
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	e7d8      	b.n	8007b8c <osMessageQueueNew+0x58>
  hQueue = NULL;
 8007bda:	2500      	movs	r5, #0
 8007bdc:	e7d9      	b.n	8007b92 <osMessageQueueNew+0x5e>
 8007bde:	2500      	movs	r5, #0
 8007be0:	e7d7      	b.n	8007b92 <osMessageQueueNew+0x5e>
 8007be2:	2500      	movs	r5, #0
 8007be4:	e7d5      	b.n	8007b92 <osMessageQueueNew+0x5e>
 8007be6:	2500      	movs	r5, #0
 8007be8:	e7d3      	b.n	8007b92 <osMessageQueueNew+0x5e>
 8007bea:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8007bec:	e7d1      	b.n	8007b92 <osMessageQueueNew+0x5e>
 8007bee:	bf00      	nop
 8007bf0:	20000c04 	.word	0x20000c04

08007bf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bfa:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007bfe:	b9b3      	cbnz	r3, 8007c2e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c00:	f3ef 8310 	mrs	r3, PRIMASK
 8007c04:	b99b      	cbnz	r3, 8007c2e <osMessageQueuePut+0x3a>
 8007c06:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <osMessageQueuePut+0x9c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d00b      	beq.n	8007c26 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c0e:	b3a0      	cbz	r0, 8007c7a <osMessageQueuePut+0x86>
 8007c10:	b3b1      	cbz	r1, 8007c80 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c12:	2300      	movs	r3, #0
 8007c14:	4622      	mov	r2, r4
 8007c16:	f000 fd8b 	bl	8008730 <xQueueGenericSend>
 8007c1a:	2801      	cmp	r0, #1
 8007c1c:	d033      	beq.n	8007c86 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8007c1e:	b3a4      	cbz	r4, 8007c8a <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8007c20:	f06f 0001 	mvn.w	r0, #1
 8007c24:	e027      	b.n	8007c76 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c26:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0ef      	beq.n	8007c0e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c2e:	b1a8      	cbz	r0, 8007c5c <osMessageQueuePut+0x68>
 8007c30:	b1b9      	cbz	r1, 8007c62 <osMessageQueuePut+0x6e>
 8007c32:	b9cc      	cbnz	r4, 8007c68 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	aa02      	add	r2, sp, #8
 8007c38:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c3c:	f000 fe7c 	bl	8008938 <xQueueGenericSendFromISR>
 8007c40:	2801      	cmp	r0, #1
 8007c42:	d114      	bne.n	8007c6e <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8007c44:	9b01      	ldr	r3, [sp, #4]
 8007c46:	b1ab      	cbz	r3, 8007c74 <osMessageQueuePut+0x80>
 8007c48:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <osMessageQueuePut+0xa0>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e00c      	b.n	8007c76 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8007c5c:	f06f 0003 	mvn.w	r0, #3
 8007c60:	e009      	b.n	8007c76 <osMessageQueuePut+0x82>
 8007c62:	f06f 0003 	mvn.w	r0, #3
 8007c66:	e006      	b.n	8007c76 <osMessageQueuePut+0x82>
 8007c68:	f06f 0003 	mvn.w	r0, #3
 8007c6c:	e003      	b.n	8007c76 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 8007c6e:	f06f 0002 	mvn.w	r0, #2
 8007c72:	e000      	b.n	8007c76 <osMessageQueuePut+0x82>
  stat = osOK;
 8007c74:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007c76:	b002      	add	sp, #8
 8007c78:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8007c7a:	f06f 0003 	mvn.w	r0, #3
 8007c7e:	e7fa      	b.n	8007c76 <osMessageQueuePut+0x82>
 8007c80:	f06f 0003 	mvn.w	r0, #3
 8007c84:	e7f7      	b.n	8007c76 <osMessageQueuePut+0x82>
  stat = osOK;
 8007c86:	2000      	movs	r0, #0
 8007c88:	e7f5      	b.n	8007c76 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8007c8a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007c8e:	e7f2      	b.n	8007c76 <osMessageQueuePut+0x82>
 8007c90:	20000c04 	.word	0x20000c04
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007ca2:	b9ab      	cbnz	r3, 8007cd0 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca8:	b993      	cbnz	r3, 8007cd0 <osMessageQueueGet+0x38>
 8007caa:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <osMessageQueueGet+0x9c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d00a      	beq.n	8007cc8 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007cb2:	b398      	cbz	r0, 8007d1c <osMessageQueueGet+0x84>
 8007cb4:	b3a9      	cbz	r1, 8007d22 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	f000 fefe 	bl	8008ab8 <xQueueReceive>
 8007cbc:	2801      	cmp	r0, #1
 8007cbe:	d033      	beq.n	8007d28 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8007cc0:	b3a4      	cbz	r4, 8007d2c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8007cc2:	f06f 0001 	mvn.w	r0, #1
 8007cc6:	e027      	b.n	8007d18 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cd0:	b1a8      	cbz	r0, 8007cfe <osMessageQueueGet+0x66>
 8007cd2:	b1b9      	cbz	r1, 8007d04 <osMessageQueueGet+0x6c>
 8007cd4:	b9cc      	cbnz	r4, 8007d0a <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8007cd6:	aa02      	add	r2, sp, #8
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007cde:	f001 f887 	bl	8008df0 <xQueueReceiveFromISR>
 8007ce2:	2801      	cmp	r0, #1
 8007ce4:	d114      	bne.n	8007d10 <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8007ce6:	9b01      	ldr	r3, [sp, #4]
 8007ce8:	b1ab      	cbz	r3, 8007d16 <osMessageQueueGet+0x7e>
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <osMessageQueueGet+0xa0>)
 8007cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e00c      	b.n	8007d18 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8007cfe:	f06f 0003 	mvn.w	r0, #3
 8007d02:	e009      	b.n	8007d18 <osMessageQueueGet+0x80>
 8007d04:	f06f 0003 	mvn.w	r0, #3
 8007d08:	e006      	b.n	8007d18 <osMessageQueueGet+0x80>
 8007d0a:	f06f 0003 	mvn.w	r0, #3
 8007d0e:	e003      	b.n	8007d18 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8007d10:	f06f 0002 	mvn.w	r0, #2
 8007d14:	e000      	b.n	8007d18 <osMessageQueueGet+0x80>
  stat = osOK;
 8007d16:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8007d1c:	f06f 0003 	mvn.w	r0, #3
 8007d20:	e7fa      	b.n	8007d18 <osMessageQueueGet+0x80>
 8007d22:	f06f 0003 	mvn.w	r0, #3
 8007d26:	e7f7      	b.n	8007d18 <osMessageQueueGet+0x80>
  stat = osOK;
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e7f5      	b.n	8007d18 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8007d2c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007d30:	e7f2      	b.n	8007d18 <osMessageQueueGet+0x80>
 8007d32:	bf00      	nop
 8007d34:	20000c04 	.word	0x20000c04
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8007d3c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d42:	b99b      	cbnz	r3, 8007d6c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d44:	f3ef 8310 	mrs	r3, PRIMASK
 8007d48:	b99b      	cbnz	r3, 8007d72 <osMessageQueueReset+0x36>
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <osMessageQueueReset+0x44>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d005      	beq.n	8007d5e <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8007d52:	b188      	cbz	r0, 8007d78 <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8007d54:	2100      	movs	r1, #0
 8007d56:	f000 fbe3 	bl	8008520 <xQueueGenericReset>
    stat = osOK;
 8007d5a:	2000      	movs	r0, #0
  }

  return (stat);
}
 8007d5c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d5e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f5      	beq.n	8007d52 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8007d66:	f06f 0005 	mvn.w	r0, #5
 8007d6a:	e7f7      	b.n	8007d5c <osMessageQueueReset+0x20>
 8007d6c:	f06f 0005 	mvn.w	r0, #5
 8007d70:	e7f4      	b.n	8007d5c <osMessageQueueReset+0x20>
 8007d72:	f06f 0005 	mvn.w	r0, #5
 8007d76:	e7f1      	b.n	8007d5c <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 8007d78:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007d7c:	e7ee      	b.n	8007d5c <osMessageQueueReset+0x20>
 8007d7e:	bf00      	nop
 8007d80:	20000c04 	.word	0x20000c04

08007d84 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <vApplicationGetIdleTaskMemory+0x10>)
 8007d86:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d88:	4b03      	ldr	r3, [pc, #12]	; (8007d98 <vApplicationGetIdleTaskMemory+0x14>)
 8007d8a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	6013      	str	r3, [r2, #0]
}
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000ba8 	.word	0x20000ba8
 8007d98:	200009a8 	.word	0x200009a8

08007d9c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	; (8007dac <vApplicationGetTimerTaskMemory+0x10>)
 8007d9e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007da0:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <vApplicationGetTimerTaskMemory+0x14>)
 8007da2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da8:	6013      	str	r3, [r2, #0]
}
 8007daa:	4770      	bx	lr
 8007dac:	20001008 	.word	0x20001008
 8007db0:	20000c08 	.word	0x20000c08

08007db4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007db4:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007db6:	f012 0f07 	tst.w	r2, #7
 8007dba:	d01f      	beq.n	8007dfc <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dbc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dbe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dc2:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dca:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	480e      	ldr	r0, [pc, #56]	; (8007e08 <prvHeapInit+0x54>)
 8007dce:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007dd6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007ddc:	480b      	ldr	r0, [pc, #44]	; (8007e0c <prvHeapInit+0x58>)
 8007dde:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007de0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007de2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007de4:	1a99      	subs	r1, r3, r2
 8007de6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <prvHeapInit+0x5c>)
 8007dec:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvHeapInit+0x60>)
 8007df0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007df2:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <prvHeapInit+0x64>)
 8007df4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007df8:	601a      	str	r2, [r3, #0]
}
 8007dfa:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfc:	f242 7310 	movw	r3, #10000	; 0x2710
 8007e00:	e7e4      	b.n	8007dcc <prvHeapInit+0x18>
 8007e02:	bf00      	nop
 8007e04:	20001068 	.word	0x20001068
 8007e08:	20003784 	.word	0x20003784
 8007e0c:	20001064 	.word	0x20001064
 8007e10:	20003780 	.word	0x20003780
 8007e14:	2000377c 	.word	0x2000377c
 8007e18:	20003778 	.word	0x20003778

08007e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e1c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <prvInsertBlockIntoFreeList+0x50>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4282      	cmp	r2, r0
 8007e24:	d31b      	bcc.n	8007e5e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e26:	6859      	ldr	r1, [r3, #4]
 8007e28:	185c      	adds	r4, r3, r1
 8007e2a:	4284      	cmp	r4, r0
 8007e2c:	d103      	bne.n	8007e36 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e2e:	6840      	ldr	r0, [r0, #4]
 8007e30:	4401      	add	r1, r0
 8007e32:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e34:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e36:	6841      	ldr	r1, [r0, #4]
 8007e38:	1844      	adds	r4, r0, r1
 8007e3a:	42a2      	cmp	r2, r4
 8007e3c:	d113      	bne.n	8007e66 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e3e:	4c0c      	ldr	r4, [pc, #48]	; (8007e70 <prvInsertBlockIntoFreeList+0x54>)
 8007e40:	6824      	ldr	r4, [r4, #0]
 8007e42:	42a2      	cmp	r2, r4
 8007e44:	d00d      	beq.n	8007e62 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e46:	6852      	ldr	r2, [r2, #4]
 8007e48:	4411      	add	r1, r2
 8007e4a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e52:	4298      	cmp	r0, r3
 8007e54:	d000      	beq.n	8007e58 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e56:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e5c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e5e:	4613      	mov	r3, r2
 8007e60:	e7de      	b.n	8007e20 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e62:	6004      	str	r4, [r0, #0]
 8007e64:	e7f5      	b.n	8007e52 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e66:	6002      	str	r2, [r0, #0]
 8007e68:	e7f3      	b.n	8007e52 <prvInsertBlockIntoFreeList+0x36>
 8007e6a:	bf00      	nop
 8007e6c:	20003784 	.word	0x20003784
 8007e70:	20001064 	.word	0x20001064

08007e74 <pvPortMalloc>:
{
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007e78:	f001 fabe 	bl	80093f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007e7c:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <pvPortMalloc+0xf4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	b1bb      	cbz	r3, 8007eb2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e82:	4b3a      	ldr	r3, [pc, #232]	; (8007f6c <pvPortMalloc+0xf8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	421c      	tst	r4, r3
 8007e88:	d163      	bne.n	8007f52 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8007e8a:	b1ac      	cbz	r4, 8007eb8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8007e8c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e8e:	f014 0f07 	tst.w	r4, #7
 8007e92:	d011      	beq.n	8007eb8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e94:	f024 0407 	bic.w	r4, r4, #7
 8007e98:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e9a:	f004 0307 	and.w	r3, r4, #7
 8007e9e:	b15b      	cbz	r3, 8007eb8 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	e7fe      	b.n	8007eb0 <pvPortMalloc+0x3c>
			prvHeapInit();
 8007eb2:	f7ff ff7f 	bl	8007db4 <prvHeapInit>
 8007eb6:	e7e4      	b.n	8007e82 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eb8:	2c00      	cmp	r4, #0
 8007eba:	d04c      	beq.n	8007f56 <pvPortMalloc+0xe2>
 8007ebc:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <pvPortMalloc+0xfc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d34a      	bcc.n	8007f5a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <pvPortMalloc+0x100>)
 8007ec6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ec8:	e001      	b.n	8007ece <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8007eca:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ecc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ece:	686a      	ldr	r2, [r5, #4]
 8007ed0:	42a2      	cmp	r2, r4
 8007ed2:	d202      	bcs.n	8007eda <pvPortMalloc+0x66>
 8007ed4:	682a      	ldr	r2, [r5, #0]
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	d1f7      	bne.n	8007eca <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8007eda:	4a23      	ldr	r2, [pc, #140]	; (8007f68 <pvPortMalloc+0xf4>)
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	42aa      	cmp	r2, r5
 8007ee0:	d03d      	beq.n	8007f5e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ee2:	681e      	ldr	r6, [r3, #0]
 8007ee4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ee6:	682a      	ldr	r2, [r5, #0]
 8007ee8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eea:	686b      	ldr	r3, [r5, #4]
 8007eec:	1b1b      	subs	r3, r3, r4
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d910      	bls.n	8007f14 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ef2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef4:	f010 0f07 	tst.w	r0, #7
 8007ef8:	d008      	beq.n	8007f0c <pvPortMalloc+0x98>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	e7fe      	b.n	8007f0a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f0c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f0e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f10:	f7ff ff84 	bl	8007e1c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f14:	686a      	ldr	r2, [r5, #4]
 8007f16:	4916      	ldr	r1, [pc, #88]	; (8007f70 <pvPortMalloc+0xfc>)
 8007f18:	680b      	ldr	r3, [r1, #0]
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f1e:	4916      	ldr	r1, [pc, #88]	; (8007f78 <pvPortMalloc+0x104>)
 8007f20:	6809      	ldr	r1, [r1, #0]
 8007f22:	428b      	cmp	r3, r1
 8007f24:	d201      	bcs.n	8007f2a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f26:	4914      	ldr	r1, [pc, #80]	; (8007f78 <pvPortMalloc+0x104>)
 8007f28:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f2a:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <pvPortMalloc+0xf8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007f36:	f001 fb13 	bl	8009560 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f3a:	f016 0f07 	tst.w	r6, #7
 8007f3e:	d010      	beq.n	8007f62 <pvPortMalloc+0xee>
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	e7fe      	b.n	8007f50 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8007f52:	2600      	movs	r6, #0
 8007f54:	e7ef      	b.n	8007f36 <pvPortMalloc+0xc2>
 8007f56:	2600      	movs	r6, #0
 8007f58:	e7ed      	b.n	8007f36 <pvPortMalloc+0xc2>
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	e7eb      	b.n	8007f36 <pvPortMalloc+0xc2>
 8007f5e:	2600      	movs	r6, #0
 8007f60:	e7e9      	b.n	8007f36 <pvPortMalloc+0xc2>
}
 8007f62:	4630      	mov	r0, r6
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	bf00      	nop
 8007f68:	20001064 	.word	0x20001064
 8007f6c:	20003778 	.word	0x20003778
 8007f70:	2000377c 	.word	0x2000377c
 8007f74:	20003784 	.word	0x20003784
 8007f78:	20003780 	.word	0x20003780

08007f7c <vPortFree>:
	if( pv != NULL )
 8007f7c:	b380      	cbz	r0, 8007fe0 <vPortFree+0x64>
{
 8007f7e:	b538      	push	{r3, r4, r5, lr}
 8007f80:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007f82:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f86:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007f8a:	4916      	ldr	r1, [pc, #88]	; (8007fe4 <vPortFree+0x68>)
 8007f8c:	6809      	ldr	r1, [r1, #0]
 8007f8e:	420a      	tst	r2, r1
 8007f90:	d108      	bne.n	8007fa4 <vPortFree+0x28>
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	e7fe      	b.n	8007fa2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fa4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8007fa8:	b140      	cbz	r0, 8007fbc <vPortFree+0x40>
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	e7fe      	b.n	8007fba <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fbc:	ea22 0201 	bic.w	r2, r2, r1
 8007fc0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8007fc4:	f001 fa18 	bl	80093f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fc8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007fcc:	4a06      	ldr	r2, [pc, #24]	; (8007fe8 <vPortFree+0x6c>)
 8007fce:	6813      	ldr	r3, [r2, #0]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7ff ff21 	bl	8007e1c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007fda:	f001 fac1 	bl	8009560 <xTaskResumeAll>
}
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20003778 	.word	0x20003778
 8007fe8:	2000377c 	.word	0x2000377c

08007fec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fec:	f100 0308 	add.w	r3, r0, #8
 8007ff0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ffa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008000:	4770      	bx	lr

08008002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008006:	4770      	bx	lr

08008008 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008008:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800800a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008014:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008016:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008018:	6803      	ldr	r3, [r0, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	6003      	str	r3, [r0, #0]
}
 800801e:	4770      	bx	lr

08008020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008020:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008022:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008024:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008028:	d002      	beq.n	8008030 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802a:	f100 0208 	add.w	r2, r0, #8
 800802e:	e002      	b.n	8008036 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008030:	6902      	ldr	r2, [r0, #16]
 8008032:	e004      	b.n	800803e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008034:	461a      	mov	r2, r3
 8008036:	6853      	ldr	r3, [r2, #4]
 8008038:	681c      	ldr	r4, [r3, #0]
 800803a:	42ac      	cmp	r4, r5
 800803c:	d9fa      	bls.n	8008034 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800803e:	6853      	ldr	r3, [r2, #4]
 8008040:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008042:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008044:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008046:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008048:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800804a:	6803      	ldr	r3, [r0, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	6003      	str	r3, [r0, #0]
}
 8008050:	bc30      	pop	{r4, r5}
 8008052:	4770      	bx	lr

08008054 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008054:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008056:	6842      	ldr	r2, [r0, #4]
 8008058:	6881      	ldr	r1, [r0, #8]
 800805a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800805c:	6882      	ldr	r2, [r0, #8]
 800805e:	6841      	ldr	r1, [r0, #4]
 8008060:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	4282      	cmp	r2, r0
 8008066:	d006      	beq.n	8008076 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008068:	2200      	movs	r2, #0
 800806a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	3a01      	subs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008072:	6818      	ldr	r0, [r3, #0]
}
 8008074:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008076:	6882      	ldr	r2, [r0, #8]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	e7f5      	b.n	8008068 <uxListRemove+0x14>

0800807c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800807c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <prvTaskExitError+0x3c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d008      	beq.n	800809e <prvTaskExitError+0x22>
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	e7fe      	b.n	800809c <prvTaskExitError+0x20>
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0fc      	beq.n	80080ae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080b4:	b002      	add	sp, #8
 80080b6:	4770      	bx	lr
 80080b8:	2000001c 	.word	0x2000001c

080080bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080bc:	4808      	ldr	r0, [pc, #32]	; (80080e0 <prvPortStartFirstTask+0x24>)
 80080be:	6800      	ldr	r0, [r0, #0]
 80080c0:	6800      	ldr	r0, [r0, #0]
 80080c2:	f380 8808 	msr	MSP, r0
 80080c6:	f04f 0000 	mov.w	r0, #0
 80080ca:	f380 8814 	msr	CONTROL, r0
 80080ce:	b662      	cpsie	i
 80080d0:	b661      	cpsie	f
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	df00      	svc	0
 80080dc:	bf00      	nop
 80080de:	0000      	.short	0x0000
 80080e0:	e000ed08 	.word	0xe000ed08

080080e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080f4 <vPortEnableVFP+0x10>
 80080e8:	6801      	ldr	r1, [r0, #0]
 80080ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080ee:	6001      	str	r1, [r0, #0]
 80080f0:	4770      	bx	lr
 80080f2:	0000      	.short	0x0000
 80080f4:	e000ed88 	.word	0xe000ed88

080080f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008100:	f021 0101 	bic.w	r1, r1, #1
 8008104:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <pxPortInitialiseStack+0x28>)
 800810a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800810e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008112:	f06f 0302 	mvn.w	r3, #2
 8008116:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800811a:	3844      	subs	r0, #68	; 0x44
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	0800807d 	.word	0x0800807d
	...

08008130 <SVC_Handler>:
	__asm volatile (
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <pxCurrentTCBConst2>)
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	6808      	ldr	r0, [r1, #0]
 8008136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	f380 8809 	msr	PSP, r0
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f04f 0000 	mov.w	r0, #0
 8008146:	f380 8811 	msr	BASEPRI, r0
 800814a:	4770      	bx	lr
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst2>:
 8008150:	20003794 	.word	0x20003794

08008154 <vPortEnterCritical>:
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008164:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <vPortEnterCritical+0x3c>)
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800816c:	2b01      	cmp	r3, #1
 800816e:	d000      	beq.n	8008172 <vPortEnterCritical+0x1e>
}
 8008170:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <vPortEnterCritical+0x40>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800817a:	d0f9      	beq.n	8008170 <vPortEnterCritical+0x1c>
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	e7fe      	b.n	800818c <vPortEnterCritical+0x38>
 800818e:	bf00      	nop
 8008190:	2000001c 	.word	0x2000001c
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008198:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <vPortExitCritical+0x28>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	b943      	cbnz	r3, 80081b0 <vPortExitCritical+0x18>
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	e7fe      	b.n	80081ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80081b0:	3b01      	subs	r3, #1
 80081b2:	4a03      	ldr	r2, [pc, #12]	; (80081c0 <vPortExitCritical+0x28>)
 80081b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081b6:	b90b      	cbnz	r3, 80081bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081b8:	f383 8811 	msr	BASEPRI, r3
}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	2000001c 	.word	0x2000001c
	...

080081d0 <PendSV_Handler>:
	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b15      	ldr	r3, [pc, #84]	; (8008230 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	f01e 0f10 	tst.w	lr, #16
 80081e0:	bf08      	it	eq
 80081e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081f4:	f380 8811 	msr	BASEPRI, r0
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f001 fa86 	bl	8009710 <vTaskSwitchContext>
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f380 8811 	msr	BASEPRI, r0
 800820c:	bc09      	pop	{r0, r3}
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008216:	f01e 0f10 	tst.w	lr, #16
 800821a:	bf08      	it	eq
 800821c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008220:	f380 8809 	msr	PSP, r0
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst>:
 8008230:	20003794 	.word	0x20003794

08008234 <SysTick_Handler>:
{
 8008234:	b508      	push	{r3, lr}
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008246:	f001 f8ff 	bl	8009448 <xTaskIncrementTick>
 800824a:	b118      	cbz	r0, 8008254 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <SysTick_Handler+0x28>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008254:	2300      	movs	r3, #0
 8008256:	f383 8811 	msr	BASEPRI, r3
}
 800825a:	bd08      	pop	{r3, pc}
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008260:	4b3a      	ldr	r3, [pc, #232]	; (800834c <xPortStartScheduler+0xec>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	4b3a      	ldr	r3, [pc, #232]	; (8008350 <xPortStartScheduler+0xf0>)
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800826a:	4b38      	ldr	r3, [pc, #224]	; (800834c <xPortStartScheduler+0xec>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b39      	ldr	r3, [pc, #228]	; (8008354 <xPortStartScheduler+0xf4>)
 8008270:	429a      	cmp	r2, r3
 8008272:	d111      	bne.n	8008298 <xPortStartScheduler+0x38>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x24>
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	e7fe      	b.n	8008296 <xPortStartScheduler+0x36>
{
 8008298:	b510      	push	{r4, lr}
 800829a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800829c:	4b2e      	ldr	r3, [pc, #184]	; (8008358 <xPortStartScheduler+0xf8>)
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80082b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082b8:	4a28      	ldr	r2, [pc, #160]	; (800835c <xPortStartScheduler+0xfc>)
 80082ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082bc:	4b28      	ldr	r3, [pc, #160]	; (8008360 <xPortStartScheduler+0x100>)
 80082be:	2207      	movs	r2, #7
 80082c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082c2:	e009      	b.n	80082d8 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80082c4:	4a26      	ldr	r2, [pc, #152]	; (8008360 <xPortStartScheduler+0x100>)
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80082dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082e0:	d1f0      	bne.n	80082c4 <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082e2:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <xPortStartScheduler+0x100>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d008      	beq.n	80082fc <xPortStartScheduler+0x9c>
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	e7fe      	b.n	80082fa <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082fc:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008302:	4a17      	ldr	r2, [pc, #92]	; (8008360 <xPortStartScheduler+0x100>)
 8008304:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	4a13      	ldr	r2, [pc, #76]	; (8008358 <xPortStartScheduler+0xf8>)
 800830c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <xPortStartScheduler+0x104>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008316:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800831e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008320:	f7f8 fc22 	bl	8000b68 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008324:	2400      	movs	r4, #0
 8008326:	4b10      	ldr	r3, [pc, #64]	; (8008368 <xPortStartScheduler+0x108>)
 8008328:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800832a:	f7ff fedb 	bl	80080e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800832e:	4a0f      	ldr	r2, [pc, #60]	; (800836c <xPortStartScheduler+0x10c>)
 8008330:	6813      	ldr	r3, [r2, #0]
 8008332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008336:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008338:	f7ff fec0 	bl	80080bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800833c:	f001 f9e8 	bl	8009710 <vTaskSwitchContext>
	prvTaskExitError();
 8008340:	f7ff fe9c 	bl	800807c <prvTaskExitError>
}
 8008344:	4620      	mov	r0, r4
 8008346:	b002      	add	sp, #8
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	e000ed00 	.word	0xe000ed00
 8008350:	410fc271 	.word	0x410fc271
 8008354:	410fc270 	.word	0x410fc270
 8008358:	e000e400 	.word	0xe000e400
 800835c:	2000378c 	.word	0x2000378c
 8008360:	20003790 	.word	0x20003790
 8008364:	e000ed20 	.word	0xe000ed20
 8008368:	2000001c 	.word	0x2000001c
 800836c:	e000ef34 	.word	0xe000ef34

08008370 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008370:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008374:	2b0f      	cmp	r3, #15
 8008376:	d90f      	bls.n	8008398 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008378:	4a10      	ldr	r2, [pc, #64]	; (80083bc <vPortValidateInterruptPriority+0x4c>)
 800837a:	5c9b      	ldrb	r3, [r3, r2]
 800837c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800837e:	4a10      	ldr	r2, [pc, #64]	; (80083c0 <vPortValidateInterruptPriority+0x50>)
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d908      	bls.n	8008398 <vPortValidateInterruptPriority+0x28>
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	e7fe      	b.n	8008396 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <vPortValidateInterruptPriority+0x54>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083a0:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <vPortValidateInterruptPriority+0x58>)
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d908      	bls.n	80083ba <vPortValidateInterruptPriority+0x4a>
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	e7fe      	b.n	80083b8 <vPortValidateInterruptPriority+0x48>
	}
 80083ba:	4770      	bx	lr
 80083bc:	e000e3f0 	.word	0xe000e3f0
 80083c0:	2000378c 	.word	0x2000378c
 80083c4:	e000ed0c 	.word	0xe000ed0c
 80083c8:	20003790 	.word	0x20003790

080083cc <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80083cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083ce:	b123      	cbz	r3, 80083da <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 80083d8:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083da:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80083dc:	4770      	bx	lr

080083de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083de:	b510      	push	{r4, lr}
 80083e0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083e2:	f7ff feb7 	bl	8008154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d004      	beq.n	80083f8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80083ee:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80083f0:	f7ff fed2 	bl	8008198 <vPortExitCritical>

	return xReturn;
}
 80083f4:	4620      	mov	r0, r4
 80083f6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80083f8:	2401      	movs	r4, #1
 80083fa:	e7f9      	b.n	80083f0 <prvIsQueueFull+0x12>

080083fc <prvIsQueueEmpty>:
{
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008400:	f7ff fea8 	bl	8008154 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008406:	b123      	cbz	r3, 8008412 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008408:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800840a:	f7ff fec5 	bl	8008198 <vPortExitCritical>
}
 800840e:	4620      	mov	r0, r4
 8008410:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008412:	2401      	movs	r4, #1
 8008414:	e7f9      	b.n	800840a <prvIsQueueEmpty+0xe>

08008416 <prvCopyDataToQueue>:
{
 8008416:	b570      	push	{r4, r5, r6, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800841c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800841e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008420:	b95a      	cbnz	r2, 800843a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008422:	6803      	ldr	r3, [r0, #0]
 8008424:	b11b      	cbz	r3, 800842e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008426:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008428:	3501      	adds	r5, #1
 800842a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800842c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800842e:	6840      	ldr	r0, [r0, #4]
 8008430:	f001 fb08 	bl	8009a44 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	e7f6      	b.n	8008428 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800843a:	b96e      	cbnz	r6, 8008458 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800843c:	6880      	ldr	r0, [r0, #8]
 800843e:	f003 fcf7 	bl	800be30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008444:	68a3      	ldr	r3, [r4, #8]
 8008446:	4413      	add	r3, r2
 8008448:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	4293      	cmp	r3, r2
 800844e:	d319      	bcc.n	8008484 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008454:	2000      	movs	r0, #0
 8008456:	e7e7      	b.n	8008428 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008458:	68c0      	ldr	r0, [r0, #12]
 800845a:	f003 fce9 	bl	800be30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800845e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008460:	4252      	negs	r2, r2
 8008462:	68e3      	ldr	r3, [r4, #12]
 8008464:	4413      	add	r3, r2
 8008466:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008468:	6821      	ldr	r1, [r4, #0]
 800846a:	428b      	cmp	r3, r1
 800846c:	d202      	bcs.n	8008474 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	441a      	add	r2, r3
 8008472:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008474:	2e02      	cmp	r6, #2
 8008476:	d001      	beq.n	800847c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008478:	2000      	movs	r0, #0
 800847a:	e7d5      	b.n	8008428 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847c:	b125      	cbz	r5, 8008488 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800847e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8008480:	2000      	movs	r0, #0
 8008482:	e7d1      	b.n	8008428 <prvCopyDataToQueue+0x12>
 8008484:	2000      	movs	r0, #0
 8008486:	e7cf      	b.n	8008428 <prvCopyDataToQueue+0x12>
 8008488:	2000      	movs	r0, #0
 800848a:	e7cd      	b.n	8008428 <prvCopyDataToQueue+0x12>

0800848c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800848c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800848e:	b172      	cbz	r2, 80084ae <prvCopyDataFromQueue+0x22>
{
 8008490:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008492:	68c3      	ldr	r3, [r0, #12]
 8008494:	4413      	add	r3, r2
 8008496:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008498:	6844      	ldr	r4, [r0, #4]
 800849a:	42a3      	cmp	r3, r4
 800849c:	d301      	bcc.n	80084a2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800849e:	6803      	ldr	r3, [r0, #0]
 80084a0:	60c3      	str	r3, [r0, #12]
 80084a2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80084a4:	68c1      	ldr	r1, [r0, #12]
 80084a6:	4620      	mov	r0, r4
 80084a8:	f003 fcc2 	bl	800be30 <memcpy>
}
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	4770      	bx	lr

080084b0 <prvUnlockQueue>:
{
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80084b4:	f7ff fe4e 	bl	8008154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80084b8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80084bc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084be:	e003      	b.n	80084c8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80084c0:	f001 fa3a 	bl	8009938 <vTaskMissedYield>
			--cTxLock;
 80084c4:	3c01      	subs	r4, #1
 80084c6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	dd08      	ble.n	80084de <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084ce:	b133      	cbz	r3, 80084de <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80084d4:	f001 f99c 	bl	8009810 <xTaskRemoveFromEventList>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0f3      	beq.n	80084c4 <prvUnlockQueue+0x14>
 80084dc:	e7f0      	b.n	80084c0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80084de:	23ff      	movs	r3, #255	; 0xff
 80084e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80084e4:	f7ff fe58 	bl	8008198 <vPortExitCritical>
	taskENTER_CRITICAL();
 80084e8:	f7ff fe34 	bl	8008154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80084ec:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80084f0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084f2:	e003      	b.n	80084fc <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80084f4:	f001 fa20 	bl	8009938 <vTaskMissedYield>
				--cRxLock;
 80084f8:	3c01      	subs	r4, #1
 80084fa:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084fc:	2c00      	cmp	r4, #0
 80084fe:	dd08      	ble.n	8008512 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008500:	692b      	ldr	r3, [r5, #16]
 8008502:	b133      	cbz	r3, 8008512 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008504:	f105 0010 	add.w	r0, r5, #16
 8008508:	f001 f982 	bl	8009810 <xTaskRemoveFromEventList>
 800850c:	2800      	cmp	r0, #0
 800850e:	d0f3      	beq.n	80084f8 <prvUnlockQueue+0x48>
 8008510:	e7f0      	b.n	80084f4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008512:	23ff      	movs	r3, #255	; 0xff
 8008514:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008518:	f7ff fe3e 	bl	8008198 <vPortExitCritical>
}
 800851c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008520 <xQueueGenericReset>:
{
 8008520:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008522:	b940      	cbnz	r0, 8008536 <xQueueGenericReset+0x16>
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	e7fe      	b.n	8008534 <xQueueGenericReset+0x14>
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800853a:	f7ff fe0b 	bl	8008154 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800853e:	6821      	ldr	r1, [r4, #0]
 8008540:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008544:	fb03 1002 	mla	r0, r3, r2, r1
 8008548:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800854a:	2000      	movs	r0, #0
 800854c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800854e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008550:	3a01      	subs	r2, #1
 8008552:	fb02 1303 	mla	r3, r2, r3, r1
 8008556:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008558:	23ff      	movs	r3, #255	; 0xff
 800855a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800855e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008562:	b9a5      	cbnz	r5, 800858e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	b91b      	cbnz	r3, 8008570 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008568:	f7ff fe16 	bl	8008198 <vPortExitCritical>
}
 800856c:	2001      	movs	r0, #1
 800856e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008570:	f104 0010 	add.w	r0, r4, #16
 8008574:	f001 f94c 	bl	8009810 <xTaskRemoveFromEventList>
 8008578:	2800      	cmp	r0, #0
 800857a:	d0f5      	beq.n	8008568 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <xQueueGenericReset+0x80>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	e7ec      	b.n	8008568 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858e:	f104 0010 	add.w	r0, r4, #16
 8008592:	f7ff fd2b 	bl	8007fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008596:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800859a:	f7ff fd27 	bl	8007fec <vListInitialise>
 800859e:	e7e3      	b.n	8008568 <xQueueGenericReset+0x48>
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <prvInitialiseNewQueue>:
{
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	461d      	mov	r5, r3
 80085a8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80085aa:	460b      	mov	r3, r1
 80085ac:	b149      	cbz	r1, 80085c2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085ae:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80085b0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085b2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085b4:	2101      	movs	r1, #1
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff ffb2 	bl	8008520 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80085bc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085c2:	6024      	str	r4, [r4, #0]
 80085c4:	e7f4      	b.n	80085b0 <prvInitialiseNewQueue+0xc>

080085c6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c6:	b940      	cbnz	r0, 80085da <xQueueGenericCreateStatic+0x14>
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericCreateStatic+0x12>
	{
 80085da:	b510      	push	{r4, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80085e0:	b153      	cbz	r3, 80085f8 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085e2:	b192      	cbz	r2, 800860a <xQueueGenericCreateStatic+0x44>
 80085e4:	b989      	cbnz	r1, 800860a <xQueueGenericCreateStatic+0x44>
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	e7fe      	b.n	80085f6 <xQueueGenericCreateStatic+0x30>
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	e7fe      	b.n	8008608 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800860a:	b94a      	cbnz	r2, 8008620 <xQueueGenericCreateStatic+0x5a>
 800860c:	b141      	cbz	r1, 8008620 <xQueueGenericCreateStatic+0x5a>
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	e7fe      	b.n	800861e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008620:	2050      	movs	r0, #80	; 0x50
 8008622:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008624:	9803      	ldr	r0, [sp, #12]
 8008626:	2850      	cmp	r0, #80	; 0x50
 8008628:	d008      	beq.n	800863c <xQueueGenericCreateStatic+0x76>
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	e7fe      	b.n	800863a <xQueueGenericCreateStatic+0x74>
 800863c:	4620      	mov	r0, r4
 800863e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008646:	9400      	str	r4, [sp, #0]
 8008648:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800864c:	f7ff ffaa 	bl	80085a4 <prvInitialiseNewQueue>
	}
 8008650:	4620      	mov	r0, r4
 8008652:	b004      	add	sp, #16
 8008654:	bd10      	pop	{r4, pc}

08008656 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008656:	b940      	cbnz	r0, 800866a <xQueueGenericCreate+0x14>
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	e7fe      	b.n	8008668 <xQueueGenericCreate+0x12>
	{
 800866a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866c:	b083      	sub	sp, #12
 800866e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008670:	b111      	cbz	r1, 8008678 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008672:	fb01 f000 	mul.w	r0, r1, r0
 8008676:	e000      	b.n	800867a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008678:	2000      	movs	r0, #0
 800867a:	4617      	mov	r7, r2
 800867c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800867e:	3050      	adds	r0, #80	; 0x50
 8008680:	f7ff fbf8 	bl	8007e74 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008684:	4605      	mov	r5, r0
 8008686:	b150      	cbz	r0, 800869e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800868e:	9000      	str	r0, [sp, #0]
 8008690:	463b      	mov	r3, r7
 8008692:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008696:	4621      	mov	r1, r4
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff ff83 	bl	80085a4 <prvInitialiseNewQueue>
	}
 800869e:	4628      	mov	r0, r5
 80086a0:	b003      	add	sp, #12
 80086a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086a4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80086a4:	b940      	cbnz	r0, 80086b8 <xQueueCreateCountingSemaphoreStatic+0x14>
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	e7fe      	b.n	80086b6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086b8:	4288      	cmp	r0, r1
 80086ba:	d208      	bcs.n	80086ce <xQueueCreateCountingSemaphoreStatic+0x2a>
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	e7fe      	b.n	80086cc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 80086ce:	b510      	push	{r4, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	4613      	mov	r3, r2
 80086d4:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086d6:	2202      	movs	r2, #2
 80086d8:	9200      	str	r2, [sp, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	4611      	mov	r1, r2
 80086de:	f7ff ff72 	bl	80085c6 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80086e2:	4603      	mov	r3, r0
 80086e4:	b100      	cbz	r0, 80086e8 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086e6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	b002      	add	sp, #8
 80086ec:	bd10      	pop	{r4, pc}

080086ee <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80086ee:	b940      	cbnz	r0, 8008702 <xQueueCreateCountingSemaphore+0x14>
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	e7fe      	b.n	8008700 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008702:	4288      	cmp	r0, r1
 8008704:	d208      	bcs.n	8008718 <xQueueCreateCountingSemaphore+0x2a>
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	e7fe      	b.n	8008716 <xQueueCreateCountingSemaphore+0x28>
	{
 8008718:	b510      	push	{r4, lr}
 800871a:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800871c:	2202      	movs	r2, #2
 800871e:	2100      	movs	r1, #0
 8008720:	f7ff ff99 	bl	8008656 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008724:	4603      	mov	r3, r0
 8008726:	b100      	cbz	r0, 800872a <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008728:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800872a:	4618      	mov	r0, r3
 800872c:	bd10      	pop	{r4, pc}
	...

08008730 <xQueueGenericSend>:
{
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	b085      	sub	sp, #20
 8008734:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008736:	b160      	cbz	r0, 8008752 <xQueueGenericSend+0x22>
 8008738:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800873a:	b999      	cbnz	r1, 8008764 <xQueueGenericSend+0x34>
 800873c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800873e:	b18a      	cbz	r2, 8008764 <xQueueGenericSend+0x34>
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	e7fe      	b.n	8008750 <xQueueGenericSend+0x20>
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	e7fe      	b.n	8008762 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008764:	2b02      	cmp	r3, #2
 8008766:	d10b      	bne.n	8008780 <xQueueGenericSend+0x50>
 8008768:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800876a:	2a01      	cmp	r2, #1
 800876c:	d008      	beq.n	8008780 <xQueueGenericSend+0x50>
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	e7fe      	b.n	800877e <xQueueGenericSend+0x4e>
 8008780:	461e      	mov	r6, r3
 8008782:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008784:	f001 f902 	bl	800998c <xTaskGetSchedulerState>
 8008788:	b950      	cbnz	r0, 80087a0 <xQueueGenericSend+0x70>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	b153      	cbz	r3, 80087a4 <xQueueGenericSend+0x74>
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	e7fe      	b.n	800879e <xQueueGenericSend+0x6e>
 80087a0:	2500      	movs	r5, #0
 80087a2:	e03a      	b.n	800881a <xQueueGenericSend+0xea>
 80087a4:	2500      	movs	r5, #0
 80087a6:	e038      	b.n	800881a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087a8:	4632      	mov	r2, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff fe32 	bl	8008416 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b4:	b94b      	cbnz	r3, 80087ca <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 80087b6:	b1a8      	cbz	r0, 80087e4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80087b8:	4b3b      	ldr	r3, [pc, #236]	; (80088a8 <xQueueGenericSend+0x178>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	e00c      	b.n	80087e4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087ce:	f001 f81f 	bl	8009810 <xTaskRemoveFromEventList>
 80087d2:	b138      	cbz	r0, 80087e4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 80087d4:	4b34      	ldr	r3, [pc, #208]	; (80088a8 <xQueueGenericSend+0x178>)
 80087d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087e4:	f7ff fcd8 	bl	8008198 <vPortExitCritical>
				return pdPASS;
 80087e8:	2001      	movs	r0, #1
}
 80087ea:	b005      	add	sp, #20
 80087ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80087ee:	f7ff fcd3 	bl	8008198 <vPortExitCritical>
					return errQUEUE_FULL;
 80087f2:	2000      	movs	r0, #0
 80087f4:	e7f9      	b.n	80087ea <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087f6:	a802      	add	r0, sp, #8
 80087f8:	f001 f852 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087fc:	2501      	movs	r5, #1
 80087fe:	e019      	b.n	8008834 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008800:	2300      	movs	r3, #0
 8008802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008806:	e021      	b.n	800884c <xQueueGenericSend+0x11c>
 8008808:	2300      	movs	r3, #0
 800880a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800880e:	e023      	b.n	8008858 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008810:	4620      	mov	r0, r4
 8008812:	f7ff fe4d 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008816:	f000 fea3 	bl	8009560 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800881a:	f7ff fc9b 	bl	8008154 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d3c0      	bcc.n	80087a8 <xQueueGenericSend+0x78>
 8008826:	2e02      	cmp	r6, #2
 8008828:	d0be      	beq.n	80087a8 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0de      	beq.n	80087ee <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008830:	2d00      	cmp	r5, #0
 8008832:	d0e0      	beq.n	80087f6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008834:	f7ff fcb0 	bl	8008198 <vPortExitCritical>
		vTaskSuspendAll();
 8008838:	f000 fdde 	bl	80093f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800883c:	f7ff fc8a 	bl	8008154 <vPortEnterCritical>
 8008840:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008844:	b25b      	sxtb	r3, r3
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d0d9      	beq.n	8008800 <xQueueGenericSend+0xd0>
 800884c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008850:	b25b      	sxtb	r3, r3
 8008852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008856:	d0d7      	beq.n	8008808 <xQueueGenericSend+0xd8>
 8008858:	f7ff fc9e 	bl	8008198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800885c:	a901      	add	r1, sp, #4
 800885e:	a802      	add	r0, sp, #8
 8008860:	f001 f82a 	bl	80098b8 <xTaskCheckForTimeOut>
 8008864:	b9c8      	cbnz	r0, 800889a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fdb9 	bl	80083de <prvIsQueueFull>
 800886c:	2800      	cmp	r0, #0
 800886e:	d0cf      	beq.n	8008810 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008870:	9901      	ldr	r1, [sp, #4]
 8008872:	f104 0010 	add.w	r0, r4, #16
 8008876:	f000 ff97 	bl	80097a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff fe18 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008880:	f000 fe6e 	bl	8009560 <xTaskResumeAll>
 8008884:	2800      	cmp	r0, #0
 8008886:	d1c8      	bne.n	800881a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <xQueueGenericSend+0x178>)
 800888a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	e7bf      	b.n	800881a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff fe08 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088a0:	f000 fe5e 	bl	8009560 <xTaskResumeAll>
			return errQUEUE_FULL;
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7a0      	b.n	80087ea <xQueueGenericSend+0xba>
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80088ac:	b148      	cbz	r0, 80088c2 <prvInitialiseMutex+0x16>
	{
 80088ae:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80088b0:	2100      	movs	r1, #0
 80088b2:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088b4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80088b6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088b8:	460b      	mov	r3, r1
 80088ba:	460a      	mov	r2, r1
 80088bc:	f7ff ff38 	bl	8008730 <xQueueGenericSend>
	}
 80088c0:	bd08      	pop	{r3, pc}
 80088c2:	4770      	bx	lr

080088c4 <xQueueCreateMutex>:
	{
 80088c4:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088c6:	4602      	mov	r2, r0
 80088c8:	2100      	movs	r1, #0
 80088ca:	2001      	movs	r0, #1
 80088cc:	f7ff fec3 	bl	8008656 <xQueueGenericCreate>
 80088d0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80088d2:	f7ff ffeb 	bl	80088ac <prvInitialiseMutex>
	}
 80088d6:	4620      	mov	r0, r4
 80088d8:	bd10      	pop	{r4, pc}

080088da <xQueueCreateMutexStatic>:
	{
 80088da:	b510      	push	{r4, lr}
 80088dc:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088de:	9000      	str	r0, [sp, #0]
 80088e0:	460b      	mov	r3, r1
 80088e2:	2200      	movs	r2, #0
 80088e4:	4611      	mov	r1, r2
 80088e6:	2001      	movs	r0, #1
 80088e8:	f7ff fe6d 	bl	80085c6 <xQueueGenericCreateStatic>
 80088ec:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80088ee:	f7ff ffdd 	bl	80088ac <prvInitialiseMutex>
	}
 80088f2:	4620      	mov	r0, r4
 80088f4:	b002      	add	sp, #8
 80088f6:	bd10      	pop	{r4, pc}

080088f8 <xQueueGiveMutexRecursive>:
	{
 80088f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80088fa:	b940      	cbnz	r0, 800890e <xQueueGiveMutexRecursive+0x16>
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	e7fe      	b.n	800890c <xQueueGiveMutexRecursive+0x14>
 800890e:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8008910:	6845      	ldr	r5, [r0, #4]
 8008912:	f001 f835 	bl	8009980 <xTaskGetCurrentTaskHandle>
 8008916:	4285      	cmp	r5, r0
 8008918:	d001      	beq.n	800891e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800891a:	2000      	movs	r0, #0
	}
 800891c:	bd38      	pop	{r3, r4, r5, pc}
			( pxMutex->u.uxRecursiveCallCount )--;
 800891e:	68e3      	ldr	r3, [r4, #12]
 8008920:	3b01      	subs	r3, #1
 8008922:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008924:	b933      	cbnz	r3, 8008934 <xQueueGiveMutexRecursive+0x3c>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008926:	461a      	mov	r2, r3
 8008928:	4619      	mov	r1, r3
 800892a:	4620      	mov	r0, r4
 800892c:	f7ff ff00 	bl	8008730 <xQueueGenericSend>
			xReturn = pdPASS;
 8008930:	2001      	movs	r0, #1
 8008932:	e7f3      	b.n	800891c <xQueueGiveMutexRecursive+0x24>
 8008934:	2001      	movs	r0, #1
		return xReturn;
 8008936:	e7f1      	b.n	800891c <xQueueGiveMutexRecursive+0x24>

08008938 <xQueueGenericSendFromISR>:
{
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800893c:	b160      	cbz	r0, 8008958 <xQueueGenericSendFromISR+0x20>
 800893e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008940:	b999      	cbnz	r1, 800896a <xQueueGenericSendFromISR+0x32>
 8008942:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008944:	b188      	cbz	r0, 800896a <xQueueGenericSendFromISR+0x32>
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	e7fe      	b.n	8008956 <xQueueGenericSendFromISR+0x1e>
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	e7fe      	b.n	8008968 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800896a:	2b02      	cmp	r3, #2
 800896c:	d10b      	bne.n	8008986 <xQueueGenericSendFromISR+0x4e>
 800896e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008970:	2801      	cmp	r0, #1
 8008972:	d008      	beq.n	8008986 <xQueueGenericSendFromISR+0x4e>
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	e7fe      	b.n	8008984 <xQueueGenericSendFromISR+0x4c>
 8008986:	461f      	mov	r7, r3
 8008988:	4690      	mov	r8, r2
 800898a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800898c:	f7ff fcf0 	bl	8008370 <vPortValidateInterruptPriority>
	__asm volatile
 8008990:	f3ef 8611 	mrs	r6, BASEPRI
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d303      	bcc.n	80089b4 <xQueueGenericSendFromISR+0x7c>
 80089ac:	2f02      	cmp	r7, #2
 80089ae:	d001      	beq.n	80089b4 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80089b0:	2000      	movs	r0, #0
 80089b2:	e00f      	b.n	80089d4 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80089b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80089b8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ba:	463a      	mov	r2, r7
 80089bc:	4649      	mov	r1, r9
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff fd29 	bl	8008416 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80089c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80089c8:	d008      	beq.n	80089dc <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089ca:	1c6b      	adds	r3, r5, #1
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80089d2:	2001      	movs	r0, #1
	__asm volatile
 80089d4:	f386 8811 	msr	BASEPRI, r6
}
 80089d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089de:	b15b      	cbz	r3, 80089f8 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089e4:	f000 ff14 	bl	8009810 <xTaskRemoveFromEventList>
 80089e8:	b140      	cbz	r0, 80089fc <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80089ea:	f1b8 0f00 	cmp.w	r8, #0
 80089ee:	d007      	beq.n	8008a00 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089f0:	2001      	movs	r0, #1
 80089f2:	f8c8 0000 	str.w	r0, [r8]
 80089f6:	e7ed      	b.n	80089d4 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80089f8:	2001      	movs	r0, #1
 80089fa:	e7eb      	b.n	80089d4 <xQueueGenericSendFromISR+0x9c>
 80089fc:	2001      	movs	r0, #1
 80089fe:	e7e9      	b.n	80089d4 <xQueueGenericSendFromISR+0x9c>
 8008a00:	2001      	movs	r0, #1
 8008a02:	e7e7      	b.n	80089d4 <xQueueGenericSendFromISR+0x9c>

08008a04 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008a04:	b160      	cbz	r0, 8008a20 <xQueueGiveFromISR+0x1c>
{
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a0c:	b18b      	cbz	r3, 8008a32 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	e7fe      	b.n	8008a1e <xQueueGiveFromISR+0x1a>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	e7fe      	b.n	8008a30 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008a32:	6803      	ldr	r3, [r0, #0]
 8008a34:	b32b      	cbz	r3, 8008a82 <xQueueGiveFromISR+0x7e>
 8008a36:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a38:	f7ff fc9a 	bl	8008370 <vPortValidateInterruptPriority>
	__asm volatile
 8008a3c:	f3ef 8511 	mrs	r5, BASEPRI
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d926      	bls.n	8008aa6 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a58:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a5c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a5e:	3201      	adds	r2, #1
 8008a60:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d118      	bne.n	8008a9a <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6a:	b1f3      	cbz	r3, 8008aaa <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a70:	f000 fece 	bl	8009810 <xTaskRemoveFromEventList>
 8008a74:	b1d8      	cbz	r0, 8008aae <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8008a76:	b1e6      	cbz	r6, 8008ab2 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a78:	2001      	movs	r0, #1
 8008a7a:	6030      	str	r0, [r6, #0]
	__asm volatile
 8008a7c:	f385 8811 	msr	BASEPRI, r5
}
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008a82:	6843      	ldr	r3, [r0, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0d6      	beq.n	8008a36 <xQueueGiveFromISR+0x32>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	e7fe      	b.n	8008a98 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7ea      	b.n	8008a7c <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7e8      	b.n	8008a7c <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7e6      	b.n	8008a7c <xQueueGiveFromISR+0x78>
 8008aae:	2001      	movs	r0, #1
 8008ab0:	e7e4      	b.n	8008a7c <xQueueGiveFromISR+0x78>
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7e2      	b.n	8008a7c <xQueueGiveFromISR+0x78>
	...

08008ab8 <xQueueReceive>:
{
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aba:	b085      	sub	sp, #20
 8008abc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008abe:	b160      	cbz	r0, 8008ada <xQueueReceive+0x22>
 8008ac0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac2:	b999      	cbnz	r1, 8008aec <xQueueReceive+0x34>
 8008ac4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008ac6:	b18b      	cbz	r3, 8008aec <xQueueReceive+0x34>
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	e7fe      	b.n	8008ad8 <xQueueReceive+0x20>
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	e7fe      	b.n	8008aea <xQueueReceive+0x32>
 8008aec:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aee:	f000 ff4d 	bl	800998c <xTaskGetSchedulerState>
 8008af2:	b950      	cbnz	r0, 8008b0a <xQueueReceive+0x52>
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	b153      	cbz	r3, 8008b0e <xQueueReceive+0x56>
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	e7fe      	b.n	8008b08 <xQueueReceive+0x50>
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	e03e      	b.n	8008b8c <xQueueReceive+0xd4>
 8008b0e:	2600      	movs	r6, #0
 8008b10:	e03c      	b.n	8008b8c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b12:	4639      	mov	r1, r7
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7ff fcb9 	bl	800848c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b1a:	3d01      	subs	r5, #1
 8008b1c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	b923      	cbnz	r3, 8008b2c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8008b22:	f7ff fb39 	bl	8008198 <vPortExitCritical>
				return pdPASS;
 8008b26:	2001      	movs	r0, #1
}
 8008b28:	b005      	add	sp, #20
 8008b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b2c:	f104 0010 	add.w	r0, r4, #16
 8008b30:	f000 fe6e 	bl	8009810 <xTaskRemoveFromEventList>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d0f4      	beq.n	8008b22 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008b38:	4b34      	ldr	r3, [pc, #208]	; (8008c0c <xQueueReceive+0x154>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	e7eb      	b.n	8008b22 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008b4a:	f7ff fb25 	bl	8008198 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008b4e:	2000      	movs	r0, #0
 8008b50:	e7ea      	b.n	8008b28 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b52:	a802      	add	r0, sp, #8
 8008b54:	f000 fea4 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b58:	2601      	movs	r6, #1
 8008b5a:	e021      	b.n	8008ba0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b62:	e029      	b.n	8008bb8 <xQueueReceive+0x100>
 8008b64:	2300      	movs	r3, #0
 8008b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b6a:	e02b      	b.n	8008bc4 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff fc9f 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b72:	f000 fcf5 	bl	8009560 <xTaskResumeAll>
 8008b76:	e009      	b.n	8008b8c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff fc99 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7e:	f000 fcef 	bl	8009560 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7ff fc3a 	bl	80083fc <prvIsQueueEmpty>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d13d      	bne.n	8008c08 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8008b8c:	f7ff fae2 	bl	8008154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b92:	2d00      	cmp	r5, #0
 8008b94:	d1bd      	bne.n	8008b12 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0d6      	beq.n	8008b4a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	d0d8      	beq.n	8008b52 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8008ba0:	f7ff fafa 	bl	8008198 <vPortExitCritical>
		vTaskSuspendAll();
 8008ba4:	f000 fc28 	bl	80093f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba8:	f7ff fad4 	bl	8008154 <vPortEnterCritical>
 8008bac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d0d1      	beq.n	8008b5c <xQueueReceive+0xa4>
 8008bb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d0cf      	beq.n	8008b64 <xQueueReceive+0xac>
 8008bc4:	f7ff fae8 	bl	8008198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc8:	a901      	add	r1, sp, #4
 8008bca:	a802      	add	r0, sp, #8
 8008bcc:	f000 fe74 	bl	80098b8 <xTaskCheckForTimeOut>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d1d1      	bne.n	8008b78 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff fc11 	bl	80083fc <prvIsQueueEmpty>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0c6      	beq.n	8008b6c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bde:	9901      	ldr	r1, [sp, #4]
 8008be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008be4:	f000 fde0 	bl	80097a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7ff fc61 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bee:	f000 fcb7 	bl	8009560 <xTaskResumeAll>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d1ca      	bne.n	8008b8c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8008bf6:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <xQueueReceive+0x154>)
 8008bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	e7c1      	b.n	8008b8c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e78d      	b.n	8008b28 <xQueueReceive+0x70>
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <xQueueSemaphoreTake>:
{
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008c16:	b940      	cbnz	r0, 8008c2a <xQueueSemaphoreTake+0x1a>
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	e7fe      	b.n	8008c28 <xQueueSemaphoreTake+0x18>
 8008c2a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c2e:	b143      	cbz	r3, 8008c42 <xQueueSemaphoreTake+0x32>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	e7fe      	b.n	8008c40 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c42:	f000 fea3 	bl	800998c <xTaskGetSchedulerState>
 8008c46:	b950      	cbnz	r0, 8008c5e <xQueueSemaphoreTake+0x4e>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	b15b      	cbz	r3, 8008c64 <xQueueSemaphoreTake+0x54>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	e7fe      	b.n	8008c5c <xQueueSemaphoreTake+0x4c>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	462e      	mov	r6, r5
 8008c62:	e051      	b.n	8008d08 <xQueueSemaphoreTake+0xf8>
 8008c64:	2500      	movs	r5, #0
 8008c66:	462e      	mov	r6, r5
 8008c68:	e04e      	b.n	8008d08 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	b913      	cbnz	r3, 8008c78 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008c72:	f000 ff7f 	bl	8009b74 <pvTaskIncrementMutexHeldCount>
 8008c76:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	b163      	cbz	r3, 8008c96 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c7c:	f104 0010 	add.w	r0, r4, #16
 8008c80:	f000 fdc6 	bl	8009810 <xTaskRemoveFromEventList>
 8008c84:	b138      	cbz	r0, 8008c96 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8008c86:	4b48      	ldr	r3, [pc, #288]	; (8008da8 <xQueueSemaphoreTake+0x198>)
 8008c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008c96:	f7ff fa7f 	bl	8008198 <vPortExitCritical>
				return pdPASS;
 8008c9a:	2501      	movs	r5, #1
}
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	b004      	add	sp, #16
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ca2:	b145      	cbz	r5, 8008cb6 <xQueueSemaphoreTake+0xa6>
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	e7fe      	b.n	8008cb4 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8008cb6:	f7ff fa6f 	bl	8008198 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008cba:	e7ef      	b.n	8008c9c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cbc:	a802      	add	r0, sp, #8
 8008cbe:	f000 fdef 	bl	80098a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cc2:	2601      	movs	r6, #1
 8008cc4:	e02a      	b.n	8008d1c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ccc:	e032      	b.n	8008d34 <xQueueSemaphoreTake+0x124>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd4:	e034      	b.n	8008d40 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 8008cd6:	f7ff fa3d 	bl	8008154 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008cda:	6860      	ldr	r0, [r4, #4]
 8008cdc:	f000 fe66 	bl	80099ac <xTaskPriorityInherit>
 8008ce0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008ce2:	f7ff fa59 	bl	8008198 <vPortExitCritical>
 8008ce6:	e03b      	b.n	8008d60 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7ff fbe1 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cee:	f000 fc37 	bl	8009560 <xTaskResumeAll>
 8008cf2:	e009      	b.n	8008d08 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f7ff fbdb 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfa:	f000 fc31 	bl	8009560 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f7ff fb7c 	bl	80083fc <prvIsQueueEmpty>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d140      	bne.n	8008d8a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8008d08:	f7ff fa24 	bl	8008154 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1ab      	bne.n	8008c6a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d12:	9b01      	ldr	r3, [sp, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c4      	beq.n	8008ca2 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d0cf      	beq.n	8008cbc <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8008d1c:	f7ff fa3c 	bl	8008198 <vPortExitCritical>
		vTaskSuspendAll();
 8008d20:	f000 fb6a 	bl	80093f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d24:	f7ff fa16 	bl	8008154 <vPortEnterCritical>
 8008d28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d2c:	b25b      	sxtb	r3, r3
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d0c8      	beq.n	8008cc6 <xQueueSemaphoreTake+0xb6>
 8008d34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d38:	b25b      	sxtb	r3, r3
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d0c6      	beq.n	8008cce <xQueueSemaphoreTake+0xbe>
 8008d40:	f7ff fa2a 	bl	8008198 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d44:	a901      	add	r1, sp, #4
 8008d46:	a802      	add	r0, sp, #8
 8008d48:	f000 fdb6 	bl	80098b8 <xTaskCheckForTimeOut>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d1d1      	bne.n	8008cf4 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7ff fb53 	bl	80083fc <prvIsQueueEmpty>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d0c6      	beq.n	8008ce8 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ba      	beq.n	8008cd6 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d60:	9901      	ldr	r1, [sp, #4]
 8008d62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d66:	f000 fd1f 	bl	80097a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff fba0 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d70:	f000 fbf6 	bl	8009560 <xTaskResumeAll>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d1c7      	bne.n	8008d08 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <xQueueSemaphoreTake+0x198>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	e7be      	b.n	8008d08 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	d086      	beq.n	8008c9c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 8008d8e:	f7ff f9e1 	bl	8008154 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff fb1a 	bl	80083cc <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008d98:	4601      	mov	r1, r0
 8008d9a:	6860      	ldr	r0, [r4, #4]
 8008d9c:	f000 fe9a 	bl	8009ad4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008da0:	f7ff f9fa 	bl	8008198 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008da4:	2500      	movs	r5, #0
 8008da6:	e779      	b.n	8008c9c <xQueueSemaphoreTake+0x8c>
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8008dac:	b940      	cbnz	r0, 8008dc0 <xQueueTakeMutexRecursive+0x14>
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	e7fe      	b.n	8008dbe <xQueueTakeMutexRecursive+0x12>
	{
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460d      	mov	r5, r1
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008dc6:	6846      	ldr	r6, [r0, #4]
 8008dc8:	f000 fdda 	bl	8009980 <xTaskGetCurrentTaskHandle>
 8008dcc:	4286      	cmp	r6, r0
 8008dce:	d009      	beq.n	8008de4 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7ff ff1c 	bl	8008c10 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008dd8:	4602      	mov	r2, r0
 8008dda:	b138      	cbz	r0, 8008dec <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.uxRecursiveCallCount )++;
 8008ddc:	68e3      	ldr	r3, [r4, #12]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008de2:	e003      	b.n	8008dec <xQueueTakeMutexRecursive+0x40>
			( pxMutex->u.uxRecursiveCallCount )++;
 8008de4:	68e3      	ldr	r3, [r4, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8008dea:	2201      	movs	r2, #1
	}
 8008dec:	4610      	mov	r0, r2
 8008dee:	bd70      	pop	{r4, r5, r6, pc}

08008df0 <xQueueReceiveFromISR>:
{
 8008df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008df4:	b160      	cbz	r0, 8008e10 <xQueueReceiveFromISR+0x20>
 8008df6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df8:	b999      	cbnz	r1, 8008e22 <xQueueReceiveFromISR+0x32>
 8008dfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008dfc:	b18b      	cbz	r3, 8008e22 <xQueueReceiveFromISR+0x32>
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	e7fe      	b.n	8008e0e <xQueueReceiveFromISR+0x1e>
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	e7fe      	b.n	8008e20 <xQueueReceiveFromISR+0x30>
 8008e22:	4617      	mov	r7, r2
 8008e24:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e26:	f7ff faa3 	bl	8008370 <vPortValidateInterruptPriority>
	__asm volatile
 8008e2a:	f3ef 8611 	mrs	r6, BASEPRI
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e3e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e42:	f1b8 0f00 	cmp.w	r8, #0
 8008e46:	d01d      	beq.n	8008e84 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e48:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008e4c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fb1b 	bl	800848c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e56:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e5a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008e5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008e60:	d005      	beq.n	8008e6e <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e62:	1c6b      	adds	r3, r5, #1
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	e00b      	b.n	8008e86 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b16b      	cbz	r3, 8008e8e <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e72:	f104 0010 	add.w	r0, r4, #16
 8008e76:	f000 fccb 	bl	8009810 <xTaskRemoveFromEventList>
 8008e7a:	b150      	cbz	r0, 8008e92 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8008e7c:	b15f      	cbz	r7, 8008e96 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e7e:	2001      	movs	r0, #1
 8008e80:	6038      	str	r0, [r7, #0]
 8008e82:	e000      	b.n	8008e86 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8008e84:	2000      	movs	r0, #0
	__asm volatile
 8008e86:	f386 8811 	msr	BASEPRI, r6
}
 8008e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 8008e8e:	2001      	movs	r0, #1
 8008e90:	e7f9      	b.n	8008e86 <xQueueReceiveFromISR+0x96>
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7f7      	b.n	8008e86 <xQueueReceiveFromISR+0x96>
 8008e96:	2001      	movs	r0, #1
 8008e98:	e7f5      	b.n	8008e86 <xQueueReceiveFromISR+0x96>
	...

08008e9c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2b07      	cmp	r3, #7
 8008ea0:	d80c      	bhi.n	8008ebc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ea2:	4a07      	ldr	r2, [pc, #28]	; (8008ec0 <vQueueAddToRegistry+0x24>)
 8008ea4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ea8:	b10a      	cbz	r2, 8008eae <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eaa:	3301      	adds	r3, #1
 8008eac:	e7f7      	b.n	8008e9e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008eae:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <vQueueAddToRegistry+0x24>)
 8008eb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eb8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eba:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	200046e4 	.word	0x200046e4

08008ec4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	2b07      	cmp	r3, #7
 8008ec8:	d80f      	bhi.n	8008eea <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008eca:	4a08      	ldr	r2, [pc, #32]	; (8008eec <vQueueUnregisterQueue+0x28>)
 8008ecc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008ed0:	6852      	ldr	r2, [r2, #4]
 8008ed2:	4282      	cmp	r2, r0
 8008ed4:	d001      	beq.n	8008eda <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	e7f5      	b.n	8008ec6 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008eda:	4a04      	ldr	r2, [pc, #16]	; (8008eec <vQueueUnregisterQueue+0x28>)
 8008edc:	2100      	movs	r1, #0
 8008ede:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ee2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ee6:	6059      	str	r1, [r3, #4]
				break;
 8008ee8:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008eea:	4770      	bx	lr
 8008eec:	200046e4 	.word	0x200046e4

08008ef0 <vQueueDelete>:
	configASSERT( pxQueue );
 8008ef0:	b940      	cbnz	r0, 8008f04 <vQueueDelete+0x14>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	e7fe      	b.n	8008f02 <vQueueDelete+0x12>
{
 8008f04:	b510      	push	{r4, lr}
 8008f06:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8008f08:	f7ff ffdc 	bl	8008ec4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f10:	b103      	cbz	r3, 8008f14 <vQueueDelete+0x24>
}
 8008f12:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 8008f14:	4620      	mov	r0, r4
 8008f16:	f7ff f831 	bl	8007f7c <vPortFree>
}
 8008f1a:	e7fa      	b.n	8008f12 <vQueueDelete+0x22>

08008f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f24:	f7ff f916 	bl	8008154 <vPortEnterCritical>
 8008f28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f2c:	b25b      	sxtb	r3, r3
 8008f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f32:	d00d      	beq.n	8008f50 <vQueueWaitForMessageRestricted+0x34>
 8008f34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f38:	b25b      	sxtb	r3, r3
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d00b      	beq.n	8008f58 <vQueueWaitForMessageRestricted+0x3c>
 8008f40:	f7ff f92a 	bl	8008198 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f46:	b15b      	cbz	r3, 8008f60 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7ff fab1 	bl	80084b0 <prvUnlockQueue>
	}
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008f50:	2300      	movs	r3, #0
 8008f52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f56:	e7ed      	b.n	8008f34 <vQueueWaitForMessageRestricted+0x18>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f5e:	e7ef      	b.n	8008f40 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f60:	4632      	mov	r2, r6
 8008f62:	4629      	mov	r1, r5
 8008f64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f68:	f000 fc36 	bl	80097d8 <vTaskPlaceOnEventListRestricted>
 8008f6c:	e7ec      	b.n	8008f48 <vQueueWaitForMessageRestricted+0x2c>
	...

08008f70 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <prvGetExpectedIdleTime+0x38>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	b953      	cbnz	r3, 8008f8c <prvGetExpectedIdleTime+0x1c>
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008f76:	2200      	movs	r2, #0
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <prvGetExpectedIdleTime+0x3c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	b973      	cbnz	r3, 8008f9e <prvGetExpectedIdleTime+0x2e>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008f80:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <prvGetExpectedIdleTime+0x40>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d903      	bls.n	8008f90 <prvGetExpectedIdleTime+0x20>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4770      	bx	lr
				uxHigherPriorityReadyTasks = pdTRUE;
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	e7f3      	b.n	8008f78 <prvGetExpectedIdleTime+0x8>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008f90:	b93a      	cbnz	r2, 8008fa2 <prvGetExpectedIdleTime+0x32>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008f92:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <prvGetExpectedIdleTime+0x44>)
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <prvGetExpectedIdleTime+0x48>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	1ac0      	subs	r0, r0, r3
 8008f9c:	4770      	bx	lr
			xReturn = 0;
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	4770      	bx	lr
			xReturn = 0;
 8008fa2:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20003c14 	.word	0x20003c14
 8008fac:	20003794 	.word	0x20003794
 8008fb0:	200037a0 	.word	0x200037a0
 8008fb4:	20003c40 	.word	0x20003c40
 8008fb8:	20003c88 	.word	0x20003c88

08008fbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <prvResetNextTaskUnblockTime+0x24>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	b13b      	cbz	r3, 8008fd4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fc4:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <prvResetNextTaskUnblockTime+0x24>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <prvResetNextTaskUnblockTime+0x28>)
 8008fd0:	601a      	str	r2, [r3, #0]
	}
}
 8008fd2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <prvResetNextTaskUnblockTime+0x28>)
 8008fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20003798 	.word	0x20003798
 8008fe4:	20003c40 	.word	0x20003c40

08008fe8 <prvInitialiseNewTask>:
{
 8008fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	4681      	mov	r9, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	4617      	mov	r7, r2
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	9e08      	ldr	r6, [sp, #32]
 8008ff6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008ffa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ffc:	0092      	lsls	r2, r2, #2
 8008ffe:	21a5      	movs	r1, #165	; 0xa5
 8009000:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009002:	f002 ff20 	bl	800be46 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009008:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800900c:	3a01      	subs	r2, #1
 800900e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009012:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009016:	2300      	movs	r3, #0
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d807      	bhi.n	800902c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800901c:	5ce9      	ldrb	r1, [r5, r3]
 800901e:	18e2      	adds	r2, r4, r3
 8009020:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8009024:	5cea      	ldrb	r2, [r5, r3]
 8009026:	b10a      	cbz	r2, 800902c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009028:	3301      	adds	r3, #1
 800902a:	e7f5      	b.n	8009018 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800902c:	2300      	movs	r3, #0
 800902e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009032:	2e37      	cmp	r6, #55	; 0x37
 8009034:	d900      	bls.n	8009038 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009036:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009038:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800903a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800903c:	2500      	movs	r5, #0
 800903e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009040:	1d20      	adds	r0, r4, #4
 8009042:	f7fe ffde 	bl	8008002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009046:	f104 0018 	add.w	r0, r4, #24
 800904a:	f7fe ffda 	bl	8008002 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800904e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009054:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009056:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009058:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800905a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800905e:	4652      	mov	r2, sl
 8009060:	4649      	mov	r1, r9
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff f848 	bl	80080f8 <pxPortInitialiseStack>
 8009068:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800906a:	f1b8 0f00 	cmp.w	r8, #0
 800906e:	d001      	beq.n	8009074 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009070:	f8c8 4000 	str.w	r4, [r8]
}
 8009074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009078 <prvInitialiseTaskLists>:
{
 8009078:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907a:	2400      	movs	r4, #0
 800907c:	e007      	b.n	800908e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800907e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009082:	0093      	lsls	r3, r2, #2
 8009084:	480e      	ldr	r0, [pc, #56]	; (80090c0 <prvInitialiseTaskLists+0x48>)
 8009086:	4418      	add	r0, r3
 8009088:	f7fe ffb0 	bl	8007fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908c:	3401      	adds	r4, #1
 800908e:	2c37      	cmp	r4, #55	; 0x37
 8009090:	d9f5      	bls.n	800907e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009092:	4d0c      	ldr	r5, [pc, #48]	; (80090c4 <prvInitialiseTaskLists+0x4c>)
 8009094:	4628      	mov	r0, r5
 8009096:	f7fe ffa9 	bl	8007fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800909a:	4c0b      	ldr	r4, [pc, #44]	; (80090c8 <prvInitialiseTaskLists+0x50>)
 800909c:	4620      	mov	r0, r4
 800909e:	f7fe ffa5 	bl	8007fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090a2:	480a      	ldr	r0, [pc, #40]	; (80090cc <prvInitialiseTaskLists+0x54>)
 80090a4:	f7fe ffa2 	bl	8007fec <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80090a8:	4809      	ldr	r0, [pc, #36]	; (80090d0 <prvInitialiseTaskLists+0x58>)
 80090aa:	f7fe ff9f 	bl	8007fec <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80090ae:	4809      	ldr	r0, [pc, #36]	; (80090d4 <prvInitialiseTaskLists+0x5c>)
 80090b0:	f7fe ff9c 	bl	8007fec <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <prvInitialiseTaskLists+0x60>)
 80090b6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <prvInitialiseTaskLists+0x64>)
 80090ba:	601c      	str	r4, [r3, #0]
}
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	bf00      	nop
 80090c0:	200037a0 	.word	0x200037a0
 80090c4:	20003c18 	.word	0x20003c18
 80090c8:	20003c2c 	.word	0x20003c2c
 80090cc:	20003c48 	.word	0x20003c48
 80090d0:	20003c74 	.word	0x20003c74
 80090d4:	20003c60 	.word	0x20003c60
 80090d8:	20003798 	.word	0x20003798
 80090dc:	2000379c 	.word	0x2000379c

080090e0 <prvAddNewTaskToReadyList>:
{
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80090e4:	f7ff f836 	bl	8008154 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80090e8:	4a21      	ldr	r2, [pc, #132]	; (8009170 <prvAddNewTaskToReadyList+0x90>)
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090f0:	4b20      	ldr	r3, [pc, #128]	; (8009174 <prvAddNewTaskToReadyList+0x94>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	b15b      	cbz	r3, 800910e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80090f6:	4b20      	ldr	r3, [pc, #128]	; (8009178 <prvAddNewTaskToReadyList+0x98>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	b96b      	cbnz	r3, 8009118 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090fc:	4b1d      	ldr	r3, [pc, #116]	; (8009174 <prvAddNewTaskToReadyList+0x94>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009104:	429a      	cmp	r2, r3
 8009106:	d807      	bhi.n	8009118 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009108:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <prvAddNewTaskToReadyList+0x94>)
 800910a:	601c      	str	r4, [r3, #0]
 800910c:	e004      	b.n	8009118 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800910e:	4b19      	ldr	r3, [pc, #100]	; (8009174 <prvAddNewTaskToReadyList+0x94>)
 8009110:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d027      	beq.n	8009168 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8009118:	4a18      	ldr	r2, [pc, #96]	; (800917c <prvAddNewTaskToReadyList+0x9c>)
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009120:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009124:	4a16      	ldr	r2, [pc, #88]	; (8009180 <prvAddNewTaskToReadyList+0xa0>)
 8009126:	6812      	ldr	r2, [r2, #0]
 8009128:	4293      	cmp	r3, r2
 800912a:	d901      	bls.n	8009130 <prvAddNewTaskToReadyList+0x50>
 800912c:	4a14      	ldr	r2, [pc, #80]	; (8009180 <prvAddNewTaskToReadyList+0xa0>)
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009134:	009a      	lsls	r2, r3, #2
 8009136:	1d21      	adds	r1, r4, #4
 8009138:	4812      	ldr	r0, [pc, #72]	; (8009184 <prvAddNewTaskToReadyList+0xa4>)
 800913a:	4410      	add	r0, r2
 800913c:	f7fe ff64 	bl	8008008 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009140:	f7ff f82a 	bl	8008198 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvAddNewTaskToReadyList+0x98>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	b16b      	cbz	r3, 8009166 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <prvAddNewTaskToReadyList+0x94>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009152:	429a      	cmp	r2, r3
 8009154:	d207      	bcs.n	8009166 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <prvAddNewTaskToReadyList+0xa8>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
}
 8009166:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009168:	f7ff ff86 	bl	8009078 <prvInitialiseTaskLists>
 800916c:	e7d4      	b.n	8009118 <prvAddNewTaskToReadyList+0x38>
 800916e:	bf00      	nop
 8009170:	20003c00 	.word	0x20003c00
 8009174:	20003794 	.word	0x20003794
 8009178:	20003c5c 	.word	0x20003c5c
 800917c:	20003c10 	.word	0x20003c10
 8009180:	20003c14 	.word	0x20003c14
 8009184:	200037a0 	.word	0x200037a0
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <prvDeleteTCB>:
	{
 800918c:	b510      	push	{r4, lr}
 800918e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009190:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8009194:	b933      	cbnz	r3, 80091a4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8009196:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009198:	f7fe fef0 	bl	8007f7c <vPortFree>
				vPortFree( pxTCB );
 800919c:	4620      	mov	r0, r4
 800919e:	f7fe feed 	bl	8007f7c <vPortFree>
	}
 80091a2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d00a      	beq.n	80091be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d0fa      	beq.n	80091a2 <prvDeleteTCB+0x16>
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	e7fe      	b.n	80091bc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80091be:	f7fe fedd 	bl	8007f7c <vPortFree>
 80091c2:	e7ee      	b.n	80091a2 <prvDeleteTCB+0x16>

080091c4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <prvCheckTasksWaitingTermination+0x40>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b1d3      	cbz	r3, 8009200 <prvCheckTasksWaitingTermination+0x3c>
{
 80091ca:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80091cc:	f7fe ffc2 	bl	8008154 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <prvCheckTasksWaitingTermination+0x44>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d6:	1d20      	adds	r0, r4, #4
 80091d8:	f7fe ff3c 	bl	8008054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <prvCheckTasksWaitingTermination+0x48>)
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091e4:	4a07      	ldr	r2, [pc, #28]	; (8009204 <prvCheckTasksWaitingTermination+0x40>)
 80091e6:	6813      	ldr	r3, [r2, #0]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80091ec:	f7fe ffd4 	bl	8008198 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7ff ffcb 	bl	800918c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f6:	4b03      	ldr	r3, [pc, #12]	; (8009204 <prvCheckTasksWaitingTermination+0x40>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e6      	bne.n	80091cc <prvCheckTasksWaitingTermination+0x8>
}
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20003c04 	.word	0x20003c04
 8009208:	20003c74 	.word	0x20003c74
 800920c:	20003c00 	.word	0x20003c00

08009210 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	4604      	mov	r4, r0
 8009214:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009216:	4b17      	ldr	r3, [pc, #92]	; (8009274 <prvAddCurrentTaskToDelayedList+0x64>)
 8009218:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800921a:	4b17      	ldr	r3, [pc, #92]	; (8009278 <prvAddCurrentTaskToDelayedList+0x68>)
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	3004      	adds	r0, #4
 8009220:	f7fe ff18 	bl	8008054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009224:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009228:	d013      	beq.n	8009252 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800922a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800922c:	4b12      	ldr	r3, [pc, #72]	; (8009278 <prvAddCurrentTaskToDelayedList+0x68>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009232:	42a5      	cmp	r5, r4
 8009234:	d816      	bhi.n	8009264 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <prvAddCurrentTaskToDelayedList+0x68>)
 800923c:	6819      	ldr	r1, [r3, #0]
 800923e:	3104      	adds	r1, #4
 8009240:	f7fe feee 	bl	8008020 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <prvAddCurrentTaskToDelayedList+0x70>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	42a3      	cmp	r3, r4
 800924a:	d912      	bls.n	8009272 <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <prvAddCurrentTaskToDelayedList+0x70>)
 800924e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009250:	e00f      	b.n	8009272 <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009252:	2e00      	cmp	r6, #0
 8009254:	d0e9      	beq.n	800922a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <prvAddCurrentTaskToDelayedList+0x68>)
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	3104      	adds	r1, #4
 800925c:	4809      	ldr	r0, [pc, #36]	; (8009284 <prvAddCurrentTaskToDelayedList+0x74>)
 800925e:	f7fe fed3 	bl	8008008 <vListInsertEnd>
 8009262:	e006      	b.n	8009272 <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009264:	4b08      	ldr	r3, [pc, #32]	; (8009288 <prvAddCurrentTaskToDelayedList+0x78>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	4b03      	ldr	r3, [pc, #12]	; (8009278 <prvAddCurrentTaskToDelayedList+0x68>)
 800926a:	6819      	ldr	r1, [r3, #0]
 800926c:	3104      	adds	r1, #4
 800926e:	f7fe fed7 	bl	8008020 <vListInsert>
}
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	20003c88 	.word	0x20003c88
 8009278:	20003794 	.word	0x20003794
 800927c:	20003798 	.word	0x20003798
 8009280:	20003c40 	.word	0x20003c40
 8009284:	20003c60 	.word	0x20003c60
 8009288:	2000379c 	.word	0x2000379c

0800928c <xTaskCreateStatic>:
	{
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009292:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8009294:	b945      	cbnz	r5, 80092a8 <xTaskCreateStatic+0x1c>
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	e7fe      	b.n	80092a6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80092a8:	b944      	cbnz	r4, 80092bc <xTaskCreateStatic+0x30>
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	e7fe      	b.n	80092ba <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80092bc:	265c      	movs	r6, #92	; 0x5c
 80092be:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092c0:	9e04      	ldr	r6, [sp, #16]
 80092c2:	2e5c      	cmp	r6, #92	; 0x5c
 80092c4:	d008      	beq.n	80092d8 <xTaskCreateStatic+0x4c>
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	e7fe      	b.n	80092d6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092d8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092da:	2502      	movs	r5, #2
 80092dc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092e0:	2500      	movs	r5, #0
 80092e2:	9503      	str	r5, [sp, #12]
 80092e4:	9402      	str	r4, [sp, #8]
 80092e6:	ad05      	add	r5, sp, #20
 80092e8:	9501      	str	r5, [sp, #4]
 80092ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80092ec:	9500      	str	r5, [sp, #0]
 80092ee:	f7ff fe7b 	bl	8008fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7ff fef4 	bl	80090e0 <prvAddNewTaskToReadyList>
	}
 80092f8:	9805      	ldr	r0, [sp, #20]
 80092fa:	b006      	add	sp, #24
 80092fc:	bd70      	pop	{r4, r5, r6, pc}

080092fe <xTaskCreate>:
	{
 80092fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009302:	b085      	sub	sp, #20
 8009304:	4607      	mov	r7, r0
 8009306:	4688      	mov	r8, r1
 8009308:	4615      	mov	r5, r2
 800930a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800930c:	0090      	lsls	r0, r2, #2
 800930e:	f7fe fdb1 	bl	8007e74 <pvPortMalloc>
			if( pxStack != NULL )
 8009312:	b308      	cbz	r0, 8009358 <xTaskCreate+0x5a>
 8009314:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009316:	205c      	movs	r0, #92	; 0x5c
 8009318:	f7fe fdac 	bl	8007e74 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800931c:	4604      	mov	r4, r0
 800931e:	b1b8      	cbz	r0, 8009350 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8009320:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009322:	b1e4      	cbz	r4, 800935e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009324:	2300      	movs	r3, #0
 8009326:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	9402      	str	r4, [sp, #8]
 800932e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	464b      	mov	r3, r9
 8009338:	462a      	mov	r2, r5
 800933a:	4641      	mov	r1, r8
 800933c:	4638      	mov	r0, r7
 800933e:	f7ff fe53 	bl	8008fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fecc 	bl	80090e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009348:	2001      	movs	r0, #1
	}
 800934a:	b005      	add	sp, #20
 800934c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009350:	4630      	mov	r0, r6
 8009352:	f7fe fe13 	bl	8007f7c <vPortFree>
 8009356:	e7e4      	b.n	8009322 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e7f5      	b.n	800934a <xTaskCreate+0x4c>
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009362:	e7f2      	b.n	800934a <xTaskCreate+0x4c>

08009364 <vTaskStartScheduler>:
{
 8009364:	b510      	push	{r4, lr}
 8009366:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009368:	2400      	movs	r4, #0
 800936a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800936c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800936e:	aa07      	add	r2, sp, #28
 8009370:	a906      	add	r1, sp, #24
 8009372:	a805      	add	r0, sp, #20
 8009374:	f7fe fd06 	bl	8007d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9400      	str	r4, [sp, #0]
 8009382:	4623      	mov	r3, r4
 8009384:	9a07      	ldr	r2, [sp, #28]
 8009386:	4917      	ldr	r1, [pc, #92]	; (80093e4 <vTaskStartScheduler+0x80>)
 8009388:	4817      	ldr	r0, [pc, #92]	; (80093e8 <vTaskStartScheduler+0x84>)
 800938a:	f7ff ff7f 	bl	800928c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800938e:	b140      	cbz	r0, 80093a2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8009390:	f000 fdb8 	bl	8009f04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009394:	2801      	cmp	r0, #1
 8009396:	d006      	beq.n	80093a6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800939c:	d018      	beq.n	80093d0 <vTaskStartScheduler+0x6c>
}
 800939e:	b008      	add	sp, #32
 80093a0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80093a2:	2000      	movs	r0, #0
 80093a4:	e7f6      	b.n	8009394 <vTaskStartScheduler+0x30>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <vTaskStartScheduler+0x88>)
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <vTaskStartScheduler+0x8c>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <vTaskStartScheduler+0x90>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80093ca:	f7fe ff49 	bl	8008260 <xPortStartScheduler>
 80093ce:	e7e6      	b.n	800939e <vTaskStartScheduler+0x3a>
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	e7fe      	b.n	80093e0 <vTaskStartScheduler+0x7c>
 80093e2:	bf00      	nop
 80093e4:	0800c044 	.word	0x0800c044
 80093e8:	080096a1 	.word	0x080096a1
 80093ec:	20003c40 	.word	0x20003c40
 80093f0:	20003c5c 	.word	0x20003c5c
 80093f4:	20003c88 	.word	0x20003c88

080093f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80093f8:	4a02      	ldr	r2, [pc, #8]	; (8009404 <vTaskSuspendAll+0xc>)
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	6013      	str	r3, [r2, #0]
}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20003c0c 	.word	0x20003c0c

08009408 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009408:	4b01      	ldr	r3, [pc, #4]	; (8009410 <xTaskGetTickCount+0x8>)
 800940a:	6818      	ldr	r0, [r3, #0]
}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20003c88 	.word	0x20003c88

08009414 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009414:	4b0a      	ldr	r3, [pc, #40]	; (8009440 <vTaskStepTick+0x2c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4403      	add	r3, r0
 800941a:	4a0a      	ldr	r2, [pc, #40]	; (8009444 <vTaskStepTick+0x30>)
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	4293      	cmp	r3, r2
 8009420:	d908      	bls.n	8009434 <vTaskStepTick+0x20>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	e7fe      	b.n	8009432 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 8009434:	4a02      	ldr	r2, [pc, #8]	; (8009440 <vTaskStepTick+0x2c>)
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	4403      	add	r3, r0
 800943a:	6013      	str	r3, [r2, #0]
	}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20003c88 	.word	0x20003c88
 8009444:	20003c40 	.word	0x20003c40

08009448 <xTaskIncrementTick>:
{
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944a:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <xTaskIncrementTick+0xec>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d164      	bne.n	800951c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009452:	4b39      	ldr	r3, [pc, #228]	; (8009538 <xTaskIncrementTick+0xf0>)
 8009454:	681d      	ldr	r5, [r3, #0]
 8009456:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009458:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800945a:	b9c5      	cbnz	r5, 800948e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800945c:	4b37      	ldr	r3, [pc, #220]	; (800953c <xTaskIncrementTick+0xf4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	b143      	cbz	r3, 8009476 <xTaskIncrementTick+0x2e>
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	e7fe      	b.n	8009474 <xTaskIncrementTick+0x2c>
 8009476:	4a31      	ldr	r2, [pc, #196]	; (800953c <xTaskIncrementTick+0xf4>)
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xTaskIncrementTick+0xf8>)
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	6010      	str	r0, [r2, #0]
 8009480:	6019      	str	r1, [r3, #0]
 8009482:	4a30      	ldr	r2, [pc, #192]	; (8009544 <xTaskIncrementTick+0xfc>)
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	f7ff fd97 	bl	8008fbc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <xTaskIncrementTick+0x100>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	42ab      	cmp	r3, r5
 8009494:	d938      	bls.n	8009508 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009496:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009498:	4b2c      	ldr	r3, [pc, #176]	; (800954c <xTaskIncrementTick+0x104>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80094a2:	009a      	lsls	r2, r3, #2
 80094a4:	4b2a      	ldr	r3, [pc, #168]	; (8009550 <xTaskIncrementTick+0x108>)
 80094a6:	589b      	ldr	r3, [r3, r2]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d93c      	bls.n	8009526 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80094ac:	2401      	movs	r4, #1
 80094ae:	e03a      	b.n	8009526 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80094b0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094b2:	4b22      	ldr	r3, [pc, #136]	; (800953c <xTaskIncrementTick+0xf4>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	b343      	cbz	r3, 800950c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <xTaskIncrementTick+0xf4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094c2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80094c4:	429d      	cmp	r5, r3
 80094c6:	d326      	bcc.n	8009516 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c8:	1d37      	adds	r7, r6, #4
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7fe fdc2 	bl	8008054 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80094d2:	b11b      	cbz	r3, 80094dc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094d4:	f106 0018 	add.w	r0, r6, #24
 80094d8:	f7fe fdbc 	bl	8008054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80094de:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <xTaskIncrementTick+0x10c>)
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <xTaskIncrementTick+0xa2>
 80094e6:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <xTaskIncrementTick+0x10c>)
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80094ee:	009a      	lsls	r2, r3, #2
 80094f0:	4639      	mov	r1, r7
 80094f2:	4817      	ldr	r0, [pc, #92]	; (8009550 <xTaskIncrementTick+0x108>)
 80094f4:	4410      	add	r0, r2
 80094f6:	f7fe fd87 	bl	8008008 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094fa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80094fc:	4b13      	ldr	r3, [pc, #76]	; (800954c <xTaskIncrementTick+0x104>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	429a      	cmp	r2, r3
 8009504:	d2d4      	bcs.n	80094b0 <xTaskIncrementTick+0x68>
 8009506:	e7d4      	b.n	80094b2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009508:	2400      	movs	r4, #0
 800950a:	e7d2      	b.n	80094b2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950c:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <xTaskIncrementTick+0x100>)
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	601a      	str	r2, [r3, #0]
					break;
 8009514:	e7c0      	b.n	8009498 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009516:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <xTaskIncrementTick+0x100>)
 8009518:	6013      	str	r3, [r2, #0]
						break;
 800951a:	e7bd      	b.n	8009498 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800951c:	4a0e      	ldr	r2, [pc, #56]	; (8009558 <xTaskIncrementTick+0x110>)
 800951e:	6813      	ldr	r3, [r2, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009524:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009526:	4b0d      	ldr	r3, [pc, #52]	; (800955c <xTaskIncrementTick+0x114>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	b103      	cbz	r3, 800952e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800952c:	2401      	movs	r4, #1
}
 800952e:	4620      	mov	r0, r4
 8009530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009532:	bf00      	nop
 8009534:	20003c0c 	.word	0x20003c0c
 8009538:	20003c88 	.word	0x20003c88
 800953c:	20003798 	.word	0x20003798
 8009540:	2000379c 	.word	0x2000379c
 8009544:	20003c44 	.word	0x20003c44
 8009548:	20003c40 	.word	0x20003c40
 800954c:	20003794 	.word	0x20003794
 8009550:	200037a0 	.word	0x200037a0
 8009554:	20003c14 	.word	0x20003c14
 8009558:	20003c08 	.word	0x20003c08
 800955c:	20003c8c 	.word	0x20003c8c

08009560 <xTaskResumeAll>:
{
 8009560:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <xTaskResumeAll+0xd0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	b943      	cbnz	r3, 800957a <xTaskResumeAll+0x1a>
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	e7fe      	b.n	8009578 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800957a:	f7fe fdeb 	bl	8008154 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800957e:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <xTaskResumeAll+0xd0>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	3a01      	subs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d14d      	bne.n	8009628 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800958c:	4b29      	ldr	r3, [pc, #164]	; (8009634 <xTaskResumeAll+0xd4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	b923      	cbnz	r3, 800959c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8009592:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009594:	f7fe fe00 	bl	8008198 <vPortExitCritical>
}
 8009598:	4620      	mov	r0, r4
 800959a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800959c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800959e:	4b26      	ldr	r3, [pc, #152]	; (8009638 <xTaskResumeAll+0xd8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	b31b      	cbz	r3, 80095ec <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80095a4:	4b24      	ldr	r3, [pc, #144]	; (8009638 <xTaskResumeAll+0xd8>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095aa:	f104 0018 	add.w	r0, r4, #24
 80095ae:	f7fe fd51 	bl	8008054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b2:	1d25      	adds	r5, r4, #4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7fe fd4d 	bl	8008054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095bc:	4a1f      	ldr	r2, [pc, #124]	; (800963c <xTaskResumeAll+0xdc>)
 80095be:	6812      	ldr	r2, [r2, #0]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d901      	bls.n	80095c8 <xTaskResumeAll+0x68>
 80095c4:	4a1d      	ldr	r2, [pc, #116]	; (800963c <xTaskResumeAll+0xdc>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095cc:	009a      	lsls	r2, r3, #2
 80095ce:	4629      	mov	r1, r5
 80095d0:	481b      	ldr	r0, [pc, #108]	; (8009640 <xTaskResumeAll+0xe0>)
 80095d2:	4410      	add	r0, r2
 80095d4:	f7fe fd18 	bl	8008008 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80095da:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <xTaskResumeAll+0xe4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3dc      	bcc.n	800959e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80095e4:	4b18      	ldr	r3, [pc, #96]	; (8009648 <xTaskResumeAll+0xe8>)
 80095e6:	2201      	movs	r2, #1
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	e7d8      	b.n	800959e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80095ec:	b10c      	cbz	r4, 80095f2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80095ee:	f7ff fce5 	bl	8008fbc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <xTaskResumeAll+0xec>)
 80095f4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095f6:	b154      	cbz	r4, 800960e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 80095f8:	f7ff ff26 	bl	8009448 <xTaskIncrementTick>
 80095fc:	b110      	cbz	r0, 8009604 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <xTaskResumeAll+0xe8>)
 8009600:	2201      	movs	r2, #1
 8009602:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009604:	3c01      	subs	r4, #1
 8009606:	d1f7      	bne.n	80095f8 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009608:	4b10      	ldr	r3, [pc, #64]	; (800964c <xTaskResumeAll+0xec>)
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800960e:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <xTaskResumeAll+0xe8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	b15b      	cbz	r3, 800962c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8009614:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <xTaskResumeAll+0xf0>)
 8009616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009624:	2401      	movs	r4, #1
 8009626:	e7b5      	b.n	8009594 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009628:	2400      	movs	r4, #0
 800962a:	e7b3      	b.n	8009594 <xTaskResumeAll+0x34>
 800962c:	2400      	movs	r4, #0
 800962e:	e7b1      	b.n	8009594 <xTaskResumeAll+0x34>
 8009630:	20003c0c 	.word	0x20003c0c
 8009634:	20003c00 	.word	0x20003c00
 8009638:	20003c48 	.word	0x20003c48
 800963c:	20003c14 	.word	0x20003c14
 8009640:	200037a0 	.word	0x200037a0
 8009644:	20003794 	.word	0x20003794
 8009648:	20003c8c 	.word	0x20003c8c
 800964c:	20003c08 	.word	0x20003c08
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <vTaskDelay>:
	{
 8009654:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009656:	b1a8      	cbz	r0, 8009684 <vTaskDelay+0x30>
 8009658:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800965a:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <vTaskDelay+0x44>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	b143      	cbz	r3, 8009672 <vTaskDelay+0x1e>
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	e7fe      	b.n	8009670 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009672:	f7ff fec1 	bl	80093f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009676:	2100      	movs	r1, #0
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff fdc9 	bl	8009210 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800967e:	f7ff ff6f 	bl	8009560 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009682:	b938      	cbnz	r0, 8009694 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <vTaskDelay+0x48>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
	}
 8009694:	bd10      	pop	{r4, pc}
 8009696:	bf00      	nop
 8009698:	20003c0c 	.word	0x20003c0c
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <prvIdleTask>:
{
 80096a0:	b508      	push	{r3, lr}
 80096a2:	e003      	b.n	80096ac <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80096a4:	f7ff fc64 	bl	8008f70 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80096a8:	2801      	cmp	r0, #1
 80096aa:	d80e      	bhi.n	80096ca <prvIdleTask+0x2a>
		prvCheckTasksWaitingTermination();
 80096ac:	f7ff fd8a 	bl	80091c4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096b0:	4b13      	ldr	r3, [pc, #76]	; (8009700 <prvIdleTask+0x60>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d9f5      	bls.n	80096a4 <prvIdleTask+0x4>
				taskYIELD();
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <prvIdleTask+0x64>)
 80096ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	e7ec      	b.n	80096a4 <prvIdleTask+0x4>
				vTaskSuspendAll();
 80096ca:	f7ff fe95 	bl	80093f8 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80096ce:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <prvIdleTask+0x68>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b0e      	ldr	r3, [pc, #56]	; (800970c <prvIdleTask+0x6c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d308      	bcc.n	80096ec <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80096da:	f7ff fc49 	bl	8008f70 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80096de:	2801      	cmp	r0, #1
 80096e0:	d901      	bls.n	80096e6 <prvIdleTask+0x46>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80096e2:	f7f7 fa07 	bl	8000af4 <vPortSuppressTicksAndSleep>
				( void ) xTaskResumeAll();
 80096e6:	f7ff ff3b 	bl	8009560 <xTaskResumeAll>
 80096ea:	e7df      	b.n	80096ac <prvIdleTask+0xc>
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	e7fe      	b.n	80096fc <prvIdleTask+0x5c>
 80096fe:	bf00      	nop
 8009700:	200037a0 	.word	0x200037a0
 8009704:	e000ed04 	.word	0xe000ed04
 8009708:	20003c40 	.word	0x20003c40
 800970c:	20003c88 	.word	0x20003c88

08009710 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009710:	4b20      	ldr	r3, [pc, #128]	; (8009794 <vTaskSwitchContext+0x84>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b11b      	cbz	r3, 800971e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009716:	4b20      	ldr	r3, [pc, #128]	; (8009798 <vTaskSwitchContext+0x88>)
 8009718:	2201      	movs	r2, #1
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800971e:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <vTaskSwitchContext+0x88>)
 8009720:	2200      	movs	r2, #0
 8009722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009724:	4b1d      	ldr	r3, [pc, #116]	; (800979c <vTaskSwitchContext+0x8c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800972c:	008a      	lsls	r2, r1, #2
 800972e:	491c      	ldr	r1, [pc, #112]	; (80097a0 <vTaskSwitchContext+0x90>)
 8009730:	588a      	ldr	r2, [r1, r2]
 8009732:	b95a      	cbnz	r2, 800974c <vTaskSwitchContext+0x3c>
 8009734:	b10b      	cbz	r3, 800973a <vTaskSwitchContext+0x2a>
 8009736:	3b01      	subs	r3, #1
 8009738:	e7f6      	b.n	8009728 <vTaskSwitchContext+0x18>
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	e7fe      	b.n	800974a <vTaskSwitchContext+0x3a>
{
 800974c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800974e:	4608      	mov	r0, r1
 8009750:	009a      	lsls	r2, r3, #2
 8009752:	18d4      	adds	r4, r2, r3
 8009754:	00a1      	lsls	r1, r4, #2
 8009756:	4401      	add	r1, r0
 8009758:	684c      	ldr	r4, [r1, #4]
 800975a:	6864      	ldr	r4, [r4, #4]
 800975c:	604c      	str	r4, [r1, #4]
 800975e:	441a      	add	r2, r3
 8009760:	0091      	lsls	r1, r2, #2
 8009762:	3108      	adds	r1, #8
 8009764:	4408      	add	r0, r1
 8009766:	4284      	cmp	r4, r0
 8009768:	d00d      	beq.n	8009786 <vTaskSwitchContext+0x76>
 800976a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800976e:	0091      	lsls	r1, r2, #2
 8009770:	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <vTaskSwitchContext+0x90>)
 8009772:	440a      	add	r2, r1
 8009774:	6852      	ldr	r2, [r2, #4]
 8009776:	68d1      	ldr	r1, [r2, #12]
 8009778:	4a0a      	ldr	r2, [pc, #40]	; (80097a4 <vTaskSwitchContext+0x94>)
 800977a:	6011      	str	r1, [r2, #0]
 800977c:	4a07      	ldr	r2, [pc, #28]	; (800979c <vTaskSwitchContext+0x8c>)
 800977e:	6013      	str	r3, [r2, #0]
}
 8009780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009784:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009786:	6861      	ldr	r1, [r4, #4]
 8009788:	4805      	ldr	r0, [pc, #20]	; (80097a0 <vTaskSwitchContext+0x90>)
 800978a:	2214      	movs	r2, #20
 800978c:	fb02 0203 	mla	r2, r2, r3, r0
 8009790:	6051      	str	r1, [r2, #4]
 8009792:	e7ea      	b.n	800976a <vTaskSwitchContext+0x5a>
 8009794:	20003c0c 	.word	0x20003c0c
 8009798:	20003c8c 	.word	0x20003c8c
 800979c:	20003c14 	.word	0x20003c14
 80097a0:	200037a0 	.word	0x200037a0
 80097a4:	20003794 	.word	0x20003794

080097a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80097a8:	b940      	cbnz	r0, 80097bc <vTaskPlaceOnEventList+0x14>
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	e7fe      	b.n	80097ba <vTaskPlaceOnEventList+0x12>
{
 80097bc:	b510      	push	{r4, lr}
 80097be:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <vTaskPlaceOnEventList+0x2c>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	3118      	adds	r1, #24
 80097c6:	f7fe fc2b 	bl	8008020 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ca:	2101      	movs	r1, #1
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff fd1f 	bl	8009210 <prvAddCurrentTaskToDelayedList>
}
 80097d2:	bd10      	pop	{r4, pc}
 80097d4:	20003794 	.word	0x20003794

080097d8 <vTaskPlaceOnEventListRestricted>:
	{
 80097d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80097da:	b940      	cbnz	r0, 80097ee <vTaskPlaceOnEventListRestricted+0x16>
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	e7fe      	b.n	80097ec <vTaskPlaceOnEventListRestricted+0x14>
 80097ee:	460c      	mov	r4, r1
 80097f0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097f2:	4a06      	ldr	r2, [pc, #24]	; (800980c <vTaskPlaceOnEventListRestricted+0x34>)
 80097f4:	6811      	ldr	r1, [r2, #0]
 80097f6:	3118      	adds	r1, #24
 80097f8:	f7fe fc06 	bl	8008008 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80097fc:	b10d      	cbz	r5, 8009802 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 80097fe:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009802:	4629      	mov	r1, r5
 8009804:	4620      	mov	r0, r4
 8009806:	f7ff fd03 	bl	8009210 <prvAddCurrentTaskToDelayedList>
	}
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20003794 	.word	0x20003794

08009810 <xTaskRemoveFromEventList>:
{
 8009810:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009812:	68c3      	ldr	r3, [r0, #12]
 8009814:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009816:	b944      	cbnz	r4, 800982a <xTaskRemoveFromEventList+0x1a>
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	e7fe      	b.n	8009828 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800982a:	f104 0518 	add.w	r5, r4, #24
 800982e:	4628      	mov	r0, r5
 8009830:	f7fe fc10 	bl	8008054 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009834:	4b14      	ldr	r3, [pc, #80]	; (8009888 <xTaskRemoveFromEventList+0x78>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	b9fb      	cbnz	r3, 800987a <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800983a:	1d25      	adds	r5, r4, #4
 800983c:	4628      	mov	r0, r5
 800983e:	f7fe fc09 	bl	8008054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009844:	4a11      	ldr	r2, [pc, #68]	; (800988c <xTaskRemoveFromEventList+0x7c>)
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	4293      	cmp	r3, r2
 800984a:	d901      	bls.n	8009850 <xTaskRemoveFromEventList+0x40>
 800984c:	4a0f      	ldr	r2, [pc, #60]	; (800988c <xTaskRemoveFromEventList+0x7c>)
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009854:	009a      	lsls	r2, r3, #2
 8009856:	4629      	mov	r1, r5
 8009858:	480d      	ldr	r0, [pc, #52]	; (8009890 <xTaskRemoveFromEventList+0x80>)
 800985a:	4410      	add	r0, r2
 800985c:	f7fe fbd4 	bl	8008008 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009862:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <xTaskRemoveFromEventList+0x84>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d90b      	bls.n	8009884 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 800986c:	2401      	movs	r4, #1
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <xTaskRemoveFromEventList+0x88>)
 8009870:	601c      	str	r4, [r3, #0]
		prvResetNextTaskUnblockTime();
 8009872:	f7ff fba3 	bl	8008fbc <prvResetNextTaskUnblockTime>
}
 8009876:	4620      	mov	r0, r4
 8009878:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800987a:	4629      	mov	r1, r5
 800987c:	4807      	ldr	r0, [pc, #28]	; (800989c <xTaskRemoveFromEventList+0x8c>)
 800987e:	f7fe fbc3 	bl	8008008 <vListInsertEnd>
 8009882:	e7ed      	b.n	8009860 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009884:	2400      	movs	r4, #0
 8009886:	e7f4      	b.n	8009872 <xTaskRemoveFromEventList+0x62>
 8009888:	20003c0c 	.word	0x20003c0c
 800988c:	20003c14 	.word	0x20003c14
 8009890:	200037a0 	.word	0x200037a0
 8009894:	20003794 	.word	0x20003794
 8009898:	20003c8c 	.word	0x20003c8c
 800989c:	20003c48 	.word	0x20003c48

080098a0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <vTaskInternalSetTimeOutState+0x10>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098a6:	4b03      	ldr	r3, [pc, #12]	; (80098b4 <vTaskInternalSetTimeOutState+0x14>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6043      	str	r3, [r0, #4]
}
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20003c44 	.word	0x20003c44
 80098b4:	20003c88 	.word	0x20003c88

080098b8 <xTaskCheckForTimeOut>:
{
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80098ba:	b150      	cbz	r0, 80098d2 <xTaskCheckForTimeOut+0x1a>
 80098bc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80098be:	b989      	cbnz	r1, 80098e4 <xTaskCheckForTimeOut+0x2c>
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	e7fe      	b.n	80098d0 <xTaskCheckForTimeOut+0x18>
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	e7fe      	b.n	80098e2 <xTaskCheckForTimeOut+0x2a>
 80098e4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 80098e6:	f7fe fc35 	bl	8008154 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <xTaskCheckForTimeOut+0x78>)
 80098ec:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098ee:	6868      	ldr	r0, [r5, #4]
 80098f0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d016      	beq.n	8009928 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098fa:	682f      	ldr	r7, [r5, #0]
 80098fc:	4e0d      	ldr	r6, [pc, #52]	; (8009934 <xTaskCheckForTimeOut+0x7c>)
 80098fe:	6836      	ldr	r6, [r6, #0]
 8009900:	42b7      	cmp	r7, r6
 8009902:	d001      	beq.n	8009908 <xTaskCheckForTimeOut+0x50>
 8009904:	4288      	cmp	r0, r1
 8009906:	d911      	bls.n	800992c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009908:	4293      	cmp	r3, r2
 800990a:	d803      	bhi.n	8009914 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009910:	2401      	movs	r4, #1
 8009912:	e005      	b.n	8009920 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009918:	4628      	mov	r0, r5
 800991a:	f7ff ffc1 	bl	80098a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800991e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009920:	f7fe fc3a 	bl	8008198 <vPortExitCritical>
}
 8009924:	4620      	mov	r0, r4
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009928:	2400      	movs	r4, #0
 800992a:	e7f9      	b.n	8009920 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800992c:	2401      	movs	r4, #1
 800992e:	e7f7      	b.n	8009920 <xTaskCheckForTimeOut+0x68>
 8009930:	20003c88 	.word	0x20003c88
 8009934:	20003c44 	.word	0x20003c44

08009938 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009938:	4b01      	ldr	r3, [pc, #4]	; (8009940 <vTaskMissedYield+0x8>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
}
 800993e:	4770      	bx	lr
 8009940:	20003c8c 	.word	0x20003c8c

08009944 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009944:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <eTaskConfirmSleepModeStatus+0x2c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	b95b      	cbnz	r3, 8009962 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800994a:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <eTaskConfirmSleepModeStatus+0x30>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	b953      	cbnz	r3, 8009966 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <eTaskConfirmSleepModeStatus+0x34>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	4b09      	ldr	r3, [pc, #36]	; (800997c <eTaskConfirmSleepModeStatus+0x38>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3b01      	subs	r3, #1
 800995a:	429a      	cmp	r2, r3
 800995c:	d005      	beq.n	800996a <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800995e:	2001      	movs	r0, #1
 8009960:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009962:	2000      	movs	r0, #0
 8009964:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009966:	2000      	movs	r0, #0
 8009968:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800996a:	2002      	movs	r0, #2
	}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20003c48 	.word	0x20003c48
 8009974:	20003c8c 	.word	0x20003c8c
 8009978:	20003c60 	.word	0x20003c60
 800997c:	20003c00 	.word	0x20003c00

08009980 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009980:	4b01      	ldr	r3, [pc, #4]	; (8009988 <xTaskGetCurrentTaskHandle+0x8>)
 8009982:	6818      	ldr	r0, [r3, #0]
	}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20003794 	.word	0x20003794

0800998c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <xTaskGetSchedulerState+0x18>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	b133      	cbz	r3, 80099a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <xTaskGetSchedulerState+0x1c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	b10b      	cbz	r3, 800999c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009998:	2000      	movs	r0, #0
	}
 800999a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800999c:	2002      	movs	r0, #2
 800999e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099a0:	2001      	movs	r0, #1
 80099a2:	4770      	bx	lr
 80099a4:	20003c5c 	.word	0x20003c5c
 80099a8:	20003c0c 	.word	0x20003c0c

080099ac <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d040      	beq.n	8009a32 <xTaskPriorityInherit+0x86>
	{
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80099b6:	4920      	ldr	r1, [pc, #128]	; (8009a38 <xTaskPriorityInherit+0x8c>)
 80099b8:	6809      	ldr	r1, [r1, #0]
 80099ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80099bc:	428a      	cmp	r2, r1
 80099be:	d22e      	bcs.n	8009a1e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099c0:	6981      	ldr	r1, [r0, #24]
 80099c2:	2900      	cmp	r1, #0
 80099c4:	db05      	blt.n	80099d2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c6:	491c      	ldr	r1, [pc, #112]	; (8009a38 <xTaskPriorityInherit+0x8c>)
 80099c8:	6809      	ldr	r1, [r1, #0]
 80099ca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80099cc:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 80099d0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099d2:	6968      	ldr	r0, [r5, #20]
 80099d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099d8:	0091      	lsls	r1, r2, #2
 80099da:	4a18      	ldr	r2, [pc, #96]	; (8009a3c <xTaskPriorityInherit+0x90>)
 80099dc:	440a      	add	r2, r1
 80099de:	4290      	cmp	r0, r2
 80099e0:	d005      	beq.n	80099ee <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099e2:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <xTaskPriorityInherit+0x8c>)
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099e8:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 80099ea:	2001      	movs	r0, #1
	}
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ee:	1d2c      	adds	r4, r5, #4
 80099f0:	4620      	mov	r0, r4
 80099f2:	f7fe fb2f 	bl	8008054 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099f6:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <xTaskPriorityInherit+0x8c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80099fe:	4a10      	ldr	r2, [pc, #64]	; (8009a40 <xTaskPriorityInherit+0x94>)
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d901      	bls.n	8009a0a <xTaskPriorityInherit+0x5e>
 8009a06:	4a0e      	ldr	r2, [pc, #56]	; (8009a40 <xTaskPriorityInherit+0x94>)
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a0e:	009a      	lsls	r2, r3, #2
 8009a10:	4621      	mov	r1, r4
 8009a12:	480a      	ldr	r0, [pc, #40]	; (8009a3c <xTaskPriorityInherit+0x90>)
 8009a14:	4410      	add	r0, r2
 8009a16:	f7fe faf7 	bl	8008008 <vListInsertEnd>
				xReturn = pdTRUE;
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	e7e6      	b.n	80099ec <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009a20:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <xTaskPriorityInherit+0x8c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d201      	bcs.n	8009a2e <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 8009a2a:	2001      	movs	r0, #1
		return xReturn;
 8009a2c:	e7de      	b.n	80099ec <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e7dc      	b.n	80099ec <xTaskPriorityInherit+0x40>
 8009a32:	2000      	movs	r0, #0
	}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20003794 	.word	0x20003794
 8009a3c:	200037a0 	.word	0x200037a0
 8009a40:	20003c14 	.word	0x20003c14

08009a44 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d038      	beq.n	8009aba <xTaskPriorityDisinherit+0x76>
	{
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009a4c:	4a1e      	ldr	r2, [pc, #120]	; (8009ac8 <xTaskPriorityDisinherit+0x84>)
 8009a4e:	6812      	ldr	r2, [r2, #0]
 8009a50:	4282      	cmp	r2, r0
 8009a52:	d008      	beq.n	8009a66 <xTaskPriorityDisinherit+0x22>
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	e7fe      	b.n	8009a64 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a66:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009a68:	b942      	cbnz	r2, 8009a7c <xTaskPriorityDisinherit+0x38>
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	e7fe      	b.n	8009a7a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009a7c:	3a01      	subs	r2, #1
 8009a7e:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009a82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009a84:	4288      	cmp	r0, r1
 8009a86:	d01a      	beq.n	8009abe <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a88:	b9da      	cbnz	r2, 8009ac2 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a8a:	1d25      	adds	r5, r4, #4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7fe fae1 	bl	8008054 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a94:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a9a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a9c:	4a0b      	ldr	r2, [pc, #44]	; (8009acc <xTaskPriorityDisinherit+0x88>)
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d901      	bls.n	8009aa8 <xTaskPriorityDisinherit+0x64>
 8009aa4:	4a09      	ldr	r2, [pc, #36]	; (8009acc <xTaskPriorityDisinherit+0x88>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <xTaskPriorityDisinherit+0x8c>)
 8009aac:	2014      	movs	r0, #20
 8009aae:	fb00 2003 	mla	r0, r0, r3, r2
 8009ab2:	f7fe faa9 	bl	8008008 <vListInsertEnd>
					xReturn = pdTRUE;
 8009ab6:	2001      	movs	r0, #1
	}
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009aba:	2000      	movs	r0, #0
	}
 8009abc:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009abe:	2000      	movs	r0, #0
 8009ac0:	e7fa      	b.n	8009ab8 <xTaskPriorityDisinherit+0x74>
 8009ac2:	2000      	movs	r0, #0
		return xReturn;
 8009ac4:	e7f8      	b.n	8009ab8 <xTaskPriorityDisinherit+0x74>
 8009ac6:	bf00      	nop
 8009ac8:	20003794 	.word	0x20003794
 8009acc:	20003c14 	.word	0x20003c14
 8009ad0:	200037a0 	.word	0x200037a0

08009ad4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d045      	beq.n	8009b64 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009adc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8009ade:	b940      	cbnz	r0, 8009af2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	e7fe      	b.n	8009af0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009af4:	428a      	cmp	r2, r1
 8009af6:	d200      	bcs.n	8009afa <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009af8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009afa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009afc:	4291      	cmp	r1, r2
 8009afe:	d001      	beq.n	8009b04 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b00:	2801      	cmp	r0, #1
 8009b02:	d000      	beq.n	8009b06 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8009b06:	4818      	ldr	r0, [pc, #96]	; (8009b68 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8009b08:	6800      	ldr	r0, [r0, #0]
 8009b0a:	4298      	cmp	r0, r3
 8009b0c:	d108      	bne.n	8009b20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	e7fe      	b.n	8009b1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8009b20:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b22:	6998      	ldr	r0, [r3, #24]
 8009b24:	2800      	cmp	r0, #0
 8009b26:	db02      	blt.n	8009b2e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b28:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009b2c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b2e:	695a      	ldr	r2, [r3, #20]
 8009b30:	480e      	ldr	r0, [pc, #56]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8009b32:	2414      	movs	r4, #20
 8009b34:	fb04 0101 	mla	r1, r4, r1, r0
 8009b38:	428a      	cmp	r2, r1
 8009b3a:	d1e3      	bne.n	8009b04 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009b3c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b3e:	1d1d      	adds	r5, r3, #4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f7fe fa87 	bl	8008054 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b48:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d901      	bls.n	8009b54 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8009b50:	4a07      	ldr	r2, [pc, #28]	; (8009b70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	4629      	mov	r1, r5
 8009b56:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8009b58:	2014      	movs	r0, #20
 8009b5a:	fb00 2003 	mla	r0, r0, r3, r2
 8009b5e:	f7fe fa53 	bl	8008008 <vListInsertEnd>
	}
 8009b62:	e7cf      	b.n	8009b04 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20003794 	.word	0x20003794
 8009b6c:	200037a0 	.word	0x200037a0
 8009b70:	20003c14 	.word	0x20003c14

08009b74 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <pvTaskIncrementMutexHeldCount+0x18>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	b123      	cbz	r3, 8009b84 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <pvTaskIncrementMutexHeldCount+0x18>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b80:	3301      	adds	r3, #1
 8009b82:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8009b84:	4b01      	ldr	r3, [pc, #4]	; (8009b8c <pvTaskIncrementMutexHeldCount+0x18>)
 8009b86:	6818      	ldr	r0, [r3, #0]
	}
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20003794 	.word	0x20003794

08009b90 <xTaskNotifyWait>:
	{
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	4607      	mov	r7, r0
 8009b94:	460d      	mov	r5, r1
 8009b96:	4614      	mov	r4, r2
 8009b98:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8009b9a:	f7fe fadb 	bl	8008154 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009b9e:	4b20      	ldr	r3, [pc, #128]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d00a      	beq.n	8009bc2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009bac:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009bb2:	ea20 0007 	bic.w	r0, r0, r7
 8009bb6:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8009bc0:	b9ce      	cbnz	r6, 8009bf6 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009bc2:	f7fe fae9 	bl	8008198 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009bc6:	f7fe fac5 	bl	8008154 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009bca:	b11c      	cbz	r4, 8009bd4 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009bcc:	4b14      	ldr	r3, [pc, #80]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd2:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009bd4:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d016      	beq.n	8009c10 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8009be2:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009be4:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8009bee:	f7fe fad3 	bl	8008198 <vPortExitCritical>
	}
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fb09 	bl	8009210 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <xTaskNotifyWait+0x94>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	e7d8      	b.n	8009bc2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009c10:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <xTaskNotifyWait+0x90>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009c16:	ea23 0505 	bic.w	r5, r3, r5
 8009c1a:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8009c1c:	2401      	movs	r4, #1
 8009c1e:	e7e1      	b.n	8009be4 <xTaskNotifyWait+0x54>
 8009c20:	20003794 	.word	0x20003794
 8009c24:	e000ed04 	.word	0xe000ed04

08009c28 <xTaskGenericNotify>:
	{
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8009c2a:	b940      	cbnz	r0, 8009c3e <xTaskGenericNotify+0x16>
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	e7fe      	b.n	8009c3c <xTaskGenericNotify+0x14>
 8009c3e:	4604      	mov	r4, r0
 8009c40:	461f      	mov	r7, r3
 8009c42:	4615      	mov	r5, r2
 8009c44:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8009c46:	f7fe fa85 	bl	8008154 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009c4a:	b10f      	cbz	r7, 8009c50 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c4e:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c50:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8009c54:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c56:	2202      	movs	r2, #2
 8009c58:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8009c5c:	1e6a      	subs	r2, r5, #1
 8009c5e:	2a03      	cmp	r2, #3
 8009c60:	d81a      	bhi.n	8009c98 <xTaskGenericNotify+0x70>
 8009c62:	e8df f002 	tbb	[pc, r2]
 8009c66:	0c02      	.short	0x0c02
 8009c68:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 8009c6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009c6c:	4316      	orrs	r6, r2
 8009c6e:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009c70:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d014      	beq.n	8009ca0 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8009c76:	f7fe fa8f 	bl	8008198 <vPortExitCritical>
	}
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8009c7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009c80:	3201      	adds	r2, #1
 8009c82:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009c84:	2501      	movs	r5, #1
					break;
 8009c86:	e7f4      	b.n	8009c72 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8009c88:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009c8a:	2501      	movs	r5, #1
					break;
 8009c8c:	e7f1      	b.n	8009c72 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d004      	beq.n	8009c9c <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 8009c92:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009c94:	2501      	movs	r5, #1
 8009c96:	e7ec      	b.n	8009c72 <xTaskGenericNotify+0x4a>
 8009c98:	2501      	movs	r5, #1
 8009c9a:	e7ea      	b.n	8009c72 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	e7e8      	b.n	8009c72 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca0:	1d26      	adds	r6, r4, #4
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7fe f9d6 	bl	8008054 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009ca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009caa:	4a14      	ldr	r2, [pc, #80]	; (8009cfc <xTaskGenericNotify+0xd4>)
 8009cac:	6812      	ldr	r2, [r2, #0]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d901      	bls.n	8009cb6 <xTaskGenericNotify+0x8e>
 8009cb2:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <xTaskGenericNotify+0xd4>)
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4a11      	ldr	r2, [pc, #68]	; (8009d00 <xTaskGenericNotify+0xd8>)
 8009cba:	2014      	movs	r0, #20
 8009cbc:	fb00 2003 	mla	r0, r0, r3, r2
 8009cc0:	f7fe f9a2 	bl	8008008 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cc6:	b143      	cbz	r3, 8009cda <xTaskGenericNotify+0xb2>
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskGenericNotify+0xb0>
					prvResetNextTaskUnblockTime();
 8009cda:	f7ff f96f 	bl	8008fbc <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ce0:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <xTaskGenericNotify+0xdc>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d9c5      	bls.n	8009c76 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <xTaskGenericNotify+0xe0>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	e7bc      	b.n	8009c76 <xTaskGenericNotify+0x4e>
 8009cfc:	20003c14 	.word	0x20003c14
 8009d00:	200037a0 	.word	0x200037a0
 8009d04:	20003794 	.word	0x20003794
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <xTaskGenericNotifyFromISR>:
	{
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8009d12:	b940      	cbnz	r0, 8009d26 <xTaskGenericNotifyFromISR+0x1a>
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	e7fe      	b.n	8009d24 <xTaskGenericNotifyFromISR+0x18>
 8009d26:	4604      	mov	r4, r0
 8009d28:	4699      	mov	r9, r3
 8009d2a:	4615      	mov	r5, r2
 8009d2c:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d2e:	f7fe fb1f 	bl	8008370 <vPortValidateInterruptPriority>
	__asm volatile
 8009d32:	f3ef 8711 	mrs	r7, BASEPRI
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	d002      	beq.n	8009d52 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d4e:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d52:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8009d56:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8009d5e:	1e6a      	subs	r2, r5, #1
 8009d60:	2a03      	cmp	r2, #3
 8009d62:	d81e      	bhi.n	8009da2 <xTaskGenericNotifyFromISR+0x96>
 8009d64:	e8df f002 	tbb	[pc, r2]
 8009d68:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 8009d6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009d6e:	ea42 0208 	orr.w	r2, r2, r8
 8009d72:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009d74:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d017      	beq.n	8009daa <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8009d7a:	f387 8811 	msr	BASEPRI, r7
	}
 8009d7e:	4628      	mov	r0, r5
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8009d84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009d86:	3201      	adds	r2, #1
 8009d88:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009d8a:	2501      	movs	r5, #1
					break;
 8009d8c:	e7f3      	b.n	8009d76 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8009d8e:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009d92:	2501      	movs	r5, #1
					break;
 8009d94:	e7ef      	b.n	8009d76 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d005      	beq.n	8009da6 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8009d9a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009d9e:	2501      	movs	r5, #1
 8009da0:	e7e9      	b.n	8009d76 <xTaskGenericNotifyFromISR+0x6a>
 8009da2:	2501      	movs	r5, #1
 8009da4:	e7e7      	b.n	8009d76 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8009da6:	2500      	movs	r5, #0
 8009da8:	e7e5      	b.n	8009d76 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dac:	b143      	cbz	r3, 8009dc0 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	e7fe      	b.n	8009dbe <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc0:	4b14      	ldr	r3, [pc, #80]	; (8009e14 <xTaskGenericNotifyFromISR+0x108>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	b9e3      	cbnz	r3, 8009e00 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc6:	f104 0804 	add.w	r8, r4, #4
 8009dca:	4640      	mov	r0, r8
 8009dcc:	f7fe f942 	bl	8008054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009dd2:	4a11      	ldr	r2, [pc, #68]	; (8009e18 <xTaskGenericNotifyFromISR+0x10c>)
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d901      	bls.n	8009dde <xTaskGenericNotifyFromISR+0xd2>
 8009dda:	4a0f      	ldr	r2, [pc, #60]	; (8009e18 <xTaskGenericNotifyFromISR+0x10c>)
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	4641      	mov	r1, r8
 8009de0:	4a0e      	ldr	r2, [pc, #56]	; (8009e1c <xTaskGenericNotifyFromISR+0x110>)
 8009de2:	2014      	movs	r0, #20
 8009de4:	fb00 2003 	mla	r0, r0, r3, r2
 8009de8:	f7fe f90e 	bl	8008008 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009dee:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <xTaskGenericNotifyFromISR+0x114>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d9c0      	bls.n	8009d7a <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8009df8:	b146      	cbz	r6, 8009e0c <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	e7bc      	b.n	8009d7a <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009e00:	f104 0118 	add.w	r1, r4, #24
 8009e04:	4807      	ldr	r0, [pc, #28]	; (8009e24 <xTaskGenericNotifyFromISR+0x118>)
 8009e06:	f7fe f8ff 	bl	8008008 <vListInsertEnd>
 8009e0a:	e7ef      	b.n	8009dec <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <xTaskGenericNotifyFromISR+0x11c>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e7b2      	b.n	8009d7a <xTaskGenericNotifyFromISR+0x6e>
 8009e14:	20003c0c 	.word	0x20003c0c
 8009e18:	20003c14 	.word	0x20003c14
 8009e1c:	200037a0 	.word	0x200037a0
 8009e20:	20003794 	.word	0x20003794
 8009e24:	20003c48 	.word	0x20003c48
 8009e28:	20003c8c 	.word	0x20003c8c

08009e2c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e2c:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <prvGetNextExpireTime+0x1c>)
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	6813      	ldr	r3, [r2, #0]
 8009e32:	fab3 f383 	clz	r3, r3
 8009e36:	095b      	lsrs	r3, r3, #5
 8009e38:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e3a:	b913      	cbnz	r3, 8009e42 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e3c:	68d3      	ldr	r3, [r2, #12]
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e42:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20003c90 	.word	0x20003c90

08009e4c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e4c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e50:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e52:	4291      	cmp	r1, r2
 8009e54:	d80c      	bhi.n	8009e70 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d301      	bcc.n	8009e62 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e010      	b.n	8009e84 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	1d01      	adds	r1, r0, #4
 8009e64:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <prvInsertTimerInActiveList+0x40>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f7fe f8da 	bl	8008020 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e009      	b.n	8009e84 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d201      	bcs.n	8009e78 <prvInsertTimerInActiveList+0x2c>
 8009e74:	4299      	cmp	r1, r3
 8009e76:	d206      	bcs.n	8009e86 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e78:	1d01      	adds	r1, r0, #4
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <prvInsertTimerInActiveList+0x44>)
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	f7fe f8cf 	bl	8008020 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009e82:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009e84:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8009e86:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009e88:	e7fc      	b.n	8009e84 <prvInsertTimerInActiveList+0x38>
 8009e8a:	bf00      	nop
 8009e8c:	20003c94 	.word	0x20003c94
 8009e90:	20003c90 	.word	0x20003c90

08009e94 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e94:	b530      	push	{r4, r5, lr}
 8009e96:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e98:	f7fe f95c 	bl	8008154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e9c:	4b11      	ldr	r3, [pc, #68]	; (8009ee4 <prvCheckForValidListAndQueue+0x50>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	b11b      	cbz	r3, 8009eaa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ea2:	f7fe f979 	bl	8008198 <vPortExitCritical>
}
 8009ea6:	b003      	add	sp, #12
 8009ea8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009eaa:	4d0f      	ldr	r5, [pc, #60]	; (8009ee8 <prvCheckForValidListAndQueue+0x54>)
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7fe f89d 	bl	8007fec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eb2:	4c0e      	ldr	r4, [pc, #56]	; (8009eec <prvCheckForValidListAndQueue+0x58>)
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7fe f899 	bl	8007fec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009eba:	4b0d      	ldr	r3, [pc, #52]	; (8009ef0 <prvCheckForValidListAndQueue+0x5c>)
 8009ebc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <prvCheckForValidListAndQueue+0x60>)
 8009ec0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <prvCheckForValidListAndQueue+0x64>)
 8009ec8:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <prvCheckForValidListAndQueue+0x68>)
 8009eca:	2110      	movs	r1, #16
 8009ecc:	200a      	movs	r0, #10
 8009ece:	f7fe fb7a 	bl	80085c6 <xQueueGenericCreateStatic>
 8009ed2:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <prvCheckForValidListAndQueue+0x50>)
 8009ed4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d0e3      	beq.n	8009ea2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009eda:	4909      	ldr	r1, [pc, #36]	; (8009f00 <prvCheckForValidListAndQueue+0x6c>)
 8009edc:	f7fe ffde 	bl	8008e9c <vQueueAddToRegistry>
 8009ee0:	e7df      	b.n	8009ea2 <prvCheckForValidListAndQueue+0xe>
 8009ee2:	bf00      	nop
 8009ee4:	20003db4 	.word	0x20003db4
 8009ee8:	20003d38 	.word	0x20003d38
 8009eec:	20003d4c 	.word	0x20003d4c
 8009ef0:	20003c90 	.word	0x20003c90
 8009ef4:	20003c94 	.word	0x20003c94
 8009ef8:	20003d64 	.word	0x20003d64
 8009efc:	20003c98 	.word	0x20003c98
 8009f00:	0800c04c 	.word	0x0800c04c

08009f04 <xTimerCreateTimerTask>:
{
 8009f04:	b510      	push	{r4, lr}
 8009f06:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009f08:	f7ff ffc4 	bl	8009e94 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009f0c:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <xTimerCreateTimerTask+0x54>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	b1cb      	cbz	r3, 8009f46 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f12:	2400      	movs	r4, #0
 8009f14:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f16:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f18:	aa07      	add	r2, sp, #28
 8009f1a:	a906      	add	r1, sp, #24
 8009f1c:	a805      	add	r0, sp, #20
 8009f1e:	f7fd ff3d 	bl	8007d9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	9302      	str	r3, [sp, #8]
 8009f26:	9b06      	ldr	r3, [sp, #24]
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	4623      	mov	r3, r4
 8009f30:	9a07      	ldr	r2, [sp, #28]
 8009f32:	490a      	ldr	r1, [pc, #40]	; (8009f5c <xTimerCreateTimerTask+0x58>)
 8009f34:	480a      	ldr	r0, [pc, #40]	; (8009f60 <xTimerCreateTimerTask+0x5c>)
 8009f36:	f7ff f9a9 	bl	800928c <xTaskCreateStatic>
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <xTimerCreateTimerTask+0x60>)
 8009f3c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009f3e:	b110      	cbz	r0, 8009f46 <xTimerCreateTimerTask+0x42>
}
 8009f40:	2001      	movs	r0, #1
 8009f42:	b008      	add	sp, #32
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	e7fe      	b.n	8009f56 <xTimerCreateTimerTask+0x52>
 8009f58:	20003db4 	.word	0x20003db4
 8009f5c:	0800c054 	.word	0x0800c054
 8009f60:	0800a249 	.word	0x0800a249
 8009f64:	20003db8 	.word	0x20003db8

08009f68 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009f68:	b1c8      	cbz	r0, 8009f9e <xTimerGenericCommand+0x36>
{
 8009f6a:	b530      	push	{r4, r5, lr}
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	4615      	mov	r5, r2
 8009f70:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8009f72:	4a17      	ldr	r2, [pc, #92]	; (8009fd0 <xTimerGenericCommand+0x68>)
 8009f74:	6810      	ldr	r0, [r2, #0]
 8009f76:	b340      	cbz	r0, 8009fca <xTimerGenericCommand+0x62>
 8009f78:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8009f7a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f7c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009f7e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f80:	2905      	cmp	r1, #5
 8009f82:	dc1d      	bgt.n	8009fc0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f84:	f7ff fd02 	bl	800998c <xTaskGetSchedulerState>
 8009f88:	2802      	cmp	r0, #2
 8009f8a:	d011      	beq.n	8009fb0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4669      	mov	r1, sp
 8009f92:	480f      	ldr	r0, [pc, #60]	; (8009fd0 <xTimerGenericCommand+0x68>)
 8009f94:	6800      	ldr	r0, [r0, #0]
 8009f96:	f7fe fbcb 	bl	8008730 <xQueueGenericSend>
}
 8009f9a:	b005      	add	sp, #20
 8009f9c:	bd30      	pop	{r4, r5, pc}
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	e7fe      	b.n	8009fae <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9a08      	ldr	r2, [sp, #32]
 8009fb4:	4669      	mov	r1, sp
 8009fb6:	4806      	ldr	r0, [pc, #24]	; (8009fd0 <xTimerGenericCommand+0x68>)
 8009fb8:	6800      	ldr	r0, [r0, #0]
 8009fba:	f7fe fbb9 	bl	8008730 <xQueueGenericSend>
 8009fbe:	e7ec      	b.n	8009f9a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4669      	mov	r1, sp
 8009fc4:	f7fe fcb8 	bl	8008938 <xQueueGenericSendFromISR>
 8009fc8:	e7e7      	b.n	8009f9a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 8009fca:	2000      	movs	r0, #0
	return xReturn;
 8009fcc:	e7e5      	b.n	8009f9a <xTimerGenericCommand+0x32>
 8009fce:	bf00      	nop
 8009fd0:	20003db4 	.word	0x20003db4

08009fd4 <prvSwitchTimerLists>:
{
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <prvSwitchTimerLists+0x70>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	b352      	cbz	r2, 800a036 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe6:	1d25      	adds	r5, r4, #4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7fe f833 	bl	8008054 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ff4:	69e3      	ldr	r3, [r4, #28]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d1ee      	bne.n	8009fd8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ffa:	69a3      	ldr	r3, [r4, #24]
 8009ffc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009ffe:	429e      	cmp	r6, r3
 800a000:	d207      	bcs.n	800a012 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a002:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a004:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a006:	4629      	mov	r1, r5
 800a008:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <prvSwitchTimerLists+0x70>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	f7fe f808 	bl	8008020 <vListInsert>
 800a010:	e7e2      	b.n	8009fd8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a012:	2100      	movs	r1, #0
 800a014:	9100      	str	r1, [sp, #0]
 800a016:	460b      	mov	r3, r1
 800a018:	4632      	mov	r2, r6
 800a01a:	4620      	mov	r0, r4
 800a01c:	f7ff ffa4 	bl	8009f68 <xTimerGenericCommand>
				configASSERT( xResult );
 800a020:	2800      	cmp	r0, #0
 800a022:	d1d9      	bne.n	8009fd8 <prvSwitchTimerLists+0x4>
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	e7fe      	b.n	800a034 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800a036:	4a04      	ldr	r2, [pc, #16]	; (800a048 <prvSwitchTimerLists+0x74>)
 800a038:	6810      	ldr	r0, [r2, #0]
 800a03a:	4902      	ldr	r1, [pc, #8]	; (800a044 <prvSwitchTimerLists+0x70>)
 800a03c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a03e:	6013      	str	r3, [r2, #0]
}
 800a040:	b002      	add	sp, #8
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	20003c90 	.word	0x20003c90
 800a048:	20003c94 	.word	0x20003c94

0800a04c <prvSampleTimeNow>:
{
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a050:	f7ff f9da 	bl	8009408 <xTaskGetTickCount>
 800a054:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a056:	4b07      	ldr	r3, [pc, #28]	; (800a074 <prvSampleTimeNow+0x28>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4283      	cmp	r3, r0
 800a05c:	d805      	bhi.n	800a06a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a062:	4b04      	ldr	r3, [pc, #16]	; (800a074 <prvSampleTimeNow+0x28>)
 800a064:	601c      	str	r4, [r3, #0]
}
 800a066:	4620      	mov	r0, r4
 800a068:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a06a:	f7ff ffb3 	bl	8009fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a06e:	2301      	movs	r3, #1
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	e7f6      	b.n	800a062 <prvSampleTimeNow+0x16>
 800a074:	20003d60 	.word	0x20003d60

0800a078 <prvProcessExpiredTimer>:
{
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	4605      	mov	r5, r0
 800a07e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a080:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <prvProcessExpiredTimer+0x5c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a088:	1d20      	adds	r0, r4, #4
 800a08a:	f7fd ffe3 	bl	8008054 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a08e:	69e3      	ldr	r3, [r4, #28]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d004      	beq.n	800a09e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a096:	4620      	mov	r0, r4
 800a098:	4798      	blx	r3
}
 800a09a:	b002      	add	sp, #8
 800a09c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a09e:	69a1      	ldr	r1, [r4, #24]
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	4632      	mov	r2, r6
 800a0a4:	4429      	add	r1, r5
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fed0 	bl	8009e4c <prvInsertTimerInActiveList>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0f1      	beq.n	800a094 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	9100      	str	r1, [sp, #0]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff ff55 	bl	8009f68 <xTimerGenericCommand>
			configASSERT( xResult );
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d1e8      	bne.n	800a094 <prvProcessExpiredTimer+0x1c>
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	e7fe      	b.n	800a0d2 <prvProcessExpiredTimer+0x5a>
 800a0d4:	20003c90 	.word	0x20003c90

0800a0d8 <prvProcessTimerOrBlockTask>:
{
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a0e0:	f7ff f98a 	bl	80093f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0e4:	a801      	add	r0, sp, #4
 800a0e6:	f7ff ffb1 	bl	800a04c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	bb1b      	cbnz	r3, 800a136 <prvProcessTimerOrBlockTask+0x5e>
 800a0ee:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0f0:	b90c      	cbnz	r4, 800a0f6 <prvProcessTimerOrBlockTask+0x1e>
 800a0f2:	42b0      	cmp	r0, r6
 800a0f4:	d218      	bcs.n	800a128 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800a0f6:	b12c      	cbz	r4, 800a104 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0f8:	4b11      	ldr	r3, [pc, #68]	; (800a140 <prvProcessTimerOrBlockTask+0x68>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681c      	ldr	r4, [r3, #0]
 800a0fe:	fab4 f484 	clz	r4, r4
 800a102:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a104:	4622      	mov	r2, r4
 800a106:	1b71      	subs	r1, r6, r5
 800a108:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <prvProcessTimerOrBlockTask+0x6c>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	f7fe ff06 	bl	8008f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a110:	f7ff fa26 	bl	8009560 <xTaskResumeAll>
 800a114:	b988      	cbnz	r0, 800a13a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvProcessTimerOrBlockTask+0x70>)
 800a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	e008      	b.n	800a13a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800a128:	f7ff fa1a 	bl	8009560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a12c:	4629      	mov	r1, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff ffa2 	bl	800a078 <prvProcessExpiredTimer>
 800a134:	e001      	b.n	800a13a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800a136:	f7ff fa13 	bl	8009560 <xTaskResumeAll>
}
 800a13a:	b002      	add	sp, #8
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	bf00      	nop
 800a140:	20003c94 	.word	0x20003c94
 800a144:	20003db4 	.word	0x20003db4
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <prvProcessReceivedCommands>:
{
 800a14c:	b530      	push	{r4, r5, lr}
 800a14e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a150:	e002      	b.n	800a158 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	da0f      	bge.n	800a178 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a158:	2200      	movs	r2, #0
 800a15a:	a904      	add	r1, sp, #16
 800a15c:	4b39      	ldr	r3, [pc, #228]	; (800a244 <prvProcessReceivedCommands+0xf8>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	f7fe fcaa 	bl	8008ab8 <xQueueReceive>
 800a164:	2800      	cmp	r0, #0
 800a166:	d06a      	beq.n	800a23e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	daf1      	bge.n	800a152 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a16e:	9907      	ldr	r1, [sp, #28]
 800a170:	9806      	ldr	r0, [sp, #24]
 800a172:	9b05      	ldr	r3, [sp, #20]
 800a174:	4798      	blx	r3
 800a176:	e7ec      	b.n	800a152 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a178:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a17a:	6963      	ldr	r3, [r4, #20]
 800a17c:	b113      	cbz	r3, 800a184 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a17e:	1d20      	adds	r0, r4, #4
 800a180:	f7fd ff68 	bl	8008054 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a184:	a803      	add	r0, sp, #12
 800a186:	f7ff ff61 	bl	800a04c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a18a:	9b04      	ldr	r3, [sp, #16]
 800a18c:	2b09      	cmp	r3, #9
 800a18e:	d8e3      	bhi.n	800a158 <prvProcessReceivedCommands+0xc>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <prvProcessReceivedCommands+0x4c>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1c1 	.word	0x0800a1c1
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c1 	.word	0x0800a1c1
 800a1a4:	0800a159 	.word	0x0800a159
 800a1a8:	0800a209 	.word	0x0800a209
 800a1ac:	0800a22f 	.word	0x0800a22f
 800a1b0:	0800a1c1 	.word	0x0800a1c1
 800a1b4:	0800a1c1 	.word	0x0800a1c1
 800a1b8:	0800a159 	.word	0x0800a159
 800a1bc:	0800a209 	.word	0x0800a209
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1c0:	9905      	ldr	r1, [sp, #20]
 800a1c2:	69a5      	ldr	r5, [r4, #24]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4429      	add	r1, r5
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f7ff fe3e 	bl	8009e4c <prvInsertTimerInActiveList>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0c1      	beq.n	800a158 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a1da:	69e3      	ldr	r3, [r4, #28]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d1bb      	bne.n	800a158 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1e0:	69a2      	ldr	r2, [r4, #24]
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	9100      	str	r1, [sp, #0]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	9805      	ldr	r0, [sp, #20]
 800a1ea:	4402      	add	r2, r0
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff febb 	bl	8009f68 <xTimerGenericCommand>
							configASSERT( xResult );
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d1b0      	bne.n	800a158 <prvProcessReceivedCommands+0xc>
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	e7fe      	b.n	800a206 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a208:	9905      	ldr	r1, [sp, #20]
 800a20a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a20c:	b131      	cbz	r1, 800a21c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a20e:	4603      	mov	r3, r0
 800a210:	4602      	mov	r2, r0
 800a212:	4401      	add	r1, r0
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff fe19 	bl	8009e4c <prvInsertTimerInActiveList>
					break;
 800a21a:	e79d      	b.n	800a158 <prvProcessReceivedCommands+0xc>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	e7fe      	b.n	800a22c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a22e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d190      	bne.n	800a158 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800a236:	4620      	mov	r0, r4
 800a238:	f7fd fea0 	bl	8007f7c <vPortFree>
 800a23c:	e78c      	b.n	800a158 <prvProcessReceivedCommands+0xc>
}
 800a23e:	b009      	add	sp, #36	; 0x24
 800a240:	bd30      	pop	{r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	20003db4 	.word	0x20003db4

0800a248 <prvTimerTask>:
{
 800a248:	b500      	push	{lr}
 800a24a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a24c:	a801      	add	r0, sp, #4
 800a24e:	f7ff fded 	bl	8009e2c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a252:	9901      	ldr	r1, [sp, #4]
 800a254:	f7ff ff40 	bl	800a0d8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a258:	f7ff ff78 	bl	800a14c <prvProcessReceivedCommands>
 800a25c:	e7f6      	b.n	800a24c <prvTimerTask+0x4>

0800a25e <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	4606      	mov	r6, r0
 800a262:	460d      	mov	r5, r1
 800a264:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800a266:	f001 fb8d 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a26a:	f001 fb59 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800a26e:	2300      	movs	r3, #0
 800a270:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800a274:	7002      	strb	r2, [r0, #0]
 800a276:	7043      	strb	r3, [r0, #1]
 800a278:	7083      	strb	r3, [r0, #2]
 800a27a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800a27c:	2203      	movs	r2, #3
 800a27e:	7102      	strb	r2, [r0, #4]
 800a280:	7143      	strb	r3, [r0, #5]
 800a282:	7183      	strb	r3, [r0, #6]
 800a284:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a286:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = aType;
 800a288:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800a28a:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800a28c:	f001 fb5a 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a290:	f001 fb4c 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a294:	bd70      	pop	{r4, r5, r6, pc}

0800a296 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800a296:	b570      	push	{r4, r5, r6, lr}
 800a298:	4606      	mov	r6, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800a29e:	f001 fb71 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2a2:	f001 fb3d 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 800a2ac:	7002      	strb	r2, [r0, #0]
 800a2ae:	7043      	strb	r3, [r0, #1]
 800a2b0:	7083      	strb	r3, [r0, #2]
 800a2b2:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	7102      	strb	r2, [r0, #4]
 800a2b8:	7143      	strb	r3, [r0, #5]
 800a2ba:	7183      	strb	r3, [r0, #6]
 800a2bc:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a2be:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800a2c0:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800a2c2:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800a2c4:	f001 fb3e 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2c8:	f001 fb30 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a2cc:	bd70      	pop	{r4, r5, r6, pc}

0800a2ce <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800a2ce:	b538      	push	{r3, r4, r5, lr}
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a2d4:	f001 fb56 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2d8:	f001 fb22 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f06f 025e 	mvn.w	r2, #94	; 0x5e
 800a2e2:	7002      	strb	r2, [r0, #0]
 800a2e4:	7043      	strb	r3, [r0, #1]
 800a2e6:	7083      	strb	r3, [r0, #2]
 800a2e8:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	7102      	strb	r2, [r0, #4]
 800a2ee:	7143      	strb	r3, [r0, #5]
 800a2f0:	7183      	strb	r3, [r0, #6]
 800a2f2:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a2f4:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800a2f6:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800a2f8:	f001 fb24 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2fc:	f001 fb16 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a300:	bd38      	pop	{r3, r4, r5, pc}

0800a302 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800a302:	b538      	push	{r3, r4, r5, lr}
 800a304:	4605      	mov	r5, r0
 800a306:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a308:	f001 fb3c 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a30c:	f001 fb08 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800a310:	2300      	movs	r3, #0
 800a312:	f06f 025d 	mvn.w	r2, #93	; 0x5d
 800a316:	7002      	strb	r2, [r0, #0]
 800a318:	7043      	strb	r3, [r0, #1]
 800a31a:	7083      	strb	r3, [r0, #2]
 800a31c:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800a31e:	2202      	movs	r2, #2
 800a320:	7102      	strb	r2, [r0, #4]
 800a322:	7143      	strb	r3, [r0, #5]
 800a324:	7183      	strb	r3, [r0, #6]
 800a326:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a328:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800a32a:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800a32c:	f001 fb0a 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a330:	f001 fafc 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800a334:	6880      	ldr	r0, [r0, #8]
}
 800a336:	b2c0      	uxtb	r0, r0
 800a338:	bd38      	pop	{r3, r4, r5, pc}

0800a33a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800a33a:	b538      	push	{r3, r4, r5, lr}
 800a33c:	4605      	mov	r5, r0
 800a33e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a340:	f001 fb20 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a344:	f001 faec 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800a348:	2300      	movs	r3, #0
 800a34a:	f06f 0250 	mvn.w	r2, #80	; 0x50
 800a34e:	7002      	strb	r2, [r0, #0]
 800a350:	7043      	strb	r3, [r0, #1]
 800a352:	7083      	strb	r3, [r0, #2]
 800a354:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800a356:	2202      	movs	r2, #2
 800a358:	7102      	strb	r2, [r0, #4]
 800a35a:	7143      	strb	r3, [r0, #5]
 800a35c:	7183      	strb	r3, [r0, #6]
 800a35e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a360:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800a362:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800a364:	f001 faee 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a368:	f001 fae0 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800a36c:	6880      	ldr	r0, [r0, #8]
}
 800a36e:	b2c0      	uxtb	r0, r0
 800a370:	bd38      	pop	{r3, r4, r5, pc}

0800a372 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a376:	f001 fb05 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a37a:	f001 fad1 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800a37e:	2300      	movs	r3, #0
 800a380:	f06f 024d 	mvn.w	r2, #77	; 0x4d
 800a384:	7002      	strb	r2, [r0, #0]
 800a386:	7043      	strb	r3, [r0, #1]
 800a388:	7083      	strb	r3, [r0, #2]
 800a38a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a38c:	2201      	movs	r2, #1
 800a38e:	7102      	strb	r2, [r0, #4]
 800a390:	7143      	strb	r3, [r0, #5]
 800a392:	7183      	strb	r3, [r0, #6]
 800a394:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a396:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a398:	f001 fad4 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a39c:	f001 fac6 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800a3a0:	6880      	ldr	r0, [r0, #8]
}
 800a3a2:	b2c0      	uxtb	r0, r0
 800a3a4:	bd10      	pop	{r4, pc}

0800a3a6 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800a3a6:	b538      	push	{r3, r4, r5, lr}
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a3ac:	f001 faea 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3b0:	f001 fab6 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f06f 0256 	mvn.w	r2, #86	; 0x56
 800a3ba:	7002      	strb	r2, [r0, #0]
 800a3bc:	7043      	strb	r3, [r0, #1]
 800a3be:	7083      	strb	r3, [r0, #2]
 800a3c0:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	7102      	strb	r2, [r0, #4]
 800a3c6:	7143      	strb	r3, [r0, #5]
 800a3c8:	7183      	strb	r3, [r0, #6]
 800a3ca:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a3cc:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800a3ce:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800a3d0:	f001 fab8 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3d4:	f001 faaa 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a3d8:	bd38      	pop	{r3, r4, r5, pc}

0800a3da <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a3de:	f001 fad1 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3e2:	f001 fa9d 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800a3ec:	7002      	strb	r2, [r0, #0]
 800a3ee:	7043      	strb	r3, [r0, #1]
 800a3f0:	7083      	strb	r3, [r0, #2]
 800a3f2:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	7102      	strb	r2, [r0, #4]
 800a3f8:	7143      	strb	r3, [r0, #5]
 800a3fa:	7183      	strb	r3, [r0, #6]
 800a3fc:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a3fe:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a400:	f001 faa0 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a404:	f001 fa92 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapType)p_ot_req->Data[0];
 800a408:	6880      	ldr	r0, [r0, #8]
}
 800a40a:	b2c0      	uxtb	r0, r0
 800a40c:	bd10      	pop	{r4, pc}

0800a40e <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a412:	f001 fab7 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a416:	f001 fa83 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 800a420:	7002      	strb	r2, [r0, #0]
 800a422:	7043      	strb	r3, [r0, #1]
 800a424:	7083      	strb	r3, [r0, #2]
 800a426:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a428:	2201      	movs	r2, #1
 800a42a:	7102      	strb	r2, [r0, #4]
 800a42c:	7143      	strb	r3, [r0, #5]
 800a42e:	7183      	strb	r3, [r0, #6]
 800a430:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a432:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a434:	f001 fa86 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a438:	f001 fa78 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapCode)p_ot_req->Data[0];
 800a43c:	6880      	ldr	r0, [r0, #8]
}
 800a43e:	b2c0      	uxtb	r0, r0
 800a440:	bd10      	pop	{r4, pc}

0800a442 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800a442:	b510      	push	{r4, lr}
 800a444:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a446:	f001 fa9d 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a44a:	f001 fa69 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800a44e:	2300      	movs	r3, #0
 800a450:	f06f 0255 	mvn.w	r2, #85	; 0x55
 800a454:	7002      	strb	r2, [r0, #0]
 800a456:	7043      	strb	r3, [r0, #1]
 800a458:	7083      	strb	r3, [r0, #2]
 800a45a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a45c:	2201      	movs	r2, #1
 800a45e:	7102      	strb	r2, [r0, #4]
 800a460:	7143      	strb	r3, [r0, #5]
 800a462:	7183      	strb	r3, [r0, #6]
 800a464:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a466:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a468:	f001 fa6c 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a46c:	f001 fa5e 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800a470:	6880      	ldr	r0, [r0, #8]
}
 800a472:	b280      	uxth	r0, r0
 800a474:	bd10      	pop	{r4, pc}

0800a476 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800a476:	b510      	push	{r4, lr}
 800a478:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a47a:	f001 fa83 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a47e:	f001 fa4f 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800a482:	2300      	movs	r3, #0
 800a484:	f06f 0254 	mvn.w	r2, #84	; 0x54
 800a488:	7002      	strb	r2, [r0, #0]
 800a48a:	7043      	strb	r3, [r0, #1]
 800a48c:	7083      	strb	r3, [r0, #2]
 800a48e:	70c3      	strb	r3, [r0, #3]

   p_ot_req->Size=1;
 800a490:	2201      	movs	r2, #1
 800a492:	7102      	strb	r2, [r0, #4]
 800a494:	7143      	strb	r3, [r0, #5]
 800a496:	7183      	strb	r3, [r0, #6]
 800a498:	71c3      	strb	r3, [r0, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800a49a:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a49c:	f001 fa52 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a4a0:	f001 fa44 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
   return (uint8_t)p_ot_req->Data[0];
 800a4a4:	6880      	ldr	r0, [r0, #8]
}
 800a4a6:	b2c0      	uxtb	r0, r0
 800a4a8:	bd10      	pop	{r4, pc}

0800a4aa <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800a4aa:	b510      	push	{r4, lr}
 800a4ac:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a4ae:	f001 fa69 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a4b2:	f001 fa35 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f06f 0253 	mvn.w	r2, #83	; 0x53
 800a4bc:	7002      	strb	r2, [r0, #0]
 800a4be:	7043      	strb	r3, [r0, #1]
 800a4c0:	7083      	strb	r3, [r0, #2]
 800a4c2:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	7102      	strb	r2, [r0, #4]
 800a4c8:	7143      	strb	r3, [r0, #5]
 800a4ca:	7183      	strb	r3, [r0, #6]
 800a4cc:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a4ce:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a4d0:	f001 fa38 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a4d4:	f001 fa2a 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint8_t *)p_ot_req->Data[0];
}
 800a4d8:	6880      	ldr	r0, [r0, #8]
 800a4da:	bd10      	pop	{r4, pc}

0800a4dc <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a4e0:	f001 fa50 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a4e4:	f001 fa1c 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800a4ee:	7002      	strb	r2, [r0, #0]
 800a4f0:	7043      	strb	r3, [r0, #1]
 800a4f2:	7083      	strb	r3, [r0, #2]
 800a4f4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	7102      	strb	r2, [r0, #4]
 800a4fa:	7143      	strb	r3, [r0, #5]
 800a4fc:	7183      	strb	r3, [r0, #6]
 800a4fe:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800a500:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a502:	f001 fa1f 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a506:	f001 fa11 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otMessage *)p_ot_req->Data[0];

}
 800a50a:	6880      	ldr	r0, [r0, #8]
 800a50c:	bd10      	pop	{r4, pc}

0800a50e <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800a50e:	b570      	push	{r4, r5, r6, lr}
 800a510:	460e      	mov	r6, r1
 800a512:	4615      	mov	r5, r2
 800a514:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800a516:	f001 fa35 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a51a:	f001 fa01 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800a51e:	2300      	movs	r3, #0
 800a520:	f06f 0258 	mvn.w	r2, #88	; 0x58
 800a524:	7002      	strb	r2, [r0, #0]
 800a526:	7043      	strb	r3, [r0, #1]
 800a528:	7083      	strb	r3, [r0, #2]
 800a52a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800a52c:	2203      	movs	r2, #3
 800a52e:	7102      	strb	r2, [r0, #4]
 800a530:	7143      	strb	r3, [r0, #5]
 800a532:	7183      	strb	r3, [r0, #6]
 800a534:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a536:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a538:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800a53a:	6104      	str	r4, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	6143      	str	r3, [r0, #20]

    Ot_Cmd_Transfer();
 800a540:	f001 fa00 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a544:	f001 f9f2 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a548:	6880      	ldr	r0, [r0, #8]
}
 800a54a:	b2c0      	uxtb	r0, r0
 800a54c:	bd70      	pop	{r4, r5, r6, pc}

0800a54e <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800a54e:	b510      	push	{r4, lr}
 800a550:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a552:	f001 fa17 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a556:	f001 f9e3 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800a55a:	2300      	movs	r3, #0
 800a55c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800a560:	7002      	strb	r2, [r0, #0]
 800a562:	7043      	strb	r3, [r0, #1]
 800a564:	7083      	strb	r3, [r0, #2]
 800a566:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a568:	2201      	movs	r2, #1
 800a56a:	7102      	strb	r2, [r0, #4]
 800a56c:	7143      	strb	r3, [r0, #5]
 800a56e:	7183      	strb	r3, [r0, #6]
 800a570:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800a572:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a574:	f001 f9e6 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a578:	f001 f9d8 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a57c:	6880      	ldr	r0, [r0, #8]
}
 800a57e:	b2c0      	uxtb	r0, r0
 800a580:	bd10      	pop	{r4, pc}

0800a582 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800a582:	b510      	push	{r4, lr}
 800a584:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800a586:	f001 f9fd 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a58a:	f001 f9c9 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800a58e:	2300      	movs	r3, #0
 800a590:	f06f 0249 	mvn.w	r2, #73	; 0x49
 800a594:	7002      	strb	r2, [r0, #0]
 800a596:	7043      	strb	r3, [r0, #1]
 800a598:	7083      	strb	r3, [r0, #2]
 800a59a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a59c:	2201      	movs	r2, #1
 800a59e:	7102      	strb	r2, [r0, #4]
 800a5a0:	7143      	strb	r3, [r0, #5]
 800a5a2:	7183      	strb	r3, [r0, #6]
 800a5a4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800a5a6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a5a8:	f001 f9cc 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a5ac:	f001 f9be 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a5b0:	6880      	ldr	r0, [r0, #8]
}
 800a5b2:	b2c0      	uxtb	r0, r0
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800a5b6:	b538      	push	{r3, r4, r5, lr}
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800a5bc:	f001 f9e2 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a5c0:	f001 f9ae 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f06f 0257 	mvn.w	r2, #87	; 0x57
 800a5ca:	7002      	strb	r2, [r0, #0]
 800a5cc:	7043      	strb	r3, [r0, #1]
 800a5ce:	7083      	strb	r3, [r0, #2]
 800a5d0:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	7102      	strb	r2, [r0, #4]
 800a5d6:	7143      	strb	r3, [r0, #5]
 800a5d8:	7183      	strb	r3, [r0, #6]
 800a5da:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a5dc:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800a5de:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800a5e0:	f001 f9b0 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a5e4:	f001 f9a2 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a5e8:	6880      	ldr	r0, [r0, #8]
}
 800a5ea:	b2c0      	uxtb	r0, r0
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}

0800a5ee <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800a5ee:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800a5f0:	f001 f9c8 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a5f4:	f001 f994 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f06f 026b 	mvn.w	r2, #107	; 0x6b
 800a5fe:	7002      	strb	r2, [r0, #0]
 800a600:	7043      	strb	r3, [r0, #1]
 800a602:	7083      	strb	r3, [r0, #2]
 800a604:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800a606:	7103      	strb	r3, [r0, #4]
 800a608:	7143      	strb	r3, [r0, #5]
 800a60a:	7183      	strb	r3, [r0, #6]
 800a60c:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800a60e:	f001 f999 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a612:	f001 f98b 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otInstance *)p_ot_req->Data[0];
}
 800a616:	6880      	ldr	r0, [r0, #8]
 800a618:	bd08      	pop	{r3, pc}

0800a61a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800a61a:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800a61c:	f001 f9b2 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a620:	f001 f97e 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800a624:	2300      	movs	r3, #0
 800a626:	f06f 0269 	mvn.w	r2, #105	; 0x69
 800a62a:	7002      	strb	r2, [r0, #0]
 800a62c:	7043      	strb	r3, [r0, #1]
 800a62e:	7083      	strb	r3, [r0, #2]
 800a630:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800a632:	7103      	strb	r3, [r0, #4]
 800a634:	7143      	strb	r3, [r0, #5]
 800a636:	7183      	strb	r3, [r0, #6]
 800a638:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800a63a:	f001 f983 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a63e:	f001 f975 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a642:	bd08      	pop	{r3, pc}

0800a644 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	460d      	mov	r5, r1
 800a648:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800a64a:	f001 f99b 	bl	800b984 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800a64e:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <otSetStateChangedCallback+0x3c>)
 800a650:	601d      	str	r5, [r3, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a652:	f001 f965 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800a656:	2300      	movs	r3, #0
 800a658:	f06f 0268 	mvn.w	r2, #104	; 0x68
 800a65c:	7002      	strb	r2, [r0, #0]
 800a65e:	7043      	strb	r3, [r0, #1]
 800a660:	7083      	strb	r3, [r0, #2]
 800a662:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a664:	2201      	movs	r2, #1
 800a666:	7102      	strb	r2, [r0, #4]
 800a668:	7143      	strb	r3, [r0, #5]
 800a66a:	7183      	strb	r3, [r0, #6]
 800a66c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800a66e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a670:	f001 f968 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a674:	f001 f95a 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a678:	6880      	ldr	r0, [r0, #8]
}
 800a67a:	b2c0      	uxtb	r0, r0
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
 800a67e:	bf00      	nop
 800a680:	20003df8 	.word	0x20003df8

0800a684 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800a684:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800a686:	f001 f97d 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a68a:	f001 f949 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800a68e:	2300      	movs	r3, #0
 800a690:	f06f 0264 	mvn.w	r2, #100	; 0x64
 800a694:	7002      	strb	r2, [r0, #0]
 800a696:	7043      	strb	r3, [r0, #1]
 800a698:	7083      	strb	r3, [r0, #2]
 800a69a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800a69c:	7103      	strb	r3, [r0, #4]
 800a69e:	7143      	strb	r3, [r0, #5]
 800a6a0:	7183      	strb	r3, [r0, #6]
 800a6a2:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800a6a4:	f001 f94e 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a6a8:	f001 f940 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a6ac:	6880      	ldr	r0, [r0, #8]
}
 800a6ae:	b2c0      	uxtb	r0, r0
 800a6b0:	bd08      	pop	{r3, pc}

0800a6b2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800a6b6:	f001 f965 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a6ba:	f001 f931 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2227      	movs	r2, #39	; 0x27
 800a6c2:	7002      	strb	r2, [r0, #0]
 800a6c4:	7043      	strb	r3, [r0, #1]
 800a6c6:	7083      	strb	r3, [r0, #2]
 800a6c8:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	7102      	strb	r2, [r0, #4]
 800a6ce:	7143      	strb	r3, [r0, #5]
 800a6d0:	7183      	strb	r3, [r0, #6]
 800a6d2:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a6d4:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800a6d6:	f001 f935 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a6da:	f001 f927 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800a6de:	6880      	ldr	r0, [r0, #8]
}
 800a6e0:	b2c0      	uxtb	r0, r0
 800a6e2:	bd10      	pop	{r4, pc}

0800a6e4 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800a6e4:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800a6e6:	f001 f94d 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a6ea:	f001 f919 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	2228      	movs	r2, #40	; 0x28
 800a6f2:	7002      	strb	r2, [r0, #0]
 800a6f4:	7043      	strb	r3, [r0, #1]
 800a6f6:	7083      	strb	r3, [r0, #2]
 800a6f8:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800a6fa:	7103      	strb	r3, [r0, #4]
 800a6fc:	7143      	strb	r3, [r0, #5]
 800a6fe:	7183      	strb	r3, [r0, #6]
 800a700:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800a702:	f001 f91f 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a706:	f001 f911 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (bool)p_ot_req->Data[0];
 800a70a:	6880      	ldr	r0, [r0, #8]
}
 800a70c:	3000      	adds	r0, #0
 800a70e:	bf18      	it	ne
 800a710:	2001      	movne	r0, #1
 800a712:	bd08      	pop	{r3, pc}

0800a714 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800a714:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800a716:	f001 f935 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a71a:	f001 f901 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800a71e:	2300      	movs	r3, #0
 800a720:	222b      	movs	r2, #43	; 0x2b
 800a722:	7002      	strb	r2, [r0, #0]
 800a724:	7043      	strb	r3, [r0, #1]
 800a726:	7083      	strb	r3, [r0, #2]
 800a728:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800a72a:	7103      	strb	r3, [r0, #4]
 800a72c:	7143      	strb	r3, [r0, #5]
 800a72e:	7183      	strb	r3, [r0, #6]
 800a730:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800a732:	f001 f907 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a736:	f001 f8f9 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otNetifAddress *)p_ot_req->Data[0];
}
 800a73a:	6880      	ldr	r0, [r0, #8]
 800a73c:	bd08      	pop	{r3, pc}

0800a73e <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800a73e:	b538      	push	{r3, r4, r5, lr}
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800a744:	f001 f91e 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a748:	f001 f8ea 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800a74c:	2300      	movs	r3, #0
 800a74e:	223f      	movs	r2, #63	; 0x3f
 800a750:	7002      	strb	r2, [r0, #0]
 800a752:	7043      	strb	r3, [r0, #1]
 800a754:	7083      	strb	r3, [r0, #2]
 800a756:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=2;
 800a758:	2202      	movs	r2, #2
 800a75a:	7102      	strb	r2, [r0, #4]
 800a75c:	7143      	strb	r3, [r0, #5]
 800a75e:	7183      	strb	r3, [r0, #6]
 800a760:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800a762:	6085      	str	r5, [r0, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800a764:	60c4      	str	r4, [r0, #12]

  Ot_Cmd_Transfer();
 800a766:	f001 f8ed 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a76a:	f001 f8df 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800a76e:	6880      	ldr	r0, [r0, #8]
}
 800a770:	b2c0      	uxtb	r0, r0
 800a772:	bd38      	pop	{r3, r4, r5, pc}

0800a774 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a774:	b510      	push	{r4, lr}
 800a776:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800a778:	f001 f904 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a77c:	f001 f8d0 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a780:	2300      	movs	r3, #0
 800a782:	2208      	movs	r2, #8
 800a784:	7002      	strb	r2, [r0, #0]
 800a786:	7043      	strb	r3, [r0, #1]
 800a788:	7083      	strb	r3, [r0, #2]
 800a78a:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800a78c:	2201      	movs	r2, #1
 800a78e:	7102      	strb	r2, [r0, #4]
 800a790:	7143      	strb	r3, [r0, #5]
 800a792:	7183      	strb	r3, [r0, #6]
 800a794:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a796:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800a798:	f001 f8d4 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a79c:	f001 f8c6 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800a7a0:	6880      	ldr	r0, [r0, #8]
}
 800a7a2:	b2c0      	uxtb	r0, r0
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a7a6:	b510      	push	{r4, lr}
 800a7a8:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800a7aa:	f001 f8eb 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a7ae:	f001 f8b7 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	220f      	movs	r2, #15
 800a7b6:	7002      	strb	r2, [r0, #0]
 800a7b8:	7043      	strb	r3, [r0, #1]
 800a7ba:	7083      	strb	r3, [r0, #2]
 800a7bc:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800a7be:	2201      	movs	r2, #1
 800a7c0:	7102      	strb	r2, [r0, #4]
 800a7c2:	7143      	strb	r3, [r0, #5]
 800a7c4:	7183      	strb	r3, [r0, #6]
 800a7c6:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a7c8:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800a7ca:	f001 f8bb 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a7ce:	f001 f8ad 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800a7d2:	6880      	ldr	r0, [r0, #8]
}
 800a7d4:	b2c0      	uxtb	r0, r0
 800a7d6:	bd10      	pop	{r4, pc}

0800a7d8 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a7dc:	f001 f8d2 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a7e0:	f001 f89e 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f06f 0246 	mvn.w	r2, #70	; 0x46
 800a7ea:	7002      	strb	r2, [r0, #0]
 800a7ec:	7043      	strb	r3, [r0, #1]
 800a7ee:	7083      	strb	r3, [r0, #2]
 800a7f0:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	7102      	strb	r2, [r0, #4]
 800a7f6:	7143      	strb	r3, [r0, #5]
 800a7f8:	7183      	strb	r3, [r0, #6]
 800a7fa:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a7fc:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a7fe:	f001 f8a1 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a802:	f001 f893 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800a806:	bd10      	pop	{r4, pc}

0800a808 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800a808:	b510      	push	{r4, lr}
 800a80a:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800a80c:	f001 f8ba 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a810:	f001 f886 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a814:	2300      	movs	r3, #0
 800a816:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800a81a:	7002      	strb	r2, [r0, #0]
 800a81c:	7043      	strb	r3, [r0, #1]
 800a81e:	7083      	strb	r3, [r0, #2]
 800a820:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800a822:	2201      	movs	r2, #1
 800a824:	7102      	strb	r2, [r0, #4]
 800a826:	7143      	strb	r3, [r0, #5]
 800a828:	7183      	strb	r3, [r0, #6]
 800a82a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a82c:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800a82e:	f001 f889 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a832:	f001 f87b 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800a836:	6880      	ldr	r0, [r0, #8]
}
 800a838:	b280      	uxth	r0, r0
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4606      	mov	r6, r0
 800a840:	460d      	mov	r5, r1
 800a842:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800a844:	f001 f89e 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a848:	f001 f86a 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f06f 023e 	mvn.w	r2, #62	; 0x3e
 800a852:	7002      	strb	r2, [r0, #0]
 800a854:	7043      	strb	r3, [r0, #1]
 800a856:	7083      	strb	r3, [r0, #2]
 800a858:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800a85a:	2203      	movs	r2, #3
 800a85c:	7102      	strb	r2, [r0, #4]
 800a85e:	7143      	strb	r3, [r0, #5]
 800a860:	7183      	strb	r3, [r0, #6]
 800a862:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a864:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800a866:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800a868:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800a86a:	f001 f86b 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a86e:	f001 f85d 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800a872:	6880      	ldr	r0, [r0, #8]
}
 800a874:	b2c0      	uxtb	r0, r0
 800a876:	bd70      	pop	{r4, r5, r6, pc}

0800a878 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	4607      	mov	r7, r0
 800a87c:	460e      	mov	r6, r1
 800a87e:	4615      	mov	r5, r2
 800a880:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800a882:	f001 f87f 	bl	800b984 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a886:	f001 f84b 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f06f 023d 	mvn.w	r2, #61	; 0x3d
 800a890:	7002      	strb	r2, [r0, #0]
 800a892:	7043      	strb	r3, [r0, #1]
 800a894:	7083      	strb	r3, [r0, #2]
 800a896:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=4;
 800a898:	2204      	movs	r2, #4
 800a89a:	7102      	strb	r2, [r0, #4]
 800a89c:	7143      	strb	r3, [r0, #5]
 800a89e:	7183      	strb	r3, [r0, #6]
 800a8a0:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a8a2:	6087      	str	r7, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800a8a4:	60c6      	str	r6, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800a8a6:	6105      	str	r5, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800a8a8:	6144      	str	r4, [r0, #20]

    Ot_Cmd_Transfer();
 800a8aa:	f001 f84b 	bl	800b944 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a8ae:	f001 f83d 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
    return (int)p_ot_req->Data[0];
}
 800a8b2:	6880      	ldr	r0, [r0, #8]
 800a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8b8 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	b082      	sub	sp, #8
    HAL_StatusTypeDef status = HAL_OK;

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a8bc:	f001 f83c 	bl	800b938 <THREAD_Get_NotificationPayloadBuffer>

    switch(p_notification->ID)
 800a8c0:	6803      	ldr	r3, [r0, #0]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	2b14      	cmp	r3, #20
 800a8c6:	f200 80e6 	bhi.w	800aa96 <OpenThread_CallBack_Processing+0x1de>
 800a8ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a8ce:	0015      	.short	0x0015
 800a8d0:	002b001f 	.word	0x002b001f
 800a8d4:	00440039 	.word	0x00440039
 800a8d8:	0059004e 	.word	0x0059004e
 800a8dc:	006d0063 	.word	0x006d0063
 800a8e0:	00810077 	.word	0x00810077
 800a8e4:	00e4008b 	.word	0x00e4008b
 800a8e8:	00a60097 	.word	0x00a60097
 800a8ec:	00bb00b1 	.word	0x00bb00b1
 800a8f0:	00d200c6 	.word	0x00d200c6
 800a8f4:	00db00e4 	.word	0x00db00e4
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800a8f8:	4b7a      	ldr	r3, [pc, #488]	; (800aae4 <OpenThread_CallBack_Processing+0x22c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80cc 	beq.w	800aa9a <OpenThread_CallBack_Processing+0x1e2>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800a902:	68c1      	ldr	r1, [r0, #12]
 800a904:	6880      	ldr	r0, [r0, #8]
 800a906:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a908:	2400      	movs	r4, #0
 800a90a:	e01f      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
                    (void*) p_notification->Data[1]);
        }
        break;
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 800a90c:	6883      	ldr	r3, [r0, #8]
 800a90e:	4a76      	ldr	r2, [pc, #472]	; (800aae8 <OpenThread_CallBack_Processing+0x230>)
 800a910:	6013      	str	r3, [r2, #0]

        if (coapRequestHandlerCb != NULL)
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80c3 	beq.w	800aa9e <OpenThread_CallBack_Processing+0x1e6>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800a918:	6942      	ldr	r2, [r0, #20]
 800a91a:	6901      	ldr	r1, [r0, #16]
 800a91c:	68c0      	ldr	r0, [r0, #12]
 800a91e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a920:	2400      	movs	r4, #0
 800a922:	e013      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3]);
        }
        break;
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 800a924:	6884      	ldr	r4, [r0, #8]
 800a926:	4b71      	ldr	r3, [pc, #452]	; (800aaec <OpenThread_CallBack_Processing+0x234>)
 800a928:	601c      	str	r4, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 800a92a:	2c00      	cmp	r4, #0
 800a92c:	f000 80b9 	beq.w	800aaa2 <OpenThread_CallBack_Processing+0x1ea>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3],
                    (otError) p_notification->Data[4]);
 800a930:	6983      	ldr	r3, [r0, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800a932:	b2db      	uxtb	r3, r3
 800a934:	6942      	ldr	r2, [r0, #20]
 800a936:	6901      	ldr	r1, [r0, #16]
 800a938:	68c0      	ldr	r0, [r0, #12]
 800a93a:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800a93c:	2400      	movs	r4, #0
 800a93e:	e005      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        }
        break;
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a940:	2001      	movs	r0, #1
 800a942:	f000 f901 	bl	800ab48 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800a946:	f7f8 f97d 	bl	8002c44 <HAL_NVIC_SystemReset>
    HAL_StatusTypeDef status = HAL_OK;
 800a94a:	2400      	movs	r4, #0
    default:
        status = HAL_ERROR;
        break;
    }

    TL_THREAD_SendAck();
 800a94c:	f000 fbc8 	bl	800b0e0 <TL_THREAD_SendAck>
    return status;

}
 800a950:	4620      	mov	r0, r4
 800a952:	b002      	add	sp, #8
 800a954:	bd70      	pop	{r4, r5, r6, pc}
        if (otIp6ReceiveCb != NULL)
 800a956:	4b66      	ldr	r3, [pc, #408]	; (800aaf0 <OpenThread_CallBack_Processing+0x238>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 80a3 	beq.w	800aaa6 <OpenThread_CallBack_Processing+0x1ee>
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a960:	68c1      	ldr	r1, [r0, #12]
 800a962:	6880      	ldr	r0, [r0, #8]
 800a964:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a966:	2400      	movs	r4, #0
 800a968:	e7f0      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (aIidCreateCb != NULL)
 800a96a:	4b62      	ldr	r3, [pc, #392]	; (800aaf4 <OpenThread_CallBack_Processing+0x23c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 809b 	beq.w	800aaaa <OpenThread_CallBack_Processing+0x1f2>
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800a974:	68c2      	ldr	r2, [r0, #12]
 800a976:	6881      	ldr	r1, [r0, #8]
 800a978:	2000      	movs	r0, #0
 800a97a:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a97c:	2400      	movs	r4, #0
 800a97e:	e7e5      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otHandleActiveScanResultCb != NULL)
 800a980:	4b5d      	ldr	r3, [pc, #372]	; (800aaf8 <OpenThread_CallBack_Processing+0x240>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8092 	beq.w	800aaae <OpenThread_CallBack_Processing+0x1f6>
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a98a:	68c1      	ldr	r1, [r0, #12]
 800a98c:	6880      	ldr	r0, [r0, #8]
 800a98e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a990:	2400      	movs	r4, #0
 800a992:	e7db      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otHandleEnergyScanResultCb != NULL)
 800a994:	4b59      	ldr	r3, [pc, #356]	; (800aafc <OpenThread_CallBack_Processing+0x244>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 808a 	beq.w	800aab2 <OpenThread_CallBack_Processing+0x1fa>
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a99e:	68c1      	ldr	r1, [r0, #12]
 800a9a0:	6880      	ldr	r0, [r0, #8]
 800a9a2:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a9a4:	2400      	movs	r4, #0
 800a9a6:	e7d1      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otLinkPcapCb != NULL)
 800a9a8:	4b55      	ldr	r3, [pc, #340]	; (800ab00 <OpenThread_CallBack_Processing+0x248>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8082 	beq.w	800aab6 <OpenThread_CallBack_Processing+0x1fe>
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a9b2:	68c1      	ldr	r1, [r0, #12]
 800a9b4:	6880      	ldr	r0, [r0, #8]
 800a9b6:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a9b8:	2400      	movs	r4, #0
 800a9ba:	e7c7      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otReceiveDiagnosticGetCb != NULL)
 800a9bc:	4b51      	ldr	r3, [pc, #324]	; (800ab04 <OpenThread_CallBack_Processing+0x24c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d07a      	beq.n	800aaba <OpenThread_CallBack_Processing+0x202>
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a9c4:	6902      	ldr	r2, [r0, #16]
 800a9c6:	68c1      	ldr	r1, [r0, #12]
 800a9c8:	6880      	ldr	r0, [r0, #8]
 800a9ca:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a9cc:	2400      	movs	r4, #0
 800a9ce:	e7bd      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otThreadChildTableCallbackCb != NULL)
 800a9d0:	4b4d      	ldr	r3, [pc, #308]	; (800ab08 <OpenThread_CallBack_Processing+0x250>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d072      	beq.n	800aabe <OpenThread_CallBack_Processing+0x206>
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800a9d8:	6882      	ldr	r2, [r0, #8]
 800a9da:	68c1      	ldr	r1, [r0, #12]
 800a9dc:	b2d0      	uxtb	r0, r2
 800a9de:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800a9e0:	2400      	movs	r4, #0
 800a9e2:	e7b3      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otCommissionerEnergyReportCb != NULL)
 800a9e4:	4b49      	ldr	r3, [pc, #292]	; (800ab0c <OpenThread_CallBack_Processing+0x254>)
 800a9e6:	681c      	ldr	r4, [r3, #0]
 800a9e8:	2c00      	cmp	r4, #0
 800a9ea:	d06a      	beq.n	800aac2 <OpenThread_CallBack_Processing+0x20a>
                    (uint8_t) p_notification->Data[2],
 800a9ec:	6902      	ldr	r2, [r0, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a9ee:	6943      	ldr	r3, [r0, #20]
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	68c1      	ldr	r1, [r0, #12]
 800a9f4:	6880      	ldr	r0, [r0, #8]
 800a9f6:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800a9f8:	2400      	movs	r4, #0
 800a9fa:	e7a7      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otDnsResponseHandlerCb != NULL)
 800a9fc:	4b44      	ldr	r3, [pc, #272]	; (800ab10 <OpenThread_CallBack_Processing+0x258>)
 800a9fe:	681d      	ldr	r5, [r3, #0]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d060      	beq.n	800aac6 <OpenThread_CallBack_Processing+0x20e>
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800aa04:	6886      	ldr	r6, [r0, #8]
                    (char*) p_notification->Data[1],
 800aa06:	68c1      	ldr	r1, [r0, #12]
                    (otIp6Address*) p_notification->Data[2],
 800aa08:	6902      	ldr	r2, [r0, #16]
                    (uint32_t) p_notification->Data[3],
 800aa0a:	6943      	ldr	r3, [r0, #20]
                    (otError) p_notification->Data[4]);
 800aa0c:	6984      	ldr	r4, [r0, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800aa0e:	b2e4      	uxtb	r4, r4
 800aa10:	9400      	str	r4, [sp, #0]
 800aa12:	4630      	mov	r0, r6
 800aa14:	47a8      	blx	r5
    HAL_StatusTypeDef status = HAL_OK;
 800aa16:	2400      	movs	r4, #0
 800aa18:	e798      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otIcmp6ReceiveCb != NULL)
 800aa1a:	4b3e      	ldr	r3, [pc, #248]	; (800ab14 <OpenThread_CallBack_Processing+0x25c>)
 800aa1c:	681c      	ldr	r4, [r3, #0]
 800aa1e:	2c00      	cmp	r4, #0
 800aa20:	d053      	beq.n	800aaca <OpenThread_CallBack_Processing+0x212>
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800aa22:	6943      	ldr	r3, [r0, #20]
 800aa24:	6902      	ldr	r2, [r0, #16]
 800aa26:	68c1      	ldr	r1, [r0, #12]
 800aa28:	6880      	ldr	r0, [r0, #8]
 800aa2a:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800aa2c:	2400      	movs	r4, #0
 800aa2e:	e78d      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otJoinerCb != NULL)
 800aa30:	4b39      	ldr	r3, [pc, #228]	; (800ab18 <OpenThread_CallBack_Processing+0x260>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d04a      	beq.n	800aace <OpenThread_CallBack_Processing+0x216>
            otJoinerCb((otError) p_notification->Data[0],
 800aa38:	6882      	ldr	r2, [r0, #8]
 800aa3a:	68c1      	ldr	r1, [r0, #12]
 800aa3c:	b2d0      	uxtb	r0, r2
 800aa3e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800aa40:	2400      	movs	r4, #0
 800aa42:	e783      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawReceiveDoneCb != NULL)
 800aa44:	4b35      	ldr	r3, [pc, #212]	; (800ab1c <OpenThread_CallBack_Processing+0x264>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d042      	beq.n	800aad2 <OpenThread_CallBack_Processing+0x21a>
                    (otError) p_notification->Data[2]);
 800aa4c:	6902      	ldr	r2, [r0, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	68c1      	ldr	r1, [r0, #12]
 800aa52:	6880      	ldr	r0, [r0, #8]
 800aa54:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800aa56:	2400      	movs	r4, #0
 800aa58:	e778      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawTransmitDoneCb != NULL)
 800aa5a:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <OpenThread_CallBack_Processing+0x268>)
 800aa5c:	681c      	ldr	r4, [r3, #0]
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	d039      	beq.n	800aad6 <OpenThread_CallBack_Processing+0x21e>
                    (otError) p_notification->Data[3]);
 800aa62:	6943      	ldr	r3, [r0, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	6902      	ldr	r2, [r0, #16]
 800aa68:	68c1      	ldr	r1, [r0, #12]
 800aa6a:	6880      	ldr	r0, [r0, #8]
 800aa6c:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800aa6e:	2400      	movs	r4, #0
 800aa70:	e76c      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawEnergyScanDoneCb != NULL)
 800aa72:	4b2c      	ldr	r3, [pc, #176]	; (800ab24 <OpenThread_CallBack_Processing+0x26c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	b383      	cbz	r3, 800aada <OpenThread_CallBack_Processing+0x222>
                    (int8_t) p_notification->Data[1]);
 800aa78:	68c1      	ldr	r1, [r0, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800aa7a:	b249      	sxtb	r1, r1
 800aa7c:	6880      	ldr	r0, [r0, #8]
 800aa7e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800aa80:	2400      	movs	r4, #0
 800aa82:	e763      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        if (otUdpReceiveCb != NULL)
 800aa84:	4b28      	ldr	r3, [pc, #160]	; (800ab28 <OpenThread_CallBack_Processing+0x270>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	b34b      	cbz	r3, 800aade <OpenThread_CallBack_Processing+0x226>
            otUdpReceiveCb((void*) p_notification->Data[0],
 800aa8a:	6902      	ldr	r2, [r0, #16]
 800aa8c:	68c1      	ldr	r1, [r0, #12]
 800aa8e:	6880      	ldr	r0, [r0, #8]
 800aa90:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800aa92:	2400      	movs	r4, #0
 800aa94:	e75a      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
        status = HAL_ERROR;
 800aa96:	2401      	movs	r4, #1
 800aa98:	e758      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
    HAL_StatusTypeDef status = HAL_OK;
 800aa9a:	2400      	movs	r4, #0
 800aa9c:	e756      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aa9e:	2400      	movs	r4, #0
 800aaa0:	e754      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaa2:	2400      	movs	r4, #0
 800aaa4:	e752      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaa6:	2400      	movs	r4, #0
 800aaa8:	e750      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaaa:	2400      	movs	r4, #0
 800aaac:	e74e      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaae:	2400      	movs	r4, #0
 800aab0:	e74c      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aab2:	2400      	movs	r4, #0
 800aab4:	e74a      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aab6:	2400      	movs	r4, #0
 800aab8:	e748      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaba:	2400      	movs	r4, #0
 800aabc:	e746      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aabe:	2400      	movs	r4, #0
 800aac0:	e744      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aac2:	2400      	movs	r4, #0
 800aac4:	e742      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aac6:	2400      	movs	r4, #0
 800aac8:	e740      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aaca:	2400      	movs	r4, #0
 800aacc:	e73e      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aace:	2400      	movs	r4, #0
 800aad0:	e73c      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aad2:	2400      	movs	r4, #0
 800aad4:	e73a      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aad6:	2400      	movs	r4, #0
 800aad8:	e738      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aada:	2400      	movs	r4, #0
 800aadc:	e736      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aade:	2400      	movs	r4, #0
 800aae0:	e734      	b.n	800a94c <OpenThread_CallBack_Processing+0x94>
 800aae2:	bf00      	nop
 800aae4:	20003df8 	.word	0x20003df8
 800aae8:	20003dc0 	.word	0x20003dc0
 800aaec:	20003dc4 	.word	0x20003dc4
 800aaf0:	20003ddc 	.word	0x20003ddc
 800aaf4:	20003dbc 	.word	0x20003dbc
 800aaf8:	20003dd0 	.word	0x20003dd0
 800aafc:	20003dd4 	.word	0x20003dd4
 800ab00:	20003de4 	.word	0x20003de4
 800ab04:	20003df4 	.word	0x20003df4
 800ab08:	20003dfc 	.word	0x20003dfc
 800ab0c:	20003dc8 	.word	0x20003dc8
 800ab10:	20003dcc 	.word	0x20003dcc
 800ab14:	20003dd8 	.word	0x20003dd8
 800ab18:	20003de0 	.word	0x20003de0
 800ab1c:	20003dec 	.word	0x20003dec
 800ab20:	20003df0 	.word	0x20003df0
 800ab24:	20003de8 	.word	0x20003de8
 800ab28:	20003e00 	.word	0x20003e00

0800ab2c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800ab2c:	b500      	push	{lr}
 800ab2e:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800ab30:	466b      	mov	r3, sp
 800ab32:	2200      	movs	r2, #0
 800ab34:	4611      	mov	r1, r2
 800ab36:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800ab3a:	f000 f8e3 	bl	800ad04 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800ab3e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ab42:	b005      	add	sp, #20
 800ab44:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab48 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800ab48:	b500      	push	{lr}
 800ab4a:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  local_buffer[0] = Ip;
 800ab4c:	aa04      	add	r2, sp, #16
 800ab4e:	f802 0d10 	strb.w	r0, [r2, #-16]!

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800ab52:	4613      	mov	r3, r2
 800ab54:	2101      	movs	r1, #1
 800ab56:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800ab5a:	f000 f8d3 	bl	800ad04 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800ab5e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ab62:	b005      	add	sp, #20
 800ab64:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab68 <SHCI_GetWirelessFwInfo>:
  MB_RefTable_t * p_RefTable = NULL;
  uint32_t version = 0;
  uint32_t memorySize = 0;
  uint32_t infoStack = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ab68:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <SHCI_GetWirelessFwInfo+0x68>)
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ab74:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	6912      	ldr	r2, [r2, #16]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ab7c:	0e11      	lsrs	r1, r2, #24
 800ab7e:	7001      	strb	r1, [r0, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ab80:	0c11      	lsrs	r1, r2, #16
 800ab82:	7041      	strb	r1, [r0, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ab84:	0a11      	lsrs	r1, r2, #8
 800ab86:	7081      	strb	r1, [r0, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ab88:	f3c2 1103 	ubfx	r1, r2, #4, #4
 800ab8c:	70c1      	strb	r1, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ab8e:	f002 020f 	and.w	r2, r2, #15
 800ab92:	7102      	strb	r2, [r0, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	6952      	ldr	r2, [r2, #20]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ab98:	0e11      	lsrs	r1, r2, #24
 800ab9a:	7141      	strb	r1, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ab9c:	0c11      	lsrs	r1, r2, #16
 800ab9e:	7181      	strb	r1, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800aba0:	0a11      	lsrs	r1, r2, #8
 800aba2:	71c1      	strb	r1, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aba4:	7202      	strb	r2, [r0, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	6992      	ldr	r2, [r2, #24]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800abaa:	7242      	strb	r2, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	6852      	ldr	r2, [r2, #4]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800abb0:	0e11      	lsrs	r1, r2, #24
 800abb2:	7281      	strb	r1, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800abb4:	0c11      	lsrs	r1, r2, #16
 800abb6:	72c1      	strb	r1, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800abb8:	0a12      	lsrs	r2, r2, #8
 800abba:	7302      	strb	r2, [r0, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800abc0:	0e1a      	lsrs	r2, r3, #24
 800abc2:	7342      	strb	r2, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800abc4:	0c1a      	lsrs	r2, r3, #16
 800abc6:	7382      	strb	r2, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800abc8:	73c3      	strb	r3, [r0, #15]

  return (SHCI_Success);
}
 800abca:	2000      	movs	r0, #0
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	58004000 	.word	0x58004000

0800abd4 <Cmd_SetStatus>:

  return;
}

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800abd4:	b508      	push	{r3, lr}
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800abd6:	b938      	cbnz	r0, 800abe8 <Cmd_SetStatus+0x14>
  {
    if(StatusNotCallBackFunction != 0)
 800abd8:	4b08      	ldr	r3, [pc, #32]	; (800abfc <Cmd_SetStatus+0x28>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	b103      	cbz	r3, 800abe0 <Cmd_SetStatus+0xc>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800abde:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <Cmd_SetStatus+0x2c>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	701a      	strb	r2, [r3, #0]
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
}
 800abe6:	bd08      	pop	{r3, pc}
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800abe8:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <Cmd_SetStatus+0x2c>)
 800abea:	2201      	movs	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800abee:	4b03      	ldr	r3, [pc, #12]	; (800abfc <Cmd_SetStatus+0x28>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0f7      	beq.n	800abe6 <Cmd_SetStatus+0x12>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800abf6:	4610      	mov	r0, r2
 800abf8:	4798      	blx	r3
  return;
 800abfa:	e7f4      	b.n	800abe6 <Cmd_SetStatus+0x12>
 800abfc:	20003e04 	.word	0x20003e04
 800ac00:	20000104 	.word	0x20000104

0800ac04 <TlInit>:
{
 800ac04:	b530      	push	{r4, r5, lr}
 800ac06:	b085      	sub	sp, #20
 800ac08:	4605      	mov	r5, r0
  pCmdBuffer = p_cmdbuffer;
 800ac0a:	4c0b      	ldr	r4, [pc, #44]	; (800ac38 <TlInit+0x34>)
 800ac0c:	6060      	str	r0, [r4, #4]
  LST_init_head (&SHciAsynchEventQueue);
 800ac0e:	f104 0008 	add.w	r0, r4, #8
 800ac12:	f000 f8ad 	bl	800ad70 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ac16:	2001      	movs	r0, #1
 800ac18:	f7ff ffdc 	bl	800abd4 <Cmd_SetStatus>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	7423      	strb	r3, [r4, #16]
  if (shciContext.io.Init)
 800ac20:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <TlInit+0x38>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	b133      	cbz	r3, 800ac34 <TlInit+0x30>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ac26:	9503      	str	r5, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ac28:	4a05      	ldr	r2, [pc, #20]	; (800ac40 <TlInit+0x3c>)
 800ac2a:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ac2c:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <TlInit+0x40>)
 800ac2e:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 800ac30:	a801      	add	r0, sp, #4
 800ac32:	4798      	blx	r3
}
 800ac34:	b005      	add	sp, #20
 800ac36:	bd30      	pop	{r4, r5, pc}
 800ac38:	20000104 	.word	0x20000104
 800ac3c:	20003e08 	.word	0x20003e08
 800ac40:	0800ac61 	.word	0x0800ac61
 800ac44:	0800ac49 	.word	0x0800ac49

0800ac48 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ac48:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ac4a:	4c04      	ldr	r4, [pc, #16]	; (800ac5c <TlUserEvtReceived+0x14>)
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f8a9 	bl	800ada6 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7f5 fd5f 	bl	8000718 <shci_notify_asynch_evt>

  return;
}
 800ac5a:	bd10      	pop	{r4, pc}
 800ac5c:	2000010c 	.word	0x2000010c

0800ac60 <TlCmdEvtReceived>:
{
 800ac60:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ac62:	2000      	movs	r0, #0
 800ac64:	f7f5 fd62 	bl	800072c <shci_cmd_resp_release>
}
 800ac68:	bd08      	pop	{r3, pc}
	...

0800ac6c <shci_init>:
{
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ac70:	684a      	ldr	r2, [r1, #4]
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <shci_init+0x1c>)
 800ac74:	601a      	str	r2, [r3, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <shci_init+0x20>)
 800ac78:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f86e 	bl	800ad5c <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ac80:	6820      	ldr	r0, [r4, #0]
 800ac82:	f7ff ffbf 	bl	800ac04 <TlInit>
}
 800ac86:	bd10      	pop	{r4, pc}
 800ac88:	20003e04 	.word	0x20003e04
 800ac8c:	20003e08 	.word	0x20003e08

0800ac90 <shci_user_evt_proc>:
{
 800ac90:	b510      	push	{r4, lr}
 800ac92:	b084      	sub	sp, #16
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ac94:	4818      	ldr	r0, [pc, #96]	; (800acf8 <shci_user_evt_proc+0x68>)
 800ac96:	f000 f86e 	bl	800ad76 <LST_is_empty>
 800ac9a:	b910      	cbnz	r0, 800aca2 <shci_user_evt_proc+0x12>
 800ac9c:	4b17      	ldr	r3, [pc, #92]	; (800acfc <shci_user_evt_proc+0x6c>)
 800ac9e:	7c1b      	ldrb	r3, [r3, #16]
 800aca0:	b943      	cbnz	r3, 800acb4 <shci_user_evt_proc+0x24>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aca2:	4815      	ldr	r0, [pc, #84]	; (800acf8 <shci_user_evt_proc+0x68>)
 800aca4:	f000 f867 	bl	800ad76 <LST_is_empty>
 800aca8:	b910      	cbnz	r0, 800acb0 <shci_user_evt_proc+0x20>
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <shci_user_evt_proc+0x6c>)
 800acac:	7c1b      	ldrb	r3, [r3, #16]
 800acae:	b9fb      	cbnz	r3, 800acf0 <shci_user_evt_proc+0x60>
}
 800acb0:	b004      	add	sp, #16
 800acb2:	bd10      	pop	{r4, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800acb4:	4c11      	ldr	r4, [pc, #68]	; (800acfc <shci_user_evt_proc+0x6c>)
 800acb6:	a903      	add	r1, sp, #12
 800acb8:	f104 0008 	add.w	r0, r4, #8
 800acbc:	f000 f88b 	bl	800add6 <LST_remove_head>
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800acc0:	2301      	movs	r3, #1
 800acc2:	7423      	strb	r3, [r4, #16]
    if (shciContext.UserEvtRx != NULL)
 800acc4:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <shci_user_evt_proc+0x70>)
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	b133      	cbz	r3, 800acd8 <shci_user_evt_proc+0x48>
      UserEvtRxParam.pckt = phcievtbuffer;
 800acca:	9a03      	ldr	r2, [sp, #12]
 800accc:	9202      	str	r2, [sp, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800acce:	a801      	add	r0, sp, #4
 800acd0:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800acd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800acd6:	7422      	strb	r2, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800acd8:	4b08      	ldr	r3, [pc, #32]	; (800acfc <shci_user_evt_proc+0x6c>)
 800acda:	7c1b      	ldrb	r3, [r3, #16]
 800acdc:	b11b      	cbz	r3, 800ace6 <shci_user_evt_proc+0x56>
      TL_MM_EvtDone( phcievtbuffer );
 800acde:	9803      	ldr	r0, [sp, #12]
 800ace0:	f000 fa54 	bl	800b18c <TL_MM_EvtDone>
 800ace4:	e7dd      	b.n	800aca2 <shci_user_evt_proc+0x12>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ace6:	9903      	ldr	r1, [sp, #12]
 800ace8:	4803      	ldr	r0, [pc, #12]	; (800acf8 <shci_user_evt_proc+0x68>)
 800acea:	f000 f850 	bl	800ad8e <LST_insert_head>
 800acee:	e7d8      	b.n	800aca2 <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <shci_user_evt_proc+0x68>)
 800acf2:	f7f5 fd11 	bl	8000718 <shci_notify_asynch_evt>
  return;
 800acf6:	e7db      	b.n	800acb0 <shci_user_evt_proc+0x20>
 800acf8:	2000010c 	.word	0x2000010c
 800acfc:	20000104 	.word	0x20000104
 800ad00:	20003e08 	.word	0x20003e08

0800ad04 <shci_send>:
{
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4680      	mov	r8, r0
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	4617      	mov	r7, r2
 800ad0e:	461e      	mov	r6, r3
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7ff ff5f 	bl	800abd4 <Cmd_SetStatus>
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ad16:	4c0f      	ldr	r4, [pc, #60]	; (800ad54 <shci_send+0x50>)
 800ad18:	6860      	ldr	r0, [r4, #4]
 800ad1a:	f8a0 8009 	strh.w	r8, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ad1e:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ad20:	462a      	mov	r2, r5
 800ad22:	4639      	mov	r1, r7
 800ad24:	300c      	adds	r0, #12
 800ad26:	f001 f883 	bl	800be30 <memcpy>
  shciContext.io.Send(0,0);
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <shci_send+0x54>)
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4608      	mov	r0, r1
 800ad32:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ad34:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ad38:	f7f5 fd00 	bl	800073c <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ad3c:	6861      	ldr	r1, [r4, #4]
 800ad3e:	788a      	ldrb	r2, [r1, #2]
 800ad40:	3203      	adds	r2, #3
 800ad42:	f106 0008 	add.w	r0, r6, #8
 800ad46:	f001 f873 	bl	800be30 <memcpy>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	f7ff ff42 	bl	800abd4 <Cmd_SetStatus>
}
 800ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad54:	20000104 	.word	0x20000104
 800ad58:	20003e08 	.word	0x20003e08

0800ad5c <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <shci_register_io_bus+0xc>)
 800ad5e:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <shci_register_io_bus+0x10>)
 800ad62:	6103      	str	r3, [r0, #16]

  return;
}
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	0800aff9 	.word	0x0800aff9
 800ad6c:	0800b035 	.word	0x0800b035

0800ad70 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800ad70:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800ad72:	6040      	str	r0, [r0, #4]
}
 800ad74:	4770      	bx	lr

0800ad76 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad76:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad7a:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ad7c:	6802      	ldr	r2, [r0, #0]
 800ad7e:	4282      	cmp	r2, r0
 800ad80:	d003      	beq.n	800ad8a <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 800ad82:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad84:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800ad88:	4770      	bx	lr
    return_value = TRUE;
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	e7fa      	b.n	800ad84 <LST_is_empty+0xe>

0800ad8e <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad8e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad92:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ad94:	6802      	ldr	r2, [r0, #0]
 800ad96:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800ad98:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800ad9a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800ad9c:	680a      	ldr	r2, [r1, #0]
 800ad9e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ada4:	4770      	bx	lr

0800ada6 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ada6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800adaa:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800adac:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800adae:	6842      	ldr	r2, [r0, #4]
 800adb0:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800adb2:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800adb4:	684a      	ldr	r2, [r1, #4]
 800adb6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800adbc:	4770      	bx	lr

0800adbe <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adbe:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800adc2:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800adc4:	6842      	ldr	r2, [r0, #4]
 800adc6:	6801      	ldr	r1, [r0, #0]
 800adc8:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 800adca:	6802      	ldr	r2, [r0, #0]
 800adcc:	6841      	ldr	r1, [r0, #4]
 800adce:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800add0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800add4:	4770      	bx	lr

0800add6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800add6:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800add8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800addc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800adde:	6803      	ldr	r3, [r0, #0]
 800ade0:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	f7ff ffeb 	bl	800adbe <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade8:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800adec:	bd10      	pop	{r4, pc}

0800adee <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800adee:	b510      	push	{r4, lr}
 800adf0:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800adf2:	f000 fdc7 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800adf6:	f000 fd93 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800adfa:	2300      	movs	r3, #0
 800adfc:	2242      	movs	r2, #66	; 0x42
 800adfe:	7002      	strb	r2, [r0, #0]
 800ae00:	7043      	strb	r3, [r0, #1]
 800ae02:	7083      	strb	r3, [r0, #2]
 800ae04:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800ae06:	2201      	movs	r2, #1
 800ae08:	7102      	strb	r2, [r0, #4]
 800ae0a:	7143      	strb	r3, [r0, #5]
 800ae0c:	7183      	strb	r3, [r0, #6]
 800ae0e:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ae10:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800ae12:	f000 fd97 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae16:	f000 fd89 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800ae1a:	6880      	ldr	r0, [r0, #8]
}
 800ae1c:	b2c0      	uxtb	r0, r0
 800ae1e:	bd10      	pop	{r4, pc}

0800ae20 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 800ae20:	b510      	push	{r4, lr}
 800ae22:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800ae24:	f000 fdae 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae28:	f000 fd7a 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	224b      	movs	r2, #75	; 0x4b
 800ae30:	7002      	strb	r2, [r0, #0]
 800ae32:	7043      	strb	r3, [r0, #1]
 800ae34:	7083      	strb	r3, [r0, #2]
 800ae36:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800ae38:	2201      	movs	r2, #1
 800ae3a:	7102      	strb	r2, [r0, #4]
 800ae3c:	7143      	strb	r3, [r0, #5]
 800ae3e:	7183      	strb	r3, [r0, #6]
 800ae40:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 800ae42:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800ae44:	f000 fd7e 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae48:	f000 fd70 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800ae4c:	6880      	ldr	r0, [r0, #8]
}
 800ae4e:	b2c0      	uxtb	r0, r0
 800ae50:	bd10      	pop	{r4, pc}

0800ae52 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 800ae52:	b510      	push	{r4, lr}
 800ae54:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800ae56:	f000 fd95 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae5a:	f000 fd61 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	2250      	movs	r2, #80	; 0x50
 800ae62:	7002      	strb	r2, [r0, #0]
 800ae64:	7043      	strb	r3, [r0, #1]
 800ae66:	7083      	strb	r3, [r0, #2]
 800ae68:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	7102      	strb	r2, [r0, #4]
 800ae6e:	7143      	strb	r3, [r0, #5]
 800ae70:	7183      	strb	r3, [r0, #6]
 800ae72:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800ae74:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800ae76:	f000 fd65 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ae7a:	f000 fd57 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800ae7e:	6880      	ldr	r0, [r0, #8]
}
 800ae80:	b2c0      	uxtb	r0, r0
 800ae82:	bd10      	pop	{r4, pc}

0800ae84 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800ae84:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800ae86:	f000 fd7d 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ae8a:	f000 fd49 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	2251      	movs	r2, #81	; 0x51
 800ae92:	7002      	strb	r2, [r0, #0]
 800ae94:	7043      	strb	r3, [r0, #1]
 800ae96:	7083      	strb	r3, [r0, #2]
 800ae98:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800ae9a:	7103      	strb	r3, [r0, #4]
 800ae9c:	7143      	strb	r3, [r0, #5]
 800ae9e:	7183      	strb	r3, [r0, #6]
 800aea0:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800aea2:	f000 fd4f 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aea6:	f000 fd41 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otIp6Address *)p_ot_req->Data[0];
}
 800aeaa:	6880      	ldr	r0, [r0, #8]
 800aeac:	bd08      	pop	{r3, pc}

0800aeae <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800aeae:	b510      	push	{r4, lr}
 800aeb0:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800aeb2:	f000 fd67 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aeb6:	f000 fd33 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800aeba:	2300      	movs	r3, #0
 800aebc:	2256      	movs	r2, #86	; 0x56
 800aebe:	7002      	strb	r2, [r0, #0]
 800aec0:	7043      	strb	r3, [r0, #1]
 800aec2:	7083      	strb	r3, [r0, #2]
 800aec4:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800aec6:	2201      	movs	r2, #1
 800aec8:	7102      	strb	r2, [r0, #4]
 800aeca:	7143      	strb	r3, [r0, #5]
 800aecc:	7183      	strb	r3, [r0, #6]
 800aece:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800aed0:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800aed2:	f000 fd37 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aed6:	f000 fd29 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800aeda:	6880      	ldr	r0, [r0, #8]
}
 800aedc:	b2c0      	uxtb	r0, r0
 800aede:	bd10      	pop	{r4, pc}

0800aee0 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800aee0:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800aee2:	f000 fd4f 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aee6:	f000 fd1b 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	225e      	movs	r2, #94	; 0x5e
 800aeee:	7002      	strb	r2, [r0, #0]
 800aef0:	7043      	strb	r3, [r0, #1]
 800aef2:	7083      	strb	r3, [r0, #2]
 800aef4:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800aef6:	7103      	strb	r3, [r0, #4]
 800aef8:	7143      	strb	r3, [r0, #5]
 800aefa:	7183      	strb	r3, [r0, #6]
 800aefc:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800aefe:	f000 fd21 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af02:	f000 fd13 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otDeviceRole)p_ot_req->Data[0];
 800af06:	6880      	ldr	r0, [r0, #8]
}
 800af08:	b2c0      	uxtb	r0, r0
 800af0a:	bd08      	pop	{r3, pc}

0800af0c <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800af0c:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800af0e:	f000 fd39 	bl	800b984 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800af12:	f000 fd05 	bl	800b920 <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800af16:	2300      	movs	r3, #0
 800af18:	2263      	movs	r2, #99	; 0x63
 800af1a:	7002      	strb	r2, [r0, #0]
 800af1c:	7043      	strb	r3, [r0, #1]
 800af1e:	7083      	strb	r3, [r0, #2]
 800af20:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800af22:	7103      	strb	r3, [r0, #4]
 800af24:	7143      	strb	r3, [r0, #5]
 800af26:	7183      	strb	r3, [r0, #6]
 800af28:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800af2a:	f000 fd0b 	bl	800b944 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800af2e:	f000 fcfd 	bl	800b92c <THREAD_Get_OTCmdRspPayloadBuffer>
  return (uint16_t)p_ot_req->Data[0];
 800af32:	6880      	ldr	r0, [r0, #8]
}
 800af34:	b280      	uxth	r0, r0
 800af36:	bd08      	pop	{r3, pc}

0800af38 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800af38:	b500      	push	{lr}
 800af3a:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af3c:	e009      	b.n	800af52 <SendFreeBuf+0x1a>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800af3e:	a901      	add	r1, sp, #4
 800af40:	4808      	ldr	r0, [pc, #32]	; (800af64 <SendFreeBuf+0x2c>)
 800af42:	f7ff ff48 	bl	800add6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800af46:	4b08      	ldr	r3, [pc, #32]	; (800af68 <SendFreeBuf+0x30>)
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	9901      	ldr	r1, [sp, #4]
 800af4c:	6918      	ldr	r0, [r3, #16]
 800af4e:	f7ff ff2a 	bl	800ada6 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af52:	4804      	ldr	r0, [pc, #16]	; (800af64 <SendFreeBuf+0x2c>)
 800af54:	f7ff ff0f 	bl	800ad76 <LST_is_empty>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d0f0      	beq.n	800af3e <SendFreeBuf+0x6>
  }

  return;
}
 800af5c:	b003      	add	sp, #12
 800af5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800af62:	bf00      	nop
 800af64:	20003e30 	.word	0x20003e30
 800af68:	20030000 	.word	0x20030000

0800af6c <TL_Enable>:
{
 800af6c:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 800af6e:	f000 fdad 	bl	800bacc <HW_IPCC_Enable>
}
 800af72:	bd08      	pop	{r3, pc}

0800af74 <TL_Init>:
{
 800af74:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800af76:	4a0e      	ldr	r2, [pc, #56]	; (800afb0 <TL_Init+0x3c>)
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <TL_Init+0x40>)
 800af7a:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800af7c:	f103 0120 	add.w	r1, r3, #32
 800af80:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800af82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af86:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800af88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af8c:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800af8e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800af92:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800af94:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800af98:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800af9a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800af9e:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800afa0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800afa4:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800afa6:	3378      	adds	r3, #120	; 0x78
 800afa8:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800afaa:	f000 fd99 	bl	800bae0 <HW_IPCC_Init>
}
 800afae:	bd08      	pop	{r3, pc}
 800afb0:	20030000 	.word	0x20030000
 800afb4:	20030024 	.word	0x20030024

0800afb8 <HW_IPCC_BLE_RxEvtNot>:
{
 800afb8:	b500      	push	{lr}
 800afba:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 800afbc:	e007      	b.n	800afce <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800afbe:	a901      	add	r1, sp, #4
 800afc0:	4807      	ldr	r0, [pc, #28]	; (800afe0 <HW_IPCC_BLE_RxEvtNot+0x28>)
 800afc2:	f7ff ff08 	bl	800add6 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800afc6:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <HW_IPCC_BLE_RxEvtNot+0x2c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	9801      	ldr	r0, [sp, #4]
 800afcc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800afce:	4804      	ldr	r0, [pc, #16]	; (800afe0 <HW_IPCC_BLE_RxEvtNot+0x28>)
 800afd0:	f7ff fed1 	bl	800ad76 <LST_is_empty>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d0f2      	beq.n	800afbe <HW_IPCC_BLE_RxEvtNot+0x6>
}
 800afd8:	b003      	add	sp, #12
 800afda:	f85d fb04 	ldr.w	pc, [sp], #4
 800afde:	bf00      	nop
 800afe0:	20030818 	.word	0x20030818
 800afe4:	20003e2c 	.word	0x20003e2c

0800afe8 <HW_IPCC_BLE_AclDataAckNot>:
{
 800afe8:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 800afea:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4798      	blx	r3
}
 800aff0:	bd08      	pop	{r3, pc}
 800aff2:	bf00      	nop
 800aff4:	20003e28 	.word	0x20003e28

0800aff8 <TL_SYS_Init>:
{
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800affc:	4d09      	ldr	r5, [pc, #36]	; (800b024 <TL_SYS_Init+0x2c>)
 800affe:	4628      	mov	r0, r5
 800b000:	f7ff feb6 	bl	800ad70 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b004:	4b08      	ldr	r3, [pc, #32]	; (800b028 <TL_SYS_Init+0x30>)
 800b006:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b008:	68a2      	ldr	r2, [r4, #8]
 800b00a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b00c:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 800b00e:	f000 fd9f 	bl	800bb50 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b012:	6822      	ldr	r2, [r4, #0]
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <TL_SYS_Init+0x34>)
 800b016:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b018:	6862      	ldr	r2, [r4, #4]
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <TL_SYS_Init+0x38>)
 800b01c:	601a      	str	r2, [r3, #0]
}
 800b01e:	2000      	movs	r0, #0
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	20030830 	.word	0x20030830
 800b028:	20030000 	.word	0x20030000
 800b02c:	20003e38 	.word	0x20003e38
 800b030:	20003e3c 	.word	0x20003e3c

0800b034 <TL_SYS_SendCmd>:
{
 800b034:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b036:	4b04      	ldr	r3, [pc, #16]	; (800b048 <TL_SYS_SendCmd+0x14>)
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2210      	movs	r2, #16
 800b03e:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 800b040:	f000 fd8e 	bl	800bb60 <HW_IPCC_SYS_SendCmd>
}
 800b044:	2000      	movs	r0, #0
 800b046:	bd08      	pop	{r3, pc}
 800b048:	20030000 	.word	0x20030000

0800b04c <HW_IPCC_SYS_CmdEvtNot>:
{
 800b04c:	b508      	push	{r3, lr}
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b04e:	4b03      	ldr	r3, [pc, #12]	; (800b05c <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800b050:	68da      	ldr	r2, [r3, #12]
 800b052:	4b03      	ldr	r3, [pc, #12]	; (800b060 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6810      	ldr	r0, [r2, #0]
 800b058:	4798      	blx	r3
}
 800b05a:	bd08      	pop	{r3, pc}
 800b05c:	20030000 	.word	0x20030000
 800b060:	20003e38 	.word	0x20003e38

0800b064 <HW_IPCC_SYS_EvtNot>:
{
 800b064:	b500      	push	{lr}
 800b066:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b068:	e007      	b.n	800b07a <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b06a:	a901      	add	r1, sp, #4
 800b06c:	4807      	ldr	r0, [pc, #28]	; (800b08c <HW_IPCC_SYS_EvtNot+0x28>)
 800b06e:	f7ff feb2 	bl	800add6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b072:	4b07      	ldr	r3, [pc, #28]	; (800b090 <HW_IPCC_SYS_EvtNot+0x2c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	9801      	ldr	r0, [sp, #4]
 800b078:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b07a:	4804      	ldr	r0, [pc, #16]	; (800b08c <HW_IPCC_SYS_EvtNot+0x28>)
 800b07c:	f7ff fe7b 	bl	800ad76 <LST_is_empty>
 800b080:	2800      	cmp	r0, #0
 800b082:	d0f2      	beq.n	800b06a <HW_IPCC_SYS_EvtNot+0x6>
}
 800b084:	b003      	add	sp, #12
 800b086:	f85d fb04 	ldr.w	pc, [sp], #4
 800b08a:	bf00      	nop
 800b08c:	20030830 	.word	0x20030830
 800b090:	20003e3c 	.word	0x20003e3c

0800b094 <TL_THREAD_Init>:
{
 800b094:	b508      	push	{r3, lr}
  p_thread_table = TL_RefTable.p_thread_table;
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <TL_THREAD_Init+0x18>)
 800b098:	689b      	ldr	r3, [r3, #8]
  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800b09a:	6842      	ldr	r2, [r0, #4]
 800b09c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800b09e:	6802      	ldr	r2, [r0, #0]
 800b0a0:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800b0a2:	6882      	ldr	r2, [r0, #8]
 800b0a4:	601a      	str	r2, [r3, #0]
  HW_IPCC_THREAD_Init();
 800b0a6:	f000 fd7d 	bl	800bba4 <HW_IPCC_THREAD_Init>
}
 800b0aa:	bd08      	pop	{r3, pc}
 800b0ac:	20030000 	.word	0x20030000

0800b0b0 <TL_OT_SendCmd>:
{
 800b0b0:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <TL_OT_SendCmd+0x14>)
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2208      	movs	r2, #8
 800b0ba:	721a      	strb	r2, [r3, #8]
  HW_IPCC_OT_SendCmd();
 800b0bc:	f000 fd7e 	bl	800bbbc <HW_IPCC_OT_SendCmd>
}
 800b0c0:	bd08      	pop	{r3, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20030000 	.word	0x20030000

0800b0c8 <TL_CLI_SendCmd>:
{
 800b0c8:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800b0ca:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <TL_CLI_SendCmd+0x14>)
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	220a      	movs	r2, #10
 800b0d2:	721a      	strb	r2, [r3, #8]
  HW_IPCC_CLI_SendCmd();
 800b0d4:	f000 fd7e 	bl	800bbd4 <HW_IPCC_CLI_SendCmd>
}
 800b0d8:	bd08      	pop	{r3, pc}
 800b0da:	bf00      	nop
 800b0dc:	20030000 	.word	0x20030000

0800b0e0 <TL_THREAD_SendAck>:
{
 800b0e0:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800b0e2:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <TL_THREAD_SendAck+0x14>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	220d      	movs	r2, #13
 800b0ea:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_SendAck();
 800b0ec:	f000 fd7a 	bl	800bbe4 <HW_IPCC_THREAD_SendAck>
}
 800b0f0:	bd08      	pop	{r3, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20030000 	.word	0x20030000

0800b0f8 <TL_THREAD_CliSendAck>:
{
 800b0f8:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800b0fa:	4b04      	ldr	r3, [pc, #16]	; (800b10c <TL_THREAD_CliSendAck+0x14>)
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	220d      	movs	r2, #13
 800b102:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_CliSendAck();
 800b104:	f000 fd78 	bl	800bbf8 <HW_IPCC_THREAD_CliSendAck>
}
 800b108:	bd08      	pop	{r3, pc}
 800b10a:	bf00      	nop
 800b10c:	20030000 	.word	0x20030000

0800b110 <HW_IPCC_OT_CmdEvtNot>:
{
 800b110:	b508      	push	{r3, lr}
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800b112:	4b03      	ldr	r3, [pc, #12]	; (800b120 <HW_IPCC_OT_CmdEvtNot+0x10>)
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	6898      	ldr	r0, [r3, #8]
 800b118:	f000 fc28 	bl	800b96c <TL_OT_CmdEvtReceived>
}
 800b11c:	bd08      	pop	{r3, pc}
 800b11e:	bf00      	nop
 800b120:	20030000 	.word	0x20030000

0800b124 <HW_IPCC_THREAD_EvtNot>:
{
 800b124:	b508      	push	{r3, lr}
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800b126:	4b03      	ldr	r3, [pc, #12]	; (800b134 <HW_IPCC_THREAD_EvtNot+0x10>)
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	6818      	ldr	r0, [r3, #0]
 800b12c:	f000 fc22 	bl	800b974 <TL_THREAD_NotReceived>
}
 800b130:	bd08      	pop	{r3, pc}
 800b132:	bf00      	nop
 800b134:	20030000 	.word	0x20030000

0800b138 <HW_IPCC_THREAD_CliEvtNot>:
{
 800b138:	b508      	push	{r3, lr}
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <HW_IPCC_THREAD_CliEvtNot+0x10>)
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	6858      	ldr	r0, [r3, #4]
 800b140:	f000 fc72 	bl	800ba28 <TL_THREAD_CliNotReceived>
}
 800b144:	bd08      	pop	{r3, pc}
 800b146:	bf00      	nop
 800b148:	20030000 	.word	0x20030000

0800b14c <TL_MM_Init>:
{
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800b150:	4d0b      	ldr	r5, [pc, #44]	; (800b180 <TL_MM_Init+0x34>)
 800b152:	4628      	mov	r0, r5
 800b154:	f7ff fe0c 	bl	800ad70 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b158:	480a      	ldr	r0, [pc, #40]	; (800b184 <TL_MM_Init+0x38>)
 800b15a:	f7ff fe09 	bl	800ad70 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b15e:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <TL_MM_Init+0x3c>)
 800b160:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b162:	68a2      	ldr	r2, [r4, #8]
 800b164:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b166:	68e2      	ldr	r2, [r4, #12]
 800b168:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b16a:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b16c:	6822      	ldr	r2, [r4, #0]
 800b16e:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b174:	6922      	ldr	r2, [r4, #16]
 800b176:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b178:	6962      	ldr	r2, [r4, #20]
 800b17a:	619a      	str	r2, [r3, #24]
}
 800b17c:	bd38      	pop	{r3, r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	200300a8 	.word	0x200300a8
 800b184:	20003e30 	.word	0x20003e30
 800b188:	20030000 	.word	0x20030000

0800b18c <TL_MM_EvtDone>:
{
 800b18c:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b18e:	4601      	mov	r1, r0
 800b190:	4803      	ldr	r0, [pc, #12]	; (800b1a0 <TL_MM_EvtDone+0x14>)
 800b192:	f7ff fe08 	bl	800ada6 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b196:	4803      	ldr	r0, [pc, #12]	; (800b1a4 <TL_MM_EvtDone+0x18>)
 800b198:	f000 fd96 	bl	800bcc8 <HW_IPCC_MM_SendFreeBuf>
}
 800b19c:	bd08      	pop	{r3, pc}
 800b19e:	bf00      	nop
 800b1a0:	20003e30 	.word	0x20003e30
 800b1a4:	0800af39 	.word	0x0800af39

0800b1a8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b1a8:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800b1aa:	4c05      	ldr	r4, [pc, #20]	; (800b1c0 <TL_TRACES_Init+0x18>)
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff fddf 	bl	800ad70 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b1b2:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <TL_TRACES_Init+0x1c>)
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b1b8:	f000 fd9e 	bl	800bcf8 <HW_IPCC_TRACES_Init>

  return;
}
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	200300b0 	.word	0x200300b0
 800b1c4:	20030000 	.word	0x20030000

0800b1c8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b1c8:	b500      	push	{lr}
 800b1ca:	b083      	sub	sp, #12
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1cc:	e006      	b.n	800b1dc <HW_IPCC_TRACES_EvtNot+0x14>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b1ce:	a901      	add	r1, sp, #4
 800b1d0:	4806      	ldr	r0, [pc, #24]	; (800b1ec <HW_IPCC_TRACES_EvtNot+0x24>)
 800b1d2:	f7ff fe00 	bl	800add6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b1d6:	9801      	ldr	r0, [sp, #4]
 800b1d8:	f7f5 faba 	bl	8000750 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1dc:	4803      	ldr	r0, [pc, #12]	; (800b1ec <HW_IPCC_TRACES_EvtNot+0x24>)
 800b1de:	f7ff fdca 	bl	800ad76 <LST_is_empty>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0f3      	beq.n	800b1ce <HW_IPCC_TRACES_EvtNot+0x6>
  }

  return;
}
 800b1e6:	b003      	add	sp, #12
 800b1e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1ec:	200300b0 	.word	0x200300b0

0800b1f0 <APP_THREAD_DummyReqHandler>:
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
    tempMessageInfo = pMessageInfo;
 800b1f0:	4902      	ldr	r1, [pc, #8]	; (800b1fc <APP_THREAD_DummyReqHandler+0xc>)
 800b1f2:	600b      	str	r3, [r1, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800b1f4:	4b02      	ldr	r3, [pc, #8]	; (800b200 <APP_THREAD_DummyReqHandler+0x10>)
 800b1f6:	601a      	str	r2, [r3, #0]
}
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20004724 	.word	0x20004724
 800b200:	20004768 	.word	0x20004768

0800b204 <Wait_Getting_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
  while (FlagReceiveAckFromM0 == 0)
 800b204:	4b03      	ldr	r3, [pc, #12]	; (800b214 <Wait_Getting_Ack_From_M0+0x10>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0fb      	beq.n	800b204 <Wait_Getting_Ack_From_M0>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800b20c:	4b01      	ldr	r3, [pc, #4]	; (800b214 <Wait_Getting_Ack_From_M0+0x10>)
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
}
 800b212:	4770      	bx	lr
 800b214:	20003f48 	.word	0x20003f48

0800b218 <Receive_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
  FlagReceiveAckFromM0 = 1;
 800b218:	4b01      	ldr	r3, [pc, #4]	; (800b220 <Receive_Ack_From_M0+0x8>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	601a      	str	r2, [r3, #0]
}
 800b21e:	4770      	bx	lr
 800b220:	20003f48 	.word	0x20003f48

0800b224 <APP_THREAD_CheckWirelessFirmwareInfo>:
{
 800b224:	b500      	push	{lr}
 800b226:	b087      	sub	sp, #28
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800b228:	a802      	add	r0, sp, #8
 800b22a:	f7ff fc9d 	bl	800ab68 <SHCI_GetWirelessFwInfo>
 800b22e:	b110      	cbz	r0, 800b236 <APP_THREAD_CheckWirelessFirmwareInfo+0x12>
}
 800b230:	b007      	add	sp, #28
 800b232:	f85d fb04 	ldr.w	pc, [sp], #4
    APP_DBG("**********************************************************");
 800b236:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800b238:	2101      	movs	r1, #1
 800b23a:	f7f6 fd7f 	bl	8001d3c <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800b23e:	4a1a      	ldr	r2, [pc, #104]	; (800b2a8 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 800b240:	2101      	movs	r1, #1
 800b242:	2000      	movs	r0, #0
 800b244:	f7f6 fd7a 	bl	8001d3c <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800b248:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b24c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800b250:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800b254:	9101      	str	r1, [sp, #4]
 800b256:	9200      	str	r2, [sp, #0]
 800b258:	4a14      	ldr	r2, [pc, #80]	; (800b2ac <APP_THREAD_CheckWirelessFirmwareInfo+0x88>)
 800b25a:	2101      	movs	r1, #1
 800b25c:	2000      	movs	r0, #0
 800b25e:	f7f6 fd6d 	bl	8001d3c <logApplication>
    switch(p_wireless_info->StackType)
 800b262:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800b266:	2b11      	cmp	r3, #17
 800b268:	d00f      	beq.n	800b28a <APP_THREAD_CheckWirelessFirmwareInfo+0x66>
 800b26a:	2b50      	cmp	r3, #80	; 0x50
 800b26c:	d013      	beq.n	800b296 <APP_THREAD_CheckWirelessFirmwareInfo+0x72>
 800b26e:	2b10      	cmp	r3, #16
 800b270:	d005      	beq.n	800b27e <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
    APP_DBG("**********************************************************");
 800b272:	4a0c      	ldr	r2, [pc, #48]	; (800b2a4 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800b274:	2101      	movs	r1, #1
 800b276:	2000      	movs	r0, #0
 800b278:	f7f6 fd60 	bl	8001d3c <logApplication>
}
 800b27c:	e7d8      	b.n	800b230 <APP_THREAD_CheckWirelessFirmwareInfo+0xc>
      APP_DBG("FW Type : Thread FTD");
 800b27e:	4a0c      	ldr	r2, [pc, #48]	; (800b2b0 <APP_THREAD_CheckWirelessFirmwareInfo+0x8c>)
 800b280:	2101      	movs	r1, #1
 800b282:	2000      	movs	r0, #0
 800b284:	f7f6 fd5a 	bl	8001d3c <logApplication>
      break;
 800b288:	e7f3      	b.n	800b272 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Thread MTD");
 800b28a:	4a0a      	ldr	r2, [pc, #40]	; (800b2b4 <APP_THREAD_CheckWirelessFirmwareInfo+0x90>)
 800b28c:	2101      	movs	r1, #1
 800b28e:	2000      	movs	r0, #0
 800b290:	f7f6 fd54 	bl	8001d3c <logApplication>
      break;
 800b294:	e7ed      	b.n	800b272 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800b296:	4a08      	ldr	r2, [pc, #32]	; (800b2b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x94>)
 800b298:	2101      	movs	r1, #1
 800b29a:	2000      	movs	r0, #0
 800b29c:	f7f6 fd4e 	bl	8001d3c <logApplication>
      break;
 800b2a0:	e7e7      	b.n	800b272 <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 800b2a2:	bf00      	nop
 800b2a4:	0800c05c 	.word	0x0800c05c
 800b2a8:	0800c098 	.word	0x0800c098
 800b2ac:	0800c0b4 	.word	0x0800c0b4
 800b2b0:	0800c0cc 	.word	0x0800c0cc
 800b2b4:	0800c0e4 	.word	0x0800c0e4
 800b2b8:	0800c0fc 	.word	0x0800c0fc

0800b2bc <APP_THREAD_DeviceConfig>:
{
 800b2bc:	b508      	push	{r3, lr}
  error = otInstanceErasePersistentInfo(NULL);
 800b2be:	2000      	movs	r0, #0
 800b2c0:	f7ff f9e0 	bl	800a684 <otInstanceErasePersistentInfo>
  otInstanceFinalize(NULL);
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7ff f9a8 	bl	800a61a <otInstanceFinalize>
  otInstanceInitSingle();
 800b2ca:	f7ff f990 	bl	800a5ee <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	491f      	ldr	r1, [pc, #124]	; (800b350 <APP_THREAD_DeviceConfig+0x94>)
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7ff f9b6 	bl	800a644 <otSetStateChangedCallback>
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800b2d8:	2117      	movs	r1, #23
 800b2da:	2000      	movs	r0, #0
 800b2dc:	f7ff fa4a 	bl	800a774 <otLinkSetChannel>
  error = otLinkSetPanId(NULL, C_PANID);
 800b2e0:	f241 2134 	movw	r1, #4660	; 0x1234
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f7ff fa5e 	bl	800a7a6 <otLinkSetPanId>
  error = otIp6SetEnabled(NULL, true);
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	f7ff f9e0 	bl	800a6b2 <otIp6SetEnabled>
  error = otThreadSetEnabled(NULL, true);
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f7ff fd7a 	bl	800adee <otThreadSetEnabled>
  error = otThreadSetEnabled(NULL, false);
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	f7ff fd76 	bl	800adee <otThreadSetEnabled>
    error = otThreadSetMasterKey(NULL, &masterKey);
 800b302:	4914      	ldr	r1, [pc, #80]	; (800b354 <APP_THREAD_DeviceConfig+0x98>)
 800b304:	2000      	movs	r0, #0
 800b306:	f7ff fda4 	bl	800ae52 <otThreadSetMasterKey>
    error = otThreadSetNetworkName(NULL, networkName);
 800b30a:	4913      	ldr	r1, [pc, #76]	; (800b358 <APP_THREAD_DeviceConfig+0x9c>)
 800b30c:	2000      	movs	r0, #0
 800b30e:	f7ff fdce 	bl	800aeae <otThreadSetNetworkName>
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 800b312:	4912      	ldr	r1, [pc, #72]	; (800b35c <APP_THREAD_DeviceConfig+0xa0>)
 800b314:	2000      	movs	r0, #0
 800b316:	f7ff fd83 	bl	800ae20 <otThreadSetExtendedPanId>
    error = otThreadSetEnabled(NULL, true);
 800b31a:	2101      	movs	r1, #1
 800b31c:	2000      	movs	r0, #0
 800b31e:	f7ff fd66 	bl	800adee <otThreadSetEnabled>
    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800b322:	f241 6133 	movw	r1, #5683	; 0x1633
 800b326:	2000      	movs	r0, #0
 800b328:	f7ff f911 	bl	800a54e <otCoapStart>
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 800b32c:	490c      	ldr	r1, [pc, #48]	; (800b360 <APP_THREAD_DeviceConfig+0xa4>)
 800b32e:	2000      	movs	r0, #0
 800b330:	f7ff f927 	bl	800a582 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 800b334:	490b      	ldr	r1, [pc, #44]	; (800b364 <APP_THREAD_DeviceConfig+0xa8>)
 800b336:	2000      	movs	r0, #0
 800b338:	f7ff f923 	bl	800a582 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 800b33c:	490a      	ldr	r1, [pc, #40]	; (800b368 <APP_THREAD_DeviceConfig+0xac>)
 800b33e:	2000      	movs	r0, #0
 800b340:	f7ff f91f 	bl	800a582 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 800b344:	4909      	ldr	r1, [pc, #36]	; (800b36c <APP_THREAD_DeviceConfig+0xb0>)
 800b346:	2000      	movs	r0, #0
 800b348:	f7ff f91b 	bl	800a582 <otCoapAddResource>
}
 800b34c:	bd08      	pop	{r3, pc}
 800b34e:	bf00      	nop
 800b350:	0800b8ad 	.word	0x0800b8ad
 800b354:	0800c1c8 	.word	0x0800c1c8
 800b358:	0800c1d8 	.word	0x0800c1d8
 800b35c:	0800c1c0 	.word	0x0800c1c0
 800b360:	20000030 	.word	0x20000030
 800b364:	20000040 	.word	0x20000040
 800b368:	20000020 	.word	0x20000020
 800b36c:	20000050 	.word	0x20000050

0800b370 <APP_THREAD_SendDataResponse>:
{
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	4605      	mov	r5, r0
 800b374:	460e      	mov	r6, r1
  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 800b376:	4a18      	ldr	r2, [pc, #96]	; (800b3d8 <APP_THREAD_SendDataResponse+0x68>)
 800b378:	2101      	movs	r1, #1
 800b37a:	2000      	movs	r0, #0
 800b37c:	f7f6 fcde 	bl	8001d3c <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800b380:	4c16      	ldr	r4, [pc, #88]	; (800b3dc <APP_THREAD_SendDataResponse+0x6c>)
 800b382:	2244      	movs	r2, #68	; 0x44
 800b384:	2120      	movs	r1, #32
 800b386:	4620      	mov	r0, r4
 800b388:	f7fe ff69 	bl	800a25e <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800b38c:	4628      	mov	r0, r5
 800b38e:	f7ff f858 	bl	800a442 <otCoapHeaderGetMessageId>
 800b392:	4601      	mov	r1, r0
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff f806 	bl	800a3a6 <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 800b39a:	4628      	mov	r0, r5
 800b39c:	f7ff f885 	bl	800a4aa <otCoapHeaderGetToken>
 800b3a0:	4607      	mov	r7, r0
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f7ff f867 	bl	800a476 <otCoapHeaderGetTokenLength>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7fe ff72 	bl	800a296 <otCoapHeaderSetToken>
  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f7ff f891 	bl	800a4dc <otCoapNewMessage>
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4b08      	ldr	r3, [pc, #32]	; (800b3e0 <APP_THREAD_SendDataResponse+0x70>)
 800b3be:	6018      	str	r0, [r3, #0]
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	f7ff f8f7 	bl	800a5b6 <otCoapSendResponse>
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800b3c8:	b120      	cbz	r0, 800b3d4 <APP_THREAD_SendDataResponse+0x64>
 800b3ca:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <APP_THREAD_SendDataResponse+0x70>)
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	b108      	cbz	r0, 800b3d4 <APP_THREAD_SendDataResponse+0x64>
    otMessageFree(pOT_Message);
 800b3d0:	f7ff fa02 	bl	800a7d8 <otMessageFree>
}
 800b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0800c128 	.word	0x0800c128
 800b3dc:	20003f4c 	.word	0x20003f4c
 800b3e0:	2000415c 	.word	0x2000415c

0800b3e4 <APP_THREAD_CoapToggleLoggingRequestHandler>:
{
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	f7ff fa0b 	bl	800a808 <otMessageGetOffset>
 800b3f2:	2306      	movs	r3, #6
 800b3f4:	4a17      	ldr	r2, [pc, #92]	; (800b454 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7ff fa3d 	bl	800a878 <otMessageRead>
 800b3fe:	2806      	cmp	r0, #6
 800b400:	d01b      	beq.n	800b43a <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
    tempMessageInfo = pMessageInfo;
 800b402:	4b15      	ldr	r3, [pc, #84]	; (800b458 <APP_THREAD_CoapToggleLoggingRequestHandler+0x74>)
 800b404:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800b406:	4b15      	ldr	r3, [pc, #84]	; (800b45c <APP_THREAD_CoapToggleLoggingRequestHandler+0x78>)
 800b408:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800b40a:	4628      	mov	r0, r5
 800b40c:	f7fe ffe5 	bl	800a3da <otCoapHeaderGetType>
 800b410:	b1d8      	cbz	r0, 800b44a <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800b412:	4628      	mov	r0, r5
 800b414:	f7fe ffe1 	bl	800a3da <otCoapHeaderGetType>
 800b418:	2810      	cmp	r0, #16
 800b41a:	d11a      	bne.n	800b452 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800b41c:	4628      	mov	r0, r5
 800b41e:	f7fe fff6 	bl	800a40e <otCoapHeaderGetCode>
 800b422:	2803      	cmp	r0, #3
 800b424:	d115      	bne.n	800b452 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800b426:	4620      	mov	r0, r4
 800b428:	f7ff f9ee 	bl	800a808 <otMessageGetOffset>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4a0c      	ldr	r2, [pc, #48]	; (800b460 <APP_THREAD_CoapToggleLoggingRequestHandler+0x7c>)
 800b430:	4601      	mov	r1, r0
 800b432:	4620      	mov	r0, r4
 800b434:	f7ff fa20 	bl	800a878 <otMessageRead>
}
 800b438:	e00b      	b.n	800b452 <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 800b43a:	2300      	movs	r3, #0
 800b43c:	461a      	mov	r2, r3
 800b43e:	4905      	ldr	r1, [pc, #20]	; (800b454 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800b440:	4808      	ldr	r0, [pc, #32]	; (800b464 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>)
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	f7fc fbd6 	bl	8007bf4 <osMessageQueuePut>
 800b448:	e7db      	b.n	800b402 <APP_THREAD_CoapToggleLoggingRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	f7ff ff8f 	bl	800b370 <APP_THREAD_SendDataResponse>
}
 800b452:	bd70      	pop	{r4, r5, r6, pc}
 800b454:	2000473c 	.word	0x2000473c
 800b458:	20004724 	.word	0x20004724
 800b45c:	20004768 	.word	0x20004768
 800b460:	20004008 	.word	0x20004008
 800b464:	20004320 	.word	0x20004320

0800b468 <APP_THREAD_CoapLightsSimpleRequestHandler>:
{
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4605      	mov	r5, r0
 800b46c:	460c      	mov	r4, r1
 800b46e:	4617      	mov	r7, r2
	lightsSimpleMessage = 0;
 800b470:	4e1a      	ldr	r6, [pc, #104]	; (800b4dc <APP_THREAD_CoapLightsSimpleRequestHandler+0x74>)
 800b472:	2300      	movs	r3, #0
 800b474:	6033      	str	r3, [r6, #0]
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 800b476:	4608      	mov	r0, r1
 800b478:	f7ff f9c6 	bl	800a808 <otMessageGetOffset>
 800b47c:	2304      	movs	r3, #4
 800b47e:	4632      	mov	r2, r6
 800b480:	4601      	mov	r1, r0
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff f9f8 	bl	800a878 <otMessageRead>
 800b488:	2804      	cmp	r0, #4
 800b48a:	d019      	beq.n	800b4c0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
    receivedMessage = (otMessageInfo *) pMessage;
 800b48c:	4b14      	ldr	r3, [pc, #80]	; (800b4e0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x78>)
 800b48e:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800b490:	4628      	mov	r0, r5
 800b492:	f7fe ffa2 	bl	800a3da <otCoapHeaderGetType>
 800b496:	b1d8      	cbz	r0, 800b4d0 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800b498:	4628      	mov	r0, r5
 800b49a:	f7fe ff9e 	bl	800a3da <otCoapHeaderGetType>
 800b49e:	2810      	cmp	r0, #16
 800b4a0:	d11a      	bne.n	800b4d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f7fe ffb3 	bl	800a40e <otCoapHeaderGetCode>
 800b4a8:	2803      	cmp	r0, #3
 800b4aa:	d115      	bne.n	800b4d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7ff f9ab 	bl	800a808 <otMessageGetOffset>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4a0b      	ldr	r2, [pc, #44]	; (800b4e4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x7c>)
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff f9dd 	bl	800a878 <otMessageRead>
}
 800b4be:	e00b      	b.n	800b4d8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4808      	ldr	r0, [pc, #32]	; (800b4e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x80>)
 800b4c8:	6800      	ldr	r0, [r0, #0]
 800b4ca:	f7fc fb93 	bl	8007bf4 <osMessageQueuePut>
 800b4ce:	e7dd      	b.n	800b48c <APP_THREAD_CoapLightsSimpleRequestHandler+0x24>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f7ff ff4c 	bl	800b370 <APP_THREAD_SendDataResponse>
}
 800b4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20004340 	.word	0x20004340
 800b4e0:	20004768 	.word	0x20004768
 800b4e4:	20004008 	.word	0x20004008
 800b4e8:	20004338 	.word	0x20004338

0800b4ec <APP_THREAD_CoapLightsComplexRequestHandler>:
{
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	f7ff f987 	bl	800a808 <otMessageGetOffset>
 800b4fa:	2312      	movs	r3, #18
 800b4fc:	4a11      	ldr	r2, [pc, #68]	; (800b544 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800b4fe:	4601      	mov	r1, r0
 800b500:	4620      	mov	r0, r4
 800b502:	f7ff f9b9 	bl	800a878 <otMessageRead>
 800b506:	2812      	cmp	r0, #18
 800b508:	d009      	beq.n	800b51e <APP_THREAD_CoapLightsComplexRequestHandler+0x32>
    tempMessageInfo = pMessageInfo;
 800b50a:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <APP_THREAD_CoapLightsComplexRequestHandler+0x5c>)
 800b50c:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800b50e:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <APP_THREAD_CoapLightsComplexRequestHandler+0x60>)
 800b510:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800b512:	4628      	mov	r0, r5
 800b514:	f7fe ff61 	bl	800a3da <otCoapHeaderGetType>
 800b518:	2810      	cmp	r0, #16
 800b51a:	d004      	beq.n	800b526 <APP_THREAD_CoapLightsComplexRequestHandler+0x3a>
}
 800b51c:	bd70      	pop	{r4, r5, r6, pc}
    	FrontLightsSet(&lightMessageComplex);
 800b51e:	4809      	ldr	r0, [pc, #36]	; (800b544 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800b520:	f7f6 f92c 	bl	800177c <FrontLightsSet>
 800b524:	e7f1      	b.n	800b50a <APP_THREAD_CoapLightsComplexRequestHandler+0x1e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800b526:	4628      	mov	r0, r5
 800b528:	f7fe ff71 	bl	800a40e <otCoapHeaderGetCode>
 800b52c:	2803      	cmp	r0, #3
 800b52e:	d1f5      	bne.n	800b51c <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800b530:	4620      	mov	r0, r4
 800b532:	f7ff f969 	bl	800a808 <otMessageGetOffset>
 800b536:	2301      	movs	r3, #1
 800b538:	4a05      	ldr	r2, [pc, #20]	; (800b550 <APP_THREAD_CoapLightsComplexRequestHandler+0x64>)
 800b53a:	4601      	mov	r1, r0
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7ff f99b 	bl	800a878 <otMessageRead>
}
 800b542:	e7eb      	b.n	800b51c <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
 800b544:	20004754 	.word	0x20004754
 800b548:	20004724 	.word	0x20004724
 800b54c:	20004768 	.word	0x20004768
 800b550:	20004008 	.word	0x20004008

0800b554 <APP_THREAD_SendCoapUnicastRequest>:
{
 800b554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b558:	b083      	sub	sp, #12
 800b55a:	4607      	mov	r7, r0
 800b55c:	4688      	mov	r8, r1
 800b55e:	4615      	mov	r5, r2
 800b560:	4699      	mov	r9, r3
			  myRloc16 = otThreadGetRloc16(NULL);
 800b562:	2000      	movs	r0, #0
 800b564:	f7ff fcd2 	bl	800af0c <otThreadGetRloc16>
 800b568:	4b36      	ldr	r3, [pc, #216]	; (800b644 <APP_THREAD_SendCoapUnicastRequest+0xf0>)
 800b56a:	8018      	strh	r0, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7ff f8b9 	bl	800a6e4 <otIp6IsEnabled>
 800b572:	4b35      	ldr	r3, [pc, #212]	; (800b648 <APP_THREAD_SendCoapUnicastRequest+0xf4>)
 800b574:	7018      	strb	r0, [r3, #0]
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 800b576:	2000      	movs	r0, #0
 800b578:	f7ff fc84 	bl	800ae84 <otThreadGetMeshLocalEid>
 800b57c:	4b33      	ldr	r3, [pc, #204]	; (800b64c <APP_THREAD_SendCoapUnicastRequest+0xf8>)
 800b57e:	6806      	ldr	r6, [r0, #0]
 800b580:	6844      	ldr	r4, [r0, #4]
 800b582:	6881      	ldr	r1, [r0, #8]
 800b584:	68c2      	ldr	r2, [r0, #12]
 800b586:	601e      	str	r6, [r3, #0]
 800b588:	605c      	str	r4, [r3, #4]
 800b58a:	6099      	str	r1, [r3, #8]
 800b58c:	60da      	str	r2, [r3, #12]
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800b58e:	4c30      	ldr	r4, [pc, #192]	; (800b650 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800b590:	222c      	movs	r2, #44	; 0x2c
 800b592:	2100      	movs	r1, #0
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fc56 	bl	800be46 <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800b59a:	f104 0110 	add.w	r1, r4, #16
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f7ff f8cd 	bl	800a73e <otIp6AddressFromString>
 800b5a4:	4e2b      	ldr	r6, [pc, #172]	; (800b654 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800b5a6:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f7ff fc6b 	bl	800ae84 <otThreadGetMeshLocalEid>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4625      	mov	r5, r4
 800b5b2:	6800      	ldr	r0, [r0, #0]
 800b5b4:	6859      	ldr	r1, [r3, #4]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800b5c2:	f241 6333 	movw	r3, #5683	; 0x1633
 800b5c6:	8463      	strh	r3, [r4, #34]	; 0x22
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f7ff f8a3 	bl	800a714 <otIp6GetUnicastAddresses>
 800b5ce:	4b22      	ldr	r3, [pc, #136]	; (800b658 <APP_THREAD_SendCoapUnicastRequest+0x104>)
 800b5d0:	6018      	str	r0, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 800b5d2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800b5d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800b5d8:	4c20      	ldr	r4, [pc, #128]	; (800b65c <APP_THREAD_SendCoapUnicastRequest+0x108>)
 800b5da:	2203      	movs	r2, #3
 800b5dc:	2110      	movs	r1, #16
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7fe fe3d 	bl	800a25e <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800b5e4:	2102      	movs	r1, #2
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7fe fe71 	bl	800a2ce <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7fe fea3 	bl	800a33a <otCoapHeaderAppendUriPathOptions>
 800b5f4:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7fe febb 	bl	800a372 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	2000      	movs	r0, #0
 800b600:	f7fe ff6c 	bl	800a4dc <otCoapNewMessage>
 800b604:	4b16      	ldr	r3, [pc, #88]	; (800b660 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800b606:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800b608:	b900      	cbnz	r0, 800b60c <APP_THREAD_SendCoapUnicastRequest+0xb8>
 800b60a:	e7fe      	b.n	800b60a <APP_THREAD_SendCoapUnicastRequest+0xb6>
			  error = otMessageAppend(pOT_Message, message, message_length);
 800b60c:	4642      	mov	r2, r8
 800b60e:	4639      	mov	r1, r7
 800b610:	f7ff f914 	bl	800a83c <otMessageAppend>
 800b614:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800b616:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800b618:	b100      	cbz	r0, 800b61c <APP_THREAD_SendCoapUnicastRequest+0xc8>
 800b61a:	e7fe      	b.n	800b61a <APP_THREAD_SendCoapUnicastRequest+0xc6>
			  error = otCoapSendRequest(NULL,
 800b61c:	2000      	movs	r0, #0
 800b61e:	9000      	str	r0, [sp, #0]
 800b620:	4603      	mov	r3, r0
 800b622:	4a0b      	ldr	r2, [pc, #44]	; (800b650 <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800b624:	490e      	ldr	r1, [pc, #56]	; (800b660 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800b626:	6809      	ldr	r1, [r1, #0]
 800b628:	f7fe ff71 	bl	800a50e <otCoapSendRequest>
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800b62e:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800b630:	b120      	cbz	r0, 800b63c <APP_THREAD_SendCoapUnicastRequest+0xe8>
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	b108      	cbz	r0, 800b63c <APP_THREAD_SendCoapUnicastRequest+0xe8>
				otMessageFree(pOT_Message);
 800b638:	f7ff f8ce 	bl	800a7d8 <otMessageFree>
}
 800b63c:	b003      	add	sp, #12
 800b63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b642:	bf00      	nop
 800b644:	200047e6 	.word	0x200047e6
 800b648:	20004766 	.word	0x20004766
 800b64c:	200047d4 	.word	0x200047d4
 800b650:	20003fdc 	.word	0x20003fdc
 800b654:	20004158 	.word	0x20004158
 800b658:	200047e8 	.word	0x200047e8
 800b65c:	20003f4c 	.word	0x20003f4c
 800b660:	2000415c 	.word	0x2000415c

0800b664 <APP_THREAD_SendCoapUnicastMsg>:
{
 800b664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b668:	b083      	sub	sp, #12
 800b66a:	4607      	mov	r7, r0
 800b66c:	4688      	mov	r8, r1
 800b66e:	4614      	mov	r4, r2
 800b670:	4699      	mov	r9, r3
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800b672:	4d2b      	ldr	r5, [pc, #172]	; (800b720 <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800b674:	222c      	movs	r2, #44	; 0x2c
 800b676:	2100      	movs	r1, #0
 800b678:	4628      	mov	r0, r5
 800b67a:	f000 fbe4 	bl	800be46 <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800b67e:	f105 0110 	add.w	r1, r5, #16
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff f85b 	bl	800a73e <otIp6AddressFromString>
 800b688:	4e26      	ldr	r6, [pc, #152]	; (800b724 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800b68a:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800b68c:	2000      	movs	r0, #0
 800b68e:	f7ff fbf9 	bl	800ae84 <otThreadGetMeshLocalEid>
 800b692:	4603      	mov	r3, r0
 800b694:	462c      	mov	r4, r5
 800b696:	6800      	ldr	r0, [r0, #0]
 800b698:	6859      	ldr	r1, [r3, #4]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800b6a6:	f241 6333 	movw	r3, #5683	; 0x1633
 800b6aa:	846b      	strh	r3, [r5, #34]	; 0x22
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800b6ac:	4c1e      	ldr	r4, [pc, #120]	; (800b728 <APP_THREAD_SendCoapUnicastMsg+0xc4>)
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	2110      	movs	r1, #16
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7fe fdd3 	bl	800a25e <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800b6b8:	2102      	movs	r1, #2
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7fe fe07 	bl	800a2ce <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7fe fe39 	bl	800a33a <otCoapHeaderAppendUriPathOptions>
 800b6c8:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 800b6ca:	212a      	movs	r1, #42	; 0x2a
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7fe fe18 	bl	800a302 <otCoapHeaderAppendContentFormatOption>
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7fe fe4d 	bl	800a372 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800b6d8:	4621      	mov	r1, r4
 800b6da:	2000      	movs	r0, #0
 800b6dc:	f7fe fefe 	bl	800a4dc <otCoapNewMessage>
 800b6e0:	4b12      	ldr	r3, [pc, #72]	; (800b72c <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800b6e2:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800b6e4:	b900      	cbnz	r0, 800b6e8 <APP_THREAD_SendCoapUnicastMsg+0x84>
 800b6e6:	e7fe      	b.n	800b6e6 <APP_THREAD_SendCoapUnicastMsg+0x82>
			  error = otMessageAppend(pOT_Message, message, msgSize);
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7ff f8a6 	bl	800a83c <otMessageAppend>
 800b6f0:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800b6f2:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800b6f4:	b100      	cbz	r0, 800b6f8 <APP_THREAD_SendCoapUnicastMsg+0x94>
 800b6f6:	e7fe      	b.n	800b6f6 <APP_THREAD_SendCoapUnicastMsg+0x92>
			  error = otCoapSendRequest(NULL,
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	9000      	str	r0, [sp, #0]
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4a08      	ldr	r2, [pc, #32]	; (800b720 <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800b700:	490a      	ldr	r1, [pc, #40]	; (800b72c <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800b702:	6809      	ldr	r1, [r1, #0]
 800b704:	f7fe ff03 	bl	800a50e <otCoapSendRequest>
 800b708:	4b06      	ldr	r3, [pc, #24]	; (800b724 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800b70a:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800b70c:	b120      	cbz	r0, 800b718 <APP_THREAD_SendCoapUnicastMsg+0xb4>
 800b70e:	4b07      	ldr	r3, [pc, #28]	; (800b72c <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	b108      	cbz	r0, 800b718 <APP_THREAD_SendCoapUnicastMsg+0xb4>
				otMessageFree(pOT_Message);
 800b714:	f7ff f860 	bl	800a7d8 <otMessageFree>
}
 800b718:	b003      	add	sp, #12
 800b71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b71e:	bf00      	nop
 800b720:	20003fdc 	.word	0x20003fdc
 800b724:	20004158 	.word	0x20004158
 800b728:	20003f4c 	.word	0x20003f4c
 800b72c:	2000415c 	.word	0x2000415c

0800b730 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800b730:	b508      	push	{r3, lr}
  CptReceiveMsgFromM0++;
 800b732:	4a05      	ldr	r2, [pc, #20]	; (800b748 <Receive_Notification_From_M0+0x18>)
 800b734:	6813      	ldr	r3, [r2, #0]
 800b736:	3301      	adds	r3, #1
 800b738:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800b73a:	2101      	movs	r1, #1
 800b73c:	4b03      	ldr	r3, [pc, #12]	; (800b74c <Receive_Notification_From_M0+0x1c>)
 800b73e:	6818      	ldr	r0, [r3, #0]
 800b740:	f7fb ff20 	bl	8007584 <osThreadFlagsSet>
}
 800b744:	bd08      	pop	{r3, pc}
 800b746:	bf00      	nop
 800b748:	20003f44 	.word	0x20003f44
 800b74c:	20004010 	.word	0x20004010

0800b750 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800b750:	b508      	push	{r3, lr}
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800b752:	4b10      	ldr	r3, [pc, #64]	; (800b794 <RxCpltCallback+0x44>)
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	2bff      	cmp	r3, #255	; 0xff
 800b75a:	d80b      	bhi.n	800b774 <RxCpltCallback+0x24>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800b75c:	490d      	ldr	r1, [pc, #52]	; (800b794 <RxCpltCallback+0x44>)
 800b75e:	880b      	ldrh	r3, [r1, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	b292      	uxth	r2, r2
 800b766:	800a      	strh	r2, [r1, #0]
 800b768:	4a0b      	ldr	r2, [pc, #44]	; (800b798 <RxCpltCallback+0x48>)
 800b76a:	7812      	ldrb	r2, [r2, #0]
 800b76c:	490b      	ldr	r1, [pc, #44]	; (800b79c <RxCpltCallback+0x4c>)
 800b76e:	54ca      	strb	r2, [r1, r3]
    if (aRxBuffer[0] == '\r')
 800b770:	2a0d      	cmp	r2, #13
 800b772:	d006      	beq.n	800b782 <RxCpltCallback+0x32>
      osThreadFlagsSet(OsTaskCliId,1);
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <RxCpltCallback+0x50>)
 800b776:	2201      	movs	r2, #1
 800b778:	4907      	ldr	r1, [pc, #28]	; (800b798 <RxCpltCallback+0x48>)
 800b77a:	2000      	movs	r0, #0
 800b77c:	f7f5 fe2a 	bl	80013d4 <HW_UART_Receive_IT>
}
 800b780:	bd08      	pop	{r3, pc}
      CptReceiveCmdFromUser = 1U;
 800b782:	2101      	movs	r1, #1
 800b784:	4b07      	ldr	r3, [pc, #28]	; (800b7a4 <RxCpltCallback+0x54>)
 800b786:	8019      	strh	r1, [r3, #0]
      osThreadFlagsSet(OsTaskCliId,1);
 800b788:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <RxCpltCallback+0x58>)
 800b78a:	6818      	ldr	r0, [r3, #0]
 800b78c:	f7fb fefa 	bl	8007584 <osThreadFlagsSet>
 800b790:	e7f0      	b.n	800b774 <RxCpltCallback+0x24>
 800b792:	bf00      	nop
 800b794:	2000415a 	.word	0x2000415a
 800b798:	20004014 	.word	0x20004014
 800b79c:	20003e40 	.word	0x20003e40
 800b7a0:	0800b751 	.word	0x0800b751
 800b7a4:	20003f40 	.word	0x20003f40
 800b7a8:	2000400c 	.word	0x2000400c

0800b7ac <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800b7ae:	4c0f      	ldr	r4, [pc, #60]	; (800b7ec <Send_CLI_To_M0+0x40>)
 800b7b0:	f104 070c 	add.w	r7, r4, #12
 800b7b4:	22ff      	movs	r2, #255	; 0xff
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f000 fb44 	bl	800be46 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800b7be:	4d0c      	ldr	r5, [pc, #48]	; (800b7f0 <Send_CLI_To_M0+0x44>)
 800b7c0:	882a      	ldrh	r2, [r5, #0]
 800b7c2:	4e0c      	ldr	r6, [pc, #48]	; (800b7f4 <Send_CLI_To_M0+0x48>)
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f000 fb32 	bl	800be30 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800b7cc:	882b      	ldrh	r3, [r5, #0]
 800b7ce:	72e3      	strb	r3, [r4, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	7261      	strb	r1, [r4, #9]
 800b7d4:	72a1      	strb	r1, [r4, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800b7d6:	4b08      	ldr	r3, [pc, #32]	; (800b7f8 <Send_CLI_To_M0+0x4c>)
 800b7d8:	8019      	strh	r1, [r3, #0]
  indexReceiveChar = 0;
 800b7da:	8029      	strh	r1, [r5, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800b7dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 fb30 	bl	800be46 <memset>

  TL_CLI_SendCmd();
 800b7e6:	f7ff fc6f 	bl	800b0c8 <TL_CLI_SendCmd>
}
 800b7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ec:	20030838 	.word	0x20030838
 800b7f0:	2000415a 	.word	0x2000415a
 800b7f4:	20003e40 	.word	0x20003e40
 800b7f8:	20003f40 	.word	0x20003f40

0800b7fc <APP_THREAD_FreeRTOSSendCLIToM0Task>:
{
 800b7fc:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800b7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b802:	2101      	movs	r1, #1
 800b804:	4608      	mov	r0, r1
 800b806:	f7fb ff43 	bl	8007690 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800b80a:	f7ff ffcf 	bl	800b7ac <Send_CLI_To_M0>
 800b80e:	e7f6      	b.n	800b7fe <APP_THREAD_FreeRTOSSendCLIToM0Task+0x2>

0800b810 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800b810:	b508      	push	{r3, lr}

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800b812:	f7ff fc71 	bl	800b0f8 <TL_THREAD_CliSendAck>
}
 800b816:	bd08      	pop	{r3, pc}

0800b818 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800b818:	b508      	push	{r3, lr}
  Send_CLI_Ack_For_OT();
 800b81a:	f7ff fff9 	bl	800b810 <Send_CLI_Ack_For_OT>
}
 800b81e:	bd08      	pop	{r3, pc}

0800b820 <APP_THREAD_SendMyIP>:
void APP_THREAD_SendMyIP(){
 800b820:	b508      	push	{r3, lr}
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 800b822:	4b03      	ldr	r3, [pc, #12]	; (800b830 <APP_THREAD_SendMyIP+0x10>)
 800b824:	4a03      	ldr	r2, [pc, #12]	; (800b834 <APP_THREAD_SendMyIP+0x14>)
 800b826:	2105      	movs	r1, #5
 800b828:	4803      	ldr	r0, [pc, #12]	; (800b838 <APP_THREAD_SendMyIP+0x18>)
 800b82a:	f7ff fe93 	bl	800b554 <APP_THREAD_SendCoapUnicastRequest>
}
 800b82e:	bd08      	pop	{r3, pc}
 800b830:	0800c1b0 	.word	0x0800c1b0
 800b834:	20004118 	.word	0x20004118
 800b838:	20000060 	.word	0x20000060

0800b83c <APP_THREAD_CoapBorderTimeRequestHandler>:
{
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	4605      	mov	r5, r0
 800b840:	460c      	mov	r4, r1
 800b842:	4616      	mov	r6, r2
	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 800b844:	4608      	mov	r0, r1
 800b846:	f7fe ffdf 	bl	800a808 <otMessageGetOffset>
 800b84a:	2340      	movs	r3, #64	; 0x40
 800b84c:	4a14      	ldr	r2, [pc, #80]	; (800b8a0 <APP_THREAD_CoapBorderTimeRequestHandler+0x64>)
 800b84e:	4601      	mov	r1, r0
 800b850:	4620      	mov	r0, r4
 800b852:	f7ff f811 	bl	800a878 <otMessageRead>
 800b856:	2840      	cmp	r0, #64	; 0x40
 800b858:	d019      	beq.n	800b88e <APP_THREAD_CoapBorderTimeRequestHandler+0x52>
    receivedMessage = (otMessageInfo *) pMessage;
 800b85a:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <APP_THREAD_CoapBorderTimeRequestHandler+0x68>)
 800b85c:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800b85e:	4628      	mov	r0, r5
 800b860:	f7fe fdbb 	bl	800a3da <otCoapHeaderGetType>
 800b864:	b1b0      	cbz	r0, 800b894 <APP_THREAD_CoapBorderTimeRequestHandler+0x58>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800b866:	4628      	mov	r0, r5
 800b868:	f7fe fdb7 	bl	800a3da <otCoapHeaderGetType>
 800b86c:	2810      	cmp	r0, #16
 800b86e:	d115      	bne.n	800b89c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800b870:	4628      	mov	r0, r5
 800b872:	f7fe fdcc 	bl	800a40e <otCoapHeaderGetCode>
 800b876:	2803      	cmp	r0, #3
 800b878:	d110      	bne.n	800b89c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7fe ffc4 	bl	800a808 <otMessageGetOffset>
 800b880:	2301      	movs	r3, #1
 800b882:	4a09      	ldr	r2, [pc, #36]	; (800b8a8 <APP_THREAD_CoapBorderTimeRequestHandler+0x6c>)
 800b884:	4601      	mov	r1, r0
 800b886:	4620      	mov	r0, r4
 800b888:	f7fe fff6 	bl	800a878 <otMessageRead>
}
 800b88c:	e006      	b.n	800b89c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    	APP_THREAD_SendMyIP();
 800b88e:	f7ff ffc7 	bl	800b820 <APP_THREAD_SendMyIP>
 800b892:	e7e2      	b.n	800b85a <APP_THREAD_CoapBorderTimeRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800b894:	4631      	mov	r1, r6
 800b896:	4628      	mov	r0, r5
 800b898:	f7ff fd6a 	bl	800b370 <APP_THREAD_SendDataResponse>
}
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	bf00      	nop
 800b8a0:	20004118 	.word	0x20004118
 800b8a4:	20004768 	.word	0x20004768
 800b8a8:	20004008 	.word	0x20004008

0800b8ac <APP_THREAD_StateNotif>:
  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800b8ac:	f010 0f04 	tst.w	r0, #4
 800b8b0:	d100      	bne.n	800b8b4 <APP_THREAD_StateNotif+0x8>
 800b8b2:	4770      	bx	lr
{
 800b8b4:	b508      	push	{r3, lr}
    switch (otThreadGetDeviceRole(NULL))
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7ff fb12 	bl	800aee0 <otThreadGetDeviceRole>
 800b8bc:	2804      	cmp	r0, #4
 800b8be:	d813      	bhi.n	800b8e8 <APP_THREAD_StateNotif+0x3c>
 800b8c0:	e8df f000 	tbb	[pc, r0]
 800b8c4:	0c090308 	.word	0x0c090308
 800b8c8:	0f          	.byte	0x0f
 800b8c9:	00          	.byte	0x00
    	borderRouter.epoch = 0;
 800b8ca:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <APP_THREAD_StateNotif+0x44>)
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
}
 800b8d4:	bd08      	pop	{r3, pc}
    	APP_THREAD_SendMyIP();
 800b8d6:	f7ff ffa3 	bl	800b820 <APP_THREAD_SendMyIP>
      break;
 800b8da:	e7fb      	b.n	800b8d4 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800b8dc:	f7ff ffa0 	bl	800b820 <APP_THREAD_SendMyIP>
      break;
 800b8e0:	e7f8      	b.n	800b8d4 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800b8e2:	f7ff ff9d 	bl	800b820 <APP_THREAD_SendMyIP>
      break;
 800b8e6:	e7f5      	b.n	800b8d4 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800b8e8:	f7ff ff9a 	bl	800b820 <APP_THREAD_SendMyIP>
}
 800b8ec:	e7f2      	b.n	800b8d4 <APP_THREAD_StateNotif+0x28>
 800b8ee:	bf00      	nop
 800b8f0:	20004118 	.word	0x20004118

0800b8f4 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 800b8f4:	b500      	push	{lr}
 800b8f6:	b083      	sub	sp, #12
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4b03      	ldr	r3, [pc, #12]	; (800b90c <APP_THREAD_SendBorderPacket+0x18>)
 800b8fe:	4a04      	ldr	r2, [pc, #16]	; (800b910 <APP_THREAD_SendBorderPacket+0x1c>)
 800b900:	21c4      	movs	r1, #196	; 0xc4
 800b902:	f7ff feaf 	bl	800b664 <APP_THREAD_SendCoapUnicastMsg>
}
 800b906:	b003      	add	sp, #12
 800b908:	f85d fb04 	ldr.w	pc, [sp], #4
 800b90c:	0800c1a0 	.word	0x0800c1a0
 800b910:	20004118 	.word	0x20004118

0800b914 <APP_THREAD_RegisterCmdBuffer>:
  p_thread_otcmdbuffer = p_buffer;
 800b914:	4b01      	ldr	r3, [pc, #4]	; (800b91c <APP_THREAD_RegisterCmdBuffer+0x8>)
 800b916:	6018      	str	r0, [r3, #0]
}
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	20004164 	.word	0x20004164

0800b920 <THREAD_Get_OTCmdPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800b920:	4b01      	ldr	r3, [pc, #4]	; (800b928 <THREAD_Get_OTCmdPayloadBuffer+0x8>)
 800b922:	6818      	ldr	r0, [r3, #0]
}
 800b924:	300c      	adds	r0, #12
 800b926:	4770      	bx	lr
 800b928:	20004164 	.word	0x20004164

0800b92c <THREAD_Get_OTCmdRspPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800b92c:	4b01      	ldr	r3, [pc, #4]	; (800b934 <THREAD_Get_OTCmdRspPayloadBuffer+0x8>)
 800b92e:	6818      	ldr	r0, [r3, #0]
}
 800b930:	300b      	adds	r0, #11
 800b932:	4770      	bx	lr
 800b934:	20004164 	.word	0x20004164

0800b938 <THREAD_Get_NotificationPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800b938:	4b01      	ldr	r3, [pc, #4]	; (800b940 <THREAD_Get_NotificationPayloadBuffer+0x8>)
 800b93a:	6818      	ldr	r0, [r3, #0]
}
 800b93c:	300b      	adds	r0, #11
 800b93e:	4770      	bx	lr
 800b940:	20004160 	.word	0x20004160

0800b944 <Ot_Cmd_Transfer>:
{
 800b944:	b508      	push	{r3, lr}
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800b946:	4b08      	ldr	r3, [pc, #32]	; (800b968 <Ot_Cmd_Transfer+0x24>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800b94e:	7253      	strb	r3, [r2, #9]
 800b950:	2302      	movs	r3, #2
 800b952:	7293      	strb	r3, [r2, #10]
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800b954:	6913      	ldr	r3, [r2, #16]
 800b956:	3302      	adds	r3, #2
 800b958:	009b      	lsls	r3, r3, #2
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800b95a:	72d3      	strb	r3, [r2, #11]
  TL_OT_SendCmd();
 800b95c:	f7ff fba8 	bl	800b0b0 <TL_OT_SendCmd>
  Wait_Getting_Ack_From_M0();
 800b960:	f7ff fc50 	bl	800b204 <Wait_Getting_Ack_From_M0>
}
 800b964:	bd08      	pop	{r3, pc}
 800b966:	bf00      	nop
 800b968:	20004164 	.word	0x20004164

0800b96c <TL_OT_CmdEvtReceived>:
{
 800b96c:	b508      	push	{r3, lr}
  Receive_Ack_From_M0();
 800b96e:	f7ff fc53 	bl	800b218 <Receive_Ack_From_M0>
}
 800b972:	bd08      	pop	{r3, pc}

0800b974 <TL_THREAD_NotReceived>:
{
 800b974:	b508      	push	{r3, lr}
  p_thread_notif_M0_to_M4 = Notbuffer;
 800b976:	4b02      	ldr	r3, [pc, #8]	; (800b980 <TL_THREAD_NotReceived+0xc>)
 800b978:	6018      	str	r0, [r3, #0]
  Receive_Notification_From_M0();
 800b97a:	f7ff fed9 	bl	800b730 <Receive_Notification_From_M0>
}
 800b97e:	bd08      	pop	{r3, pc}
 800b980:	20004160 	.word	0x20004160

0800b984 <Pre_OtCmdProcessing>:
}
 800b984:	4770      	bx	lr
	...

0800b988 <APP_THREAD_Init_UART_CLI>:
{
 800b988:	b508      	push	{r3, lr}
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800b98a:	4a08      	ldr	r2, [pc, #32]	; (800b9ac <APP_THREAD_Init_UART_CLI+0x24>)
 800b98c:	2100      	movs	r1, #0
 800b98e:	4808      	ldr	r0, [pc, #32]	; (800b9b0 <APP_THREAD_Init_UART_CLI+0x28>)
 800b990:	f7fb fd84 	bl	800749c <osThreadNew>
 800b994:	4b07      	ldr	r3, [pc, #28]	; (800b9b4 <APP_THREAD_Init_UART_CLI+0x2c>)
 800b996:	6018      	str	r0, [r3, #0]
  MX_USART1_UART_Init();
 800b998:	f7f6 fafe 	bl	8001f98 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800b99c:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <APP_THREAD_Init_UART_CLI+0x30>)
 800b99e:	2201      	movs	r2, #1
 800b9a0:	4906      	ldr	r1, [pc, #24]	; (800b9bc <APP_THREAD_Init_UART_CLI+0x34>)
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	f7f5 fd16 	bl	80013d4 <HW_UART_Receive_IT>
}
 800b9a8:	bd08      	pop	{r3, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800c158 	.word	0x0800c158
 800b9b0:	0800b7fd 	.word	0x0800b7fd
 800b9b4:	2000400c 	.word	0x2000400c
 800b9b8:	0800b751 	.word	0x0800b751
 800b9bc:	20004014 	.word	0x20004014

0800b9c0 <APP_THREAD_TL_THREAD_INIT>:
{
 800b9c0:	b508      	push	{r3, lr}
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800b9c2:	4806      	ldr	r0, [pc, #24]	; (800b9dc <APP_THREAD_TL_THREAD_INIT+0x1c>)
 800b9c4:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 800b9c6:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800b9ca:	6002      	str	r2, [r0, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800b9cc:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800b9d0:	6082      	str	r2, [r0, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800b9d2:	6043      	str	r3, [r0, #4]
  TL_THREAD_Init( &ThreadConfigBuffer );
 800b9d4:	f7ff fb5e 	bl	800b094 <TL_THREAD_Init>
}
 800b9d8:	bd08      	pop	{r3, pc}
 800b9da:	bf00      	nop
 800b9dc:	200300b8 	.word	0x200300b8
 800b9e0:	20030838 	.word	0x20030838

0800b9e4 <APP_THREAD_Init>:
{
 800b9e4:	b508      	push	{r3, lr}
  APP_THREAD_CheckWirelessFirmwareInfo();
 800b9e6:	f7ff fc1d 	bl	800b224 <APP_THREAD_CheckWirelessFirmwareInfo>
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800b9ea:	480b      	ldr	r0, [pc, #44]	; (800ba18 <APP_THREAD_Init+0x34>)
 800b9ec:	f7ff ff92 	bl	800b914 <APP_THREAD_RegisterCmdBuffer>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	2002      	movs	r0, #2
 800b9f4:	f000 f9e2 	bl	800bdbc <UTIL_LPM_SetOffMode>
  APP_THREAD_TL_THREAD_INIT();
 800b9f8:	f7ff ffe2 	bl	800b9c0 <APP_THREAD_TL_THREAD_INIT>
  APP_THREAD_Init_UART_CLI();
 800b9fc:	f7ff ffc4 	bl	800b988 <APP_THREAD_Init_UART_CLI>
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800ba00:	f7ff f894 	bl	800ab2c <SHCI_C2_THREAD_Init>
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800ba04:	4a05      	ldr	r2, [pc, #20]	; (800ba1c <APP_THREAD_Init+0x38>)
 800ba06:	2100      	movs	r1, #0
 800ba08:	4805      	ldr	r0, [pc, #20]	; (800ba20 <APP_THREAD_Init+0x3c>)
 800ba0a:	f7fb fd47 	bl	800749c <osThreadNew>
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <APP_THREAD_Init+0x40>)
 800ba10:	6018      	str	r0, [r3, #0]
  APP_THREAD_DeviceConfig();
 800ba12:	f7ff fc53 	bl	800b2bc <APP_THREAD_DeviceConfig>
}
 800ba16:	bd08      	pop	{r3, pc}
 800ba18:	20030944 	.word	0x20030944
 800ba1c:	0800c17c 	.word	0x0800c17c
 800ba20:	0800ba7d 	.word	0x0800ba7d
 800ba24:	20004010 	.word	0x20004010

0800ba28 <TL_THREAD_CliNotReceived>:
{
 800ba28:	b538      	push	{r3, r4, r5, lr}
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800ba2a:	7ac5      	ldrb	r5, [r0, #11]
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800ba2c:	f100 040c 	add.w	r4, r0, #12
 800ba30:	4907      	ldr	r1, [pc, #28]	; (800ba50 <TL_THREAD_CliNotReceived+0x28>)
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7f4 fba4 	bl	8000180 <strcmp>
 800ba38:	b910      	cbnz	r0, 800ba40 <TL_THREAD_CliNotReceived+0x18>
    Send_CLI_Ack_For_OT();
 800ba3a:	f7ff fee9 	bl	800b810 <Send_CLI_Ack_For_OT>
}
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <TL_THREAD_CliNotReceived+0x2c>)
 800ba42:	462a      	mov	r2, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	2000      	movs	r0, #0
 800ba48:	f7f5 fcd6 	bl	80013f8 <HW_UART_Transmit_IT>
 800ba4c:	e7f7      	b.n	800ba3e <TL_THREAD_CliNotReceived+0x16>
 800ba4e:	bf00      	nop
 800ba50:	0800c154 	.word	0x0800c154
 800ba54:	0800b819 	.word	0x0800b819

0800ba58 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800ba58:	b508      	push	{r3, lr}
  if (CptReceiveMsgFromM0 != 0)
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	b133      	cbz	r3, 800ba6e <APP_THREAD_ProcessMsgM0ToM4+0x16>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d903      	bls.n	800ba70 <APP_THREAD_ProcessMsgM0ToM4+0x18>
    else
    {
      OpenThread_CallBack_Processing();
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800ba68:	4b03      	ldr	r3, [pc, #12]	; (800ba78 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
  }
}
 800ba6e:	bd08      	pop	{r3, pc}
      OpenThread_CallBack_Processing();
 800ba70:	f7fe ff22 	bl	800a8b8 <OpenThread_CallBack_Processing>
 800ba74:	e7f8      	b.n	800ba68 <APP_THREAD_ProcessMsgM0ToM4+0x10>
 800ba76:	bf00      	nop
 800ba78:	20003f44 	.word	0x20003f44

0800ba7c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
{
 800ba7c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800ba7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba82:	2101      	movs	r1, #1
 800ba84:	4608      	mov	r0, r1
 800ba86:	f7fb fe03 	bl	8007690 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800ba8a:	f7ff ffe5 	bl	800ba58 <APP_THREAD_ProcessMsgM0ToM4>
 800ba8e:	e7f6      	b.n	800ba7e <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x2>

0800ba90 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ba90:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ba92:	4c06      	ldr	r4, [pc, #24]	; (800baac <HW_IPCC_MM_FreeBufHandler+0x1c>)
 800ba94:	6863      	ldr	r3, [r4, #4]
 800ba96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba9a:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4798      	blx	r3
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800baa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800baa6:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	58000c00 	.word	0x58000c00
 800bab0:	20004168 	.word	0x20004168

0800bab4 <HW_IPCC_THREAD_CliNotEvtHandler>:
{
 800bab4:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800bab6:	4a04      	ldr	r2, [pc, #16]	; (800bac8 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800bab8:	6853      	ldr	r3, [r2, #4]
 800baba:	f043 0310 	orr.w	r3, r3, #16
 800babe:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_CliEvtNot();
 800bac0:	f7ff fb3a 	bl	800b138 <HW_IPCC_THREAD_CliEvtNot>
}
 800bac4:	bd08      	pop	{r3, pc}
 800bac6:	bf00      	nop
 800bac8:	58000c00 	.word	0x58000c00

0800bacc <HW_IPCC_Enable>:
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bacc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bace:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bad0:	4a02      	ldr	r2, [pc, #8]	; (800badc <HW_IPCC_Enable+0x10>)
 800bad2:	68d3      	ldr	r3, [r2, #12]
 800bad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bad8:	60d3      	str	r3, [r2, #12]
}
 800bada:	4770      	bx	lr
 800badc:	58000400 	.word	0x58000400

0800bae0 <HW_IPCC_Init>:
{
 800bae0:	b500      	push	{lr}
 800bae2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800baee:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800baf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baf6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800baf8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <HW_IPCC_Init+0x40>)
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	f042 0201 	orr.w	r2, r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bb0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bb0c:	202c      	movs	r0, #44	; 0x2c
 800bb0e:	f7f7 f879 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bb12:	202d      	movs	r0, #45	; 0x2d
 800bb14:	f7f7 f876 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 800bb18:	b003      	add	sp, #12
 800bb1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb1e:	bf00      	nop
 800bb20:	58000c00 	.word	0x58000c00

0800bb24 <HW_IPCC_BLE_AclDataEvtHandler>:
{
 800bb24:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bb26:	4a04      	ldr	r2, [pc, #16]	; (800bb38 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bb28:	6853      	ldr	r3, [r2, #4]
 800bb2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb2e:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800bb30:	f7ff fa5a 	bl	800afe8 <HW_IPCC_BLE_AclDataAckNot>
}
 800bb34:	bd08      	pop	{r3, pc}
 800bb36:	bf00      	nop
 800bb38:	58000c00 	.word	0x58000c00

0800bb3c <HW_IPCC_BLE_EvtHandler>:
{
 800bb3c:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 800bb3e:	f7ff fa3b 	bl	800afb8 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bb42:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <HW_IPCC_BLE_EvtHandler+0x10>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	609a      	str	r2, [r3, #8]
}
 800bb48:	bd08      	pop	{r3, pc}
 800bb4a:	bf00      	nop
 800bb4c:	58000c00 	.word	0x58000c00

0800bb50 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bb50:	4a02      	ldr	r2, [pc, #8]	; (800bb5c <HW_IPCC_SYS_Init+0xc>)
 800bb52:	6853      	ldr	r3, [r2, #4]
 800bb54:	f023 0302 	bic.w	r3, r3, #2
 800bb58:	6053      	str	r3, [r2, #4]
}
 800bb5a:	4770      	bx	lr
 800bb5c:	58000c00 	.word	0x58000c00

0800bb60 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bb60:	4b04      	ldr	r3, [pc, #16]	; (800bb74 <HW_IPCC_SYS_SendCmd+0x14>)
 800bb62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bb66:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bb68:	685a      	ldr	r2, [r3, #4]
 800bb6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bb6e:	605a      	str	r2, [r3, #4]
}
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	58000c00 	.word	0x58000c00

0800bb78 <HW_IPCC_SYS_CmdEvtHandler>:
{
 800bb78:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bb7a:	4a04      	ldr	r2, [pc, #16]	; (800bb8c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bb7c:	6853      	ldr	r3, [r2, #4]
 800bb7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb82:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 800bb84:	f7ff fa62 	bl	800b04c <HW_IPCC_SYS_CmdEvtNot>
}
 800bb88:	bd08      	pop	{r3, pc}
 800bb8a:	bf00      	nop
 800bb8c:	58000c00 	.word	0x58000c00

0800bb90 <HW_IPCC_SYS_EvtHandler>:
{
 800bb90:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 800bb92:	f7ff fa67 	bl	800b064 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bb96:	4b02      	ldr	r3, [pc, #8]	; (800bba0 <HW_IPCC_SYS_EvtHandler+0x10>)
 800bb98:	2202      	movs	r2, #2
 800bb9a:	609a      	str	r2, [r3, #8]
}
 800bb9c:	bd08      	pop	{r3, pc}
 800bb9e:	bf00      	nop
 800bba0:	58000c00 	.word	0x58000c00

0800bba4 <HW_IPCC_THREAD_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bba4:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <HW_IPCC_THREAD_Init+0x14>)
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	f022 0204 	bic.w	r2, r2, #4
 800bbac:	605a      	str	r2, [r3, #4]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	f022 0210 	bic.w	r2, r2, #16
 800bbb4:	605a      	str	r2, [r3, #4]
}
 800bbb6:	4770      	bx	lr
 800bbb8:	58000c00 	.word	0x58000c00

0800bbbc <HW_IPCC_OT_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <HW_IPCC_OT_SendCmd+0x14>)
 800bbbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bbc2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbca:	605a      	str	r2, [r3, #4]
}
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	58000c00 	.word	0x58000c00

0800bbd4 <HW_IPCC_CLI_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <HW_IPCC_CLI_SendCmd+0xc>)
 800bbd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbda:	609a      	str	r2, [r3, #8]
}
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	58000c00 	.word	0x58000c00

0800bbe4 <HW_IPCC_THREAD_SendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bbe4:	4b03      	ldr	r3, [pc, #12]	; (800bbf4 <HW_IPCC_THREAD_SendAck+0x10>)
 800bbe6:	2204      	movs	r2, #4
 800bbe8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	f022 0204 	bic.w	r2, r2, #4
 800bbf0:	605a      	str	r2, [r3, #4]
}
 800bbf2:	4770      	bx	lr
 800bbf4:	58000c00 	.word	0x58000c00

0800bbf8 <HW_IPCC_THREAD_CliSendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bbf8:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <HW_IPCC_THREAD_CliSendAck+0x10>)
 800bbfa:	2210      	movs	r2, #16
 800bbfc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	f022 0210 	bic.w	r2, r2, #16
 800bc04:	605a      	str	r2, [r3, #4]
}
 800bc06:	4770      	bx	lr
 800bc08:	58000c00 	.word	0x58000c00

0800bc0c <HW_IPCC_OT_CmdEvtHandler>:
{
 800bc0c:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bc0e:	4a04      	ldr	r2, [pc, #16]	; (800bc20 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800bc10:	6853      	ldr	r3, [r2, #4]
 800bc12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc16:	6053      	str	r3, [r2, #4]
  HW_IPCC_OT_CmdEvtNot();
 800bc18:	f7ff fa7a 	bl	800b110 <HW_IPCC_OT_CmdEvtNot>
}
 800bc1c:	bd08      	pop	{r3, pc}
 800bc1e:	bf00      	nop
 800bc20:	58000c00 	.word	0x58000c00

0800bc24 <HW_IPCC_Tx_Handler>:
{
 800bc24:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bc26:	4b21      	ldr	r3, [pc, #132]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f013 0f02 	tst.w	r3, #2
 800bc2e:	d104      	bne.n	800bc3a <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bc38:	d028      	beq.n	800bc8c <HW_IPCC_Tx_Handler+0x68>
 800bc3a:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f013 0f04 	tst.w	r3, #4
 800bc42:	d104      	bne.n	800bc4e <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800bc44:	4b19      	ldr	r3, [pc, #100]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800bc4c:	d021      	beq.n	800bc92 <HW_IPCC_Tx_Handler+0x6e>
 800bc4e:	4b17      	ldr	r3, [pc, #92]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f013 0f02 	tst.w	r3, #2
 800bc56:	d104      	bne.n	800bc62 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bc58:	4b14      	ldr	r3, [pc, #80]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bc60:	d01a      	beq.n	800bc98 <HW_IPCC_Tx_Handler+0x74>
 800bc62:	4b12      	ldr	r3, [pc, #72]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f013 0f08 	tst.w	r3, #8
 800bc6a:	d104      	bne.n	800bc76 <HW_IPCC_Tx_Handler+0x52>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800bc74:	d013      	beq.n	800bc9e <HW_IPCC_Tx_Handler+0x7a>
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	f013 0f20 	tst.w	r3, #32
 800bc7e:	d104      	bne.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <HW_IPCC_Tx_Handler+0x88>)
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800bc88:	d00c      	beq.n	800bca4 <HW_IPCC_Tx_Handler+0x80>
}
 800bc8a:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 800bc8c:	f7ff ff74 	bl	800bb78 <HW_IPCC_SYS_CmdEvtHandler>
 800bc90:	e7fb      	b.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_OT_CmdEvtHandler();
 800bc92:	f7ff ffbb 	bl	800bc0c <HW_IPCC_OT_CmdEvtHandler>
 800bc96:	e7f8      	b.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_SYS_CmdEvtHandler();
 800bc98:	f7ff ff6e 	bl	800bb78 <HW_IPCC_SYS_CmdEvtHandler>
 800bc9c:	e7f5      	b.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_MM_FreeBufHandler();
 800bc9e:	f7ff fef7 	bl	800ba90 <HW_IPCC_MM_FreeBufHandler>
 800bca2:	e7f2      	b.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_BLE_AclDataEvtHandler();
 800bca4:	f7ff ff3e 	bl	800bb24 <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 800bca8:	e7ef      	b.n	800bc8a <HW_IPCC_Tx_Handler+0x66>
 800bcaa:	bf00      	nop
 800bcac:	58000c00 	.word	0x58000c00

0800bcb0 <HW_IPCC_THREAD_NotEvtHandler>:
{
 800bcb0:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800bcb2:	4a04      	ldr	r2, [pc, #16]	; (800bcc4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800bcb4:	6853      	ldr	r3, [r2, #4]
 800bcb6:	f043 0304 	orr.w	r3, r3, #4
 800bcba:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_EvtNot();
 800bcbc:	f7ff fa32 	bl	800b124 <HW_IPCC_THREAD_EvtNot>
}
 800bcc0:	bd08      	pop	{r3, pc}
 800bcc2:	bf00      	nop
 800bcc4:	58000c00 	.word	0x58000c00

0800bcc8 <HW_IPCC_MM_SendFreeBuf>:
{
 800bcc8:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	f013 0f08 	tst.w	r3, #8
 800bcd2:	d105      	bne.n	800bce0 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 800bcd4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bcd6:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800bcd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bcdc:	609a      	str	r2, [r3, #8]
}
 800bcde:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 800bce0:	4b04      	ldr	r3, [pc, #16]	; (800bcf4 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 800bce2:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bce4:	4a02      	ldr	r2, [pc, #8]	; (800bcf0 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800bce6:	6853      	ldr	r3, [r2, #4]
 800bce8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bcec:	6053      	str	r3, [r2, #4]
 800bcee:	e7f6      	b.n	800bcde <HW_IPCC_MM_SendFreeBuf+0x16>
 800bcf0:	58000c00 	.word	0x58000c00
 800bcf4:	20004168 	.word	0x20004168

0800bcf8 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bcf8:	4a02      	ldr	r2, [pc, #8]	; (800bd04 <HW_IPCC_TRACES_Init+0xc>)
 800bcfa:	6853      	ldr	r3, [r2, #4]
 800bcfc:	f023 0308 	bic.w	r3, r3, #8
 800bd00:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800bd02:	4770      	bx	lr
 800bd04:	58000c00 	.word	0x58000c00

0800bd08 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bd08:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 800bd0a:	f7ff fa5d 	bl	800b1c8 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bd0e:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <HW_IPCC_TRACES_EvtHandler+0x10>)
 800bd10:	2208      	movs	r2, #8
 800bd12:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800bd14:	bd08      	pop	{r3, pc}
 800bd16:	bf00      	nop
 800bd18:	58000c00 	.word	0x58000c00

0800bd1c <HW_IPCC_Rx_Handler>:
{
 800bd1c:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bd1e:	4b21      	ldr	r3, [pc, #132]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	f013 0f02 	tst.w	r3, #2
 800bd26:	d004      	beq.n	800bd32 <HW_IPCC_Rx_Handler+0x16>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bd28:	4b1e      	ldr	r3, [pc, #120]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f013 0f02 	tst.w	r3, #2
 800bd30:	d028      	beq.n	800bd84 <HW_IPCC_Rx_Handler+0x68>
 800bd32:	4b1c      	ldr	r3, [pc, #112]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f013 0f04 	tst.w	r3, #4
 800bd3a:	d004      	beq.n	800bd46 <HW_IPCC_Rx_Handler+0x2a>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800bd3c:	4b19      	ldr	r3, [pc, #100]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f013 0f04 	tst.w	r3, #4
 800bd44:	d021      	beq.n	800bd8a <HW_IPCC_Rx_Handler+0x6e>
 800bd46:	4b17      	ldr	r3, [pc, #92]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f013 0f10 	tst.w	r3, #16
 800bd4e:	d004      	beq.n	800bd5a <HW_IPCC_Rx_Handler+0x3e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800bd50:	4b14      	ldr	r3, [pc, #80]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	f013 0f10 	tst.w	r3, #16
 800bd58:	d01a      	beq.n	800bd90 <HW_IPCC_Rx_Handler+0x74>
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	f013 0f01 	tst.w	r3, #1
 800bd62:	d004      	beq.n	800bd6e <HW_IPCC_Rx_Handler+0x52>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bd64:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f013 0f01 	tst.w	r3, #1
 800bd6c:	d013      	beq.n	800bd96 <HW_IPCC_Rx_Handler+0x7a>
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	f013 0f08 	tst.w	r3, #8
 800bd76:	d004      	beq.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bd78:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <HW_IPCC_Rx_Handler+0x88>)
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f013 0f08 	tst.w	r3, #8
 800bd80:	d00c      	beq.n	800bd9c <HW_IPCC_Rx_Handler+0x80>
}
 800bd82:	bd08      	pop	{r3, pc}
      HW_IPCC_SYS_EvtHandler();
 800bd84:	f7ff ff04 	bl	800bb90 <HW_IPCC_SYS_EvtHandler>
 800bd88:	e7fb      	b.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_NotEvtHandler();
 800bd8a:	f7ff ff91 	bl	800bcb0 <HW_IPCC_THREAD_NotEvtHandler>
 800bd8e:	e7f8      	b.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_CliNotEvtHandler();
 800bd90:	f7ff fe90 	bl	800bab4 <HW_IPCC_THREAD_CliNotEvtHandler>
 800bd94:	e7f5      	b.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_BLE_EvtHandler();
 800bd96:	f7ff fed1 	bl	800bb3c <HW_IPCC_BLE_EvtHandler>
 800bd9a:	e7f2      	b.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_TRACES_EvtHandler();
 800bd9c:	f7ff ffb4 	bl	800bd08 <HW_IPCC_TRACES_EvtHandler>
  return;
 800bda0:	e7ef      	b.n	800bd82 <HW_IPCC_Rx_Handler+0x66>
 800bda2:	bf00      	nop
 800bda4:	58000c00 	.word	0x58000c00

0800bda8 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4a02      	ldr	r2, [pc, #8]	; (800bdb4 <UTIL_LPM_Init+0xc>)
 800bdac:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bdae:	4a02      	ldr	r2, [pc, #8]	; (800bdb8 <UTIL_LPM_Init+0x10>)
 800bdb0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bdb2:	4770      	bx	lr
 800bdb4:	20004170 	.word	0x20004170
 800bdb8:	2000416c 	.word	0x2000416c

0800bdbc <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdbc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bdc0:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800bdc2:	b141      	cbz	r1, 800bdd6 <UTIL_LPM_SetOffMode+0x1a>
 800bdc4:	2901      	cmp	r1, #1
 800bdc6:	d103      	bne.n	800bdd0 <UTIL_LPM_SetOffMode+0x14>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bdc8:	4906      	ldr	r1, [pc, #24]	; (800bde4 <UTIL_LPM_SetOffMode+0x28>)
 800bdca:	680a      	ldr	r2, [r1, #0]
 800bdcc:	4310      	orrs	r0, r2
 800bdce:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdd0:	f383 8810 	msr	PRIMASK, r3
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bdd4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800bdd6:	4903      	ldr	r1, [pc, #12]	; (800bde4 <UTIL_LPM_SetOffMode+0x28>)
 800bdd8:	680a      	ldr	r2, [r1, #0]
 800bdda:	ea22 0000 	bic.w	r0, r2, r0
 800bdde:	6008      	str	r0, [r1, #0]
      break;
 800bde0:	e7f6      	b.n	800bdd0 <UTIL_LPM_SetOffMode+0x14>
 800bde2:	bf00      	nop
 800bde4:	2000416c 	.word	0x2000416c

0800bde8 <__libc_init_array>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	4e0d      	ldr	r6, [pc, #52]	; (800be20 <__libc_init_array+0x38>)
 800bdec:	4c0d      	ldr	r4, [pc, #52]	; (800be24 <__libc_init_array+0x3c>)
 800bdee:	1ba4      	subs	r4, r4, r6
 800bdf0:	10a4      	asrs	r4, r4, #2
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	42a5      	cmp	r5, r4
 800bdf6:	d109      	bne.n	800be0c <__libc_init_array+0x24>
 800bdf8:	4e0b      	ldr	r6, [pc, #44]	; (800be28 <__libc_init_array+0x40>)
 800bdfa:	4c0c      	ldr	r4, [pc, #48]	; (800be2c <__libc_init_array+0x44>)
 800bdfc:	f000 f82c 	bl	800be58 <_init>
 800be00:	1ba4      	subs	r4, r4, r6
 800be02:	10a4      	asrs	r4, r4, #2
 800be04:	2500      	movs	r5, #0
 800be06:	42a5      	cmp	r5, r4
 800be08:	d105      	bne.n	800be16 <__libc_init_array+0x2e>
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be10:	4798      	blx	r3
 800be12:	3501      	adds	r5, #1
 800be14:	e7ee      	b.n	800bdf4 <__libc_init_array+0xc>
 800be16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be1a:	4798      	blx	r3
 800be1c:	3501      	adds	r5, #1
 800be1e:	e7f2      	b.n	800be06 <__libc_init_array+0x1e>
 800be20:	0800c248 	.word	0x0800c248
 800be24:	0800c248 	.word	0x0800c248
 800be28:	0800c248 	.word	0x0800c248
 800be2c:	0800c24c 	.word	0x0800c24c

0800be30 <memcpy>:
 800be30:	b510      	push	{r4, lr}
 800be32:	1e43      	subs	r3, r0, #1
 800be34:	440a      	add	r2, r1
 800be36:	4291      	cmp	r1, r2
 800be38:	d100      	bne.n	800be3c <memcpy+0xc>
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be44:	e7f7      	b.n	800be36 <memcpy+0x6>

0800be46 <memset>:
 800be46:	4402      	add	r2, r0
 800be48:	4603      	mov	r3, r0
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d100      	bne.n	800be50 <memset+0xa>
 800be4e:	4770      	bx	lr
 800be50:	f803 1b01 	strb.w	r1, [r3], #1
 800be54:	e7f9      	b.n	800be4a <memset+0x4>
	...

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
