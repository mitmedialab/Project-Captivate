
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e264  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800e3a8  0800e3a8  0001e3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e920  0800e920  0001e920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000004  0800e928  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000d8  0800e9fc  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000174  0800ea95  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fe8  20000188  0800eaa6  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005170  0800eaa6  00025170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000a96  200300c4  200300c4  00030000  2**2
                  ALLOC
 15 .debug_info   0005fbf3  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00009b16  00000000  00000000  0007fda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00021a8c  00000000  00000000  000898be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002e60  00000000  00000000  000ab350  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003100  00000000  00000000  000ae1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003215c  00000000  00000000  000b12b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00037d9f  00000000  00000000  000e340c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00115eba  00000000  00000000  0011b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  00231065  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000082e0  00000000  00000000  002310e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000188 	.word	0x20000188
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e38c 	.word	0x0800e38c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000018c 	.word	0x2000018c
 800017c:	0800e38c 	.word	0x0800e38c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e0c:	b500      	push	{lr}
 8000e0e:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e10:	2300      	movs	r3, #0
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9304      	str	r3, [sp, #16]
 8000e1c:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <MX_ADC1_Init+0x80>)
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <MX_ADC1_Init+0x84>)
 8000e22:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e24:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e28:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e30:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	2204      	movs	r2, #4
 8000e34:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e36:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	7642      	strb	r2, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e3c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e42:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e48:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e4c:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e52:	f002 fa7d 	bl	8003350 <HAL_ADC_Init>
 8000e56:	b990      	cbnz	r0, 8000e7e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_ADC1_Init+0x88>)
 8000e5a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e60:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e62:	237f      	movs	r3, #127	; 0x7f
 8000e64:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e66:	2304      	movs	r3, #4
 8000e68:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	4669      	mov	r1, sp
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC1_Init+0x80>)
 8000e72:	f002 fbb5 	bl	80035e0 <HAL_ADC_ConfigChannel>
 8000e76:	b928      	cbnz	r0, 8000e84 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }

}
 8000e78:	b007      	add	sp, #28
 8000e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e7e:	f001 fe77 	bl	8002b70 <Error_Handler>
 8000e82:	e7e9      	b.n	8000e58 <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000e84:	f001 fe74 	bl	8002b70 <Error_Handler>
}
 8000e88:	e7f6      	b.n	8000e78 <MX_ADC1_Init+0x6c>
 8000e8a:	bf00      	nop
 8000e8c:	200049dc 	.word	0x200049dc
 8000e90:	50040000 	.word	0x50040000
 8000e94:	14f00020 	.word	0x14f00020

08000e98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9304      	str	r3, [sp, #16]
 8000ea2:	9305      	str	r3, [sp, #20]
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ea8:	6802      	ldr	r2, [r0, #0]
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_ADC_MspInit+0x8c>)
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d001      	beq.n	8000eb4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eb0:	b008      	add	sp, #32
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	4604      	mov	r4, r0
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000ec8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000eca:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000edc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	a903      	add	r1, sp, #12
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f003 f9be 	bl	800426c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <HAL_ADC_MspInit+0x90>)
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_ADC_MspInit+0x94>)
 8000ef4:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	2300      	movs	r3, #0
 8000efc:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f04:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f08:	2220      	movs	r2, #32
 8000f0a:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f0e:	f003 f81f 	bl	8003f50 <HAL_DMA_Init>
 8000f12:	b918      	cbnz	r0, 8000f1c <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_ADC_MspInit+0x90>)
 8000f16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f18:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000f1a:	e7c9      	b.n	8000eb0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000f1c:	f001 fe28 	bl	8002b70 <Error_Handler>
 8000f20:	e7f8      	b.n	8000f14 <HAL_ADC_MspInit+0x7c>
 8000f22:	bf00      	nop
 8000f24:	50040000 	.word	0x50040000
 8000f28:	20004a40 	.word	0x20004a40
 8000f2c:	40020008 	.word	0x40020008

08000f30 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000f30:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f36:	6893      	ldr	r3, [r2, #8]
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3c:	6093      	str	r3, [r2, #8]
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000f3e:	f00c f96f 	bl	800d220 <UTIL_LPM_Init>
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
}
 8000f42:	bd08      	pop	{r3, pc}

08000f44 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	b088      	sub	sp, #32
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f48:	f00b fa42 	bl	800c3d0 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f007 fe4f 	bl	8008bf0 <osMutexNew>
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <appe_Tl_Init+0x64>)
 8000f54:	6018      	str	r0, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000f56:	2200      	movs	r2, #0
 8000f58:	4611      	mov	r1, r2
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f007 ff20 	bl	8008da0 <osSemaphoreNew>
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <appe_Tl_Init+0x68>)
 8000f62:	6018      	str	r0, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <appe_Tl_Init+0x6c>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <appe_Tl_Init+0x70>)
 8000f6a:	f007 fcbf 	bl	80088ec <osThreadNew>
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <appe_Tl_Init+0x74>)
 8000f70:	6018      	str	r0, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000f72:	4c12      	ldr	r4, [pc, #72]	; (8000fbc <appe_Tl_Init+0x78>)
 8000f74:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <appe_Tl_Init+0x7c>)
 8000f78:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f7a:	4669      	mov	r1, sp
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <appe_Tl_Init+0x80>)
 8000f7e:	f00b f89d 	bl	800c0bc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f86:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000f8a:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f8c:	f504 7406 	add.w	r4, r4, #536	; 0x218
 8000f90:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f92:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f96:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 8000f98:	a802      	add	r0, sp, #8
 8000f9a:	f00b fb05 	bl	800c5a8 <TL_MM_Init>

  TL_Enable();
 8000f9e:	f00b fa13 	bl	800c3c8 <TL_Enable>

  return;
}
 8000fa2:	b008      	add	sp, #32
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20004aa0 	.word	0x20004aa0
 8000fac:	20004ac0 	.word	0x20004ac0
 8000fb0:	0800e448 	.word	0x0800e448
 8000fb4:	08001069 	.word	0x08001069
 8000fb8:	20004aa8 	.word	0x20004aa8
 8000fbc:	200300c4 	.word	0x200300c4
 8000fc0:	08001041 	.word	0x08001041
 8000fc4:	08001019 	.word	0x08001019

08000fc8 <APPE_SysEvtReadyProcessing>:
  }
  return;
}

static void APPE_SysEvtReadyProcessing( void )
{
 8000fc8:	b508      	push	{r3, lr}
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000fca:	f00b fb1b 	bl	800c604 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000fce:	f00b ff37 	bl	800ce40 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f00c f92d 	bl	800d234 <UTIL_LPM_SetOffMode>
  return;
}
 8000fda:	bd08      	pop	{r3, pc}

08000fdc <APPE_SysEvtError>:
{
 8000fdc:	b508      	push	{r3, lr}
  switch(ErrorCode)
 8000fde:	287d      	cmp	r0, #125	; 0x7d
 8000fe0:	d008      	beq.n	8000ff4 <APPE_SysEvtError+0x18>
 8000fe2:	287e      	cmp	r0, #126	; 0x7e
 8000fe4:	d00c      	beq.n	8001000 <APPE_SysEvtError+0x24>
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <APPE_SysEvtError+0x30>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	2000      	movs	r0, #0
 8000fee:	f001 ff9f 	bl	8002f30 <logApplication>
  return;
 8000ff2:	e004      	b.n	8000ffe <APPE_SysEvtError+0x22>
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <APPE_SysEvtError+0x34>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f001 ff99 	bl	8002f30 <logApplication>
}
 8000ffe:	bd08      	pop	{r3, pc}
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <APPE_SysEvtError+0x38>)
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f001 ff93 	bl	8002f30 <logApplication>
       break;
 800100a:	e7f8      	b.n	8000ffe <APPE_SysEvtError+0x22>
 800100c:	0800e428 	.word	0x0800e428
 8001010:	0800e3e4 	.word	0x0800e3e4
 8001014:	0800e408 	.word	0x0800e408

08001018 <APPE_SysUserEvtRx>:
{
 8001018:	b508      	push	{r3, lr}
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800101a:	6842      	ldr	r2, [r0, #4]
  switch(p_sys_event->subevtcode)
 800101c:	f8b2 300b 	ldrh.w	r3, [r2, #11]
 8001020:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001024:	d004      	beq.n	8001030 <APPE_SysUserEvtRx+0x18>
 8001026:	f249 2101 	movw	r1, #37377	; 0x9201
 800102a:	428b      	cmp	r3, r1
 800102c:	d003      	beq.n	8001036 <APPE_SysUserEvtRx+0x1e>
}
 800102e:	bd08      	pop	{r3, pc}
         APPE_SysEvtReadyProcessing();
 8001030:	f7ff ffca 	bl	8000fc8 <APPE_SysEvtReadyProcessing>
         break;
 8001034:	e7fb      	b.n	800102e <APPE_SysUserEvtRx+0x16>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001036:	7b50      	ldrb	r0, [r2, #13]
 8001038:	f7ff ffd0 	bl	8000fdc <APPE_SysEvtError>
  return;
 800103c:	e7f7      	b.n	800102e <APPE_SysUserEvtRx+0x16>
	...

08001040 <APPE_SysStatusNot>:
{
 8001040:	b508      	push	{r3, lr}
  switch (status)
 8001042:	b110      	cbz	r0, 800104a <APPE_SysStatusNot+0xa>
 8001044:	2801      	cmp	r0, #1
 8001046:	d007      	beq.n	8001058 <APPE_SysStatusNot+0x18>
}
 8001048:	bd08      	pop	{r3, pc}
      osMutexAcquire( MtxShciId, osWaitForever );
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <APPE_SysStatusNot+0x24>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f007 fe2b 	bl	8008cac <osMutexAcquire>
      break;
 8001056:	e7f7      	b.n	8001048 <APPE_SysStatusNot+0x8>
      osMutexRelease( MtxShciId );
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <APPE_SysStatusNot+0x24>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f007 fe66 	bl	8008d2c <osMutexRelease>
  return;
 8001060:	e7f2      	b.n	8001048 <APPE_SysStatusNot+0x8>
 8001062:	bf00      	nop
 8001064:	20004aa0 	.word	0x20004aa0

08001068 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001068:	b508      	push	{r3, lr}
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	2100      	movs	r1, #0
 8001070:	2001      	movs	r0, #1
 8001072:	f007 fd35 	bl	8008ae0 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001076:	f00b f833 	bl	800c0e0 <shci_user_evt_proc>
 800107a:	e7f6      	b.n	800106a <ShciUserEvtProcess+0x2>

0800107c <APPE_Init>:
{
 800107c:	b508      	push	{r3, lr}
  SystemPower_Config(); /**< Configure the system Power Mode */
 800107e:	f7ff ff57 	bl	8000f30 <SystemPower_Config>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001082:	4903      	ldr	r1, [pc, #12]	; (8001090 <APPE_Init+0x14>)
 8001084:	2000      	movs	r0, #0
 8001086:	f001 f821 	bl	80020cc <HW_TS_Init>
  appe_Tl_Init();	/* Initialize all transport layers */
 800108a:	f7ff ff5b 	bl	8000f44 <appe_Tl_Init>
}
 800108e:	bd08      	pop	{r3, pc}
 8001090:	20004f34 	.word	0x20004f34

08001094 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001094:	b508      	push	{r3, lr}
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8001096:	2101      	movs	r1, #1
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <shci_notify_asynch_evt+0x10>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f007 fc9a 	bl	80089d4 <osThreadFlagsSet>
  return;
}
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop
 80010a4:	20004aa8 	.word	0x20004aa8

080010a8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010a8:	b508      	push	{r3, lr}
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80010aa:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <shci_cmd_resp_release+0xc>)
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f007 ff2b 	bl	8008f08 <osSemaphoreRelease>
  return;
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20004ac0 	.word	0x20004ac0

080010b8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80010b8:	b508      	push	{r3, lr}
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80010ba:	f04f 31ff 	mov.w	r1, #4294967295
 80010be:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <shci_cmd_resp_wait+0x10>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f007 fedd 	bl	8008e80 <osSemaphoreAcquire>
  return;
}
 80010c6:	bd08      	pop	{r3, pc}
 80010c8:	20004ac0 	.word	0x20004ac0

080010cc <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80010cc:	b508      	push	{r3, lr}
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80010ce:	f00b fa8b 	bl	800c5e8 <TL_MM_EvtDone>
}
 80010d2:	bd08      	pop	{r3, pc}

080010d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d4:	b508      	push	{r3, lr}
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) temp, sizeof(temp));
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f007 fd68 	bl	8008bac <osDelay>
 80010dc:	e7fb      	b.n	80010d6 <StartDefaultTask+0x2>
	...

080010e0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	b0ae      	sub	sp, #184	; 0xb8
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <MX_FREERTOS_Init+0x138>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	484c      	ldr	r0, [pc, #304]	; (800121c <MX_FREERTOS_Init+0x13c>)
 80010ea:	f007 fbff 	bl	80088ec <osThreadNew>
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <MX_FREERTOS_Init+0x140>)
 80010f0:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t threadFrontLightsTask_attributes = {
 80010f2:	2520      	movs	r5, #32
 80010f4:	462a      	mov	r2, r5
 80010f6:	2100      	movs	r1, #0
 80010f8:	a826      	add	r0, sp, #152	; 0x98
 80010fa:	f00c f8e6 	bl	800d2ca <memset>
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_FREERTOS_Init+0x144>)
 8001100:	9325      	str	r3, [sp, #148]	; 0x94
 8001102:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001106:	962a      	str	r6, [sp, #168]	; 0xa8
 8001108:	2418      	movs	r4, #24
 800110a:	942b      	str	r4, [sp, #172]	; 0xac
   threadFrontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &threadFrontLightsTask_attributes);
 800110c:	aa25      	add	r2, sp, #148	; 0x94
 800110e:	2100      	movs	r1, #0
 8001110:	4845      	ldr	r0, [pc, #276]	; (8001228 <MX_FREERTOS_Init+0x148>)
 8001112:	f007 fbeb 	bl	80088ec <osThreadNew>
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <MX_FREERTOS_Init+0x14c>)
 8001118:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t blinkTask_attributes = {
 800111a:	462a      	mov	r2, r5
 800111c:	2100      	movs	r1, #0
 800111e:	a81d      	add	r0, sp, #116	; 0x74
 8001120:	f00c f8d3 	bl	800d2ca <memset>
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <MX_FREERTOS_Init+0x150>)
 8001126:	931c      	str	r3, [sp, #112]	; 0x70
 8001128:	9621      	str	r6, [sp, #132]	; 0x84
 800112a:	9422      	str	r4, [sp, #136]	; 0x88
   blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 800112c:	aa1c      	add	r2, sp, #112	; 0x70
 800112e:	2100      	movs	r1, #0
 8001130:	4840      	ldr	r0, [pc, #256]	; (8001234 <MX_FREERTOS_Init+0x154>)
 8001132:	f007 fbdb 	bl	80088ec <osThreadNew>
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <MX_FREERTOS_Init+0x158>)
 8001138:	6018      	str	r0, [r3, #0]
   lightsSimpleQueueHandle = osMessageQueueNew (MAX_LIGHT_SIMPLE_QUEUE_SIZE, sizeof(lightsSimpleMessage), NULL);
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	2005      	movs	r0, #5
 8001140:	f007 ff20 	bl	8008f84 <osMessageQueueNew>
 8001144:	4b3d      	ldr	r3, [pc, #244]	; (800123c <MX_FREERTOS_Init+0x15c>)
 8001146:	6018      	str	r0, [r3, #0]
   blinkMsgQueueHandle = osMessageQueueNew (10, sizeof(struct blinkData), NULL);
 8001148:	2200      	movs	r2, #0
 800114a:	216c      	movs	r1, #108	; 0x6c
 800114c:	200a      	movs	r0, #10
 800114e:	f007 ff19 	bl	8008f84 <osMessageQueueNew>
 8001152:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <MX_FREERTOS_Init+0x160>)
 8001154:	6018      	str	r0, [r3, #0]
   togLoggingQueueHandle = osMessageQueueNew (4, sizeof(struct LogMessage), NULL);
 8001156:	2200      	movs	r2, #0
 8001158:	2106      	movs	r1, #6
 800115a:	2004      	movs	r0, #4
 800115c:	f007 ff12 	bl	8008f84 <osMessageQueueNew>
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <MX_FREERTOS_Init+0x164>)
 8001162:	6018      	str	r0, [r3, #0]
   const osThreadAttr_t masterThreadTask_attributes = {
 8001164:	462a      	mov	r2, r5
 8001166:	2100      	movs	r1, #0
 8001168:	a814      	add	r0, sp, #80	; 0x50
 800116a:	f00c f8ae 	bl	800d2ca <memset>
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_FREERTOS_Init+0x168>)
 8001170:	9313      	str	r3, [sp, #76]	; 0x4c
 8001172:	9618      	str	r6, [sp, #96]	; 0x60
 8001174:	9419      	str	r4, [sp, #100]	; 0x64
    masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8001176:	aa13      	add	r2, sp, #76	; 0x4c
 8001178:	2100      	movs	r1, #0
 800117a:	4834      	ldr	r0, [pc, #208]	; (800124c <MX_FREERTOS_Init+0x16c>)
 800117c:	f007 fbb6 	bl	80088ec <osThreadNew>
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MX_FREERTOS_Init+0x170>)
 8001182:	6018      	str	r0, [r3, #0]
	const osThreadAttr_t inertialSensingTask_attributes = {
 8001184:	462a      	mov	r2, r5
 8001186:	2100      	movs	r1, #0
 8001188:	a80b      	add	r0, sp, #44	; 0x2c
 800118a:	f00c f89e 	bl	800d2ca <memset>
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <MX_FREERTOS_Init+0x174>)
 8001190:	930a      	str	r3, [sp, #40]	; 0x28
 8001192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001196:	930f      	str	r3, [sp, #60]	; 0x3c
 8001198:	9410      	str	r4, [sp, #64]	; 0x40
	inertialSensingTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialSensingTask_attributes);
 800119a:	aa0a      	add	r2, sp, #40	; 0x28
 800119c:	2100      	movs	r1, #0
 800119e:	482e      	ldr	r0, [pc, #184]	; (8001258 <MX_FREERTOS_Init+0x178>)
 80011a0:	f007 fba4 	bl	80088ec <osThreadNew>
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_FREERTOS_Init+0x17c>)
 80011a6:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t interProcessorTask_attributes = {
 80011a8:	462a      	mov	r2, r5
 80011aa:	2100      	movs	r1, #0
 80011ac:	a802      	add	r0, sp, #8
 80011ae:	f00c f88c 	bl	800d2ca <memset>
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_FREERTOS_Init+0x180>)
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	9306      	str	r3, [sp, #24]
 80011ba:	9407      	str	r4, [sp, #28]
    interProcessorTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcessorTask_attributes);
 80011bc:	aa01      	add	r2, sp, #4
 80011be:	2100      	movs	r1, #0
 80011c0:	4828      	ldr	r0, [pc, #160]	; (8001264 <MX_FREERTOS_Init+0x184>)
 80011c2:	f007 fb93 	bl	80088ec <osThreadNew>
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MX_FREERTOS_Init+0x188>)
 80011c8:	6018      	str	r0, [r3, #0]
    interProcessorMsgQueueHandle = osMessageQueueNew (10, sizeof(struct parsedSecondaryProcessorPacket), NULL);
 80011ca:	2200      	movs	r2, #0
 80011cc:	4621      	mov	r1, r4
 80011ce:	200a      	movs	r0, #10
 80011d0:	f007 fed8 	bl	8008f84 <osMessageQueueNew>
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <MX_FREERTOS_Init+0x18c>)
 80011d6:	6018      	str	r0, [r3, #0]
    inertialSensingQueueHandle = osMessageQueueNew (10, sizeof(struct inertialData), NULL);
 80011d8:	2200      	movs	r2, #0
 80011da:	2138      	movs	r1, #56	; 0x38
 80011dc:	200a      	movs	r0, #10
 80011de:	f007 fed1 	bl	8008f84 <osMessageQueueNew>
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_FREERTOS_Init+0x190>)
 80011e4:	6018      	str	r0, [r3, #0]
    activitySampleQueueHandle = osMessageQueueNew (10, sizeof(struct activityData), NULL);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	200a      	movs	r0, #10
 80011ec:	f007 feca 	bl	8008f84 <osMessageQueueNew>
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_FREERTOS_Init+0x194>)
 80011f2:	6018      	str	r0, [r3, #0]
    rotationSampleQueueHandle = osMessageQueueNew (3, sizeof(struct rotationData), NULL);
 80011f4:	2200      	movs	r2, #0
 80011f6:	4621      	mov	r1, r4
 80011f8:	2003      	movs	r0, #3
 80011fa:	f007 fec3 	bl	8008f84 <osMessageQueueNew>
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_FREERTOS_Init+0x198>)
 8001200:	6018      	str	r0, [r3, #0]
    messageI2C_LockSem = osSemaphoreNew (1, 1, NULL);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	4608      	mov	r0, r1
 8001208:	f007 fdca 	bl	8008da0 <osSemaphoreNew>
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_FREERTOS_Init+0x19c>)
 800120e:	6018      	str	r0, [r3, #0]
   APPE_Init();
 8001210:	f7ff ff34 	bl	800107c <APPE_Init>
}
 8001214:	b02e      	add	sp, #184	; 0xb8
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	0800e4e4 	.word	0x0800e4e4
 800121c:	080010d5 	.word	0x080010d5
 8001220:	20004bb8 	.word	0x20004bb8
 8001224:	0800e484 	.word	0x0800e484
 8001228:	08002989 	.word	0x08002989
 800122c:	20004bc0 	.word	0x20004bc0
 8001230:	0800e49c 	.word	0x0800e49c
 8001234:	08001281 	.word	0x08001281
 8001238:	20004aa4 	.word	0x20004aa4
 800123c:	20004bbc 	.word	0x20004bbc
 8001240:	20004bb4 	.word	0x20004bb4
 8001244:	20004b9c 	.word	0x20004b9c
 8001248:	0800e4a8 	.word	0x0800e4a8
 800124c:	08002c25 	.word	0x08002c25
 8001250:	20004ba0 	.word	0x20004ba0
 8001254:	0800e4bc 	.word	0x0800e4bc
 8001258:	08002549 	.word	0x08002549
 800125c:	20004ab8 	.word	0x20004ab8
 8001260:	0800e4d0 	.word	0x0800e4d0
 8001264:	08002659 	.word	0x08002659
 8001268:	20004acc 	.word	0x20004acc
 800126c:	20004ac8 	.word	0x20004ac8
 8001270:	20004ac4 	.word	0x20004ac4
 8001274:	20004ab4 	.word	0x20004ab4
 8001278:	20004b98 	.word	0x20004b98
 800127c:	20004bac 	.word	0x20004bac

08001280 <BlinkTask>:

#define BLINK_HALF_BUFFER_SIZE	1000
#define BLINK_PACKET_SIZE		100
#define BLINK_ITERATOR_COUNT 	BLINK_HALF_BUFFER_SIZE / BLINK_PACKET_SIZE

void BlinkTask(void){
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	ed2d 8b02 	vpush	{d8}
	uint32_t evt;

	uint32_t payload_ID = 0;
 8001286:	2600      	movs	r6, #0
 8001288:	e052      	b.n	8001330 <BlinkTask+0xb0>

				if( (evt & 0x00000004U) == 0x00000004U){

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
						previousTick_ms = HAL_GetTick();
 800128a:	f002 f841 	bl	8003310 <HAL_GetTick>
 800128e:	ee07 0a90 	vmov	s15, r0
 8001292:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001296:	e02e      	b.n	80012f6 <BlinkTask+0x76>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	4c32      	ldr	r4, [pc, #200]	; (8001364 <BlinkTask+0xe4>)
 800129c:	461a      	mov	r2, r3
 800129e:	4932      	ldr	r1, [pc, #200]	; (8001368 <BlinkTask+0xe8>)
 80012a0:	fb03 1105 	mla	r1, r3, r5, r1
 80012a4:	4620      	mov	r0, r4
 80012a6:	f00c f805 	bl	800d2b4 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80012aa:	ee78 7a28 	vadd.f32	s15, s16, s17
 80012ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b2:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80012b6:	66a6      	str	r6, [r4, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80012b8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
						payload_ID++;
 80012bc:	3601      	adds	r6, #1

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 80012be:	2300      	movs	r3, #0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	4829      	ldr	r0, [pc, #164]	; (800136c <BlinkTask+0xec>)
 80012c6:	6800      	ldr	r0, [r0, #0]
 80012c8:	f007 febc 	bl	8009044 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 80012cc:	3501      	adds	r5, #1
 80012ce:	2d09      	cmp	r5, #9
 80012d0:	d9e2      	bls.n	8001298 <BlinkTask+0x18>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 80012d2:	f017 0f02 	tst.w	r7, #2
 80012d6:	d11c      	bne.n	8001312 <BlinkTask+0x92>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	2100      	movs	r1, #0
 80012de:	2006      	movs	r0, #6
 80012e0:	f007 fbfe 	bl	8008ae0 <osThreadFlagsWait>
 80012e4:	4607      	mov	r7, r0
				if( (evt & 0x00000004U) == 0x00000004U){
 80012e6:	f010 0f04 	tst.w	r0, #4
 80012ea:	d0f2      	beq.n	80012d2 <BlinkTask+0x52>
					if(previousTick_ms == 0){
 80012ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	d0c9      	beq.n	800128a <BlinkTask+0xa>
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80012f6:	f002 f80b 	bl	8003310 <HAL_GetTick>
 80012fa:	ee07 0a90 	vmov	s15, r0
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001306:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800130a:	eec7 8a87 	vdiv.f32	s17, s15, s14
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 800130e:	2500      	movs	r5, #0
 8001310:	e7dd      	b.n	80012ce <BlinkTask+0x4e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <BlinkTask+0xf0>)
 8001314:	f002 fce9 	bl	8003cea <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001318:	4c16      	ldr	r4, [pc, #88]	; (8001374 <BlinkTask+0xf4>)
 800131a:	2104      	movs	r1, #4
 800131c:	4620      	mov	r0, r4
 800131e:	f006 f81f 	bl	8007360 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 8001322:	4620      	mov	r0, r4
 8001324:	f005 fd26 	bl	8006d74 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <BlinkTask+0xec>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f007 ff2e 	bl	800918c <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	2100      	movs	r1, #0
 8001336:	2001      	movs	r0, #1
 8001338:	f007 fbd2 	bl	8008ae0 <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 800133c:	2801      	cmp	r0, #1
 800133e:	d1f7      	bne.n	8001330 <BlinkTask+0xb0>
			HAL_TIM_Base_Start(&htim2);
 8001340:	4c0c      	ldr	r4, [pc, #48]	; (8001374 <BlinkTask+0xf4>)
 8001342:	4620      	mov	r0, r4
 8001344:	f005 fcfe 	bl	8006d44 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001348:	2104      	movs	r1, #4
 800134a:	4620      	mov	r0, r4
 800134c:	f005 ffde 	bl	800730c <HAL_TIM_PWM_Start>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001350:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001354:	4904      	ldr	r1, [pc, #16]	; (8001368 <BlinkTask+0xe8>)
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <BlinkTask+0xf0>)
 8001358:	f002 fc1e 	bl	8003b98 <HAL_ADC_Start_DMA>
 800135c:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8001378 <BlinkTask+0xf8>
 8001360:	e7ba      	b.n	80012d8 <BlinkTask+0x58>
 8001362:	bf00      	nop
 8001364:	200001a4 	.word	0x200001a4
 8001368:	20000210 	.word	0x20000210
 800136c:	20004bb4 	.word	0x20004bb4
 8001370:	200049dc 	.word	0x200049dc
 8001374:	20004f98 	.word	0x20004f98
 8001378:	00000000 	.word	0x00000000

0800137c <HAL_ADC_ErrorCallback>:
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 800137c:	4a02      	ldr	r2, [pc, #8]	; (8001388 <HAL_ADC_ErrorCallback+0xc>)
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	7013      	strb	r3, [r2, #0]
}
 8001386:	4770      	bx	lr
 8001388:	200009e0 	.word	0x200009e0

0800138c <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800138c:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_ADC_ConvCpltCallback+0x14>)
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001392:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001394:	2104      	movs	r1, #4
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	f007 fb1b 	bl	80089d4 <osThreadFlagsSet>

}
 800139e:	bd08      	pop	{r3, pc}
 80013a0:	20004bc8 	.word	0x20004bc8
 80013a4:	200005f8 	.word	0x200005f8
 80013a8:	20004aa4 	.word	0x20004aa4

080013ac <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013ac:	b508      	push	{r3, lr}
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80013b2:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80013b4:	2104      	movs	r1, #4
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	f007 fb0b 	bl	80089d4 <osThreadFlagsSet>

}
 80013be:	bd08      	pop	{r3, pc}
 80013c0:	20004bc8 	.word	0x20004bc8
 80013c4:	20000210 	.word	0x20000210
 80013c8:	20004aa4 	.word	0x20004aa4

080013cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80013cc:	b500      	push	{lr}
 80013ce:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013d6:	f042 0204 	orr.w	r2, r2, #4
 80013da:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013de:	f002 0204 	and.w	r2, r2, #4
 80013e2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80013e4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80013f6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2105      	movs	r1, #5
 80013fc:	200b      	movs	r0, #11
 80013fe:	f002 fcc7 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001402:	200b      	movs	r0, #11
 8001404:	f002 fcf8 	bl	8003df8 <HAL_NVIC_EnableIRQ>

}
 8001408:	b003      	add	sp, #12
 800140a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001410 <IMU_parseCommandReport>:
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <IMU_parseCommandReport+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2bf1      	cmp	r3, #241	; 0xf1
 8001416:	d000      	beq.n	800141a <IMU_parseCommandReport+0xa>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001418:	4770      	bx	lr
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <IMU_parseCommandReport+0x1c>)
 800141c:	789b      	ldrb	r3, [r3, #2]
		if (command == COMMAND_ME_CALIBRATE)
 800141e:	2b07      	cmp	r3, #7
 8001420:	d1fa      	bne.n	8001418 <IMU_parseCommandReport+0x8>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001422:	4b02      	ldr	r3, [pc, #8]	; (800142c <IMU_parseCommandReport+0x1c>)
 8001424:	795a      	ldrb	r2, [r3, #5]
 8001426:	4b02      	ldr	r3, [pc, #8]	; (8001430 <IMU_parseCommandReport+0x20>)
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	e7f5      	b.n	8001418 <IMU_parseCommandReport+0x8>
 800142c:	20004c64 	.word	0x20004c64
 8001430:	20004d17 	.word	0x20004d17
 8001434:	00000000 	.word	0x00000000

08001438 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	ed2d 8b02 	vpush	{d8}
	float qFloat = fixedPointValue;
 800143e:	ee07 0a90 	vmov	s15, r0
 8001442:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	qFloat *= pow(2, qPoint * -1);
 8001446:	4248      	negs	r0, r1
 8001448:	f7fe fff6 	bl	8000438 <__aeabi_i2d>
 800144c:	ec41 0b11 	vmov	d1, r0, r1
 8001450:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001480 <IMU_qToFloat+0x48>
 8001454:	f00b ff42 	bl	800d2dc <pow>
 8001458:	ec55 4b10 	vmov	r4, r5, d0
 800145c:	ee18 0a10 	vmov	r0, s16
 8001460:	f7fe fffc 	bl	800045c <__aeabi_f2d>
 8001464:	4622      	mov	r2, r4
 8001466:	462b      	mov	r3, r5
 8001468:	f7ff f850 	bl	800050c <__aeabi_dmul>
 800146c:	f7ff fafe 	bl	8000a6c <__aeabi_d2f>
	return (qFloat);
}
 8001470:	ee00 0a10 	vmov	s0, r0
 8001474:	ecbd 8b02 	vpop	{d8}
 8001478:	bd38      	pop	{r3, r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40000000 	.word	0x40000000

08001488 <IMU_parseInputReport>:
{
 8001488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800148c:	b083      	sub	sp, #12
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800148e:	4a95      	ldr	r2, [pc, #596]	; (80016e4 <IMU_parseInputReport+0x25c>)
 8001490:	7853      	ldrb	r3, [r2, #1]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21b      	sxth	r3, r3
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	4313      	orrs	r3, r2
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800149a:	f3c3 030e 	ubfx	r3, r3, #0, #15
	dataLength -= 4; //Remove the header bytes from the data count
 800149e:	3b04      	subs	r3, #4
 80014a0:	b219      	sxth	r1, r3
	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 80014a2:	4b91      	ldr	r3, [pc, #580]	; (80016e8 <IMU_parseInputReport+0x260>)
 80014a4:	7918      	ldrb	r0, [r3, #4]
 80014a6:	78da      	ldrb	r2, [r3, #3]
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80014ae:	7898      	ldrb	r0, [r3, #2]
 80014b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80014b4:	7858      	ldrb	r0, [r3, #1]
 80014b6:	4302      	orrs	r2, r0
 80014b8:	488c      	ldr	r0, [pc, #560]	; (80016ec <IMU_parseInputReport+0x264>)
 80014ba:	6002      	str	r2, [r0, #0]
	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 80014bc:	79da      	ldrb	r2, [r3, #7]
 80014be:	f002 0903 	and.w	r9, r2, #3
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 80014c2:	7a98      	ldrb	r0, [r3, #10]
 80014c4:	7a5d      	ldrb	r5, [r3, #9]
 80014c6:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80014ca:	b22d      	sxth	r5, r5
 80014cc:	fa1f f885 	uxth.w	r8, r5
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 80014d0:	7b1e      	ldrb	r6, [r3, #12]
 80014d2:	7adc      	ldrb	r4, [r3, #11]
 80014d4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80014d8:	b224      	sxth	r4, r4
 80014da:	b2a7      	uxth	r7, r4
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 80014dc:	7b9e      	ldrb	r6, [r3, #14]
 80014de:	7b5b      	ldrb	r3, [r3, #13]
 80014e0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80014e4:	fa0f fa83 	sxth.w	sl, r3
 80014e8:	fa1f f68a 	uxth.w	r6, sl
	if (dataLength - 5 > 9)
 80014ec:	1f4b      	subs	r3, r1, #5
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	dd34      	ble.n	800155c <IMU_parseInputReport+0xd4>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 80014f2:	497d      	ldr	r1, [pc, #500]	; (80016e8 <IMU_parseInputReport+0x260>)
 80014f4:	f891 c010 	ldrb.w	ip, [r1, #16]
 80014f8:	7bc9      	ldrb	r1, [r1, #15]
 80014fa:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80014fe:	9101      	str	r1, [sp, #4]
	if (dataLength - 5 > 11)
 8001500:	2b0b      	cmp	r3, #11
 8001502:	dd2e      	ble.n	8001562 <IMU_parseInputReport+0xda>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001504:	4b78      	ldr	r3, [pc, #480]	; (80016e8 <IMU_parseInputReport+0x260>)
 8001506:	7c99      	ldrb	r1, [r3, #18]
 8001508:	7c5b      	ldrb	r3, [r3, #17]
 800150a:	ea43 2b01 	orr.w	fp, r3, r1, lsl #8
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <IMU_parseInputReport+0x260>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d028      	beq.n	8001568 <IMU_parseInputReport+0xe0>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001516:	2b04      	cmp	r3, #4
 8001518:	d033      	beq.n	8001582 <IMU_parseInputReport+0xfa>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 800151a:	2b02      	cmp	r3, #2
 800151c:	d03c      	beq.n	8001598 <IMU_parseInputReport+0x110>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 800151e:	2b03      	cmp	r3, #3
 8001520:	d045      	beq.n	80015ae <IMU_parseInputReport+0x126>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001522:	2b05      	cmp	r3, #5
 8001524:	d04e      	beq.n	80015c4 <IMU_parseInputReport+0x13c>
 8001526:	2b08      	cmp	r3, #8
 8001528:	d04c      	beq.n	80015c4 <IMU_parseInputReport+0x13c>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 800152a:	2b11      	cmp	r3, #17
 800152c:	f000 808a 	beq.w	8001644 <IMU_parseInputReport+0x1bc>
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001530:	2b13      	cmp	r3, #19
 8001532:	f000 808f 	beq.w	8001654 <IMU_parseInputReport+0x1cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001536:	2b1e      	cmp	r3, #30
 8001538:	f000 8096 	beq.w	8001668 <IMU_parseInputReport+0x1e0>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 800153c:	2b14      	cmp	r3, #20
 800153e:	f000 80b9 	beq.w	80016b4 <IMU_parseInputReport+0x22c>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001542:	2b15      	cmp	r3, #21
 8001544:	f000 80be 	beq.w	80016c4 <IMU_parseInputReport+0x23c>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001548:	2b16      	cmp	r3, #22
 800154a:	f000 80c3 	beq.w	80016d4 <IMU_parseInputReport+0x24c>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 800154e:	2bf1      	cmp	r3, #241	; 0xf1
 8001550:	d114      	bne.n	800157c <IMU_parseInputReport+0xf4>
		if (command == COMMAND_ME_CALIBRATE)
 8001552:	2a07      	cmp	r2, #7
 8001554:	d112      	bne.n	800157c <IMU_parseInputReport+0xf4>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001556:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <IMU_parseInputReport+0x268>)
 8001558:	7018      	strb	r0, [r3, #0]
}
 800155a:	e00f      	b.n	800157c <IMU_parseInputReport+0xf4>
	uint16_t data4 = 0;
 800155c:	2100      	movs	r1, #0
 800155e:	9101      	str	r1, [sp, #4]
 8001560:	e7ce      	b.n	8001500 <IMU_parseInputReport+0x78>
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001562:	f04f 0b00 	mov.w	fp, #0
 8001566:	e7d2      	b.n	800150e <IMU_parseInputReport+0x86>
		accelAccuracy = status;
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <IMU_parseInputReport+0x26c>)
 800156a:	f8a3 9000 	strh.w	r9, [r3]
		rawAccelX = data1;
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <IMU_parseInputReport+0x270>)
 8001570:	f8a3 8000 	strh.w	r8, [r3]
		rawAccelY = data2;
 8001574:	4b61      	ldr	r3, [pc, #388]	; (80016fc <IMU_parseInputReport+0x274>)
 8001576:	801f      	strh	r7, [r3, #0]
		rawAccelZ = data3;
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <IMU_parseInputReport+0x278>)
 800157a:	801e      	strh	r6, [r3, #0]
}
 800157c:	b003      	add	sp, #12
 800157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		accelLinAccuracy = status;
 8001582:	4b60      	ldr	r3, [pc, #384]	; (8001704 <IMU_parseInputReport+0x27c>)
 8001584:	f8a3 9000 	strh.w	r9, [r3]
		rawLinAccelX = data1;
 8001588:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <IMU_parseInputReport+0x280>)
 800158a:	f8a3 8000 	strh.w	r8, [r3]
		rawLinAccelY = data2;
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <IMU_parseInputReport+0x284>)
 8001590:	801f      	strh	r7, [r3, #0]
		rawLinAccelZ = data3;
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <IMU_parseInputReport+0x288>)
 8001594:	801e      	strh	r6, [r3, #0]
 8001596:	e7f1      	b.n	800157c <IMU_parseInputReport+0xf4>
		gyroAccuracy = status;
 8001598:	4b5e      	ldr	r3, [pc, #376]	; (8001714 <IMU_parseInputReport+0x28c>)
 800159a:	f8a3 9000 	strh.w	r9, [r3]
		rawGyroX = data1;
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <IMU_parseInputReport+0x290>)
 80015a0:	f8a3 8000 	strh.w	r8, [r3]
		rawGyroY = data2;
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <IMU_parseInputReport+0x294>)
 80015a6:	801f      	strh	r7, [r3, #0]
		rawGyroZ = data3;
 80015a8:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <IMU_parseInputReport+0x298>)
 80015aa:	801e      	strh	r6, [r3, #0]
 80015ac:	e7e6      	b.n	800157c <IMU_parseInputReport+0xf4>
		magAccuracy = status;
 80015ae:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <IMU_parseInputReport+0x29c>)
 80015b0:	f8a3 9000 	strh.w	r9, [r3]
		rawMagX = data1;
 80015b4:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <IMU_parseInputReport+0x2a0>)
 80015b6:	f8a3 8000 	strh.w	r8, [r3]
		rawMagY = data2;
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <IMU_parseInputReport+0x2a4>)
 80015bc:	801f      	strh	r7, [r3, #0]
		rawMagZ = data3;
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <IMU_parseInputReport+0x2a8>)
 80015c0:	801e      	strh	r6, [r3, #0]
 80015c2:	e7db      	b.n	800157c <IMU_parseInputReport+0xf4>
		rotSample.tick_ms = HAL_GetTick();
 80015c4:	f001 fea4 	bl	8003310 <HAL_GetTick>
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <IMU_parseInputReport+0x2ac>)
 80015ca:	6158      	str	r0, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 80015cc:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <IMU_parseInputReport+0x2b0>)
 80015ce:	7811      	ldrb	r1, [r2, #0]
 80015d0:	4628      	mov	r0, r5
 80015d2:	f7ff ff31 	bl	8001438 <IMU_qToFloat>
 80015d6:	4d57      	ldr	r5, [pc, #348]	; (8001734 <IMU_parseInputReport+0x2ac>)
 80015d8:	ed85 0a00 	vstr	s0, [r5]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 80015dc:	4a56      	ldr	r2, [pc, #344]	; (8001738 <IMU_parseInputReport+0x2b0>)
 80015de:	7811      	ldrb	r1, [r2, #0]
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff ff29 	bl	8001438 <IMU_qToFloat>
 80015e6:	462c      	mov	r4, r5
 80015e8:	ed85 0a01 	vstr	s0, [r5, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 80015ec:	4d52      	ldr	r5, [pc, #328]	; (8001738 <IMU_parseInputReport+0x2b0>)
 80015ee:	7829      	ldrb	r1, [r5, #0]
 80015f0:	4650      	mov	r0, sl
 80015f2:	f7ff ff21 	bl	8001438 <IMU_qToFloat>
 80015f6:	ed84 0a02 	vstr	s0, [r4, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 80015fa:	7829      	ldrb	r1, [r5, #0]
 80015fc:	9d01      	ldr	r5, [sp, #4]
 80015fe:	b228      	sxth	r0, r5
 8001600:	f7ff ff1a 	bl	8001438 <IMU_qToFloat>
 8001604:	ed84 0a03 	vstr	s0, [r4, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001608:	210c      	movs	r1, #12
 800160a:	fa0f f08b 	sxth.w	r0, fp
 800160e:	f7ff ff13 	bl	8001438 <IMU_qToFloat>
 8001612:	ed84 0a04 	vstr	s0, [r4, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001616:	2300      	movs	r3, #0
 8001618:	461a      	mov	r2, r3
 800161a:	4621      	mov	r1, r4
 800161c:	4847      	ldr	r0, [pc, #284]	; (800173c <IMU_parseInputReport+0x2b4>)
 800161e:	6800      	ldr	r0, [r0, #0]
 8001620:	f007 fd10 	bl	8009044 <osMessageQueuePut>
		quatAccuracy = status;
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <IMU_parseInputReport+0x2b8>)
 8001626:	f8a3 9000 	strh.w	r9, [r3]
		rawQuatI = data1;
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <IMU_parseInputReport+0x2bc>)
 800162c:	f8a3 8000 	strh.w	r8, [r3]
		rawQuatJ = data2;
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <IMU_parseInputReport+0x2c0>)
 8001632:	801f      	strh	r7, [r3, #0]
		rawQuatK = data3;
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <IMU_parseInputReport+0x2c4>)
 8001636:	801e      	strh	r6, [r3, #0]
		rawQuatReal = data4;
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <IMU_parseInputReport+0x2c8>)
 800163a:	801d      	strh	r5, [r3, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800163c:	4b45      	ldr	r3, [pc, #276]	; (8001754 <IMU_parseInputReport+0x2cc>)
 800163e:	f8a3 b000 	strh.w	fp, [r3]
 8001642:	e79b      	b.n	800157c <IMU_parseInputReport+0xf4>
		stepSample.tick_ms = HAL_GetTick();
 8001644:	f001 fe64 	bl	8003310 <HAL_GetTick>
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <IMU_parseInputReport+0x2d0>)
 800164a:	6058      	str	r0, [r3, #4]
		stepSample.stepCount = data3;
 800164c:	801e      	strh	r6, [r3, #0]
		stepCount = data3; //Bytes 8/9
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <IMU_parseInputReport+0x2d4>)
 8001650:	801e      	strh	r6, [r3, #0]
 8001652:	e793      	b.n	800157c <IMU_parseInputReport+0xf4>
		stabilitySample.tick_ms = HAL_GetTick();
 8001654:	f001 fe5c 	bl	8003310 <HAL_GetTick>
 8001658:	4a41      	ldr	r2, [pc, #260]	; (8001760 <IMU_parseInputReport+0x2d8>)
 800165a:	6050      	str	r0, [r2, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <IMU_parseInputReport+0x260>)
 800165e:	7a5b      	ldrb	r3, [r3, #9]
 8001660:	7013      	strb	r3, [r2, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001662:	4a40      	ldr	r2, [pc, #256]	; (8001764 <IMU_parseInputReport+0x2dc>)
 8001664:	7013      	strb	r3, [r2, #0]
 8001666:	e789      	b.n	800157c <IMU_parseInputReport+0xf4>
		activitySample.tick_ms = HAL_GetTick();
 8001668:	f001 fe52 	bl	8003310 <HAL_GetTick>
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <IMU_parseInputReport+0x2e0>)
 800166e:	60d8      	str	r0, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001670:	2300      	movs	r3, #0
 8001672:	2b08      	cmp	r3, #8
 8001674:	d809      	bhi.n	800168a <IMU_parseInputReport+0x202>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001676:	f103 010b 	add.w	r1, r3, #11
 800167a:	4a3c      	ldr	r2, [pc, #240]	; (800176c <IMU_parseInputReport+0x2e4>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	481a      	ldr	r0, [pc, #104]	; (80016e8 <IMU_parseInputReport+0x260>)
 8001680:	5c41      	ldrb	r1, [r0, r1]
 8001682:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001684:	3301      	adds	r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	e7f3      	b.n	8001672 <IMU_parseInputReport+0x1ea>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <IMU_parseInputReport+0x260>)
 800168c:	7a9a      	ldrb	r2, [r3, #10]
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <IMU_parseInputReport+0x2e8>)
 8001690:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001692:	4c35      	ldr	r4, [pc, #212]	; (8001768 <IMU_parseInputReport+0x2e0>)
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <IMU_parseInputReport+0x2e4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4623      	mov	r3, r4
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	6851      	ldr	r1, [r2, #4]
 800169e:	c303      	stmia	r3!, {r0, r1}
 80016a0:	7a12      	ldrb	r2, [r2, #8]
 80016a2:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 80016a4:	2300      	movs	r3, #0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	4832      	ldr	r0, [pc, #200]	; (8001774 <IMU_parseInputReport+0x2ec>)
 80016ac:	6800      	ldr	r0, [r0, #0]
 80016ae:	f007 fcc9 	bl	8009044 <osMessageQueuePut>
 80016b2:	e763      	b.n	800157c <IMU_parseInputReport+0xf4>
		memsRawAccelX = data1;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <IMU_parseInputReport+0x2f0>)
 80016b6:	f8a3 8000 	strh.w	r8, [r3]
		memsRawAccelY = data2;
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <IMU_parseInputReport+0x2f4>)
 80016bc:	801f      	strh	r7, [r3, #0]
		memsRawAccelZ = data3;
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <IMU_parseInputReport+0x2f8>)
 80016c0:	801e      	strh	r6, [r3, #0]
 80016c2:	e75b      	b.n	800157c <IMU_parseInputReport+0xf4>
		memsRawGyroX = data1;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <IMU_parseInputReport+0x2fc>)
 80016c6:	f8a3 8000 	strh.w	r8, [r3]
		memsRawGyroY = data2;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <IMU_parseInputReport+0x300>)
 80016cc:	801f      	strh	r7, [r3, #0]
		memsRawGyroZ = data3;
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <IMU_parseInputReport+0x304>)
 80016d0:	801e      	strh	r6, [r3, #0]
 80016d2:	e753      	b.n	800157c <IMU_parseInputReport+0xf4>
		memsRawMagX = data1;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <IMU_parseInputReport+0x308>)
 80016d6:	f8a3 8000 	strh.w	r8, [r3]
		memsRawMagY = data2;
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <IMU_parseInputReport+0x30c>)
 80016dc:	801f      	strh	r7, [r3, #0]
		memsRawMagZ = data3;
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <IMU_parseInputReport+0x310>)
 80016e0:	801e      	strh	r6, [r3, #0]
 80016e2:	e74b      	b.n	800157c <IMU_parseInputReport+0xf4>
 80016e4:	20004bd0 	.word	0x20004bd0
 80016e8:	20004c64 	.word	0x20004c64
 80016ec:	20004bec 	.word	0x20004bec
 80016f0:	20004d17 	.word	0x20004d17
 80016f4:	20004d2c 	.word	0x20004d2c
 80016f8:	20004d14 	.word	0x20004d14
 80016fc:	20004d30 	.word	0x20004d30
 8001700:	20004c2a 	.word	0x20004c2a
 8001704:	20004c26 	.word	0x20004c26
 8001708:	20004c1c 	.word	0x20004c1c
 800170c:	20004d18 	.word	0x20004d18
 8001710:	20004c56 	.word	0x20004c56
 8001714:	20004c58 	.word	0x20004c58
 8001718:	20004c5a 	.word	0x20004c5a
 800171c:	20004c20 	.word	0x20004c20
 8001720:	20004c1e 	.word	0x20004c1e
 8001724:	20004bd4 	.word	0x20004bd4
 8001728:	20004c22 	.word	0x20004c22
 800172c:	20004d1a 	.word	0x20004d1a
 8001730:	20004c28 	.word	0x20004c28
 8001734:	20004c3c 	.word	0x20004c3c
 8001738:	20000006 	.word	0x20000006
 800173c:	20004b98 	.word	0x20004b98
 8001740:	20004bf2 	.word	0x20004bf2
 8001744:	20004d2e 	.word	0x20004d2e
 8001748:	20004c54 	.word	0x20004c54
 800174c:	20004bcc 	.word	0x20004bcc
 8001750:	20004be8 	.word	0x20004be8
 8001754:	20004c2c 	.word	0x20004c2c
 8001758:	20004bd8 	.word	0x20004bd8
 800175c:	20004d32 	.word	0x20004d32
 8001760:	20004be0 	.word	0x20004be0
 8001764:	20004c5e 	.word	0x20004c5e
 8001768:	20004d1c 	.word	0x20004d1c
 800176c:	20004c38 	.word	0x20004c38
 8001770:	20004d16 	.word	0x20004d16
 8001774:	20004ab4 	.word	0x20004ab4
 8001778:	20004c5c 	.word	0x20004c5c
 800177c:	20004c34 	.word	0x20004c34
 8001780:	20004ce6 	.word	0x20004ce6
 8001784:	20004bd6 	.word	0x20004bd6
 8001788:	20004c60 	.word	0x20004c60
 800178c:	20004c2e 	.word	0x20004c2e
 8001790:	20004c32 	.word	0x20004c32
 8001794:	20004c30 	.word	0x20004c30
 8001798:	20004bf4 	.word	0x20004bf4

0800179c <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	4607      	mov	r7, r0
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80017a2:	2500      	movs	r5, #0
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80017a4:	e01a      	b.n	80017dc <IMU_getData+0x40>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80017a6:	241c      	movs	r4, #28

		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 80017a8:	4e14      	ldr	r6, [pc, #80]	; (80017fc <IMU_getData+0x60>)
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	6830      	ldr	r0, [r6, #0]
 80017b0:	f007 fb66 	bl	8008e80 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80017b4:	1d23      	adds	r3, r4, #4
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <IMU_getData+0x64>)
 80017b8:	7811      	ldrb	r1, [r2, #0]
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	9200      	str	r2, [sp, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4a10      	ldr	r2, [pc, #64]	; (8001804 <IMU_getData+0x68>)
 80017c2:	4811      	ldr	r0, [pc, #68]	; (8001808 <IMU_getData+0x6c>)
 80017c4:	f003 f954 	bl	8004a70 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockSem);
 80017c8:	6830      	ldr	r0, [r6, #0]
 80017ca:	f007 fb9d 	bl	8008f08 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80017ce:	1963      	adds	r3, r4, r5
 80017d0:	2b7f      	cmp	r3, #127	; 0x7f
 80017d2:	dd08      	ble.n	80017e6 <IMU_getData+0x4a>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 80017d4:	4425      	add	r5, r4
 80017d6:	b2ad      	uxth	r5, r5

		bytesRemaining -= numberOfBytesToRead;
 80017d8:	1b3c      	subs	r4, r7, r4
 80017da:	b2a7      	uxth	r7, r4
	while (bytesRemaining > 0)
 80017dc:	b157      	cbz	r7, 80017f4 <IMU_getData+0x58>
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80017de:	2f1c      	cmp	r7, #28
 80017e0:	d8e1      	bhi.n	80017a6 <IMU_getData+0xa>
		uint16_t numberOfBytesToRead = bytesRemaining;
 80017e2:	463c      	mov	r4, r7
 80017e4:	e7e0      	b.n	80017a8 <IMU_getData+0xc>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 80017e6:	4622      	mov	r2, r4
 80017e8:	4908      	ldr	r1, [pc, #32]	; (800180c <IMU_getData+0x70>)
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <IMU_getData+0x74>)
 80017ec:	4428      	add	r0, r5
 80017ee:	f00b fd61 	bl	800d2b4 <memcpy>
 80017f2:	e7ef      	b.n	80017d4 <IMU_getData+0x38>
	}
	return (true); //Done!
}
 80017f4:	2001      	movs	r0, #1
 80017f6:	b003      	add	sp, #12
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20004bac 	.word	0x20004bac
 8001800:	20000004 	.word	0x20000004
 8001804:	200009e4 	.word	0x200009e4
 8001808:	20004d3c 	.word	0x20004d3c
 800180c:	200009e8 	.word	0x200009e8
 8001810:	20004c64 	.word	0x20004c64

08001814 <IMU_receivePacket>:
{
 8001814:	b530      	push	{r4, r5, lr}
 8001816:	b083      	sub	sp, #12
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <IMU_receivePacket+0x60>)
 800181a:	7819      	ldrb	r1, [r3, #0]
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <IMU_receivePacket+0x64>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	f002 fde4 	bl	80043ec <HAL_GPIO_ReadPin>
 8001824:	2801      	cmp	r0, #1
 8001826:	d022      	beq.n	800186e <IMU_receivePacket+0x5a>
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8001828:	4d14      	ldr	r5, [pc, #80]	; (800187c <IMU_receivePacket+0x68>)
 800182a:	f04f 31ff 	mov.w	r1, #4294967295
 800182e:	6828      	ldr	r0, [r5, #0]
 8001830:	f007 fb26 	bl	8008e80 <osSemaphoreAcquire>
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8001834:	4c12      	ldr	r4, [pc, #72]	; (8001880 <IMU_receivePacket+0x6c>)
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <IMU_receivePacket+0x70>)
 8001838:	7819      	ldrb	r1, [r3, #0]
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2304      	movs	r3, #4
 8001840:	4622      	mov	r2, r4
 8001842:	4811      	ldr	r0, [pc, #68]	; (8001888 <IMU_receivePacket+0x74>)
 8001844:	f003 f914 	bl	8004a70 <HAL_I2C_Master_Receive>
	osSemaphoreRelease(messageI2C_LockSem);
 8001848:	6828      	ldr	r0, [r5, #0]
 800184a:	f007 fb5d 	bl	8008f08 <osSemaphoreRelease>
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800184e:	7860      	ldrb	r0, [r4, #1]
 8001850:	0200      	lsls	r0, r0, #8
 8001852:	b200      	sxth	r0, r0
 8001854:	7823      	ldrb	r3, [r4, #0]
 8001856:	4318      	orrs	r0, r3
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8001858:	f3c0 000e 	ubfx	r0, r0, #0, #15
	if (dataLength == 0)
 800185c:	b908      	cbnz	r0, 8001862 <IMU_receivePacket+0x4e>
		return (false); //All done
 800185e:	2000      	movs	r0, #0
 8001860:	e006      	b.n	8001870 <IMU_receivePacket+0x5c>
	dataLength -= 4; //Remove the header bytes from the data count
 8001862:	3804      	subs	r0, #4
	IMU_getData(dataLength);
 8001864:	b280      	uxth	r0, r0
 8001866:	f7ff ff99 	bl	800179c <IMU_getData>
	return (true); //We're done!
 800186a:	2001      	movs	r0, #1
 800186c:	e000      	b.n	8001870 <IMU_receivePacket+0x5c>
		return (false);
 800186e:	2000      	movs	r0, #0
}
 8001870:	b003      	add	sp, #12
 8001872:	bd30      	pop	{r4, r5, pc}
 8001874:	20004c24 	.word	0x20004c24
 8001878:	20004cec 	.word	0x20004cec
 800187c:	20004bac 	.word	0x20004bac
 8001880:	20004bd0 	.word	0x20004bd0
 8001884:	20000004 	.word	0x20000004
 8001888:	20004d3c 	.word	0x20004d3c

0800188c <IMU_dataAvailable>:
{
 800188c:	b510      	push	{r4, lr}
	if (_int != 255)
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <IMU_dataAvailable+0x48>)
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	29ff      	cmp	r1, #255	; 0xff
 8001894:	d005      	beq.n	80018a2 <IMU_dataAvailable+0x16>
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <IMU_dataAvailable+0x4c>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f002 fda7 	bl	80043ec <HAL_GPIO_ReadPin>
 800189e:	2801      	cmp	r0, #1
 80018a0:	d016      	beq.n	80018d0 <IMU_dataAvailable+0x44>
	if (IMU_receivePacket() == true)
 80018a2:	f7ff ffb7 	bl	8001814 <IMU_receivePacket>
 80018a6:	4604      	mov	r4, r0
 80018a8:	b130      	cbz	r0, 80018b8 <IMU_dataAvailable+0x2c>
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <IMU_dataAvailable+0x50>)
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d004      	beq.n	80018bc <IMU_dataAvailable+0x30>
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d009      	beq.n	80018ca <IMU_dataAvailable+0x3e>
	return (false);
 80018b6:	2400      	movs	r4, #0
}
 80018b8:	4620      	mov	r0, r4
 80018ba:	bd10      	pop	{r4, pc}
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <IMU_dataAvailable+0x54>)
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	2afb      	cmp	r2, #251	; 0xfb
 80018c2:	d1f6      	bne.n	80018b2 <IMU_dataAvailable+0x26>
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80018c4:	f7ff fde0 	bl	8001488 <IMU_parseInputReport>
			return (true);
 80018c8:	e7f6      	b.n	80018b8 <IMU_dataAvailable+0x2c>
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80018ca:	f7ff fda1 	bl	8001410 <IMU_parseCommandReport>
			return (true);
 80018ce:	e7f3      	b.n	80018b8 <IMU_dataAvailable+0x2c>
			return (false);
 80018d0:	2400      	movs	r4, #0
 80018d2:	e7f1      	b.n	80018b8 <IMU_dataAvailable+0x2c>
 80018d4:	20004c24 	.word	0x20004c24
 80018d8:	20004cec 	.word	0x20004cec
 80018dc:	20004bd0 	.word	0x20004bd0
 80018e0:	20004c64 	.word	0x20004c64

080018e4 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	460a      	mov	r2, r1
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80018ea:	1d0d      	adds	r5, r1, #4
 80018ec:	b2ed      	uxtb	r5, r5

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 80018ee:	4c11      	ldr	r4, [pc, #68]	; (8001934 <IMU_sendPacket+0x50>)
 80018f0:	7025      	strb	r5, [r4, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 80018f2:	122b      	asrs	r3, r5, #8
 80018f4:	7063      	strb	r3, [r4, #1]
	outPacket[2] = channelNumber; 						//Channel number
 80018f6:	70a0      	strb	r0, [r4, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 80018f8:	490f      	ldr	r1, [pc, #60]	; (8001938 <IMU_sendPacket+0x54>)
 80018fa:	5c0b      	ldrb	r3, [r1, r0]
 80018fc:	1c5e      	adds	r6, r3, #1
 80018fe:	540e      	strb	r6, [r1, r0]
 8001900:	70e3      	strb	r3, [r4, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <IMU_sendPacket+0x58>)
 8001904:	1d20      	adds	r0, r4, #4
 8001906:	f00b fcd5 	bl	800d2b4 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 800190a:	4e0d      	ldr	r6, [pc, #52]	; (8001940 <IMU_sendPacket+0x5c>)
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6830      	ldr	r0, [r6, #0]
 8001912:	f007 fab5 	bl	8008e80 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <IMU_sendPacket+0x60>)
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	462b      	mov	r3, r5
 8001920:	4622      	mov	r2, r4
 8001922:	4809      	ldr	r0, [pc, #36]	; (8001948 <IMU_sendPacket+0x64>)
 8001924:	f002 ffe6 	bl	80048f4 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockSem);
 8001928:	6830      	ldr	r0, [r6, #0]
 800192a:	f007 faed 	bl	8008f08 <osSemaphoreRelease>

	return (true);
}
 800192e:	2001      	movs	r0, #1
 8001930:	b002      	add	sp, #8
 8001932:	bd70      	pop	{r4, r5, r6, pc}
 8001934:	20004cf0 	.word	0x20004cf0
 8001938:	20000a04 	.word	0x20000a04
 800193c:	20004c64 	.word	0x20004c64
 8001940:	20004bac 	.word	0x20004bac
 8001944:	20000004 	.word	0x20000004
 8001948:	20004d3c 	.word	0x20004d3c

0800194c <IMU_softReset>:
{
 800194c:	b508      	push	{r3, lr}
	shtpData[0] = 1; //Reset
 800194e:	2001      	movs	r0, #1
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <IMU_softReset+0x2c>)
 8001952:	7018      	strb	r0, [r3, #0]
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001954:	4601      	mov	r1, r0
 8001956:	f7ff ffc5 	bl	80018e4 <IMU_sendPacket>
	HAL_Delay(200);
 800195a:	20c8      	movs	r0, #200	; 0xc8
 800195c:	f001 fce4 	bl	8003328 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001960:	f7ff ff58 	bl	8001814 <IMU_receivePacket>
 8001964:	2800      	cmp	r0, #0
 8001966:	d1fb      	bne.n	8001960 <IMU_softReset+0x14>
	HAL_Delay(200);
 8001968:	20c8      	movs	r0, #200	; 0xc8
 800196a:	f001 fcdd 	bl	8003328 <HAL_Delay>
	while (IMU_receivePacket() == true)
 800196e:	f7ff ff51 	bl	8001814 <IMU_receivePacket>
 8001972:	2800      	cmp	r0, #0
 8001974:	d1fb      	bne.n	800196e <IMU_softReset+0x22>
}
 8001976:	bd08      	pop	{r3, pc}
 8001978:	20004c64 	.word	0x20004c64

0800197c <IMU_begin>:
{
 800197c:	b508      	push	{r3, lr}
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 800197e:	0040      	lsls	r0, r0, #1
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <IMU_begin+0x40>)
 8001982:	7018      	strb	r0, [r3, #0]
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <IMU_begin+0x44>)
 8001986:	7019      	strb	r1, [r3, #0]
	_intPort = intPort;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <IMU_begin+0x48>)
 800198a:	601a      	str	r2, [r3, #0]
	IMU_softReset();
 800198c:	f7ff ffde 	bl	800194c <IMU_softReset>
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <IMU_begin+0x4c>)
 8001992:	22f9      	movs	r2, #249	; 0xf9
 8001994:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001996:	2200      	movs	r2, #0
 8001998:	705a      	strb	r2, [r3, #1]
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 800199a:	2102      	movs	r1, #2
 800199c:	4608      	mov	r0, r1
 800199e:	f7ff ffa1 	bl	80018e4 <IMU_sendPacket>
	if (IMU_receivePacket() == true)
 80019a2:	f7ff ff37 	bl	8001814 <IMU_receivePacket>
 80019a6:	b130      	cbz	r0, 80019b6 <IMU_begin+0x3a>
 80019a8:	4603      	mov	r3, r0
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <IMU_begin+0x4c>)
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	2af8      	cmp	r2, #248	; 0xf8
 80019b0:	d002      	beq.n	80019b8 <IMU_begin+0x3c>
	return (false); //Something went wrong
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <IMU_begin+0x3c>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd08      	pop	{r3, pc}
 80019bc:	20000004 	.word	0x20000004
 80019c0:	20004c24 	.word	0x20004c24
 80019c4:	20004cec 	.word	0x20004cec
 80019c8:	20004c64 	.word	0x20004c64

080019cc <IMU_setFeatureCommand_3>:
{
 80019cc:	b510      	push	{r4, lr}
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fb03 f101 	mul.w	r1, r3, r1
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <IMU_setFeatureCommand_3+0x48>)
 80019d8:	24fd      	movs	r4, #253	; 0xfd
 80019da:	701c      	strb	r4, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80019dc:	7058      	strb	r0, [r3, #1]
	shtpData[2] = 0;								   //Feature flags
 80019de:	2000      	movs	r0, #0
 80019e0:	7098      	strb	r0, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 80019e2:	70d8      	strb	r0, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80019e4:	7118      	strb	r0, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80019e6:	7159      	strb	r1, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80019e8:	120c      	asrs	r4, r1, #8
 80019ea:	719c      	strb	r4, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80019ec:	140c      	asrs	r4, r1, #16
 80019ee:	71dc      	strb	r4, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80019f0:	0e09      	lsrs	r1, r1, #24
 80019f2:	7219      	strb	r1, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80019f4:	7258      	strb	r0, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80019f6:	7298      	strb	r0, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80019f8:	72d8      	strb	r0, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80019fa:	7318      	strb	r0, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80019fc:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80019fe:	0a11      	lsrs	r1, r2, #8
 8001a00:	7399      	strb	r1, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8001a02:	0c11      	lsrs	r1, r2, #16
 8001a04:	73d9      	strb	r1, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001a06:	0e12      	lsrs	r2, r2, #24
 8001a08:	741a      	strb	r2, [r3, #16]
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8001a0a:	2111      	movs	r1, #17
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f7ff ff69 	bl	80018e4 <IMU_sendPacket>
}
 8001a12:	bd10      	pop	{r4, pc}
 8001a14:	20004c64 	.word	0x20004c64

08001a18 <IMU_enableActivityClassifier>:
{
 8001a18:	b508      	push	{r3, lr}
	_activityConfidences = activityConfidences; //Store pointer to array
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <IMU_enableActivityClassifier+0x14>)
 8001a1c:	601a      	str	r2, [r3, #0]
	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001a1e:	460a      	mov	r2, r1
 8001a20:	4601      	mov	r1, r0
 8001a22:	201e      	movs	r0, #30
 8001a24:	f7ff ffd2 	bl	80019cc <IMU_setFeatureCommand_3>
}
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20004c38 	.word	0x20004c38

08001a30 <IMU_setFeatureCommand_2>:
{
 8001a30:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8001a32:	2200      	movs	r2, #0
 8001a34:	f7ff ffca 	bl	80019cc <IMU_setFeatureCommand_3>
}
 8001a38:	bd08      	pop	{r3, pc}

08001a3a <IMU_enableRotationVector>:
{
 8001a3a:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	2005      	movs	r0, #5
 8001a40:	f7ff fff6 	bl	8001a30 <IMU_setFeatureCommand_2>
}
 8001a44:	bd08      	pop	{r3, pc}

08001a46 <LpTimerCb>:
  /**
   * Nothing to be done
   */

  return;
}
 8001a46:	4770      	bx	lr

08001a48 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8001a48:	b510      	push	{r4, lr}
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8001a4a:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d90f      	bls.n	8001a72 <LpTimerStart+0x2a>
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
  }
  else if(time_to_sleep <= 0x418937)
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <LpTimerStart+0x68>)
 8001a54:	4298      	cmp	r0, r3
 8001a56:	d91c      	bls.n	8001a92 <LpTimerStart+0x4a>
      time_to_sleep = (~0); /* Max value */
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001a58:	0981      	lsrs	r1, r0, #6
 8001a5a:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <LpTimerStart+0x6c>)
 8001a5c:	fba0 3101 	umull	r3, r1, r0, r1
 8001a60:	0949      	lsrs	r1, r1, #5
    if(time_to_sleep <= 0x10C6)
 8001a62:	f241 03c6 	movw	r3, #4294	; 0x10c6
 8001a66:	4299      	cmp	r1, r3
 8001a68:	d81f      	bhi.n	8001aaa <LpTimerStart+0x62>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <LpTimerStart+0x70>)
 8001a6c:	fb03 f101 	mul.w	r1, r3, r1
 8001a70:	e007      	b.n	8001a82 <LpTimerStart+0x3a>
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 8001a72:	4911      	ldr	r1, [pc, #68]	; (8001ab8 <LpTimerStart+0x70>)
 8001a74:	fb01 f100 	mul.w	r1, r1, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001a78:	0989      	lsrs	r1, r1, #6
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <LpTimerStart+0x6c>)
 8001a7c:	fba0 3101 	umull	r3, r1, r0, r1
 8001a80:	0949      	lsrs	r1, r1, #5
    {
      time_to_sleep = (~0); /* Max value */
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 8001a82:	4c0e      	ldr	r4, [pc, #56]	; (8001abc <LpTimerStart+0x74>)
 8001a84:	7920      	ldrb	r0, [r4, #4]
 8001a86:	f000 fc5d 	bl	8002344 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8001a8a:	f000 fca9 	bl	80023e0 <HW_TS_RTC_ReadLeftTicksToCount>
 8001a8e:	6020      	str	r0, [r4, #0]

  return;
}
 8001a90:	bd10      	pop	{r4, pc}
    time_to_sleep = (time_to_sleep * 1000);
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fb03 f100 	mul.w	r1, r3, r0
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8001a9a:	0989      	lsrs	r1, r1, #6
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <LpTimerStart+0x6c>)
 8001a9e:	fba0 2101 	umull	r2, r1, r0, r1
 8001aa2:	0949      	lsrs	r1, r1, #5
      time_to_sleep = (time_to_sleep * 1000);
 8001aa4:	fb03 f101 	mul.w	r1, r3, r1
 8001aa8:	e7eb      	b.n	8001a82 <LpTimerStart+0x3a>
      time_to_sleep = (~0); /* Max value */
 8001aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001aae:	e7e8      	b.n	8001a82 <LpTimerStart+0x3a>
 8001ab0:	00418937 	.word	0x00418937
 8001ab4:	0113094d 	.word	0x0113094d
 8001ab8:	000f4240 	.word	0x000f4240
 8001abc:	20000a0c 	.word	0x20000a0c

08001ac0 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8001ac2:	4d09      	ldr	r5, [pc, #36]	; (8001ae8 <LpGetElapsedTime+0x28>)
 8001ac4:	682c      	ldr	r4, [r5, #0]
 8001ac6:	f000 fc8b 	bl	80023e0 <HW_TS_RTC_ReadLeftTicksToCount>
 8001aca:	1a20      	subs	r0, r4, r0
  return_value = return_value / (1000 * 1000);
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <LpGetElapsedTime+0x2c>)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LpGetElapsedTime+0x30>)
 8001ad2:	fba0 0101 	umull	r0, r1, r0, r1
 8001ad6:	f7ff f819 	bl	8000b0c <__aeabi_uldivmod>
 8001ada:	4604      	mov	r4, r0
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8001adc:	7928      	ldrb	r0, [r5, #4]
 8001ade:	f000 fbcd 	bl	800227c <HW_TS_Stop>

  return (uint32_t)return_value;
}
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000a0c 	.word	0x20000a0c
 8001aec:	000f4240 	.word	0x000f4240
 8001af0:	00077240 	.word	0x00077240

08001af4 <LpTimerInit>:
{
 8001af4:	b508      	push	{r3, lr}
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <LpTimerInit+0x10>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	4903      	ldr	r1, [pc, #12]	; (8001b08 <LpTimerInit+0x14>)
 8001afc:	4610      	mov	r0, r2
 8001afe:	f000 fb8b 	bl	8002218 <HW_TS_Create>
}
 8001b02:	bd08      	pop	{r3, pc}
 8001b04:	08001a47 	.word	0x08001a47
 8001b08:	20000a10 	.word	0x20000a10

08001b0c <vPortSuppressTicksAndSleep>:
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	4604      	mov	r4, r0
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <vPortSuppressTicksAndSleep+0x68>)
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1a:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b20:	f3bf 8f6f 	isb	sy
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8001b24:	f009 f936 	bl	800ad94 <eTaskConfirmSleepModeStatus>
 8001b28:	b1a0      	cbz	r0, 8001b54 <vPortSuppressTicksAndSleep+0x48>
    if (xExpectedIdleTime != (~0))
 8001b2a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001b2e:	d118      	bne.n	8001b62 <vPortSuppressTicksAndSleep+0x56>
    if (xExpectedIdleTime != (~0))
 8001b30:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001b34:	d119      	bne.n	8001b6a <vPortSuppressTicksAndSleep+0x5e>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <vPortSuppressTicksAndSleep+0x6c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <vPortSuppressTicksAndSleep+0x68>)
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <vPortSuppressTicksAndSleep+0x70>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	3204      	adds	r2, #4
 8001b4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b50:	b662      	cpsie	i
}
 8001b52:	bd10      	pop	{r4, pc}
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <vPortSuppressTicksAndSleep+0x68>)
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	b662      	cpsie	i
 8001b60:	e7f7      	b.n	8001b52 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ff70 	bl	8001a48 <LpTimerStart>
 8001b68:	e7e2      	b.n	8001b30 <vPortSuppressTicksAndSleep+0x24>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8001b6a:	f7ff ffa9 	bl	8001ac0 <LpGetElapsedTime>
      vTaskStepTick( ulCompleteTickPeriods );
 8001b6e:	f008 fe79 	bl	800a864 <vTaskStepTick>
 8001b72:	e7e0      	b.n	8001b36 <vPortSuppressTicksAndSleep+0x2a>
 8001b74:	e000e010 	.word	0xe000e010
 8001b78:	e000e018 	.word	0xe000e018
 8001b7c:	20000a14 	.word	0x20000a14

08001b80 <vPortSetupTimerInterrupt>:
{
 8001b80:	b510      	push	{r4, lr}
  LpTimerInit( );
 8001b82:	f7ff ffb7 	bl	8001af4 <LpTimerInit>
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <vPortSetupTimerInterrupt+0x34>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <vPortSetupTimerInterrupt+0x38>)
 8001b8c:	fba1 0202 	umull	r0, r2, r1, r2
 8001b90:	0992      	lsrs	r2, r2, #6
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <vPortSetupTimerInterrupt+0x3c>)
 8001b94:	6002      	str	r2, [r0, #0]
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <vPortSetupTimerInterrupt+0x40>)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	6010      	str	r0, [r2, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b9c:	4c09      	ldr	r4, [pc, #36]	; (8001bc4 <vPortSetupTimerInterrupt+0x44>)
 8001b9e:	6020      	str	r0, [r4, #0]
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <vPortSetupTimerInterrupt+0x48>)
 8001bac:	600b      	str	r3, [r1, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bae:	2307      	movs	r3, #7
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bd10      	pop	{r4, pc}
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	10624dd3 	.word	0x10624dd3
 8001bbc:	20000a14 	.word	0x20000a14
 8001bc0:	e000e010 	.word	0xe000e010
 8001bc4:	e000e018 	.word	0xe000e018
 8001bc8:	e000e014 	.word	0xe000e014

08001bcc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	9407      	str	r4, [sp, #28]
 8001bd4:	9408      	str	r4, [sp, #32]
 8001bd6:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bde:	f042 0204 	orr.w	r2, r2, #4
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be6:	f002 0204 	and.w	r2, r2, #4
 8001bea:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001bec:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001bfc:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001bfe:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c02:	f042 0202 	orr.w	r2, r2, #2
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c0a:	f002 0202 	and.w	r2, r2, #2
 8001c0e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c10:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c1c:	f002 0201 	and.w	r2, r2, #1
 8001c20:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001c22:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001c34:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c36:	2608      	movs	r6, #8
 8001c38:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2503      	movs	r5, #3
 8001c3c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c3e:	a905      	add	r1, sp, #20
 8001c40:	4822      	ldr	r0, [pc, #136]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c42:	f002 fb13 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8001c46:	f240 3333 	movw	r3, #819	; 0x333
 8001c4a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	4f1f      	ldr	r7, [pc, #124]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001c52:	a905      	add	r1, sp, #20
 8001c54:	4638      	mov	r0, r7
 8001c56:	f002 fb09 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 
                           PA6 PA7 PA8 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001c5a:	f649 13de 	movw	r3, #39390	; 0x99de
 8001c5e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	a905      	add	r1, sp, #20
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f002 faff 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_GPIO_Init+0x108>)
 8001c74:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	a905      	add	r1, sp, #20
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f002 faf4 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8001c84:	2304      	movs	r3, #4
 8001c86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_GPIO_Init+0x10c>)
 8001c8a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	a905      	add	r1, sp, #20
 8001c90:	4638      	mov	r0, r7
 8001c92:	f002 faeb 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c96:	2310      	movs	r3, #16
 8001c98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9e:	a905      	add	r1, sp, #20
 8001ca0:	480e      	ldr	r0, [pc, #56]	; (8001cdc <MX_GPIO_Init+0x110>)
 8001ca2:	f002 fae3 	bl	800426c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4630      	mov	r0, r6
 8001cac:	f002 f870 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f002 f8a1 	bl	8003df8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	2105      	movs	r1, #5
 8001cba:	2017      	movs	r0, #23
 8001cbc:	f002 f868 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cc0:	2017      	movs	r0, #23
 8001cc2:	f002 f899 	bl	8003df8 <HAL_NVIC_EnableIRQ>

}
 8001cc6:	b00b      	add	sp, #44	; 0x2c
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	48001c00 	.word	0x48001c00
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	10210000 	.word	0x10210000
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	48001000 	.word	0x48001000

08001ce0 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <ReadRtcSsrValue+0x1c>)
 8001ce2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001ce4:	b29b      	uxth	r3, r3

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ce6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001ce8:	b280      	uxth	r0, r0

  while(first_read != second_read)
 8001cea:	e003      	b.n	8001cf4 <ReadRtcSsrValue+0x14>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <ReadRtcSsrValue+0x1c>)
 8001cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    first_read = second_read;
 8001cf0:	4603      	mov	r3, r0
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cf2:	b290      	uxth	r0, r2
  while(first_read != second_read)
 8001cf4:	4283      	cmp	r3, r0
 8001cf6:	d1f9      	bne.n	8001cec <ReadRtcSsrValue+0xc>
  }

  return second_read;
}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40002800 	.word	0x40002800

08001d00 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d00:	b470      	push	{r4, r5, r6}
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d02:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001d06:	00da      	lsls	r2, r3, #3
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LinkTimerAfter+0x3c>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7d5b      	ldrb	r3, [r3, #21]
 8001d0e:	b2db      	uxtb	r3, r3

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d005      	beq.n	8001d20 <LinkTimerAfter+0x20>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001d18:	00d4      	lsls	r4, r2, #3
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <LinkTimerAfter+0x3c>)
 8001d1c:	4422      	add	r2, r4
 8001d1e:	7510      	strb	r0, [r2, #20]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <LinkTimerAfter+0x3c>)
 8001d22:	0044      	lsls	r4, r0, #1
 8001d24:	1826      	adds	r6, r4, r0
 8001d26:	00f5      	lsls	r5, r6, #3
 8001d28:	4415      	add	r5, r2
 8001d2a:	756b      	strb	r3, [r5, #21]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d2c:	7529      	strb	r1, [r5, #20]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d32:	00cb      	lsls	r3, r1, #3
 8001d34:	441a      	add	r2, r3
 8001d36:	7550      	strb	r0, [r2, #21]

  return;
}
 8001d38:	bc70      	pop	{r4, r5, r6}
 8001d3a:	4770      	bx	lr
 8001d3c:	200000d8 	.word	0x200000d8

08001d40 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d40:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <LinkTimerBefore+0x5c>)
 8001d44:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	428b      	cmp	r3, r1
 8001d4c:	d01a      	beq.n	8001d84 <LinkTimerBefore+0x44>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <LinkTimerBefore+0x5c>)
 8001d50:	004a      	lsls	r2, r1, #1
 8001d52:	1855      	adds	r5, r2, r1
 8001d54:	00ec      	lsls	r4, r5, #3
 8001d56:	441c      	add	r4, r3
 8001d58:	7d24      	ldrb	r4, [r4, #20]
 8001d5a:	b2e4      	uxtb	r4, r4

    aTimerContext[previous_id].NextID = TimerID;
 8001d5c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001d60:	00f5      	lsls	r5, r6, #3
 8001d62:	441d      	add	r5, r3
 8001d64:	7568      	strb	r0, [r5, #21]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d66:	0045      	lsls	r5, r0, #1
 8001d68:	182f      	adds	r7, r5, r0
 8001d6a:	00fe      	lsls	r6, r7, #3
 8001d6c:	4637      	mov	r7, r6
 8001d6e:	441e      	add	r6, r3
 8001d70:	7571      	strb	r1, [r6, #21]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001d72:	463e      	mov	r6, r7
 8001d74:	441e      	add	r6, r3
 8001d76:	7534      	strb	r4, [r6, #20]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d78:	4411      	add	r1, r2
 8001d7a:	00ca      	lsls	r2, r1, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	7518      	strb	r0, [r3, #20]
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
}
 8001d80:	bcf0      	pop	{r4, r5, r6, r7}
 8001d82:	4770      	bx	lr
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LinkTimerBefore+0x5c>)
 8001d86:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8001d8a:	00e2      	lsls	r2, r4, #3
 8001d8c:	441a      	add	r2, r3
 8001d8e:	7551      	strb	r1, [r2, #21]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d94:	00ca      	lsls	r2, r1, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	7518      	strb	r0, [r3, #20]
  return;
 8001d9a:	e7f1      	b.n	8001d80 <LinkTimerBefore+0x40>
 8001d9c:	200000d8 	.word	0x200000d8

08001da0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001da0:	b470      	push	{r4, r5, r6}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <UnlinkTimer+0x94>)
 8001da4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4283      	cmp	r3, r0
 8001dac:	d02a      	beq.n	8001e04 <UnlinkTimer+0x64>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dae:	4d21      	ldr	r5, [pc, #132]	; (8001e34 <UnlinkTimer+0x94>)
 8001db0:	0043      	lsls	r3, r0, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	00da      	lsls	r2, r3, #3
 8001db6:	442a      	add	r2, r5
 8001db8:	7d14      	ldrb	r4, [r2, #20]
    next_id = aTimerContext[TimerID].NextID;
 8001dba:	7d53      	ldrb	r3, [r2, #21]
 8001dbc:	b2db      	uxtb	r3, r3

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001dbe:	7d56      	ldrb	r6, [r2, #21]
 8001dc0:	b2f6      	uxtb	r6, r6
 8001dc2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001dc6:	00d4      	lsls	r4, r2, #3
 8001dc8:	4425      	add	r5, r4
 8001dca:	756e      	strb	r6, [r5, #21]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d00b      	beq.n	8001de8 <UnlinkTimer+0x48>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <UnlinkTimer+0x94>)
 8001dd2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001dd6:	00ec      	lsls	r4, r5, #3
 8001dd8:	4414      	add	r4, r2
 8001dda:	7d24      	ldrb	r4, [r4, #20]
 8001ddc:	b2e4      	uxtb	r4, r4
 8001dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001de2:	00dd      	lsls	r5, r3, #3
 8001de4:	442a      	add	r2, r5
 8001de6:	7514      	strb	r4, [r2, #20]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <UnlinkTimer+0x94>)
 8001dea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001dee:	00c3      	lsls	r3, r0, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	2001      	movs	r0, #1
 8001df4:	7318      	strb	r0, [r3, #12]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001df6:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d010      	beq.n	8001e22 <UnlinkTimer+0x82>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8001e00:	bc70      	pop	{r4, r5, r6}
 8001e02:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <UnlinkTimer+0x94>)
 8001e06:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001e10:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8001e14:	00e2      	lsls	r2, r4, #3
 8001e16:	441a      	add	r2, r3
 8001e18:	7d52      	ldrb	r2, [r2, #21]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8001e20:	e7e2      	b.n	8001de8 <UnlinkTimer+0x48>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d1ec      	bne.n	8001e00 <UnlinkTimer+0x60>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e26:	4613      	mov	r3, r2
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8001e30:	e7e6      	b.n	8001e00 <UnlinkTimer+0x60>
 8001e32:	bf00      	nop
 8001e34:	200000d8 	.word	0x200000d8

08001e38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e38:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <ReturnTimeElapsed+0x4c>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d01b      	beq.n	8001e7e <ReturnTimeElapsed+0x46>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001e46:	f7ff ff4b 	bl	8001ce0 <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <ReturnTimeElapsed+0x4c>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	4283      	cmp	r3, r0
 8001e52:	d30c      	bcc.n	8001e6e <ReturnTimeElapsed+0x36>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <ReturnTimeElapsed+0x4c>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <ReturnTimeElapsed+0x50>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <ReturnTimeElapsed+0x54>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8001e6a:	b280      	uxth	r0, r0
 8001e6c:	bd08      	pop	{r3, pc}
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <ReturnTimeElapsed+0x58>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	1a1b      	subs	r3, r3, r0
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <ReturnTimeElapsed+0x4c>)
 8001e76:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 8001e7a:	4418      	add	r0, r3
 8001e7c:	e7ee      	b.n	8001e5c <ReturnTimeElapsed+0x24>
    return_value = 0;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e7f3      	b.n	8001e6a <ReturnTimeElapsed+0x32>
 8001e82:	bf00      	nop
 8001e84:	200000d8 	.word	0x200000d8
 8001e88:	20000a18 	.word	0x20000a18
 8001e8c:	20000a1e 	.word	0x20000a1e
 8001e90:	20000a1c 	.word	0x20000a1c

08001e94 <linkTimer>:
{
 8001e94:	b570      	push	{r4, r5, r6, lr}
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <linkTimer+0xd4>)
 8001e98:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d023      	beq.n	8001eea <linkTimer+0x56>
 8001ea2:	4604      	mov	r4, r0
    time_elapsed = ReturnTimeElapsed();
 8001ea4:	f7ff ffc8 	bl	8001e38 <ReturnTimeElapsed>
 8001ea8:	4605      	mov	r5, r0
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <linkTimer+0xd4>)
 8001eac:	0062      	lsls	r2, r4, #1
 8001eae:	1910      	adds	r0, r2, r4
 8001eb0:	00c1      	lsls	r1, r0, #3
 8001eb2:	4419      	add	r1, r3
 8001eb4:	6888      	ldr	r0, [r1, #8]
 8001eb6:	4428      	add	r0, r5
 8001eb8:	6088      	str	r0, [r1, #8]
    time_left = aTimerContext[TimerID].CountLeft;
 8001eba:	4422      	add	r2, r4
 8001ebc:	00d1      	lsls	r1, r2, #3
 8001ebe:	4419      	add	r1, r3
 8001ec0:	6888      	ldr	r0, [r1, #8]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001ec2:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001ec6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001eca:	00d1      	lsls	r1, r2, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4283      	cmp	r3, r0
 8001ed2:	d83a      	bhi.n	8001f4a <linkTimer+0xb6>
      timer_id_lookup = CurrentRunningTimerID;
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <linkTimer+0xd4>)
 8001ed6:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8001eda:	b2c9      	uxtb	r1, r1
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001edc:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8001ee0:	00f2      	lsls	r2, r6, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	7d5b      	ldrb	r3, [r3, #21]
 8001ee6:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ee8:	e021      	b.n	8001f2e <linkTimer+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <linkTimer+0xd4>)
 8001eec:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = TimerID;
 8001ef6:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001efa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001efe:	00c2      	lsls	r2, r0, #3
 8001f00:	441a      	add	r2, r3
 8001f02:	2106      	movs	r1, #6
 8001f04:	7551      	strb	r1, [r2, #21]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8001f0e:	2500      	movs	r5, #0
}
 8001f10:	4628      	mov	r0, r5
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <linkTimer+0xd4>)
 8001f16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001f1a:	00ca      	lsls	r2, r1, #3
 8001f1c:	441a      	add	r2, r3
 8001f1e:	7d51      	ldrb	r1, [r2, #21]
 8001f20:	b2c9      	uxtb	r1, r1
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f22:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8001f26:	00f2      	lsls	r2, r6, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	7d5b      	ldrb	r3, [r3, #21]
 8001f2c:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d007      	beq.n	8001f42 <linkTimer+0xae>
 8001f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f36:	00da      	lsls	r2, r3, #3
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <linkTimer+0xd4>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	d9e8      	bls.n	8001f14 <linkTimer+0x80>
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff fedc 	bl	8001d00 <LinkTimerAfter>
 8001f48:	e7e2      	b.n	8001f10 <linkTimer+0x7c>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f4a:	4e07      	ldr	r6, [pc, #28]	; (8001f68 <linkTimer+0xd4>)
 8001f4c:	f896 1090 	ldrb.w	r1, [r6, #144]	; 0x90
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff fef5 	bl	8001d40 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001f56:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
      CurrentRunningTimerID = TimerID;
 8001f60:	f886 4090 	strb.w	r4, [r6, #144]	; 0x90
 8001f64:	e7d4      	b.n	8001f10 <linkTimer+0x7c>
 8001f66:	bf00      	nop
 8001f68:	200000d8 	.word	0x200000d8

08001f6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f6c:	b510      	push	{r4, lr}
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001f6e:	b360      	cbz	r0, 8001fca <RestartWakeupCounter+0x5e>
 8001f70:	4604      	mov	r4, r0
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
  }
  else
  {
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f72:	2801      	cmp	r0, #1
 8001f74:	d932      	bls.n	8001fdc <RestartWakeupCounter+0x70>
    {
      Value -= 1;
 8001f76:	3c01      	subs	r4, #1
 8001f78:	b2a4      	uxth	r4, r4
    }

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <RestartWakeupCounter+0x7c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	f012 0f04 	tst.w	r2, #4
 8001f86:	d0f8      	beq.n	8001f7a <RestartWakeupCounter+0xe>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <RestartWakeupCounter+0x80>)
 8001f94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f98:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f001 ff6c 	bl	8003e78 <HAL_NVIC_ClearPendingIRQ>

    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001fa0:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <RestartWakeupCounter+0x84>)
 8001fa2:	6953      	ldr	r3, [r2, #20]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	6154      	str	r4, [r2, #20]

    /**
     * Update the value here after the WUTWF polling that may take some time
     */
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001fac:	f7ff fe98 	bl	8001ce0 <ReadRtcSsrValue>
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <RestartWakeupCounter+0x88>)
 8001fb2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <RestartWakeupCounter+0x7c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	6893      	ldr	r3, [r2, #8]
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6093      	str	r3, [r2, #8]

    HW_TS_RTC_CountUpdated_AppNot();
 8001fc4:	f3af 8000 	nop.w
  }

  return ;
}
 8001fc8:	bd10      	pop	{r4, pc}
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001fca:	f7ff fe89 	bl	8001ce0 <ReadRtcSsrValue>
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <RestartWakeupCounter+0x88>)
 8001fd0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f001 ff41 	bl	8003e5c <HAL_NVIC_SetPendingIRQ>
 8001fda:	e7f5      	b.n	8001fc8 <RestartWakeupCounter+0x5c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <RestartWakeupCounter+0x8c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d1c8      	bne.n	8001f76 <RestartWakeupCounter+0xa>
 8001fe4:	e7c9      	b.n	8001f7a <RestartWakeupCounter+0xe>
 8001fe6:	bf00      	nop
 8001fe8:	20000a20 	.word	0x20000a20
 8001fec:	58000800 	.word	0x58000800
 8001ff0:	40002800 	.word	0x40002800
 8001ff4:	200000d8 	.word	0x200000d8
 8001ff8:	20000a1e 	.word	0x20000a1e

08001ffc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <RescheduleTimerList+0xc0>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002006:	d006      	beq.n	8002016 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <RescheduleTimerList+0xc4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f013 0f04 	tst.w	r3, #4
 8002014:	d1f8      	bne.n	8002008 <RescheduleTimerList+0xc>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <RescheduleTimerList+0xc4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6893      	ldr	r3, [r2, #8]
 800201e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002022:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <RescheduleTimerList+0xc8>)
 8002026:	f893 4090 	ldrb.w	r4, [r3, #144]	; 0x90
 800202a:	b2e4      	uxtb	r4, r4

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800202c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002030:	00ca      	lsls	r2, r1, #3
 8002032:	4413      	add	r3, r2
 8002034:	689e      	ldr	r6, [r3, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002036:	f7ff feff 	bl	8001e38 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 800203a:	4605      	mov	r5, r0
 800203c:	42b0      	cmp	r0, r6
 800203e:	d905      	bls.n	800204c <RescheduleTimerList+0x50>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <RescheduleTimerList+0xc8>)
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    wakeup_timer_value = 0;
 8002048:	2000      	movs	r0, #0
 800204a:	e023      	b.n	8002094 <RescheduleTimerList+0x98>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <RescheduleTimerList+0xcc>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	4403      	add	r3, r0
 8002052:	42b3      	cmp	r3, r6
 8002054:	d207      	bcs.n	8002066 <RescheduleTimerList+0x6a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <RescheduleTimerList+0xcc>)
 8002058:	8818      	ldrh	r0, [r3, #0]
 800205a:	b280      	uxth	r0, r0

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <RescheduleTimerList+0xc8>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8002064:	e016      	b.n	8002094 <RescheduleTimerList+0x98>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002066:	b2b6      	uxth	r6, r6
 8002068:	1a30      	subs	r0, r6, r0
 800206a:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <RescheduleTimerList+0xc8>)
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8002074:	e00e      	b.n	8002094 <RescheduleTimerList+0x98>
    {
      aTimerContext[localTimerID].CountLeft = 0;
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002076:	0062      	lsls	r2, r4, #1
 8002078:	4414      	add	r4, r2
 800207a:	00e1      	lsls	r1, r4, #3
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <RescheduleTimerList+0xc8>)
 800207e:	440a      	add	r2, r1
 8002080:	6891      	ldr	r1, [r2, #8]
 8002082:	1b49      	subs	r1, r1, r5
 8002084:	6091      	str	r1, [r2, #8]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800208a:	00da      	lsls	r2, r3, #3
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <RescheduleTimerList+0xc8>)
 800208e:	4413      	add	r3, r2
 8002090:	7d5c      	ldrb	r4, [r3, #21]
 8002092:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002094:	2c06      	cmp	r4, #6
 8002096:	d00d      	beq.n	80020b4 <RescheduleTimerList+0xb8>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002098:	4623      	mov	r3, r4
 800209a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800209e:	00d1      	lsls	r1, r2, #3
 80020a0:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <RescheduleTimerList+0xc8>)
 80020a2:	440a      	add	r2, r1
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	4295      	cmp	r5, r2
 80020a8:	d9e5      	bls.n	8002076 <RescheduleTimerList+0x7a>
      aTimerContext[localTimerID].CountLeft = 0;
 80020aa:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <RescheduleTimerList+0xc8>)
 80020ac:	440a      	add	r2, r1
 80020ae:	2100      	movs	r1, #0
 80020b0:	6091      	str	r1, [r2, #8]
 80020b2:	e7e8      	b.n	8002086 <RescheduleTimerList+0x8a>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020b4:	f7ff ff5a 	bl	8001f6c <RestartWakeupCounter>

  return ;
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
 80020ba:	bf00      	nop
 80020bc:	40002800 	.word	0x40002800
 80020c0:	20000a20 	.word	0x20000a20
 80020c4:	200000d8 	.word	0x200000d8
 80020c8:	20000a1a 	.word	0x20000a1a

080020cc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80020cc:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HW_TS_Init+0x12c>)
 80020d0:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80020d2:	680b      	ldr	r3, [r1, #0]
 80020d4:	22ca      	movs	r2, #202	; 0xca
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
 80020d8:	680b      	ldr	r3, [r1, #0]
 80020da:	2253      	movs	r2, #83	; 0x53
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80020de:	4c47      	ldr	r4, [pc, #284]	; (80021fc <HW_TS_Init+0x130>)
 80020e0:	68a3      	ldr	r3, [r4, #8]
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	60a3      	str	r3, [r4, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	f1c3 0304 	rsb	r3, r3, #4
 80020f2:	b2d9      	uxtb	r1, r3
 80020f4:	4b42      	ldr	r3, [pc, #264]	; (8002200 <HW_TS_Init+0x134>)
 80020f6:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80020f8:	6923      	ldr	r3, [r4, #16]
 80020fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002102:	fa92 f2a2 	rbit	r2, r2
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HW_TS_Init+0x138>)
 8002114:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002116:	6923      	ldr	r3, [r4, #16]
 8002118:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800211c:	3301      	adds	r3, #1
 800211e:	4c3a      	ldr	r4, [pc, #232]	; (8002208 <HW_TS_Init+0x13c>)
 8002120:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002122:	3b01      	subs	r3, #1
 8002124:	fb03 f302 	mul.w	r3, r3, r2
 8002128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800212c:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800212e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002132:	4293      	cmp	r3, r2
 8002134:	d91a      	bls.n	800216c <HW_TS_Init+0xa0>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <HW_TS_Init+0x140>)
 8002138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213c:	801a      	strh	r2, [r3, #0]
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HW_TS_Init+0x144>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002146:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002148:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800214c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002154:	2800      	cmp	r0, #0
 8002156:	d144      	bne.n	80021e2 <HW_TS_Init+0x116>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HW_TS_Init+0x148>)
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002168:	2300      	movs	r3, #0
 800216a:	e00c      	b.n	8002186 <HW_TS_Init+0xba>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800216c:	b29b      	uxth	r3, r3
 800216e:	4a27      	ldr	r2, [pc, #156]	; (800220c <HW_TS_Init+0x140>)
 8002170:	8013      	strh	r3, [r2, #0]
 8002172:	e7e4      	b.n	800213e <HW_TS_Init+0x72>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002174:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002178:	00d1      	lsls	r1, r2, #3
 800217a:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HW_TS_Init+0x148>)
 800217c:	440a      	add	r2, r1
 800217e:	2100      	movs	r1, #0
 8002180:	7311      	strb	r1, [r2, #12]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002182:	3301      	adds	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b05      	cmp	r3, #5
 8002188:	d9f4      	bls.n	8002174 <HW_TS_Init+0xa8>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HW_TS_Init+0x148>)
 800218c:	2206      	movs	r2, #6
 800218e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002192:	4c19      	ldr	r4, [pc, #100]	; (80021f8 <HW_TS_Init+0x12c>)
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	6811      	ldr	r1, [r2, #0]
 8002198:	688b      	ldr	r3, [r1, #8]
 800219a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219e:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	68d3      	ldr	r3, [r2, #12]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80021aa:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HW_TS_Init+0x144>)
 80021ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021b2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80021b4:	2003      	movs	r0, #3
 80021b6:	f001 fe5f 	bl	8003e78 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	6893      	ldr	r3, [r2, #8]
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HW_TS_Init+0x12c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80021d0:	2200      	movs	r2, #0
 80021d2:	2106      	movs	r1, #6
 80021d4:	2003      	movs	r0, #3
 80021d6:	f001 fddb 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021da:	2003      	movs	r0, #3
 80021dc:	f001 fe0c 	bl	8003df8 <HAL_NVIC_EnableIRQ>

  return;
}
 80021e0:	bd10      	pop	{r4, pc}
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HW_TS_Init+0x12c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80021ee:	d0ea      	beq.n	80021c6 <HW_TS_Init+0xfa>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f001 fe33 	bl	8003e5c <HAL_NVIC_SetPendingIRQ>
 80021f6:	e7e6      	b.n	80021c6 <HW_TS_Init+0xfa>
 80021f8:	20000a20 	.word	0x20000a20
 80021fc:	40002800 	.word	0x40002800
 8002200:	20000a1e 	.word	0x20000a1e
 8002204:	20000a18 	.word	0x20000a18
 8002208:	20000a1c 	.word	0x20000a1c
 800220c:	20000a1a 	.word	0x20000a1a
 8002210:	58000800 	.word	0x58000800
 8002214:	200000d8 	.word	0x200000d8

08002218 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800221e:	b672      	cpsid	i
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002220:	2400      	movs	r4, #0
 8002222:	e001      	b.n	8002228 <HW_TS_Create+0x10>
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
  {
    loop++;
 8002224:	3401      	adds	r4, #1
 8002226:	b2e4      	uxtb	r4, r4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002228:	2c05      	cmp	r4, #5
 800222a:	d807      	bhi.n	800223c <HW_TS_Create+0x24>
 800222c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002230:	00ee      	lsls	r6, r5, #3
 8002232:	4d11      	ldr	r5, [pc, #68]	; (8002278 <HW_TS_Create+0x60>)
 8002234:	4435      	add	r5, r6
 8002236:	7b2d      	ldrb	r5, [r5, #12]
 8002238:	2d00      	cmp	r5, #0
 800223a:	d1f3      	bne.n	8002224 <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800223c:	2c06      	cmp	r4, #6
 800223e:	d016      	beq.n	800226e <HW_TS_Create+0x56>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002240:	f8df c034 	ldr.w	ip, [pc, #52]	; 8002278 <HW_TS_Create+0x60>
 8002244:	0066      	lsls	r6, r4, #1
 8002246:	eb06 0e04 	add.w	lr, r6, r4
 800224a:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 800224e:	4465      	add	r5, ip
 8002250:	f04f 0e01 	mov.w	lr, #1
 8002254:	f885 e00c 	strb.w	lr, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002258:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800225c:	6128      	str	r0, [r5, #16]
    aTimerContext[loop].TimerMode = TimerMode;
 800225e:	736a      	strb	r2, [r5, #13]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002260:	1932      	adds	r2, r6, r4
 8002262:	00d0      	lsls	r0, r2, #3
 8002264:	f84c 3000 	str.w	r3, [ip, r0]
    *pTimerId = loop;
 8002268:	700c      	strb	r4, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 800226a:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226e:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8002272:	2001      	movs	r0, #1
 8002274:	e7fa      	b.n	800226c <HW_TS_Create+0x54>
 8002276:	bf00      	nop
 8002278:	200000d8 	.word	0x200000d8

0800227c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002280:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002286:	2003      	movs	r0, #3
 8002288:	f001 fdc4 	bl	8003e14 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800228c:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HW_TS_Stop+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	21ca      	movs	r1, #202	; 0xca
 8002294:	6251      	str	r1, [r2, #36]	; 0x24
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2253      	movs	r2, #83	; 0x53
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800229c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80022a0:	00da      	lsls	r2, r3, #3
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HW_TS_Stop+0xbc>)
 80022a4:	4413      	add	r3, r2
 80022a6:	7b1b      	ldrb	r3, [r3, #12]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d00a      	beq.n	80022c4 <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HW_TS_Stop+0xb8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022b8:	2003      	movs	r0, #3
 80022ba:	f001 fd9d 	bl	8003df8 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022be:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80022c2:	bd38      	pop	{r3, r4, r5, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80022c4:	2100      	movs	r1, #0
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7ff fd6a 	bl	8001da0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HW_TS_Stop+0xbc>)
 80022ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80022d2:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d008      	beq.n	80022ea <HW_TS_Stop+0x6e>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HW_TS_Stop+0xbc>)
 80022da:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d0e4      	beq.n	80022ae <HW_TS_Stop+0x32>
      RescheduleTimerList();
 80022e4:	f7ff fe8a 	bl	8001ffc <RescheduleTimerList>
 80022e8:	e7e1      	b.n	80022ae <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <HW_TS_Stop+0xc0>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022f2:	d006      	beq.n	8002302 <HW_TS_Stop+0x86>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HW_TS_Stop+0xb8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f013 0f04 	tst.w	r3, #4
 8002300:	d1f8      	bne.n	80022f4 <HW_TS_Stop+0x78>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HW_TS_Stop+0xb8>)
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	680a      	ldr	r2, [r1, #0]
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800230e:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002310:	680b      	ldr	r3, [r1, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f012 0f04 	tst.w	r2, #4
 8002318:	d0fa      	beq.n	8002310 <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002322:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HW_TS_Stop+0xc4>)
 8002326:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800232a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800232c:	2003      	movs	r0, #3
 800232e:	f001 fda3 	bl	8003e78 <HAL_NVIC_ClearPendingIRQ>
 8002332:	e7bc      	b.n	80022ae <HW_TS_Stop+0x32>
 8002334:	20000a20 	.word	0x20000a20
 8002338:	200000d8 	.word	0x200000d8
 800233c:	40002800 	.word	0x40002800
 8002340:	58000800 	.word	0x58000800

08002344 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	4604      	mov	r4, r0
 8002348:	460f      	mov	r7, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800234a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800234e:	00da      	lsls	r2, r3, #3
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HW_TS_Start+0x94>)
 8002352:	4413      	add	r3, r2
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d036      	beq.n	80023ca <HW_TS_Start+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002362:	2003      	movs	r0, #3
 8002364:	f001 fd56 	bl	8003e14 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HW_TS_Start+0x98>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	21ca      	movs	r1, #202	; 0xca
 8002370:	6251      	str	r1, [r2, #36]	; 0x24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2253      	movs	r2, #83	; 0x53
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002378:	4d17      	ldr	r5, [pc, #92]	; (80023d8 <HW_TS_Start+0x94>)
 800237a:	0062      	lsls	r2, r4, #1
 800237c:	4422      	add	r2, r4
 800237e:	00d3      	lsls	r3, r2, #3
 8002380:	442b      	add	r3, r5
 8002382:	2202      	movs	r2, #2
 8002384:	731a      	strb	r2, [r3, #12]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002386:	609f      	str	r7, [r3, #8]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002388:	605f      	str	r7, [r3, #4]

  time_elapsed =  linkTimer(timer_id);
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff fd82 	bl	8001e94 <linkTimer>

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002390:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8002394:	b2db      	uxtb	r3, r3

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002396:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	429a      	cmp	r2, r3
 800239e:	d117      	bne.n	80023d0 <HW_TS_Start+0x8c>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HW_TS_Start+0x94>)
 80023a2:	0063      	lsls	r3, r4, #1
 80023a4:	191d      	adds	r5, r3, r4
 80023a6:	00e9      	lsls	r1, r5, #3
 80023a8:	460d      	mov	r5, r1
 80023aa:	4411      	add	r1, r2
 80023ac:	6889      	ldr	r1, [r1, #8]
 80023ae:	1a08      	subs	r0, r1, r0
 80023b0:	442a      	add	r2, r5
 80023b2:	6090      	str	r0, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HW_TS_Start+0x98>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	22ff      	movs	r2, #255	; 0xff
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023be:	2003      	movs	r0, #3
 80023c0:	f001 fd1a 	bl	8003df8 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c4:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80023c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 80023ca:	f7ff ff57 	bl	800227c <HW_TS_Stop>
 80023ce:	e7c5      	b.n	800235c <HW_TS_Start+0x18>
    RescheduleTimerList();
 80023d0:	f7ff fe14 	bl	8001ffc <RescheduleTimerList>
 80023d4:	e7ee      	b.n	80023b4 <HW_TS_Start+0x70>
 80023d6:	bf00      	nop
 80023d8:	200000d8 	.word	0x200000d8
 80023dc:	20000a20 	.word	0x20000a20

080023e0 <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80023e6:	b672      	cpsid	i
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023f0:	d009      	beq.n	8002406 <HW_TS_RTC_ReadLeftTicksToCount+0x26>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HW_TS_RTC_ReadLeftTicksToCount+0x34>)
 80023f4:	695c      	ldr	r4, [r3, #20]
 80023f6:	b2a4      	uxth	r4, r4

    elapsed_time_value = ReturnTimeElapsed();
 80023f8:	f7ff fd1e 	bl	8001e38 <ReturnTimeElapsed>

    if(auro_reload_value > elapsed_time_value)
 80023fc:	4284      	cmp	r4, r0
 80023fe:	d907      	bls.n	8002410 <HW_TS_RTC_ReadLeftTicksToCount+0x30>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8002400:	1a20      	subs	r0, r4, r0
 8002402:	b280      	uxth	r0, r0
 8002404:	e001      	b.n	800240a <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
      return_value = 0;
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 8002406:	f64f 70ff 	movw	r0, #65535	; 0xffff
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240a:	f385 8810 	msr	PRIMASK, r5
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
}
 800240e:	bd38      	pop	{r3, r4, r5, pc}
      return_value = 0;
 8002410:	2000      	movs	r0, #0
 8002412:	e7fa      	b.n	800240a <HW_TS_RTC_ReadLeftTicksToCount+0x2a>
 8002414:	40002800 	.word	0x40002800

08002418 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    switch (hw_uart_id)
 8002418:	b100      	cbz	r0, 800241c <HW_UART_Receive_IT+0x4>
 800241a:	4770      	bx	lr
{
 800241c:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 800241e:	4804      	ldr	r0, [pc, #16]	; (8002430 <HW_UART_Receive_IT+0x18>)
 8002420:	6003      	str	r3, [r0, #0]
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <HW_UART_Receive_IT+0x1c>)
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HW_UART_Receive_IT+0x20>)
 8002426:	6003      	str	r3, [r0, #0]
 8002428:	f005 f90a 	bl	8007640 <HAL_UART_Receive_IT>
        default:
            break;
    }

    return;
}
 800242c:	bd08      	pop	{r3, pc}
 800242e:	bf00      	nop
 8002430:	20004d34 	.word	0x20004d34
 8002434:	20004fd8 	.word	0x20004fd8
 8002438:	40013800 	.word	0x40013800

0800243c <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
    switch (hw_uart_id)
 800243c:	b100      	cbz	r0, 8002440 <HW_UART_Transmit_IT+0x4>
 800243e:	4770      	bx	lr
{
 8002440:	b508      	push	{r3, lr}
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_TX_IT(huart1, USART1);
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <HW_UART_Transmit_IT+0x18>)
 8002444:	6003      	str	r3, [r0, #0]
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <HW_UART_Transmit_IT+0x1c>)
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HW_UART_Transmit_IT+0x20>)
 800244a:	6003      	str	r3, [r0, #0]
 800244c:	f005 f89c 	bl	8007588 <HAL_UART_Transmit_IT>
        default:
            break;
    }

    return;
}
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop
 8002454:	20004d38 	.word	0x20004d38
 8002458:	20004fd8 	.word	0x20004fd8
 800245c:	40013800 	.word	0x40013800

08002460 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 8002462:	6802      	ldr	r2, [r0, #0]
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_UART_RxCpltCallback+0x14>)
 8002466:	429a      	cmp	r2, r3
 8002468:	d103      	bne.n	8002472 <HAL_UART_RxCpltCallback+0x12>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800246a:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_UART_RxCpltCallback+0x18>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b103      	cbz	r3, 8002472 <HAL_UART_RxCpltCallback+0x12>
            {
                HW_huart1RxCb();
 8002470:	4798      	blx	r3
        default:
            break;
    }

    return;
}
 8002472:	bd08      	pop	{r3, pc}
 8002474:	40013800 	.word	0x40013800
 8002478:	20004d34 	.word	0x20004d34

0800247c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800247c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800247e:	4812      	ldr	r0, [pc, #72]	; (80024c8 <MX_I2C1_Init+0x4c>)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_I2C1_Init+0x50>)
 8002482:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C1_Init+0x54>)
 8002486:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248c:	2201      	movs	r2, #1
 800248e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002490:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002492:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002494:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002496:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002498:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800249a:	f002 f9cd 	bl	8004838 <HAL_I2C_Init>
 800249e:	b950      	cbnz	r0, 80024b6 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024a0:	2100      	movs	r1, #0
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <MX_I2C1_Init+0x4c>)
 80024a4:	f003 f9ba 	bl	800581c <HAL_I2CEx_ConfigAnalogFilter>
 80024a8:	b940      	cbnz	r0, 80024bc <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4806      	ldr	r0, [pc, #24]	; (80024c8 <MX_I2C1_Init+0x4c>)
 80024ae:	f003 f9e3 	bl	8005878 <HAL_I2CEx_ConfigDigitalFilter>
 80024b2:	b930      	cbnz	r0, 80024c2 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 80024b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024b6:	f000 fb5b 	bl	8002b70 <Error_Handler>
 80024ba:	e7f1      	b.n	80024a0 <MX_I2C1_Init+0x24>
    Error_Handler();
 80024bc:	f000 fb58 	bl	8002b70 <Error_Handler>
 80024c0:	e7f3      	b.n	80024aa <MX_I2C1_Init+0x2e>
    Error_Handler();
 80024c2:	f000 fb55 	bl	8002b70 <Error_Handler>
}
 80024c6:	e7f5      	b.n	80024b4 <MX_I2C1_Init+0x38>
 80024c8:	20004d3c 	.word	0x20004d3c
 80024cc:	40005400 	.word	0x40005400
 80024d0:	00e27cae 	.word	0x00e27cae

080024d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024d4:	b510      	push	{r4, lr}
 80024d6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	2300      	movs	r3, #0
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	9306      	str	r3, [sp, #24]
 80024e2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0x70>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024ec:	b008      	add	sp, #32
 80024ee:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80024f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002504:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800250a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2304      	movs	r3, #4
 8002512:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	a903      	add	r1, sp, #12
 8002516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251a:	f001 fea7 	bl	800426c <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800251e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002524:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800252e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2105      	movs	r1, #5
 8002534:	201e      	movs	r0, #30
 8002536:	f001 fc2b 	bl	8003d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800253a:	201e      	movs	r0, #30
 800253c:	f001 fc5c 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 8002540:	e7d4      	b.n	80024ec <HAL_I2C_MspInit+0x18>
 8002542:	bf00      	nop
 8002544:	40005400 	.word	0x40005400

08002548 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8002548:	b510      	push	{r4, lr}
	inertialEnabled = 1;
 800254a:	4b35      	ldr	r3, [pc, #212]	; (8002620 <InertialSensingTask+0xd8>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8002550:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002554:	2120      	movs	r1, #32
 8002556:	204a      	movs	r0, #74	; 0x4a
 8002558:	f7ff fa10 	bl	800197c <IMU_begin>
 800255c:	e043      	b.n	80025e6 <InertialSensingTask+0x9e>
//					osMessageQueueGet(stepSampleQueueHandle, &inertialPacket.stability, 0U, WAIT_TOLERANCE);
//					osMessageQueueGet(stabilitySampleQueueHandle, &inertialPacket.step, 0U, WAIT_TOLERANCE);


				// check for break condition
				evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	4611      	mov	r1, r2
 8002562:	2002      	movs	r0, #2
 8002564:	f006 fabc 	bl	8008ae0 <osThreadFlagsWait>

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 8002568:	f010 0f02 	tst.w	r0, #2
 800256c:	d123      	bne.n	80025b6 <InertialSensingTask+0x6e>
				osDelay(100);
 800256e:	2064      	movs	r0, #100	; 0x64
 8002570:	f006 fb1c 	bl	8008bac <osDelay>
				osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8002574:	4c2b      	ldr	r4, [pc, #172]	; (8002624 <InertialSensingTask+0xdc>)
 8002576:	2364      	movs	r3, #100	; 0x64
 8002578:	2200      	movs	r2, #0
 800257a:	4621      	mov	r1, r4
 800257c:	482a      	ldr	r0, [pc, #168]	; (8002628 <InertialSensingTask+0xe0>)
 800257e:	6800      	ldr	r0, [r0, #0]
 8002580:	f006 fdb2 	bl	80090e8 <osMessageQueueGet>
				osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8002584:	2300      	movs	r3, #0
 8002586:	461a      	mov	r2, r3
 8002588:	f104 0118 	add.w	r1, r4, #24
 800258c:	4827      	ldr	r0, [pc, #156]	; (800262c <InertialSensingTask+0xe4>)
 800258e:	6800      	ldr	r0, [r0, #0]
 8002590:	f006 fdaa 	bl	80090e8 <osMessageQueueGet>
				osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8002594:	2300      	movs	r3, #0
 8002596:	461a      	mov	r2, r3
 8002598:	4621      	mov	r1, r4
 800259a:	4825      	ldr	r0, [pc, #148]	; (8002630 <InertialSensingTask+0xe8>)
 800259c:	6800      	ldr	r0, [r0, #0]
 800259e:	f006 fd51 	bl	8009044 <osMessageQueuePut>
				if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80025a2:	2120      	movs	r1, #32
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f001 ff20 	bl	80043ec <HAL_GPIO_ReadPin>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d1d6      	bne.n	800255e <InertialSensingTask+0x16>
 80025b0:	f7ff f96c 	bl	800188c <IMU_dataAvailable>
 80025b4:	e7d3      	b.n	800255e <InertialSensingTask+0x16>

					// reset IMU
					IMU_softReset();
 80025b6:	f7ff f9c9 	bl	800194c <IMU_softReset>

					// give some time to ensure no interrupts are handled
					osDelay(500);
 80025ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025be:	f006 faf5 	bl	8008bac <osDelay>

					inertialEnabled = 0;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <InertialSensingTask+0xd8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]

					// empty queues
					osMessageQueueReset(inertialSensingQueueHandle);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <InertialSensingTask+0xe8>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	f006 fdde 	bl	800918c <osMessageQueueReset>
					osMessageQueueReset(activitySampleQueueHandle);
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <InertialSensingTask+0xe4>)
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	f006 fdda 	bl	800918c <osMessageQueueReset>
					osMessageQueueReset(rotationSampleQueueHandle);
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <InertialSensingTask+0xe0>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	f006 fdd6 	bl	800918c <osMessageQueueReset>
//					osMessageQueueReset(stepSampleQueueHandle);
//					osMessageQueueReset(stabilitySampleQueueHandle);

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 80025e0:	200e      	movs	r0, #14
 80025e2:	f006 fa3f 	bl	8008a64 <osThreadFlagsClear>
			osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	2100      	movs	r1, #0
 80025ec:	2001      	movs	r0, #1
 80025ee:	f006 fa77 	bl	8008ae0 <osThreadFlagsWait>
			osDelay(500);
 80025f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f6:	f006 fad9 	bl	8008bac <osDelay>
			IMU_enableRotationVector(ROT_VEC_PERIOD);
 80025fa:	2064      	movs	r0, #100	; 0x64
 80025fc:	f7ff fa1d 	bl	8001a3a <IMU_enableRotationVector>
			osDelay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f006 fad3 	bl	8008bac <osDelay>
			IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <InertialSensingTask+0xec>)
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <InertialSensingTask+0xf0>)
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002610:	f7ff fa02 	bl	8001a18 <IMU_enableActivityClassifier>
			osDelay(400);
 8002614:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002618:	f006 fac8 	bl	8008bac <osDelay>
 800261c:	e7a7      	b.n	800256e <InertialSensingTask+0x26>
 800261e:	bf00      	nop
 8002620:	20000a24 	.word	0x20000a24
 8002624:	20004d90 	.word	0x20004d90
 8002628:	20004b98 	.word	0x20004b98
 800262c:	20004ab4 	.word	0x20004ab4
 8002630:	20004ac4 	.word	0x20004ac4
 8002634:	20004ddc 	.word	0x20004ddc
 8002638:	20000008 	.word	0x20000008

0800263c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 800263c:	2820      	cmp	r0, #32
 800263e:	d000      	beq.n	8002642 <HAL_GPIO_EXTI_Callback+0x6>
 8002640:	4770      	bx	lr
{
 8002642:	b508      	push	{r3, lr}
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GPIO_EXTI_Callback+0x18>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d000      	beq.n	800264e <HAL_GPIO_EXTI_Callback+0x12>
		IMU_dataAvailable();
	}
}
 800264c:	bd08      	pop	{r3, pc}
		IMU_dataAvailable();
 800264e:	f7ff f91d 	bl	800188c <IMU_dataAvailable>
}
 8002652:	e7fb      	b.n	800264c <HAL_GPIO_EXTI_Callback+0x10>
 8002654:	20000a24 	.word	0x20000a24

08002658 <InterProcessorTask>:
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};

struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	b082      	sub	sp, #8
	uint32_t evt = 0;

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <InterProcessorTask+0x158>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f006 fc0c 	bl	8008e80 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8002668:	2364      	movs	r3, #100	; 0x64
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2306      	movs	r3, #6
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <InterProcessorTask+0x15c>)
 8002670:	21e6      	movs	r1, #230	; 0xe6
 8002672:	4851      	ldr	r0, [pc, #324]	; (80027b8 <InterProcessorTask+0x160>)
 8002674:	f002 f93e 	bl	80048f4 <HAL_I2C_Master_Transmit>
 8002678:	2800      	cmp	r0, #0
 800267a:	d1f5      	bne.n	8002668 <InterProcessorTask+0x10>
	osSemaphoreRelease(messageI2C_LockSem);
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <InterProcessorTask+0x158>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f006 fc42 	bl	8008f08 <osSemaphoreRelease>
 8002684:	e06d      	b.n	8002762 <InterProcessorTask+0x10a>
					parsedPacket.tick_ms = receivedPacket.tick_ms;
					parsedPacket.epoch = receivedPacket.epoch;

					for(int i = 0; i < 5; i++)
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8002686:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <InterProcessorTask+0x164>)
 8002688:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 800268c:	4e4c      	ldr	r6, [pc, #304]	; (80027c0 <InterProcessorTask+0x168>)
 800268e:	4633      	mov	r3, r6
 8002690:	6808      	ldr	r0, [r1, #0]
 8002692:	6849      	ldr	r1, [r1, #4]
 8002694:	c303      	stmia	r3!, {r0, r1}
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8002696:	1d61      	adds	r1, r4, #5
 8002698:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800269c:	6810      	ldr	r0, [r2, #0]
 800269e:	6851      	ldr	r1, [r2, #4]
 80026a0:	c303      	stmia	r3!, {r0, r1}

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 80026a2:	2300      	movs	r3, #0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4631      	mov	r1, r6
 80026a8:	4846      	ldr	r0, [pc, #280]	; (80027c4 <InterProcessorTask+0x16c>)
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	f006 fcca 	bl	8009044 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 80026b0:	3401      	adds	r4, #1
 80026b2:	2c04      	cmp	r4, #4
 80026b4:	dde7      	ble.n	8002686 <InterProcessorTask+0x2e>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 80026b6:	f015 0f02 	tst.w	r5, #2
 80026ba:	d13a      	bne.n	8002732 <InterProcessorTask+0xda>
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	2100      	movs	r1, #0
 80026c2:	2006      	movs	r0, #6
 80026c4:	f006 fa0c 	bl	8008ae0 <osThreadFlagsWait>
 80026c8:	4605      	mov	r5, r0
 				if( (evt & 0x00000004U) == 0x00000004U){
 80026ca:	f010 0f04 	tst.w	r0, #4
 80026ce:	d0f2      	beq.n	80026b6 <InterProcessorTask+0x5e>
 					osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <InterProcessorTask+0x158>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f006 fbd2 	bl	8008e80 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 80026dc:	2364      	movs	r3, #100	; 0x64
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2306      	movs	r3, #6
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <InterProcessorTask+0x170>)
 80026e4:	21e6      	movs	r1, #230	; 0xe6
 80026e6:	4834      	ldr	r0, [pc, #208]	; (80027b8 <InterProcessorTask+0x160>)
 80026e8:	f002 f904 	bl	80048f4 <HAL_I2C_Master_Transmit>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d1f5      	bne.n	80026dc <InterProcessorTask+0x84>
 					osThreadFlagsClear(0x00000008U);
 80026f0:	2008      	movs	r0, #8
 80026f2:	f006 f9b7 	bl	8008a64 <osThreadFlagsClear>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 80026f6:	2358      	movs	r3, #88	; 0x58
 80026f8:	4a30      	ldr	r2, [pc, #192]	; (80027bc <InterProcessorTask+0x164>)
 80026fa:	21e6      	movs	r1, #230	; 0xe6
 80026fc:	482e      	ldr	r0, [pc, #184]	; (80027b8 <InterProcessorTask+0x160>)
 80026fe:	f002 fa75 	bl	8004bec <HAL_I2C_Master_Receive_IT>
 8002702:	2800      	cmp	r0, #0
 8002704:	d1f7      	bne.n	80026f6 <InterProcessorTask+0x9e>
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	2100      	movs	r1, #0
 800270c:	200a      	movs	r0, #10
 800270e:	f006 f9e7 	bl	8008ae0 <osThreadFlagsWait>
 8002712:	4605      	mov	r5, r0
					osSemaphoreRelease(messageI2C_LockSem);
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <InterProcessorTask+0x158>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f006 fbf6 	bl	8008f08 <osSemaphoreRelease>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 800271c:	f015 0f02 	tst.w	r5, #2
 8002720:	d11f      	bne.n	8002762 <InterProcessorTask+0x10a>
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <InterProcessorTask+0x164>)
 8002724:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <InterProcessorTask+0x168>)
 8002728:	6119      	str	r1, [r3, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 800272a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800272c:	615a      	str	r2, [r3, #20]
					for(int i = 0; i < 5; i++)
 800272e:	2400      	movs	r4, #0
 8002730:	e7bf      	b.n	80026b2 <InterProcessorTask+0x5a>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002732:	f04f 31ff 	mov.w	r1, #4294967295
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <InterProcessorTask+0x158>)
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	f006 fba1 	bl	8008e80 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2306      	movs	r3, #6
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <InterProcessorTask+0x15c>)
 8002746:	21e6      	movs	r1, #230	; 0xe6
 8002748:	481b      	ldr	r0, [pc, #108]	; (80027b8 <InterProcessorTask+0x160>)
 800274a:	f002 f8d3 	bl	80048f4 <HAL_I2C_Master_Transmit>
 800274e:	2800      	cmp	r0, #0
 8002750:	d1f5      	bne.n	800273e <InterProcessorTask+0xe6>
					osSemaphoreRelease(messageI2C_LockSem);
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <InterProcessorTask+0x158>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f006 fbd7 	bl	8008f08 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <InterProcessorTask+0x16c>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f006 fd15 	bl	800918c <osMessageQueueReset>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8002762:	f04f 32ff 	mov.w	r2, #4294967295
 8002766:	2100      	movs	r1, #0
 8002768:	2001      	movs	r0, #1
 800276a:	f006 f9b9 	bl	8008ae0 <osThreadFlagsWait>
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 800276e:	f010 0f01 	tst.w	r0, #1
 8002772:	d0f6      	beq.n	8002762 <InterProcessorTask+0x10a>
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <InterProcessorTask+0x170>)
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <InterProcessorTask+0x174>)
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	6019      	str	r1, [r3, #0]
 800277c:	8892      	ldrh	r2, [r2, #4]
 800277e:	809a      	strh	r2, [r3, #4]
			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <InterProcessorTask+0x158>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f006 fb7a 	bl	8008e80 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2306      	movs	r3, #6
 8002792:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <InterProcessorTask+0x170>)
 8002794:	21e6      	movs	r1, #230	; 0xe6
 8002796:	4808      	ldr	r0, [pc, #32]	; (80027b8 <InterProcessorTask+0x160>)
 8002798:	f002 f8ac 	bl	80048f4 <HAL_I2C_Master_Transmit>
 800279c:	2800      	cmp	r0, #0
 800279e:	d1f5      	bne.n	800278c <InterProcessorTask+0x134>
			osDelay(100);
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f006 fa03 	bl	8008bac <osDelay>
			osSemaphoreRelease(messageI2C_LockSem);
 80027a6:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <InterProcessorTask+0x158>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f006 fbad 	bl	8008f08 <osSemaphoreRelease>
 80027ae:	e785      	b.n	80026bc <InterProcessorTask+0x64>
 80027b0:	20004bac 	.word	0x20004bac
 80027b4:	0800e514 	.word	0x0800e514
 80027b8:	20004d3c 	.word	0x20004d3c
 80027bc:	20004de8 	.word	0x20004de8
 80027c0:	20004e48 	.word	0x20004e48
 80027c4:	20004ac8 	.word	0x20004ac8
 80027c8:	20004e40 	.word	0x20004e40
 80027cc:	20004aac 	.word	0x20004aac

080027d0 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80027d0:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000010U);
 80027d2:	2110      	movs	r1, #16
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_I2C_MasterTxCpltCallback+0x14>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f006 f8fc 	bl	80089d4 <osThreadFlagsSet>
	test_1 = 1;
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
}
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	20004acc 	.word	0x20004acc
 80027e8:	20000a25 	.word	0x20000a25

080027ec <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80027ec:	b508      	push	{r3, lr}
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
 80027ee:	2108      	movs	r1, #8
 80027f0:	4b02      	ldr	r3, [pc, #8]	; (80027fc <HAL_I2C_MasterRxCpltCallback+0x10>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	f006 f8ee 	bl	80089d4 <osThreadFlagsSet>
}
 80027f8:	bd08      	pop	{r3, pc}
 80027fa:	bf00      	nop
 80027fc:	20004acc 	.word	0x20004acc

08002800 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 8002800:	b530      	push	{r4, r5, lr}
 8002802:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 8002804:	0040      	lsls	r0, r0, #1
 8002806:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 8002808:	2300      	movs	r3, #0
 800280a:	9307      	str	r3, [sp, #28]
 800280c:	9308      	str	r3, [sp, #32]
 800280e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 8002812:	f04f 31ff 	mov.w	r1, #4294967295
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <setup_LP5523+0xf8>)
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f006 fb31 	bl	8008e80 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 8002824:	b2ac      	uxth	r4, r5
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	2301      	movs	r3, #1
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	f10d 021b 	add.w	r2, sp, #27
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	4621      	mov	r1, r4
 800283a:	4830      	ldr	r0, [pc, #192]	; (80028fc <setup_LP5523+0xfc>)
 800283c:	f002 fa22 	bl	8004c84 <HAL_I2C_Mem_Write>
 8002840:	2800      	cmp	r0, #0
 8002842:	d1ef      	bne.n	8002824 <setup_LP5523+0x24>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8002844:	234f      	movs	r3, #79	; 0x4f
 8002846:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	2301      	movs	r3, #1
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	f10d 021b 	add.w	r2, sp, #27
 8002858:	9200      	str	r2, [sp, #0]
 800285a:	2236      	movs	r2, #54	; 0x36
 800285c:	4621      	mov	r1, r4
 800285e:	4827      	ldr	r0, [pc, #156]	; (80028fc <setup_LP5523+0xfc>)
 8002860:	f002 fa10 	bl	8004c84 <HAL_I2C_Mem_Write>
 8002864:	2800      	cmp	r0, #0
 8002866:	d1f0      	bne.n	800284a <setup_LP5523+0x4a>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2309      	movs	r3, #9
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	ab07      	add	r3, sp, #28
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2301      	movs	r3, #1
 8002878:	2216      	movs	r2, #22
 800287a:	4621      	mov	r1, r4
 800287c:	481f      	ldr	r0, [pc, #124]	; (80028fc <setup_LP5523+0xfc>)
 800287e:	f002 fa01 	bl	8004c84 <HAL_I2C_Mem_Write>
 8002882:	2800      	cmp	r0, #0
 8002884:	d1f0      	bne.n	8002868 <setup_LP5523+0x68>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2309      	movs	r3, #9
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <setup_LP5523+0x100>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	2226      	movs	r2, #38	; 0x26
 8002898:	4621      	mov	r1, r4
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <setup_LP5523+0xfc>)
 800289c:	f002 f9f2 	bl	8004c84 <HAL_I2C_Mem_Write>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d1f0      	bne.n	8002886 <setup_LP5523+0x86>

	// enable logarithmic dimming
	packet = LOG_EN;
 80028a4:	2320      	movs	r3, #32
 80028a6:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 80028aa:	f88d 3010 	strb.w	r3, [sp, #16]
 80028ae:	f88d 3011 	strb.w	r3, [sp, #17]
 80028b2:	f88d 3012 	strb.w	r3, [sp, #18]
 80028b6:	f88d 3013 	strb.w	r3, [sp, #19]
 80028ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80028be:	f88d 3015 	strb.w	r3, [sp, #21]
 80028c2:	f88d 3016 	strb.w	r3, [sp, #22]
 80028c6:	f88d 3017 	strb.w	r3, [sp, #23]
 80028ca:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	2309      	movs	r3, #9
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	ab04      	add	r3, sp, #16
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	2206      	movs	r2, #6
 80028e0:	4621      	mov	r1, r4
 80028e2:	4806      	ldr	r0, [pc, #24]	; (80028fc <setup_LP5523+0xfc>)
 80028e4:	f002 f9ce 	bl	8004c84 <HAL_I2C_Mem_Write>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d1f0      	bne.n	80028ce <setup_LP5523+0xce>
	osSemaphoreRelease(messageI2C_LockSem);
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <setup_LP5523+0xf8>)
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	f006 fb0a 	bl	8008f08 <osSemaphoreRelease>
}
 80028f4:	b00b      	add	sp, #44	; 0x2c
 80028f6:	bd30      	pop	{r4, r5, pc}
 80028f8:	20004bac 	.word	0x20004bac
 80028fc:	20004d3c 	.word	0x20004d3c
 8002900:	2000000c 	.word	0x2000000c

08002904 <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8002904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002908:	b085      	sub	sp, #20
 800290a:	4603      	mov	r3, r0
	memcpy(led_left_PWM, setColors, 9);
 800290c:	4f1a      	ldr	r7, [pc, #104]	; (8002978 <FrontLightsSet+0x74>)
 800290e:	463a      	mov	r2, r7
 8002910:	6800      	ldr	r0, [r0, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	c203      	stmia	r2!, {r0, r1}
 8002916:	7a19      	ldrb	r1, [r3, #8]
 8002918:	7011      	strb	r1, [r2, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800291a:	4e18      	ldr	r6, [pc, #96]	; (800297c <FrontLightsSet+0x78>)
 800291c:	4632      	mov	r2, r6
 800291e:	f853 0f09 	ldr.w	r0, [r3, #9]!
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	c203      	stmia	r2!, {r0, r1}
 8002926:	7a1b      	ldrb	r3, [r3, #8]
 8002928:	7013      	strb	r3, [r2, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 800292a:	4c15      	ldr	r4, [pc, #84]	; (8002980 <FrontLightsSet+0x7c>)
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	f006 faa5 	bl	8008e80 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8002936:	4d13      	ldr	r5, [pc, #76]	; (8002984 <FrontLightsSet+0x80>)
 8002938:	f04f 39ff 	mov.w	r9, #4294967295
 800293c:	f8cd 9008 	str.w	r9, [sp, #8]
 8002940:	f04f 0809 	mov.w	r8, #9
 8002944:	f8cd 8004 	str.w	r8, [sp, #4]
 8002948:	9700      	str	r7, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	2216      	movs	r2, #22
 800294e:	2168      	movs	r1, #104	; 0x68
 8002950:	4628      	mov	r0, r5
 8002952:	f002 f997 	bl	8004c84 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8002956:	f8cd 9008 	str.w	r9, [sp, #8]
 800295a:	f8cd 8004 	str.w	r8, [sp, #4]
 800295e:	9600      	str	r6, [sp, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	2216      	movs	r2, #22
 8002964:	216a      	movs	r1, #106	; 0x6a
 8002966:	4628      	mov	r0, r5
 8002968:	f002 f98c 	bl	8004c84 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockSem);
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	f006 facb 	bl	8008f08 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8002972:	b005      	add	sp, #20
 8002974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002978:	20000a28 	.word	0x20000a28
 800297c:	20000a34 	.word	0x20000a34
 8002980:	20004bac 	.word	0x20004bac
 8002984:	20004d3c 	.word	0x20004d3c

08002988 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b087      	sub	sp, #28
#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 800298c:	2034      	movs	r0, #52	; 0x34
 800298e:	f7ff ff37 	bl	8002800 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8002992:	2035      	movs	r0, #53	; 0x35
 8002994:	f7ff ff34 	bl	8002800 <setup_LP5523>
 8002998:	e036      	b.n	8002a08 <ThreadFrontLightsTask+0x80>

//		// REMOVE BELOW
//		lightsSimpleMessageReceived = 0X00005229;

		for(int i = 0; i<= 8; i++){
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800299a:	9b05      	ldr	r3, [sp, #20]
 800299c:	f343 0000 	sbfx	r0, r3, #0, #1
 80029a0:	4920      	ldr	r1, [pc, #128]	; (8002a24 <ThreadFrontLightsTask+0x9c>)
 80029a2:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 80029a8:	3201      	adds	r2, #1
 80029aa:	2a08      	cmp	r2, #8
 80029ac:	ddf5      	ble.n	800299a <ThreadFrontLightsTask+0x12>
		}

		for(int i = 0; i<= 8; i++){
 80029ae:	2200      	movs	r2, #0
 80029b0:	e007      	b.n	80029c2 <ThreadFrontLightsTask+0x3a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80029b2:	9b05      	ldr	r3, [sp, #20]
 80029b4:	f343 0000 	sbfx	r0, r3, #0, #1
 80029b8:	491b      	ldr	r1, [pc, #108]	; (8002a28 <ThreadFrontLightsTask+0xa0>)
 80029ba:	5488      	strb	r0, [r1, r2]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	9305      	str	r3, [sp, #20]
		for(int i = 0; i<= 8; i++){
 80029c0:	3201      	adds	r2, #1
 80029c2:	2a08      	cmp	r2, #8
 80029c4:	ddf5      	ble.n	80029b2 <ThreadFrontLightsTask+0x2a>
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);


		//HAL_I2C_Mem_Write_IT(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_PWM, 9);
		//osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 80029c6:	4c19      	ldr	r4, [pc, #100]	; (8002a2c <ThreadFrontLightsTask+0xa4>)
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f006 fa57 	bl	8008e80 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 80029d2:	4d17      	ldr	r5, [pc, #92]	; (8002a30 <ThreadFrontLightsTask+0xa8>)
 80029d4:	f04f 37ff 	mov.w	r7, #4294967295
 80029d8:	9702      	str	r7, [sp, #8]
 80029da:	2609      	movs	r6, #9
 80029dc:	9601      	str	r6, [sp, #4]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <ThreadFrontLightsTask+0x9c>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2301      	movs	r3, #1
 80029e4:	2216      	movs	r2, #22
 80029e6:	2168      	movs	r1, #104	; 0x68
 80029e8:	4628      	mov	r0, r5
 80029ea:	f002 f94b 	bl	8004c84 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 80029ee:	9702      	str	r7, [sp, #8]
 80029f0:	9601      	str	r6, [sp, #4]
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <ThreadFrontLightsTask+0xa0>)
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	2216      	movs	r2, #22
 80029fa:	216a      	movs	r1, #106	; 0x6a
 80029fc:	4628      	mov	r0, r5
 80029fe:	f002 f941 	bl	8004c84 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockSem);
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	f006 fa80 	bl	8008f08 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8002a08:	2400      	movs	r4, #0
 8002a0a:	a906      	add	r1, sp, #24
 8002a0c:	f841 4d04 	str.w	r4, [r1, #-4]!
		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
 8002a14:	4622      	mov	r2, r4
 8002a16:	4807      	ldr	r0, [pc, #28]	; (8002a34 <ThreadFrontLightsTask+0xac>)
 8002a18:	6800      	ldr	r0, [r0, #0]
 8002a1a:	f006 fb65 	bl	80090e8 <osMessageQueueGet>
		for(int i = 0; i<= 8; i++){
 8002a1e:	4622      	mov	r2, r4
 8002a20:	e7c3      	b.n	80029aa <ThreadFrontLightsTask+0x22>
 8002a22:	bf00      	nop
 8002a24:	20000a28 	.word	0x20000a28
 8002a28:	20000a34 	.word	0x20000a34
 8002a2c:	20004bac 	.word	0x20004bac
 8002a30:	20004d3c 	.word	0x20004d3c
 8002a34:	20004bbc 	.word	0x20004bbc

08002a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3c:	2248      	movs	r2, #72	; 0x48
 8002a3e:	2100      	movs	r1, #0
 8002a40:	a81c      	add	r0, sp, #112	; 0x70
 8002a42:	f00a fc42 	bl	800d2ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a46:	2400      	movs	r4, #0
 8002a48:	9415      	str	r4, [sp, #84]	; 0x54
 8002a4a:	9416      	str	r4, [sp, #88]	; 0x58
 8002a4c:	9417      	str	r4, [sp, #92]	; 0x5c
 8002a4e:	9418      	str	r4, [sp, #96]	; 0x60
 8002a50:	9419      	str	r4, [sp, #100]	; 0x64
 8002a52:	941a      	str	r4, [sp, #104]	; 0x68
 8002a54:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a56:	2250      	movs	r2, #80	; 0x50
 8002a58:	4621      	mov	r1, r4
 8002a5a:	a801      	add	r0, sp, #4
 8002a5c:	f00a fc35 	bl	800d2ca <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a6a:	f042 0210 	orr.w	r2, r2, #16
 8002a6e:	60da      	str	r2, [r3, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	f042 0203 	orr.w	r2, r2, #3
 8002a76:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002a78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a7c:	f022 0218 	bic.w	r2, r2, #24
 8002a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <SystemClock_Config+0xe4>)
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	931c      	str	r3, [sp, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002aa6:	2701      	movs	r7, #1
 8002aa8:	971e      	str	r7, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aaa:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002aae:	961f      	str	r6, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab0:	2340      	movs	r3, #64	; 0x40
 8002ab2:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ab8:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aba:	a81c      	add	r0, sp, #112	; 0x70
 8002abc:	f002 ff9c 	bl	80059f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002ac0:	236f      	movs	r3, #111	; 0x6f
 8002ac2:	9315      	str	r3, [sp, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002ac4:	2502      	movs	r5, #2
 8002ac6:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac8:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aca:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002acc:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002ace:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002ad0:	941b      	str	r4, [sp, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ad2:	4639      	mov	r1, r7
 8002ad4:	a815      	add	r0, sp, #84	; 0x54
 8002ad6:	f003 fb19 	bl	800610c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002ada:	f643 4305 	movw	r3, #15365	; 0x3c05
 8002ade:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae8:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aee:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002af0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002af4:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8002af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002afa:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002afc:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002afe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b02:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b04:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b06:	9611      	str	r6, [sp, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8002b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002b0e:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002b10:	9414      	str	r4, [sp, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b12:	a801      	add	r0, sp, #4
 8002b14:	f003 fdb5 	bl	8006682 <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b18:	b02f      	add	sp, #188	; 0xbc
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1c:	58000400 	.word	0x58000400

08002b20 <main>:
{
 8002b20:	b508      	push	{r3, lr}
  HAL_Init();
 8002b22:	f000 fbd3 	bl	80032cc <HAL_Init>
  SystemClock_Config();
 8002b26:	f7ff ff87 	bl	8002a38 <SystemClock_Config>
  MX_GPIO_Init();
 8002b2a:	f7ff f84f 	bl	8001bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b2e:	f7fe fc4d 	bl	80013cc <MX_DMA_Init>
  MX_ADC1_Init();
 8002b32:	f7fe f96b 	bl	8000e0c <MX_ADC1_Init>
  MX_RTC_Init();
 8002b36:	f000 f941 	bl	8002dbc <MX_RTC_Init>
  MX_TIM2_Init();
 8002b3a:	f000 facd 	bl	80030d8 <MX_TIM2_Init>
  MX_RF_Init();
 8002b3e:	f000 f93b 	bl	8002db8 <MX_RF_Init>
  MX_USART1_UART_Init();
 8002b42:	f000 fb23 	bl	800318c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002b46:	f7ff fc99 	bl	800247c <MX_I2C1_Init>
  osKernelInitialize();
 8002b4a:	f005 fe87 	bl	800885c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8002b4e:	f7fe fac7 	bl	80010e0 <MX_FREERTOS_Init>
  osKernelStart();
 8002b52:	f005 fea5 	bl	80088a0 <osKernelStart>
 8002b56:	e7fe      	b.n	8002b56 <main+0x36>

08002b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d000      	beq.n	8002b64 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b62:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002b64:	f000 fbc8 	bl	80032f8 <HAL_IncTick>
}
 8002b68:	e7fb      	b.n	8002b62 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b70:	4770      	bx	lr
	...

08002b74 <masterExitRoutine>:


	}
}

void masterExitRoutine(void){
 8002b74:	b508      	push	{r3, lr}
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <masterExitRoutine+0x40>)
 8002b78:	789b      	ldrb	r3, [r3, #2]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d008      	beq.n	8002b90 <masterExitRoutine+0x1c>
//						if(prevLogMessage.positionEnabled == SENSOR_ENABLE)
//						{
//
//						}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <masterExitRoutine+0x40>)
 8002b80:	78db      	ldrb	r3, [r3, #3]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d00a      	beq.n	8002b9c <masterExitRoutine+0x28>
	{
		osThreadFlagsSet(interProcessorTaskHandle, 0x00000002U);
	}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <masterExitRoutine+0x40>)
 8002b88:	791b      	ldrb	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d00c      	beq.n	8002ba8 <masterExitRoutine+0x34>
	{
		osThreadFlagsSet(inertialSensingTaskHandle, 0x00000002U);
	}

}
 8002b8e:	bd08      	pop	{r3, pc}
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8002b90:	2102      	movs	r1, #2
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <masterExitRoutine+0x44>)
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f005 ff1d 	bl	80089d4 <osThreadFlagsSet>
 8002b9a:	e7f0      	b.n	8002b7e <masterExitRoutine+0xa>
		osThreadFlagsSet(interProcessorTaskHandle, 0x00000002U);
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <masterExitRoutine+0x48>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f005 ff17 	bl	80089d4 <osThreadFlagsSet>
 8002ba6:	e7ee      	b.n	8002b86 <masterExitRoutine+0x12>
		osThreadFlagsSet(inertialSensingTaskHandle, 0x00000002U);
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <masterExitRoutine+0x4c>)
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	f005 ff11 	bl	80089d4 <osThreadFlagsSet>
}
 8002bb2:	e7ec      	b.n	8002b8e <masterExitRoutine+0x1a>
 8002bb4:	20004ba4 	.word	0x20004ba4
 8002bb8:	20004aa4 	.word	0x20004aa4
 8002bbc:	20004acc 	.word	0x20004acc
 8002bc0:	20004ab8 	.word	0x20004ab8

08002bc4 <packetizeData>:
void packetizeData(struct LogPacket *packet,
		struct blinkData *blink,
		struct positionData *pos,
		struct parsedSecondaryProcessorPacket *processorMsg,
		struct inertialData *inertialMsg)
{
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	460f      	mov	r7, r1
 8002bca:	461e      	mov	r6, r3
 8002bcc:	9d06      	ldr	r5, [sp, #24]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8002bce:	f000 fb9f 	bl	8003310 <HAL_GetTick>
 8002bd2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 8002bd6:	226c      	movs	r2, #108	; 0x6c
 8002bd8:	4639      	mov	r1, r7
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f00a fb6a 	bl	800d2b4 <memcpy>
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
 8002be0:	6831      	ldr	r1, [r6, #0]
 8002be2:	6872      	ldr	r2, [r6, #4]
 8002be4:	68b7      	ldr	r7, [r6, #8]
 8002be6:	68f0      	ldr	r0, [r6, #12]
 8002be8:	66e1      	str	r1, [r4, #108]	; 0x6c
 8002bea:	6722      	str	r2, [r4, #112]	; 0x70
 8002bec:	6767      	str	r7, [r4, #116]	; 0x74
 8002bee:	67a0      	str	r0, [r4, #120]	; 0x78
 8002bf0:	6931      	ldr	r1, [r6, #16]
 8002bf2:	6972      	ldr	r2, [r6, #20]
 8002bf4:	67e1      	str	r1, [r4, #124]	; 0x7c
 8002bf6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	memcpy ( &(packet->inertial), inertialMsg, sizeof(struct inertialData) );
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002c00:	3530      	adds	r5, #48	; 0x30
 8002c02:	681e      	ldr	r6, [r3, #0]
 8002c04:	685c      	ldr	r4, [r3, #4]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	6006      	str	r6, [r0, #0]
 8002c0c:	6044      	str	r4, [r0, #4]
 8002c0e:	6081      	str	r1, [r0, #8]
 8002c10:	60c2      	str	r2, [r0, #12]
 8002c12:	3310      	adds	r3, #16
 8002c14:	3010      	adds	r0, #16
 8002c16:	42ab      	cmp	r3, r5
 8002c18:	d1f3      	bne.n	8002c02 <packetizeData+0x3e>
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	6002      	str	r2, [r0, #0]
 8002c20:	6043      	str	r3, [r0, #4]
}
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c24 <MasterThreadTask>:
{
 8002c24:	b500      	push	{lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	e040      	b.n	8002cac <MasterThreadTask+0x88>
			logEnabled = 1;
 8002c2a:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <MasterThreadTask+0x150>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8002c30:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <MasterThreadTask+0x154>)
 8002c32:	6821      	ldr	r1, [r4, #0]
 8002c34:	6019      	str	r1, [r3, #0]
 8002c36:	88a2      	ldrh	r2, [r4, #4]
 8002c38:	809a      	strh	r2, [r3, #4]
			if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8002c3a:	789b      	ldrb	r3, [r3, #2]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d04d      	beq.n	8002cdc <MasterThreadTask+0xb8>
			if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <MasterThreadTask+0x154>)
 8002c42:	78db      	ldrb	r3, [r3, #3]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d04f      	beq.n	8002ce8 <MasterThreadTask+0xc4>
			if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <MasterThreadTask+0x154>)
 8002c4a:	791b      	ldrb	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d051      	beq.n	8002cf4 <MasterThreadTask+0xd0>
			osDelay(500);
 8002c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c54:	f005 ffaa 	bl	8008bac <osDelay>
				osDelay(50);
 8002c58:	2032      	movs	r0, #50	; 0x32
 8002c5a:	f005 ffa7 	bl	8008bac <osDelay>
				if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <MasterThreadTask+0x154>)
 8002c60:	789b      	ldrb	r3, [r3, #2]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d04c      	beq.n	8002d00 <MasterThreadTask+0xdc>
				if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 8002c66:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <MasterThreadTask+0x154>)
 8002c68:	78db      	ldrb	r3, [r3, #3]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d058      	beq.n	8002d20 <MasterThreadTask+0xfc>
				if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 8002c6e:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <MasterThreadTask+0x154>)
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d067      	beq.n	8002d46 <MasterThreadTask+0x122>
				packetizeData(&sensorPacket, &blinkMsgReceived, NULL, &secondaryProcessorMsgReceived, &inertialMsgReceived);
 8002c76:	4c41      	ldr	r4, [pc, #260]	; (8002d7c <MasterThreadTask+0x158>)
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <MasterThreadTask+0x15c>)
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <MasterThreadTask+0x160>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4941      	ldr	r1, [pc, #260]	; (8002d88 <MasterThreadTask+0x164>)
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff ff9e 	bl	8002bc4 <packetizeData>
				APP_THREAD_SendBorderPacket(&sensorPacket);
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f00a f861 	bl	800cd50 <APP_THREAD_SendBorderPacket>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	461a      	mov	r2, r3
 8002c92:	493e      	ldr	r1, [pc, #248]	; (8002d8c <MasterThreadTask+0x168>)
 8002c94:	483e      	ldr	r0, [pc, #248]	; (8002d90 <MasterThreadTask+0x16c>)
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	f006 fa26 	bl	80090e8 <osMessageQueueGet>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d1db      	bne.n	8002c58 <MasterThreadTask+0x34>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <MasterThreadTask+0x168>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1d7      	bne.n	8002c58 <MasterThreadTask+0x34>
						masterExitRoutine();
 8002ca8:	f7ff ff64 	bl	8002b74 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8002cac:	4c37      	ldr	r4, [pc, #220]	; (8002d8c <MasterThreadTask+0x168>)
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4836      	ldr	r0, [pc, #216]	; (8002d90 <MasterThreadTask+0x16c>)
 8002cb8:	6800      	ldr	r0, [r0, #0]
 8002cba:	f006 fa15 	bl	80090e8 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8002cbe:	7863      	ldrb	r3, [r4, #1]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d0b2      	beq.n	8002c2a <MasterThreadTask+0x6>
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 8002cc4:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <MasterThreadTask+0x150>)
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	2a01      	cmp	r2, #1
 8002cca:	d1ef      	bne.n	8002cac <MasterThreadTask+0x88>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ed      	bne.n	8002cac <MasterThreadTask+0x88>
			logEnabled = 0;
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <MasterThreadTask+0x150>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 8002cd6:	f7ff ff4d 	bl	8002b74 <masterExitRoutine>
 8002cda:	e7e7      	b.n	8002cac <MasterThreadTask+0x88>
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <MasterThreadTask+0x170>)
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f005 fe77 	bl	80089d4 <osThreadFlagsSet>
 8002ce6:	e7ab      	b.n	8002c40 <MasterThreadTask+0x1c>
				osThreadFlagsSet(interProcessorTaskHandle, 0x00000001U);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MasterThreadTask+0x174>)
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	f005 fe71 	bl	80089d4 <osThreadFlagsSet>
 8002cf2:	e7a9      	b.n	8002c48 <MasterThreadTask+0x24>
				osThreadFlagsSet(inertialSensingTaskHandle, 0x00000001U);
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <MasterThreadTask+0x178>)
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f005 fe6b 	bl	80089d4 <osThreadFlagsSet>
 8002cfe:	e7a7      	b.n	8002c50 <MasterThreadTask+0x2c>
					if(osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, osWaitForever)){
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	2200      	movs	r2, #0
 8002d06:	4920      	ldr	r1, [pc, #128]	; (8002d88 <MasterThreadTask+0x164>)
 8002d08:	4825      	ldr	r0, [pc, #148]	; (8002da0 <MasterThreadTask+0x17c>)
 8002d0a:	6800      	ldr	r0, [r0, #0]
 8002d0c:	f006 f9ec 	bl	80090e8 <osMessageQueueGet>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0a8      	beq.n	8002c66 <MasterThreadTask+0x42>
						memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8002d14:	226c      	movs	r2, #108	; 0x6c
 8002d16:	4923      	ldr	r1, [pc, #140]	; (8002da4 <MasterThreadTask+0x180>)
 8002d18:	481b      	ldr	r0, [pc, #108]	; (8002d88 <MasterThreadTask+0x164>)
 8002d1a:	f00a facb 	bl	800d2b4 <memcpy>
 8002d1e:	e7a2      	b.n	8002c66 <MasterThreadTask+0x42>
					if(osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 1000)){
 8002d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d24:	2200      	movs	r2, #0
 8002d26:	4917      	ldr	r1, [pc, #92]	; (8002d84 <MasterThreadTask+0x160>)
 8002d28:	481f      	ldr	r0, [pc, #124]	; (8002da8 <MasterThreadTask+0x184>)
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	f006 f9dc 	bl	80090e8 <osMessageQueueGet>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d09c      	beq.n	8002c6e <MasterThreadTask+0x4a>
						memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived, sizeof(struct parsedSecondaryProcessorPacket));
 8002d34:	4c13      	ldr	r4, [pc, #76]	; (8002d84 <MasterThreadTask+0x160>)
 8002d36:	4d1d      	ldr	r5, [pc, #116]	; (8002dac <MasterThreadTask+0x188>)
 8002d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d40:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d44:	e793      	b.n	8002c6e <MasterThreadTask+0x4a>
					if(osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)){
 8002d46:	2300      	movs	r3, #0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	490d      	ldr	r1, [pc, #52]	; (8002d80 <MasterThreadTask+0x15c>)
 8002d4c:	4818      	ldr	r0, [pc, #96]	; (8002db0 <MasterThreadTask+0x18c>)
 8002d4e:	6800      	ldr	r0, [r0, #0]
 8002d50:	f006 f9ca 	bl	80090e8 <osMessageQueueGet>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d08e      	beq.n	8002c76 <MasterThreadTask+0x52>
						memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 8002d58:	4c09      	ldr	r4, [pc, #36]	; (8002d80 <MasterThreadTask+0x15c>)
 8002d5a:	4d16      	ldr	r5, [pc, #88]	; (8002db4 <MasterThreadTask+0x190>)
 8002d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d70:	e781      	b.n	8002c76 <MasterThreadTask+0x52>
 8002d72:	bf00      	nop
 8002d74:	20000a3d 	.word	0x20000a3d
 8002d78:	20004ba4 	.word	0x20004ba4
 8002d7c:	20004ad0 	.word	0x20004ad0
 8002d80:	20004ecc 	.word	0x20004ecc
 8002d84:	20004f18 	.word	0x20004f18
 8002d88:	20004e60 	.word	0x20004e60
 8002d8c:	20004aac 	.word	0x20004aac
 8002d90:	20004b9c 	.word	0x20004b9c
 8002d94:	20004aa4 	.word	0x20004aa4
 8002d98:	20004acc 	.word	0x20004acc
 8002d9c:	20004ab8 	.word	0x20004ab8
 8002da0:	20004bb4 	.word	0x20004bb4
 8002da4:	0800e51c 	.word	0x0800e51c
 8002da8:	20004ac8 	.word	0x20004ac8
 8002dac:	0800e5c0 	.word	0x0800e5c0
 8002db0:	20004ac4 	.word	0x20004ac4
 8002db4:	0800e588 	.word	0x0800e588

08002db8 <MX_RF_Init>:

/* RF init function */
void MX_RF_Init(void)
{

}
 8002db8:	4770      	bx	lr
	...

08002dbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002dbc:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002dbe:	4808      	ldr	r0, [pc, #32]	; (8002de0 <MX_RTC_Init+0x24>)
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_RTC_Init+0x28>)
 8002dc2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002dc8:	230f      	movs	r3, #15
 8002dca:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002dcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002dd0:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd2:	f003 fe17 	bl	8006a04 <HAL_RTC_Init>
 8002dd6:	b900      	cbnz	r0, 8002dda <MX_RTC_Init+0x1e>
  {
    Error_Handler();
  }

}
 8002dd8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002dda:	f7ff fec9 	bl	8002b70 <Error_Handler>
}
 8002dde:	e7fb      	b.n	8002dd8 <MX_RTC_Init+0x1c>
 8002de0:	20004f34 	.word	0x20004f34
 8002de4:	40002800 	.word	0x40002800

08002de8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8002de8:	6802      	ldr	r2, [r0, #0]
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RTC_MspInit+0x1c>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d000      	beq.n	8002df2 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002df0:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e02:	e7f5      	b.n	8002df0 <HAL_RTC_MspInit+0x8>
 8002e04:	40002800 	.word	0x40002800

08002e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b500      	push	{lr}
 8002e0a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e12:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e20:	9b01      	ldr	r3, [sp, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	210f      	movs	r1, #15
 8002e26:	f06f 0001 	mvn.w	r0, #1
 8002e2a:	f000 ffb1 	bl	8003d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	210f      	movs	r1, #15
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	f000 ffac 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	202d      	movs	r0, #45	; 0x2d
 8002e3e:	f000 ffa7 	bl	8003d90 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8002e42:	b003      	add	sp, #12
 8002e44:	f85d fb04 	ldr.w	pc, [sp], #4

08002e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b500      	push	{lr}
 8002e4a:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4601      	mov	r1, r0
 8002e50:	2019      	movs	r0, #25
 8002e52:	f000 ff9d 	bl	8003d90 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002e56:	2019      	movs	r0, #25
 8002e58:	f000 ffce 	bl	8003df8 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e70:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e72:	a902      	add	r1, sp, #8
 8002e74:	a803      	add	r0, sp, #12
 8002e76:	f003 fb09 	bl	800648c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002e7a:	f003 faf5 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_InitTick+0x6c>)
 8002e80:	fba3 2300 	umull	r2, r3, r3, r0
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <HAL_InitTick+0x70>)
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_InitTick+0x74>)
 8002e8c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002e8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e92:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e94:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002e9c:	f004 f8a2 	bl	8006fe4 <HAL_TIM_Base_Init>
 8002ea0:	b118      	cbz	r0, 8002eaa <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
}
 8002ea4:	b00b      	add	sp, #44	; 0x2c
 8002ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8002eaa:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <HAL_InitTick+0x70>)
 8002eac:	f003 ff7a 	bl	8006da4 <HAL_TIM_Base_Start_IT>
 8002eb0:	e7f8      	b.n	8002ea4 <HAL_InitTick+0x5c>
 8002eb2:	bf00      	nop
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	20004f58 	.word	0x20004f58
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ec0:	4770      	bx	lr

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	e7fe      	b.n	8002ec4 <MemManage_Handler>

08002ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec6:	e7fe      	b.n	8002ec6 <BusFault_Handler>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	e7fe      	b.n	8002ec8 <UsageFault_Handler>

08002eca <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eca:	4770      	bx	lr

08002ecc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002ece:	2004      	movs	r0, #4
 8002ed0:	f001 fa94 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcessorTaskHandle, 0x00000004U);
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	4b02      	ldr	r3, [pc, #8]	; (8002ee0 <EXTI2_IRQHandler+0x14>)
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	f005 fd7b 	bl	80089d4 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ede:	bd08      	pop	{r3, pc}
 8002ee0:	20004acc 	.word	0x20004acc

08002ee4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ee6:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <DMA1_Channel1_IRQHandler+0xc>)
 8002ee8:	f001 f95d 	bl	80041a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eec:	bd08      	pop	{r3, pc}
 8002eee:	bf00      	nop
 8002ef0:	20004a40 	.word	0x20004a40

08002ef4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ef6:	2020      	movs	r0, #32
 8002ef8:	f001 fa80 	bl	80043fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002efc:	bd08      	pop	{r3, pc}
	...

08002f00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002f00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f02:	4802      	ldr	r0, [pc, #8]	; (8002f0c <TIM1_UP_TIM16_IRQHandler+0xc>)
 8002f04:	f003 ff69 	bl	8006dda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002f08:	bd08      	pop	{r3, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20004f58 	.word	0x20004f58

08002f10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f12:	4802      	ldr	r0, [pc, #8]	; (8002f1c <I2C1_EV_IRQHandler+0xc>)
 8002f14:	f001 ff88 	bl	8004e28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f18:	bd08      	pop	{r3, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20004d3c 	.word	0x20004d3c

08002f20 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8002f20:	b508      	push	{r3, lr}
  HW_IPCC_Tx_Handler();
 8002f22:	f00a f8bb 	bl	800d09c <HW_IPCC_Tx_Handler>

  return;
}
 8002f26:	bd08      	pop	{r3, pc}

08002f28 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002f28:	b508      	push	{r3, lr}
  HW_IPCC_Rx_Handler();
 8002f2a:	f00a f933 	bl	800d194 <HW_IPCC_Rx_Handler>
  return;
}
 8002f2e:	bd08      	pop	{r3, pc}

08002f30 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002f30:	b40c      	push	{r2, r3}
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8002f32:	b002      	add	sp, #8
 8002f34:	4770      	bx	lr
	...

08002f38 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <SystemInit+0x5c>)
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002f3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002f56:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8002f62:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8002f66:	4002      	ands	r2, r0
 8002f68:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002f6a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f6e:	f022 0205 	bic.w	r2, r2, #5
 8002f72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002f76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <SystemInit+0x60>)
 8002f84:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002f86:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f90:	6199      	str	r1, [r3, #24]
}
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	22041000 	.word	0x22041000

08002f9c <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fa6:	4929      	ldr	r1, [pc, #164]	; (800304c <SystemCoreClockUpdate+0xb0>)
 8002fa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fac:	6893      	ldr	r3, [r2, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d846      	bhi.n	8003044 <SystemCoreClockUpdate+0xa8>
 8002fb6:	e8df f003 	tbb	[pc, r3]
 8002fba:	4507      	.short	0x4507
 8002fbc:	45174545 	.word	0x45174545
 8002fc0:	451b4545 	.word	0x451b4545
 8002fc4:	4545      	.short	0x4545
 8002fc6:	1f          	.byte	0x1f
 8002fc7:	00          	.byte	0x00
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002fc8:	4b21      	ldr	r3, [pc, #132]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8002fca:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fd6:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <SystemCoreClockUpdate+0xb8>)
 8002fd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe4:	6013      	str	r3, [r2, #0]

}
 8002fe6:	4770      	bx	lr
        SystemCoreClock = HSI_VALUE;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <SystemCoreClockUpdate+0xbc>)
 8002fec:	601a      	str	r2, [r3, #0]
      break;
 8002fee:	e7ed      	b.n	8002fcc <SystemCoreClockUpdate+0x30>
      SystemCoreClock = HSE_VALUE;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8002ff2:	4a1a      	ldr	r2, [pc, #104]	; (800305c <SystemCoreClockUpdate+0xc0>)
 8002ff4:	601a      	str	r2, [r3, #0]
      break;
 8002ff6:	e7e9      	b.n	8002fcc <SystemCoreClockUpdate+0x30>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003008:	3301      	adds	r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800300a:	2a02      	cmp	r2, #2
 800300c:	d012      	beq.n	8003034 <SystemCoreClockUpdate+0x98>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800300e:	2a03      	cmp	r2, #3
 8003010:	d014      	beq.n	800303c <SystemCoreClockUpdate+0xa0>
        pllvco = (msirange / pllm);
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003020:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003024:	68ca      	ldr	r2, [r1, #12]
 8003026:	0f52      	lsrs	r2, r2, #29
 8003028:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 800302a:	fbb3 f3f2 	udiv	r3, r3, r2
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8003030:	6013      	str	r3, [r2, #0]
      break;
 8003032:	e7cb      	b.n	8002fcc <SystemCoreClockUpdate+0x30>
        pllvco = (HSI_VALUE / pllm);
 8003034:	4a08      	ldr	r2, [pc, #32]	; (8003058 <SystemCoreClockUpdate+0xbc>)
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	e7ec      	b.n	8003016 <SystemCoreClockUpdate+0x7a>
        pllvco = (HSE_VALUE / pllm);
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <SystemCoreClockUpdate+0xc0>)
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	e7e8      	b.n	8003016 <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <SystemCoreClockUpdate+0xb4>)
 8003046:	6019      	str	r1, [r3, #0]
      break;
 8003048:	e7c0      	b.n	8002fcc <SystemCoreClockUpdate+0x30>
 800304a:	bf00      	nop
 800304c:	0800e638 	.word	0x0800e638
 8003050:	20000018 	.word	0x20000018
 8003054:	0800e5d8 	.word	0x0800e5d8
 8003058:	00f42400 	.word	0x00f42400
 800305c:	01e84800 	.word	0x01e84800

08003060 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d000      	beq.n	800306a <HAL_TIM_Base_MspInit+0xa>
 8003068:	4770      	bx	lr
{
 800306a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003080:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003082:	b002      	add	sp, #8
 8003084:	4770      	bx	lr
	...

08003088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003088:	b500      	push	{lr}
 800308a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	2300      	movs	r3, #0
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	9303      	str	r3, [sp, #12]
 8003094:	9304      	str	r3, [sp, #16]
 8003096:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d002      	beq.n	80030a6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030a0:	b007      	add	sp, #28
 80030a2:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ac:	f042 0202 	orr.w	r2, r2, #2
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80030ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030bc:	2308      	movs	r3, #8
 80030be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030c4:	2301      	movs	r3, #1
 80030c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c8:	a901      	add	r1, sp, #4
 80030ca:	4802      	ldr	r0, [pc, #8]	; (80030d4 <HAL_TIM_MspPostInit+0x4c>)
 80030cc:	f001 f8ce 	bl	800426c <HAL_GPIO_Init>
}
 80030d0:	e7e6      	b.n	80030a0 <HAL_TIM_MspPostInit+0x18>
 80030d2:	bf00      	nop
 80030d4:	48000400 	.word	0x48000400

080030d8 <MX_TIM2_Init>:
{
 80030d8:	b500      	push	{lr}
 80030da:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030dc:	2300      	movs	r3, #0
 80030de:	930a      	str	r3, [sp, #40]	; 0x28
 80030e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80030e2:	930c      	str	r3, [sp, #48]	; 0x30
 80030e4:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e6:	9307      	str	r3, [sp, #28]
 80030e8:	9308      	str	r3, [sp, #32]
 80030ea:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	9302      	str	r3, [sp, #8]
 80030f2:	9303      	str	r3, [sp, #12]
 80030f4:	9304      	str	r3, [sp, #16]
 80030f6:	9305      	str	r3, [sp, #20]
 80030f8:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80030fa:	4823      	ldr	r0, [pc, #140]	; (8003188 <MX_TIM2_Init+0xb0>)
 80030fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003100:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 639;
 8003102:	f240 227f 	movw	r2, #639	; 0x27f
 8003106:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003108:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 800310a:	2209      	movs	r2, #9
 800310c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003112:	f003 ff67 	bl	8006fe4 <HAL_TIM_Base_Init>
 8003116:	bb40      	cbnz	r0, 800316a <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003118:	a90e      	add	r1, sp, #56	; 0x38
 800311a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003122:	4819      	ldr	r0, [pc, #100]	; (8003188 <MX_TIM2_Init+0xb0>)
 8003124:	f004 f872 	bl	800720c <HAL_TIM_ConfigClockSource>
 8003128:	bb10      	cbnz	r0, 8003170 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800312a:	4817      	ldr	r0, [pc, #92]	; (8003188 <MX_TIM2_Init+0xb0>)
 800312c:	f003 ff73 	bl	8007016 <HAL_TIM_PWM_Init>
 8003130:	bb08      	cbnz	r0, 8003176 <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003132:	2320      	movs	r3, #32
 8003134:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800313a:	a907      	add	r1, sp, #28
 800313c:	4812      	ldr	r0, [pc, #72]	; (8003188 <MX_TIM2_Init+0xb0>)
 800313e:	f004 f947 	bl	80073d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003142:	b9d8      	cbnz	r0, 800317c <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003144:	2360      	movs	r3, #96	; 0x60
 8003146:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 9;
 8003148:	2309      	movs	r3, #9
 800314a:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800314c:	2300      	movs	r3, #0
 800314e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003150:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003152:	2204      	movs	r2, #4
 8003154:	4669      	mov	r1, sp
 8003156:	480c      	ldr	r0, [pc, #48]	; (8003188 <MX_TIM2_Init+0xb0>)
 8003158:	f003 ffb2 	bl	80070c0 <HAL_TIM_PWM_ConfigChannel>
 800315c:	b988      	cbnz	r0, 8003182 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 800315e:	480a      	ldr	r0, [pc, #40]	; (8003188 <MX_TIM2_Init+0xb0>)
 8003160:	f7ff ff92 	bl	8003088 <HAL_TIM_MspPostInit>
}
 8003164:	b00f      	add	sp, #60	; 0x3c
 8003166:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800316a:	f7ff fd01 	bl	8002b70 <Error_Handler>
 800316e:	e7d3      	b.n	8003118 <MX_TIM2_Init+0x40>
    Error_Handler();
 8003170:	f7ff fcfe 	bl	8002b70 <Error_Handler>
 8003174:	e7d9      	b.n	800312a <MX_TIM2_Init+0x52>
    Error_Handler();
 8003176:	f7ff fcfb 	bl	8002b70 <Error_Handler>
 800317a:	e7da      	b.n	8003132 <MX_TIM2_Init+0x5a>
    Error_Handler();
 800317c:	f7ff fcf8 	bl	8002b70 <Error_Handler>
 8003180:	e7e0      	b.n	8003144 <MX_TIM2_Init+0x6c>
    Error_Handler();
 8003182:	f7ff fcf5 	bl	8002b70 <Error_Handler>
 8003186:	e7ea      	b.n	800315e <MX_TIM2_Init+0x86>
 8003188:	20004f98 	.word	0x20004f98

0800318c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800318c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800318e:	4818      	ldr	r0, [pc, #96]	; (80031f0 <MX_USART1_UART_Init+0x64>)
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <MX_USART1_UART_Init+0x68>)
 8003192:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003194:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003198:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800319a:	2300      	movs	r3, #0
 800319c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800319e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031a2:	220c      	movs	r2, #12
 80031a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80031a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031ac:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ae:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031b0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031b4:	f005 fa7b 	bl	80086ae <HAL_UART_Init>
 80031b8:	b970      	cbnz	r0, 80031d8 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ba:	2100      	movs	r1, #0
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <MX_USART1_UART_Init+0x64>)
 80031be:	f005 fb02 	bl	80087c6 <HAL_UARTEx_SetTxFifoThreshold>
 80031c2:	b960      	cbnz	r0, 80031de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031c4:	2100      	movs	r1, #0
 80031c6:	480a      	ldr	r0, [pc, #40]	; (80031f0 <MX_USART1_UART_Init+0x64>)
 80031c8:	f005 fb22 	bl	8008810 <HAL_UARTEx_SetRxFifoThreshold>
 80031cc:	b950      	cbnz	r0, 80031e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031ce:	4808      	ldr	r0, [pc, #32]	; (80031f0 <MX_USART1_UART_Init+0x64>)
 80031d0:	f005 fada 	bl	8008788 <HAL_UARTEx_DisableFifoMode>
 80031d4:	b948      	cbnz	r0, 80031ea <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }

}
 80031d6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80031d8:	f7ff fcca 	bl	8002b70 <Error_Handler>
 80031dc:	e7ed      	b.n	80031ba <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 80031de:	f7ff fcc7 	bl	8002b70 <Error_Handler>
 80031e2:	e7ef      	b.n	80031c4 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 80031e4:	f7ff fcc4 	bl	8002b70 <Error_Handler>
 80031e8:	e7f1      	b.n	80031ce <MX_USART1_UART_Init+0x42>
    Error_Handler();
 80031ea:	f7ff fcc1 	bl	8002b70 <Error_Handler>
}
 80031ee:	e7f2      	b.n	80031d6 <MX_USART1_UART_Init+0x4a>
 80031f0:	20004fd8 	.word	0x20004fd8
 80031f4:	40013800 	.word	0x40013800

080031f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031f8:	b500      	push	{lr}
 80031fa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	2300      	movs	r3, #0
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	9304      	str	r3, [sp, #16]
 8003202:	9305      	str	r3, [sp, #20]
 8003204:	9306      	str	r3, [sp, #24]
 8003206:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003208:	6802      	ldr	r2, [r0, #0]
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_UART_MspInit+0x5c>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d002      	beq.n	8003216 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003210:	b009      	add	sp, #36	; 0x24
 8003212:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->APB2ENR, Periphs);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003224:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003228:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800322a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800322c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800322e:	f042 0202 	orr.w	r2, r2, #2
 8003232:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800323c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003246:	2307      	movs	r3, #7
 8003248:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	a903      	add	r1, sp, #12
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <HAL_UART_MspInit+0x60>)
 800324e:	f001 f80d 	bl	800426c <HAL_GPIO_Init>
}
 8003252:	e7dd      	b.n	8003210 <HAL_UART_MspInit+0x18>
 8003254:	40013800 	.word	0x40013800
 8003258:	48000400 	.word	0x48000400

0800325c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800325c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003260:	3304      	adds	r3, #4

08003262 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003262:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003264:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003266:	d3f9      	bcc.n	800325c <CopyDataInit>
  bx lr
 8003268:	4770      	bx	lr

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800326a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800326c:	3004      	adds	r0, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800326e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>
  bx lr
 8003272:	4770      	bx	lr

08003274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003276:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003278:	480c      	ldr	r0, [pc, #48]	; (80032ac <LoopForever+0x8>)
 800327a:	490d      	ldr	r1, [pc, #52]	; (80032b0 <LoopForever+0xc>)
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <LoopForever+0x10>)
 800327e:	2300      	movs	r3, #0
 8003280:	f7ff ffef 	bl	8003262 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <LoopForever+0x14>)
 8003286:	490d      	ldr	r1, [pc, #52]	; (80032bc <LoopForever+0x18>)
 8003288:	2300      	movs	r3, #0
 800328a:	f7ff fff0 	bl	800326e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <LoopForever+0x1c>)
 8003290:	490c      	ldr	r1, [pc, #48]	; (80032c4 <LoopForever+0x20>)
 8003292:	2300      	movs	r3, #0
 8003294:	f7ff ffeb 	bl	800326e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003298:	f7ff fe4e 	bl	8002f38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800329c:	f009 ffe6 	bl	800d26c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80032a0:	f7ff fc3e 	bl	8002b20 <main>

080032a4 <LoopForever>:

LoopForever:
  b LoopForever
 80032a4:	e7fe      	b.n	80032a4 <LoopForever>
 80032a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80032a8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80032ac:	20000004 	.word	0x20000004
 80032b0:	200000d8 	.word	0x200000d8
 80032b4:	0800e928 	.word	0x0800e928
  INIT_BSS _sbss, _ebss
 80032b8:	20000188 	.word	0x20000188
 80032bc:	20005170 	.word	0x20005170
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80032c0:	200300c4 	.word	0x200300c4
 80032c4:	20030b5a 	.word	0x20030b5a

080032c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC1_IRQHandler>
	...

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b510      	push	{r4, lr}
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_Init+0x28>)
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d8:	2003      	movs	r0, #3
 80032da:	f000 fd47 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032de:	2000      	movs	r0, #0
 80032e0:	f7ff fdb2 	bl	8002e48 <HAL_InitTick>
 80032e4:	b110      	cbz	r0, 80032ec <HAL_Init+0x20>
  {
    status = HAL_ERROR;
 80032e6:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80032e8:	4620      	mov	r0, r4
 80032ea:	bd10      	pop	{r4, pc}
 80032ec:	4604      	mov	r4, r0
    HAL_MspInit();
 80032ee:	f7ff fd8b 	bl	8002e08 <HAL_MspInit>
 80032f2:	e7f9      	b.n	80032e8 <HAL_Init+0x1c>
 80032f4:	58004000 	.word	0x58004000

080032f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_IncTick+0x10>)
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_IncTick+0x14>)
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	440b      	add	r3, r1
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20005064 	.word	0x20005064
 800330c:	2000001c 	.word	0x2000001c

08003310 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003310:	4b01      	ldr	r3, [pc, #4]	; (8003318 <HAL_GetTick+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20005064 	.word	0x20005064

0800331c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800331c:	4b01      	ldr	r3, [pc, #4]	; (8003324 <HAL_GetTickPrio+0x8>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000020 	.word	0x20000020

08003328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff fff0 	bl	8003310 <HAL_GetTick>
 8003330:	4605      	mov	r5, r0
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8003332:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003336:	d002      	beq.n	800333e <HAL_Delay+0x16>
    {
      wait += (uint32_t)(uwTickFreq);
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <HAL_Delay+0x24>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800333e:	f7ff ffe7 	bl	8003310 <HAL_GetTick>
 8003342:	1b40      	subs	r0, r0, r5
 8003344:	42a0      	cmp	r0, r4
 8003346:	d3fa      	bcc.n	800333e <HAL_Delay+0x16>
    {
    }
  }
 8003348:	bd38      	pop	{r3, r4, r5, pc}
 800334a:	bf00      	nop
 800334c:	2000001c 	.word	0x2000001c

08003350 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003350:	b530      	push	{r4, r5, lr}
 8003352:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003354:	2300      	movs	r3, #0
 8003356:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003358:	2800      	cmp	r0, #0
 800335a:	f000 80de 	beq.w	800351a <HAL_ADC_Init+0x1ca>
 800335e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003360:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003362:	b303      	cbz	r3, 80033a6 <HAL_ADC_Init+0x56>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003364:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 800336c:	d005      	beq.n	800337a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003374:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003378:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003382:	d11d      	bne.n	80033c0 <HAL_ADC_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8003384:	6893      	ldr	r3, [r2, #8]
 8003386:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800338a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_ADC_Init+0x1d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	4a62      	ldr	r2, [pc, #392]	; (8003524 <HAL_ADC_Init+0x1d4>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80033a4:	e009      	b.n	80033ba <HAL_ADC_Init+0x6a>
    HAL_ADC_MspInit(hadc);
 80033a6:	f7fd fd77 	bl	8000e98 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	2300      	movs	r3, #0
 80033ac:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80033ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80033b2:	e7d7      	b.n	8003364 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <HAL_ADC_Init+0x64>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033c0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80033c8:	d178      	bne.n	80034bc <HAL_ADC_Init+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033cc:	f042 0210 	orr.w	r2, r2, #16
 80033d0:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033da:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	f012 0f04 	tst.w	r2, #4
 80033e2:	d06d      	beq.n	80034c0 <HAL_ADC_Init+0x170>
 80033e4:	2101      	movs	r1, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033e8:	f012 0f10 	tst.w	r2, #16
 80033ec:	f040 808e 	bne.w	800350c <HAL_ADC_Init+0x1bc>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033f0:	2900      	cmp	r1, #0
 80033f2:	f040 808b 	bne.w	800350c <HAL_ADC_Init+0x1bc>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80033f8:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80033fc:	f042 0202 	orr.w	r2, r2, #2
 8003400:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f013 0f01 	tst.w	r3, #1
 8003408:	d10b      	bne.n	8003422 <HAL_ADC_Init+0xd2>
 800340a:	4b47      	ldr	r3, [pc, #284]	; (8003528 <HAL_ADC_Init+0x1d8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f013 0f01 	tst.w	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003414:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003416:	4945      	ldr	r1, [pc, #276]	; (800352c <HAL_ADC_Init+0x1dc>)
 8003418:	688a      	ldr	r2, [r1, #8]
 800341a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003422:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8003424:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003426:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 800342a:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 800342c:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 800342e:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8003430:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003432:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800343a:	2a01      	cmp	r2, #1
 800343c:	d042      	beq.n	80034c4 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800343e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003440:	b122      	cbz	r2, 800344c <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003442:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003446:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003448:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800344a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800344c:	6821      	ldr	r1, [r4, #0]
 800344e:	68cd      	ldr	r5, [r1, #12]
 8003450:	4a37      	ldr	r2, [pc, #220]	; (8003530 <HAL_ADC_Init+0x1e0>)
 8003452:	402a      	ands	r2, r5
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003458:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	f012 0f04 	tst.w	r2, #4
 8003460:	d035      	beq.n	80034ce <HAL_ADC_Init+0x17e>
 8003462:	2101      	movs	r1, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	f012 0f08 	tst.w	r2, #8
 800346a:	d032      	beq.n	80034d2 <HAL_ADC_Init+0x182>
 800346c:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800346e:	b9b1      	cbnz	r1, 800349e <HAL_ADC_Init+0x14e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003470:	b9aa      	cbnz	r2, 800349e <HAL_ADC_Init+0x14e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003472:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003474:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003478:	0052      	lsls	r2, r2, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800347a:	ea42 3181 	orr.w	r1, r2, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003484:	f022 0202 	bic.w	r2, r2, #2
 8003488:	430a      	orrs	r2, r1
 800348a:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800348c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003490:	2b01      	cmp	r3, #1
 8003492:	d020      	beq.n	80034d6 <HAL_ADC_Init+0x186>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	6913      	ldr	r3, [r2, #16]
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d02a      	beq.n	80034fa <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034b0:	f023 0303 	bic.w	r3, r3, #3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6563      	str	r3, [r4, #84]	; 0x54
 80034ba:	e02c      	b.n	8003516 <HAL_ADC_Init+0x1c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034bc:	2000      	movs	r0, #0
 80034be:	e78d      	b.n	80033dc <HAL_ADC_Init+0x8c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c0:	2100      	movs	r1, #0
 80034c2:	e790      	b.n	80033e6 <HAL_ADC_Init+0x96>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034c6:	3a01      	subs	r2, #1
 80034c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80034cc:	e7b7      	b.n	800343e <HAL_ADC_Init+0xee>
 80034ce:	2100      	movs	r1, #0
 80034d0:	e7c8      	b.n	8003464 <HAL_ADC_Init+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034d2:	2200      	movs	r2, #0
 80034d4:	e7cb      	b.n	800346e <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2,
 80034d6:	6821      	ldr	r1, [r4, #0]
 80034d8:	690b      	ldr	r3, [r1, #16]
 80034da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034e4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80034e6:	432a      	orrs	r2, r5
 80034e8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80034ea:	432a      	orrs	r2, r5
 80034ec:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80034ee:	432a      	orrs	r2, r5
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	610b      	str	r3, [r1, #16]
 80034f8:	e7d1      	b.n	800349e <HAL_ADC_Init+0x14e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80034fe:	f023 030f 	bic.w	r3, r3, #15
 8003502:	69e2      	ldr	r2, [r4, #28]
 8003504:	3a01      	subs	r2, #1
 8003506:	4313      	orrs	r3, r2
 8003508:	630b      	str	r3, [r1, #48]	; 0x30
 800350a:	e7d0      	b.n	80034ae <HAL_ADC_Init+0x15e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800350e:	f043 0310 	orr.w	r3, r3, #16
 8003512:	6563      	str	r3, [r4, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003514:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003516:	b003      	add	sp, #12
 8003518:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
 800351c:	e7fb      	b.n	8003516 <HAL_ADC_Init+0x1c6>
 800351e:	bf00      	nop
 8003520:	20000018 	.word	0x20000018
 8003524:	053e2d63 	.word	0x053e2d63
 8003528:	50040000 	.word	0x50040000
 800352c:	50040300 	.word	0x50040300
 8003530:	fff0c007 	.word	0xfff0c007

08003534 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003534:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003536:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003538:	f7fd ff38 	bl	80013ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800353c:	bd08      	pop	{r3, pc}

0800353e <ADC_DMAConvCplt>:
{
 800353e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003540:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003544:	f012 0f50 	tst.w	r2, #80	; 0x50
 8003548:	d131      	bne.n	80035ae <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	6811      	ldr	r1, [r2, #0]
 8003556:	f011 0f08 	tst.w	r1, #8
 800355a:	d014      	beq.n	8003586 <ADC_DMAConvCplt+0x48>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800355c:	68d1      	ldr	r1, [r2, #12]
 800355e:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8003562:	d120      	bne.n	80035a6 <ADC_DMAConvCplt+0x68>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800356a:	d11c      	bne.n	80035a6 <ADC_DMAConvCplt+0x68>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800356c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800356e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003576:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800357a:	d114      	bne.n	80035a6 <ADC_DMAConvCplt+0x68>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
 8003584:	e00f      	b.n	80035a6 <ADC_DMAConvCplt+0x68>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003586:	68d2      	ldr	r2, [r2, #12]
 8003588:	f012 0f02 	tst.w	r2, #2
 800358c:	d10b      	bne.n	80035a6 <ADC_DMAConvCplt+0x68>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800358e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003596:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003598:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800359c:	d103      	bne.n	80035a6 <ADC_DMAConvCplt+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fef0 	bl	800138c <HAL_ADC_ConvCpltCallback>
}
 80035ac:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b0:	f012 0f10 	tst.w	r2, #16
 80035b4:	d103      	bne.n	80035be <ADC_DMAConvCplt+0x80>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	4798      	blx	r3
}
 80035bc:	e7f6      	b.n	80035ac <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fedc 	bl	800137c <HAL_ADC_ErrorCallback>
 80035c4:	e7f2      	b.n	80035ac <ADC_DMAConvCplt+0x6e>

080035c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035c6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80035cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d0:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035d2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035da:	f7fd fecf 	bl	800137c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035de:	bd08      	pop	{r3, pc}

080035e0 <HAL_ADC_ConfigChannel>:
{
 80035e0:	b4f0      	push	{r4, r5, r6, r7}
 80035e2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80035e4:	2200      	movs	r2, #0
 80035e6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80035e8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80035ec:	2a01      	cmp	r2, #1
 80035ee:	f000 8204 	beq.w	80039fa <HAL_ADC_ConfigChannel+0x41a>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2201      	movs	r2, #1
 80035f6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fa:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fc:	68b0      	ldr	r0, [r6, #8]
 80035fe:	f010 0f04 	tst.w	r0, #4
 8003602:	d00a      	beq.n	800361a <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800360c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003614:	b002      	add	sp, #8
 8003616:	bcf0      	pop	{r4, r5, r6, r7}
 8003618:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800361a:	684d      	ldr	r5, [r1, #4]
 800361c:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800361e:	3630      	adds	r6, #48	; 0x30
 8003620:	0a2a      	lsrs	r2, r5, #8
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003628:	58b0      	ldr	r0, [r6, r2]
 800362a:	f005 051f 	and.w	r5, r5, #31
 800362e:	271f      	movs	r7, #31
 8003630:	40af      	lsls	r7, r5
 8003632:	ea20 0007 	bic.w	r0, r0, r7
 8003636:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800363a:	40ac      	lsls	r4, r5
 800363c:	4320      	orrs	r0, r4
 800363e:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003640:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003642:	6890      	ldr	r0, [r2, #8]
 8003644:	f010 0f04 	tst.w	r0, #4
 8003648:	d06a      	beq.n	8003720 <HAL_ADC_ConfigChannel+0x140>
 800364a:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800364c:	6894      	ldr	r4, [r2, #8]
 800364e:	f014 0f08 	tst.w	r4, #8
 8003652:	d067      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x144>
 8003654:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003656:	bb50      	cbnz	r0, 80036ae <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003658:	bb4c      	cbnz	r4, 80036ae <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800365a:	680e      	ldr	r6, [r1, #0]
 800365c:	688d      	ldr	r5, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800365e:	3214      	adds	r2, #20
 8003660:	0e70      	lsrs	r0, r6, #25
 8003662:	0080      	lsls	r0, r0, #2
 8003664:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003668:	5814      	ldr	r4, [r2, r0]
 800366a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800366e:	2707      	movs	r7, #7
 8003670:	40b7      	lsls	r7, r6
 8003672:	ea24 0407 	bic.w	r4, r4, r7
 8003676:	40b5      	lsls	r5, r6
 8003678:	432c      	orrs	r4, r5
 800367a:	5014      	str	r4, [r2, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800367c:	694c      	ldr	r4, [r1, #20]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	68c2      	ldr	r2, [r0, #12]
 8003682:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800368c:	690d      	ldr	r5, [r1, #16]
 800368e:	2d04      	cmp	r5, #4
 8003690:	d04a      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003692:	680e      	ldr	r6, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003694:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8003696:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800369a:	4cb6      	ldr	r4, [pc, #728]	; (8003974 <HAL_ADC_ConfigChannel+0x394>)
 800369c:	403c      	ands	r4, r7
 800369e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80036a2:	4332      	orrs	r2, r6
 80036a4:	4314      	orrs	r4, r2
 80036a6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80036aa:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ae:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036b0:	6882      	ldr	r2, [r0, #8]
 80036b2:	f012 0f01 	tst.w	r2, #1
 80036b6:	f040 819a 	bne.w	80039ee <HAL_ADC_ConfigChannel+0x40e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036ba:	680a      	ldr	r2, [r1, #0]
 80036bc:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80036be:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80036c2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80036c6:	ea24 0406 	bic.w	r4, r4, r6
 80036ca:	f005 0618 	and.w	r6, r5, #24
 80036ce:	4daa      	ldr	r5, [pc, #680]	; (8003978 <HAL_ADC_ConfigChannel+0x398>)
 80036d0:	40f5      	lsrs	r5, r6
 80036d2:	402a      	ands	r2, r5
 80036d4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80036d8:	4322      	orrs	r2, r4
 80036da:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036de:	68c8      	ldr	r0, [r1, #12]
 80036e0:	4aa6      	ldr	r2, [pc, #664]	; (800397c <HAL_ADC_ConfigChannel+0x39c>)
 80036e2:	4290      	cmp	r0, r2
 80036e4:	d07b      	beq.n	80037de <HAL_ADC_ConfigChannel+0x1fe>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036e6:	680a      	ldr	r2, [r1, #0]
 80036e8:	49a5      	ldr	r1, [pc, #660]	; (8003980 <HAL_ADC_ConfigChannel+0x3a0>)
 80036ea:	420a      	tst	r2, r1
 80036ec:	f000 8181 	beq.w	80039f2 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036f0:	49a4      	ldr	r1, [pc, #656]	; (8003984 <HAL_ADC_ConfigChannel+0x3a4>)
 80036f2:	6889      	ldr	r1, [r1, #8]
 80036f4:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f8:	48a3      	ldr	r0, [pc, #652]	; (8003988 <HAL_ADC_ConfigChannel+0x3a8>)
 80036fa:	6880      	ldr	r0, [r0, #8]
 80036fc:	f010 0f01 	tst.w	r0, #1
 8003700:	f040 810b 	bne.w	800391a <HAL_ADC_ConfigChannel+0x33a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003704:	48a1      	ldr	r0, [pc, #644]	; (800398c <HAL_ADC_ConfigChannel+0x3ac>)
 8003706:	4282      	cmp	r2, r0
 8003708:	f000 810d 	beq.w	8003926 <HAL_ADC_ConfigChannel+0x346>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800370c:	48a0      	ldr	r0, [pc, #640]	; (8003990 <HAL_ADC_ConfigChannel+0x3b0>)
 800370e:	4282      	cmp	r2, r0
 8003710:	f000 8146 	beq.w	80039a0 <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003714:	489f      	ldr	r0, [pc, #636]	; (8003994 <HAL_ADC_ConfigChannel+0x3b4>)
 8003716:	4282      	cmp	r2, r0
 8003718:	f000 8156 	beq.w	80039c8 <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2000      	movs	r0, #0
 800371e:	e776      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003720:	2000      	movs	r0, #0
 8003722:	e793      	b.n	800364c <HAL_ADC_ConfigChannel+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003724:	2400      	movs	r4, #0
 8003726:	e796      	b.n	8003656 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003728:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800372a:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800372c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003730:	680a      	ldr	r2, [r1, #0]
 8003732:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003736:	bb7d      	cbnz	r5, 8003798 <HAL_ADC_ConfigChannel+0x1b8>
 8003738:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800373c:	4294      	cmp	r4, r2
 800373e:	d030      	beq.n	80037a2 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003740:	681c      	ldr	r4, [r3, #0]
 8003742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003744:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003746:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800374a:	680a      	ldr	r2, [r1, #0]
 800374c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003750:	bb65      	cbnz	r5, 80037ac <HAL_ADC_ConfigChannel+0x1cc>
 8003752:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003756:	4290      	cmp	r0, r2
 8003758:	d02d      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x1d6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375a:	681c      	ldr	r4, [r3, #0]
 800375c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800375e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003760:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003764:	680a      	ldr	r2, [r1, #0]
 8003766:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800376a:	bb4d      	cbnz	r5, 80037c0 <HAL_ADC_ConfigChannel+0x1e0>
 800376c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003770:	4290      	cmp	r0, r2
 8003772:	d02a      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x1ea>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003774:	681c      	ldr	r4, [r3, #0]
 8003776:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003778:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800377a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800377e:	680a      	ldr	r2, [r1, #0]
 8003780:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003784:	bb35      	cbnz	r5, 80037d4 <HAL_ADC_ConfigChannel+0x1f4>
 8003786:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800378a:	4290      	cmp	r0, r2
 800378c:	d18f      	bne.n	80036ae <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 800378e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003790:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003794:	66e2      	str	r2, [r4, #108]	; 0x6c
 8003796:	e78a      	b.n	80036ae <HAL_ADC_ConfigChannel+0xce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800379c:	fab2 f282 	clz	r2, r2
 80037a0:	e7cc      	b.n	800373c <HAL_ADC_ConfigChannel+0x15c>
 80037a2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80037a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037a8:	6602      	str	r2, [r0, #96]	; 0x60
 80037aa:	e7c9      	b.n	8003740 <HAL_ADC_ConfigChannel+0x160>
 80037ac:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	e7cf      	b.n	8003756 <HAL_ADC_ConfigChannel+0x176>
 80037b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037bc:	6662      	str	r2, [r4, #100]	; 0x64
 80037be:	e7cc      	b.n	800375a <HAL_ADC_ConfigChannel+0x17a>
 80037c0:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	e7d2      	b.n	8003770 <HAL_ADC_ConfigChannel+0x190>
 80037ca:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80037cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037d0:	66a2      	str	r2, [r4, #104]	; 0x68
 80037d2:	e7cf      	b.n	8003774 <HAL_ADC_ConfigChannel+0x194>
 80037d4:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	e7d5      	b.n	800378a <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037de:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e0:	680a      	ldr	r2, [r1, #0]
 80037e2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80037e6:	bb96      	cbnz	r6, 800384e <HAL_ADC_ConfigChannel+0x26e>
 80037e8:	0e90      	lsrs	r0, r2, #26
 80037ea:	3001      	adds	r0, #1
 80037ec:	f000 001f 	and.w	r0, r0, #31
 80037f0:	2809      	cmp	r0, #9
 80037f2:	bf8c      	ite	hi
 80037f4:	2000      	movhi	r0, #0
 80037f6:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d052      	beq.n	80038a2 <HAL_ADC_ConfigChannel+0x2c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037fc:	bb9e      	cbnz	r6, 8003866 <HAL_ADC_ConfigChannel+0x286>
 80037fe:	0e94      	lsrs	r4, r2, #26
 8003800:	3401      	adds	r4, #1
 8003802:	06a4      	lsls	r4, r4, #26
 8003804:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003808:	bbb6      	cbnz	r6, 8003878 <HAL_ADC_ConfigChannel+0x298>
 800380a:	0e90      	lsrs	r0, r2, #26
 800380c:	3001      	adds	r0, #1
 800380e:	f000 071f 	and.w	r7, r0, #31
 8003812:	2001      	movs	r0, #1
 8003814:	40b8      	lsls	r0, r7
 8003816:	4304      	orrs	r4, r0
 8003818:	bbc6      	cbnz	r6, 800388c <HAL_ADC_ConfigChannel+0x2ac>
 800381a:	0e92      	lsrs	r2, r2, #26
 800381c:	3201      	adds	r2, #1
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003826:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	4322      	orrs	r2, r4
 800382a:	688c      	ldr	r4, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800382c:	3514      	adds	r5, #20
 800382e:	0e50      	lsrs	r0, r2, #25
 8003830:	0080      	lsls	r0, r0, #2
 8003832:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003836:	582e      	ldr	r6, [r5, r0]
 8003838:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800383c:	2707      	movs	r7, #7
 800383e:	4097      	lsls	r7, r2
 8003840:	ea26 0607 	bic.w	r6, r6, r7
 8003844:	fa04 f202 	lsl.w	r2, r4, r2
 8003848:	4332      	orrs	r2, r6
 800384a:	502a      	str	r2, [r5, r0]
 800384c:	e74b      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x106>
 800384e:	fa92 f0a2 	rbit	r0, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003852:	fab0 f080 	clz	r0, r0
 8003856:	3001      	adds	r0, #1
 8003858:	f000 001f 	and.w	r0, r0, #31
 800385c:	2809      	cmp	r0, #9
 800385e:	bf8c      	ite	hi
 8003860:	2000      	movhi	r0, #0
 8003862:	2001      	movls	r0, #1
 8003864:	e7c8      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x218>
 8003866:	fa92 f4a2 	rbit	r4, r2
 800386a:	fab4 f484 	clz	r4, r4
 800386e:	3401      	adds	r4, #1
 8003870:	06a4      	lsls	r4, r4, #26
 8003872:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003876:	e7c7      	b.n	8003808 <HAL_ADC_ConfigChannel+0x228>
 8003878:	fa92 f0a2 	rbit	r0, r2
 800387c:	fab0 f080 	clz	r0, r0
 8003880:	3001      	adds	r0, #1
 8003882:	f000 071f 	and.w	r7, r0, #31
 8003886:	2001      	movs	r0, #1
 8003888:	40b8      	lsls	r0, r7
 800388a:	e7c4      	b.n	8003816 <HAL_ADC_ConfigChannel+0x236>
 800388c:	fa92 f2a2 	rbit	r2, r2
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	3201      	adds	r2, #1
 8003896:	f002 021f 	and.w	r2, r2, #31
 800389a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800389e:	0512      	lsls	r2, r2, #20
 80038a0:	e7c2      	b.n	8003828 <HAL_ADC_ConfigChannel+0x248>
 80038a2:	b9ce      	cbnz	r6, 80038d8 <HAL_ADC_ConfigChannel+0x2f8>
 80038a4:	0e94      	lsrs	r4, r2, #26
 80038a6:	3401      	adds	r4, #1
 80038a8:	06a4      	lsls	r4, r4, #26
 80038aa:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80038ae:	b9e6      	cbnz	r6, 80038ea <HAL_ADC_ConfigChannel+0x30a>
 80038b0:	0e90      	lsrs	r0, r2, #26
 80038b2:	3001      	adds	r0, #1
 80038b4:	f000 071f 	and.w	r7, r0, #31
 80038b8:	2001      	movs	r0, #1
 80038ba:	40b8      	lsls	r0, r7
 80038bc:	4304      	orrs	r4, r0
 80038be:	b9f6      	cbnz	r6, 80038fe <HAL_ADC_ConfigChannel+0x31e>
 80038c0:	0e90      	lsrs	r0, r2, #26
 80038c2:	3001      	adds	r0, #1
 80038c4:	f000 001f 	and.w	r0, r0, #31
 80038c8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80038cc:	3a1e      	subs	r2, #30
 80038ce:	0512      	lsls	r2, r2, #20
 80038d0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d4:	4322      	orrs	r2, r4
 80038d6:	e7a8      	b.n	800382a <HAL_ADC_ConfigChannel+0x24a>
 80038d8:	fa92 f4a2 	rbit	r4, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038dc:	fab4 f484 	clz	r4, r4
 80038e0:	3401      	adds	r4, #1
 80038e2:	06a4      	lsls	r4, r4, #26
 80038e4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80038e8:	e7e1      	b.n	80038ae <HAL_ADC_ConfigChannel+0x2ce>
 80038ea:	fa92 f0a2 	rbit	r0, r2
 80038ee:	fab0 f080 	clz	r0, r0
 80038f2:	3001      	adds	r0, #1
 80038f4:	f000 071f 	and.w	r7, r0, #31
 80038f8:	2001      	movs	r0, #1
 80038fa:	40b8      	lsls	r0, r7
 80038fc:	e7de      	b.n	80038bc <HAL_ADC_ConfigChannel+0x2dc>
 80038fe:	fa92 f0a2 	rbit	r0, r2
 8003902:	fab0 f080 	clz	r0, r0
 8003906:	3001      	adds	r0, #1
 8003908:	f000 001f 	and.w	r0, r0, #31
 800390c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003910:	3a1e      	subs	r2, #30
 8003912:	0512      	lsls	r2, r2, #20
 8003914:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003918:	e7dc      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x2f4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391c:	f042 0220 	orr.w	r2, r2, #32
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003922:	2001      	movs	r0, #1
 8003924:	e673      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003926:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800392a:	f47f aeef 	bne.w	800370c <HAL_ADC_ConfigChannel+0x12c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_ADC_ConfigChannel+0x3a8>)
 8003932:	4291      	cmp	r1, r2
 8003934:	d001      	beq.n	800393a <HAL_ADC_ConfigChannel+0x35a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003936:	2000      	movs	r0, #0
 8003938:	e669      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800393a:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800393e:	4811      	ldr	r0, [pc, #68]	; (8003984 <HAL_ADC_ConfigChannel+0x3a4>)
 8003940:	6881      	ldr	r1, [r0, #8]
 8003942:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003946:	430a      	orrs	r2, r1
 8003948:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800394a:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_ADC_ConfigChannel+0x3b8>)
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	0992      	lsrs	r2, r2, #6
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_ADC_ConfigChannel+0x3bc>)
 8003952:	fba1 1202 	umull	r1, r2, r1, r2
 8003956:	0992      	lsrs	r2, r2, #6
 8003958:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800395c:	0091      	lsls	r1, r2, #2
 800395e:	9101      	str	r1, [sp, #4]
              while(wait_loop_index != 0UL)
 8003960:	e002      	b.n	8003968 <HAL_ADC_ConfigChannel+0x388>
                wait_loop_index--;
 8003962:	9a01      	ldr	r2, [sp, #4]
 8003964:	3a01      	subs	r2, #1
 8003966:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8003968:	9a01      	ldr	r2, [sp, #4]
 800396a:	2a00      	cmp	r2, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x382>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2000      	movs	r0, #0
 8003970:	e64d      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
 8003972:	bf00      	nop
 8003974:	03fff000 	.word	0x03fff000
 8003978:	0007ffff 	.word	0x0007ffff
 800397c:	407f0000 	.word	0x407f0000
 8003980:	80080000 	.word	0x80080000
 8003984:	50040300 	.word	0x50040300
 8003988:	50040000 	.word	0x50040000
 800398c:	c7520000 	.word	0xc7520000
 8003990:	cb840000 	.word	0xcb840000
 8003994:	80000001 	.word	0x80000001
 8003998:	20000018 	.word	0x20000018
 800399c:	053e2d63 	.word	0x053e2d63
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a0:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80039a4:	f47f aeb6 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x134>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <HAL_ADC_ConfigChannel+0x420>)
 80039ac:	4291      	cmp	r1, r2
 80039ae:	d001      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x3d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b0:	2000      	movs	r0, #0
 80039b2:	e62c      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039b4:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 80039b8:	4812      	ldr	r0, [pc, #72]	; (8003a04 <HAL_ADC_ConfigChannel+0x424>)
 80039ba:	6881      	ldr	r1, [r0, #8]
 80039bc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80039c0:	430a      	orrs	r2, r1
 80039c2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c4:	2000      	movs	r0, #0
 80039c6:	e622      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039c8:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80039cc:	d113      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x416>
            if (ADC_VREFINT_INSTANCE(hadc))
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_ADC_ConfigChannel+0x420>)
 80039d2:	4291      	cmp	r1, r2
 80039d4:	d001      	beq.n	80039da <HAL_ADC_ConfigChannel+0x3fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d6:	2000      	movs	r0, #0
 80039d8:	e619      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039da:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <HAL_ADC_ConfigChannel+0x424>)
 80039e0:	6881      	ldr	r1, [r0, #8]
 80039e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80039e6:	430a      	orrs	r2, r1
 80039e8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ea:	2000      	movs	r0, #0
 80039ec:	e60f      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e60d      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
 80039f2:	2000      	movs	r0, #0
 80039f4:	e60b      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e609      	b.n	800360e <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80039fa:	2002      	movs	r0, #2
 80039fc:	e60a      	b.n	8003614 <HAL_ADC_ConfigChannel+0x34>
 80039fe:	bf00      	nop
 8003a00:	50040000 	.word	0x50040000
 8003a04:	50040300 	.word	0x50040300

08003a08 <ADC_ConversionStop>:
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a0c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	f012 0f04 	tst.w	r2, #4
 8003a14:	d052      	beq.n	8003abc <ADC_ConversionStop+0xb4>
 8003a16:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	f012 0f08 	tst.w	r2, #8
 8003a1e:	d04f      	beq.n	8003ac0 <ADC_ConversionStop+0xb8>
 8003a20:	2201      	movs	r2, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003a22:	b908      	cbnz	r0, 8003a28 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a24:	2a00      	cmp	r2, #0
 8003a26:	d06b      	beq.n	8003b00 <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a2e:	d004      	beq.n	8003a3a <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a30:	8b20      	ldrh	r0, [r4, #24]
 8003a32:	f240 1201 	movw	r2, #257	; 0x101
 8003a36:	4290      	cmp	r0, r2
 8003a38:	d04e      	beq.n	8003ad8 <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a3a:	2902      	cmp	r1, #2
 8003a3c:	d010      	beq.n	8003a60 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a3e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	f012 0f04 	tst.w	r2, #4
 8003a46:	d00b      	beq.n	8003a60 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	f012 0f02 	tst.w	r2, #2
 8003a4e:	d107      	bne.n	8003a60 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a5a:	f042 0210 	orr.w	r2, r2, #16
 8003a5e:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a60:	2901      	cmp	r1, #1
 8003a62:	d010      	beq.n	8003a86 <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a64:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f012 0f08 	tst.w	r2, #8
 8003a6c:	d00b      	beq.n	8003a86 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	f012 0f02 	tst.w	r2, #2
 8003a74:	d107      	bne.n	8003a86 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a7c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a80:	f042 0220 	orr.w	r2, r2, #32
 8003a84:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8003a86:	2902      	cmp	r1, #2
 8003a88:	d036      	beq.n	8003af8 <ADC_ConversionStop+0xf0>
 8003a8a:	2903      	cmp	r1, #3
 8003a8c:	d132      	bne.n	8003af4 <ADC_ConversionStop+0xec>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a8e:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8003a90:	f7ff fc3e 	bl	8003310 <HAL_GetTick>
 8003a94:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	422b      	tst	r3, r5
 8003a9c:	d02e      	beq.n	8003afc <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a9e:	f7ff fc37 	bl	8003310 <HAL_GetTick>
 8003aa2:	1b80      	subs	r0, r0, r6
 8003aa4:	2805      	cmp	r0, #5
 8003aa6:	d9f6      	bls.n	8003a96 <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aaa:	f043 0310 	orr.w	r3, r3, #16
 8003aae:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003ab8:	2001      	movs	r0, #1
 8003aba:	e020      	b.n	8003afe <ADC_ConversionStop+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003abc:	2000      	movs	r0, #0
 8003abe:	e7ab      	b.n	8003a18 <ADC_ConversionStop+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	e7ae      	b.n	8003a22 <ADC_ConversionStop+0x1a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ac6:	f043 0310 	orr.w	r3, r3, #16
 8003aca:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	e012      	b.n	8003afe <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003ad8:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ae0:	d104      	bne.n	8003aec <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <ADC_ConversionStop+0xfc>)
 8003ae4:	428a      	cmp	r2, r1
 8003ae6:	d8ed      	bhi.n	8003ac4 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 8003ae8:	3201      	adds	r2, #1
 8003aea:	e7f6      	b.n	8003ada <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003af0:	2101      	movs	r1, #1
 8003af2:	e7a4      	b.n	8003a3e <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003af4:	2504      	movs	r5, #4
        break;
 8003af6:	e7cb      	b.n	8003a90 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003af8:	2508      	movs	r5, #8
 8003afa:	e7c9      	b.n	8003a90 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003b00:	2000      	movs	r0, #0
 8003b02:	e7fc      	b.n	8003afe <ADC_ConversionStop+0xf6>
 8003b04:	a33fffff 	.word	0xa33fffff

08003b08 <ADC_Enable>:
{
 8003b08:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b0a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	f012 0f01 	tst.w	r2, #1
 8003b12:	d13d      	bne.n	8003b90 <ADC_Enable+0x88>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <ADC_Enable+0x8c>)
 8003b18:	4211      	tst	r1, r2
 8003b1a:	d009      	beq.n	8003b30 <ADC_Enable+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003b1e:	f043 0310 	orr.w	r3, r3, #16
 8003b22:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e030      	b.n	8003b92 <ADC_Enable+0x8a>
 8003b30:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003b42:	f7ff fbe5 	bl	8003310 <HAL_GetTick>
 8003b46:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b48:	e004      	b.n	8003b54 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b4a:	f7ff fbe1 	bl	8003310 <HAL_GetTick>
 8003b4e:	1b40      	subs	r0, r0, r5
 8003b50:	2802      	cmp	r0, #2
 8003b52:	d811      	bhi.n	8003b78 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	f012 0f01 	tst.w	r2, #1
 8003b5c:	d116      	bne.n	8003b8c <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	f012 0f01 	tst.w	r2, #1
 8003b64:	d1f1      	bne.n	8003b4a <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b6c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	e7e8      	b.n	8003b4a <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b7a:	f043 0310 	orr.w	r3, r3, #16
 8003b7e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e002      	b.n	8003b92 <ADC_Enable+0x8a>
  return HAL_OK;
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e000      	b.n	8003b92 <ADC_Enable+0x8a>
 8003b90:	2000      	movs	r0, #0
}
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	8000003f 	.word	0x8000003f

08003b98 <HAL_ADC_Start_DMA>:
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b9a:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b9c:	68a4      	ldr	r4, [r4, #8]
 8003b9e:	f014 0f04 	tst.w	r4, #4
 8003ba2:	d150      	bne.n	8003c46 <HAL_ADC_Start_DMA+0xae>
    __HAL_LOCK(hadc);
 8003ba4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d04f      	beq.n	8003c4c <HAL_ADC_Start_DMA+0xb4>
 8003bac:	4615      	mov	r5, r2
 8003bae:	460e      	mov	r6, r1
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 8003bb8:	f7ff ffa6 	bl	8003b08 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d13d      	bne.n	8003c3e <HAL_ADC_Start_DMA+0xa6>
        ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003bd8:	d02e      	beq.n	8003c38 <HAL_ADC_Start_DMA+0xa0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bdc:	f023 0306 	bic.w	r3, r3, #6
 8003be0:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003be2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003be4:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <HAL_ADC_Start_DMA+0xb8>)
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003be8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <HAL_ADC_Start_DMA+0xbc>)
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_ADC_Start_DMA+0xc0>)
 8003bf2:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	221c      	movs	r2, #28
 8003bf8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	6853      	ldr	r3, [r2, #4]
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	68d3      	ldr	r3, [r2, #12]
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c14:	6821      	ldr	r1, [r4, #0]
 8003c16:	462b      	mov	r3, r5
 8003c18:	4632      	mov	r2, r6
 8003c1a:	3140      	adds	r1, #64	; 0x40
 8003c1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003c1e:	f000 fa05 	bl	800402c <HAL_DMA_Start_IT>
 8003c22:	4603      	mov	r3, r0
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c24:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003c26:	688a      	ldr	r2, [r1, #8]
 8003c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c2c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003c30:	f042 0204 	orr.w	r2, r2, #4
 8003c34:	608a      	str	r2, [r1, #8]
 8003c36:	e007      	b.n	8003c48 <HAL_ADC_Start_DMA+0xb0>
          ADC_CLEAR_ERRORCODE(hadc);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c3c:	e7d1      	b.n	8003be2 <HAL_ADC_Start_DMA+0x4a>
        __HAL_UNLOCK(hadc);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8003c44:	e000      	b.n	8003c48 <HAL_ADC_Start_DMA+0xb0>
    tmp_hal_status = HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e7fb      	b.n	8003c48 <HAL_ADC_Start_DMA+0xb0>
 8003c50:	0800353f 	.word	0x0800353f
 8003c54:	08003535 	.word	0x08003535
 8003c58:	080035c7 	.word	0x080035c7

08003c5c <ADC_Disable>:
{
 8003c5c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c5e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	f012 0f02 	tst.w	r2, #2
 8003c66:	d015      	beq.n	8003c94 <ADC_Disable+0x38>
 8003c68:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	f012 0f01 	tst.w	r2, #1
 8003c70:	d037      	beq.n	8003ce2 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d137      	bne.n	8003ce6 <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	f002 020d 	and.w	r2, r2, #13
 8003c7c:	2a01      	cmp	r2, #1
 8003c7e:	d00b      	beq.n	8003c98 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c80:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003c82:	f043 0310 	orr.w	r3, r3, #16
 8003c86:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
 8003c92:	e027      	b.n	8003ce4 <ADC_Disable+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c94:	2100      	movs	r1, #0
 8003c96:	e7e8      	b.n	8003c6a <ADC_Disable+0xe>
 8003c98:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ca0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ca4:	f042 0202 	orr.w	r2, r2, #2
 8003ca8:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003caa:	6803      	ldr	r3, [r0, #0]
 8003cac:	2203      	movs	r2, #3
 8003cae:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003cb0:	f7ff fb2e 	bl	8003310 <HAL_GetTick>
 8003cb4:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f013 0f01 	tst.w	r3, #1
 8003cbe:	d00e      	beq.n	8003cde <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cc0:	f7ff fb26 	bl	8003310 <HAL_GetTick>
 8003cc4:	1b40      	subs	r0, r0, r5
 8003cc6:	2802      	cmp	r0, #2
 8003cc8:	d9f5      	bls.n	8003cb6 <ADC_Disable+0x5a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ccc:	f043 0310 	orr.w	r3, r3, #16
 8003cd0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e002      	b.n	8003ce4 <ADC_Disable+0x88>
  return HAL_OK;
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e000      	b.n	8003ce4 <ADC_Disable+0x88>
 8003ce2:	2000      	movs	r0, #0
}
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7fc      	b.n	8003ce4 <ADC_Disable+0x88>

08003cea <HAL_ADC_Stop_DMA>:
{
 8003cea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8003cec:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d039      	beq.n	8003d68 <HAL_ADC_Stop_DMA+0x7e>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	f7ff fe83 	bl	8003a08 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003d02:	4605      	mov	r5, r0
 8003d04:	b9e8      	cbnz	r0, 8003d42 <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	68d3      	ldr	r3, [r2, #12]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003d10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003d12:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d017      	beq.n	8003d4c <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	6853      	ldr	r3, [r2, #4]
 8003d20:	f023 0310 	bic.w	r3, r3, #16
 8003d24:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8003d26:	b9dd      	cbnz	r5, 8003d60 <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7ff ff97 	bl	8003c5c <ADC_Disable>
 8003d2e:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8003d30:	b93d      	cbnz	r5, 8003d42 <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8003d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003d42:	2300      	movs	r3, #0
 8003d44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003d48:	4628      	mov	r0, r5
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003d4c:	f000 f9b8 	bl	80040c0 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8003d50:	4605      	mov	r5, r0
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d0e2      	beq.n	8003d1c <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5c:	6563      	str	r3, [r4, #84]	; 0x54
 8003d5e:	e7dd      	b.n	8003d1c <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 8003d60:	4620      	mov	r0, r4
 8003d62:	f7ff ff7b 	bl	8003c5c <ADC_Disable>
 8003d66:	e7e3      	b.n	8003d30 <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 8003d68:	2502      	movs	r5, #2
 8003d6a:	e7ed      	b.n	8003d48 <HAL_ADC_Stop_DMA+0x5e>

08003d6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003d6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d78:	0200      	lsls	r0, r0, #8
 8003d7a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d7e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003d80:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003d84:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003d88:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d90:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <HAL_NVIC_SetPriority+0x60>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9a:	f1c3 0407 	rsb	r4, r3, #7
 8003d9e:	2c04      	cmp	r4, #4
 8003da0:	bf28      	it	cs
 8003da2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da4:	1d1d      	adds	r5, r3, #4
 8003da6:	2d06      	cmp	r5, #6
 8003da8:	d918      	bls.n	8003ddc <HAL_NVIC_SetPriority+0x4c>
 8003daa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	f04f 35ff 	mov.w	r5, #4294967295
 8003db0:	fa05 f404 	lsl.w	r4, r5, r4
 8003db4:	ea21 0104 	bic.w	r1, r1, r4
 8003db8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dba:	fa05 f303 	lsl.w	r3, r5, r3
 8003dbe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	db0b      	blt.n	8003de0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	0109      	lsls	r1, r1, #4
 8003dca:	b2c9      	uxtb	r1, r1
 8003dcc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003dd0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003dd4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003dd8:	bc30      	pop	{r4, r5}
 8003dda:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e7e5      	b.n	8003dac <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	f000 000f 	and.w	r0, r0, #15
 8003de4:	0109      	lsls	r1, r1, #4
 8003de6:	b2c9      	uxtb	r1, r1
 8003de8:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <HAL_NVIC_SetPriority+0x64>)
 8003dea:	5419      	strb	r1, [r3, r0]
 8003dec:	e7f4      	b.n	8003dd8 <HAL_NVIC_SetPriority+0x48>
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00
 8003df4:	e000ed14 	.word	0xe000ed14

08003df8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	db07      	blt.n	8003e0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfc:	f000 021f 	and.w	r2, r0, #31
 8003e00:	0940      	lsrs	r0, r0, #5
 8003e02:	2301      	movs	r3, #1
 8003e04:	4093      	lsls	r3, r2
 8003e06:	4a02      	ldr	r2, [pc, #8]	; (8003e10 <HAL_NVIC_EnableIRQ+0x18>)
 8003e08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e14:	2800      	cmp	r0, #0
 8003e16:	db0c      	blt.n	8003e32 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e18:	f000 021f 	and.w	r2, r0, #31
 8003e1c:	0940      	lsrs	r0, r0, #5
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4093      	lsls	r3, r2
 8003e22:	3020      	adds	r0, #32
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_NVIC_DisableIRQ+0x20>)
 8003e26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e2e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003e38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e3c:	4905      	ldr	r1, [pc, #20]	; (8003e54 <HAL_NVIC_SystemReset+0x1c>)
 8003e3e:	68ca      	ldr	r2, [r1, #12]
 8003e40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_NVIC_SystemReset+0x20>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60cb      	str	r3, [r1, #12]
 8003e4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <HAL_NVIC_SystemReset+0x16>
 8003e52:	bf00      	nop
 8003e54:	e000ed00 	.word	0xe000ed00
 8003e58:	05fa0004 	.word	0x05fa0004

08003e5c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	db08      	blt.n	8003e72 <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e60:	f000 021f 	and.w	r2, r0, #31
 8003e64:	0940      	lsrs	r0, r0, #5
 8003e66:	2301      	movs	r3, #1
 8003e68:	4093      	lsls	r3, r2
 8003e6a:	3040      	adds	r0, #64	; 0x40
 8003e6c:	4a01      	ldr	r2, [pc, #4]	; (8003e74 <HAL_NVIC_SetPendingIRQ+0x18>)
 8003e6e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8003e72:	4770      	bx	lr
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	db08      	blt.n	8003e8e <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7c:	f000 021f 	and.w	r2, r0, #31
 8003e80:	0940      	lsrs	r0, r0, #5
 8003e82:	2301      	movs	r3, #1
 8003e84:	4093      	lsls	r3, r2
 8003e86:	3060      	adds	r0, #96	; 0x60
 8003e88:	4a01      	ldr	r2, [pc, #4]	; (8003e90 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003e8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003e8e:	4770      	bx	lr
 8003e90:	e000e100 	.word	0xe000e100

08003e94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e94:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e96:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003e98:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8003e9a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e9c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003e9e:	b114      	cbz	r4, 8003ea6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003ea2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003ea4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003ea8:	f004 051c 	and.w	r5, r4, #28
 8003eac:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003eae:	2401      	movs	r4, #1
 8003eb0:	40ac      	lsls	r4, r5
 8003eb2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eb4:	6804      	ldr	r4, [r0, #0]
 8003eb6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb8:	6883      	ldr	r3, [r0, #8]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d005      	beq.n	8003eca <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003ebe:	6803      	ldr	r3, [r0, #0]
 8003ec0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003ec2:	6803      	ldr	r3, [r0, #0]
 8003ec4:	60da      	str	r2, [r3, #12]
  }
}
 8003ec6:	bc70      	pop	{r4, r5, r6}
 8003ec8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ece:	6803      	ldr	r3, [r0, #0]
 8003ed0:	60d9      	str	r1, [r3, #12]
 8003ed2:	e7f8      	b.n	8003ec6 <DMA_SetConfig+0x32>

08003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d914      	bls.n	8003f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003edc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ede:	f022 0103 	bic.w	r1, r2, #3
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8003ee4:	440a      	add	r2, r1
 8003ee6:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	3b08      	subs	r3, #8
 8003eec:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003ef6:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003ef8:	f003 031c 	and.w	r3, r3, #28
 8003efc:	2201      	movs	r2, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003f04:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f08:	f022 0203 	bic.w	r2, r2, #3
 8003f0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003f10:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003f14:	6482      	str	r2, [r0, #72]	; 0x48
 8003f16:	e7e7      	b.n	8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x14>
 8003f18:	40020407 	.word	0x40020407
 8003f1c:	4002081c 	.word	0x4002081c
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	40020880 	.word	0x40020880

08003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f28:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8003f2c:	441a      	add	r2, r3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f32:	4a06      	ldr	r2, [pc, #24]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003f34:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f36:	3b01      	subs	r3, #1
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	1000823f 	.word	0x1000823f
 8003f4c:	40020940 	.word	0x40020940

08003f50 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d05c      	beq.n	800400e <HAL_DMA_Init+0xbe>
{
 8003f54:	b510      	push	{r4, lr}
 8003f56:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f58:	6802      	ldr	r2, [r0, #0]
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HAL_DMA_Init+0xc4>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d83e      	bhi.n	8003fde <HAL_DMA_Init+0x8e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f60:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <HAL_DMA_Init+0xc8>)
 8003f62:	4413      	add	r3, r2
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <HAL_DMA_Init+0xcc>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_DMA_Init+0xd0>)
 8003f72:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f74:	2302      	movs	r3, #2
 8003f76:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f7e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003f86:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f88:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8003f8a:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8c:	6920      	ldr	r0, [r4, #16]
 8003f8e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f90:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f92:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f94:	69a0      	ldr	r0, [r4, #24]
 8003f96:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f98:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f9c:	6a20      	ldr	r0, [r4, #32]
 8003f9e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8003fa0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003fa2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7ff ff95 	bl	8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003faa:	68a3      	ldr	r3, [r4, #8]
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d020      	beq.n	8003ff4 <HAL_DMA_Init+0xa4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003fb4:	7922      	ldrb	r2, [r4, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003fba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fbc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d919      	bls.n	8003ffa <HAL_DMA_Init+0xaa>
    hdma->DMAmuxRequestGen = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fca:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fcc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	2000      	movs	r0, #0
 8003fd0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003fd8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003fdc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_DMA_Init+0xd4>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_DMA_Init+0xcc>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_DMA_Init+0xd8>)
 8003ff0:	6403      	str	r3, [r0, #64]	; 0x40
 8003ff2:	e7bf      	b.n	8003f74 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	e7db      	b.n	8003fb2 <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f7ff ff94 	bl	8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004000:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004008:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	e7df      	b.n	8003fce <HAL_DMA_Init+0x7e>
    return HAL_ERROR;
 800400e:	2001      	movs	r0, #1
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40020407 	.word	0x40020407
 8004018:	bffdfff8 	.word	0xbffdfff8
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	40020000 	.word	0x40020000
 8004024:	bffdfbf8 	.word	0xbffdfbf8
 8004028:	40020400 	.word	0x40020400

0800402c <HAL_DMA_Start_IT>:
{
 800402c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800402e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004032:	2c01      	cmp	r4, #1
 8004034:	d042      	beq.n	80040bc <HAL_DMA_Start_IT+0x90>
 8004036:	2401      	movs	r4, #1
 8004038:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800403c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8004040:	b2e4      	uxtb	r4, r4
 8004042:	2c01      	cmp	r4, #1
 8004044:	d004      	beq.n	8004050 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8004046:	2300      	movs	r3, #0
 8004048:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 800404c:	2002      	movs	r0, #2
}
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004052:	2002      	movs	r0, #2
 8004054:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	2000      	movs	r0, #0
 800405a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	6828      	ldr	r0, [r5, #0]
 8004060:	f020 0001 	bic.w	r0, r0, #1
 8004064:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff ff14 	bl	8003e94 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800406c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800406e:	b1d3      	cbz	r3, 80040a6 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004070:	6822      	ldr	r2, [r4, #0]
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	f043 030e 	orr.w	r3, r3, #14
 8004078:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800407a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004082:	d003      	beq.n	800408c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800408c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800408e:	b11b      	cbz	r3, 8004098 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004096:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2000      	movs	r0, #0
 80040a4:	e7d3      	b.n	800404e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	f043 030a 	orr.w	r3, r3, #10
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e7de      	b.n	800407a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80040bc:	2002      	movs	r0, #2
 80040be:	e7c6      	b.n	800404e <HAL_DMA_Start_IT+0x22>

080040c0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80040c0:	4603      	mov	r3, r0
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d034      	beq.n	8004130 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	2a02      	cmp	r2, #2
 80040ce:	d006      	beq.n	80040de <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d0:	2204      	movs	r2, #4
 80040d2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80040d4:	2200      	movs	r2, #0
 80040d6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80040da:	2001      	movs	r0, #1
 80040dc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040de:	6801      	ldr	r1, [r0, #0]
 80040e0:	680a      	ldr	r2, [r1, #0]
 80040e2:	f022 020e 	bic.w	r2, r2, #14
 80040e6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040e8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040ea:	680a      	ldr	r2, [r1, #0]
 80040ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80040f2:	6801      	ldr	r1, [r0, #0]
 80040f4:	680a      	ldr	r2, [r1, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040fe:	f002 011c 	and.w	r1, r2, #28
 8004102:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004104:	2201      	movs	r2, #1
 8004106:	408a      	lsls	r2, r1
 8004108:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800410a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800410c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800410e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	b132      	cbz	r2, 8004122 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800411a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800411e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004120:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004128:	2000      	movs	r0, #0
 800412a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800412e:	4770      	bx	lr
    return HAL_ERROR;
 8004130:	2001      	movs	r0, #1
}
 8004132:	4770      	bx	lr

08004134 <HAL_DMA_Abort_IT>:
{
 8004134:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004136:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d003      	beq.n	8004148 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004140:	2304      	movs	r3, #4
 8004142:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004144:	2001      	movs	r0, #1
}
 8004146:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004148:	6802      	ldr	r2, [r0, #0]
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f023 030e 	bic.w	r3, r3, #14
 8004150:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004152:	6802      	ldr	r2, [r0, #0]
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800415c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004166:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004168:	f003 021c 	and.w	r2, r3, #28
 800416c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800416e:	2301      	movs	r3, #1
 8004170:	4093      	lsls	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004174:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004176:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004178:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800417a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800417c:	b133      	cbz	r3, 800418c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004186:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004188:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800418a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800418c:	2301      	movs	r3, #1
 800418e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004192:	2300      	movs	r3, #0
 8004194:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004198:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800419a:	b113      	cbz	r3, 80041a2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800419c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2000      	movs	r0, #0
 80041a0:	e7d1      	b.n	8004146 <HAL_DMA_Abort_IT+0x12>
 80041a2:	2000      	movs	r0, #0
 80041a4:	e7cf      	b.n	8004146 <HAL_DMA_Abort_IT+0x12>

080041a6 <HAL_DMA_IRQHandler>:
{
 80041a6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80041aa:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80041ac:	6804      	ldr	r4, [r0, #0]
 80041ae:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041b2:	f003 031c 	and.w	r3, r3, #28
 80041b6:	2204      	movs	r2, #4
 80041b8:	409a      	lsls	r2, r3
 80041ba:	420a      	tst	r2, r1
 80041bc:	d015      	beq.n	80041ea <HAL_DMA_IRQHandler+0x44>
 80041be:	f015 0f04 	tst.w	r5, #4
 80041c2:	d012      	beq.n	80041ea <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f013 0f20 	tst.w	r3, #32
 80041ca:	d103      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80041d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041d6:	f003 021c 	and.w	r2, r3, #28
 80041da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80041dc:	2304      	movs	r3, #4
 80041de:	4093      	lsls	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80041e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041e4:	b103      	cbz	r3, 80041e8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80041e6:	4798      	blx	r3
}
 80041e8:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041ea:	2202      	movs	r2, #2
 80041ec:	409a      	lsls	r2, r3
 80041ee:	420a      	tst	r2, r1
 80041f0:	d01c      	beq.n	800422c <HAL_DMA_IRQHandler+0x86>
 80041f2:	f015 0f02 	tst.w	r5, #2
 80041f6:	d019      	beq.n	800422c <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f013 0f20 	tst.w	r3, #32
 80041fe:	d106      	bne.n	800420e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f023 030a 	bic.w	r3, r3, #10
 8004206:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004208:	2301      	movs	r3, #1
 800420a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800420e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004210:	f003 021c 	and.w	r2, r3, #28
 8004214:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004216:	2302      	movs	r3, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800421c:	2300      	movs	r3, #0
 800421e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8004222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0df      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004228:	4798      	blx	r3
 800422a:	e7dd      	b.n	80041e8 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800422c:	2208      	movs	r2, #8
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	420b      	tst	r3, r1
 8004234:	d0d8      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x42>
 8004236:	f015 0f08 	tst.w	r5, #8
 800423a:	d0d5      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	f023 030e 	bic.w	r3, r3, #14
 8004242:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004244:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004246:	f003 031c 	and.w	r3, r3, #28
 800424a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800424c:	2201      	movs	r2, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004254:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004256:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800425a:	2300      	movs	r3, #0
 800425c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004260:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0c0      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004266:	4798      	blx	r3
  return;
 8004268:	e7be      	b.n	80041e8 <HAL_DMA_IRQHandler+0x42>
	...

0800426c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800426c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800426e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004270:	e03a      	b.n	80042e8 <HAL_GPIO_Init+0x7c>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004272:	2404      	movs	r4, #4
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0xc>
 8004276:	2400      	movs	r4, #0
 8004278:	40b4      	lsls	r4, r6
 800427a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800427c:	3502      	adds	r5, #2
 800427e:	4e58      	ldr	r6, [pc, #352]	; (80043e0 <HAL_GPIO_Init+0x174>)
 8004280:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004284:	4c57      	ldr	r4, [pc, #348]	; (80043e4 <HAL_GPIO_Init+0x178>)
 8004286:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800428a:	43d4      	mvns	r4, r2
 800428c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004290:	684f      	ldr	r7, [r1, #4]
 8004292:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004296:	d001      	beq.n	800429c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8004298:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 800429c:	4d51      	ldr	r5, [pc, #324]	; (80043e4 <HAL_GPIO_Init+0x178>)
 800429e:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 80042a2:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80042a6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042aa:	684f      	ldr	r7, [r1, #4]
 80042ac:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80042b0:	d001      	beq.n	80042b6 <HAL_GPIO_Init+0x4a>
        {
          temp |= iocurrent;
 80042b2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80042b6:	4d4b      	ldr	r5, [pc, #300]	; (80043e4 <HAL_GPIO_Init+0x178>)
 80042b8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042bc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80042be:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042c2:	684f      	ldr	r7, [r1, #4]
 80042c4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80042c8:	d001      	beq.n	80042ce <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80042ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80042ce:	4d45      	ldr	r5, [pc, #276]	; (80043e4 <HAL_GPIO_Init+0x178>)
 80042d0:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80042d2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80042d4:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042d6:	684e      	ldr	r6, [r1, #4]
 80042d8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80042dc:	d001      	beq.n	80042e2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80042de:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <HAL_GPIO_Init+0x178>)
 80042e4:	6054      	str	r4, [r2, #4]
      }
    }
    
    position++;
 80042e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e8:	680a      	ldr	r2, [r1, #0]
 80042ea:	fa32 f403 	lsrs.w	r4, r2, r3
 80042ee:	d074      	beq.n	80043da <HAL_GPIO_Init+0x16e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042f0:	2401      	movs	r4, #1
 80042f2:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80042f4:	4022      	ands	r2, r4
 80042f6:	d0f6      	beq.n	80042e6 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f8:	684d      	ldr	r5, [r1, #4]
 80042fa:	2d02      	cmp	r5, #2
 80042fc:	d001      	beq.n	8004302 <HAL_GPIO_Init+0x96>
 80042fe:	2d12      	cmp	r5, #18
 8004300:	d110      	bne.n	8004324 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8004302:	08de      	lsrs	r6, r3, #3
 8004304:	3608      	adds	r6, #8
 8004306:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800430a:	f003 0507 	and.w	r5, r3, #7
 800430e:	00af      	lsls	r7, r5, #2
 8004310:	250f      	movs	r5, #15
 8004312:	40bd      	lsls	r5, r7
 8004314:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004318:	690d      	ldr	r5, [r1, #16]
 800431a:	40bd      	lsls	r5, r7
 800431c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004320:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8004324:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004326:	005f      	lsls	r7, r3, #1
 8004328:	2503      	movs	r5, #3
 800432a:	40bd      	lsls	r5, r7
 800432c:	43ed      	mvns	r5, r5
 800432e:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004332:	684e      	ldr	r6, [r1, #4]
 8004334:	f006 0603 	and.w	r6, r6, #3
 8004338:	40be      	lsls	r6, r7
 800433a:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 800433e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004340:	684e      	ldr	r6, [r1, #4]
 8004342:	f106 3cff 	add.w	ip, r6, #4294967295
 8004346:	f1bc 0f01 	cmp.w	ip, #1
 800434a:	d903      	bls.n	8004354 <HAL_GPIO_Init+0xe8>
 800434c:	2e11      	cmp	r6, #17
 800434e:	d001      	beq.n	8004354 <HAL_GPIO_Init+0xe8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004350:	2e12      	cmp	r6, #18
 8004352:	d110      	bne.n	8004376 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 8004354:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004356:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800435a:	68ce      	ldr	r6, [r1, #12]
 800435c:	40be      	lsls	r6, r7
 800435e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8004362:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8004364:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004366:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800436a:	684e      	ldr	r6, [r1, #4]
 800436c:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8004370:	409e      	lsls	r6, r3
 8004372:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8004374:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8004376:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004378:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800437a:	688c      	ldr	r4, [r1, #8]
 800437c:	40bc      	lsls	r4, r7
 800437e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8004380:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004382:	684c      	ldr	r4, [r1, #4]
 8004384:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8004388:	d0ad      	beq.n	80042e6 <HAL_GPIO_Init+0x7a>
        temp = SYSCFG->EXTICR[position >> 2u];
 800438a:	089d      	lsrs	r5, r3, #2
 800438c:	1cae      	adds	r6, r5, #2
 800438e:	4c14      	ldr	r4, [pc, #80]	; (80043e0 <HAL_GPIO_Init+0x174>)
 8004390:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004394:	f003 0403 	and.w	r4, r3, #3
 8004398:	00a6      	lsls	r6, r4, #2
 800439a:	240f      	movs	r4, #15
 800439c:	40b4      	lsls	r4, r6
 800439e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043a2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80043a6:	f43f af66 	beq.w	8004276 <HAL_GPIO_Init+0xa>
 80043aa:	4c0f      	ldr	r4, [pc, #60]	; (80043e8 <HAL_GPIO_Init+0x17c>)
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d00e      	beq.n	80043ce <HAL_GPIO_Init+0x162>
 80043b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d00c      	beq.n	80043d2 <HAL_GPIO_Init+0x166>
 80043b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d00a      	beq.n	80043d6 <HAL_GPIO_Init+0x16a>
 80043c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80043c4:	42a0      	cmp	r0, r4
 80043c6:	f43f af54 	beq.w	8004272 <HAL_GPIO_Init+0x6>
 80043ca:	2407      	movs	r4, #7
 80043cc:	e754      	b.n	8004278 <HAL_GPIO_Init+0xc>
 80043ce:	2401      	movs	r4, #1
 80043d0:	e752      	b.n	8004278 <HAL_GPIO_Init+0xc>
 80043d2:	2402      	movs	r4, #2
 80043d4:	e750      	b.n	8004278 <HAL_GPIO_Init+0xc>
 80043d6:	2403      	movs	r4, #3
 80043d8:	e74e      	b.n	8004278 <HAL_GPIO_Init+0xc>
  }
}
 80043da:	bcf0      	pop	{r4, r5, r6, r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	58000800 	.word	0x58000800
 80043e8:	48000400 	.word	0x48000400

080043ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043ec:	6903      	ldr	r3, [r0, #16]
 80043ee:	4219      	tst	r1, r3
 80043f0:	d101      	bne.n	80043f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043f2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80043f4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80043f6:	2001      	movs	r0, #1
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043fc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4203      	tst	r3, r0
 8004404:	d100      	bne.n	8004408 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004406:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800440a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800440c:	f7fe f916 	bl	800263c <HAL_GPIO_EXTI_Callback>
}
 8004410:	e7f9      	b.n	8004406 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004412:	bf00      	nop
 8004414:	58000800 	.word	0x58000800

08004418 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	f012 0f02 	tst.w	r2, #2
 8004420:	d001      	beq.n	8004426 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004426:	6803      	ldr	r3, [r0, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	f012 0f01 	tst.w	r2, #1
 800442e:	d103      	bne.n	8004438 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	619a      	str	r2, [r3, #24]
  }
}
 8004438:	4770      	bx	lr

0800443a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800443a:	b470      	push	{r4, r5, r6}
 800443c:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800443e:	6805      	ldr	r5, [r0, #0]
 8004440:	6868      	ldr	r0, [r5, #4]
 8004442:	0d74      	lsrs	r4, r6, #21
 8004444:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004448:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800444c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004450:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004454:	f044 0403 	orr.w	r4, r4, #3
 8004458:	ea20 0004 	bic.w	r0, r0, r4
 800445c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004464:	4319      	orrs	r1, r3
 8004466:	4331      	orrs	r1, r6
 8004468:	4301      	orrs	r1, r0
 800446a:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800446c:	bc70      	pop	{r4, r5, r6}
 800446e:	4770      	bx	lr

08004470 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004470:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004472:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <I2C_Enable_IRQ+0x78>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d017      	beq.n	80044a8 <I2C_Enable_IRQ+0x38>
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <I2C_Enable_IRQ+0x7c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d014      	beq.n	80044a8 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800447e:	f011 0f04 	tst.w	r1, #4
 8004482:	d12f      	bne.n	80044e4 <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8004484:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004486:	f011 0f01 	tst.w	r1, #1
 800448a:	d001      	beq.n	8004490 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800448c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004490:	f011 0f02 	tst.w	r1, #2
 8004494:	d001      	beq.n	800449a <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004496:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800449a:	f001 0112 	and.w	r1, r1, #18
 800449e:	2912      	cmp	r1, #18
 80044a0:	d110      	bne.n	80044c4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	e00d      	b.n	80044c4 <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044a8:	f011 0f04 	tst.w	r1, #4
 80044ac:	d10f      	bne.n	80044ce <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 80044ae:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80044b0:	f001 0211 	and.w	r2, r1, #17
 80044b4:	2a11      	cmp	r2, #17
 80044b6:	d00c      	beq.n	80044d2 <I2C_Enable_IRQ+0x62>
 80044b8:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80044bc:	2912      	cmp	r1, #18
 80044be:	d00b      	beq.n	80044d8 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80044c0:	2912      	cmp	r1, #18
 80044c2:	d00c      	beq.n	80044de <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80044c4:	6801      	ldr	r1, [r0, #0]
 80044c6:	680a      	ldr	r2, [r1, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
}
 80044cc:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044ce:	23b8      	movs	r3, #184	; 0xb8
 80044d0:	e7ee      	b.n	80044b0 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044d2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044d6:	e7ef      	b.n	80044b8 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 80044d8:	f043 0320 	orr.w	r3, r3, #32
 80044dc:	e7f0      	b.n	80044c0 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 80044de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e2:	e7ef      	b.n	80044c4 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044e4:	23b8      	movs	r3, #184	; 0xb8
 80044e6:	e7ce      	b.n	8004486 <I2C_Enable_IRQ+0x16>
 80044e8:	080056b3 	.word	0x080056b3
 80044ec:	080055b5 	.word	0x080055b5

080044f0 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044f0:	f011 0f01 	tst.w	r1, #1
 80044f4:	d009      	beq.n	800450a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80044fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044fe:	2b28      	cmp	r3, #40	; 0x28
 8004500:	d001      	beq.n	8004506 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004502:	23f2      	movs	r3, #242	; 0xf2
 8004504:	e002      	b.n	800450c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004506:	2342      	movs	r3, #66	; 0x42
 8004508:	e000      	b.n	800450c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800450a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800450c:	f011 0f02 	tst.w	r1, #2
 8004510:	d02c      	beq.n	800456c <I2C_Disable_IRQ+0x7c>
{
 8004512:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004514:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004518:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800451c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004520:	2a28      	cmp	r2, #40	; 0x28
 8004522:	d018      	beq.n	8004556 <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004524:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004528:	f011 0f04 	tst.w	r1, #4
 800452c:	d001      	beq.n	8004532 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800452e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004532:	f001 0211 	and.w	r2, r1, #17
 8004536:	2a11      	cmp	r2, #17
 8004538:	d00f      	beq.n	800455a <I2C_Disable_IRQ+0x6a>
 800453a:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800453e:	2912      	cmp	r1, #18
 8004540:	d00e      	beq.n	8004560 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004542:	2912      	cmp	r1, #18
 8004544:	d00f      	beq.n	8004566 <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004546:	6801      	ldr	r1, [r0, #0]
 8004548:	680a      	ldr	r2, [r1, #0]
 800454a:	ea22 0303 	bic.w	r3, r2, r3
 800454e:	600b      	str	r3, [r1, #0]
}
 8004550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004554:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004556:	4623      	mov	r3, r4
 8004558:	e7e6      	b.n	8004528 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800455a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800455e:	e7ec      	b.n	800453a <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	e7ed      	b.n	8004542 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8004566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456a:	e7ec      	b.n	8004546 <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800456c:	f011 0f04 	tst.w	r1, #4
 8004570:	d001      	beq.n	8004576 <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004572:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004576:	f001 0211 	and.w	r2, r1, #17
 800457a:	2a11      	cmp	r2, #17
 800457c:	d00b      	beq.n	8004596 <I2C_Disable_IRQ+0xa6>
 800457e:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004582:	2912      	cmp	r1, #18
 8004584:	d00a      	beq.n	800459c <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004586:	2912      	cmp	r1, #18
 8004588:	d00b      	beq.n	80045a2 <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800458a:	6801      	ldr	r1, [r0, #0]
 800458c:	680a      	ldr	r2, [r1, #0]
 800458e:	ea22 0303 	bic.w	r3, r2, r3
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004596:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800459a:	e7f0      	b.n	800457e <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 800459c:	f043 0320 	orr.w	r3, r3, #32
 80045a0:	e7f1      	b.n	8004586 <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 80045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a6:	e7f0      	b.n	800458a <I2C_Disable_IRQ+0x9a>

080045a8 <I2C_IsAcknowledgeFailed>:
{
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4604      	mov	r4, r0
 80045ac:	460d      	mov	r5, r1
 80045ae:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b0:	6803      	ldr	r3, [r0, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f013 0f10 	tst.w	r3, #16
 80045b8:	d01c      	beq.n	80045f4 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	f012 0f20 	tst.w	r2, #32
 80045c2:	d119      	bne.n	80045f8 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80045c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80045c8:	d0f7      	beq.n	80045ba <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fe fea1 	bl	8003310 <HAL_GetTick>
 80045ce:	1b80      	subs	r0, r0, r6
 80045d0:	42a8      	cmp	r0, r5
 80045d2:	d801      	bhi.n	80045d8 <I2C_IsAcknowledgeFailed+0x30>
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	d1f0      	bne.n	80045ba <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	2320      	movs	r3, #32
 80045e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80045ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80045f0:	2001      	movs	r0, #1
 80045f2:	e020      	b.n	8004636 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80045f4:	2000      	movs	r0, #0
 80045f6:	e01e      	b.n	8004636 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	2210      	movs	r2, #16
 80045fa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	2520      	movs	r5, #32
 8004600:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ff08 	bl	8004418 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	6853      	ldr	r3, [r2, #4]
 800460c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004610:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004614:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004626:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	2300      	movs	r3, #0
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004630:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
}
 8004636:	bd70      	pop	{r4, r5, r6, pc}

08004638 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4604      	mov	r4, r0
 800463c:	460d      	mov	r5, r1
 800463e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f013 0f02 	tst.w	r3, #2
 8004648:	d11d      	bne.n	8004686 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	4632      	mov	r2, r6
 800464c:	4629      	mov	r1, r5
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff ffaa 	bl	80045a8 <I2C_IsAcknowledgeFailed>
 8004654:	b9c8      	cbnz	r0, 800468a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004656:	f1b5 3fff 	cmp.w	r5, #4294967295
 800465a:	d0f1      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fe fe58 	bl	8003310 <HAL_GetTick>
 8004660:	1b80      	subs	r0, r0, r6
 8004662:	42a8      	cmp	r0, r5
 8004664:	d801      	bhi.n	800466a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004666:	2d00      	cmp	r5, #0
 8004668:	d1ea      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004672:	2320      	movs	r3, #32
 8004674:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800467e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004682:	2001      	movs	r0, #1
 8004684:	e000      	b.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8004686:	2000      	movs	r0, #0
}
 8004688:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800468a:	2001      	movs	r0, #1
 800468c:	e7fc      	b.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800468e <I2C_WaitOnFlagUntilTimeout>:
{
 800468e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004690:	4605      	mov	r5, r0
 8004692:	460f      	mov	r7, r1
 8004694:	4616      	mov	r6, r2
 8004696:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	ea37 0303 	bics.w	r3, r7, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	42b3      	cmp	r3, r6
 80046a8:	d118      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046ae:	d0f3      	beq.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b0:	f7fe fe2e 	bl	8003310 <HAL_GetTick>
 80046b4:	9b06      	ldr	r3, [sp, #24]
 80046b6:	1ac0      	subs	r0, r0, r3
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d801      	bhi.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x32>
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d1eb      	bne.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	2320      	movs	r3, #32
 80046ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80046d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80046d8:	2001      	movs	r0, #1
 80046da:	e000      	b.n	80046de <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80046dc:	2000      	movs	r0, #0
}
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046e0 <I2C_RequestMemoryWrite>:
{
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	4604      	mov	r4, r0
 80046e6:	4616      	mov	r6, r2
 80046e8:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <I2C_RequestMemoryWrite+0x6c>)
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f2:	b2ea      	uxtb	r2, r5
 80046f4:	f7ff fea1 	bl	800443a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f8:	9a07      	ldr	r2, [sp, #28]
 80046fa:	9906      	ldr	r1, [sp, #24]
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff ff9b 	bl	8004638 <I2C_WaitOnTXISFlagUntilTimeout>
 8004702:	b9e8      	cbnz	r0, 8004740 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004704:	2d01      	cmp	r5, #1
 8004706:	d10e      	bne.n	8004726 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	b2f6      	uxtb	r6, r6
 800470c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	9b06      	ldr	r3, [sp, #24]
 8004714:	2200      	movs	r2, #0
 8004716:	2180      	movs	r1, #128	; 0x80
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ffb8 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	b178      	cbz	r0, 8004742 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00d      	b.n	8004742 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0a32      	lsrs	r2, r6, #8
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472c:	9a07      	ldr	r2, [sp, #28]
 800472e:	9906      	ldr	r1, [sp, #24]
 8004730:	4620      	mov	r0, r4
 8004732:	f7ff ff81 	bl	8004638 <I2C_WaitOnTXISFlagUntilTimeout>
 8004736:	b938      	cbnz	r0, 8004748 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b2f6      	uxtb	r6, r6
 800473c:	629e      	str	r6, [r3, #40]	; 0x28
 800473e:	e7e6      	b.n	800470e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	b002      	add	sp, #8
 8004746:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e7fa      	b.n	8004742 <I2C_RequestMemoryWrite+0x62>
 800474c:	80002000 	.word	0x80002000

08004750 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	460c      	mov	r4, r1
 8004756:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f013 0f20 	tst.w	r3, #32
 8004760:	d11a      	bne.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	4632      	mov	r2, r6
 8004764:	4621      	mov	r1, r4
 8004766:	4628      	mov	r0, r5
 8004768:	f7ff ff1e 	bl	80045a8 <I2C_IsAcknowledgeFailed>
 800476c:	b9b0      	cbnz	r0, 800479c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fe fdcf 	bl	8003310 <HAL_GetTick>
 8004772:	1b80      	subs	r0, r0, r6
 8004774:	42a0      	cmp	r0, r4
 8004776:	d801      	bhi.n	800477c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004778:	2c00      	cmp	r4, #0
 800477a:	d1ed      	bne.n	8004758 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004784:	2320      	movs	r3, #32
 8004786:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800478a:	2300      	movs	r3, #0
 800478c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004790:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004798:	2000      	movs	r0, #0
 800479a:	e7fc      	b.n	8004796 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
 800479e:	e7fa      	b.n	8004796 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080047a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	4604      	mov	r4, r0
 80047a4:	460d      	mov	r5, r1
 80047a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f013 0f04 	tst.w	r3, #4
 80047b0:	d13e      	bne.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b2:	4632      	mov	r2, r6
 80047b4:	4629      	mov	r1, r5
 80047b6:	4620      	mov	r0, r4
 80047b8:	f7ff fef6 	bl	80045a8 <I2C_IsAcknowledgeFailed>
 80047bc:	4601      	mov	r1, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d138      	bne.n	8004834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	f012 0f20 	tst.w	r2, #32
 80047ca:	d113      	bne.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047cc:	f7fe fda0 	bl	8003310 <HAL_GetTick>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	42a8      	cmp	r0, r5
 80047d4:	d801      	bhi.n	80047da <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	d1e6      	bne.n	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047dc:	f043 0320 	orr.w	r3, r3, #32
 80047e0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	2320      	movs	r3, #32
 80047e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80047e8:	2300      	movs	r3, #0
 80047ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80047ee:	2101      	movs	r1, #1
}
 80047f0:	4608      	mov	r0, r1
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	f012 0f04 	tst.w	r2, #4
 80047fa:	d002      	beq.n	8004802 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80047fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d1f6      	bne.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004802:	2220      	movs	r2, #32
 8004804:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004806:	6821      	ldr	r1, [r4, #0]
 8004808:	684b      	ldr	r3, [r1, #4]
 800480a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800480e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004812:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	2300      	movs	r3, #0
 800481e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004820:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004828:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800482c:	2101      	movs	r1, #1
 800482e:	e7df      	b.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8004830:	2100      	movs	r1, #0
 8004832:	e7dd      	b.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8004834:	2101      	movs	r1, #1
 8004836:	e7db      	b.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08004838 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004838:	2800      	cmp	r0, #0
 800483a:	d059      	beq.n	80048f0 <HAL_I2C_Init+0xb8>
{
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004840:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004844:	2b00      	cmp	r3, #0
 8004846:	d043      	beq.n	80048d0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004848:	2324      	movs	r3, #36	; 0x24
 800484a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004860:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800486a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d033      	beq.n	80048da <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800487a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d031      	beq.n	80048e6 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	6853      	ldr	r3, [r2, #4]
 8004886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	68d3      	ldr	r3, [r2, #12]
 8004894:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004898:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	6962      	ldr	r2, [r4, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	69a1      	ldr	r1, [r4, #24]
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048aa:	69e3      	ldr	r3, [r4, #28]
 80048ac:	6a21      	ldr	r1, [r4, #32]
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048be:	2000      	movs	r0, #0
 80048c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	2320      	movs	r3, #32
 80048c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80048ce:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80048d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80048d4:	f7fd fdfe 	bl	80024d4 <HAL_I2C_MspInit>
 80048d8:	e7b6      	b.n	8004848 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	6093      	str	r3, [r2, #8]
 80048e4:	e7ca      	b.n	800487c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	e7c8      	b.n	8004882 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80048f0:	2001      	movs	r0, #1
}
 80048f2:	4770      	bx	lr

080048f4 <HAL_I2C_Master_Transmit>:
{
 80048f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048f8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80048fe:	b2ed      	uxtb	r5, r5
 8004900:	2d20      	cmp	r5, #32
 8004902:	f040 80a4 	bne.w	8004a4e <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8004906:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800490a:	2c01      	cmp	r4, #1
 800490c:	f000 80a4 	beq.w	8004a58 <HAL_I2C_Master_Transmit+0x164>
 8004910:	4698      	mov	r8, r3
 8004912:	4617      	mov	r7, r2
 8004914:	460e      	mov	r6, r1
 8004916:	4604      	mov	r4, r0
 8004918:	f04f 0901 	mov.w	r9, #1
 800491c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004920:	f7fe fcf6 	bl	8003310 <HAL_GetTick>
 8004924:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004926:	9000      	str	r0, [sp, #0]
 8004928:	2319      	movs	r3, #25
 800492a:	464a      	mov	r2, r9
 800492c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff feac 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 8004936:	2800      	cmp	r0, #0
 8004938:	f040 8090 	bne.w	8004a5c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800493c:	2321      	movs	r3, #33	; 0x21
 800493e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004942:	2310      	movs	r3, #16
 8004944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	2300      	movs	r3, #0
 800494a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800494c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800494e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004952:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2bff      	cmp	r3, #255	; 0xff
 800495a:	d90a      	bls.n	8004972 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004960:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <HAL_I2C_Master_Transmit+0x178>)
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004968:	4631      	mov	r1, r6
 800496a:	4620      	mov	r0, r4
 800496c:	f7ff fd65 	bl	800443a <I2C_TransferConfig>
 8004970:	e018      	b.n	80049a4 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8004972:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004974:	b292      	uxth	r2, r2
 8004976:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004978:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <HAL_I2C_Master_Transmit+0x178>)
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4631      	mov	r1, r6
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff fd58 	bl	800443a <I2C_TransferConfig>
 800498a:	e00b      	b.n	80049a4 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800498c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800498e:	b292      	uxth	r2, r2
 8004990:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004992:	2300      	movs	r3, #0
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	4631      	mov	r1, r6
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff fd4b 	bl	800443a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d033      	beq.n	8004a14 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ac:	462a      	mov	r2, r5
 80049ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff fe41 	bl	8004638 <I2C_WaitOnTXISFlagUntilTimeout>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d152      	bne.n	8004a60 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80049c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c4:	3301      	adds	r3, #1
 80049c6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80049c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80049d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80049da:	b292      	uxth	r2, r2
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d0e1      	beq.n	80049a4 <HAL_I2C_Master_Transmit+0xb0>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1df      	bne.n	80049a4 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049e4:	9500      	str	r5, [sp, #0]
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fe4e 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d136      	bne.n	8004a64 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2bff      	cmp	r3, #255	; 0xff
 80049fc:	d9c6      	bls.n	800498c <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7ff fd14 	bl	800443a <I2C_TransferConfig>
 8004a12:	e7c7      	b.n	80049a4 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a14:	462a      	mov	r2, r5
 8004a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff fe99 	bl	8004750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	bb10      	cbnz	r0, 8004a68 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	2120      	movs	r1, #32
 8004a26:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004a28:	6820      	ldr	r0, [r4, #0]
 8004a2a:	6842      	ldr	r2, [r0, #4]
 8004a2c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004a30:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004a34:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a42:	2200      	movs	r2, #0
 8004a44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004a48:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004a4c:	e000      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	b003      	add	sp, #12
 8004a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e7f9      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e7f7      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e7f5      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e7f3      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e7f1      	b.n	8004a50 <HAL_I2C_Master_Transmit+0x15c>
 8004a6c:	80002000 	.word	0x80002000

08004a70 <HAL_I2C_Master_Receive>:
{
 8004a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a74:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004a7a:	b2ed      	uxtb	r5, r5
 8004a7c:	2d20      	cmp	r5, #32
 8004a7e:	f040 80a4 	bne.w	8004bca <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8004a82:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004a86:	2c01      	cmp	r4, #1
 8004a88:	f000 80a4 	beq.w	8004bd4 <HAL_I2C_Master_Receive+0x164>
 8004a8c:	4698      	mov	r8, r3
 8004a8e:	4617      	mov	r7, r2
 8004a90:	460e      	mov	r6, r1
 8004a92:	4604      	mov	r4, r0
 8004a94:	f04f 0901 	mov.w	r9, #1
 8004a98:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004a9c:	f7fe fc38 	bl	8003310 <HAL_GetTick>
 8004aa0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004aa2:	9000      	str	r0, [sp, #0]
 8004aa4:	2319      	movs	r3, #25
 8004aa6:	464a      	mov	r2, r9
 8004aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff fdee 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f040 8090 	bne.w	8004bd8 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab8:	2322      	movs	r3, #34	; 0x22
 8004aba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004abe:	2310      	movs	r3, #16
 8004ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004ac8:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aca:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ace:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2bff      	cmp	r3, #255	; 0xff
 8004ad6:	d90a      	bls.n	8004aee <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <HAL_I2C_Master_Receive+0x178>)
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff fca7 	bl	800443a <I2C_TransferConfig>
 8004aec:	e018      	b.n	8004b20 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8004aee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004af0:	b292      	uxth	r2, r2
 8004af2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004af4:	4b3c      	ldr	r3, [pc, #240]	; (8004be8 <HAL_I2C_Master_Receive+0x178>)
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	4631      	mov	r1, r6
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7ff fc9a 	bl	800443a <I2C_TransferConfig>
 8004b06:	e00b      	b.n	8004b20 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8004b08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff fc8d 	bl	800443a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d033      	beq.n	8004b90 <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b28:	462a      	mov	r2, r5
 8004b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff fe37 	bl	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d152      	bne.n	8004bdc <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004b44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004b4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	b292      	uxth	r2, r2
 8004b52:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b56:	b292      	uxth	r2, r2
 8004b58:	2a00      	cmp	r2, #0
 8004b5a:	d0e1      	beq.n	8004b20 <HAL_I2C_Master_Receive+0xb0>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1df      	bne.n	8004b20 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b60:	9500      	str	r5, [sp, #0]
 8004b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b64:	2200      	movs	r2, #0
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff fd90 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d136      	bne.n	8004be0 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2bff      	cmp	r3, #255	; 0xff
 8004b78:	d9c6      	bls.n	8004b08 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b86:	4631      	mov	r1, r6
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff fc56 	bl	800443a <I2C_TransferConfig>
 8004b8e:	e7c7      	b.n	8004b20 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b90:	462a      	mov	r2, r5
 8004b92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b94:	4620      	mov	r0, r4
 8004b96:	f7ff fddb 	bl	8004750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	bb10      	cbnz	r0, 8004be4 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	2120      	movs	r1, #32
 8004ba2:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	6842      	ldr	r2, [r0, #4]
 8004ba8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004bac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004bb0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004bc4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004bc8:	e000      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	b003      	add	sp, #12
 8004bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e7f9      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e7f7      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e7f5      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e7f3      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7f1      	b.n	8004bcc <HAL_I2C_Master_Receive+0x15c>
 8004be8:	80002400 	.word	0x80002400

08004bec <HAL_I2C_Master_Receive_IT>:
{
 8004bec:	b530      	push	{r4, r5, lr}
 8004bee:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8004bf4:	b2e4      	uxtb	r4, r4
 8004bf6:	2c20      	cmp	r4, #32
 8004bf8:	d137      	bne.n	8004c6a <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bfa:	6804      	ldr	r4, [r0, #0]
 8004bfc:	69a4      	ldr	r4, [r4, #24]
 8004bfe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004c02:	d135      	bne.n	8004c70 <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 8004c04:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004c08:	2c01      	cmp	r4, #1
 8004c0a:	d033      	beq.n	8004c74 <HAL_I2C_Master_Receive_IT+0x88>
 8004c0c:	2401      	movs	r4, #1
 8004c0e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c12:	2422      	movs	r4, #34	; 0x22
 8004c14:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c18:	2410      	movs	r4, #16
 8004c1a:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c1e:	2400      	movs	r4, #0
 8004c20:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004c22:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c24:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_I2C_Master_Receive_IT+0x8c>)
 8004c28:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <HAL_I2C_Master_Receive_IT+0x90>)
 8004c2c:	6343      	str	r3, [r0, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2bff      	cmp	r3, #255	; 0xff
 8004c34:	d914      	bls.n	8004c60 <HAL_I2C_Master_Receive_IT+0x74>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c36:	23ff      	movs	r3, #255	; 0xff
 8004c38:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c3e:	4604      	mov	r4, r0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004c40:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8004c44:	480e      	ldr	r0, [pc, #56]	; (8004c80 <HAL_I2C_Master_Receive_IT+0x94>)
 8004c46:	9000      	str	r0, [sp, #0]
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff fbf6 	bl	800443a <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8004c4e:	2500      	movs	r5, #0
 8004c50:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c54:	2102      	movs	r1, #2
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff fc0a 	bl	8004470 <I2C_Enable_IRQ>
    return HAL_OK;
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	e005      	b.n	8004c6c <HAL_I2C_Master_Receive_IT+0x80>
      hi2c->XferSize = hi2c->XferCount;
 8004c60:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004c62:	8503      	strh	r3, [r0, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c68:	e7e9      	b.n	8004c3e <HAL_I2C_Master_Receive_IT+0x52>
    return HAL_BUSY;
 8004c6a:	2002      	movs	r0, #2
}
 8004c6c:	b003      	add	sp, #12
 8004c6e:	bd30      	pop	{r4, r5, pc}
      return HAL_BUSY;
 8004c70:	2002      	movs	r0, #2
 8004c72:	e7fb      	b.n	8004c6c <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 8004c74:	2002      	movs	r0, #2
 8004c76:	e7f9      	b.n	8004c6c <HAL_I2C_Master_Receive_IT+0x80>
 8004c78:	ffff0000 	.word	0xffff0000
 8004c7c:	08005439 	.word	0x08005439
 8004c80:	80002400 	.word	0x80002400

08004c84 <HAL_I2C_Mem_Write>:
{
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8004c92:	b2ed      	uxtb	r5, r5
 8004c94:	2d20      	cmp	r5, #32
 8004c96:	f040 80ba 	bne.w	8004e0e <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 8004c9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c9c:	b1dc      	cbz	r4, 8004cd6 <HAL_I2C_Mem_Write+0x52>
 8004c9e:	b1d7      	cbz	r7, 8004cd6 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8004ca0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8004ca4:	2c01      	cmp	r4, #1
 8004ca6:	f000 80b7 	beq.w	8004e18 <HAL_I2C_Mem_Write+0x194>
 8004caa:	4698      	mov	r8, r3
 8004cac:	4691      	mov	r9, r2
 8004cae:	460d      	mov	r5, r1
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	f04f 0a01 	mov.w	sl, #1
 8004cb6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004cba:	f7fe fb29 	bl	8003310 <HAL_GetTick>
 8004cbe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc0:	9000      	str	r0, [sp, #0]
 8004cc2:	2319      	movs	r3, #25
 8004cc4:	4652      	mov	r2, sl
 8004cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff fcdf 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	b130      	cbz	r0, 8004ce0 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e09c      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cda:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e097      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce0:	2321      	movs	r3, #33	; 0x21
 8004ce2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cf4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cf6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf8:	9601      	str	r6, [sp, #4]
 8004cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4643      	mov	r3, r8
 8004d00:	464a      	mov	r2, r9
 8004d02:	4629      	mov	r1, r5
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff fceb 	bl	80046e0 <I2C_RequestMemoryWrite>
 8004d0a:	b970      	cbnz	r0, 8004d2a <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	; 0xff
 8004d12:	d90f      	bls.n	8004d34 <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	22ff      	movs	r2, #255	; 0xff
 8004d16:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d20:	4629      	mov	r1, r5
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff fb89 	bl	800443a <I2C_TransferConfig>
 8004d28:	e021      	b.n	8004d6e <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004d30:	4653      	mov	r3, sl
 8004d32:	e06d      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 8004d34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d36:	b292      	uxth	r2, r2
 8004d38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	4629      	mov	r1, r5
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff fb77 	bl	800443a <I2C_TransferConfig>
 8004d4c:	e00f      	b.n	8004d6e <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8004d4e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d50:	b292      	uxth	r2, r2
 8004d52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d54:	2300      	movs	r3, #0
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff fb6a 	bl	800443a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004d66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d032      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6e:	4632      	mov	r2, r6
 8004d70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff fc60 	bl	8004638 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d14f      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d86:	3301      	adds	r3, #1
 8004d88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004d92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	d0e1      	beq.n	8004d66 <HAL_I2C_Mem_Write+0xe2>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1df      	bne.n	8004d66 <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004da6:	9600      	str	r6, [sp, #0]
 8004da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004daa:	2200      	movs	r2, #0
 8004dac:	2180      	movs	r1, #128	; 0x80
 8004dae:	4620      	mov	r0, r4
 8004db0:	f7ff fc6d 	bl	800468e <I2C_WaitOnFlagUntilTimeout>
 8004db4:	bba0      	cbnz	r0, 8004e20 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2bff      	cmp	r3, #255	; 0xff
 8004dbc:	d9c7      	bls.n	8004d4e <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dbe:	22ff      	movs	r2, #255	; 0xff
 8004dc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7ff fb34 	bl	800443a <I2C_TransferConfig>
 8004dd2:	e7c8      	b.n	8004d66 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff fcb9 	bl	8004750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	bb00      	cbnz	r0, 8004e24 <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	2120      	movs	r1, #32
 8004de6:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	6842      	ldr	r2, [r0, #4]
 8004dec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004df0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004df4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e02:	2200      	movs	r2, #0
 8004e04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004e08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8004e0c:	e000      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	b002      	add	sp, #8
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e7f9      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e7f7      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e7f5      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e7f3      	b.n	8004e10 <HAL_I2C_Mem_Write+0x18c>

08004e28 <HAL_I2C_EV_IRQHandler>:
{
 8004e28:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e2a:	6803      	ldr	r3, [r0, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e2e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e32:	b103      	cbz	r3, 8004e36 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e34:	4798      	blx	r3
}
 8004e36:	bd08      	pop	{r3, pc}

08004e38 <I2C_ITMasterSeqCplt>:
{
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b21      	cmp	r3, #33	; 0x21
 8004e4a:	d00f      	beq.n	8004e6c <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e52:	2312      	movs	r3, #18
 8004e54:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004e56:	2500      	movs	r5, #0
 8004e58:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	f7ff fb48 	bl	80044f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e60:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7fd fcc1 	bl	80027ec <HAL_I2C_MasterRxCpltCallback>
}
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e72:	2311      	movs	r3, #17
 8004e74:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004e76:	2500      	movs	r5, #0
 8004e78:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	f7ff fb38 	bl	80044f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e80:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7fd fca3 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
 8004e8a:	e7ee      	b.n	8004e6a <I2C_ITMasterSeqCplt+0x32>

08004e8c <HAL_I2C_SlaveTxCpltCallback>:
}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2C_SlaveRxCpltCallback>:
}
 8004e8e:	4770      	bx	lr

08004e90 <I2C_ITSlaveSeqCplt>:
{
 8004e90:	b510      	push	{r4, lr}
 8004e92:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b29      	cmp	r3, #41	; 0x29
 8004ea2:	d005      	beq.n	8004eb0 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004eac:	d00f      	beq.n	8004ece <I2C_ITSlaveSeqCplt+0x3e>
}
 8004eae:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004eb0:	2328      	movs	r3, #40	; 0x28
 8004eb2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eb6:	2321      	movs	r3, #33	; 0x21
 8004eb8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	f7ff fb18 	bl	80044f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff ffe0 	bl	8004e8c <HAL_I2C_SlaveTxCpltCallback>
 8004ecc:	e7ef      	b.n	8004eae <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ece:	2328      	movs	r3, #40	; 0x28
 8004ed0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ed4:	2322      	movs	r3, #34	; 0x22
 8004ed6:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ed8:	2102      	movs	r1, #2
 8004eda:	f7ff fb09 	bl	80044f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff ffd2 	bl	8004e8e <HAL_I2C_SlaveRxCpltCallback>
}
 8004eea:	e7e0      	b.n	8004eae <I2C_ITSlaveSeqCplt+0x1e>

08004eec <HAL_I2C_AddrCallback>:
}
 8004eec:	4770      	bx	lr

08004eee <I2C_ITAddrCplt>:
{
 8004eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ef0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ef4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ef8:	2b28      	cmp	r3, #40	; 0x28
 8004efa:	d006      	beq.n	8004f0a <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004efc:	6803      	ldr	r3, [r0, #0]
 8004efe:	2208      	movs	r2, #8
 8004f00:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0a:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8004f0c:	6803      	ldr	r3, [r0, #0]
 8004f0e:	699e      	ldr	r6, [r3, #24]
 8004f10:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	0c12      	lsrs	r2, r2, #16
 8004f18:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f22:	68df      	ldr	r7, [r3, #12]
 8004f24:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f28:	68c1      	ldr	r1, [r0, #12]
 8004f2a:	2902      	cmp	r1, #2
 8004f2c:	d121      	bne.n	8004f72 <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004f2e:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004f32:	f015 0f06 	tst.w	r5, #6
 8004f36:	d110      	bne.n	8004f5a <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004f38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f3a:	3101      	adds	r1, #1
 8004f3c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004f3e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004f40:	2902      	cmp	r1, #2
 8004f42:	d1e1      	bne.n	8004f08 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8004f44:	2100      	movs	r1, #0
 8004f46:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f48:	2008      	movs	r0, #8
 8004f4a:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004f4c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f50:	4631      	mov	r1, r6
 8004f52:	4620      	mov	r0, r4
 8004f54:	f7ff ffca 	bl	8004eec <HAL_I2C_AddrCallback>
 8004f58:	e7d6      	b.n	8004f08 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	f7ff fac8 	bl	80044f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004f60:	2300      	movs	r3, #0
 8004f62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f66:	463a      	mov	r2, r7
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7ff ffbe 	bl	8004eec <HAL_I2C_AddrCallback>
 8004f70:	e7ca      	b.n	8004f08 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f72:	2104      	movs	r1, #4
 8004f74:	f7ff fabc 	bl	80044f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f7e:	462a      	mov	r2, r5
 8004f80:	4631      	mov	r1, r6
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7ff ffb2 	bl	8004eec <HAL_I2C_AddrCallback>
 8004f88:	e7be      	b.n	8004f08 <I2C_ITAddrCplt+0x1a>

08004f8a <HAL_I2C_ListenCpltCallback>:
}
 8004f8a:	4770      	bx	lr

08004f8c <I2C_ITListenCplt>:
{
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <I2C_ITListenCplt+0x60>)
 8004f92:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fa2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004fa4:	f011 0f04 	tst.w	r1, #4
 8004fa8:	d012      	beq.n	8004fd0 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004faa:	6803      	ldr	r3, [r0, #0]
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004fb8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004fba:	b14b      	cbz	r3, 8004fd0 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004fc0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fd0:	2107      	movs	r1, #7
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7ff fa8c 	bl	80044f0 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7ff ffd0 	bl	8004f8a <HAL_I2C_ListenCpltCallback>
}
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	ffff0000 	.word	0xffff0000

08004ff0 <HAL_I2C_MemTxCpltCallback>:
}
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_I2C_MemRxCpltCallback>:
}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2C_ErrorCallback>:
}
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_I2C_AbortCpltCallback>:
}
 8004ff6:	4770      	bx	lr

08004ff8 <I2C_ITError>:
{
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ffc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005000:	2200      	movs	r2, #0
 8005002:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005006:	4836      	ldr	r0, [pc, #216]	; (80050e0 <I2C_ITError+0xe8>)
 8005008:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800500a:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800500c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800500e:	4311      	orrs	r1, r2
 8005010:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005012:	3b28      	subs	r3, #40	; 0x28
 8005014:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005016:	2b02      	cmp	r3, #2
 8005018:	d822      	bhi.n	8005060 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800501a:	2103      	movs	r1, #3
 800501c:	4620      	mov	r0, r4
 800501e:	f7ff fa67 	bl	80044f0 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005022:	2328      	movs	r3, #40	; 0x28
 8005024:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	2300      	movs	r3, #0
 800502a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <I2C_ITError+0xec>)
 800502e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005038:	d022      	beq.n	8005080 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005040:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8005042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005044:	b15b      	cbz	r3, 800505e <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005046:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <I2C_ITError+0xf0>)
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005050:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005052:	f7ff f86f 	bl	8004134 <HAL_DMA_Abort_IT>
 8005056:	b110      	cbz	r0, 800505e <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005058:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800505a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800505c:	4798      	blx	r3
}
 800505e:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005060:	2107      	movs	r1, #7
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff fa44 	bl	80044f0 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005068:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b60      	cmp	r3, #96	; 0x60
 8005070:	d002      	beq.n	8005078 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 8005072:	2320      	movs	r3, #32
 8005074:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005078:	2300      	movs	r3, #0
 800507a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800507c:	6363      	str	r3, [r4, #52]	; 0x34
 800507e:	e7d7      	b.n	8005030 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005086:	d014      	beq.n	80050b2 <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800508e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8005090:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0e3      	beq.n	800505e <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005096:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <I2C_ITError+0xf0>)
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80050a2:	f7ff f847 	bl	8004134 <HAL_DMA_Abort_IT>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0d9      	beq.n	800505e <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80050ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80050ae:	4798      	blx	r3
 80050b0:	e7d5      	b.n	800505e <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b60      	cmp	r3, #96	; 0x60
 80050ba:	d006      	beq.n	80050ca <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 80050bc:	2300      	movs	r3, #0
 80050be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff ff96 	bl	8004ff4 <HAL_I2C_ErrorCallback>
}
 80050c8:	e7c9      	b.n	800505e <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	2320      	movs	r3, #32
 80050cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7ff ff8d 	bl	8004ff6 <HAL_I2C_AbortCpltCallback>
 80050dc:	e7bf      	b.n	800505e <I2C_ITError+0x66>
 80050de:	bf00      	nop
 80050e0:	ffff0000 	.word	0xffff0000
 80050e4:	0800520d 	.word	0x0800520d
 80050e8:	080057f3 	.word	0x080057f3

080050ec <I2C_ITSlaveCplt>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f6:	2220      	movs	r2, #32
 80050f8:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80050fa:	2107      	movs	r1, #7
 80050fc:	f7ff f9f8 	bl	80044f0 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	6853      	ldr	r3, [r2, #4]
 8005104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005108:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	6853      	ldr	r3, [r2, #4]
 800510e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005112:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005116:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005120:	4620      	mov	r0, r4
 8005122:	f7ff f979 	bl	8004418 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005126:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800512a:	d03a      	beq.n	80051a2 <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 800512c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512e:	b11b      	cbz	r3, 8005138 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b29b      	uxth	r3, r3
 8005136:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005138:	f015 0f04 	tst.w	r5, #4
 800513c:	d010      	beq.n	8005160 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800513e:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005148:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800514a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005150:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005152:	b12b      	cbz	r3, 8005160 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8005154:	3b01      	subs	r3, #1
 8005156:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005158:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800515a:	3b01      	subs	r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8005160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	b11b      	cbz	r3, 800516e <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	2300      	movs	r3, #0
 8005170:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005176:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005178:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800517a:	b9eb      	cbnz	r3, 80051b8 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800517c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800517e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005182:	d127      	bne.n	80051d4 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005184:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b22      	cmp	r3, #34	; 0x22
 800518c:	d031      	beq.n	80051f2 <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 800518e:	2320      	movs	r3, #32
 8005190:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005194:	2300      	movs	r3, #0
 8005196:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800519a:	4620      	mov	r0, r4
 800519c:	f7ff fe76 	bl	8004e8c <HAL_I2C_SlaveTxCpltCallback>
}
 80051a0:	e026      	b.n	80051f0 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051a2:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80051a6:	d0c7      	beq.n	8005138 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 80051a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0c4      	beq.n	8005138 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80051b6:	e7bf      	b.n	8005138 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80051b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff ff1c 	bl	8004ff8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b28      	cmp	r3, #40	; 0x28
 80051c8:	d112      	bne.n	80051f0 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80051ca:	4629      	mov	r1, r5
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff fedd 	bl	8004f8c <I2C_ITListenCplt>
 80051d2:	e00d      	b.n	80051f0 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fe5b 	bl	8004e90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <I2C_ITSlaveCplt+0x11c>)
 80051dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80051de:	2320      	movs	r3, #32
 80051e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051e4:	2300      	movs	r3, #0
 80051e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff fecd 	bl	8004f8a <HAL_I2C_ListenCpltCallback>
}
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	2320      	movs	r3, #32
 80051f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051f8:	2300      	movs	r3, #0
 80051fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff fe45 	bl	8004e8e <HAL_I2C_SlaveRxCpltCallback>
 8005204:	e7f4      	b.n	80051f0 <I2C_ITSlaveCplt+0x104>
 8005206:	bf00      	nop
 8005208:	ffff0000 	.word	0xffff0000

0800520c <I2C_Slave_ISR_IT>:
{
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800520e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8005210:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005214:	2b01      	cmp	r3, #1
 8005216:	f000 809c 	beq.w	8005352 <I2C_Slave_ISR_IT+0x146>
 800521a:	4616      	mov	r6, r2
 800521c:	460d      	mov	r5, r1
 800521e:	4604      	mov	r4, r0
 8005220:	2301      	movs	r3, #1
 8005222:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005226:	f011 0f20 	tst.w	r1, #32
 800522a:	d002      	beq.n	8005232 <I2C_Slave_ISR_IT+0x26>
 800522c:	f012 0f20 	tst.w	r2, #32
 8005230:	d119      	bne.n	8005266 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005232:	f015 0f10 	tst.w	r5, #16
 8005236:	d03e      	beq.n	80052b6 <I2C_Slave_ISR_IT+0xaa>
 8005238:	f016 0f10 	tst.w	r6, #16
 800523c:	d03b      	beq.n	80052b6 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 800523e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	bb43      	cbnz	r3, 8005296 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005244:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b28      	cmp	r3, #40	; 0x28
 800524c:	d00e      	beq.n	800526c <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800524e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b29      	cmp	r3, #41	; 0x29
 8005256:	d011      	beq.n	800527c <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	2210      	movs	r2, #16
 800525c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800525e:	2000      	movs	r0, #0
 8005260:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005266:	f7ff ff41 	bl	80050ec <I2C_ITSlaveCplt>
 800526a:	e7e2      	b.n	8005232 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800526c:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8005270:	d1ed      	bne.n	800524e <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005272:	4629      	mov	r1, r5
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff fe89 	bl	8004f8c <I2C_ITListenCplt>
 800527a:	e7f0      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800527c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005280:	d0ea      	beq.n	8005258 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	2210      	movs	r2, #16
 8005286:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff f8c5 	bl	8004418 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800528e:	4620      	mov	r0, r4
 8005290:	f7ff fdfe 	bl	8004e90 <I2C_ITSlaveSeqCplt>
 8005294:	e7e3      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	2210      	movs	r2, #16
 800529a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80052a4:	b117      	cbz	r7, 80052ac <I2C_Slave_ISR_IT+0xa0>
 80052a6:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80052aa:	d1d8      	bne.n	800525e <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80052ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff fea2 	bl	8004ff8 <I2C_ITError>
 80052b4:	e7d3      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80052b6:	f015 0f04 	tst.w	r5, #4
 80052ba:	d01e      	beq.n	80052fa <I2C_Slave_ISR_IT+0xee>
 80052bc:	f016 0f04 	tst.w	r6, #4
 80052c0:	d01b      	beq.n	80052fa <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 80052c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	b16b      	cbz	r3, 80052e4 <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80052d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d2:	3301      	adds	r3, #1
 80052d4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80052d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052d8:	3b01      	subs	r3, #1
 80052da:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80052dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80052e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1b8      	bne.n	800525e <I2C_Slave_ISR_IT+0x52>
 80052ec:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80052f0:	d0b5      	beq.n	800525e <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff fdcc 	bl	8004e90 <I2C_ITSlaveSeqCplt>
 80052f8:	e7b1      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052fa:	f015 0f08 	tst.w	r5, #8
 80052fe:	d002      	beq.n	8005306 <I2C_Slave_ISR_IT+0xfa>
 8005300:	f016 0f08 	tst.w	r6, #8
 8005304:	d117      	bne.n	8005336 <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005306:	f015 0f02 	tst.w	r5, #2
 800530a:	d0a8      	beq.n	800525e <I2C_Slave_ISR_IT+0x52>
 800530c:	f016 0f02 	tst.w	r6, #2
 8005310:	d0a5      	beq.n	800525e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8005312:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	b19b      	cbz	r3, 8005340 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005318:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005322:	3301      	adds	r3, #1
 8005324:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005326:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005328:	3b01      	subs	r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800532e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	8523      	strh	r3, [r4, #40]	; 0x28
 8005334:	e793      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005336:	4629      	mov	r1, r5
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fdd8 	bl	8004eee <I2C_ITAddrCplt>
 800533e:	e78e      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005340:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005344:	d001      	beq.n	800534a <I2C_Slave_ISR_IT+0x13e>
 8005346:	2f00      	cmp	r7, #0
 8005348:	d189      	bne.n	800525e <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff fda0 	bl	8004e90 <I2C_ITSlaveSeqCplt>
 8005350:	e785      	b.n	800525e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005352:	2002      	movs	r0, #2
 8005354:	e786      	b.n	8005264 <I2C_Slave_ISR_IT+0x58>

08005356 <I2C_ITMasterCplt>:
{
 8005356:	b510      	push	{r4, lr}
 8005358:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535a:	6803      	ldr	r3, [r0, #0]
 800535c:	2220      	movs	r2, #32
 800535e:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8005360:	6802      	ldr	r2, [r0, #0]
 8005362:	6853      	ldr	r3, [r2, #4]
 8005364:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005368:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800536c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005376:	2300      	movs	r3, #0
 8005378:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800537a:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800537c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8005380:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8005382:	f011 0f10 	tst.w	r1, #16
 8005386:	d006      	beq.n	8005396 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800538e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005390:	f043 0304 	orr.w	r3, r3, #4
 8005394:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8005396:	4620      	mov	r0, r4
 8005398:	f7ff f83e 	bl	8004418 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800539c:	2103      	movs	r1, #3
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff f8a6 	bl	80044f0 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 80053a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b60      	cmp	r3, #96	; 0x60
 80053ae:	d01b      	beq.n	80053e8 <I2C_ITMasterCplt+0x92>
 80053b0:	b9d2      	cbnz	r2, 80053e8 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b21      	cmp	r3, #33	; 0x21
 80053ba:	d01a      	beq.n	80053f2 <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b22      	cmp	r3, #34	; 0x22
 80053c4:	d114      	bne.n	80053f0 <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	2320      	movs	r3, #32
 80053c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d027      	beq.n	8005426 <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7fd fa03 	bl	80027ec <HAL_I2C_MasterRxCpltCallback>
}
 80053e6:	e003      	b.n	80053f0 <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff fe04 	bl	8004ff8 <I2C_ITError>
}
 80053f0:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	2320      	movs	r3, #32
 80053f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d008      	beq.n	8005414 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005408:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800540c:	4620      	mov	r0, r4
 800540e:	f7fd f9df 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
 8005412:	e7ed      	b.n	80053f0 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	2300      	movs	r3, #0
 8005416:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800541a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800541e:	4620      	mov	r0, r4
 8005420:	f7ff fde6 	bl	8004ff0 <HAL_I2C_MemTxCpltCallback>
 8005424:	e7e4      	b.n	80053f0 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	2300      	movs	r3, #0
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800542c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005430:	4620      	mov	r0, r4
 8005432:	f7ff fdde 	bl	8004ff2 <HAL_I2C_MemRxCpltCallback>
 8005436:	e7db      	b.n	80053f0 <I2C_ITMasterCplt+0x9a>

08005438 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8005438:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800543c:	2b01      	cmp	r3, #1
 800543e:	f000 80b7 	beq.w	80055b0 <I2C_Master_ISR_IT+0x178>
{
 8005442:	b570      	push	{r4, r5, r6, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	4604      	mov	r4, r0
 8005448:	460d      	mov	r5, r1
 800544a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800544c:	2301      	movs	r3, #1
 800544e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005452:	f011 0f10 	tst.w	r1, #16
 8005456:	d002      	beq.n	800545e <I2C_Master_ISR_IT+0x26>
 8005458:	f012 0f10 	tst.w	r2, #16
 800545c:	d121      	bne.n	80054a2 <I2C_Master_ISR_IT+0x6a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800545e:	f015 0f04 	tst.w	r5, #4
 8005462:	d028      	beq.n	80054b6 <I2C_Master_ISR_IT+0x7e>
 8005464:	f016 0f04 	tst.w	r6, #4
 8005468:	d025      	beq.n	80054b6 <I2C_Master_ISR_IT+0x7e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800546a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005474:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 800547c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800547e:	3b01      	subs	r3, #1
 8005480:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8005482:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005484:	3b01      	subs	r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800548a:	f015 0f20 	tst.w	r5, #32
 800548e:	d003      	beq.n	8005498 <I2C_Master_ISR_IT+0x60>
 8005490:	f016 0f20 	tst.w	r6, #32
 8005494:	f040 8087 	bne.w	80055a6 <I2C_Master_ISR_IT+0x16e>
  __HAL_UNLOCK(hi2c);
 8005498:	2000      	movs	r0, #0
 800549a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800549e:	b002      	add	sp, #8
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a2:	6803      	ldr	r3, [r0, #0]
 80054a4:	2210      	movs	r2, #16
 80054a6:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 80054b0:	f7fe ffb2 	bl	8004418 <I2C_Flush_TXDR>
 80054b4:	e7e9      	b.n	800548a <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054b6:	f015 0f02 	tst.w	r5, #2
 80054ba:	d011      	beq.n	80054e0 <I2C_Master_ISR_IT+0xa8>
 80054bc:	f016 0f02 	tst.w	r6, #2
 80054c0:	d00e      	beq.n	80054e0 <I2C_Master_ISR_IT+0xa8>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 80054ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054cc:	3301      	adds	r3, #1
 80054ce:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80054d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80054d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80054de:	e7d4      	b.n	800548a <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054e0:	f015 0f80 	tst.w	r5, #128	; 0x80
 80054e4:	d03f      	beq.n	8005566 <I2C_Master_ISR_IT+0x12e>
 80054e6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80054ea:	d03c      	beq.n	8005566 <I2C_Master_ISR_IT+0x12e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	b35b      	cbz	r3, 800554a <I2C_Master_ISR_IT+0x112>
 80054f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054f4:	bb4b      	cbnz	r3, 800554a <I2C_Master_ISR_IT+0x112>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2bff      	cmp	r3, #255	; 0xff
 8005504:	d80e      	bhi.n	8005524 <I2C_Master_ISR_IT+0xec>
        hi2c->XferSize = hi2c->XferCount;
 8005506:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005508:	b292      	uxth	r2, r2
 800550a:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800550c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800550e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005512:	d011      	beq.n	8005538 <I2C_Master_ISR_IT+0x100>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005516:	2000      	movs	r0, #0
 8005518:	9000      	str	r0, [sp, #0]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	4620      	mov	r0, r4
 800551e:	f7fe ff8c 	bl	800443a <I2C_TransferConfig>
 8005522:	e7b2      	b.n	800548a <I2C_Master_ISR_IT+0x52>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005530:	4620      	mov	r0, r4
 8005532:	f7fe ff82 	bl	800443a <I2C_TransferConfig>
 8005536:	e7a8      	b.n	800548a <I2C_Master_ISR_IT+0x52>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	4620      	mov	r0, r4
 8005544:	f7fe ff79 	bl	800443a <I2C_TransferConfig>
 8005548:	e79f      	b.n	800548a <I2C_Master_ISR_IT+0x52>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005552:	d103      	bne.n	800555c <I2C_Master_ISR_IT+0x124>
        I2C_ITMasterSeqCplt(hi2c);
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff fc6f 	bl	8004e38 <I2C_ITMasterSeqCplt>
 800555a:	e796      	b.n	800548a <I2C_Master_ISR_IT+0x52>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800555c:	2140      	movs	r1, #64	; 0x40
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff fd4a 	bl	8004ff8 <I2C_ITError>
 8005564:	e791      	b.n	800548a <I2C_Master_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800556a:	d08e      	beq.n	800548a <I2C_Master_ISR_IT+0x52>
 800556c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8005570:	d08b      	beq.n	800548a <I2C_Master_ISR_IT+0x52>
    if (hi2c->XferCount == 0U)
 8005572:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	b98b      	cbnz	r3, 800559c <I2C_Master_ISR_IT+0x164>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005580:	d183      	bne.n	800548a <I2C_Master_ISR_IT+0x52>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005584:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005588:	d104      	bne.n	8005594 <I2C_Master_ISR_IT+0x15c>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	e77a      	b.n	800548a <I2C_Master_ISR_IT+0x52>
          I2C_ITMasterSeqCplt(hi2c);
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff fc4f 	bl	8004e38 <I2C_ITMasterSeqCplt>
 800559a:	e776      	b.n	800548a <I2C_Master_ISR_IT+0x52>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	4620      	mov	r0, r4
 80055a0:	f7ff fd2a 	bl	8004ff8 <I2C_ITError>
 80055a4:	e771      	b.n	800548a <I2C_Master_ISR_IT+0x52>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80055a6:	4629      	mov	r1, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7ff fed4 	bl	8005356 <I2C_ITMasterCplt>
 80055ae:	e773      	b.n	8005498 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 80055b0:	2002      	movs	r0, #2
}
 80055b2:	4770      	bx	lr

080055b4 <I2C_Slave_ISR_DMA>:
{
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80055b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80055b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d076      	beq.n	80056ae <I2C_Slave_ISR_DMA+0xfa>
 80055c0:	4616      	mov	r6, r2
 80055c2:	460d      	mov	r5, r1
 80055c4:	4604      	mov	r4, r0
 80055c6:	2301      	movs	r3, #1
 80055c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055cc:	f011 0f20 	tst.w	r1, #32
 80055d0:	d002      	beq.n	80055d8 <I2C_Slave_ISR_DMA+0x24>
 80055d2:	f012 0f20 	tst.w	r2, #32
 80055d6:	d115      	bne.n	8005604 <I2C_Slave_ISR_DMA+0x50>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055d8:	f015 0f10 	tst.w	r5, #16
 80055dc:	d058      	beq.n	8005690 <I2C_Slave_ISR_DMA+0xdc>
 80055de:	f016 0f10 	tst.w	r6, #16
 80055e2:	d055      	beq.n	8005690 <I2C_Slave_ISR_DMA+0xdc>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055e4:	f3c6 3380 	ubfx	r3, r6, #14, #1
 80055e8:	b913      	cbnz	r3, 80055f0 <I2C_Slave_ISR_DMA+0x3c>
 80055ea:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80055ee:	d04b      	beq.n	8005688 <I2C_Slave_ISR_DMA+0xd4>
      if (hi2c->hdmarx != NULL)
 80055f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80055f2:	b152      	cbz	r2, 800560a <I2C_Slave_ISR_DMA+0x56>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80055f4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80055f8:	d009      	beq.n	800560e <I2C_Slave_ISR_DMA+0x5a>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	6852      	ldr	r2, [r2, #4]
 80055fe:	b1f2      	cbz	r2, 800563e <I2C_Slave_ISR_DMA+0x8a>
  uint32_t treatdmanack = 0U;
 8005600:	2100      	movs	r1, #0
 8005602:	e005      	b.n	8005610 <I2C_Slave_ISR_DMA+0x5c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005604:	f7ff fd72 	bl	80050ec <I2C_ITSlaveCplt>
 8005608:	e7e6      	b.n	80055d8 <I2C_Slave_ISR_DMA+0x24>
  uint32_t treatdmanack = 0U;
 800560a:	2100      	movs	r1, #0
 800560c:	e000      	b.n	8005610 <I2C_Slave_ISR_DMA+0x5c>
 800560e:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 8005610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005612:	b11a      	cbz	r2, 800561c <I2C_Slave_ISR_DMA+0x68>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005614:	b113      	cbz	r3, 800561c <I2C_Slave_ISR_DMA+0x68>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	b193      	cbz	r3, 8005642 <I2C_Slave_ISR_DMA+0x8e>
      if (treatdmanack == 1U)
 800561c:	b989      	cbnz	r1, 8005642 <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	2210      	movs	r2, #16
 8005622:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005624:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005626:	f043 0304 	orr.w	r3, r3, #4
 800562a:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800562c:	b117      	cbz	r7, 8005634 <I2C_Slave_ISR_DMA+0x80>
 800562e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005632:	d133      	bne.n	800569c <I2C_Slave_ISR_DMA+0xe8>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005634:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fcde 	bl	8004ff8 <I2C_ITError>
 800563c:	e02e      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
            treatdmanack = 1U;
 800563e:	2101      	movs	r1, #1
 8005640:	e7e6      	b.n	8005610 <I2C_Slave_ISR_DMA+0x5c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005642:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b28      	cmp	r3, #40	; 0x28
 800564a:	d008      	beq.n	800565e <I2C_Slave_ISR_DMA+0xaa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800564c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b29      	cmp	r3, #41	; 0x29
 8005654:	d00b      	beq.n	800566e <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	61da      	str	r2, [r3, #28]
 800565c:	e01e      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800565e:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8005662:	d1f3      	bne.n	800564c <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 8005664:	4629      	mov	r1, r5
 8005666:	4620      	mov	r0, r4
 8005668:	f7ff fc90 	bl	8004f8c <I2C_ITListenCplt>
 800566c:	e016      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800566e:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005672:	d0f0      	beq.n	8005656 <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	2210      	movs	r2, #16
 8005678:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 800567a:	4620      	mov	r0, r4
 800567c:	f7fe fecc 	bl	8004418 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8005680:	4620      	mov	r0, r4
 8005682:	f7ff fc05 	bl	8004e90 <I2C_ITSlaveSeqCplt>
 8005686:	e009      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	2210      	movs	r2, #16
 800568c:	61da      	str	r2, [r3, #28]
 800568e:	e005      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005690:	f015 0f08 	tst.w	r5, #8
 8005694:	d002      	beq.n	800569c <I2C_Slave_ISR_DMA+0xe8>
 8005696:	f016 0f08 	tst.w	r6, #8
 800569a:	d103      	bne.n	80056a4 <I2C_Slave_ISR_DMA+0xf0>
  __HAL_UNLOCK(hi2c);
 800569c:	2000      	movs	r0, #0
 800569e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80056a4:	4629      	mov	r1, r5
 80056a6:	4620      	mov	r0, r4
 80056a8:	f7ff fc21 	bl	8004eee <I2C_ITAddrCplt>
 80056ac:	e7f6      	b.n	800569c <I2C_Slave_ISR_DMA+0xe8>
  __HAL_LOCK(hi2c);
 80056ae:	2002      	movs	r0, #2
 80056b0:	e7f7      	b.n	80056a2 <I2C_Slave_ISR_DMA+0xee>

080056b2 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80056b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	f000 8099 	beq.w	80057ee <I2C_Master_ISR_DMA+0x13c>
{
 80056bc:	b510      	push	{r4, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80056c2:	2301      	movs	r3, #1
 80056c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056c8:	f011 0f10 	tst.w	r1, #16
 80056cc:	d002      	beq.n	80056d4 <I2C_Master_ISR_DMA+0x22>
 80056ce:	f012 0f10 	tst.w	r2, #16
 80056d2:	d131      	bne.n	8005738 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056d4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80056d8:	d05f      	beq.n	800579a <I2C_Master_ISR_DMA+0xe8>
 80056da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80056de:	d05c      	beq.n	800579a <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80056ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d045      	beq.n	800577e <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2bff      	cmp	r3, #255	; 0xff
 8005700:	d92c      	bls.n	800575c <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005702:	23ff      	movs	r3, #255	; 0xff
 8005704:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800570a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800570e:	2000      	movs	r0, #0
 8005710:	9000      	str	r0, [sp, #0]
 8005712:	4620      	mov	r0, r4
 8005714:	f7fe fe91 	bl	800443a <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8005718:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800571a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	b29b      	uxth	r3, r3
 8005720:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005722:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b22      	cmp	r3, #34	; 0x22
 800572a:	d022      	beq.n	8005772 <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e00c      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005738:	6803      	ldr	r3, [r0, #0]
 800573a:	2210      	movs	r2, #16
 800573c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800573e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005740:	f043 0304 	orr.w	r3, r3, #4
 8005744:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005746:	2112      	movs	r1, #18
 8005748:	f7fe fe92 	bl	8004470 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800574c:	4620      	mov	r0, r4
 800574e:	f7fe fe63 	bl	8004418 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8005752:	2000      	movs	r0, #0
 8005754:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005758:	b002      	add	sp, #8
 800575a:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 800575c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800575e:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005762:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005766:	d001      	beq.n	800576c <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 8005768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800576a:	e7ce      	b.n	800570a <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 800576c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005770:	e7cb      	b.n	800570a <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e7e9      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005786:	d103      	bne.n	8005790 <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 8005788:	4620      	mov	r0, r4
 800578a:	f7ff fb55 	bl	8004e38 <I2C_ITMasterSeqCplt>
 800578e:	e7e0      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff fc30 	bl	8004ff8 <I2C_ITError>
 8005798:	e7db      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800579a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800579e:	d01c      	beq.n	80057da <I2C_Master_ISR_DMA+0x128>
 80057a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057a4:	d019      	beq.n	80057da <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 80057a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b98b      	cbnz	r3, 80057d0 <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80057b4:	d1cd      	bne.n	8005752 <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80057b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057b8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80057bc:	d104      	bne.n	80057c8 <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e7c4      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fb35 	bl	8004e38 <I2C_ITMasterSeqCplt>
 80057ce:	e7c0      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057d0:	2140      	movs	r1, #64	; 0x40
 80057d2:	4620      	mov	r0, r4
 80057d4:	f7ff fc10 	bl	8004ff8 <I2C_ITError>
 80057d8:	e7bb      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057da:	f011 0f20 	tst.w	r1, #32
 80057de:	d0b8      	beq.n	8005752 <I2C_Master_ISR_DMA+0xa0>
 80057e0:	f012 0f20 	tst.w	r2, #32
 80057e4:	d0b5      	beq.n	8005752 <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fdb5 	bl	8005356 <I2C_ITMasterCplt>
 80057ec:	e7b1      	b.n	8005752 <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 80057ee:	2002      	movs	r0, #2
}
 80057f0:	4770      	bx	lr

080057f2 <I2C_DMAAbort>:
{
 80057f2:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80057f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80057f8:	2300      	movs	r3, #0
 80057fa:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80057fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057fe:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005800:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b60      	cmp	r3, #96	; 0x60
 8005808:	d002      	beq.n	8005810 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 800580a:	f7ff fbf3 	bl	8004ff4 <HAL_I2C_ErrorCallback>
}
 800580e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005810:	2320      	movs	r3, #32
 8005812:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8005816:	f7ff fbee 	bl	8004ff6 <HAL_I2C_AbortCpltCallback>
 800581a:	e7f8      	b.n	800580e <I2C_DMAAbort+0x1c>

0800581c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d124      	bne.n	8005870 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005826:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800582a:	2b01      	cmp	r3, #1
 800582c:	d022      	beq.n	8005874 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800582e:	2301      	movs	r3, #1
 8005830:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005834:	2324      	movs	r3, #36	; 0x24
 8005836:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800583a:	6802      	ldr	r2, [r0, #0]
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	6813      	ldr	r3, [r2, #0]
 8005848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800584c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800584e:	6802      	ldr	r2, [r0, #0]
 8005850:	6813      	ldr	r3, [r2, #0]
 8005852:	4319      	orrs	r1, r3
 8005854:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005856:	6802      	ldr	r2, [r0, #0]
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005860:	2320      	movs	r3, #32
 8005862:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005866:	2300      	movs	r3, #0
 8005868:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800586c:	4618      	mov	r0, r3
 800586e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005870:	2002      	movs	r0, #2
 8005872:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005874:	2002      	movs	r0, #2
  }
}
 8005876:	4770      	bx	lr

08005878 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005878:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b20      	cmp	r3, #32
 8005880:	d122      	bne.n	80058c8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005882:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005886:	2b01      	cmp	r3, #1
 8005888:	d020      	beq.n	80058cc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800588a:	2301      	movs	r3, #1
 800588c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	2324      	movs	r3, #36	; 0x24
 8005892:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005896:	6802      	ldr	r2, [r0, #0]
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058a0:	6802      	ldr	r2, [r0, #0]
 80058a2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058ac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058ae:	6802      	ldr	r2, [r0, #0]
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	2320      	movs	r3, #32
 80058ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058be:	2300      	movs	r3, #0
 80058c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80058c4:	4618      	mov	r0, r3
 80058c6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2002      	movs	r0, #2
 80058ca:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80058cc:	2002      	movs	r0, #2
  }
}
 80058ce:	4770      	bx	lr

080058d0 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d0:	4a02      	ldr	r2, [pc, #8]	; (80058dc <HAL_PWR_EnableBkUpAccess+0xc>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d8:	6013      	str	r3, [r2, #0]
}
 80058da:	4770      	bx	lr
 80058dc:	58000400 	.word	0x58000400

080058e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <HAL_PWREx_GetVoltageRange+0xc>)
 80058e2:	6818      	ldr	r0, [r3, #0]
}
 80058e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58000400 	.word	0x58000400

080058f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	b08d      	sub	sp, #52	; 0x34
 80058f4:	4606      	mov	r6, r0
 80058f6:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80058f8:	4c2a      	ldr	r4, [pc, #168]	; (80059a4 <RCC_SetFlashLatency+0xb4>)
 80058fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058fe:	ad0c      	add	r5, sp, #48	; 0x30
 8005900:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005904:	ab05      	add	r3, sp, #20
 8005906:	f104 0210 	add.w	r2, r4, #16
 800590a:	ca07      	ldmia	r2, {r0, r1, r2}
 800590c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005910:	ad01      	add	r5, sp, #4
 8005912:	341c      	adds	r4, #28
 8005914:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005918:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800591c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8005920:	d011      	beq.n	8005946 <RCC_SetFlashLatency+0x56>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005922:	2300      	movs	r3, #0
 8005924:	2b02      	cmp	r3, #2
 8005926:	d822      	bhi.n	800596e <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005928:	aa0c      	add	r2, sp, #48	; 0x30
 800592a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800592e:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 8005932:	42b2      	cmp	r2, r6
 8005934:	d215      	bcs.n	8005962 <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005936:	3301      	adds	r3, #1
 8005938:	e7f4      	b.n	8005924 <RCC_SetFlashLatency+0x34>
        latency = FLASH_LATENCY_RANGE[index];
 800593a:	aa0c      	add	r2, sp, #48	; 0x30
 800593c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005940:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 8005944:	e014      	b.n	8005970 <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005946:	2300      	movs	r3, #0
 8005948:	2b03      	cmp	r3, #3
 800594a:	d808      	bhi.n	800595e <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800594c:	aa0c      	add	r2, sp, #48	; 0x30
 800594e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005952:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8005956:	42b2      	cmp	r2, r6
 8005958:	d2ef      	bcs.n	800593a <RCC_SetFlashLatency+0x4a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800595a:	3301      	adds	r3, #1
 800595c:	e7f4      	b.n	8005948 <RCC_SetFlashLatency+0x58>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800595e:	2400      	movs	r4, #0
 8005960:	e006      	b.n	8005970 <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005962:	aa0c      	add	r2, sp, #48	; 0x30
 8005964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005968:	f853 4c2c 	ldr.w	r4, [r3, #-44]
        break;
 800596c:	e000      	b.n	8005970 <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800596e:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005970:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <RCC_SetFlashLatency+0xb8>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	f023 0307 	bic.w	r3, r3, #7
 8005978:	4323      	orrs	r3, r4
 800597a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800597c:	f7fd fcc8 	bl	8003310 <HAL_GetTick>
 8005980:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <RCC_SetFlashLatency+0xb8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	42a3      	cmp	r3, r4
 800598c:	d006      	beq.n	800599c <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800598e:	f7fd fcbf 	bl	8003310 <HAL_GetTick>
 8005992:	1b40      	subs	r0, r0, r5
 8005994:	2802      	cmp	r0, #2
 8005996:	d9f4      	bls.n	8005982 <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 8005998:	2003      	movs	r0, #3
 800599a:	e000      	b.n	800599e <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 800599c:	2000      	movs	r0, #0
}
 800599e:	b00d      	add	sp, #52	; 0x34
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a2:	bf00      	nop
 80059a4:	0800e3a8 	.word	0x0800e3a8
 80059a8:	58004000 	.word	0x58004000

080059ac <RCC_SetFlashLatencyFromMSIRange>:
{
 80059ac:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 80059ae:	28b0      	cmp	r0, #176	; 0xb0
 80059b0:	d819      	bhi.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80059b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80059b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80059bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0x44>)
 80059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ce:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80059d2:	f7ff ff85 	bl	80058e0 <HAL_PWREx_GetVoltageRange>
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0x48>)
 80059d8:	fba3 3404 	umull	r3, r4, r3, r4
 80059dc:	4601      	mov	r1, r0
 80059de:	0ca0      	lsrs	r0, r4, #18
 80059e0:	f7ff ff86 	bl	80058f0 <RCC_SetFlashLatency>
}
 80059e4:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80059e6:	4b01      	ldr	r3, [pc, #4]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80059e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80059ea:	e7e7      	b.n	80059bc <RCC_SetFlashLatencyFromMSIRange+0x10>
 80059ec:	0800e638 	.word	0x0800e638
 80059f0:	0800e5d8 	.word	0x0800e5d8
 80059f4:	431bde83 	.word	0x431bde83

080059f8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f000 836c 	beq.w	80060d6 <HAL_RCC_OscConfig+0x6de>
{
 80059fe:	b538      	push	{r3, r4, r5, lr}
 8005a00:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a02:	6803      	ldr	r3, [r0, #0]
 8005a04:	f013 0f20 	tst.w	r3, #32
 8005a08:	d059      	beq.n	8005abe <HAL_RCC_OscConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a0e:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a16:	f013 030c 	ands.w	r3, r3, #12
 8005a1a:	d01e      	beq.n	8005a5a <HAL_RCC_OscConfig+0x62>
 8005a1c:	2b0c      	cmp	r3, #12
 8005a1e:	d01a      	beq.n	8005a56 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a20:	69e3      	ldr	r3, [r4, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a7 	beq.w	8005b76 <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2c:	6813      	ldr	r3, [r2, #0]
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a34:	f7fd fc6c 	bl	8003310 <HAL_GetTick>
 8005a38:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f013 0f02 	tst.w	r3, #2
 8005a44:	f040 8087 	bne.w	8005b56 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a48:	f7fd fc62 	bl	8003310 <HAL_GetTick>
 8005a4c:	1b40      	subs	r0, r0, r5
 8005a4e:	2802      	cmp	r0, #2
 8005a50:	d9f3      	bls.n	8005a3a <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 8005a52:	2003      	movs	r0, #3
 8005a54:	e34c      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005a56:	2a01      	cmp	r2, #1
 8005a58:	d1e2      	bne.n	8005a20 <HAL_RCC_OscConfig+0x28>
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f013 0f02 	tst.w	r3, #2
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a66:	69e3      	ldr	r3, [r4, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8336 	beq.w	80060da <HAL_RCC_OscConfig+0x6e2>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005a7a:	2bb0      	cmp	r3, #176	; 0xb0
 8005a7c:	d900      	bls.n	8005a80 <HAL_RCC_OscConfig+0x88>
    msiRange = LL_RCC_MSIRANGE_11;
 8005a7e:	23b0      	movs	r3, #176	; 0xb0
 8005a80:	4298      	cmp	r0, r3
 8005a82:	d953      	bls.n	8005b2c <HAL_RCC_OscConfig+0x134>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a84:	f7ff ff92 	bl	80059ac <RCC_SetFlashLatencyFromMSIRange>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f040 8328 	bne.w	80060de <HAL_RCC_OscConfig+0x6e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a9e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005aa0:	6853      	ldr	r3, [r2, #4]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005aaa:	6053      	str	r3, [r2, #4]
        SystemCoreClockUpdate();
 8005aac:	f7fd fa76 	bl	8002f9c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ab0:	4bc2      	ldr	r3, [pc, #776]	; (8005dbc <HAL_RCC_OscConfig+0x3c4>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	f7fd f9c8 	bl	8002e48 <HAL_InitTick>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f040 8312 	bne.w	80060e2 <HAL_RCC_OscConfig+0x6ea>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f013 0f01 	tst.w	r3, #1
 8005ac4:	d079      	beq.n	8005bba <HAL_RCC_OscConfig+0x1c2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aca:	6893      	ldr	r3, [r2, #8]
 8005acc:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ad0:	68d2      	ldr	r2, [r2, #12]
 8005ad2:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d065      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1ae>
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d061      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae4:	f000 8093 	beq.w	8005c0e <HAL_RCC_OscConfig+0x216>
 8005ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aec:	f000 8096 	beq.w	8005c1c <HAL_RCC_OscConfig+0x224>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005afa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b02:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8093 	beq.w	8005c32 <HAL_RCC_OscConfig+0x23a>
        tickstart = HAL_GetTick();
 8005b0c:	f7fd fc00 	bl	8003310 <HAL_GetTick>
 8005b10:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b1c:	d14d      	bne.n	8005bba <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b1e:	f7fd fbf7 	bl	8003310 <HAL_GetTick>
 8005b22:	1b40      	subs	r0, r0, r5
 8005b24:	2864      	cmp	r0, #100	; 0x64
 8005b26:	d9f4      	bls.n	8005b12 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8005b28:	2003      	movs	r0, #3
 8005b2a:	e2e1      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b36:	4318      	orrs	r0, r3
 8005b38:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b3a:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b3c:	6853      	ldr	r3, [r2, #4]
 8005b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b46:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b48:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b4a:	f7ff ff2f 	bl	80059ac <RCC_SetFlashLatencyFromMSIRange>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d0ac      	beq.n	8005aac <HAL_RCC_OscConfig+0xb4>
            return HAL_ERROR;
 8005b52:	2001      	movs	r0, #1
 8005b54:	e2cc      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b66:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b68:	6853      	ldr	r3, [r2, #4]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b72:	6053      	str	r3, [r2, #4]
 8005b74:	e7a3      	b.n	8005abe <HAL_RCC_OscConfig+0xc6>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b82:	f7fd fbc5 	bl	8003310 <HAL_GetTick>
 8005b86:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f013 0f02 	tst.w	r3, #2
 8005b92:	d094      	beq.n	8005abe <HAL_RCC_OscConfig+0xc6>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b94:	f7fd fbbc 	bl	8003310 <HAL_GetTick>
 8005b98:	1b40      	subs	r0, r0, r5
 8005b9a:	2802      	cmp	r0, #2
 8005b9c:	d9f4      	bls.n	8005b88 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005b9e:	2003      	movs	r0, #3
 8005ba0:	e2a6      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005ba2:	2a03      	cmp	r2, #3
 8005ba4:	d19b      	bne.n	8005ade <HAL_RCC_OscConfig+0xe6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005bb0:	d003      	beq.n	8005bba <HAL_RCC_OscConfig+0x1c2>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8296 	beq.w	80060e6 <HAL_RCC_OscConfig+0x6ee>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	f013 0f02 	tst.w	r3, #2
 8005bc0:	d05c      	beq.n	8005c7c <HAL_RCC_OscConfig+0x284>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc6:	6893      	ldr	r3, [r2, #8]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bcc:	68d2      	ldr	r2, [r2, #12]
 8005bce:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d03f      	beq.n	8005c56 <HAL_RCC_OscConfig+0x25e>
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	d03b      	beq.n	8005c52 <HAL_RCC_OscConfig+0x25a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8083 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x2f0>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be6:	6813      	ldr	r3, [r2, #0]
 8005be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bee:	f7fd fb8f 	bl	8003310 <HAL_GetTick>
 8005bf2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005bfe:	d169      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x2dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fd fb86 	bl	8003310 <HAL_GetTick>
 8005c04:	1b40      	subs	r0, r0, r5
 8005c06:	2802      	cmp	r0, #2
 8005c08:	d9f4      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	e270      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e773      	b.n	8005b04 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005c26:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e768      	b.n	8005b04 <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 8005c32:	f7fd fb6d 	bl	8003310 <HAL_GetTick>
 8005c36:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c42:	d0ba      	beq.n	8005bba <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c44:	f7fd fb64 	bl	8003310 <HAL_GetTick>
 8005c48:	1b40      	subs	r0, r0, r5
 8005c4a:	2864      	cmp	r0, #100	; 0x64
 8005c4c:	d9f4      	bls.n	8005c38 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8005c4e:	2003      	movs	r0, #3
 8005c50:	e24e      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005c52:	2a02      	cmp	r2, #2
 8005c54:	d1c1      	bne.n	8005bda <HAL_RCC_OscConfig+0x1e2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005c60:	d003      	beq.n	8005c6a <HAL_RCC_OscConfig+0x272>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8240 	beq.w	80060ea <HAL_RCC_OscConfig+0x6f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6a:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	6853      	ldr	r3, [r2, #4]
 8005c72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c7a:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	f013 0f18 	tst.w	r3, #24
 8005c82:	f000 80e5 	beq.w	8005e50 <HAL_RCC_OscConfig+0x458>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c86:	6962      	ldr	r2, [r4, #20]
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	f000 80af 	beq.w	8005dec <HAL_RCC_OscConfig+0x3f4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005c8e:	f013 0f10 	tst.w	r3, #16
 8005c92:	d07a      	beq.n	8005d8a <HAL_RCC_OscConfig+0x392>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9c:	f013 0f02 	tst.w	r3, #2
 8005ca0:	d138      	bne.n	8005d14 <HAL_RCC_OscConfig+0x31c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005cb2:	f7fd fb2d 	bl	8003310 <HAL_GetTick>
 8005cb6:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc0:	f013 0f02 	tst.w	r3, #2
 8005cc4:	d126      	bne.n	8005d14 <HAL_RCC_OscConfig+0x31c>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cc6:	f7fd fb23 	bl	8003310 <HAL_GetTick>
 8005cca:	1b40      	subs	r0, r0, r5
 8005ccc:	2802      	cmp	r0, #2
 8005cce:	d9f3      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x2c0>
              return HAL_TIMEOUT;
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	e20d      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd4:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cda:	6853      	ldr	r3, [r2, #4]
 8005cdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ce0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ce4:	6053      	str	r3, [r2, #4]
 8005ce6:	e7c9      	b.n	8005c7c <HAL_RCC_OscConfig+0x284>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fb0c 	bl	8003310 <HAL_GetTick>
 8005cf8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005d04:	d0ba      	beq.n	8005c7c <HAL_RCC_OscConfig+0x284>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d06:	f7fd fb03 	bl	8003310 <HAL_GetTick>
 8005d0a:	1b40      	subs	r0, r0, r5
 8005d0c:	2802      	cmp	r0, #2
 8005d0e:	d9f4      	bls.n	8005cfa <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 8005d10:	2003      	movs	r0, #3
 8005d12:	e1ed      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d18:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d1c:	f043 0304 	orr.w	r3, r3, #4
 8005d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8005d24:	f7fd faf4 	bl	8003310 <HAL_GetTick>
 8005d28:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d32:	f013 0f08 	tst.w	r3, #8
 8005d36:	d106      	bne.n	8005d46 <HAL_RCC_OscConfig+0x34e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d38:	f7fd faea 	bl	8003310 <HAL_GetTick>
 8005d3c:	1b40      	subs	r0, r0, r5
 8005d3e:	2803      	cmp	r0, #3
 8005d40:	d9f3      	bls.n	8005d2a <HAL_RCC_OscConfig+0x332>
            return HAL_TIMEOUT;
 8005d42:	2003      	movs	r0, #3
 8005d44:	e1d4      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005d46:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d5c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8005d68:	f7fd fad2 	bl	8003310 <HAL_GetTick>
 8005d6c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d76:	f013 0f02 	tst.w	r3, #2
 8005d7a:	d069      	beq.n	8005e50 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d7c:	f7fd fac8 	bl	8003310 <HAL_GetTick>
 8005d80:	1b40      	subs	r0, r0, r5
 8005d82:	2802      	cmp	r0, #2
 8005d84:	d9f3      	bls.n	8005d6e <HAL_RCC_OscConfig+0x376>
            return HAL_TIMEOUT;
 8005d86:	2003      	movs	r0, #3
 8005d88:	e1b2      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d8e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8005d9a:	f7fd fab9 	bl	8003310 <HAL_GetTick>
 8005d9e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	f013 0f02 	tst.w	r3, #2
 8005dac:	d108      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005dae:	f7fd faaf 	bl	8003310 <HAL_GetTick>
 8005db2:	1b40      	subs	r0, r0, r5
 8005db4:	2802      	cmp	r0, #2
 8005db6:	d9f3      	bls.n	8005da0 <HAL_RCC_OscConfig+0x3a8>
            return HAL_TIMEOUT;
 8005db8:	2003      	movs	r0, #3
 8005dba:	e199      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
 8005dbc:	20000020 	.word	0x20000020
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd8:	f013 0f08 	tst.w	r3, #8
 8005ddc:	d038      	beq.n	8005e50 <HAL_RCC_OscConfig+0x458>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005dde:	f7fd fa97 	bl	8003310 <HAL_GetTick>
 8005de2:	1b40      	subs	r0, r0, r5
 8005de4:	2803      	cmp	r0, #3
 8005de6:	d9f3      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8005de8:	2003      	movs	r0, #3
 8005dea:	e181      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005dfc:	f7fd fa88 	bl	8003310 <HAL_GetTick>
 8005e00:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0a:	f013 0f08 	tst.w	r3, #8
 8005e0e:	d006      	beq.n	8005e1e <HAL_RCC_OscConfig+0x426>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e10:	f7fd fa7e 	bl	8003310 <HAL_GetTick>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	2803      	cmp	r0, #3
 8005e18:	d9f3      	bls.n	8005e02 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8005e1a:	2003      	movs	r0, #3
 8005e1c:	e168      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e22:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005e2e:	f7fd fa6f 	bl	8003310 <HAL_GetTick>
 8005e32:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3c:	f013 0f02 	tst.w	r3, #2
 8005e40:	d006      	beq.n	8005e50 <HAL_RCC_OscConfig+0x458>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005e42:	f7fd fa65 	bl	8003310 <HAL_GetTick>
 8005e46:	1b40      	subs	r0, r0, r5
 8005e48:	2802      	cmp	r0, #2
 8005e4a:	d9f3      	bls.n	8005e34 <HAL_RCC_OscConfig+0x43c>
          return HAL_TIMEOUT;
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	e14f      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f013 0f04 	tst.w	r3, #4
 8005e56:	d068      	beq.n	8005f2a <HAL_RCC_OscConfig+0x532>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e58:	4baa      	ldr	r3, [pc, #680]	; (8006104 <HAL_RCC_OscConfig+0x70c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e60:	d027      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e62:	68a3      	ldr	r3, [r4, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d035      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x4dc>
 8005e68:	2b05      	cmp	r3, #5
 8005e6a:	d03c      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x4ee>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	b3db      	cbz	r3, 8005f04 <HAL_RCC_OscConfig+0x50c>
      tickstart = HAL_GetTick();
 8005e8c:	f7fd fa40 	bl	8003310 <HAL_GetTick>
 8005e90:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9a:	f013 0f02 	tst.w	r3, #2
 8005e9e:	d144      	bne.n	8005f2a <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea0:	f7fd fa36 	bl	8003310 <HAL_GetTick>
 8005ea4:	1b40      	subs	r0, r0, r5
 8005ea6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	d9f1      	bls.n	8005e92 <HAL_RCC_OscConfig+0x49a>
          return HAL_TIMEOUT;
 8005eae:	2003      	movs	r0, #3
 8005eb0:	e11e      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
      HAL_PWR_EnableBkUpAccess();
 8005eb2:	f7ff fd0d 	bl	80058d0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005eb6:	f7fd fa2b 	bl	8003310 <HAL_GetTick>
 8005eba:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ebc:	4b91      	ldr	r3, [pc, #580]	; (8006104 <HAL_RCC_OscConfig+0x70c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ec4:	d1cd      	bne.n	8005e62 <HAL_RCC_OscConfig+0x46a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fa23 	bl	8003310 <HAL_GetTick>
 8005eca:	1b40      	subs	r0, r0, r5
 8005ecc:	2802      	cmp	r0, #2
 8005ece:	d9f5      	bls.n	8005ebc <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	e10d      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ee4:	e7d0      	b.n	8005e88 <HAL_RCC_OscConfig+0x490>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eee:	f042 0204 	orr.w	r2, r2, #4
 8005ef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ef6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005f02:	e7c1      	b.n	8005e88 <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8005f04:	f7fd fa04 	bl	8003310 <HAL_GetTick>
 8005f08:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f013 0f02 	tst.w	r3, #2
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_OscConfig+0x532>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f18:	f7fd f9fa 	bl	8003310 <HAL_GetTick>
 8005f1c:	1b40      	subs	r0, r0, r5
 8005f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f22:	4298      	cmp	r0, r3
 8005f24:	d9f1      	bls.n	8005f0a <HAL_RCC_OscConfig+0x512>
          return HAL_TIMEOUT;
 8005f26:	2003      	movs	r0, #3
 8005f28:	e0e2      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f30:	d033      	beq.n	8005f9a <HAL_RCC_OscConfig+0x5a2>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f34:	b1c3      	cbz	r3, 8005f68 <HAL_RCC_OscConfig+0x570>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f3a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005f46:	f7fd f9e3 	bl	8003310 <HAL_GetTick>
 8005f4a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f54:	f013 0f02 	tst.w	r3, #2
 8005f58:	d11f      	bne.n	8005f9a <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5a:	f7fd f9d9 	bl	8003310 <HAL_GetTick>
 8005f5e:	1b40      	subs	r0, r0, r5
 8005f60:	2802      	cmp	r0, #2
 8005f62:	d9f3      	bls.n	8005f4c <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 8005f64:	2003      	movs	r0, #3
 8005f66:	e0c3      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005f78:	f7fd f9ca 	bl	8003310 <HAL_GetTick>
 8005f7c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f86:	f013 0f02 	tst.w	r3, #2
 8005f8a:	d006      	beq.n	8005f9a <HAL_RCC_OscConfig+0x5a2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f8c:	f7fd f9c0 	bl	8003310 <HAL_GetTick>
 8005f90:	1b40      	subs	r0, r0, r5
 8005f92:	2802      	cmp	r0, #2
 8005f94:	d9f3      	bls.n	8005f7e <HAL_RCC_OscConfig+0x586>
          return HAL_TIMEOUT;
 8005f96:	2003      	movs	r0, #3
 8005f98:	e0aa      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80a6 	beq.w	80060ee <HAL_RCC_OscConfig+0x6f6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa6:	6892      	ldr	r2, [r2, #8]
 8005fa8:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fac:	2a0c      	cmp	r2, #12
 8005fae:	d063      	beq.n	8006078 <HAL_RCC_OscConfig+0x680>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d020      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x5fe>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005fbe:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	f022 0203 	bic.w	r2, r2, #3
 8005fc6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8005fce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd2:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8005fd4:	f7fd f99c 	bl	8003310 <HAL_GetTick>
 8005fd8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005fe4:	f000 8087 	beq.w	80060f6 <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fd f992 	bl	8003310 <HAL_GetTick>
 8005fec:	1b00      	subs	r0, r0, r4
 8005fee:	2802      	cmp	r0, #2
 8005ff0:	d9f3      	bls.n	8005fda <HAL_RCC_OscConfig+0x5e2>
            return HAL_TIMEOUT;
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	e07c      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006000:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006002:	f7fd f985 	bl	8003310 <HAL_GetTick>
 8006006:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006012:	d006      	beq.n	8006022 <HAL_RCC_OscConfig+0x62a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006014:	f7fd f97c 	bl	8003310 <HAL_GetTick>
 8006018:	1b40      	subs	r0, r0, r5
 800601a:	2802      	cmp	r0, #2
 800601c:	d9f4      	bls.n	8006008 <HAL_RCC_OscConfig+0x610>
            return HAL_TIMEOUT;
 800601e:	2003      	movs	r0, #3
 8006020:	e066      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006026:	68d3      	ldr	r3, [r2, #12]
 8006028:	4937      	ldr	r1, [pc, #220]	; (8006108 <HAL_RCC_OscConfig+0x710>)
 800602a:	4019      	ands	r1, r3
 800602c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800602e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006030:	4303      	orrs	r3, r0
 8006032:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006034:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006038:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800603a:	4303      	orrs	r3, r0
 800603c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800603e:	4303      	orrs	r3, r0
 8006040:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006042:	4303      	orrs	r3, r0
 8006044:	430b      	orrs	r3, r1
 8006046:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006050:	68d3      	ldr	r3, [r2, #12]
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006056:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006058:	f7fd f95a 	bl	8003310 <HAL_GetTick>
 800605c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006068:	d143      	bne.n	80060f2 <HAL_RCC_OscConfig+0x6fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800606a:	f7fd f951 	bl	8003310 <HAL_GetTick>
 800606e:	1b00      	subs	r0, r0, r4
 8006070:	2802      	cmp	r0, #2
 8006072:	d9f4      	bls.n	800605e <HAL_RCC_OscConfig+0x666>
            return HAL_TIMEOUT;
 8006074:	2003      	movs	r0, #3
 8006076:	e03b      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006078:	2b01      	cmp	r3, #1
 800607a:	d03e      	beq.n	80060fa <HAL_RCC_OscConfig+0x702>
        uint32_t pllcfgr = RCC->PLLCFGR;
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006082:	f003 0103 	and.w	r1, r3, #3
 8006086:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006088:	4291      	cmp	r1, r2
 800608a:	d001      	beq.n	8006090 <HAL_RCC_OscConfig+0x698>
          return HAL_ERROR;
 800608c:	2001      	movs	r0, #1
 800608e:	e02f      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006090:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006094:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006096:	428a      	cmp	r2, r1
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x6a6>
          return HAL_ERROR;
 800609a:	2001      	movs	r0, #1
 800609c:	e028      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800609e:	f3c3 2206 	ubfx	r2, r3, #8, #7
 80060a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060a4:	428a      	cmp	r2, r1
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_OscConfig+0x6b4>
          return HAL_ERROR;
 80060a8:	2001      	movs	r0, #1
 80060aa:	e021      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060ac:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80060b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80060b2:	428a      	cmp	r2, r1
 80060b4:	d001      	beq.n	80060ba <HAL_RCC_OscConfig+0x6c2>
          return HAL_ERROR;
 80060b6:	2001      	movs	r0, #1
 80060b8:	e01a      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80060ba:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80060be:	6c21      	ldr	r1, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060c0:	428a      	cmp	r2, r1
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_OscConfig+0x6d0>
          return HAL_ERROR;
 80060c4:	2001      	movs	r0, #1
 80060c6:	e013      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80060c8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80060cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d015      	beq.n	80060fe <HAL_RCC_OscConfig+0x706>
          return HAL_ERROR;
 80060d2:	2001      	movs	r0, #1
 80060d4:	e00c      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
    return HAL_ERROR;
 80060d6:	2001      	movs	r0, #1
}
 80060d8:	4770      	bx	lr
        return HAL_ERROR;
 80060da:	2001      	movs	r0, #1
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
            return HAL_ERROR;
 80060de:	2001      	movs	r0, #1
 80060e0:	e006      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
          return HAL_ERROR;
 80060e2:	2001      	movs	r0, #1
 80060e4:	e004      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80060e6:	2001      	movs	r0, #1
 80060e8:	e002      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80060ea:	2001      	movs	r0, #1
 80060ec:	e000      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 80060ee:	2000      	movs	r0, #0
}
 80060f0:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80060f2:	2000      	movs	r0, #0
 80060f4:	e7fc      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e7fa      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
        return HAL_ERROR;
 80060fa:	2001      	movs	r0, #1
 80060fc:	e7f8      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
  return HAL_OK;
 80060fe:	2000      	movs	r0, #0
 8006100:	e7f6      	b.n	80060f0 <HAL_RCC_OscConfig+0x6f8>
 8006102:	bf00      	nop
 8006104:	58000400 	.word	0x58000400
 8006108:	11c1808c 	.word	0x11c1808c

0800610c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800610c:	2800      	cmp	r0, #0
 800610e:	f000 8127 	beq.w	8006360 <HAL_RCC_ClockConfig+0x254>
{
 8006112:	b570      	push	{r4, r5, r6, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006118:	4b92      	ldr	r3, [pc, #584]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	428b      	cmp	r3, r1
 8006122:	d32d      	bcc.n	8006180 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	f013 0f02 	tst.w	r3, #2
 800612a:	d13f      	bne.n	80061ac <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	f013 0f20 	tst.w	r3, #32
 8006132:	d153      	bne.n	80061dc <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f013 0f40 	tst.w	r3, #64	; 0x40
 800613a:	d16a      	bne.n	8006212 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	f013 0f04 	tst.w	r3, #4
 8006142:	f040 8083 	bne.w	800624c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f013 0f08 	tst.w	r3, #8
 800614c:	f040 8097 	bne.w	800627e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	f013 0f01 	tst.w	r3, #1
 8006156:	f000 80e0 	beq.w	800631a <HAL_RCC_ClockConfig+0x20e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	2b02      	cmp	r3, #2
 800615e:	f000 80a8 	beq.w	80062b2 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006162:	2b03      	cmp	r3, #3
 8006164:	f000 80c9 	beq.w	80062fa <HAL_RCC_ClockConfig+0x1ee>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 80ce 	bne.w	800630a <HAL_RCC_ClockConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	f012 0f02 	tst.w	r2, #2
 8006178:	f040 80a1 	bne.w	80062be <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	e0ee      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006180:	4a78      	ldr	r2, [pc, #480]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 8006182:	6813      	ldr	r3, [r2, #0]
 8006184:	f023 0307 	bic.w	r3, r3, #7
 8006188:	430b      	orrs	r3, r1
 800618a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800618c:	f7fd f8c0 	bl	8003310 <HAL_GetTick>
 8006190:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b74      	ldr	r3, [pc, #464]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	42ab      	cmp	r3, r5
 800619c:	d0c2      	beq.n	8006124 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800619e:	f7fd f8b7 	bl	8003310 <HAL_GetTick>
 80061a2:	1b80      	subs	r0, r0, r6
 80061a4:	2802      	cmp	r0, #2
 80061a6:	d9f4      	bls.n	8006192 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80061a8:	2003      	movs	r0, #3
 80061aa:	e0d8      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80061ac:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b2:	688a      	ldr	r2, [r1, #8]
 80061b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80061b8:	4313      	orrs	r3, r2
 80061ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80061bc:	f7fd f8a8 	bl	8003310 <HAL_GetTick>
 80061c0:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80061cc:	d1ae      	bne.n	800612c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ce:	f7fd f89f 	bl	8003310 <HAL_GetTick>
 80061d2:	1b80      	subs	r0, r0, r6
 80061d4:	2802      	cmp	r0, #2
 80061d6:	d9f4      	bls.n	80061c2 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80061d8:	2003      	movs	r0, #3
 80061da:	e0c0      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80061dc:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80061de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e2:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80061e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80061f0:	f7fd f88e 	bl	8003310 <HAL_GetTick>
 80061f4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006202:	d197      	bne.n	8006134 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006204:	f7fd f884 	bl	8003310 <HAL_GetTick>
 8006208:	1b80      	subs	r0, r0, r6
 800620a:	2802      	cmp	r0, #2
 800620c:	d9f3      	bls.n	80061f6 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800620e:	2003      	movs	r0, #3
 8006210:	e0a5      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006212:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006218:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800621c:	f023 030f 	bic.w	r3, r3, #15
 8006220:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006224:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006228:	f7fd f872 	bl	8003310 <HAL_GetTick>
 800622c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006236:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800623a:	f47f af7f 	bne.w	800613c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800623e:	f7fd f867 	bl	8003310 <HAL_GetTick>
 8006242:	1b80      	subs	r0, r0, r6
 8006244:	2802      	cmp	r0, #2
 8006246:	d9f2      	bls.n	800622e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006248:	2003      	movs	r0, #3
 800624a:	e088      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800624c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800624e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006252:	688a      	ldr	r2, [r1, #8]
 8006254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006258:	4313      	orrs	r3, r2
 800625a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800625c:	f7fd f858 	bl	8003310 <HAL_GetTick>
 8006260:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800626c:	f47f af6b 	bne.w	8006146 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006270:	f7fd f84e 	bl	8003310 <HAL_GetTick>
 8006274:	1b80      	subs	r0, r0, r6
 8006276:	2802      	cmp	r0, #2
 8006278:	d9f3      	bls.n	8006262 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
 800627c:	e06f      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800627e:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006284:	6893      	ldr	r3, [r2, #8]
 8006286:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800628a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800628e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006290:	f7fd f83e 	bl	8003310 <HAL_GetTick>
 8006294:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80062a0:	f47f af56 	bne.w	8006150 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062a4:	f7fd f834 	bl	8003310 <HAL_GetTick>
 80062a8:	1b80      	subs	r0, r0, r6
 80062aa:	2802      	cmp	r0, #2
 80062ac:	d9f3      	bls.n	8006296 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80062ae:	2003      	movs	r0, #3
 80062b0:	e055      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80062b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80062bc:	d01b      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x1ea>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80062be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c2:	688a      	ldr	r2, [r1, #8]
 80062c4:	f022 0203 	bic.w	r2, r2, #3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80062cc:	f7fd f820 	bl	8003310 <HAL_GetTick>
 80062d0:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062dc:	6862      	ldr	r2, [r4, #4]
 80062de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80062e2:	d01a      	beq.n	800631a <HAL_RCC_ClockConfig+0x20e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fd f814 	bl	8003310 <HAL_GetTick>
 80062e8:	1b80      	subs	r0, r0, r6
 80062ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80062ee:	4298      	cmp	r0, r3
 80062f0:	d9ef      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x1c6>
        return HAL_TIMEOUT;
 80062f2:	2003      	movs	r0, #3
 80062f4:	e033      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
        return HAL_ERROR;
 80062f6:	2001      	movs	r0, #1
 80062f8:	e031      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80062fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006304:	d1db      	bne.n	80062be <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8006306:	2001      	movs	r0, #1
 8006308:	e029      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006314:	d1d3      	bne.n	80062be <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 8006316:	2001      	movs	r0, #1
 8006318:	e021      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	42ab      	cmp	r3, r5
 8006324:	d915      	bls.n	8006352 <HAL_RCC_ClockConfig+0x246>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4a0f      	ldr	r2, [pc, #60]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	432b      	orrs	r3, r5
 8006330:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006332:	f7fc ffed 	bl	8003310 <HAL_GetTick>
 8006336:	4604      	mov	r4, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <HAL_RCC_ClockConfig+0x258>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	42ab      	cmp	r3, r5
 8006342:	d006      	beq.n	8006352 <HAL_RCC_ClockConfig+0x246>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006344:	f7fc ffe4 	bl	8003310 <HAL_GetTick>
 8006348:	1b00      	subs	r0, r0, r4
 800634a:	2802      	cmp	r0, #2
 800634c:	d9f4      	bls.n	8006338 <HAL_RCC_ClockConfig+0x22c>
        return HAL_TIMEOUT;
 800634e:	2003      	movs	r0, #3
 8006350:	e005      	b.n	800635e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClockUpdate();
 8006352:	f7fc fe23 	bl	8002f9c <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8006356:	f7fc ffe1 	bl	800331c <HAL_GetTickPrio>
 800635a:	f7fc fd75 	bl	8002e48 <HAL_InitTick>
}
 800635e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006360:	2001      	movs	r0, #1
}
 8006362:	4770      	bx	lr
 8006364:	58004000 	.word	0x58004000

08006368 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800636e:	f013 030c 	ands.w	r3, r3, #12
 8006372:	d10c      	bne.n	800638e <HAL_RCC_GetSysClockFreq+0x26>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 800637e:	2bb0      	cmp	r3, #176	; 0xb0
 8006380:	d900      	bls.n	8006384 <HAL_RCC_GetSysClockFreq+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006382:	23b0      	movs	r3, #176	; 0xb0
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	4a24      	ldr	r2, [pc, #144]	; (8006418 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006388:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800638c:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800638e:	2b04      	cmp	r3, #4
 8006390:	d03d      	beq.n	800640e <HAL_RCC_GetSysClockFreq+0xa6>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006392:	2b08      	cmp	r3, #8
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x50>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d030      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0x9e>
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d10f      	bne.n	80063c8 <HAL_RCC_GetSysClockFreq+0x60>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80063b2:	d12a      	bne.n	800640a <HAL_RCC_GetSysClockFreq+0xa2>
          pllinputfreq = HSE_VALUE;
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <HAL_RCC_GetSysClockFreq+0xb4>)
 80063b6:	e013      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x78>
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80063c2:	d026      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0xaa>
      sysclockfreq = HSE_VALUE / 2U;
 80063c4:	4816      	ldr	r0, [pc, #88]	; (8006420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063c6:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80063d2:	2bb0      	cmp	r3, #176	; 0xb0
 80063d4:	d900      	bls.n	80063d8 <HAL_RCC_GetSysClockFreq+0x70>
    msiRange = LL_RCC_MSIRANGE_11;
 80063d6:	23b0      	movs	r3, #176	; 0xb0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	4a0f      	ldr	r2, [pc, #60]	; (8006418 <HAL_RCC_GetSysClockFreq+0xb0>)
 80063dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80063e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e4:	68d0      	ldr	r0, [r2, #12]
 80063e6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80063ea:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80063ee:	68d3      	ldr	r3, [r2, #12]
 80063f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80063f4:	3301      	adds	r3, #1
 80063f6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80063fa:	68d3      	ldr	r3, [r2, #12]
 80063fc:	0f5b      	lsrs	r3, r3, #29
 80063fe:	3301      	adds	r3, #1
 8006400:	fbb0 f0f3 	udiv	r0, r0, r3
 8006404:	4770      	bx	lr
        pllinputfreq = HSI_VALUE;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006408:	e7ea      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x78>
          pllinputfreq = HSE_VALUE / 2U;
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCC_GetSysClockFreq+0xb8>)
 800640c:	e7e8      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSI_VALUE;
 800640e:	4804      	ldr	r0, [pc, #16]	; (8006420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006410:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006412:	4802      	ldr	r0, [pc, #8]	; (800641c <HAL_RCC_GetSysClockFreq+0xb4>)
}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	0800e638 	.word	0x0800e638
 800641c:	01e84800 	.word	0x01e84800
 8006420:	00f42400 	.word	0x00f42400

08006424 <HAL_RCC_GetHCLKFreq>:
{
 8006424:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006426:	f7ff ff9f 	bl	8006368 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800642a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006434:	4a02      	ldr	r2, [pc, #8]	; (8006440 <HAL_RCC_GetHCLKFreq+0x1c>)
 8006436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800643a:	fbb0 f0f3 	udiv	r0, r0, r3
 800643e:	bd08      	pop	{r3, pc}
 8006440:	0800e5d8 	.word	0x0800e5d8

08006444 <HAL_RCC_GetPCLK1Freq>:
{
 8006444:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006446:	f7ff ffed 	bl	8006424 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800644a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006454:	4a03      	ldr	r2, [pc, #12]	; (8006464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	f003 031f 	and.w	r3, r3, #31
}
 800645e:	40d8      	lsrs	r0, r3
 8006460:	bd08      	pop	{r3, pc}
 8006462:	bf00      	nop
 8006464:	0800e618 	.word	0x0800e618

08006468 <HAL_RCC_GetPCLK2Freq>:
{
 8006468:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800646a:	f7ff ffdb 	bl	8006424 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800646e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006478:	4a03      	ldr	r2, [pc, #12]	; (8006488 <HAL_RCC_GetPCLK2Freq+0x20>)
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	f003 031f 	and.w	r3, r3, #31
}
 8006482:	40d8      	lsrs	r0, r3
 8006484:	bd08      	pop	{r3, pc}
 8006486:	bf00      	nop
 8006488:	0800e618 	.word	0x0800e618

0800648c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800648c:	236f      	movs	r3, #111	; 0x6f
 800648e:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	f002 020c 	and.w	r2, r2, #12
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800649a:	6042      	str	r2, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80064a2:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80064aa:	60c2      	str	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80064b2:	6102      	str	r2, [r0, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80064b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80064b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80064bc:	6142      	str	r2, [r0, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80064be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	b2db      	uxtb	r3, r3
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80064c6:	6183      	str	r3, [r0, #24]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <HAL_RCC_GetClockConfig+0x48>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	600b      	str	r3, [r1, #0]
}
 80064d2:	4770      	bx	lr
 80064d4:	58004000 	.word	0x58004000

080064d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80064dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064e6:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064e8:	f7fc ff12 	bl	8003310 <HAL_GetTick>
 80064ec:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80064f8:	d006      	beq.n	8006508 <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064fa:	f7fc ff09 	bl	8003310 <HAL_GetTick>
 80064fe:	1b00      	subs	r0, r0, r4
 8006500:	2802      	cmp	r0, #2
 8006502:	d9f4      	bls.n	80064ee <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 8006504:	2403      	movs	r4, #3
 8006506:	e000      	b.n	800650a <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 800650a:	b10c      	cbz	r4, 8006510 <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 800650c:	4620      	mov	r0, r4
 800650e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800651a:	6829      	ldr	r1, [r5, #0]
 800651c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006520:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8006528:	6869      	ldr	r1, [r5, #4]
 800652a:	430a      	orrs	r2, r1
 800652c:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006534:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006536:	f7fc feeb 	bl	8003310 <HAL_GetTick>
 800653a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800653c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006546:	d105      	bne.n	8006554 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006548:	f7fc fee2 	bl	8003310 <HAL_GetTick>
 800654c:	1b80      	subs	r0, r0, r6
 800654e:	2802      	cmp	r0, #2
 8006550:	d9f4      	bls.n	800653c <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 8006552:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8006554:	2c00      	cmp	r4, #0
 8006556:	d1d9      	bne.n	800650c <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655c:	6913      	ldr	r3, [r2, #16]
 800655e:	6929      	ldr	r1, [r5, #16]
 8006560:	430b      	orrs	r3, r1
 8006562:	6113      	str	r3, [r2, #16]
 8006564:	e7d2      	b.n	800650c <RCCEx_PLLSAI1_ConfigNP+0x34>

08006566 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006566:	b570      	push	{r4, r5, r6, lr}
 8006568:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800656a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006574:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006576:	f7fc fecb 	bl	8003310 <HAL_GetTick>
 800657a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006586:	d006      	beq.n	8006596 <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006588:	f7fc fec2 	bl	8003310 <HAL_GetTick>
 800658c:	1b00      	subs	r0, r0, r4
 800658e:	2802      	cmp	r0, #2
 8006590:	d9f4      	bls.n	800657c <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 8006592:	2403      	movs	r4, #3
 8006594:	e000      	b.n	8006598 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8006596:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8006598:	b10c      	cbz	r4, 800659e <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 800659a:	4620      	mov	r0, r4
 800659c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80065a8:	6829      	ldr	r1, [r5, #0]
 80065aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065ae:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80065b6:	68a9      	ldr	r1, [r5, #8]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065c2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80065c4:	f7fc fea4 	bl	8003310 <HAL_GetTick>
 80065c8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80065d4:	d105      	bne.n	80065e2 <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065d6:	f7fc fe9b 	bl	8003310 <HAL_GetTick>
 80065da:	1b80      	subs	r0, r0, r6
 80065dc:	2802      	cmp	r0, #2
 80065de:	d9f4      	bls.n	80065ca <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 80065e0:	2403      	movs	r4, #3
    if (status == HAL_OK)
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	d1d9      	bne.n	800659a <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ea:	6913      	ldr	r3, [r2, #16]
 80065ec:	6929      	ldr	r1, [r5, #16]
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6113      	str	r3, [r2, #16]
 80065f2:	e7d2      	b.n	800659a <RCCEx_PLLSAI1_ConfigNQ+0x34>

080065f4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006602:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006604:	f7fc fe84 	bl	8003310 <HAL_GetTick>
 8006608:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800660a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006614:	d006      	beq.n	8006624 <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fc fe7b 	bl	8003310 <HAL_GetTick>
 800661a:	1b00      	subs	r0, r0, r4
 800661c:	2802      	cmp	r0, #2
 800661e:	d9f4      	bls.n	800660a <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 8006620:	2403      	movs	r4, #3
 8006622:	e000      	b.n	8006626 <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8006624:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8006626:	b10c      	cbz	r4, 800662c <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8006628:	4620      	mov	r0, r4
 800662a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800663c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006644:	68e9      	ldr	r1, [r5, #12]
 8006646:	430a      	orrs	r2, r1
 8006648:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006650:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006652:	f7fc fe5d 	bl	8003310 <HAL_GetTick>
 8006656:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006662:	d105      	bne.n	8006670 <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006664:	f7fc fe54 	bl	8003310 <HAL_GetTick>
 8006668:	1b80      	subs	r0, r0, r6
 800666a:	2802      	cmp	r0, #2
 800666c:	d9f4      	bls.n	8006658 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 800666e:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8006670:	2c00      	cmp	r4, #0
 8006672:	d1d9      	bne.n	8006628 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006678:	6913      	ldr	r3, [r2, #16]
 800667a:	6929      	ldr	r1, [r5, #16]
 800667c:	430b      	orrs	r3, r1
 800667e:	6113      	str	r3, [r2, #16]
 8006680:	e7d2      	b.n	8006628 <RCCEx_PLLSAI1_ConfigNR+0x34>

08006682 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006682:	b570      	push	{r4, r5, r6, lr}
 8006684:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006686:	6803      	ldr	r3, [r0, #0]
 8006688:	f013 0f40 	tst.w	r3, #64	; 0x40
 800668c:	d02a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch (PeriphClkInit->Sai1ClockSelection)
 800668e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006694:	d011      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x38>
 8006696:	d807      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006698:	b963      	cbnz	r3, 80066b4 <HAL_RCCEx_PeriphCLKConfig+0x32>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800669a:	3004      	adds	r0, #4
 800669c:	f7ff ff1c 	bl	80064d8 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 80066a0:	4606      	mov	r6, r0
 80066a2:	b188      	cbz	r0, 80066c8 <HAL_RCCEx_PeriphCLKConfig+0x46>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80066a4:	4605      	mov	r5, r0
 80066a6:	e01f      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->Sai1ClockSelection)
 80066a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066ac:	d018      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80066ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066b2:	d015      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x5e>
        ret = HAL_ERROR;
 80066b4:	2501      	movs	r5, #1
 80066b6:	462e      	mov	r6, r5
 80066b8:	e016      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x66>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066be:	68d3      	ldr	r3, [r2, #12]
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80066c6:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80066ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066d2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066dc:	2500      	movs	r5, #0
 80066de:	e003      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x66>
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80066e0:	2600      	movs	r6, #0
 80066e2:	e7f1      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x46>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066e4:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80066e6:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 80066f8:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80066fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066fe:	42ab      	cmp	r3, r5
 8006700:	f040 80d5 	bne.w	80068ae <HAL_RCCEx_PeriphCLKConfig+0x22c>
      status = ret;
 8006704:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f013 0f01 	tst.w	r3, #1
 800670c:	d009      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800670e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006710:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006714:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006718:	f022 0203 	bic.w	r2, r2, #3
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f013 0f02 	tst.w	r3, #2
 8006728:	d009      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xbc>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800672a:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800672c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006730:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006734:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	f013 0f10 	tst.w	r3, #16
 8006744:	d00c      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006746:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006750:	0c02      	lsrs	r2, r0, #16
 8006752:	0412      	lsls	r2, r2, #16
 8006754:	ea23 0302 	bic.w	r3, r3, r2
 8006758:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800675c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	f013 0f20 	tst.w	r3, #32
 8006766:	d00c      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006768:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006772:	0c02      	lsrs	r2, r0, #16
 8006774:	0412      	lsls	r2, r2, #16
 8006776:	ea23 0302 	bic.w	r3, r3, r2
 800677a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f013 0f04 	tst.w	r3, #4
 8006788:	d00f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800678a:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800678c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006790:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006794:	0919      	lsrs	r1, r3, #4
 8006796:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800679a:	ea22 0201 	bic.w	r2, r2, r1
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f013 0f08 	tst.w	r3, #8
 80067b0:	d00f      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067b8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067bc:	0919      	lsrs	r1, r3, #4
 80067be:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067c2:	ea22 0201 	bic.w	r2, r2, r1
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067d8:	d013      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80067dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067e4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f4:	f000 809c 	beq.w	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fe:	f000 809c 	beq.w	800693a <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006808:	d017      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800680a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d005      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006816:	d002      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 8096 	bne.w	800694a <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800681e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006822:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006826:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006830:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006832:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006836:	f000 809a 	beq.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006840:	d013      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800684c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685c:	f000 808e 	beq.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006866:	f000 808e 	beq.w	8006986 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006870:	d009      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006872:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006878:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800687c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800688c:	d00d      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800688e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006894:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006896:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800689a:	430a      	orrs	r2, r1
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800689e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80068a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068a2:	f021 0103 	bic.w	r1, r1, #3
 80068a6:	430a      	orrs	r2, r1
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80068aa:	4628      	mov	r0, r5
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 80068ae:	f7ff f80f 	bl	80058d0 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80068b2:	b95d      	cbnz	r5, 80068cc <HAL_RCCEx_PeriphCLKConfig+0x24a>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80068b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80068b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80068c8:	4635      	mov	r5, r6
 80068ca:	e71c      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80068d4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80068d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80068dc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80068e0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80068e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80068e8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80068ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068f2:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 80068f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	f013 0f01 	tst.w	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8006902:	4635      	mov	r5, r6
 8006904:	e6ff      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84>
          tickstart = HAL_GetTick();
 8006906:	f7fc fd03 	bl	8003310 <HAL_GetTick>
 800690a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800690c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006914:	f013 0f02 	tst.w	r3, #2
 8006918:	d108      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fc fcf9 	bl	8003310 <HAL_GetTick>
 800691e:	1b40      	subs	r0, r0, r5
 8006920:	f241 3388 	movw	r3, #5000	; 0x1388
 8006924:	4298      	cmp	r0, r3
 8006926:	d9f1      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x28a>
              ret = HAL_TIMEOUT;
 8006928:	2503      	movs	r5, #3
 800692a:	e6ec      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800692c:	4635      	mov	r5, r6
 800692e:	e6ea      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006930:	68cb      	ldr	r3, [r1, #12]
 8006932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006936:	60cb      	str	r3, [r1, #12]
 8006938:	e75e      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800693a:	1d20      	adds	r0, r4, #4
 800693c:	f7ff fe13 	bl	8006566 <RCCEx_PLLSAI1_ConfigNQ>
      if (ret != HAL_OK)
 8006940:	2800      	cmp	r0, #0
 8006942:	f43f af5e 	beq.w	8006802 <HAL_RCCEx_PeriphCLKConfig+0x180>
        status = ret;
 8006946:	4605      	mov	r5, r0
 8006948:	e75b      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800694a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800694e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006952:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8006956:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800695a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800695e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8006962:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006966:	430b      	orrs	r3, r1
 8006968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800696c:	e760      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800696e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006972:	68d3      	ldr	r3, [r2, #12]
 8006974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006978:	60d3      	str	r3, [r2, #12]
 800697a:	e75e      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800697c:	68cb      	ldr	r3, [r1, #12]
 800697e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006982:	60cb      	str	r3, [r1, #12]
 8006984:	e76c      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006986:	1d20      	adds	r0, r4, #4
 8006988:	f7ff fe34 	bl	80065f4 <RCCEx_PLLSAI1_ConfigNR>
      if (ret != HAL_OK)
 800698c:	2800      	cmp	r0, #0
 800698e:	f43f af6c 	beq.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        status = ret;
 8006992:	4605      	mov	r5, r0
 8006994:	e769      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1e8>

08006996 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006996:	b538      	push	{r3, r4, r5, lr}
 8006998:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800699a:	6802      	ldr	r2, [r0, #0]
 800699c:	68d3      	ldr	r3, [r2, #12]
 800699e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069a2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80069a4:	f7fc fcb4 	bl	8003310 <HAL_GetTick>
 80069a8:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f013 0f20 	tst.w	r3, #32
 80069b2:	d107      	bne.n	80069c4 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069b4:	f7fc fcac 	bl	8003310 <HAL_GetTick>
 80069b8:	1b40      	subs	r0, r0, r5
 80069ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069be:	d9f4      	bls.n	80069aa <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80069c0:	2003      	movs	r0, #3
 80069c2:	e000      	b.n	80069c6 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80069c4:	2000      	movs	r0, #0
}
 80069c6:	bd38      	pop	{r3, r4, r5, pc}

080069c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80069c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069ca:	6803      	ldr	r3, [r0, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069d2:	d001      	beq.n	80069d8 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80069d4:	2000      	movs	r0, #0
}
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069da:	f04f 32ff 	mov.w	r2, #4294967295
 80069de:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80069e0:	f7fc fc96 	bl	8003310 <HAL_GetTick>
 80069e4:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069ee:	d107      	bne.n	8006a00 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80069f0:	f7fc fc8e 	bl	8003310 <HAL_GetTick>
 80069f4:	1b40      	subs	r0, r0, r5
 80069f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069fa:	d9f4      	bls.n	80069e6 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80069fc:	2003      	movs	r0, #3
 80069fe:	e7ea      	b.n	80069d6 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7e8      	b.n	80069d6 <RTC_EnterInitMode+0xe>

08006a04 <HAL_RTC_Init>:
{
 8006a04:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d067      	beq.n	8006ada <HAL_RTC_Init+0xd6>
 8006a0a:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a0c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d044      	beq.n	8006a9e <HAL_RTC_Init+0x9a>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a14:	2302      	movs	r3, #2
 8006a16:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	22ca      	movs	r2, #202	; 0xca
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	2253      	movs	r2, #83	; 0x53
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff ffce 	bl	80069c8 <RTC_EnterInitMode>
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d13a      	bne.n	8006aa8 <HAL_RTC_Init+0xa4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	6893      	ldr	r3, [r2, #8]
 8006a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	688a      	ldr	r2, [r1, #8]
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	6920      	ldr	r0, [r4, #16]
 8006a48:	4303      	orrs	r3, r0
 8006a4a:	69a0      	ldr	r0, [r4, #24]
 8006a4c:	4303      	orrs	r3, r0
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	68e2      	ldr	r2, [r4, #12]
 8006a56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	6913      	ldr	r3, [r2, #16]
 8006a5c:	68a1      	ldr	r1, [r4, #8]
 8006a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006a62:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	68d3      	ldr	r3, [r2, #12]
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a78:	6821      	ldr	r1, [r4, #0]
 8006a7a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006a7c:	69e2      	ldr	r2, [r4, #28]
 8006a7e:	6960      	ldr	r0, [r4, #20]
 8006a80:	4302      	orrs	r2, r0
 8006a82:	4313      	orrs	r3, r2
 8006a84:	64cb      	str	r3, [r1, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f013 0f20 	tst.w	r3, #32
 8006a8e:	d014      	beq.n	8006aba <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	22ff      	movs	r2, #255	; 0xff
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_OK;
 8006a9c:	e00b      	b.n	8006ab6 <HAL_RTC_Init+0xb2>
    hrtc->Lock = HAL_UNLOCKED;
 8006a9e:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8006aa2:	f7fc f9a1 	bl	8002de8 <HAL_RTC_MspInit>
 8006aa6:	e7b5      	b.n	8006a14 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	22ff      	movs	r2, #255	; 0xff
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006aae:	2304      	movs	r3, #4
 8006ab0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8006ab4:	2501      	movs	r5, #1
}
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff ff6b 	bl	8006996 <HAL_RTC_WaitForSynchro>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d0e5      	beq.n	8006a90 <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	22ff      	movs	r2, #255	; 0xff
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006aca:	2304      	movs	r3, #4
 8006acc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8006ad6:	2501      	movs	r5, #1
 8006ad8:	e7ed      	b.n	8006ab6 <HAL_RTC_Init+0xb2>
     return HAL_ERROR;
 8006ada:	2501      	movs	r5, #1
 8006adc:	e7eb      	b.n	8006ab6 <HAL_RTC_Init+0xb2>
	...

08006ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	6a03      	ldr	r3, [r0, #32]
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006af4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af8:	680d      	ldr	r5, [r1, #0]
 8006afa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b00:	688d      	ldr	r5, [r1, #8]
 8006b02:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b04:	4d14      	ldr	r5, [pc, #80]	; (8006b58 <TIM_OC1_SetConfig+0x78>)
 8006b06:	42a8      	cmp	r0, r5
 8006b08:	d007      	beq.n	8006b1a <TIM_OC1_SetConfig+0x3a>
 8006b0a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8006b0e:	42a8      	cmp	r0, r5
 8006b10:	d003      	beq.n	8006b1a <TIM_OC1_SetConfig+0x3a>
 8006b12:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8006b16:	42a8      	cmp	r0, r5
 8006b18:	d105      	bne.n	8006b26 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b1a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b1e:	68cd      	ldr	r5, [r1, #12]
 8006b20:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b22:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b26:	4d0c      	ldr	r5, [pc, #48]	; (8006b58 <TIM_OC1_SetConfig+0x78>)
 8006b28:	42a8      	cmp	r0, r5
 8006b2a:	d007      	beq.n	8006b3c <TIM_OC1_SetConfig+0x5c>
 8006b2c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006b30:	42a8      	cmp	r0, r5
 8006b32:	d003      	beq.n	8006b3c <TIM_OC1_SetConfig+0x5c>
 8006b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b38:	42a8      	cmp	r0, r5
 8006b3a:	d105      	bne.n	8006b48 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b3c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b40:	694c      	ldr	r4, [r1, #20]
 8006b42:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b44:	698d      	ldr	r5, [r1, #24]
 8006b46:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b4c:	684a      	ldr	r2, [r1, #4]
 8006b4e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b50:	6203      	str	r3, [r0, #32]
}
 8006b52:	bc30      	pop	{r4, r5}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40012c00 	.word	0x40012c00

08006b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5e:	6a03      	ldr	r3, [r0, #32]
 8006b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b6a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b6c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8006b70:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b74:	680d      	ldr	r5, [r1, #0]
 8006b76:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b7c:	688d      	ldr	r5, [r1, #8]
 8006b7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b82:	4d12      	ldr	r5, [pc, #72]	; (8006bcc <TIM_OC3_SetConfig+0x70>)
 8006b84:	42a8      	cmp	r0, r5
 8006b86:	d019      	beq.n	8006bbc <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b88:	4d10      	ldr	r5, [pc, #64]	; (8006bcc <TIM_OC3_SetConfig+0x70>)
 8006b8a:	42a8      	cmp	r0, r5
 8006b8c:	d007      	beq.n	8006b9e <TIM_OC3_SetConfig+0x42>
 8006b8e:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006b92:	42a8      	cmp	r0, r5
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x42>
 8006b96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006b9a:	42a8      	cmp	r0, r5
 8006b9c:	d107      	bne.n	8006bae <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ba2:	694d      	ldr	r5, [r1, #20]
 8006ba4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ba8:	698d      	ldr	r5, [r1, #24]
 8006baa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb2:	684a      	ldr	r2, [r1, #4]
 8006bb4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb6:	6203      	str	r3, [r0, #32]
}
 8006bb8:	bc30      	pop	{r4, r5}
 8006bba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc0:	68cd      	ldr	r5, [r1, #12]
 8006bc2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bca:	e7dd      	b.n	8006b88 <TIM_OC3_SetConfig+0x2c>
 8006bcc:	40012c00 	.word	0x40012c00

08006bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bd2:	6a03      	ldr	r3, [r0, #32]
 8006bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	680d      	ldr	r5, [r1, #0]
 8006bea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf2:	688d      	ldr	r5, [r1, #8]
 8006bf4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	; (8006c28 <TIM_OC4_SetConfig+0x58>)
 8006bfa:	42a8      	cmp	r0, r5
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC4_SetConfig+0x3e>
 8006bfe:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006c02:	42a8      	cmp	r0, r5
 8006c04:	d003      	beq.n	8006c0e <TIM_OC4_SetConfig+0x3e>
 8006c06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c0a:	42a8      	cmp	r0, r5
 8006c0c:	d104      	bne.n	8006c18 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c0e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c12:	694d      	ldr	r5, [r1, #20]
 8006c14:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	6202      	str	r2, [r0, #32]
}
 8006c22:	bc30      	pop	{r4, r5}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00

08006c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c2e:	6a03      	ldr	r3, [r0, #32]
 8006c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c3a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	680d      	ldr	r5, [r1, #0]
 8006c46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c4c:	688d      	ldr	r5, [r1, #8]
 8006c4e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	4d0b      	ldr	r5, [pc, #44]	; (8006c80 <TIM_OC5_SetConfig+0x54>)
 8006c54:	42a8      	cmp	r0, r5
 8006c56:	d007      	beq.n	8006c68 <TIM_OC5_SetConfig+0x3c>
 8006c58:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006c5c:	42a8      	cmp	r0, r5
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC5_SetConfig+0x3c>
 8006c60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c64:	42a8      	cmp	r0, r5
 8006c66:	d104      	bne.n	8006c72 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c68:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c6c:	694d      	ldr	r5, [r1, #20]
 8006c6e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c76:	684a      	ldr	r2, [r1, #4]
 8006c78:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	6203      	str	r3, [r0, #32]
}
 8006c7c:	bc30      	pop	{r4, r5}
 8006c7e:	4770      	bx	lr
 8006c80:	40012c00 	.word	0x40012c00

08006c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c86:	6a03      	ldr	r3, [r0, #32]
 8006c88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c92:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	680d      	ldr	r5, [r1, #0]
 8006c9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ca2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca6:	688d      	ldr	r5, [r1, #8]
 8006ca8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <TIM_OC6_SetConfig+0x58>)
 8006cae:	42a8      	cmp	r0, r5
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC6_SetConfig+0x3e>
 8006cb2:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006cb6:	42a8      	cmp	r0, r5
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC6_SetConfig+0x3e>
 8006cba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006cbe:	42a8      	cmp	r0, r5
 8006cc0:	d104      	bne.n	8006ccc <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cc2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cc6:	694d      	ldr	r5, [r1, #20]
 8006cc8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ccc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cce:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cd0:	684b      	ldr	r3, [r1, #4]
 8006cd2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	6202      	str	r2, [r0, #32]
}
 8006cd6:	bc30      	pop	{r4, r5}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40012c00 	.word	0x40012c00

08006ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce4:	6a04      	ldr	r4, [r0, #32]
 8006ce6:	f024 0401 	bic.w	r4, r4, #1
 8006cea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006cfa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cfc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006cfe:	6203      	str	r3, [r0, #32]
}
 8006d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d06:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d08:	6a03      	ldr	r3, [r0, #32]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d10:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006d12:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d14:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d18:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d20:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d24:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d26:	6203      	str	r3, [r0, #32]
}
 8006d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d2e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d38:	4319      	orrs	r1, r3
 8006d3a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3e:	6081      	str	r1, [r0, #8]
}
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	2302      	movs	r3, #2
 8006d46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4a:	6802      	ldr	r2, [r0, #0]
 8006d4c:	6891      	ldr	r1, [r2, #8]
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <HAL_TIM_Base_Start+0x2c>)
 8006d50:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d006      	beq.n	8006d64 <HAL_TIM_Base_Start+0x20>
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d003      	beq.n	8006d64 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8006d5c:	6813      	ldr	r3, [r2, #0]
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	00010007 	.word	0x00010007

08006d74 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	2302      	movs	r3, #2
 8006d76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8006d7a:	6803      	ldr	r3, [r0, #0]
 8006d7c:	6a19      	ldr	r1, [r3, #32]
 8006d7e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006d82:	4211      	tst	r1, r2
 8006d84:	d108      	bne.n	8006d98 <HAL_TIM_Base_Stop+0x24>
 8006d86:	6a19      	ldr	r1, [r3, #32]
 8006d88:	f240 4244 	movw	r2, #1092	; 0x444
 8006d8c:	4211      	tst	r1, r2
 8006d8e:	d103      	bne.n	8006d98 <HAL_TIM_Base_Stop+0x24>
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006d9e:	2000      	movs	r0, #0
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	68d3      	ldr	r3, [r2, #12]
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dae:	6802      	ldr	r2, [r0, #0]
 8006db0:	6891      	ldr	r1, [r2, #8]
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_TIM_Base_Start_IT+0x28>)
 8006db4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d006      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x24>
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d003      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8006dc0:	6813      	ldr	r3, [r2, #0]
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4770      	bx	lr
 8006dcc:	00010007 	.word	0x00010007

08006dd0 <HAL_TIM_PWM_MspInit>:
}
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_IC_CaptureCallback>:
}
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIM_TriggerCallback>:
}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_IRQHandler>:
{
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dde:	6803      	ldr	r3, [r0, #0]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	f012 0f02 	tst.w	r2, #2
 8006de6:	d011      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	f012 0f02 	tst.w	r2, #2
 8006dee:	d00d      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006df0:	f06f 0202 	mvn.w	r2, #2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f013 0f03 	tst.w	r3, #3
 8006e02:	d079      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006e04:	f7ff ffe6 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	f012 0f04 	tst.w	r2, #4
 8006e14:	d012      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	f012 0f04 	tst.w	r2, #4
 8006e1c:	d00e      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e1e:	f06f 0204 	mvn.w	r2, #4
 8006e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e24:	2302      	movs	r3, #2
 8006e26:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006e30:	d068      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff ffce 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	f012 0f08 	tst.w	r2, #8
 8006e44:	d012      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	f012 0f08 	tst.w	r2, #8
 8006e4c:	d00e      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e4e:	f06f 0208 	mvn.w	r2, #8
 8006e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e54:	2304      	movs	r3, #4
 8006e56:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f013 0f03 	tst.w	r3, #3
 8006e60:	d057      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7ff ffb6 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	f012 0f10 	tst.w	r2, #16
 8006e74:	d012      	beq.n	8006e9c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	f012 0f10 	tst.w	r2, #16
 8006e7c:	d00e      	beq.n	8006e9c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e7e:	f06f 0210 	mvn.w	r2, #16
 8006e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e84:	2308      	movs	r3, #8
 8006e86:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006e90:	d046      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff9e 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	f012 0f01 	tst.w	r2, #1
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	f012 0f01 	tst.w	r2, #1
 8006eac:	d13f      	bne.n	8006f2e <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006eb6:	d003      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ebe:	d13d      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ed0:	d13b      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006eda:	d003      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ee2:	d139      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	f012 0f20 	tst.w	r2, #32
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	f012 0f20 	tst.w	r2, #32
 8006ef4:	d137      	bne.n	8006f66 <HAL_TIM_IRQHandler+0x18c>
}
 8006ef6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef8:	f7ff ff6b 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	4620      	mov	r0, r4
 8006efe:	f7ff ff6a 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f02:	e781      	b.n	8006e08 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff ff64 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7ff ff63 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f10:	e792      	b.n	8006e38 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff ff5d 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7ff ff5c 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f1e:	e7a3      	b.n	8006e68 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7ff ff56 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7ff ff55 	bl	8006dd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f2c:	e7b4      	b.n	8006e98 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f2e:	f06f 0201 	mvn.w	r2, #1
 8006f32:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7fb fe0f 	bl	8002b58 <HAL_TIM_PeriodElapsedCallback>
 8006f3a:	e7b8      	b.n	8006eae <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fa79 	bl	800743a <HAL_TIMEx_BreakCallback>
 8006f48:	e7ba      	b.n	8006ec0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fa73 	bl	800743c <HAL_TIMEx_Break2Callback>
 8006f56:	e7bc      	b.n	8006ed2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff ff3a 	bl	8006dd8 <HAL_TIM_TriggerCallback>
 8006f64:	e7be      	b.n	8006ee4 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f66:	f06f 0220 	mvn.w	r2, #32
 8006f6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 fa63 	bl	8007438 <HAL_TIMEx_CommutCallback>
}
 8006f72:	e7c0      	b.n	8006ef6 <HAL_TIM_IRQHandler+0x11c>

08006f74 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006f74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f76:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <TIM_Base_SetConfig+0x6c>)
 8006f78:	4290      	cmp	r0, r2
 8006f7a:	d002      	beq.n	8006f82 <TIM_Base_SetConfig+0xe>
 8006f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006f80:	d103      	bne.n	8006f8a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006f86:	684a      	ldr	r2, [r1, #4]
 8006f88:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <TIM_Base_SetConfig+0x6c>)
 8006f8c:	4290      	cmp	r0, r2
 8006f8e:	d00a      	beq.n	8006fa6 <TIM_Base_SetConfig+0x32>
 8006f90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006f94:	d007      	beq.n	8006fa6 <TIM_Base_SetConfig+0x32>
 8006f96:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_Base_SetConfig+0x32>
 8006f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fa2:	4290      	cmp	r0, r2
 8006fa4:	d103      	bne.n	8006fae <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006faa:	68ca      	ldr	r2, [r1, #12]
 8006fac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fb2:	694a      	ldr	r2, [r1, #20]
 8006fb4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006fb6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fb8:	688b      	ldr	r3, [r1, #8]
 8006fba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006fbc:	680b      	ldr	r3, [r1, #0]
 8006fbe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <TIM_Base_SetConfig+0x6c>)
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0x62>
 8006fc6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0x62>
 8006fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd2:	4298      	cmp	r0, r3
 8006fd4:	d101      	bne.n	8006fda <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd6:	690b      	ldr	r3, [r1, #16]
 8006fd8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6143      	str	r3, [r0, #20]
}
 8006fde:	4770      	bx	lr
 8006fe0:	40012c00 	.word	0x40012c00

08006fe4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006fe4:	b1a8      	cbz	r0, 8007012 <HAL_TIM_Base_Init+0x2e>
{
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006fee:	b15b      	cbz	r3, 8007008 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff6:	1d21      	adds	r1, r4, #4
 8006ff8:	6820      	ldr	r0, [r4, #0]
 8006ffa:	f7ff ffbb 	bl	8006f74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006ffe:	2301      	movs	r3, #1
 8007000:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007004:	2000      	movs	r0, #0
}
 8007006:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007008:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800700c:	f7fc f828 	bl	8003060 <HAL_TIM_Base_MspInit>
 8007010:	e7ee      	b.n	8006ff0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007012:	2001      	movs	r0, #1
}
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007016:	b1a8      	cbz	r0, 8007044 <HAL_TIM_PWM_Init+0x2e>
{
 8007018:	b510      	push	{r4, lr}
 800701a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800701c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007020:	b15b      	cbz	r3, 800703a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007022:	2302      	movs	r3, #2
 8007024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007028:	1d21      	adds	r1, r4, #4
 800702a:	6820      	ldr	r0, [r4, #0]
 800702c:	f7ff ffa2 	bl	8006f74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007030:	2301      	movs	r3, #1
 8007032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007036:	2000      	movs	r0, #0
}
 8007038:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800703a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800703e:	f7ff fec7 	bl	8006dd0 <HAL_TIM_PWM_MspInit>
 8007042:	e7ee      	b.n	8007022 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007044:	2001      	movs	r0, #1
}
 8007046:	4770      	bx	lr

08007048 <TIM_OC2_SetConfig>:
{
 8007048:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704a:	6a03      	ldr	r3, [r0, #32]
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007052:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007054:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007056:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007058:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800705c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007060:	680d      	ldr	r5, [r1, #0]
 8007062:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007066:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800706a:	688d      	ldr	r5, [r1, #8]
 800706c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007070:	4d12      	ldr	r5, [pc, #72]	; (80070bc <TIM_OC2_SetConfig+0x74>)
 8007072:	42a8      	cmp	r0, r5
 8007074:	d019      	beq.n	80070aa <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	4d11      	ldr	r5, [pc, #68]	; (80070bc <TIM_OC2_SetConfig+0x74>)
 8007078:	42a8      	cmp	r0, r5
 800707a:	d007      	beq.n	800708c <TIM_OC2_SetConfig+0x44>
 800707c:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8007080:	42a8      	cmp	r0, r5
 8007082:	d003      	beq.n	800708c <TIM_OC2_SetConfig+0x44>
 8007084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007088:	42a8      	cmp	r0, r5
 800708a:	d107      	bne.n	800709c <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800708c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007090:	694d      	ldr	r5, [r1, #20]
 8007092:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007096:	698d      	ldr	r5, [r1, #24]
 8007098:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800709c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800709e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80070a0:	684a      	ldr	r2, [r1, #4]
 80070a2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80070a4:	6203      	str	r3, [r0, #32]
}
 80070a6:	bc30      	pop	{r4, r5}
 80070a8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80070aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ae:	68cd      	ldr	r5, [r1, #12]
 80070b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80070b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b8:	e7dd      	b.n	8007076 <TIM_OC2_SetConfig+0x2e>
 80070ba:	bf00      	nop
 80070bc:	40012c00 	.word	0x40012c00

080070c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80070c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80070c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f000 8092 	beq.w	80071f0 <HAL_TIM_PWM_ConfigChannel+0x130>
 80070cc:	460d      	mov	r5, r1
 80070ce:	4604      	mov	r4, r0
 80070d0:	2301      	movs	r3, #1
 80070d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80070d6:	2302      	movs	r3, #2
 80070d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80070dc:	2a14      	cmp	r2, #20
 80070de:	d81e      	bhi.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
 80070e0:	e8df f002 	tbb	[pc, r2]
 80070e4:	1d1d1d0b 	.word	0x1d1d1d0b
 80070e8:	1d1d1d24 	.word	0x1d1d1d24
 80070ec:	1d1d1d38 	.word	0x1d1d1d38
 80070f0:	1d1d1d4b 	.word	0x1d1d1d4b
 80070f4:	1d1d1d5f 	.word	0x1d1d1d5f
 80070f8:	72          	.byte	0x72
 80070f9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	f7ff fcf0 	bl	8006ae0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	6993      	ldr	r3, [r2, #24]
 8007104:	f043 0308 	orr.w	r3, r3, #8
 8007108:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800710a:	6822      	ldr	r2, [r4, #0]
 800710c:	6993      	ldr	r3, [r2, #24]
 800710e:	f023 0304 	bic.w	r3, r3, #4
 8007112:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	6993      	ldr	r3, [r2, #24]
 8007118:	6929      	ldr	r1, [r5, #16]
 800711a:	430b      	orrs	r3, r1
 800711c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800711e:	2301      	movs	r3, #1
 8007120:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007124:	2000      	movs	r0, #0
 8007126:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800712a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f7ff ff8b 	bl	8007048 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	6993      	ldr	r3, [r2, #24]
 8007136:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800713a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	6993      	ldr	r3, [r2, #24]
 8007140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007144:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	6993      	ldr	r3, [r2, #24]
 800714a:	6929      	ldr	r1, [r5, #16]
 800714c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007150:	6193      	str	r3, [r2, #24]
      break;
 8007152:	e7e4      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007154:	6800      	ldr	r0, [r0, #0]
 8007156:	f7ff fd01 	bl	8006b5c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	69d3      	ldr	r3, [r2, #28]
 800715e:	f043 0308 	orr.w	r3, r3, #8
 8007162:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	69d3      	ldr	r3, [r2, #28]
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	69d3      	ldr	r3, [r2, #28]
 8007172:	6929      	ldr	r1, [r5, #16]
 8007174:	430b      	orrs	r3, r1
 8007176:	61d3      	str	r3, [r2, #28]
      break;
 8007178:	e7d1      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	f7ff fd28 	bl	8006bd0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	69d3      	ldr	r3, [r2, #28]
 8007184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007188:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	69d3      	ldr	r3, [r2, #28]
 800718e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007192:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	69d3      	ldr	r3, [r2, #28]
 8007198:	6929      	ldr	r1, [r5, #16]
 800719a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800719e:	61d3      	str	r3, [r2, #28]
      break;
 80071a0:	e7bd      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071a2:	6800      	ldr	r0, [r0, #0]
 80071a4:	f7ff fd42 	bl	8006c2c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071b6:	f023 0304 	bic.w	r3, r3, #4
 80071ba:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071c0:	6929      	ldr	r1, [r5, #16]
 80071c2:	430b      	orrs	r3, r1
 80071c4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80071c6:	e7aa      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071c8:	6800      	ldr	r0, [r0, #0]
 80071ca:	f7ff fd5b 	bl	8006c84 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071d6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071e0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80071e6:	6929      	ldr	r1, [r5, #16]
 80071e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80071ec:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80071ee:	e796      	b.n	800711e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80071f0:	2002      	movs	r0, #2
 80071f2:	e79a      	b.n	800712a <HAL_TIM_PWM_ConfigChannel+0x6a>

080071f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071f6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007200:	430b      	orrs	r3, r1
 8007202:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007204:	6083      	str	r3, [r0, #8]
}
 8007206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800720c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d064      	beq.n	80072de <HAL_TIM_ConfigClockSource+0xd2>
{
 8007214:	b510      	push	{r4, lr}
 8007216:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007218:	2301      	movs	r3, #1
 800721a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800721e:	2302      	movs	r3, #2
 8007220:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007224:	6802      	ldr	r2, [r0, #0]
 8007226:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007228:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <HAL_TIM_ConfigClockSource+0xd8>)
 800722a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800722c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800722e:	680b      	ldr	r3, [r1, #0]
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d04a      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0xbe>
 8007234:	d913      	bls.n	800725e <HAL_TIM_ConfigClockSource+0x52>
 8007236:	2b60      	cmp	r3, #96	; 0x60
 8007238:	d03d      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0xaa>
 800723a:	d91e      	bls.n	800727a <HAL_TIM_ConfigClockSource+0x6e>
 800723c:	2b70      	cmp	r3, #112	; 0x70
 800723e:	d028      	beq.n	8007292 <HAL_TIM_ConfigClockSource+0x86>
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007244:	d130      	bne.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8007246:	68cb      	ldr	r3, [r1, #12]
 8007248:	684a      	ldr	r2, [r1, #4]
 800724a:	6889      	ldr	r1, [r1, #8]
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	f7ff ffd1 	bl	80071f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	6893      	ldr	r3, [r2, #8]
 8007256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800725a:	6093      	str	r3, [r2, #8]
      break;
 800725c:	e024      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800725e:	2b10      	cmp	r3, #16
 8007260:	d006      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x64>
 8007262:	d904      	bls.n	800726e <HAL_TIM_ConfigClockSource+0x62>
 8007264:	2b20      	cmp	r3, #32
 8007266:	d003      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x64>
 8007268:	2b30      	cmp	r3, #48	; 0x30
 800726a:	d001      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x64>
 800726c:	e01c      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
 800726e:	b9db      	cbnz	r3, 80072a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007270:	4619      	mov	r1, r3
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	f7ff fd5b 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 8007278:	e016      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800727a:	2b50      	cmp	r3, #80	; 0x50
 800727c:	d114      	bne.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800727e:	68ca      	ldr	r2, [r1, #12]
 8007280:	6849      	ldr	r1, [r1, #4]
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	f7ff fd2c 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007288:	2150      	movs	r1, #80	; 0x50
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	f7ff fd4f 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 8007290:	e00a      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8007292:	68cb      	ldr	r3, [r1, #12]
 8007294:	684a      	ldr	r2, [r1, #4]
 8007296:	6889      	ldr	r1, [r1, #8]
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	f7ff ffab 	bl	80071f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80072a6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80072ae:	2000      	movs	r0, #0
 80072b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80072b4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072b6:	68ca      	ldr	r2, [r1, #12]
 80072b8:	6849      	ldr	r1, [r1, #4]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	f7ff fd23 	bl	8006d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072c0:	2160      	movs	r1, #96	; 0x60
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	f7ff fd33 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 80072c8:	e7ee      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ca:	68ca      	ldr	r2, [r1, #12]
 80072cc:	6849      	ldr	r1, [r1, #4]
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	f7ff fd06 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072d4:	2140      	movs	r1, #64	; 0x40
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	f7ff fd29 	bl	8006d2e <TIM_ITRx_SetConfig>
      break;
 80072dc:	e7e4      	b.n	80072a8 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80072de:	2002      	movs	r0, #2
}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	ffce0088 	.word	0xffce0088

080072e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072e8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072ea:	f001 011f 	and.w	r1, r1, #31
 80072ee:	2301      	movs	r3, #1
 80072f0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072f4:	6a03      	ldr	r3, [r0, #32]
 80072f6:	ea23 0304 	bic.w	r3, r3, r4
 80072fa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	408a      	lsls	r2, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	6203      	str	r3, [r0, #32]
}
 8007304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_TIM_PWM_Start>:
{
 800730c:	b510      	push	{r4, lr}
 800730e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007310:	2201      	movs	r2, #1
 8007312:	6800      	ldr	r0, [r0, #0]
 8007314:	f7ff ffe8 	bl	80072e8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	4a0f      	ldr	r2, [pc, #60]	; (8007358 <HAL_TIM_PWM_Start+0x4c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <HAL_TIM_PWM_Start+0x24>
 8007320:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <HAL_TIM_PWM_Start+0x24>
 8007328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800732c:	4293      	cmp	r3, r2
 800732e:	d103      	bne.n	8007338 <HAL_TIM_PWM_Start+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007336:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	6891      	ldr	r1, [r2, #8]
 800733c:	4b07      	ldr	r3, [pc, #28]	; (800735c <HAL_TIM_PWM_Start+0x50>)
 800733e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007340:	2b06      	cmp	r3, #6
 8007342:	d006      	beq.n	8007352 <HAL_TIM_PWM_Start+0x46>
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d003      	beq.n	8007352 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_ENABLE(htim);
 800734a:	6813      	ldr	r3, [r2, #0]
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6013      	str	r3, [r2, #0]
}
 8007352:	2000      	movs	r0, #0
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	00010007 	.word	0x00010007

08007360 <HAL_TIM_PWM_Stop>:
{
 8007360:	b510      	push	{r4, lr}
 8007362:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007364:	2200      	movs	r2, #0
 8007366:	6800      	ldr	r0, [r0, #0]
 8007368:	f7ff ffbe 	bl	80072e8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <HAL_TIM_PWM_Stop+0x6c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d01b      	beq.n	80073ac <HAL_TIM_PWM_Stop+0x4c>
 8007374:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8007378:	4293      	cmp	r3, r2
 800737a:	d017      	beq.n	80073ac <HAL_TIM_PWM_Stop+0x4c>
 800737c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007380:	4293      	cmp	r3, r2
 8007382:	d013      	beq.n	80073ac <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	6a19      	ldr	r1, [r3, #32]
 8007388:	f241 1211 	movw	r2, #4369	; 0x1111
 800738c:	4211      	tst	r1, r2
 800738e:	d108      	bne.n	80073a2 <HAL_TIM_PWM_Stop+0x42>
 8007390:	6a19      	ldr	r1, [r3, #32]
 8007392:	f240 4244 	movw	r2, #1092	; 0x444
 8007396:	4211      	tst	r1, r2
 8007398:	d103      	bne.n	80073a2 <HAL_TIM_PWM_Stop+0x42>
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80073a8:	2000      	movs	r0, #0
 80073aa:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80073ac:	6a19      	ldr	r1, [r3, #32]
 80073ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80073b2:	4211      	tst	r1, r2
 80073b4:	d1e6      	bne.n	8007384 <HAL_TIM_PWM_Stop+0x24>
 80073b6:	6a19      	ldr	r1, [r3, #32]
 80073b8:	f240 4244 	movw	r2, #1092	; 0x444
 80073bc:	4211      	tst	r1, r2
 80073be:	d1e1      	bne.n	8007384 <HAL_TIM_PWM_Stop+0x24>
 80073c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44
 80073c8:	e7dc      	b.n	8007384 <HAL_TIM_PWM_Stop+0x24>
 80073ca:	bf00      	nop
 80073cc:	40012c00 	.word	0x40012c00

080073d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d02b      	beq.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80073d8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80073da:	2301      	movs	r3, #1
 80073dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	2302      	movs	r3, #2
 80073e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073e6:	6802      	ldr	r2, [r0, #0]
 80073e8:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ea:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073ec:	4c11      	ldr	r4, [pc, #68]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80073ee:	42a2      	cmp	r2, r4
 80073f0:	d019      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f6:	680c      	ldr	r4, [r1, #0]
 80073f8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fa:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fc:	6803      	ldr	r3, [r0, #0]
 80073fe:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d002      	beq.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d104      	bne.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800740a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740e:	688a      	ldr	r2, [r1, #8]
 8007410:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007412:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007414:	2301      	movs	r3, #1
 8007416:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800741a:	2300      	movs	r3, #0
 800741c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007420:	4618      	mov	r0, r3
}
 8007422:	bc30      	pop	{r4, r5}
 8007424:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007426:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800742a:	684c      	ldr	r4, [r1, #4]
 800742c:	4323      	orrs	r3, r4
 800742e:	e7e0      	b.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8007430:	2002      	movs	r0, #2
}
 8007432:	4770      	bx	lr
 8007434:	40012c00 	.word	0x40012c00

08007438 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007438:	4770      	bx	lr

0800743a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800743c:	4770      	bx	lr

0800743e <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800743e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007442:	2b21      	cmp	r3, #33	; 0x21
 8007444:	d000      	beq.n	8007448 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007446:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8007448:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800744c:	b29b      	uxth	r3, r3
 800744e:	b16b      	cbz	r3, 800746c <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007450:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	6803      	ldr	r3, [r0, #0]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007458:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800745a:	3301      	adds	r3, #1
 800745c:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800745e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8007462:	3b01      	subs	r3, #1
 8007464:	b29b      	uxth	r3, r3
 8007466:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800746a:	e7ec      	b.n	8007446 <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800746c:	6802      	ldr	r2, [r0, #0]
 800746e:	6813      	ldr	r3, [r2, #0]
 8007470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007474:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007476:	6802      	ldr	r2, [r0, #0]
 8007478:	6813      	ldr	r3, [r2, #0]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	4770      	bx	lr

08007482 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007482:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007486:	2b21      	cmp	r3, #33	; 0x21
 8007488:	d000      	beq.n	800748c <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800748a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800748c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8007490:	b29b      	uxth	r3, r3
 8007492:	b17b      	cbz	r3, 80074b4 <UART_TxISR_16BIT+0x32>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007494:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	6802      	ldr	r2, [r0, #0]
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80074a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80074a2:	3302      	adds	r3, #2
 80074a4:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80074a6:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 80074b2:	e7ea      	b.n	800748a <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074b4:	6802      	ldr	r2, [r0, #0]
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074bc:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074be:	6802      	ldr	r2, [r0, #0]
 80074c0:	6813      	ldr	r3, [r2, #0]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4770      	bx	lr

080074ca <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ca:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80074ce:	2b21      	cmp	r3, #33	; 0x21
 80074d0:	d000      	beq.n	80074d4 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 80074d2:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074d4:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80074d8:	e00c      	b.n	80074f4 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80074da:	6802      	ldr	r2, [r0, #0]
 80074dc:	6893      	ldr	r3, [r2, #8]
 80074de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074e2:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074e4:	6802      	ldr	r2, [r0, #0]
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ec:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 80074ee:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ec      	beq.n	80074d2 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 80074f8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80074fc:	b292      	uxth	r2, r2
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d0eb      	beq.n	80074da <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007502:	6802      	ldr	r2, [r0, #0]
 8007504:	69d1      	ldr	r1, [r2, #28]
 8007506:	f011 0f80 	tst.w	r1, #128	; 0x80
 800750a:	d0f1      	beq.n	80074f0 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800750c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800750e:	7809      	ldrb	r1, [r1, #0]
 8007510:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007512:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007514:	3201      	adds	r2, #1
 8007516:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8007518:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800751c:	3a01      	subs	r2, #1
 800751e:	b292      	uxth	r2, r2
 8007520:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8007524:	e7e4      	b.n	80074f0 <UART_TxISR_8BIT_FIFOEN+0x26>

08007526 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007526:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800752a:	2b21      	cmp	r3, #33	; 0x21
 800752c:	d000      	beq.n	8007530 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800752e:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007530:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8007534:	e00c      	b.n	8007550 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007536:	6802      	ldr	r2, [r0, #0]
 8007538:	6893      	ldr	r3, [r2, #8]
 800753a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800753e:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007540:	6802      	ldr	r2, [r0, #0]
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007548:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 800754a:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800754c:	3b01      	subs	r3, #1
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0ec      	beq.n	800752e <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8007554:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8007558:	b292      	uxth	r2, r2
 800755a:	2a00      	cmp	r2, #0
 800755c:	d0eb      	beq.n	8007536 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800755e:	6802      	ldr	r2, [r0, #0]
 8007560:	69d1      	ldr	r1, [r2, #28]
 8007562:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007566:	d0f1      	beq.n	800754c <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007568:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800756a:	8809      	ldrh	r1, [r1, #0]
 800756c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007570:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007572:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007574:	3202      	adds	r2, #2
 8007576:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8007578:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800757c:	3a01      	subs	r2, #1
 800757e:	b292      	uxth	r2, r2
 8007580:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8007584:	e7e2      	b.n	800754c <UART_TxISR_16BIT_FIFOEN+0x26>
	...

08007588 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8007588:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800758c:	2b20      	cmp	r3, #32
 800758e:	d146      	bne.n	800761e <HAL_UART_Transmit_IT+0x96>
    if ((pData == NULL) || (Size == 0U))
 8007590:	2900      	cmp	r1, #0
 8007592:	d046      	beq.n	8007622 <HAL_UART_Transmit_IT+0x9a>
 8007594:	2a00      	cmp	r2, #0
 8007596:	d046      	beq.n	8007626 <HAL_UART_Transmit_IT+0x9e>
    __HAL_LOCK(huart);
 8007598:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d044      	beq.n	800762a <HAL_UART_Transmit_IT+0xa2>
 80075a0:	2301      	movs	r3, #1
 80075a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80075a6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80075a8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80075ac:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075b8:	2321      	movs	r3, #33	; 0x21
 80075ba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80075be:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80075c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c4:	d00f      	beq.n	80075e6 <HAL_UART_Transmit_IT+0x5e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c6:	6883      	ldr	r3, [r0, #8]
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075cc:	d021      	beq.n	8007612 <HAL_UART_Transmit_IT+0x8a>
        huart->TxISR = UART_TxISR_8BIT;
 80075ce:	4b18      	ldr	r3, [pc, #96]	; (8007630 <HAL_UART_Transmit_IT+0xa8>)
 80075d0:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80075d2:	2300      	movs	r3, #0
 80075d4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80075d8:	6801      	ldr	r1, [r0, #0]
 80075da:	680a      	ldr	r2, [r1, #0]
 80075dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075e0:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80075e2:	4618      	mov	r0, r3
 80075e4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e6:	6883      	ldr	r3, [r0, #8]
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d00b      	beq.n	8007606 <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <HAL_UART_Transmit_IT+0xac>)
 80075f0:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 80075f2:	2300      	movs	r3, #0
 80075f4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80075f8:	6801      	ldr	r1, [r0, #0]
 80075fa:	688a      	ldr	r2, [r1, #8]
 80075fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007600:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8007602:	4618      	mov	r0, r3
 8007604:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007606:	6903      	ldr	r3, [r0, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f0      	bne.n	80075ee <HAL_UART_Transmit_IT+0x66>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <HAL_UART_Transmit_IT+0xb0>)
 800760e:	6703      	str	r3, [r0, #112]	; 0x70
 8007610:	e7ef      	b.n	80075f2 <HAL_UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007612:	6903      	ldr	r3, [r0, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1da      	bne.n	80075ce <HAL_UART_Transmit_IT+0x46>
        huart->TxISR = UART_TxISR_16BIT;
 8007618:	4b08      	ldr	r3, [pc, #32]	; (800763c <HAL_UART_Transmit_IT+0xb4>)
 800761a:	6703      	str	r3, [r0, #112]	; 0x70
 800761c:	e7d9      	b.n	80075d2 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 800761e:	2002      	movs	r0, #2
 8007620:	4770      	bx	lr
      return HAL_ERROR;
 8007622:	2001      	movs	r0, #1
 8007624:	4770      	bx	lr
 8007626:	2001      	movs	r0, #1
 8007628:	4770      	bx	lr
    __HAL_LOCK(huart);
 800762a:	2002      	movs	r0, #2
}
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	0800743f 	.word	0x0800743f
 8007634:	080074cb 	.word	0x080074cb
 8007638:	08007527 	.word	0x08007527
 800763c:	08007483 	.word	0x08007483

08007640 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007640:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007644:	2b20      	cmp	r3, #32
 8007646:	d17f      	bne.n	8007748 <HAL_UART_Receive_IT+0x108>
    if ((pData == NULL) || (Size == 0U))
 8007648:	2900      	cmp	r1, #0
 800764a:	d07f      	beq.n	800774c <HAL_UART_Receive_IT+0x10c>
 800764c:	2a00      	cmp	r2, #0
 800764e:	d07f      	beq.n	8007750 <HAL_UART_Receive_IT+0x110>
    __HAL_LOCK(huart);
 8007650:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d07d      	beq.n	8007754 <HAL_UART_Receive_IT+0x114>
 8007658:	2301      	movs	r3, #1
 800765a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->pRxBuffPtr  = pData;
 800765e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007660:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007664:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	66c3      	str	r3, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800766c:	6883      	ldr	r3, [r0, #8]
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007672:	d006      	beq.n	8007682 <HAL_UART_Receive_IT+0x42>
 8007674:	b9a3      	cbnz	r3, 80076a0 <HAL_UART_Receive_IT+0x60>
 8007676:	6903      	ldr	r3, [r0, #16]
 8007678:	b973      	cbnz	r3, 8007698 <HAL_UART_Receive_IT+0x58>
 800767a:	23ff      	movs	r3, #255	; 0xff
 800767c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007680:	e014      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
 8007682:	6903      	ldr	r3, [r0, #16]
 8007684:	b923      	cbnz	r3, 8007690 <HAL_UART_Receive_IT+0x50>
 8007686:	f240 13ff 	movw	r3, #511	; 0x1ff
 800768a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800768e:	e00d      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
 8007690:	23ff      	movs	r3, #255	; 0xff
 8007692:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007696:	e009      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
 8007698:	237f      	movs	r3, #127	; 0x7f
 800769a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800769e:	e005      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
 80076a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a4:	d021      	beq.n	80076ea <HAL_UART_Receive_IT+0xaa>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076b2:	2322      	movs	r3, #34	; 0x22
 80076b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b8:	6801      	ldr	r1, [r0, #0]
 80076ba:	688b      	ldr	r3, [r1, #8]
 80076bc:	f043 0301 	orr.w	r3, r3, #1
 80076c0:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80076c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c8:	d019      	beq.n	80076fe <HAL_UART_Receive_IT+0xbe>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ca:	6883      	ldr	r3, [r0, #8]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d0:	d034      	beq.n	800773c <HAL_UART_Receive_IT+0xfc>
        huart->RxISR = UART_RxISR_8BIT;
 80076d2:	4b21      	ldr	r3, [pc, #132]	; (8007758 <HAL_UART_Receive_IT+0x118>)
 80076d4:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 80076d6:	2300      	movs	r3, #0
 80076d8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076dc:	6801      	ldr	r1, [r0, #0]
 80076de:	680a      	ldr	r2, [r1, #0]
 80076e0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80076e4:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80076e6:	4618      	mov	r0, r3
 80076e8:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80076ea:	6903      	ldr	r3, [r0, #16]
 80076ec:	b91b      	cbnz	r3, 80076f6 <HAL_UART_Receive_IT+0xb6>
 80076ee:	237f      	movs	r3, #127	; 0x7f
 80076f0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80076f4:	e7da      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
 80076f6:	233f      	movs	r3, #63	; 0x3f
 80076f8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80076fc:	e7d6      	b.n	80076ac <HAL_UART_Receive_IT+0x6c>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076fe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007702:	4293      	cmp	r3, r2
 8007704:	d8e1      	bhi.n	80076ca <HAL_UART_Receive_IT+0x8a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007706:	6883      	ldr	r3, [r0, #8]
 8007708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770c:	d010      	beq.n	8007730 <HAL_UART_Receive_IT+0xf0>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <HAL_UART_Receive_IT+0x11c>)
 8007710:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 8007712:	2300      	movs	r3, #0
 8007714:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007718:	6801      	ldr	r1, [r0, #0]
 800771a:	680a      	ldr	r2, [r1, #0]
 800771c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007720:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007722:	6801      	ldr	r1, [r0, #0]
 8007724:	688a      	ldr	r2, [r1, #8]
 8007726:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800772a:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800772c:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800772e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1eb      	bne.n	800770e <HAL_UART_Receive_IT+0xce>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <HAL_UART_Receive_IT+0x120>)
 8007738:	66c3      	str	r3, [r0, #108]	; 0x6c
 800773a:	e7ea      	b.n	8007712 <HAL_UART_Receive_IT+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800773c:	6903      	ldr	r3, [r0, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1c7      	bne.n	80076d2 <HAL_UART_Receive_IT+0x92>
        huart->RxISR = UART_RxISR_16BIT;
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <HAL_UART_Receive_IT+0x124>)
 8007744:	66c3      	str	r3, [r0, #108]	; 0x6c
 8007746:	e7c6      	b.n	80076d6 <HAL_UART_Receive_IT+0x96>
    return HAL_BUSY;
 8007748:	2002      	movs	r0, #2
 800774a:	4770      	bx	lr
      return HAL_ERROR;
 800774c:	2001      	movs	r0, #1
 800774e:	4770      	bx	lr
 8007750:	2001      	movs	r0, #1
 8007752:	4770      	bx	lr
    __HAL_LOCK(huart);
 8007754:	2002      	movs	r0, #2
}
 8007756:	4770      	bx	lr
 8007758:	08007769 	.word	0x08007769
 800775c:	08007835 	.word	0x08007835
 8007760:	080078e1 	.word	0x080078e1
 8007764:	080077cf 	.word	0x080077cf

08007768 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007768:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800776a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007772:	2a22      	cmp	r2, #34	; 0x22
 8007774:	d005      	beq.n	8007782 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007776:	6802      	ldr	r2, [r0, #0]
 8007778:	6993      	ldr	r3, [r2, #24]
 800777a:	f043 0308 	orr.w	r3, r3, #8
 800777e:	6193      	str	r3, [r2, #24]
  }
}
 8007780:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007782:	6802      	ldr	r2, [r0, #0]
 8007784:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007786:	b2db      	uxtb	r3, r3
 8007788:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800778a:	400b      	ands	r3, r1
 800778c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800778e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007790:	3301      	adds	r3, #1
 8007792:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007794:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007798:	3b01      	subs	r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80077a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1ea      	bne.n	8007780 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077aa:	6802      	ldr	r2, [r0, #0]
 80077ac:	6813      	ldr	r3, [r2, #0]
 80077ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077b2:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b4:	6802      	ldr	r2, [r0, #0]
 80077b6:	6893      	ldr	r3, [r2, #8]
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80077be:	2320      	movs	r3, #32
 80077c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 80077c8:	f7fa fe4a 	bl	8002460 <HAL_UART_RxCpltCallback>
 80077cc:	e7d8      	b.n	8007780 <UART_RxISR_8BIT+0x18>

080077ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077ce:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077d0:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80077d8:	2b22      	cmp	r3, #34	; 0x22
 80077da:	d005      	beq.n	80077e8 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077dc:	6802      	ldr	r2, [r0, #0]
 80077de:	6993      	ldr	r3, [r2, #24]
 80077e0:	f043 0308 	orr.w	r3, r3, #8
 80077e4:	6193      	str	r3, [r2, #24]
  }
}
 80077e6:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e8:	6803      	ldr	r3, [r0, #0]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ec:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80077ee:	4013      	ands	r3, r2
 80077f0:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80077f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80077f4:	3302      	adds	r3, #2
 80077f6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80077f8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007804:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1eb      	bne.n	80077e6 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780e:	6802      	ldr	r2, [r0, #0]
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007816:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007818:	6802      	ldr	r2, [r0, #0]
 800781a:	6893      	ldr	r3, [r2, #8]
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8007822:	2320      	movs	r3, #32
 8007824:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      huart->RxISR = NULL;
 8007828:	2300      	movs	r3, #0
 800782a:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800782c:	f7fa fe18 	bl	8002460 <HAL_UART_RxCpltCallback>
 8007830:	e7d9      	b.n	80077e6 <UART_RxISR_16BIT+0x18>
	...

08007834 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007834:	b570      	push	{r4, r5, r6, lr}
  uint16_t  uhMask = huart->Mask;
 8007836:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800783a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800783e:	2b22      	cmp	r3, #34	; 0x22
 8007840:	d005      	beq.n	800784e <UART_RxISR_8BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007842:	6802      	ldr	r2, [r0, #0]
 8007844:	6993      	ldr	r3, [r2, #24]
 8007846:	f043 0308 	orr.w	r3, r3, #8
 800784a:	6193      	str	r3, [r2, #24]
  }
}
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007850:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8007854:	e001      	b.n	800785a <UART_RxISR_8BIT_FIFOEN+0x26>
 8007856:	3e01      	subs	r6, #1
 8007858:	b2b6      	uxth	r6, r6
 800785a:	b346      	cbz	r6, 80078ae <UART_RxISR_8BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007860:	b2eb      	uxtb	r3, r5
 8007862:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007864:	400b      	ands	r3, r1
 8007866:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800786a:	3301      	adds	r3, #1
 800786c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800786e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007872:	3b01      	subs	r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800787a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e8      	bne.n	8007856 <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007884:	6822      	ldr	r2, [r4, #0]
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	6893      	ldr	r3, [r2, #8]
 8007892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800789c:	2320      	movs	r3, #32
 800789e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7fa fdda 	bl	8002460 <HAL_UART_RxCpltCallback>
 80078ac:	e7d3      	b.n	8007856 <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 80078ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078b2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c9      	beq.n	800784c <UART_RxISR_8BIT_FIFOEN+0x18>
 80078b8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80078bc:	429a      	cmp	r2, r3
 80078be:	d9c5      	bls.n	800784c <UART_RxISR_8BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078c0:	6822      	ldr	r2, [r4, #0]
 80078c2:	6893      	ldr	r3, [r2, #8]
 80078c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c8:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <UART_RxISR_8BIT_FIFOEN+0xa8>)
 80078cc:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078ce:	6822      	ldr	r2, [r4, #0]
 80078d0:	6813      	ldr	r3, [r2, #0]
 80078d2:	f043 0320 	orr.w	r3, r3, #32
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e7b8      	b.n	800784c <UART_RxISR_8BIT_FIFOEN+0x18>
 80078da:	bf00      	nop
 80078dc:	08007769 	.word	0x08007769

080078e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80078e2:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80078ea:	2b22      	cmp	r3, #34	; 0x22
 80078ec:	d005      	beq.n	80078fa <UART_RxISR_16BIT_FIFOEN+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ee:	6802      	ldr	r2, [r0, #0]
 80078f0:	6993      	ldr	r3, [r2, #24]
 80078f2:	f043 0308 	orr.w	r3, r3, #8
 80078f6:	6193      	str	r3, [r2, #24]
  }
}
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	4604      	mov	r4, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80078fc:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8007900:	e001      	b.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x26>
 8007902:	3d01      	subs	r5, #1
 8007904:	b2ad      	uxth	r5, r5
 8007906:	b33d      	cbz	r5, 8007958 <UART_RxISR_16BIT_FIFOEN+0x78>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800790c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800790e:	4033      	ands	r3, r6
 8007910:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007914:	3302      	adds	r3, #2
 8007916:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007918:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800791c:	3b01      	subs	r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8007924:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e9      	bne.n	8007902 <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	6813      	ldr	r3, [r2, #0]
 8007932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007936:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	6893      	ldr	r3, [r2, #8]
 800793c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8007946:	2320      	movs	r3, #32
 8007948:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8007950:	4620      	mov	r0, r4
 8007952:	f7fa fd85 	bl	8002460 <HAL_UART_RxCpltCallback>
 8007956:	e7d4      	b.n	8007902 <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 8007958:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800795c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0ca      	beq.n	80078f8 <UART_RxISR_16BIT_FIFOEN+0x18>
 8007962:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007966:	429a      	cmp	r2, r3
 8007968:	d9c6      	bls.n	80078f8 <UART_RxISR_16BIT_FIFOEN+0x18>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	6893      	ldr	r3, [r2, #8]
 800796e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007972:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 8007974:	4b03      	ldr	r3, [pc, #12]	; (8007984 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 8007976:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	f043 0320 	orr.w	r3, r3, #32
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e7b9      	b.n	80078f8 <UART_RxISR_16BIT_FIFOEN+0x18>
 8007984:	080077cf 	.word	0x080077cf

08007988 <UART_SetConfig>:
{
 8007988:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800798c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800798e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007990:	6883      	ldr	r3, [r0, #8]
 8007992:	6902      	ldr	r2, [r0, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	6942      	ldr	r2, [r0, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	69c2      	ldr	r2, [r0, #28]
 800799c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 800799e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80079a0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079a2:	6808      	ldr	r0, [r1, #0]
 80079a4:	4aa1      	ldr	r2, [pc, #644]	; (8007c2c <UART_SetConfig+0x2a4>)
 80079a6:	4002      	ands	r2, r0
 80079a8:	431a      	orrs	r2, r3
 80079aa:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	6853      	ldr	r3, [r2, #4]
 80079b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80079b4:	68e1      	ldr	r1, [r4, #12]
 80079b6:	430b      	orrs	r3, r1
 80079b8:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ba:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	4b9c      	ldr	r3, [pc, #624]	; (8007c30 <UART_SetConfig+0x2a8>)
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d001      	beq.n	80079c8 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 80079c4:	6a23      	ldr	r3, [r4, #32]
 80079c6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079c8:	6893      	ldr	r3, [r2, #8]
 80079ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079da:	f023 030f 	bic.w	r3, r3, #15
 80079de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079e0:	430b      	orrs	r3, r1
 80079e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	4a93      	ldr	r2, [pc, #588]	; (8007c34 <UART_SetConfig+0x2ac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d019      	beq.n	8007a20 <UART_SetConfig+0x98>
 80079ec:	4a90      	ldr	r2, [pc, #576]	; (8007c30 <UART_SetConfig+0x2a8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d02a      	beq.n	8007a48 <UART_SetConfig+0xc0>
 80079f2:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80079f4:	4a8e      	ldr	r2, [pc, #568]	; (8007c30 <UART_SetConfig+0x2a8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d043      	beq.n	8007a82 <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079fa:	69e3      	ldr	r3, [r4, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	f000 8307 	beq.w	8008012 <UART_SetConfig+0x68a>
    switch (clocksource)
 8007a04:	3d01      	subs	r5, #1
 8007a06:	2d07      	cmp	r5, #7
 8007a08:	f200 854f 	bhi.w	80084aa <UART_SetConfig+0xb22>
 8007a0c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007a10:	046e041e 	.word	0x046e041e
 8007a14:	04ca054d 	.word	0x04ca054d
 8007a18:	054d054d 	.word	0x054d054d
 8007a1c:	0508054d 	.word	0x0508054d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a24:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007a28:	f002 0203 	and.w	r2, r2, #3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a2c:	2a03      	cmp	r2, #3
 8007a2e:	d809      	bhi.n	8007a44 <UART_SetConfig+0xbc>
 8007a30:	e8df f002 	tbb	[pc, r2]
 8007a34:	06230402 	.word	0x06230402
 8007a38:	2501      	movs	r5, #1
 8007a3a:	e7db      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a3c:	2504      	movs	r5, #4
 8007a3e:	e7d9      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a40:	2508      	movs	r5, #8
 8007a42:	e7d7      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a44:	2510      	movs	r5, #16
 8007a46:	e7d5      	b.n	80079f4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a4c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007a50:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007a54:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007a58:	d00b      	beq.n	8007a72 <UART_SetConfig+0xea>
 8007a5a:	d907      	bls.n	8007a6c <UART_SetConfig+0xe4>
 8007a5c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007a60:	d00d      	beq.n	8007a7e <UART_SetConfig+0xf6>
 8007a62:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007a66:	d106      	bne.n	8007a76 <UART_SetConfig+0xee>
 8007a68:	2508      	movs	r5, #8
 8007a6a:	e7c3      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a6c:	b91a      	cbnz	r2, 8007a76 <UART_SetConfig+0xee>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	e7c0      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a72:	2504      	movs	r5, #4
 8007a74:	e7be      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a76:	2510      	movs	r5, #16
 8007a78:	e7bc      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a7a:	2502      	movs	r5, #2
 8007a7c:	e7ba      	b.n	80079f4 <UART_SetConfig+0x6c>
 8007a7e:	2502      	movs	r5, #2
 8007a80:	e7b8      	b.n	80079f4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007a82:	2d08      	cmp	r5, #8
 8007a84:	f200 8514 	bhi.w	80084b0 <UART_SetConfig+0xb28>
 8007a88:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007a8c:	05120009 	.word	0x05120009
 8007a90:	0512005a 	.word	0x0512005a
 8007a94:	05120078 	.word	0x05120078
 8007a98:	05120512 	.word	0x05120512
 8007a9c:	00af      	.short	0x00af
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a9e:	f7fe fcd1 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8007aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa4:	b1d3      	cbz	r3, 8007adc <UART_SetConfig+0x154>
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d036      	beq.n	8007b18 <UART_SetConfig+0x190>
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d036      	beq.n	8007b1c <UART_SetConfig+0x194>
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d036      	beq.n	8007b20 <UART_SetConfig+0x198>
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d036      	beq.n	8007b24 <UART_SetConfig+0x19c>
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d036      	beq.n	8007b28 <UART_SetConfig+0x1a0>
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d036      	beq.n	8007b2c <UART_SetConfig+0x1a4>
 8007abe:	2b07      	cmp	r3, #7
 8007ac0:	d036      	beq.n	8007b30 <UART_SetConfig+0x1a8>
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d036      	beq.n	8007b34 <UART_SetConfig+0x1ac>
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d036      	beq.n	8007b38 <UART_SetConfig+0x1b0>
 8007aca:	2b0a      	cmp	r3, #10
 8007acc:	d036      	beq.n	8007b3c <UART_SetConfig+0x1b4>
 8007ace:	2b0b      	cmp	r3, #11
 8007ad0:	d001      	beq.n	8007ad6 <UART_SetConfig+0x14e>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e003      	b.n	8007ade <UART_SetConfig+0x156>
 8007ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ada:	e000      	b.n	8007ade <UART_SetConfig+0x156>
 8007adc:	2301      	movs	r3, #1
 8007ade:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f000 84e6 	beq.w	80084b4 <UART_SetConfig+0xb2c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae8:	6862      	ldr	r2, [r4, #4]
 8007aea:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8007aee:	4283      	cmp	r3, r0
 8007af0:	f200 84e2 	bhi.w	80084b8 <UART_SetConfig+0xb30>
 8007af4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8007af8:	f200 84e0 	bhi.w	80084bc <UART_SetConfig+0xb34>
        switch (clocksource)
 8007afc:	2d08      	cmp	r5, #8
 8007afe:	f200 8285 	bhi.w	800800c <UART_SetConfig+0x684>
 8007b02:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007b06:	00d0      	.short	0x00d0
 8007b08:	012f0283 	.word	0x012f0283
 8007b0c:	01930283 	.word	0x01930283
 8007b10:	02830283 	.word	0x02830283
 8007b14:	021f0283 	.word	0x021f0283
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e7e0      	b.n	8007ade <UART_SetConfig+0x156>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	e7de      	b.n	8007ade <UART_SetConfig+0x156>
 8007b20:	2306      	movs	r3, #6
 8007b22:	e7dc      	b.n	8007ade <UART_SetConfig+0x156>
 8007b24:	2308      	movs	r3, #8
 8007b26:	e7da      	b.n	8007ade <UART_SetConfig+0x156>
 8007b28:	230a      	movs	r3, #10
 8007b2a:	e7d8      	b.n	8007ade <UART_SetConfig+0x156>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	e7d6      	b.n	8007ade <UART_SetConfig+0x156>
 8007b30:	2310      	movs	r3, #16
 8007b32:	e7d4      	b.n	8007ade <UART_SetConfig+0x156>
 8007b34:	2320      	movs	r3, #32
 8007b36:	e7d2      	b.n	8007ade <UART_SetConfig+0x156>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	e7d0      	b.n	8007ade <UART_SetConfig+0x156>
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	e7ce      	b.n	8007ade <UART_SetConfig+0x156>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d06f      	beq.n	8007c26 <UART_SetConfig+0x29e>
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d078      	beq.n	8007c3c <UART_SetConfig+0x2b4>
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d078      	beq.n	8007c40 <UART_SetConfig+0x2b8>
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d078      	beq.n	8007c44 <UART_SetConfig+0x2bc>
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d078      	beq.n	8007c48 <UART_SetConfig+0x2c0>
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d078      	beq.n	8007c4c <UART_SetConfig+0x2c4>
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d078      	beq.n	8007c50 <UART_SetConfig+0x2c8>
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	d078      	beq.n	8007c54 <UART_SetConfig+0x2cc>
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d078      	beq.n	8007c58 <UART_SetConfig+0x2d0>
 8007b66:	2b09      	cmp	r3, #9
 8007b68:	d078      	beq.n	8007c5c <UART_SetConfig+0x2d4>
 8007b6a:	2b0a      	cmp	r3, #10
 8007b6c:	d078      	beq.n	8007c60 <UART_SetConfig+0x2d8>
 8007b6e:	2b0b      	cmp	r3, #11
 8007b70:	d001      	beq.n	8007b76 <UART_SetConfig+0x1ee>
 8007b72:	4831      	ldr	r0, [pc, #196]	; (8007c38 <UART_SetConfig+0x2b0>)
 8007b74:	e7b5      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007b76:	f24f 4024 	movw	r0, #62500	; 0xf424
 8007b7a:	e7b2      	b.n	8007ae2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b7c:	f7fe fbf4 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	b1d3      	cbz	r3, 8007bba <UART_SetConfig+0x232>
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d01c      	beq.n	8007bc2 <UART_SetConfig+0x23a>
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d01c      	beq.n	8007bc6 <UART_SetConfig+0x23e>
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d01c      	beq.n	8007bca <UART_SetConfig+0x242>
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d01c      	beq.n	8007bce <UART_SetConfig+0x246>
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d01c      	beq.n	8007bd2 <UART_SetConfig+0x24a>
 8007b98:	2b06      	cmp	r3, #6
 8007b9a:	d01c      	beq.n	8007bd6 <UART_SetConfig+0x24e>
 8007b9c:	2b07      	cmp	r3, #7
 8007b9e:	d01c      	beq.n	8007bda <UART_SetConfig+0x252>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d01c      	beq.n	8007bde <UART_SetConfig+0x256>
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d01c      	beq.n	8007be2 <UART_SetConfig+0x25a>
 8007ba8:	2b0a      	cmp	r3, #10
 8007baa:	d01c      	beq.n	8007be6 <UART_SetConfig+0x25e>
 8007bac:	2b0b      	cmp	r3, #11
 8007bae:	d001      	beq.n	8007bb4 <UART_SetConfig+0x22c>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e003      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb8:	e000      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007bc0:	e78f      	b.n	8007ae2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e7fa      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	e7f8      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bca:	2306      	movs	r3, #6
 8007bcc:	e7f6      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bce:	2308      	movs	r3, #8
 8007bd0:	e7f4      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bd2:	230a      	movs	r3, #10
 8007bd4:	e7f2      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	e7f0      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7ee      	b.n	8007bbc <UART_SetConfig+0x234>
 8007bde:	2320      	movs	r3, #32
 8007be0:	e7ec      	b.n	8007bbc <UART_SetConfig+0x234>
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	e7ea      	b.n	8007bbc <UART_SetConfig+0x234>
 8007be6:	2380      	movs	r3, #128	; 0x80
 8007be8:	e7e8      	b.n	8007bbc <UART_SetConfig+0x234>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d039      	beq.n	8007c64 <UART_SetConfig+0x2dc>
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d03a      	beq.n	8007c6a <UART_SetConfig+0x2e2>
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d03b      	beq.n	8007c70 <UART_SetConfig+0x2e8>
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d03c      	beq.n	8007c76 <UART_SetConfig+0x2ee>
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d03d      	beq.n	8007c7c <UART_SetConfig+0x2f4>
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	d03e      	beq.n	8007c82 <UART_SetConfig+0x2fa>
 8007c04:	2b06      	cmp	r3, #6
 8007c06:	d03f      	beq.n	8007c88 <UART_SetConfig+0x300>
 8007c08:	2b07      	cmp	r3, #7
 8007c0a:	d040      	beq.n	8007c8e <UART_SetConfig+0x306>
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d041      	beq.n	8007c94 <UART_SetConfig+0x30c>
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d042      	beq.n	8007c9a <UART_SetConfig+0x312>
 8007c14:	2b0a      	cmp	r3, #10
 8007c16:	d043      	beq.n	8007ca0 <UART_SetConfig+0x318>
 8007c18:	2b0b      	cmp	r3, #11
 8007c1a:	d002      	beq.n	8007c22 <UART_SetConfig+0x29a>
 8007c1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c20:	e75f      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c22:	2080      	movs	r0, #128	; 0x80
 8007c24:	e75d      	b.n	8007ae2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c26:	4804      	ldr	r0, [pc, #16]	; (8007c38 <UART_SetConfig+0x2b0>)
 8007c28:	e75b      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c2a:	bf00      	nop
 8007c2c:	cfff69f3 	.word	0xcfff69f3
 8007c30:	40008000 	.word	0x40008000
 8007c34:	40013800 	.word	0x40013800
 8007c38:	00f42400 	.word	0x00f42400
 8007c3c:	48ac      	ldr	r0, [pc, #688]	; (8007ef0 <UART_SetConfig+0x568>)
 8007c3e:	e750      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c40:	48ac      	ldr	r0, [pc, #688]	; (8007ef4 <UART_SetConfig+0x56c>)
 8007c42:	e74e      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c44:	48ac      	ldr	r0, [pc, #688]	; (8007ef8 <UART_SetConfig+0x570>)
 8007c46:	e74c      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c48:	48ac      	ldr	r0, [pc, #688]	; (8007efc <UART_SetConfig+0x574>)
 8007c4a:	e74a      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c4c:	48ac      	ldr	r0, [pc, #688]	; (8007f00 <UART_SetConfig+0x578>)
 8007c4e:	e748      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c50:	48ac      	ldr	r0, [pc, #688]	; (8007f04 <UART_SetConfig+0x57c>)
 8007c52:	e746      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c54:	48ac      	ldr	r0, [pc, #688]	; (8007f08 <UART_SetConfig+0x580>)
 8007c56:	e744      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c58:	48ac      	ldr	r0, [pc, #688]	; (8007f0c <UART_SetConfig+0x584>)
 8007c5a:	e742      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c5c:	48ac      	ldr	r0, [pc, #688]	; (8007f10 <UART_SetConfig+0x588>)
 8007c5e:	e740      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c60:	48ac      	ldr	r0, [pc, #688]	; (8007f14 <UART_SetConfig+0x58c>)
 8007c62:	e73e      	b.n	8007ae2 <UART_SetConfig+0x15a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c68:	e73b      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007c6e:	e738      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c74:	e735      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c76:	f241 5055 	movw	r0, #5461	; 0x1555
 8007c7a:	e732      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c80:	e72f      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c82:	f640 40cc 	movw	r0, #3276	; 0xccc
 8007c86:	e72c      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c88:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8007c8c:	e729      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c92:	e726      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007c98:	e723      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c9e:	e720      	b.n	8007ae2 <UART_SetConfig+0x15a>
 8007ca0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ca4:	e71d      	b.n	8007ae2 <UART_SetConfig+0x15a>
            pclk = HAL_RCC_GetPCLK1Freq();
 8007ca6:	f7fe fbcd 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cac:	b1e3      	cbz	r3, 8007ce8 <UART_SetConfig+0x360>
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d03a      	beq.n	8007d28 <UART_SetConfig+0x3a0>
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d03b      	beq.n	8007d2e <UART_SetConfig+0x3a6>
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d03c      	beq.n	8007d34 <UART_SetConfig+0x3ac>
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d03d      	beq.n	8007d3a <UART_SetConfig+0x3b2>
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	d03e      	beq.n	8007d40 <UART_SetConfig+0x3b8>
 8007cc2:	2b06      	cmp	r3, #6
 8007cc4:	d03f      	beq.n	8007d46 <UART_SetConfig+0x3be>
 8007cc6:	2b07      	cmp	r3, #7
 8007cc8:	d040      	beq.n	8007d4c <UART_SetConfig+0x3c4>
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d041      	beq.n	8007d52 <UART_SetConfig+0x3ca>
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d042      	beq.n	8007d58 <UART_SetConfig+0x3d0>
 8007cd2:	2b0a      	cmp	r3, #10
 8007cd4:	d043      	beq.n	8007d5e <UART_SetConfig+0x3d6>
 8007cd6:	2b0b      	cmp	r3, #11
 8007cd8:	d002      	beq.n	8007ce0 <UART_SetConfig+0x358>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e005      	b.n	8007cec <UART_SetConfig+0x364>
 8007ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e001      	b.n	8007cec <UART_SetConfig+0x364>
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2300      	movs	r3, #0
 8007cec:	2100      	movs	r1, #0
 8007cee:	f7f8 ff0d 	bl	8000b0c <__aeabi_uldivmod>
 8007cf2:	020f      	lsls	r7, r1, #8
 8007cf4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007cf8:	0206      	lsls	r6, r0, #8
 8007cfa:	6862      	ldr	r2, [r4, #4]
 8007cfc:	0850      	lsrs	r0, r2, #1
 8007cfe:	2500      	movs	r5, #0
 8007d00:	462b      	mov	r3, r5
 8007d02:	eb16 0b00 	adds.w	fp, r6, r0
 8007d06:	f147 0c00 	adc.w	ip, r7, #0
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	4661      	mov	r1, ip
 8007d0e:	f7f8 fefd 	bl	8000b0c <__aeabi_uldivmod>
 8007d12:	4603      	mov	r3, r0
            break;
 8007d14:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d16:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8007d1a:	4a7f      	ldr	r2, [pc, #508]	; (8007f18 <UART_SetConfig+0x590>)
 8007d1c:	4291      	cmp	r1, r2
 8007d1e:	f200 83cf 	bhi.w	80084c0 <UART_SetConfig+0xb38>
          huart->Instance->BRR = usartdiv;
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	60d3      	str	r3, [r2, #12]
 8007d26:	e2c3      	b.n	80082b0 <UART_SetConfig+0x928>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d28:	2202      	movs	r2, #2
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e7de      	b.n	8007cec <UART_SetConfig+0x364>
 8007d2e:	2204      	movs	r2, #4
 8007d30:	2300      	movs	r3, #0
 8007d32:	e7db      	b.n	8007cec <UART_SetConfig+0x364>
 8007d34:	2206      	movs	r2, #6
 8007d36:	2300      	movs	r3, #0
 8007d38:	e7d8      	b.n	8007cec <UART_SetConfig+0x364>
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e7d5      	b.n	8007cec <UART_SetConfig+0x364>
 8007d40:	220a      	movs	r2, #10
 8007d42:	2300      	movs	r3, #0
 8007d44:	e7d2      	b.n	8007cec <UART_SetConfig+0x364>
 8007d46:	220c      	movs	r2, #12
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e7cf      	b.n	8007cec <UART_SetConfig+0x364>
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e7cc      	b.n	8007cec <UART_SetConfig+0x364>
 8007d52:	2220      	movs	r2, #32
 8007d54:	2300      	movs	r3, #0
 8007d56:	e7c9      	b.n	8007cec <UART_SetConfig+0x364>
 8007d58:	2240      	movs	r2, #64	; 0x40
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e7c6      	b.n	8007cec <UART_SetConfig+0x364>
 8007d5e:	2280      	movs	r2, #128	; 0x80
 8007d60:	2300      	movs	r3, #0
 8007d62:	e7c3      	b.n	8007cec <UART_SetConfig+0x364>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d66:	b1fb      	cbz	r3, 8007da8 <UART_SetConfig+0x420>
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d02d      	beq.n	8007dc8 <UART_SetConfig+0x440>
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d030      	beq.n	8007dd2 <UART_SetConfig+0x44a>
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d033      	beq.n	8007ddc <UART_SetConfig+0x454>
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d036      	beq.n	8007de6 <UART_SetConfig+0x45e>
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	d039      	beq.n	8007df0 <UART_SetConfig+0x468>
 8007d7c:	2b06      	cmp	r3, #6
 8007d7e:	d03c      	beq.n	8007dfa <UART_SetConfig+0x472>
 8007d80:	2b07      	cmp	r3, #7
 8007d82:	d03f      	beq.n	8007e04 <UART_SetConfig+0x47c>
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d042      	beq.n	8007e0e <UART_SetConfig+0x486>
 8007d88:	2b09      	cmp	r3, #9
 8007d8a:	d045      	beq.n	8007e18 <UART_SetConfig+0x490>
 8007d8c:	2b0a      	cmp	r3, #10
 8007d8e:	d048      	beq.n	8007e22 <UART_SetConfig+0x49a>
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d004      	beq.n	8007d9e <UART_SetConfig+0x416>
 8007d94:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007f1c <UART_SetConfig+0x594>
 8007d98:	f04f 0c00 	mov.w	ip, #0
 8007d9c:	e008      	b.n	8007db0 <UART_SetConfig+0x428>
 8007d9e:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f20 <UART_SetConfig+0x598>
 8007da2:	f04f 0c00 	mov.w	ip, #0
 8007da6:	e003      	b.n	8007db0 <UART_SetConfig+0x428>
 8007da8:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007f1c <UART_SetConfig+0x594>
 8007dac:	f04f 0c00 	mov.w	ip, #0
 8007db0:	0856      	lsrs	r6, r2, #1
 8007db2:	2500      	movs	r5, #0
 8007db4:	462b      	mov	r3, r5
 8007db6:	eb1b 0006 	adds.w	r0, fp, r6
 8007dba:	f14c 0100 	adc.w	r1, ip, #0
 8007dbe:	f7f8 fea5 	bl	8000b0c <__aeabi_uldivmod>
 8007dc2:	4603      	mov	r3, r0
            break;
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	e7a6      	b.n	8007d16 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc8:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007f24 <UART_SetConfig+0x59c>
 8007dcc:	f04f 0c00 	mov.w	ip, #0
 8007dd0:	e7ee      	b.n	8007db0 <UART_SetConfig+0x428>
 8007dd2:	f8df b154 	ldr.w	fp, [pc, #340]	; 8007f28 <UART_SetConfig+0x5a0>
 8007dd6:	f04f 0c00 	mov.w	ip, #0
 8007dda:	e7e9      	b.n	8007db0 <UART_SetConfig+0x428>
 8007ddc:	f20f 1c00 	addw	ip, pc, #256	; 0x100
 8007de0:	e9dc bc00 	ldrd	fp, ip, [ip]
 8007de4:	e7e4      	b.n	8007db0 <UART_SetConfig+0x428>
 8007de6:	f8df b144 	ldr.w	fp, [pc, #324]	; 8007f2c <UART_SetConfig+0x5a4>
 8007dea:	f04f 0c00 	mov.w	ip, #0
 8007dee:	e7df      	b.n	8007db0 <UART_SetConfig+0x428>
 8007df0:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8007f30 <UART_SetConfig+0x5a8>
 8007df4:	f04f 0c00 	mov.w	ip, #0
 8007df8:	e7da      	b.n	8007db0 <UART_SetConfig+0x428>
 8007dfa:	f20f 0cec 	addw	ip, pc, #236	; 0xec
 8007dfe:	e9dc bc00 	ldrd	fp, ip, [ip]
 8007e02:	e7d5      	b.n	8007db0 <UART_SetConfig+0x428>
 8007e04:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007f34 <UART_SetConfig+0x5ac>
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	e7d0      	b.n	8007db0 <UART_SetConfig+0x428>
 8007e0e:	f8df b128 	ldr.w	fp, [pc, #296]	; 8007f38 <UART_SetConfig+0x5b0>
 8007e12:	f04f 0c00 	mov.w	ip, #0
 8007e16:	e7cb      	b.n	8007db0 <UART_SetConfig+0x428>
 8007e18:	f8df b120 	ldr.w	fp, [pc, #288]	; 8007f3c <UART_SetConfig+0x5b4>
 8007e1c:	f04f 0c00 	mov.w	ip, #0
 8007e20:	e7c6      	b.n	8007db0 <UART_SetConfig+0x428>
 8007e22:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8007f40 <UART_SetConfig+0x5b8>
 8007e26:	f04f 0c00 	mov.w	ip, #0
 8007e2a:	e7c1      	b.n	8007db0 <UART_SetConfig+0x428>
            pclk = HAL_RCC_GetSysClockFreq();
 8007e2c:	f7fe fa9c 	bl	8006368 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e32:	b1e3      	cbz	r3, 8007e6e <UART_SetConfig+0x4e6>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d032      	beq.n	8007e9e <UART_SetConfig+0x516>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d033      	beq.n	8007ea4 <UART_SetConfig+0x51c>
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d034      	beq.n	8007eaa <UART_SetConfig+0x522>
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d035      	beq.n	8007eb0 <UART_SetConfig+0x528>
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d036      	beq.n	8007eb6 <UART_SetConfig+0x52e>
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d037      	beq.n	8007ebc <UART_SetConfig+0x534>
 8007e4c:	2b07      	cmp	r3, #7
 8007e4e:	d038      	beq.n	8007ec2 <UART_SetConfig+0x53a>
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d039      	beq.n	8007ec8 <UART_SetConfig+0x540>
 8007e54:	2b09      	cmp	r3, #9
 8007e56:	d03a      	beq.n	8007ece <UART_SetConfig+0x546>
 8007e58:	2b0a      	cmp	r3, #10
 8007e5a:	d03b      	beq.n	8007ed4 <UART_SetConfig+0x54c>
 8007e5c:	2b0b      	cmp	r3, #11
 8007e5e:	d002      	beq.n	8007e66 <UART_SetConfig+0x4de>
 8007e60:	2201      	movs	r2, #1
 8007e62:	2300      	movs	r3, #0
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e001      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2300      	movs	r3, #0
 8007e72:	2100      	movs	r1, #0
 8007e74:	f7f8 fe4a 	bl	8000b0c <__aeabi_uldivmod>
 8007e78:	020f      	lsls	r7, r1, #8
 8007e7a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007e7e:	0206      	lsls	r6, r0, #8
 8007e80:	6862      	ldr	r2, [r4, #4]
 8007e82:	0850      	lsrs	r0, r2, #1
 8007e84:	2500      	movs	r5, #0
 8007e86:	462b      	mov	r3, r5
 8007e88:	eb16 0b00 	adds.w	fp, r6, r0
 8007e8c:	f147 0c00 	adc.w	ip, r7, #0
 8007e90:	4658      	mov	r0, fp
 8007e92:	4661      	mov	r1, ip
 8007e94:	f7f8 fe3a 	bl	8000b0c <__aeabi_uldivmod>
 8007e98:	4603      	mov	r3, r0
            break;
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	e73b      	b.n	8007d16 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e7e6      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e7e3      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007eaa:	2206      	movs	r2, #6
 8007eac:	2300      	movs	r3, #0
 8007eae:	e7e0      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e7dd      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e7da      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ebc:	220c      	movs	r2, #12
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e7d7      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ec2:	2210      	movs	r2, #16
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e7d4      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ec8:	2220      	movs	r2, #32
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e7d1      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ece:	2240      	movs	r2, #64	; 0x40
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e7ce      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007ed4:	2280      	movs	r2, #128	; 0x80
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e7cb      	b.n	8007e72 <UART_SetConfig+0x4ea>
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w
 8007ee0:	28b0aa00 	.word	0x28b0aa00
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	14585500 	.word	0x14585500
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	007a1200 	.word	0x007a1200
 8007ef4:	003d0900 	.word	0x003d0900
 8007ef8:	0028b0aa 	.word	0x0028b0aa
 8007efc:	001e8480 	.word	0x001e8480
 8007f00:	00186a00 	.word	0x00186a00
 8007f04:	00145855 	.word	0x00145855
 8007f08:	000f4240 	.word	0x000f4240
 8007f0c:	0007a120 	.word	0x0007a120
 8007f10:	0003d090 	.word	0x0003d090
 8007f14:	0001e848 	.word	0x0001e848
 8007f18:	000ffcff 	.word	0x000ffcff
 8007f1c:	f4240000 	.word	0xf4240000
 8007f20:	00f42400 	.word	0x00f42400
 8007f24:	7a120000 	.word	0x7a120000
 8007f28:	3d090000 	.word	0x3d090000
 8007f2c:	1e848000 	.word	0x1e848000
 8007f30:	186a0000 	.word	0x186a0000
 8007f34:	0f424000 	.word	0x0f424000
 8007f38:	07a12000 	.word	0x07a12000
 8007f3c:	03d09000 	.word	0x03d09000
 8007f40:	01e84800 	.word	0x01e84800
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f46:	b1fb      	cbz	r3, 8007f88 <UART_SetConfig+0x600>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d02d      	beq.n	8007fa8 <UART_SetConfig+0x620>
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d030      	beq.n	8007fb2 <UART_SetConfig+0x62a>
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d033      	beq.n	8007fbc <UART_SetConfig+0x634>
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d036      	beq.n	8007fc6 <UART_SetConfig+0x63e>
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	d039      	beq.n	8007fd0 <UART_SetConfig+0x648>
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	d03c      	beq.n	8007fda <UART_SetConfig+0x652>
 8007f60:	2b07      	cmp	r3, #7
 8007f62:	d03f      	beq.n	8007fe4 <UART_SetConfig+0x65c>
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d042      	beq.n	8007fee <UART_SetConfig+0x666>
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d045      	beq.n	8007ff8 <UART_SetConfig+0x670>
 8007f6c:	2b0a      	cmp	r3, #10
 8007f6e:	d048      	beq.n	8008002 <UART_SetConfig+0x67a>
 8007f70:	2b0b      	cmp	r3, #11
 8007f72:	d004      	beq.n	8007f7e <UART_SetConfig+0x5f6>
 8007f74:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8007f78:	f04f 0c00 	mov.w	ip, #0
 8007f7c:	e008      	b.n	8007f90 <UART_SetConfig+0x608>
 8007f7e:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8007f82:	f04f 0c00 	mov.w	ip, #0
 8007f86:	e003      	b.n	8007f90 <UART_SetConfig+0x608>
 8007f88:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8007f8c:	f04f 0c00 	mov.w	ip, #0
 8007f90:	0856      	lsrs	r6, r2, #1
 8007f92:	2500      	movs	r5, #0
 8007f94:	462b      	mov	r3, r5
 8007f96:	eb1b 0006 	adds.w	r0, fp, r6
 8007f9a:	f14c 0100 	adc.w	r1, ip, #0
 8007f9e:	f7f8 fdb5 	bl	8000b0c <__aeabi_uldivmod>
 8007fa2:	4603      	mov	r3, r0
            break;
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	e6b6      	b.n	8007d16 <UART_SetConfig+0x38e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa8:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8007fac:	f04f 0c00 	mov.w	ip, #0
 8007fb0:	e7ee      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fb2:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8007fb6:	f04f 0c00 	mov.w	ip, #0
 8007fba:	e7e9      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fbc:	f8df b3d8 	ldr.w	fp, [pc, #984]	; 8008398 <UART_SetConfig+0xa10>
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	e7e4      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fc6:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8007fca:	f04f 0c00 	mov.w	ip, #0
 8007fce:	e7df      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fd0:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 800839c <UART_SetConfig+0xa14>
 8007fd4:	f04f 0c00 	mov.w	ip, #0
 8007fd8:	e7da      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fda:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 80083a0 <UART_SetConfig+0xa18>
 8007fde:	f04f 0c00 	mov.w	ip, #0
 8007fe2:	e7d5      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fe4:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8007fe8:	f04f 0c00 	mov.w	ip, #0
 8007fec:	e7d0      	b.n	8007f90 <UART_SetConfig+0x608>
 8007fee:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	e7cb      	b.n	8007f90 <UART_SetConfig+0x608>
 8007ff8:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8007ffc:	f04f 0c00 	mov.w	ip, #0
 8008000:	e7c6      	b.n	8007f90 <UART_SetConfig+0x608>
 8008002:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8008006:	f04f 0c00 	mov.w	ip, #0
 800800a:	e7c1      	b.n	8007f90 <UART_SetConfig+0x608>
            ret = HAL_ERROR;
 800800c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800800e:	2300      	movs	r3, #0
 8008010:	e681      	b.n	8007d16 <UART_SetConfig+0x38e>
    switch (clocksource)
 8008012:	3d01      	subs	r5, #1
 8008014:	2d07      	cmp	r5, #7
 8008016:	f200 8116 	bhi.w	8008246 <UART_SetConfig+0x8be>
 800801a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800801e:	0008      	.short	0x0008
 8008020:	01140056 	.word	0x01140056
 8008024:	0114008f 	.word	0x0114008f
 8008028:	01140114 	.word	0x01140114
 800802c:	00ce      	.short	0x00ce
        pclk = HAL_RCC_GetPCLK2Freq();
 800802e:	f7fe fa1b 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008034:	b1d3      	cbz	r3, 800806c <UART_SetConfig+0x6e4>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d033      	beq.n	80080a2 <UART_SetConfig+0x71a>
 800803a:	2b02      	cmp	r3, #2
 800803c:	d033      	beq.n	80080a6 <UART_SetConfig+0x71e>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d033      	beq.n	80080aa <UART_SetConfig+0x722>
 8008042:	2b04      	cmp	r3, #4
 8008044:	d033      	beq.n	80080ae <UART_SetConfig+0x726>
 8008046:	2b05      	cmp	r3, #5
 8008048:	d033      	beq.n	80080b2 <UART_SetConfig+0x72a>
 800804a:	2b06      	cmp	r3, #6
 800804c:	d033      	beq.n	80080b6 <UART_SetConfig+0x72e>
 800804e:	2b07      	cmp	r3, #7
 8008050:	d033      	beq.n	80080ba <UART_SetConfig+0x732>
 8008052:	2b08      	cmp	r3, #8
 8008054:	d033      	beq.n	80080be <UART_SetConfig+0x736>
 8008056:	2b09      	cmp	r3, #9
 8008058:	d033      	beq.n	80080c2 <UART_SetConfig+0x73a>
 800805a:	2b0a      	cmp	r3, #10
 800805c:	d033      	beq.n	80080c6 <UART_SetConfig+0x73e>
 800805e:	2b0b      	cmp	r3, #11
 8008060:	d001      	beq.n	8008066 <UART_SetConfig+0x6de>
 8008062:	2301      	movs	r3, #1
 8008064:	e003      	b.n	800806e <UART_SetConfig+0x6e6>
 8008066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800806a:	e000      	b.n	800806e <UART_SetConfig+0x6e6>
 800806c:	2301      	movs	r3, #1
 800806e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	0853      	lsrs	r3, r2, #1
 8008076:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800807a:	fbb3 f3f2 	udiv	r3, r3, r2
 800807e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008080:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008082:	f1a3 0110 	sub.w	r1, r3, #16
 8008086:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800808a:	4291      	cmp	r1, r2
 800808c:	f200 821a 	bhi.w	80084c4 <UART_SetConfig+0xb3c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008090:	b29a      	uxth	r2, r3
 8008092:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008096:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800809a:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	60d3      	str	r3, [r2, #12]
 80080a0:	e106      	b.n	80082b0 <UART_SetConfig+0x928>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a2:	2302      	movs	r3, #2
 80080a4:	e7e3      	b.n	800806e <UART_SetConfig+0x6e6>
 80080a6:	2304      	movs	r3, #4
 80080a8:	e7e1      	b.n	800806e <UART_SetConfig+0x6e6>
 80080aa:	2306      	movs	r3, #6
 80080ac:	e7df      	b.n	800806e <UART_SetConfig+0x6e6>
 80080ae:	2308      	movs	r3, #8
 80080b0:	e7dd      	b.n	800806e <UART_SetConfig+0x6e6>
 80080b2:	230a      	movs	r3, #10
 80080b4:	e7db      	b.n	800806e <UART_SetConfig+0x6e6>
 80080b6:	230c      	movs	r3, #12
 80080b8:	e7d9      	b.n	800806e <UART_SetConfig+0x6e6>
 80080ba:	2310      	movs	r3, #16
 80080bc:	e7d7      	b.n	800806e <UART_SetConfig+0x6e6>
 80080be:	2320      	movs	r3, #32
 80080c0:	e7d5      	b.n	800806e <UART_SetConfig+0x6e6>
 80080c2:	2340      	movs	r3, #64	; 0x40
 80080c4:	e7d3      	b.n	800806e <UART_SetConfig+0x6e6>
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	e7d1      	b.n	800806e <UART_SetConfig+0x6e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080cc:	b1cb      	cbz	r3, 8008102 <UART_SetConfig+0x77a>
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d020      	beq.n	8008114 <UART_SetConfig+0x78c>
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d020      	beq.n	8008118 <UART_SetConfig+0x790>
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d020      	beq.n	800811c <UART_SetConfig+0x794>
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d020      	beq.n	8008120 <UART_SetConfig+0x798>
 80080de:	2b05      	cmp	r3, #5
 80080e0:	d020      	beq.n	8008124 <UART_SetConfig+0x79c>
 80080e2:	2b06      	cmp	r3, #6
 80080e4:	d020      	beq.n	8008128 <UART_SetConfig+0x7a0>
 80080e6:	2b07      	cmp	r3, #7
 80080e8:	d020      	beq.n	800812c <UART_SetConfig+0x7a4>
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d020      	beq.n	8008130 <UART_SetConfig+0x7a8>
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d020      	beq.n	8008134 <UART_SetConfig+0x7ac>
 80080f2:	2b0a      	cmp	r3, #10
 80080f4:	d020      	beq.n	8008138 <UART_SetConfig+0x7b0>
 80080f6:	2b0b      	cmp	r3, #11
 80080f8:	d001      	beq.n	80080fe <UART_SetConfig+0x776>
 80080fa:	4b99      	ldr	r3, [pc, #612]	; (8008360 <UART_SetConfig+0x9d8>)
 80080fc:	e002      	b.n	8008104 <UART_SetConfig+0x77c>
 80080fe:	4b99      	ldr	r3, [pc, #612]	; (8008364 <UART_SetConfig+0x9dc>)
 8008100:	e000      	b.n	8008104 <UART_SetConfig+0x77c>
 8008102:	4b97      	ldr	r3, [pc, #604]	; (8008360 <UART_SetConfig+0x9d8>)
 8008104:	6862      	ldr	r2, [r4, #4]
 8008106:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800810a:	fbb3 f3f2 	udiv	r3, r3, r2
 800810e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008110:	2000      	movs	r0, #0
        break;
 8008112:	e7b6      	b.n	8008082 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008114:	4b94      	ldr	r3, [pc, #592]	; (8008368 <UART_SetConfig+0x9e0>)
 8008116:	e7f5      	b.n	8008104 <UART_SetConfig+0x77c>
 8008118:	4b94      	ldr	r3, [pc, #592]	; (800836c <UART_SetConfig+0x9e4>)
 800811a:	e7f3      	b.n	8008104 <UART_SetConfig+0x77c>
 800811c:	4b94      	ldr	r3, [pc, #592]	; (8008370 <UART_SetConfig+0x9e8>)
 800811e:	e7f1      	b.n	8008104 <UART_SetConfig+0x77c>
 8008120:	4b94      	ldr	r3, [pc, #592]	; (8008374 <UART_SetConfig+0x9ec>)
 8008122:	e7ef      	b.n	8008104 <UART_SetConfig+0x77c>
 8008124:	4b94      	ldr	r3, [pc, #592]	; (8008378 <UART_SetConfig+0x9f0>)
 8008126:	e7ed      	b.n	8008104 <UART_SetConfig+0x77c>
 8008128:	4b94      	ldr	r3, [pc, #592]	; (800837c <UART_SetConfig+0x9f4>)
 800812a:	e7eb      	b.n	8008104 <UART_SetConfig+0x77c>
 800812c:	4b94      	ldr	r3, [pc, #592]	; (8008380 <UART_SetConfig+0x9f8>)
 800812e:	e7e9      	b.n	8008104 <UART_SetConfig+0x77c>
 8008130:	4b94      	ldr	r3, [pc, #592]	; (8008384 <UART_SetConfig+0x9fc>)
 8008132:	e7e7      	b.n	8008104 <UART_SetConfig+0x77c>
 8008134:	4b94      	ldr	r3, [pc, #592]	; (8008388 <UART_SetConfig+0xa00>)
 8008136:	e7e5      	b.n	8008104 <UART_SetConfig+0x77c>
 8008138:	4b94      	ldr	r3, [pc, #592]	; (800838c <UART_SetConfig+0xa04>)
 800813a:	e7e3      	b.n	8008104 <UART_SetConfig+0x77c>
        pclk = HAL_RCC_GetSysClockFreq();
 800813c:	f7fe f914 	bl	8006368 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008142:	b1d3      	cbz	r3, 800817a <UART_SetConfig+0x7f2>
 8008144:	2b01      	cmp	r3, #1
 8008146:	d024      	beq.n	8008192 <UART_SetConfig+0x80a>
 8008148:	2b02      	cmp	r3, #2
 800814a:	d024      	beq.n	8008196 <UART_SetConfig+0x80e>
 800814c:	2b03      	cmp	r3, #3
 800814e:	d024      	beq.n	800819a <UART_SetConfig+0x812>
 8008150:	2b04      	cmp	r3, #4
 8008152:	d024      	beq.n	800819e <UART_SetConfig+0x816>
 8008154:	2b05      	cmp	r3, #5
 8008156:	d024      	beq.n	80081a2 <UART_SetConfig+0x81a>
 8008158:	2b06      	cmp	r3, #6
 800815a:	d024      	beq.n	80081a6 <UART_SetConfig+0x81e>
 800815c:	2b07      	cmp	r3, #7
 800815e:	d024      	beq.n	80081aa <UART_SetConfig+0x822>
 8008160:	2b08      	cmp	r3, #8
 8008162:	d024      	beq.n	80081ae <UART_SetConfig+0x826>
 8008164:	2b09      	cmp	r3, #9
 8008166:	d024      	beq.n	80081b2 <UART_SetConfig+0x82a>
 8008168:	2b0a      	cmp	r3, #10
 800816a:	d024      	beq.n	80081b6 <UART_SetConfig+0x82e>
 800816c:	2b0b      	cmp	r3, #11
 800816e:	d001      	beq.n	8008174 <UART_SetConfig+0x7ec>
 8008170:	2301      	movs	r3, #1
 8008172:	e003      	b.n	800817c <UART_SetConfig+0x7f4>
 8008174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008178:	e000      	b.n	800817c <UART_SetConfig+0x7f4>
 800817a:	2301      	movs	r3, #1
 800817c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008180:	6862      	ldr	r2, [r4, #4]
 8008182:	0853      	lsrs	r3, r2, #1
 8008184:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008188:	fbb3 f3f2 	udiv	r3, r3, r2
 800818c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800818e:	2000      	movs	r0, #0
        break;
 8008190:	e777      	b.n	8008082 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008192:	2302      	movs	r3, #2
 8008194:	e7f2      	b.n	800817c <UART_SetConfig+0x7f4>
 8008196:	2304      	movs	r3, #4
 8008198:	e7f0      	b.n	800817c <UART_SetConfig+0x7f4>
 800819a:	2306      	movs	r3, #6
 800819c:	e7ee      	b.n	800817c <UART_SetConfig+0x7f4>
 800819e:	2308      	movs	r3, #8
 80081a0:	e7ec      	b.n	800817c <UART_SetConfig+0x7f4>
 80081a2:	230a      	movs	r3, #10
 80081a4:	e7ea      	b.n	800817c <UART_SetConfig+0x7f4>
 80081a6:	230c      	movs	r3, #12
 80081a8:	e7e8      	b.n	800817c <UART_SetConfig+0x7f4>
 80081aa:	2310      	movs	r3, #16
 80081ac:	e7e6      	b.n	800817c <UART_SetConfig+0x7f4>
 80081ae:	2320      	movs	r3, #32
 80081b0:	e7e4      	b.n	800817c <UART_SetConfig+0x7f4>
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	e7e2      	b.n	800817c <UART_SetConfig+0x7f4>
 80081b6:	2380      	movs	r3, #128	; 0x80
 80081b8:	e7e0      	b.n	800817c <UART_SetConfig+0x7f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081bc:	b1db      	cbz	r3, 80081f6 <UART_SetConfig+0x86e>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d023      	beq.n	800820a <UART_SetConfig+0x882>
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d024      	beq.n	8008210 <UART_SetConfig+0x888>
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d025      	beq.n	8008216 <UART_SetConfig+0x88e>
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d026      	beq.n	800821c <UART_SetConfig+0x894>
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d027      	beq.n	8008222 <UART_SetConfig+0x89a>
 80081d2:	2b06      	cmp	r3, #6
 80081d4:	d028      	beq.n	8008228 <UART_SetConfig+0x8a0>
 80081d6:	2b07      	cmp	r3, #7
 80081d8:	d029      	beq.n	800822e <UART_SetConfig+0x8a6>
 80081da:	2b08      	cmp	r3, #8
 80081dc:	d02a      	beq.n	8008234 <UART_SetConfig+0x8ac>
 80081de:	2b09      	cmp	r3, #9
 80081e0:	d02b      	beq.n	800823a <UART_SetConfig+0x8b2>
 80081e2:	2b0a      	cmp	r3, #10
 80081e4:	d02c      	beq.n	8008240 <UART_SetConfig+0x8b8>
 80081e6:	2b0b      	cmp	r3, #11
 80081e8:	d002      	beq.n	80081f0 <UART_SetConfig+0x868>
 80081ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081ee:	e004      	b.n	80081fa <UART_SetConfig+0x872>
 80081f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f4:	e001      	b.n	80081fa <UART_SetConfig+0x872>
 80081f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008200:	fbb3 f3f2 	udiv	r3, r3, r2
 8008204:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008206:	2000      	movs	r0, #0
        break;
 8008208:	e73b      	b.n	8008082 <UART_SetConfig+0x6fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820e:	e7f4      	b.n	80081fa <UART_SetConfig+0x872>
 8008210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008214:	e7f1      	b.n	80081fa <UART_SetConfig+0x872>
 8008216:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800821a:	e7ee      	b.n	80081fa <UART_SetConfig+0x872>
 800821c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008220:	e7eb      	b.n	80081fa <UART_SetConfig+0x872>
 8008222:	f641 1398 	movw	r3, #6552	; 0x1998
 8008226:	e7e8      	b.n	80081fa <UART_SetConfig+0x872>
 8008228:	f241 5354 	movw	r3, #5460	; 0x1554
 800822c:	e7e5      	b.n	80081fa <UART_SetConfig+0x872>
 800822e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008232:	e7e2      	b.n	80081fa <UART_SetConfig+0x872>
 8008234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008238:	e7df      	b.n	80081fa <UART_SetConfig+0x872>
 800823a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823e:	e7dc      	b.n	80081fa <UART_SetConfig+0x872>
 8008240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008244:	e7d9      	b.n	80081fa <UART_SetConfig+0x872>
        ret = HAL_ERROR;
 8008246:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008248:	2300      	movs	r3, #0
 800824a:	e71a      	b.n	8008082 <UART_SetConfig+0x6fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 800824c:	f7fe f90c 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008252:	b1d3      	cbz	r3, 800828a <UART_SetConfig+0x902>
 8008254:	2b01      	cmp	r3, #1
 8008256:	d035      	beq.n	80082c4 <UART_SetConfig+0x93c>
 8008258:	2b02      	cmp	r3, #2
 800825a:	d035      	beq.n	80082c8 <UART_SetConfig+0x940>
 800825c:	2b03      	cmp	r3, #3
 800825e:	d035      	beq.n	80082cc <UART_SetConfig+0x944>
 8008260:	2b04      	cmp	r3, #4
 8008262:	d035      	beq.n	80082d0 <UART_SetConfig+0x948>
 8008264:	2b05      	cmp	r3, #5
 8008266:	d035      	beq.n	80082d4 <UART_SetConfig+0x94c>
 8008268:	2b06      	cmp	r3, #6
 800826a:	d035      	beq.n	80082d8 <UART_SetConfig+0x950>
 800826c:	2b07      	cmp	r3, #7
 800826e:	d035      	beq.n	80082dc <UART_SetConfig+0x954>
 8008270:	2b08      	cmp	r3, #8
 8008272:	d035      	beq.n	80082e0 <UART_SetConfig+0x958>
 8008274:	2b09      	cmp	r3, #9
 8008276:	d035      	beq.n	80082e4 <UART_SetConfig+0x95c>
 8008278:	2b0a      	cmp	r3, #10
 800827a:	d035      	beq.n	80082e8 <UART_SetConfig+0x960>
 800827c:	2b0b      	cmp	r3, #11
 800827e:	d001      	beq.n	8008284 <UART_SetConfig+0x8fc>
 8008280:	2201      	movs	r2, #1
 8008282:	e003      	b.n	800828c <UART_SetConfig+0x904>
 8008284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008288:	e000      	b.n	800828c <UART_SetConfig+0x904>
 800828a:	2201      	movs	r2, #1
 800828c:	fbb0 f2f2 	udiv	r2, r0, r2
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008296:	fbb2 f2f3 	udiv	r2, r2, r3
 800829a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800829c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800829e:	f1a2 0110 	sub.w	r1, r2, #16
 80082a2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80082a6:	4299      	cmp	r1, r3
 80082a8:	f200 810e 	bhi.w	80084c8 <UART_SetConfig+0xb40>
      huart->Instance->BRR = usartdiv;
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	60da      	str	r2, [r3, #12]
  huart->NbTxDataToProcess = 1;
 80082b0:	2201      	movs	r2, #1
 80082b2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082b6:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80082ba:	2200      	movs	r2, #0
 80082bc:	66e2      	str	r2, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80082be:	6722      	str	r2, [r4, #112]	; 0x70
}
 80082c0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c4:	2202      	movs	r2, #2
 80082c6:	e7e1      	b.n	800828c <UART_SetConfig+0x904>
 80082c8:	2204      	movs	r2, #4
 80082ca:	e7df      	b.n	800828c <UART_SetConfig+0x904>
 80082cc:	2206      	movs	r2, #6
 80082ce:	e7dd      	b.n	800828c <UART_SetConfig+0x904>
 80082d0:	2208      	movs	r2, #8
 80082d2:	e7db      	b.n	800828c <UART_SetConfig+0x904>
 80082d4:	220a      	movs	r2, #10
 80082d6:	e7d9      	b.n	800828c <UART_SetConfig+0x904>
 80082d8:	220c      	movs	r2, #12
 80082da:	e7d7      	b.n	800828c <UART_SetConfig+0x904>
 80082dc:	2210      	movs	r2, #16
 80082de:	e7d5      	b.n	800828c <UART_SetConfig+0x904>
 80082e0:	2220      	movs	r2, #32
 80082e2:	e7d3      	b.n	800828c <UART_SetConfig+0x904>
 80082e4:	2240      	movs	r2, #64	; 0x40
 80082e6:	e7d1      	b.n	800828c <UART_SetConfig+0x904>
 80082e8:	2280      	movs	r2, #128	; 0x80
 80082ea:	e7cf      	b.n	800828c <UART_SetConfig+0x904>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ee:	b1d3      	cbz	r3, 8008326 <UART_SetConfig+0x99e>
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d021      	beq.n	8008338 <UART_SetConfig+0x9b0>
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d021      	beq.n	800833c <UART_SetConfig+0x9b4>
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d021      	beq.n	8008340 <UART_SetConfig+0x9b8>
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d021      	beq.n	8008344 <UART_SetConfig+0x9bc>
 8008300:	2b05      	cmp	r3, #5
 8008302:	d021      	beq.n	8008348 <UART_SetConfig+0x9c0>
 8008304:	2b06      	cmp	r3, #6
 8008306:	d021      	beq.n	800834c <UART_SetConfig+0x9c4>
 8008308:	2b07      	cmp	r3, #7
 800830a:	d021      	beq.n	8008350 <UART_SetConfig+0x9c8>
 800830c:	2b08      	cmp	r3, #8
 800830e:	d021      	beq.n	8008354 <UART_SetConfig+0x9cc>
 8008310:	2b09      	cmp	r3, #9
 8008312:	d021      	beq.n	8008358 <UART_SetConfig+0x9d0>
 8008314:	2b0a      	cmp	r3, #10
 8008316:	d021      	beq.n	800835c <UART_SetConfig+0x9d4>
 8008318:	2b0b      	cmp	r3, #11
 800831a:	d001      	beq.n	8008320 <UART_SetConfig+0x998>
 800831c:	4a12      	ldr	r2, [pc, #72]	; (8008368 <UART_SetConfig+0x9e0>)
 800831e:	e003      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008320:	f24f 4224 	movw	r2, #62500	; 0xf424
 8008324:	e000      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <UART_SetConfig+0x9e0>)
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800832e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008332:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8008334:	2000      	movs	r0, #0
        break;
 8008336:	e7b2      	b.n	800829e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008338:	4a0c      	ldr	r2, [pc, #48]	; (800836c <UART_SetConfig+0x9e4>)
 800833a:	e7f5      	b.n	8008328 <UART_SetConfig+0x9a0>
 800833c:	4a0d      	ldr	r2, [pc, #52]	; (8008374 <UART_SetConfig+0x9ec>)
 800833e:	e7f3      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <UART_SetConfig+0x9f4>)
 8008342:	e7f1      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008344:	4a0e      	ldr	r2, [pc, #56]	; (8008380 <UART_SetConfig+0x9f8>)
 8008346:	e7ef      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008348:	4a11      	ldr	r2, [pc, #68]	; (8008390 <UART_SetConfig+0xa08>)
 800834a:	e7ed      	b.n	8008328 <UART_SetConfig+0x9a0>
 800834c:	4a11      	ldr	r2, [pc, #68]	; (8008394 <UART_SetConfig+0xa0c>)
 800834e:	e7eb      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008350:	4a0c      	ldr	r2, [pc, #48]	; (8008384 <UART_SetConfig+0x9fc>)
 8008352:	e7e9      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008354:	4a0c      	ldr	r2, [pc, #48]	; (8008388 <UART_SetConfig+0xa00>)
 8008356:	e7e7      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008358:	4a0c      	ldr	r2, [pc, #48]	; (800838c <UART_SetConfig+0xa04>)
 800835a:	e7e5      	b.n	8008328 <UART_SetConfig+0x9a0>
 800835c:	4a01      	ldr	r2, [pc, #4]	; (8008364 <UART_SetConfig+0x9dc>)
 800835e:	e7e3      	b.n	8008328 <UART_SetConfig+0x9a0>
 8008360:	01e84800 	.word	0x01e84800
 8008364:	0001e848 	.word	0x0001e848
 8008368:	00f42400 	.word	0x00f42400
 800836c:	007a1200 	.word	0x007a1200
 8008370:	00516154 	.word	0x00516154
 8008374:	003d0900 	.word	0x003d0900
 8008378:	0030d400 	.word	0x0030d400
 800837c:	0028b0aa 	.word	0x0028b0aa
 8008380:	001e8480 	.word	0x001e8480
 8008384:	000f4240 	.word	0x000f4240
 8008388:	0007a120 	.word	0x0007a120
 800838c:	0003d090 	.word	0x0003d090
 8008390:	00186a00 	.word	0x00186a00
 8008394:	00145855 	.word	0x00145855
 8008398:	00155500 	.word	0x00155500
 800839c:	000ccc00 	.word	0x000ccc00
 80083a0:	000aaa00 	.word	0x000aaa00
        pclk = HAL_RCC_GetSysClockFreq();
 80083a4:	f7fd ffe0 	bl	8006368 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	b1d3      	cbz	r3, 80083e2 <UART_SetConfig+0xa5a>
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d023      	beq.n	80083f8 <UART_SetConfig+0xa70>
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d023      	beq.n	80083fc <UART_SetConfig+0xa74>
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d023      	beq.n	8008400 <UART_SetConfig+0xa78>
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d023      	beq.n	8008404 <UART_SetConfig+0xa7c>
 80083bc:	2b05      	cmp	r3, #5
 80083be:	d023      	beq.n	8008408 <UART_SetConfig+0xa80>
 80083c0:	2b06      	cmp	r3, #6
 80083c2:	d023      	beq.n	800840c <UART_SetConfig+0xa84>
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	d023      	beq.n	8008410 <UART_SetConfig+0xa88>
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d023      	beq.n	8008414 <UART_SetConfig+0xa8c>
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d023      	beq.n	8008418 <UART_SetConfig+0xa90>
 80083d0:	2b0a      	cmp	r3, #10
 80083d2:	d023      	beq.n	800841c <UART_SetConfig+0xa94>
 80083d4:	2b0b      	cmp	r3, #11
 80083d6:	d001      	beq.n	80083dc <UART_SetConfig+0xa54>
 80083d8:	2201      	movs	r2, #1
 80083da:	e003      	b.n	80083e4 <UART_SetConfig+0xa5c>
 80083dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083e0:	e000      	b.n	80083e4 <UART_SetConfig+0xa5c>
 80083e2:	2201      	movs	r2, #1
 80083e4:	fbb0 f2f2 	udiv	r2, r0, r2
 80083e8:	6863      	ldr	r3, [r4, #4]
 80083ea:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 80083ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80083f2:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f4:	2000      	movs	r0, #0
        break;
 80083f6:	e752      	b.n	800829e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f8:	2202      	movs	r2, #2
 80083fa:	e7f3      	b.n	80083e4 <UART_SetConfig+0xa5c>
 80083fc:	2204      	movs	r2, #4
 80083fe:	e7f1      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008400:	2206      	movs	r2, #6
 8008402:	e7ef      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008404:	2208      	movs	r2, #8
 8008406:	e7ed      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008408:	220a      	movs	r2, #10
 800840a:	e7eb      	b.n	80083e4 <UART_SetConfig+0xa5c>
 800840c:	220c      	movs	r2, #12
 800840e:	e7e9      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008410:	2210      	movs	r2, #16
 8008412:	e7e7      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008414:	2220      	movs	r2, #32
 8008416:	e7e5      	b.n	80083e4 <UART_SetConfig+0xa5c>
 8008418:	2240      	movs	r2, #64	; 0x40
 800841a:	e7e3      	b.n	80083e4 <UART_SetConfig+0xa5c>
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	e7e1      	b.n	80083e4 <UART_SetConfig+0xa5c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008422:	b1d3      	cbz	r3, 800845a <UART_SetConfig+0xad2>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d022      	beq.n	800846e <UART_SetConfig+0xae6>
 8008428:	2b02      	cmp	r3, #2
 800842a:	d023      	beq.n	8008474 <UART_SetConfig+0xaec>
 800842c:	2b03      	cmp	r3, #3
 800842e:	d024      	beq.n	800847a <UART_SetConfig+0xaf2>
 8008430:	2b04      	cmp	r3, #4
 8008432:	d025      	beq.n	8008480 <UART_SetConfig+0xaf8>
 8008434:	2b05      	cmp	r3, #5
 8008436:	d026      	beq.n	8008486 <UART_SetConfig+0xafe>
 8008438:	2b06      	cmp	r3, #6
 800843a:	d027      	beq.n	800848c <UART_SetConfig+0xb04>
 800843c:	2b07      	cmp	r3, #7
 800843e:	d028      	beq.n	8008492 <UART_SetConfig+0xb0a>
 8008440:	2b08      	cmp	r3, #8
 8008442:	d029      	beq.n	8008498 <UART_SetConfig+0xb10>
 8008444:	2b09      	cmp	r3, #9
 8008446:	d02a      	beq.n	800849e <UART_SetConfig+0xb16>
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d02b      	beq.n	80084a4 <UART_SetConfig+0xb1c>
 800844c:	2b0b      	cmp	r3, #11
 800844e:	d002      	beq.n	8008456 <UART_SetConfig+0xace>
 8008450:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008454:	e003      	b.n	800845e <UART_SetConfig+0xad6>
 8008456:	2280      	movs	r2, #128	; 0x80
 8008458:	e001      	b.n	800845e <UART_SetConfig+0xad6>
 800845a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8008464:	fbb2 f2f3 	udiv	r2, r2, r3
 8008468:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800846a:	2000      	movs	r0, #0
        break;
 800846c:	e717      	b.n	800829e <UART_SetConfig+0x916>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800846e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008472:	e7f4      	b.n	800845e <UART_SetConfig+0xad6>
 8008474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008478:	e7f1      	b.n	800845e <UART_SetConfig+0xad6>
 800847a:	f241 5255 	movw	r2, #5461	; 0x1555
 800847e:	e7ee      	b.n	800845e <UART_SetConfig+0xad6>
 8008480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008484:	e7eb      	b.n	800845e <UART_SetConfig+0xad6>
 8008486:	f640 42cc 	movw	r2, #3276	; 0xccc
 800848a:	e7e8      	b.n	800845e <UART_SetConfig+0xad6>
 800848c:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8008490:	e7e5      	b.n	800845e <UART_SetConfig+0xad6>
 8008492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008496:	e7e2      	b.n	800845e <UART_SetConfig+0xad6>
 8008498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800849c:	e7df      	b.n	800845e <UART_SetConfig+0xad6>
 800849e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a2:	e7dc      	b.n	800845e <UART_SetConfig+0xad6>
 80084a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084a8:	e7d9      	b.n	800845e <UART_SetConfig+0xad6>
        ret = HAL_ERROR;
 80084aa:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80084ac:	2200      	movs	r2, #0
 80084ae:	e6f6      	b.n	800829e <UART_SetConfig+0x916>
        ret = HAL_ERROR;
 80084b0:	2001      	movs	r0, #1
 80084b2:	e6fd      	b.n	80082b0 <UART_SetConfig+0x928>
 80084b4:	2000      	movs	r0, #0
 80084b6:	e6fb      	b.n	80082b0 <UART_SetConfig+0x928>
        ret = HAL_ERROR;
 80084b8:	2001      	movs	r0, #1
 80084ba:	e6f9      	b.n	80082b0 <UART_SetConfig+0x928>
 80084bc:	2001      	movs	r0, #1
 80084be:	e6f7      	b.n	80082b0 <UART_SetConfig+0x928>
          ret = HAL_ERROR;
 80084c0:	2001      	movs	r0, #1
 80084c2:	e6f5      	b.n	80082b0 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80084c4:	2001      	movs	r0, #1
 80084c6:	e6f3      	b.n	80082b0 <UART_SetConfig+0x928>
      ret = HAL_ERROR;
 80084c8:	2001      	movs	r0, #1
 80084ca:	e6f1      	b.n	80082b0 <UART_SetConfig+0x928>

080084cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80084ce:	f013 0f01 	tst.w	r3, #1
 80084d2:	d006      	beq.n	80084e2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d4:	6802      	ldr	r2, [r0, #0]
 80084d6:	6853      	ldr	r3, [r2, #4]
 80084d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80084de:	430b      	orrs	r3, r1
 80084e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80084e4:	f013 0f02 	tst.w	r3, #2
 80084e8:	d006      	beq.n	80084f8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084ea:	6802      	ldr	r2, [r0, #0]
 80084ec:	6853      	ldr	r3, [r2, #4]
 80084ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80084f4:	430b      	orrs	r3, r1
 80084f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80084fa:	f013 0f04 	tst.w	r3, #4
 80084fe:	d006      	beq.n	800850e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	6853      	ldr	r3, [r2, #4]
 8008504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008508:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800850a:	430b      	orrs	r3, r1
 800850c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008510:	f013 0f08 	tst.w	r3, #8
 8008514:	d006      	beq.n	8008524 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008516:	6802      	ldr	r2, [r0, #0]
 8008518:	6853      	ldr	r3, [r2, #4]
 800851a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800851e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008520:	430b      	orrs	r3, r1
 8008522:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008524:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008526:	f013 0f10 	tst.w	r3, #16
 800852a:	d006      	beq.n	800853a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800852c:	6802      	ldr	r2, [r0, #0]
 800852e:	6893      	ldr	r3, [r2, #8]
 8008530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008534:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008536:	430b      	orrs	r3, r1
 8008538:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800853c:	f013 0f20 	tst.w	r3, #32
 8008540:	d006      	beq.n	8008550 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008542:	6802      	ldr	r2, [r0, #0]
 8008544:	6893      	ldr	r3, [r2, #8]
 8008546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800854a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800854c:	430b      	orrs	r3, r1
 800854e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008550:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008552:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008556:	d00a      	beq.n	800856e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008558:	6802      	ldr	r2, [r0, #0]
 800855a:	6853      	ldr	r3, [r2, #4]
 800855c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008560:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008562:	430b      	orrs	r3, r1
 8008564:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008566:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800856c:	d00b      	beq.n	8008586 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800856e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008570:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008574:	d006      	beq.n	8008584 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008576:	6802      	ldr	r2, [r0, #0]
 8008578:	6853      	ldr	r3, [r2, #4]
 800857a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800857e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008580:	430b      	orrs	r3, r1
 8008582:	6053      	str	r3, [r2, #4]
}
 8008584:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008586:	6802      	ldr	r2, [r0, #0]
 8008588:	6853      	ldr	r3, [r2, #4]
 800858a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800858e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008590:	430b      	orrs	r3, r1
 8008592:	6053      	str	r3, [r2, #4]
 8008594:	e7eb      	b.n	800856e <UART_AdvFeatureConfig+0xa2>

08008596 <UART_WaitOnFlagUntilTimeout>:
{
 8008596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	4604      	mov	r4, r0
 800859c:	460f      	mov	r7, r1
 800859e:	4616      	mov	r6, r2
 80085a0:	4698      	mov	r8, r3
 80085a2:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	ea37 0303 	bics.w	r3, r7, r3
 80085ac:	bf0c      	ite	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	2300      	movne	r3, #0
 80085b2:	42b3      	cmp	r3, r6
 80085b4:	d13f      	bne.n	8008636 <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 80085b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80085ba:	d0f3      	beq.n	80085a4 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085bc:	f7fa fea8 	bl	8003310 <HAL_GetTick>
 80085c0:	eba0 0008 	sub.w	r0, r0, r8
 80085c4:	42a8      	cmp	r0, r5
 80085c6:	d822      	bhi.n	800860e <UART_WaitOnFlagUntilTimeout+0x78>
 80085c8:	b30d      	cbz	r5, 800860e <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	f012 0f04 	tst.w	r2, #4
 80085d2:	d0e7      	beq.n	80085a4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80085da:	d0e3      	beq.n	80085a4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e0:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	6813      	ldr	r3, [r2, #0]
 80085e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085ea:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	6893      	ldr	r3, [r2, #8]
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80085f6:	2320      	movs	r3, #32
 80085f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80085fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008600:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8008604:	2300      	movs	r3, #0
 8008606:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800860a:	2003      	movs	r0, #3
 800860c:	e014      	b.n	8008638 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	6813      	ldr	r3, [r2, #0]
 8008612:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008616:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	6893      	ldr	r3, [r2, #8]
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008622:	2320      	movs	r3, #32
 8008624:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008628:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800862c:	2300      	movs	r3, #0
 800862e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8008632:	2003      	movs	r0, #3
 8008634:	e000      	b.n	8008638 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 8008636:	2000      	movs	r0, #0
}
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800863c <UART_CheckIdleState>:
{
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	b083      	sub	sp, #12
 8008640:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008648:	f7fa fe62 	bl	8003310 <HAL_GetTick>
 800864c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f013 0f08 	tst.w	r3, #8
 8008656:	d10e      	bne.n	8008676 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f013 0f04 	tst.w	r3, #4
 8008660:	d117      	bne.n	8008692 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8008662:	2320      	movs	r3, #32
 8008664:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008668:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800866c:	2000      	movs	r0, #0
 800866e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008672:	b003      	add	sp, #12
 8008674:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	2200      	movs	r2, #0
 8008680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008684:	4620      	mov	r0, r4
 8008686:	f7ff ff86 	bl	8008596 <UART_WaitOnFlagUntilTimeout>
 800868a:	2800      	cmp	r0, #0
 800868c:	d0e4      	beq.n	8008658 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800868e:	2003      	movs	r0, #3
 8008690:	e7ef      	b.n	8008672 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008692:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462b      	mov	r3, r5
 800869a:	2200      	movs	r2, #0
 800869c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086a0:	4620      	mov	r0, r4
 80086a2:	f7ff ff78 	bl	8008596 <UART_WaitOnFlagUntilTimeout>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0db      	beq.n	8008662 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80086aa:	2003      	movs	r0, #3
 80086ac:	e7e1      	b.n	8008672 <UART_CheckIdleState+0x36>

080086ae <HAL_UART_Init>:
  if (huart == NULL)
 80086ae:	b378      	cbz	r0, 8008710 <HAL_UART_Init+0x62>
{
 80086b0:	b510      	push	{r4, lr}
 80086b2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80086b4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80086b8:	b30b      	cbz	r3, 80086fe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80086ba:	2324      	movs	r3, #36	; 0x24
 80086bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	f023 0301 	bic.w	r3, r3, #1
 80086c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7ff f95c 	bl	8007988 <UART_SetConfig>
 80086d0:	2801      	cmp	r0, #1
 80086d2:	d013      	beq.n	80086fc <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086d6:	b9bb      	cbnz	r3, 8008708 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	6853      	ldr	r3, [r2, #4]
 80086dc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80086e0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	6893      	ldr	r3, [r2, #8]
 80086e6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80086ea:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80086ec:	6822      	ldr	r2, [r4, #0]
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	f043 0301 	orr.w	r3, r3, #1
 80086f4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff ffa0 	bl	800863c <UART_CheckIdleState>
}
 80086fc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80086fe:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8008702:	f7fa fd79 	bl	80031f8 <HAL_UART_MspInit>
 8008706:	e7d8      	b.n	80086ba <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008708:	4620      	mov	r0, r4
 800870a:	f7ff fedf 	bl	80084cc <UART_AdvFeatureConfig>
 800870e:	e7e3      	b.n	80086d8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008710:	2001      	movs	r0, #1
}
 8008712:	4770      	bx	lr

08008714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008714:	b410      	push	{r4}
 8008716:	b085      	sub	sp, #20
 8008718:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800871a:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <UARTEx_SetNbDataToProcess+0x70>)
 800871c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008720:	ac04      	add	r4, sp, #16
 8008722:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008726:	466c      	mov	r4, sp
 8008728:	3308      	adds	r3, #8
 800872a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800872e:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008732:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008734:	b1fb      	cbz	r3, 8008776 <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008736:	6811      	ldr	r1, [r2, #0]
 8008738:	688b      	ldr	r3, [r1, #8]
 800873a:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800873e:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008740:	a904      	add	r1, sp, #16
 8008742:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8008746:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 800874a:	00c9      	lsls	r1, r1, #3
 800874c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8008750:	fb91 f1f0 	sdiv	r1, r1, r0
 8008754:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008758:	a904      	add	r1, sp, #16
 800875a:	440b      	add	r3, r1
 800875c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8008760:	00c9      	lsls	r1, r1, #3
 8008762:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008766:	fb91 f3f3 	sdiv	r3, r1, r3
 800876a:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 800876e:	b005      	add	sp, #20
 8008770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008774:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 8008776:	2301      	movs	r3, #1
 8008778:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800877c:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 8008780:	e7f5      	b.n	800876e <UARTEx_SetNbDataToProcess+0x5a>
 8008782:	bf00      	nop
 8008784:	0800e3d4 	.word	0x0800e3d4

08008788 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008788:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d018      	beq.n	80087c2 <HAL_UARTEx_DisableFifoMode+0x3a>
 8008790:	2301      	movs	r3, #1
 8008792:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	2324      	movs	r3, #36	; 0x24
 8008798:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	f021 0101 	bic.w	r1, r1, #1
 80087a6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b0:	6801      	ldr	r1, [r0, #0]
 80087b2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80087ba:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80087be:	4618      	mov	r0, r3
 80087c0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80087c2:	2002      	movs	r0, #2
}
 80087c4:	4770      	bx	lr

080087c6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80087c6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80087c8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d01d      	beq.n	800880c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80087d0:	4604      	mov	r4, r0
 80087d2:	2301      	movs	r3, #1
 80087d4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80087d8:	2324      	movs	r3, #36	; 0x24
 80087da:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087ea:	6802      	ldr	r2, [r0, #0]
 80087ec:	6893      	ldr	r3, [r2, #8]
 80087ee:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80087f2:	4319      	orrs	r1, r3
 80087f4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80087f6:	f7ff ff8d 	bl	8008714 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	2320      	movs	r3, #32
 8008800:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008804:	2000      	movs	r0, #0
 8008806:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800880a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800880c:	2002      	movs	r0, #2
 800880e:	e7fc      	b.n	800880a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008810 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008810:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008812:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d01d      	beq.n	8008856 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800881a:	4604      	mov	r4, r0
 800881c:	2301      	movs	r3, #1
 800881e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8008822:	2324      	movs	r3, #36	; 0x24
 8008824:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008828:	6803      	ldr	r3, [r0, #0]
 800882a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f022 0201 	bic.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008834:	6802      	ldr	r2, [r0, #0]
 8008836:	6893      	ldr	r3, [r2, #8]
 8008838:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800883c:	4319      	orrs	r1, r3
 800883e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008840:	f7ff ff68 	bl	8008714 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008848:	2320      	movs	r3, #32
 800884a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800884e:	2000      	movs	r0, #0
 8008850:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8008854:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008856:	2002      	movs	r0, #2
 8008858:	e7fc      	b.n	8008854 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800885c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800885c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008860:	b99b      	cbnz	r3, 800888a <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008862:	f3ef 8310 	mrs	r3, PRIMASK
 8008866:	b99b      	cbnz	r3, 8008890 <osKernelInitialize+0x34>
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <osKernelInitialize+0x40>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d005      	beq.n	800887c <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008870:	b98b      	cbnz	r3, 8008896 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <osKernelInitialize+0x40>)
 8008874:	2201      	movs	r2, #1
 8008876:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008878:	2000      	movs	r0, #0
 800887a:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800887c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8008880:	2a00      	cmp	r2, #0
 8008882:	d0f5      	beq.n	8008870 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8008884:	f06f 0005 	mvn.w	r0, #5
 8008888:	4770      	bx	lr
 800888a:	f06f 0005 	mvn.w	r0, #5
 800888e:	4770      	bx	lr
 8008890:	f06f 0005 	mvn.w	r0, #5
 8008894:	4770      	bx	lr
    } else {
      stat = osError;
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800889a:	4770      	bx	lr
 800889c:	20000c9c 	.word	0x20000c9c

080088a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088a0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80088a6:	b9b3      	cbnz	r3, 80088d6 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a8:	f3ef 8310 	mrs	r3, PRIMASK
 80088ac:	b9b3      	cbnz	r3, 80088dc <osKernelStart+0x3c>
 80088ae:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <osKernelStart+0x48>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d008      	beq.n	80088c8 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d113      	bne.n	80088e2 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <osKernelStart+0x48>)
 80088bc:	2202      	movs	r2, #2
 80088be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80088c0:	f001 ff78 	bl	800a7b4 <vTaskStartScheduler>
      stat = osOK;
 80088c4:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80088c6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088c8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	d0f2      	beq.n	80088b6 <osKernelStart+0x16>
    stat = osErrorISR;
 80088d0:	f06f 0005 	mvn.w	r0, #5
 80088d4:	e7f7      	b.n	80088c6 <osKernelStart+0x26>
 80088d6:	f06f 0005 	mvn.w	r0, #5
 80088da:	e7f4      	b.n	80088c6 <osKernelStart+0x26>
 80088dc:	f06f 0005 	mvn.w	r0, #5
 80088e0:	e7f1      	b.n	80088c6 <osKernelStart+0x26>
      stat = osError;
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80088e6:	e7ee      	b.n	80088c6 <osKernelStart+0x26>
 80088e8:	20000c9c 	.word	0x20000c9c

080088ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ee:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088f0:	2400      	movs	r4, #0
 80088f2:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80088f8:	bb4c      	cbnz	r4, 800894e <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088fa:	f3ef 8310 	mrs	r3, PRIMASK
 80088fe:	bb33      	cbnz	r3, 800894e <osThreadNew+0x62>
 8008900:	4b33      	ldr	r3, [pc, #204]	; (80089d0 <osThreadNew+0xe4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d025      	beq.n	8008954 <osThreadNew+0x68>
 8008908:	b308      	cbz	r0, 800894e <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800890a:	2300      	movs	r3, #0
 800890c:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008910:	b392      	cbz	r2, 8008978 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8008912:	6816      	ldr	r6, [r2, #0]
 8008914:	b31e      	cbz	r6, 800895e <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008916:	6994      	ldr	r4, [r2, #24]
 8008918:	b904      	cbnz	r4, 800891c <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800891a:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800891c:	1e63      	subs	r3, r4, #1
 800891e:	2b37      	cmp	r3, #55	; 0x37
 8008920:	d852      	bhi.n	80089c8 <osThreadNew+0xdc>
 8008922:	6853      	ldr	r3, [r2, #4]
 8008924:	f013 0f01 	tst.w	r3, #1
 8008928:	d150      	bne.n	80089cc <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800892a:	6955      	ldr	r5, [r2, #20]
 800892c:	b1d5      	cbz	r5, 8008964 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800892e:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008932:	6893      	ldr	r3, [r2, #8]
 8008934:	b12b      	cbz	r3, 8008942 <osThreadNew+0x56>
 8008936:	68d7      	ldr	r7, [r2, #12]
 8008938:	2f5b      	cmp	r7, #91	; 0x5b
 800893a:	d902      	bls.n	8008942 <osThreadNew+0x56>
 800893c:	6917      	ldr	r7, [r2, #16]
 800893e:	b107      	cbz	r7, 8008942 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008940:	bb0d      	cbnz	r5, 8008986 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008942:	b193      	cbz	r3, 800896a <osThreadNew+0x7e>
    mem   = -1;
 8008944:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8008948:	2d01      	cmp	r5, #1
 800894a:	d023      	beq.n	8008994 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800894c:	b375      	cbz	r5, 80089ac <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800894e:	9804      	ldr	r0, [sp, #16]
}
 8008950:	b007      	add	sp, #28
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008954:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f8      	bne.n	800894e <osThreadNew+0x62>
 800895c:	e7d4      	b.n	8008908 <osThreadNew+0x1c>
    name  = &empty;
 800895e:	f10d 0617 	add.w	r6, sp, #23
 8008962:	e7d8      	b.n	8008916 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8008964:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8008968:	e7e3      	b.n	8008932 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800896a:	68d3      	ldr	r3, [r2, #12]
 800896c:	b96b      	cbnz	r3, 800898a <osThreadNew+0x9e>
 800896e:	6913      	ldr	r3, [r2, #16]
 8008970:	b173      	cbz	r3, 8008990 <osThreadNew+0xa4>
    mem   = -1;
 8008972:	f04f 35ff 	mov.w	r5, #4294967295
 8008976:	e7e7      	b.n	8008948 <osThreadNew+0x5c>
      mem = 0;
 8008978:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800897a:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 800897c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8008980:	f10d 0617 	add.w	r6, sp, #23
 8008984:	e7e0      	b.n	8008948 <osThreadNew+0x5c>
        mem = 1;
 8008986:	2501      	movs	r5, #1
 8008988:	e7de      	b.n	8008948 <osThreadNew+0x5c>
    mem   = -1;
 800898a:	f04f 35ff 	mov.w	r5, #4294967295
 800898e:	e7db      	b.n	8008948 <osThreadNew+0x5c>
          mem = 0;
 8008990:	2500      	movs	r5, #0
 8008992:	e7d9      	b.n	8008948 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008994:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008996:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008998:	9202      	str	r2, [sp, #8]
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	9400      	str	r4, [sp, #0]
 800899e:	460b      	mov	r3, r1
 80089a0:	4662      	mov	r2, ip
 80089a2:	4631      	mov	r1, r6
 80089a4:	f001 fe9a 	bl	800a6dc <xTaskCreateStatic>
 80089a8:	9004      	str	r0, [sp, #16]
 80089aa:	e7d0      	b.n	800894e <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089ac:	aa04      	add	r2, sp, #16
 80089ae:	9201      	str	r2, [sp, #4]
 80089b0:	9400      	str	r4, [sp, #0]
 80089b2:	460b      	mov	r3, r1
 80089b4:	fa1f f28c 	uxth.w	r2, ip
 80089b8:	4631      	mov	r1, r6
 80089ba:	f001 fec8 	bl	800a74e <xTaskCreate>
 80089be:	2801      	cmp	r0, #1
 80089c0:	d0c5      	beq.n	800894e <osThreadNew+0x62>
          hTask = NULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	e7c2      	b.n	800894e <osThreadNew+0x62>
        return (NULL);
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7c1      	b.n	8008950 <osThreadNew+0x64>
 80089cc:	2000      	movs	r0, #0
 80089ce:	e7bf      	b.n	8008950 <osThreadNew+0x64>
 80089d0:	20000c9c 	.word	0x20000c9c

080089d4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80089d4:	b530      	push	{r4, r5, lr}
 80089d6:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80089d8:	b370      	cbz	r0, 8008a38 <osThreadFlagsSet+0x64>
 80089da:	4605      	mov	r5, r0
 80089dc:	2900      	cmp	r1, #0
 80089de:	db2b      	blt.n	8008a38 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80089e0:	f04f 33ff 	mov.w	r3, #4294967295
 80089e4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80089ea:	b94b      	cbnz	r3, 8008a00 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ec:	f3ef 8310 	mrs	r3, PRIMASK
 80089f0:	b933      	cbnz	r3, 8008a00 <osThreadFlagsSet+0x2c>
 80089f2:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <osThreadFlagsSet+0x88>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d124      	bne.n	8008a44 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089fa:	f3ef 8311 	mrs	r3, BASEPRI
 80089fe:	b30b      	cbz	r3, 8008a44 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 8008a00:	2400      	movs	r4, #0
 8008a02:	ab04      	add	r3, sp, #16
 8008a04:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f002 fba4 	bl	800b15c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008a14:	9400      	str	r4, [sp, #0]
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f002 fb9d 	bl	800b15c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	b15b      	cbz	r3, 8008a3e <osThreadFlagsSet+0x6a>
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <osThreadFlagsSet+0x8c>)
 8008a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	e002      	b.n	8008a3e <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8008a38:	f06f 0303 	mvn.w	r3, #3
 8008a3c:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8008a3e:	9803      	ldr	r0, [sp, #12]
 8008a40:	b005      	add	sp, #20
 8008a42:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008a44:	2300      	movs	r3, #0
 8008a46:	2201      	movs	r2, #1
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f002 fb15 	bl	800b078 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	2200      	movs	r2, #0
 8008a52:	4611      	mov	r1, r2
 8008a54:	4628      	mov	r0, r5
 8008a56:	f002 fb0f 	bl	800b078 <xTaskGenericNotify>
 8008a5a:	e7f0      	b.n	8008a3e <osThreadFlagsSet+0x6a>
 8008a5c:	20000c9c 	.word	0x20000c9c
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a68:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8008a6c:	bb5b      	cbnz	r3, 8008ac6 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a72:	bb6b      	cbnz	r3, 8008ad0 <osThreadFlagsClear+0x6c>
 8008a74:	4b19      	ldr	r3, [pc, #100]	; (8008adc <osThreadFlagsClear+0x78>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d00f      	beq.n	8008a9c <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	db2a      	blt.n	8008ad6 <osThreadFlagsClear+0x72>
 8008a80:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8008a82:	f002 f9a5 	bl	800add0 <xTaskGetCurrentTaskHandle>
 8008a86:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8008a88:	ab01      	add	r3, sp, #4
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	f002 faf3 	bl	800b078 <xTaskGenericNotify>
 8008a92:	2801      	cmp	r0, #1
 8008a94:	d009      	beq.n	8008aaa <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 8008a96:	f04f 35ff 	mov.w	r5, #4294967295
 8008a9a:	e016      	b.n	8008aca <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a9c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0eb      	beq.n	8008a7c <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 8008aa4:	f06f 0505 	mvn.w	r5, #5
 8008aa8:	e00f      	b.n	8008aca <osThreadFlagsClear+0x66>
      rflags = cflags;
 8008aaa:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 8008aac:	ea25 0104 	bic.w	r1, r5, r4
 8008ab0:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f002 fade 	bl	800b078 <xTaskGenericNotify>
 8008abc:	2801      	cmp	r0, #1
 8008abe:	d004      	beq.n	8008aca <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 8008ac0:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8008ac4:	e001      	b.n	8008aca <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 8008ac6:	f06f 0505 	mvn.w	r5, #5
}
 8008aca:	4628      	mov	r0, r5
 8008acc:	b002      	add	sp, #8
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8008ad0:	f06f 0505 	mvn.w	r5, #5
 8008ad4:	e7f9      	b.n	8008aca <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 8008ad6:	f06f 0503 	mvn.w	r5, #3
 8008ada:	e7f6      	b.n	8008aca <osThreadFlagsClear+0x66>
 8008adc:	20000c9c 	.word	0x20000c9c

08008ae0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae6:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d14d      	bne.n	8008b8a <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aee:	f3ef 8710 	mrs	r7, PRIMASK
 8008af2:	463d      	mov	r5, r7
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	d14e      	bne.n	8008b96 <osThreadFlagsWait+0xb6>
 8008af8:	4b2b      	ldr	r3, [pc, #172]	; (8008ba8 <osThreadFlagsWait+0xc8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d00d      	beq.n	8008b1c <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008b00:	2800      	cmp	r0, #0
 8008b02:	db4b      	blt.n	8008b9c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008b04:	f011 0f02 	tst.w	r1, #2
 8008b08:	d00f      	beq.n	8008b2a <osThreadFlagsWait+0x4a>
      clear = 0U;
 8008b0a:	46b8      	mov	r8, r7
 8008b0c:	4617      	mov	r7, r2
 8008b0e:	468a      	mov	sl, r1
 8008b10:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8008b12:	f001 fea1 	bl	800a858 <xTaskGetTickCount>
 8008b16:	4683      	mov	fp, r0
    tout   = timeout;
 8008b18:	463e      	mov	r6, r7
 8008b1a:	e028      	b.n	8008b6e <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b1c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0ed      	beq.n	8008b00 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008b24:	f06f 0505 	mvn.w	r5, #5
 8008b28:	e031      	b.n	8008b8e <osThreadFlagsWait+0xae>
      clear = flags;
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	e7ee      	b.n	8008b0c <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8008b2e:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008b36:	f01a 0f01 	tst.w	sl, #1
 8008b3a:	d00b      	beq.n	8008b54 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8008b3c:	ea39 0305 	bics.w	r3, r9, r5
 8008b40:	d025      	beq.n	8008b8e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8008b42:	b377      	cbz	r7, 8008ba2 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008b44:	f001 fe88 	bl	800a858 <xTaskGetTickCount>
 8008b48:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 8008b4c:	4286      	cmp	r6, r0
 8008b4e:	d309      	bcc.n	8008b64 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8008b50:	1a36      	subs	r6, r6, r0
 8008b52:	e00b      	b.n	8008b6c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8008b54:	ea19 0f05 	tst.w	r9, r5
 8008b58:	d119      	bne.n	8008b8e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d1f2      	bne.n	8008b44 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 8008b5e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8008b62:	e014      	b.n	8008b8e <osThreadFlagsWait+0xae>
          tout  = 0;
 8008b64:	2600      	movs	r6, #0
 8008b66:	e001      	b.n	8008b6c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8008b68:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8008b6c:	b17c      	cbz	r4, 8008b8e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008b6e:	4633      	mov	r3, r6
 8008b70:	aa01      	add	r2, sp, #4
 8008b72:	4641      	mov	r1, r8
 8008b74:	2000      	movs	r0, #0
 8008b76:	f002 fa33 	bl	800afe0 <xTaskNotifyWait>
 8008b7a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8008b7c:	2801      	cmp	r0, #1
 8008b7e:	d0d6      	beq.n	8008b2e <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	d1f1      	bne.n	8008b68 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8008b84:	f06f 0502 	mvn.w	r5, #2
 8008b88:	e7f0      	b.n	8008b6c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8008b8a:	f06f 0505 	mvn.w	r5, #5
}
 8008b8e:	4628      	mov	r0, r5
 8008b90:	b003      	add	sp, #12
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8008b96:	f06f 0505 	mvn.w	r5, #5
 8008b9a:	e7f8      	b.n	8008b8e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8008b9c:	f06f 0503 	mvn.w	r5, #3
 8008ba0:	e7f5      	b.n	8008b8e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8008ba2:	f06f 0502 	mvn.w	r5, #2
 8008ba6:	e7f2      	b.n	8008b8e <osThreadFlagsWait+0xae>
 8008ba8:	20000c9c 	.word	0x20000c9c

08008bac <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8008bac:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bae:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bb2:	b9a3      	cbnz	r3, 8008bde <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb8:	b9a3      	cbnz	r3, 8008be4 <osDelay+0x38>
 8008bba:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <osDelay+0x40>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d002      	beq.n	8008bc8 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008bc2:	b940      	cbnz	r0, 8008bd6 <osDelay+0x2a>
    stat = osOK;
 8008bc4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008bc6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bc8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0f8      	beq.n	8008bc2 <osDelay+0x16>
    stat = osErrorISR;
 8008bd0:	f06f 0005 	mvn.w	r0, #5
 8008bd4:	e7f7      	b.n	8008bc6 <osDelay+0x1a>
      vTaskDelay(ticks);
 8008bd6:	f001 ff65 	bl	800aaa4 <vTaskDelay>
    stat = osOK;
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e7f3      	b.n	8008bc6 <osDelay+0x1a>
    stat = osErrorISR;
 8008bde:	f06f 0005 	mvn.w	r0, #5
 8008be2:	e7f0      	b.n	8008bc6 <osDelay+0x1a>
 8008be4:	f06f 0005 	mvn.w	r0, #5
 8008be8:	e7ed      	b.n	8008bc6 <osDelay+0x1a>
 8008bea:	bf00      	nop
 8008bec:	20000c9c 	.word	0x20000c9c

08008bf0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008bf0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d150      	bne.n	8008c9c <osMutexNew+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfe:	461e      	mov	r6, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d14d      	bne.n	8008ca0 <osMutexNew+0xb0>
 8008c04:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <osMutexNew+0xb8>)
 8008c06:	6812      	ldr	r2, [r2, #0]
 8008c08:	2a02      	cmp	r2, #2
 8008c0a:	d024      	beq.n	8008c56 <osMutexNew+0x66>
    if (attr != NULL) {
 8008c0c:	b100      	cbz	r0, 8008c10 <osMutexNew+0x20>
      type = attr->attr_bits;
 8008c0e:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008c10:	f013 0f01 	tst.w	r3, #1
 8008c14:	d000      	beq.n	8008c18 <osMutexNew+0x28>
      rmtx = 1U;
 8008c16:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008c18:	f013 0f08 	tst.w	r3, #8
 8008c1c:	d142      	bne.n	8008ca4 <osMutexNew+0xb4>
 8008c1e:	4604      	mov	r4, r0
      mem = -1;

      if (attr != NULL) {
 8008c20:	b378      	cbz	r0, 8008c82 <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c22:	6881      	ldr	r1, [r0, #8]
 8008c24:	b111      	cbz	r1, 8008c2c <osMutexNew+0x3c>
 8008c26:	68c3      	ldr	r3, [r0, #12]
 8008c28:	2b4f      	cmp	r3, #79	; 0x4f
 8008c2a:	d81f      	bhi.n	8008c6c <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c2c:	b1c9      	cbz	r1, 8008c62 <osMutexNew+0x72>
      mem = -1;
 8008c2e:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8008c32:	bb8b      	cbnz	r3, 8008c98 <osMutexNew+0xa8>
          if (rmtx != 0U) {
 8008c34:	b34e      	cbz	r6, 8008c8a <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008c36:	2004      	movs	r0, #4
 8008c38:	f001 f86c 	bl	8009d14 <xQueueCreateMutex>
 8008c3c:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008c3e:	b125      	cbz	r5, 8008c4a <osMutexNew+0x5a>
        if (attr != NULL) {
 8008c40:	b344      	cbz	r4, 8008c94 <osMutexNew+0xa4>
          name = attr->name;
 8008c42:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8008c44:	4628      	mov	r0, r5
 8008c46:	f001 fb51 	bl	800a2ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008c4a:	b115      	cbz	r5, 8008c52 <osMutexNew+0x62>
 8008c4c:	b10e      	cbz	r6, 8008c52 <osMutexNew+0x62>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008c4e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008c52:	4628      	mov	r0, r5
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c56:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d0d6      	beq.n	8008c0c <osMutexNew+0x1c>
  hMutex = NULL;
 8008c5e:	2500      	movs	r5, #0
 8008c60:	e7f7      	b.n	8008c52 <osMutexNew+0x62>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c62:	68e3      	ldr	r3, [r4, #12]
 8008c64:	b17b      	cbz	r3, 8008c86 <osMutexNew+0x96>
      mem = -1;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	e7e2      	b.n	8008c32 <osMutexNew+0x42>
        if (rmtx != 0U) {
 8008c6c:	b126      	cbz	r6, 8008c78 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008c6e:	2004      	movs	r0, #4
 8008c70:	f001 f85b 	bl	8009d2a <xQueueCreateMutexStatic>
 8008c74:	4605      	mov	r5, r0
 8008c76:	e7e2      	b.n	8008c3e <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f001 f856 	bl	8009d2a <xQueueCreateMutexStatic>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	e7dd      	b.n	8008c3e <osMutexNew+0x4e>
        mem = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e7d5      	b.n	8008c32 <osMutexNew+0x42>
            mem = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e7d3      	b.n	8008c32 <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	f001 f842 	bl	8009d14 <xQueueCreateMutex>
 8008c90:	4605      	mov	r5, r0
 8008c92:	e7d4      	b.n	8008c3e <osMutexNew+0x4e>
          name = NULL;
 8008c94:	2100      	movs	r1, #0
 8008c96:	e7d5      	b.n	8008c44 <osMutexNew+0x54>
  hMutex = NULL;
 8008c98:	2500      	movs	r5, #0
 8008c9a:	e7d6      	b.n	8008c4a <osMutexNew+0x5a>
 8008c9c:	2500      	movs	r5, #0
 8008c9e:	e7d8      	b.n	8008c52 <osMutexNew+0x62>
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	e7d6      	b.n	8008c52 <osMutexNew+0x62>
 8008ca4:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8008ca6:	e7d4      	b.n	8008c52 <osMutexNew+0x62>
 8008ca8:	20000c9c 	.word	0x20000c9c

08008cac <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008cac:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8008cb0:	f000 0301 	and.w	r3, r0, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb4:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8008cb8:	bb18      	cbnz	r0, 8008d02 <osMutexAcquire+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cba:	f3ef 8010 	mrs	r0, PRIMASK
 8008cbe:	bb18      	cbnz	r0, 8008d08 <osMutexAcquire+0x5c>
 8008cc0:	4819      	ldr	r0, [pc, #100]	; (8008d28 <osMutexAcquire+0x7c>)
 8008cc2:	6800      	ldr	r0, [r0, #0]
 8008cc4:	2802      	cmp	r0, #2
 8008cc6:	d00c      	beq.n	8008ce2 <osMutexAcquire+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008cc8:	b30a      	cbz	r2, 8008d0e <osMutexAcquire+0x62>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008cca:	b510      	push	{r4, lr}
 8008ccc:	460c      	mov	r4, r1
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008cce:	b17b      	cbz	r3, 8008cf0 <osMutexAcquire+0x44>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f001 fa93 	bl	800a1fc <xQueueTakeMutexRecursive>
 8008cd6:	2801      	cmp	r0, #1
 8008cd8:	d01c      	beq.n	8008d14 <osMutexAcquire+0x68>
        if (timeout != 0U) {
 8008cda:	b1ec      	cbz	r4, 8008d18 <osMutexAcquire+0x6c>
          stat = osErrorTimeout;
 8008cdc:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 8008ce0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ce2:	f3ef 8011 	mrs	r0, BASEPRI
  if (IS_IRQ()) {
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0ee      	beq.n	8008cc8 <osMutexAcquire+0x1c>
    stat = osErrorISR;
 8008cea:	f06f 0005 	mvn.w	r0, #5
 8008cee:	4770      	bx	lr
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f001 f9b5 	bl	800a060 <xQueueSemaphoreTake>
 8008cf6:	2801      	cmp	r0, #1
 8008cf8:	d011      	beq.n	8008d1e <osMutexAcquire+0x72>
        if (timeout != 0U) {
 8008cfa:	b194      	cbz	r4, 8008d22 <osMutexAcquire+0x76>
          stat = osErrorTimeout;
 8008cfc:	f06f 0001 	mvn.w	r0, #1
 8008d00:	e7ee      	b.n	8008ce0 <osMutexAcquire+0x34>
    stat = osErrorISR;
 8008d02:	f06f 0005 	mvn.w	r0, #5
 8008d06:	4770      	bx	lr
 8008d08:	f06f 0005 	mvn.w	r0, #5
 8008d0c:	4770      	bx	lr
    stat = osErrorParameter;
 8008d0e:	f06f 0003 	mvn.w	r0, #3
}
 8008d12:	4770      	bx	lr
  stat = osOK;
 8008d14:	2000      	movs	r0, #0
 8008d16:	e7e3      	b.n	8008ce0 <osMutexAcquire+0x34>
          stat = osErrorResource;
 8008d18:	f06f 0002 	mvn.w	r0, #2
 8008d1c:	e7e0      	b.n	8008ce0 <osMutexAcquire+0x34>
  stat = osOK;
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e7de      	b.n	8008ce0 <osMutexAcquire+0x34>
          stat = osErrorResource;
 8008d22:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008d26:	e7db      	b.n	8008ce0 <osMutexAcquire+0x34>
 8008d28:	20000c9c 	.word	0x20000c9c

08008d2c <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8008d30:	bb2a      	cbnz	r2, 8008d7e <osMutexRelease+0x52>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008d32:	b510      	push	{r4, lr}
 8008d34:	f020 0401 	bic.w	r4, r0, #1
 8008d38:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d3c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8008d40:	bb02      	cbnz	r2, 8008d84 <osMutexRelease+0x58>
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <osMutexRelease+0x70>)
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	2a02      	cmp	r2, #2
 8008d48:	d008      	beq.n	8008d5c <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008d4a:	b1f4      	cbz	r4, 8008d8a <osMutexRelease+0x5e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008d4c:	b168      	cbz	r0, 8008d6a <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fffa 	bl	8009d48 <xQueueGiveMutexRecursive>
 8008d54:	2801      	cmp	r0, #1
 8008d56:	d11b      	bne.n	8008d90 <osMutexRelease+0x64>
  stat = osOK;
 8008d58:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008d5a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d5c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	d0f2      	beq.n	8008d4a <osMutexRelease+0x1e>
    stat = osErrorISR;
 8008d64:	f06f 0005 	mvn.w	r0, #5
 8008d68:	e7f7      	b.n	8008d5a <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 ff05 	bl	8009b80 <xQueueGenericSend>
 8008d76:	2801      	cmp	r0, #1
 8008d78:	d10d      	bne.n	8008d96 <osMutexRelease+0x6a>
  stat = osOK;
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e7ed      	b.n	8008d5a <osMutexRelease+0x2e>
    stat = osErrorISR;
 8008d7e:	f06f 0005 	mvn.w	r0, #5
}
 8008d82:	4770      	bx	lr
    stat = osErrorISR;
 8008d84:	f06f 0005 	mvn.w	r0, #5
 8008d88:	e7e7      	b.n	8008d5a <osMutexRelease+0x2e>
    stat = osErrorParameter;
 8008d8a:	f06f 0003 	mvn.w	r0, #3
 8008d8e:	e7e4      	b.n	8008d5a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8008d90:	f06f 0002 	mvn.w	r0, #2
 8008d94:	e7e1      	b.n	8008d5a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8008d96:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008d9a:	e7de      	b.n	8008d5a <osMutexRelease+0x2e>
 8008d9c:	20000c9c 	.word	0x20000c9c

08008da0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d15b      	bne.n	8008e64 <osSemaphoreNew+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dac:	f3ef 8310 	mrs	r3, PRIMASK
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d159      	bne.n	8008e68 <osSemaphoreNew+0xc8>
 8008db4:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <osSemaphoreNew+0xdc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d021      	beq.n	8008e00 <osSemaphoreNew+0x60>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d055      	beq.n	8008e6c <osSemaphoreNew+0xcc>
 8008dc0:	4288      	cmp	r0, r1
 8008dc2:	d355      	bcc.n	8008e70 <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 8008dc4:	b312      	cbz	r2, 8008e0c <osSemaphoreNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008dc6:	6893      	ldr	r3, [r2, #8]
 8008dc8:	b113      	cbz	r3, 8008dd0 <osSemaphoreNew+0x30>
 8008dca:	68d4      	ldr	r4, [r2, #12]
 8008dcc:	2c4f      	cmp	r4, #79	; 0x4f
 8008dce:	d81f      	bhi.n	8008e10 <osSemaphoreNew+0x70>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d14f      	bne.n	8008e74 <osSemaphoreNew+0xd4>
 8008dd4:	68d3      	ldr	r3, [r2, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d14e      	bne.n	8008e78 <osSemaphoreNew+0xd8>
 8008dda:	4614      	mov	r4, r2
 8008ddc:	460d      	mov	r5, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8008dde:	2801      	cmp	r0, #1
 8008de0:	d018      	beq.n	8008e14 <osSemaphoreNew+0x74>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d137      	bne.n	8008e56 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008de6:	f000 feaa 	bl	8009b3e <xQueueCreateCountingSemaphore>
 8008dea:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008dec:	b12e      	cbz	r6, 8008dfa <osSemaphoreNew+0x5a>
        if (attr != NULL) {
 8008dee:	2c00      	cmp	r4, #0
 8008df0:	d036      	beq.n	8008e60 <osSemaphoreNew+0xc0>
          name = attr->name;
 8008df2:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008df4:	4630      	mov	r0, r6
 8008df6:	f001 fa79 	bl	800a2ec <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	b002      	add	sp, #8
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e00:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0d9      	beq.n	8008dbc <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 8008e08:	2600      	movs	r6, #0
 8008e0a:	e7f6      	b.n	8008dfa <osSemaphoreNew+0x5a>
      mem = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e7e4      	b.n	8008dda <osSemaphoreNew+0x3a>
        mem = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e7e2      	b.n	8008dda <osSemaphoreNew+0x3a>
        if (mem == 1) {
 8008e14:	b9b3      	cbnz	r3, 8008e44 <osSemaphoreNew+0xa4>
          hSemaphore = xSemaphoreCreateBinary();
 8008e16:	2203      	movs	r2, #3
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f000 fe43 	bl	8009aa6 <xQueueGenericCreate>
 8008e20:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d0e2      	beq.n	8008dec <osSemaphoreNew+0x4c>
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	d0e0      	beq.n	8008dec <osSemaphoreNew+0x4c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 fea5 	bl	8009b80 <xQueueGenericSend>
 8008e36:	2801      	cmp	r0, #1
 8008e38:	d0d8      	beq.n	8008dec <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f001 fa80 	bl	800a340 <vQueueDelete>
            hSemaphore = NULL;
 8008e40:	2600      	movs	r6, #0
 8008e42:	e7da      	b.n	8008dfa <osSemaphoreNew+0x5a>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e44:	2303      	movs	r3, #3
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	6893      	ldr	r3, [r2, #8]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	f000 fde2 	bl	8009a16 <xQueueGenericCreateStatic>
 8008e52:	4606      	mov	r6, r0
 8008e54:	e7e5      	b.n	8008e22 <osSemaphoreNew+0x82>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008e56:	6892      	ldr	r2, [r2, #8]
 8008e58:	f000 fe4c 	bl	8009af4 <xQueueCreateCountingSemaphoreStatic>
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	e7c5      	b.n	8008dec <osSemaphoreNew+0x4c>
          name = NULL;
 8008e60:	2100      	movs	r1, #0
 8008e62:	e7c7      	b.n	8008df4 <osSemaphoreNew+0x54>
  hSemaphore = NULL;
 8008e64:	2600      	movs	r6, #0
 8008e66:	e7c8      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e68:	2600      	movs	r6, #0
 8008e6a:	e7c6      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e6c:	2600      	movs	r6, #0
 8008e6e:	e7c4      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e70:	2600      	movs	r6, #0
 8008e72:	e7c2      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e74:	2600      	movs	r6, #0
 8008e76:	e7c0      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e78:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8008e7a:	e7be      	b.n	8008dfa <osSemaphoreNew+0x5a>
 8008e7c:	20000c9c 	.word	0x20000c9c

08008e80 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008e80:	b370      	cbz	r0, 8008ee0 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008e82:	b510      	push	{r4, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e88:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008e8c:	b94b      	cbnz	r3, 8008ea2 <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e92:	b933      	cbnz	r3, 8008ea2 <osSemaphoreAcquire+0x22>
 8008e94:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <osSemaphoreAcquire+0x80>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d118      	bne.n	8008ece <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea0:	b1ab      	cbz	r3, 8008ece <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 8008ea2:	bb04      	cbnz	r4, 8008ee6 <osSemaphoreAcquire+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	aa02      	add	r2, sp, #8
 8008ea8:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008eac:	f001 f9c8 	bl	800a240 <xQueueReceiveFromISR>
 8008eb0:	2801      	cmp	r0, #1
 8008eb2:	d11b      	bne.n	8008eec <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	b1e3      	cbz	r3, 8008ef2 <osSemaphoreAcquire+0x72>
 8008eb8:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <osSemaphoreAcquire+0x84>)
 8008eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008ec8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008eca:	b002      	add	sp, #8
 8008ecc:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008ece:	4621      	mov	r1, r4
 8008ed0:	f001 f8c6 	bl	800a060 <xQueueSemaphoreTake>
 8008ed4:	2801      	cmp	r0, #1
 8008ed6:	d00e      	beq.n	8008ef6 <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8008ed8:	b17c      	cbz	r4, 8008efa <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8008eda:	f06f 0001 	mvn.w	r0, #1
 8008ede:	e7f4      	b.n	8008eca <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 8008ee0:	f06f 0003 	mvn.w	r0, #3
}
 8008ee4:	4770      	bx	lr
      stat = osErrorParameter;
 8008ee6:	f06f 0003 	mvn.w	r0, #3
 8008eea:	e7ee      	b.n	8008eca <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8008eec:	f06f 0002 	mvn.w	r0, #2
 8008ef0:	e7eb      	b.n	8008eca <osSemaphoreAcquire+0x4a>
  stat = osOK;
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e7e9      	b.n	8008eca <osSemaphoreAcquire+0x4a>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7e7      	b.n	8008eca <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8008efa:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008efe:	e7e4      	b.n	8008eca <osSemaphoreAcquire+0x4a>
 8008f00:	20000c9c 	.word	0x20000c9c
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008f08:	b368      	cbz	r0, 8008f66 <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008f0a:	b500      	push	{lr}
 8008f0c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f0e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008f12:	b94b      	cbnz	r3, 8008f28 <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f14:	f3ef 8310 	mrs	r3, PRIMASK
 8008f18:	b933      	cbnz	r3, 8008f28 <osSemaphoreRelease+0x20>
 8008f1a:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <osSemaphoreRelease+0x74>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d118      	bne.n	8008f54 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f22:	f3ef 8311 	mrs	r3, BASEPRI
 8008f26:	b1ab      	cbz	r3, 8008f54 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 8008f28:	a902      	add	r1, sp, #8
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f30:	f000 ff90 	bl	8009e54 <xQueueGiveFromISR>
 8008f34:	2801      	cmp	r0, #1
 8008f36:	d119      	bne.n	8008f6c <osSemaphoreRelease+0x64>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	b1d3      	cbz	r3, 8008f72 <osSemaphoreRelease+0x6a>
 8008f3c:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <osSemaphoreRelease+0x78>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008f4c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8008f4e:	b003      	add	sp, #12
 8008f50:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008f54:	2300      	movs	r3, #0
 8008f56:	461a      	mov	r2, r3
 8008f58:	4619      	mov	r1, r3
 8008f5a:	f000 fe11 	bl	8009b80 <xQueueGenericSend>
 8008f5e:	2801      	cmp	r0, #1
 8008f60:	d109      	bne.n	8008f76 <osSemaphoreRelease+0x6e>
  stat = osOK;
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7f3      	b.n	8008f4e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8008f66:	f06f 0003 	mvn.w	r0, #3
}
 8008f6a:	4770      	bx	lr
      stat = osErrorResource;
 8008f6c:	f06f 0002 	mvn.w	r0, #2
 8008f70:	e7ed      	b.n	8008f4e <osSemaphoreRelease+0x46>
  stat = osOK;
 8008f72:	2000      	movs	r0, #0
 8008f74:	e7eb      	b.n	8008f4e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8008f76:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008f7a:	e7e8      	b.n	8008f4e <osSemaphoreRelease+0x46>
 8008f7c:	20000c9c 	.word	0x20000c9c
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f88:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d14c      	bne.n	800902a <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f90:	f3ef 8310 	mrs	r3, PRIMASK
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d14a      	bne.n	800902e <osMessageQueueNew+0xaa>
 8008f98:	4b29      	ldr	r3, [pc, #164]	; (8009040 <osMessageQueueNew+0xbc>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d023      	beq.n	8008fe8 <osMessageQueueNew+0x64>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d046      	beq.n	8009032 <osMessageQueueNew+0xae>
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d046      	beq.n	8009036 <osMessageQueueNew+0xb2>
 8008fa8:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d034      	beq.n	8009018 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008fae:	6893      	ldr	r3, [r2, #8]
 8008fb0:	b14b      	cbz	r3, 8008fc6 <osMessageQueueNew+0x42>
 8008fb2:	68d2      	ldr	r2, [r2, #12]
 8008fb4:	2a4f      	cmp	r2, #79	; 0x4f
 8008fb6:	d906      	bls.n	8008fc6 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008fb8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008fba:	b122      	cbz	r2, 8008fc6 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008fbc:	6966      	ldr	r6, [r4, #20]
 8008fbe:	fb01 f500 	mul.w	r5, r1, r0
 8008fc2:	42ae      	cmp	r6, r5
 8008fc4:	d222      	bcs.n	800900c <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008fc6:	b1ab      	cbz	r3, 8008ff4 <osMessageQueueNew+0x70>
    mem = -1;
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8008fcc:	bbab      	cbnz	r3, 800903a <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f000 fd69 	bl	8009aa6 <xQueueGenericCreate>
 8008fd4:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fd6:	b125      	cbz	r5, 8008fe2 <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8008fd8:	b32c      	cbz	r4, 8009026 <osMessageQueueNew+0xa2>
        name = attr->name;
 8008fda:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f001 f985 	bl	800a2ec <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	b002      	add	sp, #8
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fe8:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0d7      	beq.n	8008fa0 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	e7f6      	b.n	8008fe2 <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ff4:	68e3      	ldr	r3, [r4, #12]
 8008ff6:	b98b      	cbnz	r3, 800901c <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ff8:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ffa:	b113      	cbz	r3, 8009002 <osMessageQueueNew+0x7e>
    mem = -1;
 8008ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8009000:	e7e4      	b.n	8008fcc <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009002:	6963      	ldr	r3, [r4, #20]
 8009004:	b16b      	cbz	r3, 8009022 <osMessageQueueNew+0x9e>
    mem = -1;
 8009006:	f04f 33ff 	mov.w	r3, #4294967295
 800900a:	e7df      	b.n	8008fcc <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800900c:	2500      	movs	r5, #0
 800900e:	9500      	str	r5, [sp, #0]
 8009010:	f000 fd01 	bl	8009a16 <xQueueGenericCreateStatic>
 8009014:	4605      	mov	r5, r0
 8009016:	e7de      	b.n	8008fd6 <osMessageQueueNew+0x52>
      mem = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	e7d7      	b.n	8008fcc <osMessageQueueNew+0x48>
    mem = -1;
 800901c:	f04f 33ff 	mov.w	r3, #4294967295
 8009020:	e7d4      	b.n	8008fcc <osMessageQueueNew+0x48>
          mem = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	e7d2      	b.n	8008fcc <osMessageQueueNew+0x48>
        name = NULL;
 8009026:	2100      	movs	r1, #0
 8009028:	e7d8      	b.n	8008fdc <osMessageQueueNew+0x58>
  hQueue = NULL;
 800902a:	2500      	movs	r5, #0
 800902c:	e7d9      	b.n	8008fe2 <osMessageQueueNew+0x5e>
 800902e:	2500      	movs	r5, #0
 8009030:	e7d7      	b.n	8008fe2 <osMessageQueueNew+0x5e>
 8009032:	2500      	movs	r5, #0
 8009034:	e7d5      	b.n	8008fe2 <osMessageQueueNew+0x5e>
 8009036:	2500      	movs	r5, #0
 8009038:	e7d3      	b.n	8008fe2 <osMessageQueueNew+0x5e>
 800903a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800903c:	e7d1      	b.n	8008fe2 <osMessageQueueNew+0x5e>
 800903e:	bf00      	nop
 8009040:	20000c9c 	.word	0x20000c9c

08009044 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009044:	b510      	push	{r4, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800904a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800904e:	b9b3      	cbnz	r3, 800907e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009050:	f3ef 8310 	mrs	r3, PRIMASK
 8009054:	b99b      	cbnz	r3, 800907e <osMessageQueuePut+0x3a>
 8009056:	4b22      	ldr	r3, [pc, #136]	; (80090e0 <osMessageQueuePut+0x9c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d00b      	beq.n	8009076 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800905e:	b3a0      	cbz	r0, 80090ca <osMessageQueuePut+0x86>
 8009060:	b3b1      	cbz	r1, 80090d0 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009062:	2300      	movs	r3, #0
 8009064:	4622      	mov	r2, r4
 8009066:	f000 fd8b 	bl	8009b80 <xQueueGenericSend>
 800906a:	2801      	cmp	r0, #1
 800906c:	d033      	beq.n	80090d6 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 800906e:	b3a4      	cbz	r4, 80090da <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8009070:	f06f 0001 	mvn.w	r0, #1
 8009074:	e027      	b.n	80090c6 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009076:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0ef      	beq.n	800905e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800907e:	b1a8      	cbz	r0, 80090ac <osMessageQueuePut+0x68>
 8009080:	b1b9      	cbz	r1, 80090b2 <osMessageQueuePut+0x6e>
 8009082:	b9cc      	cbnz	r4, 80090b8 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	aa02      	add	r2, sp, #8
 8009088:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800908c:	f000 fe7c 	bl	8009d88 <xQueueGenericSendFromISR>
 8009090:	2801      	cmp	r0, #1
 8009092:	d114      	bne.n	80090be <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8009094:	9b01      	ldr	r3, [sp, #4]
 8009096:	b1ab      	cbz	r3, 80090c4 <osMessageQueuePut+0x80>
 8009098:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <osMessageQueuePut+0xa0>)
 800909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80090a8:	2000      	movs	r0, #0
 80090aa:	e00c      	b.n	80090c6 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 80090ac:	f06f 0003 	mvn.w	r0, #3
 80090b0:	e009      	b.n	80090c6 <osMessageQueuePut+0x82>
 80090b2:	f06f 0003 	mvn.w	r0, #3
 80090b6:	e006      	b.n	80090c6 <osMessageQueuePut+0x82>
 80090b8:	f06f 0003 	mvn.w	r0, #3
 80090bc:	e003      	b.n	80090c6 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 80090be:	f06f 0002 	mvn.w	r0, #2
 80090c2:	e000      	b.n	80090c6 <osMessageQueuePut+0x82>
  stat = osOK;
 80090c4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80090c6:	b002      	add	sp, #8
 80090c8:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80090ca:	f06f 0003 	mvn.w	r0, #3
 80090ce:	e7fa      	b.n	80090c6 <osMessageQueuePut+0x82>
 80090d0:	f06f 0003 	mvn.w	r0, #3
 80090d4:	e7f7      	b.n	80090c6 <osMessageQueuePut+0x82>
  stat = osOK;
 80090d6:	2000      	movs	r0, #0
 80090d8:	e7f5      	b.n	80090c6 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 80090da:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80090de:	e7f2      	b.n	80090c6 <osMessageQueuePut+0x82>
 80090e0:	20000c9c 	.word	0x20000c9c
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80090e8:	b510      	push	{r4, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ee:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80090f2:	b9ab      	cbnz	r3, 8009120 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f4:	f3ef 8310 	mrs	r3, PRIMASK
 80090f8:	b993      	cbnz	r3, 8009120 <osMessageQueueGet+0x38>
 80090fa:	4b22      	ldr	r3, [pc, #136]	; (8009184 <osMessageQueueGet+0x9c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d00a      	beq.n	8009118 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009102:	b398      	cbz	r0, 800916c <osMessageQueueGet+0x84>
 8009104:	b3a9      	cbz	r1, 8009172 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009106:	4622      	mov	r2, r4
 8009108:	f000 fefe 	bl	8009f08 <xQueueReceive>
 800910c:	2801      	cmp	r0, #1
 800910e:	d033      	beq.n	8009178 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8009110:	b3a4      	cbz	r4, 800917c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8009112:	f06f 0001 	mvn.w	r0, #1
 8009116:	e027      	b.n	8009168 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009118:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0f0      	beq.n	8009102 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009120:	b1a8      	cbz	r0, 800914e <osMessageQueueGet+0x66>
 8009122:	b1b9      	cbz	r1, 8009154 <osMessageQueueGet+0x6c>
 8009124:	b9cc      	cbnz	r4, 800915a <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8009126:	aa02      	add	r2, sp, #8
 8009128:	2300      	movs	r3, #0
 800912a:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800912e:	f001 f887 	bl	800a240 <xQueueReceiveFromISR>
 8009132:	2801      	cmp	r0, #1
 8009134:	d114      	bne.n	8009160 <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	b1ab      	cbz	r3, 8009166 <osMessageQueueGet+0x7e>
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <osMessageQueueGet+0xa0>)
 800913c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800914a:	2000      	movs	r0, #0
 800914c:	e00c      	b.n	8009168 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 800914e:	f06f 0003 	mvn.w	r0, #3
 8009152:	e009      	b.n	8009168 <osMessageQueueGet+0x80>
 8009154:	f06f 0003 	mvn.w	r0, #3
 8009158:	e006      	b.n	8009168 <osMessageQueueGet+0x80>
 800915a:	f06f 0003 	mvn.w	r0, #3
 800915e:	e003      	b.n	8009168 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8009160:	f06f 0002 	mvn.w	r0, #2
 8009164:	e000      	b.n	8009168 <osMessageQueueGet+0x80>
  stat = osOK;
 8009166:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009168:	b002      	add	sp, #8
 800916a:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800916c:	f06f 0003 	mvn.w	r0, #3
 8009170:	e7fa      	b.n	8009168 <osMessageQueueGet+0x80>
 8009172:	f06f 0003 	mvn.w	r0, #3
 8009176:	e7f7      	b.n	8009168 <osMessageQueueGet+0x80>
  stat = osOK;
 8009178:	2000      	movs	r0, #0
 800917a:	e7f5      	b.n	8009168 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 800917c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009180:	e7f2      	b.n	8009168 <osMessageQueueGet+0x80>
 8009182:	bf00      	nop
 8009184:	20000c9c 	.word	0x20000c9c
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800918c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918e:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009192:	b99b      	cbnz	r3, 80091bc <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009194:	f3ef 8310 	mrs	r3, PRIMASK
 8009198:	b99b      	cbnz	r3, 80091c2 <osMessageQueueReset+0x36>
 800919a:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <osMessageQueueReset+0x44>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d005      	beq.n	80091ae <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 80091a2:	b188      	cbz	r0, 80091c8 <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 80091a4:	2100      	movs	r1, #0
 80091a6:	f000 fbe3 	bl	8009970 <xQueueGenericReset>
    stat = osOK;
 80091aa:	2000      	movs	r0, #0
  }

  return (stat);
}
 80091ac:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091ae:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f5      	beq.n	80091a2 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 80091b6:	f06f 0005 	mvn.w	r0, #5
 80091ba:	e7f7      	b.n	80091ac <osMessageQueueReset+0x20>
 80091bc:	f06f 0005 	mvn.w	r0, #5
 80091c0:	e7f4      	b.n	80091ac <osMessageQueueReset+0x20>
 80091c2:	f06f 0005 	mvn.w	r0, #5
 80091c6:	e7f1      	b.n	80091ac <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 80091c8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80091cc:	e7ee      	b.n	80091ac <osMessageQueueReset+0x20>
 80091ce:	bf00      	nop
 80091d0:	20000c9c 	.word	0x20000c9c

080091d4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <vApplicationGetIdleTaskMemory+0x10>)
 80091d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091d8:	4b03      	ldr	r3, [pc, #12]	; (80091e8 <vApplicationGetIdleTaskMemory+0x14>)
 80091da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091dc:	2380      	movs	r3, #128	; 0x80
 80091de:	6013      	str	r3, [r2, #0]
}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000c40 	.word	0x20000c40
 80091e8:	20000a40 	.word	0x20000a40

080091ec <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091ec:	4b03      	ldr	r3, [pc, #12]	; (80091fc <vApplicationGetTimerTaskMemory+0x10>)
 80091ee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091f0:	4b03      	ldr	r3, [pc, #12]	; (8009200 <vApplicationGetTimerTaskMemory+0x14>)
 80091f2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f8:	6013      	str	r3, [r2, #0]
}
 80091fa:	4770      	bx	lr
 80091fc:	200010a0 	.word	0x200010a0
 8009200:	20000ca0 	.word	0x20000ca0

08009204 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009204:	4a13      	ldr	r2, [pc, #76]	; (8009254 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009206:	f012 0f07 	tst.w	r2, #7
 800920a:	d01f      	beq.n	800924c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800920c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800920e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009212:	f5c1 533b 	rsb	r3, r1, #11968	; 0x2ec0
 8009216:	3320      	adds	r3, #32
 8009218:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800921a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800921c:	480e      	ldr	r0, [pc, #56]	; (8009258 <prvHeapInit+0x54>)
 800921e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009220:	2100      	movs	r1, #0
 8009222:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009224:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009226:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009228:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800922c:	480b      	ldr	r0, [pc, #44]	; (800925c <prvHeapInit+0x58>)
 800922e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009230:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009232:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009234:	1a99      	subs	r1, r3, r2
 8009236:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009238:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <prvHeapInit+0x5c>)
 800923c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800923e:	4b09      	ldr	r3, [pc, #36]	; (8009264 <prvHeapInit+0x60>)
 8009240:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <prvHeapInit+0x64>)
 8009244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009248:	601a      	str	r2, [r3, #0]
}
 800924a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800924c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8009250:	e7e4      	b.n	800921c <prvHeapInit+0x18>
 8009252:	bf00      	nop
 8009254:	20001100 	.word	0x20001100
 8009258:	20003fec 	.word	0x20003fec
 800925c:	200010fc 	.word	0x200010fc
 8009260:	20003fe8 	.word	0x20003fe8
 8009264:	20003fe4 	.word	0x20003fe4
 8009268:	20003fe0 	.word	0x20003fe0

0800926c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800926c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <prvInsertBlockIntoFreeList+0x50>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4282      	cmp	r2, r0
 8009274:	d31b      	bcc.n	80092ae <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009276:	6859      	ldr	r1, [r3, #4]
 8009278:	185c      	adds	r4, r3, r1
 800927a:	4284      	cmp	r4, r0
 800927c:	d103      	bne.n	8009286 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800927e:	6840      	ldr	r0, [r0, #4]
 8009280:	4401      	add	r1, r0
 8009282:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009284:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009286:	6841      	ldr	r1, [r0, #4]
 8009288:	1844      	adds	r4, r0, r1
 800928a:	42a2      	cmp	r2, r4
 800928c:	d113      	bne.n	80092b6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800928e:	4c0c      	ldr	r4, [pc, #48]	; (80092c0 <prvInsertBlockIntoFreeList+0x54>)
 8009290:	6824      	ldr	r4, [r4, #0]
 8009292:	42a2      	cmp	r2, r4
 8009294:	d00d      	beq.n	80092b2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	4411      	add	r1, r2
 800929a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	6812      	ldr	r2, [r2, #0]
 80092a0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092a2:	4298      	cmp	r0, r3
 80092a4:	d000      	beq.n	80092a8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092a6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ac:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092ae:	4613      	mov	r3, r2
 80092b0:	e7de      	b.n	8009270 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092b2:	6004      	str	r4, [r0, #0]
 80092b4:	e7f5      	b.n	80092a2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092b6:	6002      	str	r2, [r0, #0]
 80092b8:	e7f3      	b.n	80092a2 <prvInsertBlockIntoFreeList+0x36>
 80092ba:	bf00      	nop
 80092bc:	20003fec 	.word	0x20003fec
 80092c0:	200010fc 	.word	0x200010fc

080092c4 <pvPortMalloc>:
{
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80092c8:	f001 fabe 	bl	800a848 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80092cc:	4b3a      	ldr	r3, [pc, #232]	; (80093b8 <pvPortMalloc+0xf4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	b1bb      	cbz	r3, 8009302 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092d2:	4b3a      	ldr	r3, [pc, #232]	; (80093bc <pvPortMalloc+0xf8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	421c      	tst	r4, r3
 80092d8:	d163      	bne.n	80093a2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80092da:	b1ac      	cbz	r4, 8009308 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80092dc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092de:	f014 0f07 	tst.w	r4, #7
 80092e2:	d011      	beq.n	8009308 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092e4:	f024 0407 	bic.w	r4, r4, #7
 80092e8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ea:	f004 0307 	and.w	r3, r4, #7
 80092ee:	b15b      	cbz	r3, 8009308 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	e7fe      	b.n	8009300 <pvPortMalloc+0x3c>
			prvHeapInit();
 8009302:	f7ff ff7f 	bl	8009204 <prvHeapInit>
 8009306:	e7e4      	b.n	80092d2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009308:	2c00      	cmp	r4, #0
 800930a:	d04c      	beq.n	80093a6 <pvPortMalloc+0xe2>
 800930c:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <pvPortMalloc+0xfc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	42a3      	cmp	r3, r4
 8009312:	d34a      	bcc.n	80093aa <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8009314:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <pvPortMalloc+0x100>)
 8009316:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009318:	e001      	b.n	800931e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800931a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800931c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931e:	686a      	ldr	r2, [r5, #4]
 8009320:	42a2      	cmp	r2, r4
 8009322:	d202      	bcs.n	800932a <pvPortMalloc+0x66>
 8009324:	682a      	ldr	r2, [r5, #0]
 8009326:	2a00      	cmp	r2, #0
 8009328:	d1f7      	bne.n	800931a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800932a:	4a23      	ldr	r2, [pc, #140]	; (80093b8 <pvPortMalloc+0xf4>)
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	42aa      	cmp	r2, r5
 8009330:	d03d      	beq.n	80093ae <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009332:	681e      	ldr	r6, [r3, #0]
 8009334:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009336:	682a      	ldr	r2, [r5, #0]
 8009338:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933a:	686b      	ldr	r3, [r5, #4]
 800933c:	1b1b      	subs	r3, r3, r4
 800933e:	2b10      	cmp	r3, #16
 8009340:	d910      	bls.n	8009364 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009342:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009344:	f010 0f07 	tst.w	r0, #7
 8009348:	d008      	beq.n	800935c <pvPortMalloc+0x98>
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	e7fe      	b.n	800935a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800935c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800935e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009360:	f7ff ff84 	bl	800926c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009364:	686a      	ldr	r2, [r5, #4]
 8009366:	4916      	ldr	r1, [pc, #88]	; (80093c0 <pvPortMalloc+0xfc>)
 8009368:	680b      	ldr	r3, [r1, #0]
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800936e:	4916      	ldr	r1, [pc, #88]	; (80093c8 <pvPortMalloc+0x104>)
 8009370:	6809      	ldr	r1, [r1, #0]
 8009372:	428b      	cmp	r3, r1
 8009374:	d201      	bcs.n	800937a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009376:	4914      	ldr	r1, [pc, #80]	; (80093c8 <pvPortMalloc+0x104>)
 8009378:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800937a:	4b10      	ldr	r3, [pc, #64]	; (80093bc <pvPortMalloc+0xf8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4313      	orrs	r3, r2
 8009380:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009386:	f001 fb13 	bl	800a9b0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800938a:	f016 0f07 	tst.w	r6, #7
 800938e:	d010      	beq.n	80093b2 <pvPortMalloc+0xee>
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	e7fe      	b.n	80093a0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80093a2:	2600      	movs	r6, #0
 80093a4:	e7ef      	b.n	8009386 <pvPortMalloc+0xc2>
 80093a6:	2600      	movs	r6, #0
 80093a8:	e7ed      	b.n	8009386 <pvPortMalloc+0xc2>
 80093aa:	2600      	movs	r6, #0
 80093ac:	e7eb      	b.n	8009386 <pvPortMalloc+0xc2>
 80093ae:	2600      	movs	r6, #0
 80093b0:	e7e9      	b.n	8009386 <pvPortMalloc+0xc2>
}
 80093b2:	4630      	mov	r0, r6
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
 80093b6:	bf00      	nop
 80093b8:	200010fc 	.word	0x200010fc
 80093bc:	20003fe0 	.word	0x20003fe0
 80093c0:	20003fe4 	.word	0x20003fe4
 80093c4:	20003fec 	.word	0x20003fec
 80093c8:	20003fe8 	.word	0x20003fe8

080093cc <vPortFree>:
	if( pv != NULL )
 80093cc:	b380      	cbz	r0, 8009430 <vPortFree+0x64>
{
 80093ce:	b538      	push	{r3, r4, r5, lr}
 80093d0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80093d2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80093da:	4916      	ldr	r1, [pc, #88]	; (8009434 <vPortFree+0x68>)
 80093dc:	6809      	ldr	r1, [r1, #0]
 80093de:	420a      	tst	r2, r1
 80093e0:	d108      	bne.n	80093f4 <vPortFree+0x28>
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	e7fe      	b.n	80093f2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093f4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80093f8:	b140      	cbz	r0, 800940c <vPortFree+0x40>
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	e7fe      	b.n	800940a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800940c:	ea22 0201 	bic.w	r2, r2, r1
 8009410:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8009414:	f001 fa18 	bl	800a848 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009418:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800941c:	4a06      	ldr	r2, [pc, #24]	; (8009438 <vPortFree+0x6c>)
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	440b      	add	r3, r1
 8009422:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009424:	4628      	mov	r0, r5
 8009426:	f7ff ff21 	bl	800926c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800942a:	f001 fac1 	bl	800a9b0 <xTaskResumeAll>
}
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20003fe0 	.word	0x20003fe0
 8009438:	20003fe4 	.word	0x20003fe4

0800943c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800943c:	f100 0308 	add.w	r3, r0, #8
 8009440:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009448:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800944a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009450:	4770      	bx	lr

08009452 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009456:	4770      	bx	lr

08009458 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009458:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800945a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009464:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009466:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009468:	6803      	ldr	r3, [r0, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	6003      	str	r3, [r0, #0]
}
 800946e:	4770      	bx	lr

08009470 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009470:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009472:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009474:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009478:	d002      	beq.n	8009480 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800947a:	f100 0208 	add.w	r2, r0, #8
 800947e:	e002      	b.n	8009486 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8009480:	6902      	ldr	r2, [r0, #16]
 8009482:	e004      	b.n	800948e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009484:	461a      	mov	r2, r3
 8009486:	6853      	ldr	r3, [r2, #4]
 8009488:	681c      	ldr	r4, [r3, #0]
 800948a:	42ac      	cmp	r4, r5
 800948c:	d9fa      	bls.n	8009484 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800948e:	6853      	ldr	r3, [r2, #4]
 8009490:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009492:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009494:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009496:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009498:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800949a:	6803      	ldr	r3, [r0, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	6003      	str	r3, [r0, #0]
}
 80094a0:	bc30      	pop	{r4, r5}
 80094a2:	4770      	bx	lr

080094a4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80094a4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094a6:	6842      	ldr	r2, [r0, #4]
 80094a8:	6881      	ldr	r1, [r0, #8]
 80094aa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094ac:	6882      	ldr	r2, [r0, #8]
 80094ae:	6841      	ldr	r1, [r0, #4]
 80094b0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	4282      	cmp	r2, r0
 80094b6:	d006      	beq.n	80094c6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80094b8:	2200      	movs	r2, #0
 80094ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	3a01      	subs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094c2:	6818      	ldr	r0, [r3, #0]
}
 80094c4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094c6:	6882      	ldr	r2, [r0, #8]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	e7f5      	b.n	80094b8 <uxListRemove+0x14>

080094cc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <prvTaskExitError+0x3c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d008      	beq.n	80094ee <prvTaskExitError+0x22>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	e7fe      	b.n	80094ec <prvTaskExitError+0x20>
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0fc      	beq.n	80094fe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009504:	b002      	add	sp, #8
 8009506:	4770      	bx	lr
 8009508:	20000024 	.word	0x20000024

0800950c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800950c:	4808      	ldr	r0, [pc, #32]	; (8009530 <prvPortStartFirstTask+0x24>)
 800950e:	6800      	ldr	r0, [r0, #0]
 8009510:	6800      	ldr	r0, [r0, #0]
 8009512:	f380 8808 	msr	MSP, r0
 8009516:	f04f 0000 	mov.w	r0, #0
 800951a:	f380 8814 	msr	CONTROL, r0
 800951e:	b662      	cpsie	i
 8009520:	b661      	cpsie	f
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	df00      	svc	0
 800952c:	bf00      	nop
 800952e:	0000      	.short	0x0000
 8009530:	e000ed08 	.word	0xe000ed08

08009534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009544 <vPortEnableVFP+0x10>
 8009538:	6801      	ldr	r1, [r0, #0]
 800953a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800953e:	6001      	str	r1, [r0, #0]
 8009540:	4770      	bx	lr
 8009542:	0000      	.short	0x0000
 8009544:	e000ed88 	.word	0xe000ed88

08009548 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800954c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009550:	f021 0101 	bic.w	r1, r1, #1
 8009554:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <pxPortInitialiseStack+0x28>)
 800955a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800955e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009562:	f06f 0302 	mvn.w	r3, #2
 8009566:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800956a:	3844      	subs	r0, #68	; 0x44
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	080094cd 	.word	0x080094cd
	...

08009580 <SVC_Handler>:
	__asm volatile (
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <pxCurrentTCBConst2>)
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	f380 8809 	msr	PSP, r0
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	4770      	bx	lr
 800959c:	f3af 8000 	nop.w

080095a0 <pxCurrentTCBConst2>:
 80095a0:	20003ffc 	.word	0x20003ffc

080095a4 <vPortEnterCritical>:
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80095b4:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <vPortEnterCritical+0x3c>)
 80095b6:	6813      	ldr	r3, [r2, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d000      	beq.n	80095c2 <vPortEnterCritical+0x1e>
}
 80095c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095c2:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <vPortEnterCritical+0x40>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095ca:	d0f9      	beq.n	80095c0 <vPortEnterCritical+0x1c>
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	e7fe      	b.n	80095dc <vPortEnterCritical+0x38>
 80095de:	bf00      	nop
 80095e0:	20000024 	.word	0x20000024
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80095e8:	4b09      	ldr	r3, [pc, #36]	; (8009610 <vPortExitCritical+0x28>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	b943      	cbnz	r3, 8009600 <vPortExitCritical+0x18>
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	e7fe      	b.n	80095fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009600:	3b01      	subs	r3, #1
 8009602:	4a03      	ldr	r2, [pc, #12]	; (8009610 <vPortExitCritical+0x28>)
 8009604:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009606:	b90b      	cbnz	r3, 800960c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009608:	f383 8811 	msr	BASEPRI, r3
}
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	20000024 	.word	0x20000024
	...

08009620 <PendSV_Handler>:
	__asm volatile
 8009620:	f3ef 8009 	mrs	r0, PSP
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	4b15      	ldr	r3, [pc, #84]	; (8009680 <pxCurrentTCBConst>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	f01e 0f10 	tst.w	lr, #16
 8009630:	bf08      	it	eq
 8009632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	6010      	str	r0, [r2, #0]
 800963c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009644:	f380 8811 	msr	BASEPRI, r0
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f001 fa86 	bl	800ab60 <vTaskSwitchContext>
 8009654:	f04f 0000 	mov.w	r0, #0
 8009658:	f380 8811 	msr	BASEPRI, r0
 800965c:	bc09      	pop	{r0, r3}
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	6808      	ldr	r0, [r1, #0]
 8009662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009666:	f01e 0f10 	tst.w	lr, #16
 800966a:	bf08      	it	eq
 800966c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009670:	f380 8809 	msr	PSP, r0
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	f3af 8000 	nop.w

08009680 <pxCurrentTCBConst>:
 8009680:	20003ffc 	.word	0x20003ffc

08009684 <SysTick_Handler>:
{
 8009684:	b508      	push	{r3, lr}
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009696:	f001 f8ff 	bl	800a898 <xTaskIncrementTick>
 800969a:	b118      	cbz	r0, 80096a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <SysTick_Handler+0x28>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80096a4:	2300      	movs	r3, #0
 80096a6:	f383 8811 	msr	BASEPRI, r3
}
 80096aa:	bd08      	pop	{r3, pc}
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096b0:	4b3a      	ldr	r3, [pc, #232]	; (800979c <xPortStartScheduler+0xec>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b3a      	ldr	r3, [pc, #232]	; (80097a0 <xPortStartScheduler+0xf0>)
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d00d      	beq.n	80096d6 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096ba:	4b38      	ldr	r3, [pc, #224]	; (800979c <xPortStartScheduler+0xec>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	4b39      	ldr	r3, [pc, #228]	; (80097a4 <xPortStartScheduler+0xf4>)
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d111      	bne.n	80096e8 <xPortStartScheduler+0x38>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	e7fe      	b.n	80096d4 <xPortStartScheduler+0x24>
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	e7fe      	b.n	80096e6 <xPortStartScheduler+0x36>
{
 80096e8:	b510      	push	{r4, lr}
 80096ea:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ec:	4b2e      	ldr	r3, [pc, #184]	; (80097a8 <xPortStartScheduler+0xf8>)
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	b2d2      	uxtb	r2, r2
 80096f2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096f4:	22ff      	movs	r2, #255	; 0xff
 80096f6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009700:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <xPortStartScheduler+0xfc>)
 800970a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800970c:	4b28      	ldr	r3, [pc, #160]	; (80097b0 <xPortStartScheduler+0x100>)
 800970e:	2207      	movs	r2, #7
 8009710:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009712:	e009      	b.n	8009728 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8009714:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <xPortStartScheduler+0x100>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	3b01      	subs	r3, #1
 800971a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800971c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009728:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800972c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009730:	d1f0      	bne.n	8009714 <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009732:	4b1f      	ldr	r3, [pc, #124]	; (80097b0 <xPortStartScheduler+0x100>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d008      	beq.n	800974c <xPortStartScheduler+0x9c>
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	e7fe      	b.n	800974a <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800974c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800974e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009752:	4a17      	ldr	r2, [pc, #92]	; (80097b0 <xPortStartScheduler+0x100>)
 8009754:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <xPortStartScheduler+0xf8>)
 800975c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <xPortStartScheduler+0x104>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009766:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800976e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009770:	f7f8 fa06 	bl	8001b80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009774:	2400      	movs	r4, #0
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <xPortStartScheduler+0x108>)
 8009778:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800977a:	f7ff fedb 	bl	8009534 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800977e:	4a0f      	ldr	r2, [pc, #60]	; (80097bc <xPortStartScheduler+0x10c>)
 8009780:	6813      	ldr	r3, [r2, #0]
 8009782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009786:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8009788:	f7ff fec0 	bl	800950c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800978c:	f001 f9e8 	bl	800ab60 <vTaskSwitchContext>
	prvTaskExitError();
 8009790:	f7ff fe9c 	bl	80094cc <prvTaskExitError>
}
 8009794:	4620      	mov	r0, r4
 8009796:	b002      	add	sp, #8
 8009798:	bd10      	pop	{r4, pc}
 800979a:	bf00      	nop
 800979c:	e000ed00 	.word	0xe000ed00
 80097a0:	410fc271 	.word	0x410fc271
 80097a4:	410fc270 	.word	0x410fc270
 80097a8:	e000e400 	.word	0xe000e400
 80097ac:	20003ff4 	.word	0x20003ff4
 80097b0:	20003ff8 	.word	0x20003ff8
 80097b4:	e000ed20 	.word	0xe000ed20
 80097b8:	20000024 	.word	0x20000024
 80097bc:	e000ef34 	.word	0xe000ef34

080097c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097c4:	2b0f      	cmp	r3, #15
 80097c6:	d90f      	bls.n	80097e8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097c8:	4a10      	ldr	r2, [pc, #64]	; (800980c <vPortValidateInterruptPriority+0x4c>)
 80097ca:	5c9b      	ldrb	r3, [r3, r2]
 80097cc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097ce:	4a10      	ldr	r2, [pc, #64]	; (8009810 <vPortValidateInterruptPriority+0x50>)
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d908      	bls.n	80097e8 <vPortValidateInterruptPriority+0x28>
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	e7fe      	b.n	80097e6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <vPortValidateInterruptPriority+0x54>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097f0:	4a09      	ldr	r2, [pc, #36]	; (8009818 <vPortValidateInterruptPriority+0x58>)
 80097f2:	6812      	ldr	r2, [r2, #0]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d908      	bls.n	800980a <vPortValidateInterruptPriority+0x4a>
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	e7fe      	b.n	8009808 <vPortValidateInterruptPriority+0x48>
	}
 800980a:	4770      	bx	lr
 800980c:	e000e3f0 	.word	0xe000e3f0
 8009810:	20003ff4 	.word	0x20003ff4
 8009814:	e000ed0c 	.word	0xe000ed0c
 8009818:	20003ff8 	.word	0x20003ff8

0800981c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800981c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800981e:	b123      	cbz	r3, 800982a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009820:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 8009828:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800982a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800982c:	4770      	bx	lr

0800982e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800982e:	b510      	push	{r4, lr}
 8009830:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009832:	f7ff feb7 	bl	80095a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009838:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800983a:	429a      	cmp	r2, r3
 800983c:	d004      	beq.n	8009848 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800983e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8009840:	f7ff fed2 	bl	80095e8 <vPortExitCritical>

	return xReturn;
}
 8009844:	4620      	mov	r0, r4
 8009846:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009848:	2401      	movs	r4, #1
 800984a:	e7f9      	b.n	8009840 <prvIsQueueFull+0x12>

0800984c <prvIsQueueEmpty>:
{
 800984c:	b510      	push	{r4, lr}
 800984e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009850:	f7ff fea8 	bl	80095a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009856:	b123      	cbz	r3, 8009862 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8009858:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800985a:	f7ff fec5 	bl	80095e8 <vPortExitCritical>
}
 800985e:	4620      	mov	r0, r4
 8009860:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009862:	2401      	movs	r4, #1
 8009864:	e7f9      	b.n	800985a <prvIsQueueEmpty+0xe>

08009866 <prvCopyDataToQueue>:
{
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	4604      	mov	r4, r0
 800986a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800986c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800986e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009870:	b95a      	cbnz	r2, 800988a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009872:	6803      	ldr	r3, [r0, #0]
 8009874:	b11b      	cbz	r3, 800987e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009876:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009878:	3501      	adds	r5, #1
 800987a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800987c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800987e:	6840      	ldr	r0, [r0, #4]
 8009880:	f001 fb08 	bl	800ae94 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8009884:	2300      	movs	r3, #0
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	e7f6      	b.n	8009878 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800988a:	b96e      	cbnz	r6, 80098a8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800988c:	6880      	ldr	r0, [r0, #8]
 800988e:	f003 fd11 	bl	800d2b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009892:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	4413      	add	r3, r2
 8009898:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	4293      	cmp	r3, r2
 800989e:	d319      	bcc.n	80098d4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80098a4:	2000      	movs	r0, #0
 80098a6:	e7e7      	b.n	8009878 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a8:	68c0      	ldr	r0, [r0, #12]
 80098aa:	f003 fd03 	bl	800d2b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80098ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098b0:	4252      	negs	r2, r2
 80098b2:	68e3      	ldr	r3, [r4, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098b8:	6821      	ldr	r1, [r4, #0]
 80098ba:	428b      	cmp	r3, r1
 80098bc:	d202      	bcs.n	80098c4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80098be:	6863      	ldr	r3, [r4, #4]
 80098c0:	441a      	add	r2, r3
 80098c2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80098c4:	2e02      	cmp	r6, #2
 80098c6:	d001      	beq.n	80098cc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80098c8:	2000      	movs	r0, #0
 80098ca:	e7d5      	b.n	8009878 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098cc:	b125      	cbz	r5, 80098d8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80098ce:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80098d0:	2000      	movs	r0, #0
 80098d2:	e7d1      	b.n	8009878 <prvCopyDataToQueue+0x12>
 80098d4:	2000      	movs	r0, #0
 80098d6:	e7cf      	b.n	8009878 <prvCopyDataToQueue+0x12>
 80098d8:	2000      	movs	r0, #0
 80098da:	e7cd      	b.n	8009878 <prvCopyDataToQueue+0x12>

080098dc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80098de:	b172      	cbz	r2, 80098fe <prvCopyDataFromQueue+0x22>
{
 80098e0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80098e2:	68c3      	ldr	r3, [r0, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098e8:	6844      	ldr	r4, [r0, #4]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	d301      	bcc.n	80098f2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80098ee:	6803      	ldr	r3, [r0, #0]
 80098f0:	60c3      	str	r3, [r0, #12]
 80098f2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80098f4:	68c1      	ldr	r1, [r0, #12]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f003 fcdc 	bl	800d2b4 <memcpy>
}
 80098fc:	bd10      	pop	{r4, pc}
 80098fe:	4770      	bx	lr

08009900 <prvUnlockQueue>:
{
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009904:	f7ff fe4e 	bl	80095a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009908:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800990c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800990e:	e003      	b.n	8009918 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8009910:	f001 fa3a 	bl	800ad88 <vTaskMissedYield>
			--cTxLock;
 8009914:	3c01      	subs	r4, #1
 8009916:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009918:	2c00      	cmp	r4, #0
 800991a:	dd08      	ble.n	800992e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800991c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800991e:	b133      	cbz	r3, 800992e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009920:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009924:	f001 f99c 	bl	800ac60 <xTaskRemoveFromEventList>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0f3      	beq.n	8009914 <prvUnlockQueue+0x14>
 800992c:	e7f0      	b.n	8009910 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800992e:	23ff      	movs	r3, #255	; 0xff
 8009930:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009934:	f7ff fe58 	bl	80095e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009938:	f7ff fe34 	bl	80095a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800993c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8009940:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009942:	e003      	b.n	800994c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8009944:	f001 fa20 	bl	800ad88 <vTaskMissedYield>
				--cRxLock;
 8009948:	3c01      	subs	r4, #1
 800994a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800994c:	2c00      	cmp	r4, #0
 800994e:	dd08      	ble.n	8009962 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009950:	692b      	ldr	r3, [r5, #16]
 8009952:	b133      	cbz	r3, 8009962 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009954:	f105 0010 	add.w	r0, r5, #16
 8009958:	f001 f982 	bl	800ac60 <xTaskRemoveFromEventList>
 800995c:	2800      	cmp	r0, #0
 800995e:	d0f3      	beq.n	8009948 <prvUnlockQueue+0x48>
 8009960:	e7f0      	b.n	8009944 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009962:	23ff      	movs	r3, #255	; 0xff
 8009964:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009968:	f7ff fe3e 	bl	80095e8 <vPortExitCritical>
}
 800996c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009970 <xQueueGenericReset>:
{
 8009970:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009972:	b940      	cbnz	r0, 8009986 <xQueueGenericReset+0x16>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	e7fe      	b.n	8009984 <xQueueGenericReset+0x14>
 8009986:	4604      	mov	r4, r0
 8009988:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800998a:	f7ff fe0b 	bl	80095a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800998e:	6821      	ldr	r1, [r4, #0]
 8009990:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009994:	fb03 1002 	mla	r0, r3, r2, r1
 8009998:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800999a:	2000      	movs	r0, #0
 800999c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800999e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80099a0:	3a01      	subs	r2, #1
 80099a2:	fb02 1303 	mla	r3, r2, r3, r1
 80099a6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099a8:	23ff      	movs	r3, #255	; 0xff
 80099aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80099b2:	b9a5      	cbnz	r5, 80099de <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	b91b      	cbnz	r3, 80099c0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80099b8:	f7ff fe16 	bl	80095e8 <vPortExitCritical>
}
 80099bc:	2001      	movs	r0, #1
 80099be:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099c0:	f104 0010 	add.w	r0, r4, #16
 80099c4:	f001 f94c 	bl	800ac60 <xTaskRemoveFromEventList>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d0f5      	beq.n	80099b8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80099cc:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <xQueueGenericReset+0x80>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	e7ec      	b.n	80099b8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099de:	f104 0010 	add.w	r0, r4, #16
 80099e2:	f7ff fd2b 	bl	800943c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099ea:	f7ff fd27 	bl	800943c <vListInitialise>
 80099ee:	e7e3      	b.n	80099b8 <xQueueGenericReset+0x48>
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <prvInitialiseNewQueue>:
{
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	461d      	mov	r5, r3
 80099f8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80099fa:	460b      	mov	r3, r1
 80099fc:	b149      	cbz	r1, 8009a12 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099fe:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8009a00:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a02:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a04:	2101      	movs	r1, #1
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff ffb2 	bl	8009970 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009a0c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a12:	6024      	str	r4, [r4, #0]
 8009a14:	e7f4      	b.n	8009a00 <prvInitialiseNewQueue+0xc>

08009a16 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a16:	b940      	cbnz	r0, 8009a2a <xQueueGenericCreateStatic+0x14>
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericCreateStatic+0x12>
	{
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8009a30:	b153      	cbz	r3, 8009a48 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a32:	b192      	cbz	r2, 8009a5a <xQueueGenericCreateStatic+0x44>
 8009a34:	b989      	cbnz	r1, 8009a5a <xQueueGenericCreateStatic+0x44>
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	e7fe      	b.n	8009a46 <xQueueGenericCreateStatic+0x30>
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	e7fe      	b.n	8009a58 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a5a:	b94a      	cbnz	r2, 8009a70 <xQueueGenericCreateStatic+0x5a>
 8009a5c:	b141      	cbz	r1, 8009a70 <xQueueGenericCreateStatic+0x5a>
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	e7fe      	b.n	8009a6e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a70:	2050      	movs	r0, #80	; 0x50
 8009a72:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a74:	9803      	ldr	r0, [sp, #12]
 8009a76:	2850      	cmp	r0, #80	; 0x50
 8009a78:	d008      	beq.n	8009a8c <xQueueGenericCreateStatic+0x76>
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	e7fe      	b.n	8009a8a <xQueueGenericCreateStatic+0x74>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a90:	2301      	movs	r3, #1
 8009a92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a96:	9400      	str	r4, [sp, #0]
 8009a98:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009a9c:	f7ff ffaa 	bl	80099f4 <prvInitialiseNewQueue>
	}
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	b004      	add	sp, #16
 8009aa4:	bd10      	pop	{r4, pc}

08009aa6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aa6:	b940      	cbnz	r0, 8009aba <xQueueGenericCreate+0x14>
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericCreate+0x12>
	{
 8009aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009abc:	b083      	sub	sp, #12
 8009abe:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8009ac0:	b111      	cbz	r1, 8009ac8 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac2:	fb01 f000 	mul.w	r0, r1, r0
 8009ac6:	e000      	b.n	8009aca <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8009ac8:	2000      	movs	r0, #0
 8009aca:	4617      	mov	r7, r2
 8009acc:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009ace:	3050      	adds	r0, #80	; 0x50
 8009ad0:	f7ff fbf8 	bl	80092c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	b150      	cbz	r0, 8009aee <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ade:	9000      	str	r0, [sp, #0]
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff ff83 	bl	80099f4 <prvInitialiseNewQueue>
	}
 8009aee:	4628      	mov	r0, r5
 8009af0:	b003      	add	sp, #12
 8009af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009af4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8009af4:	b940      	cbnz	r0, 8009b08 <xQueueCreateCountingSemaphoreStatic+0x14>
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	e7fe      	b.n	8009b06 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b08:	4288      	cmp	r0, r1
 8009b0a:	d208      	bcs.n	8009b1e <xQueueCreateCountingSemaphoreStatic+0x2a>
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	e7fe      	b.n	8009b1c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	4613      	mov	r3, r2
 8009b24:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b26:	2202      	movs	r2, #2
 8009b28:	9200      	str	r2, [sp, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	f7ff ff72 	bl	8009a16 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009b32:	4603      	mov	r3, r0
 8009b34:	b100      	cbz	r0, 8009b38 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b36:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	b002      	add	sp, #8
 8009b3c:	bd10      	pop	{r4, pc}

08009b3e <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009b3e:	b940      	cbnz	r0, 8009b52 <xQueueCreateCountingSemaphore+0x14>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	e7fe      	b.n	8009b50 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b52:	4288      	cmp	r0, r1
 8009b54:	d208      	bcs.n	8009b68 <xQueueCreateCountingSemaphore+0x2a>
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	e7fe      	b.n	8009b66 <xQueueCreateCountingSemaphore+0x28>
	{
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7ff ff99 	bl	8009aa6 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009b74:	4603      	mov	r3, r0
 8009b76:	b100      	cbz	r0, 8009b7a <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b78:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	bd10      	pop	{r4, pc}
	...

08009b80 <xQueueGenericSend>:
{
 8009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b82:	b085      	sub	sp, #20
 8009b84:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009b86:	b160      	cbz	r0, 8009ba2 <xQueueGenericSend+0x22>
 8009b88:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b8a:	b999      	cbnz	r1, 8009bb4 <xQueueGenericSend+0x34>
 8009b8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009b8e:	b18a      	cbz	r2, 8009bb4 <xQueueGenericSend+0x34>
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericSend+0x20>
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d10b      	bne.n	8009bd0 <xQueueGenericSend+0x50>
 8009bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	d008      	beq.n	8009bd0 <xQueueGenericSend+0x50>
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	e7fe      	b.n	8009bce <xQueueGenericSend+0x4e>
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bd4:	f001 f902 	bl	800addc <xTaskGetSchedulerState>
 8009bd8:	b950      	cbnz	r0, 8009bf0 <xQueueGenericSend+0x70>
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	b153      	cbz	r3, 8009bf4 <xQueueGenericSend+0x74>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	e7fe      	b.n	8009bee <xQueueGenericSend+0x6e>
 8009bf0:	2500      	movs	r5, #0
 8009bf2:	e03a      	b.n	8009c6a <xQueueGenericSend+0xea>
 8009bf4:	2500      	movs	r5, #0
 8009bf6:	e038      	b.n	8009c6a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f7ff fe32 	bl	8009866 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c04:	b94b      	cbnz	r3, 8009c1a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8009c06:	b1a8      	cbz	r0, 8009c34 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8009c08:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <xQueueGenericSend+0x178>)
 8009c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	e00c      	b.n	8009c34 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c1e:	f001 f81f 	bl	800ac60 <xTaskRemoveFromEventList>
 8009c22:	b138      	cbz	r0, 8009c34 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8009c24:	4b34      	ldr	r3, [pc, #208]	; (8009cf8 <xQueueGenericSend+0x178>)
 8009c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009c34:	f7ff fcd8 	bl	80095e8 <vPortExitCritical>
				return pdPASS;
 8009c38:	2001      	movs	r0, #1
}
 8009c3a:	b005      	add	sp, #20
 8009c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8009c3e:	f7ff fcd3 	bl	80095e8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009c42:	2000      	movs	r0, #0
 8009c44:	e7f9      	b.n	8009c3a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c46:	a802      	add	r0, sp, #8
 8009c48:	f001 f852 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c4c:	2501      	movs	r5, #1
 8009c4e:	e019      	b.n	8009c84 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8009c50:	2300      	movs	r3, #0
 8009c52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009c56:	e021      	b.n	8009c9c <xQueueGenericSend+0x11c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c5e:	e023      	b.n	8009ca8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff fe4d 	bl	8009900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c66:	f000 fea3 	bl	800a9b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009c6a:	f7ff fc9b 	bl	80095a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d3c0      	bcc.n	8009bf8 <xQueueGenericSend+0x78>
 8009c76:	2e02      	cmp	r6, #2
 8009c78:	d0be      	beq.n	8009bf8 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0de      	beq.n	8009c3e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	d0e0      	beq.n	8009c46 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8009c84:	f7ff fcb0 	bl	80095e8 <vPortExitCritical>
		vTaskSuspendAll();
 8009c88:	f000 fdde 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c8c:	f7ff fc8a 	bl	80095a4 <vPortEnterCritical>
 8009c90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d0d9      	beq.n	8009c50 <xQueueGenericSend+0xd0>
 8009c9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d0d7      	beq.n	8009c58 <xQueueGenericSend+0xd8>
 8009ca8:	f7ff fc9e 	bl	80095e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cac:	a901      	add	r1, sp, #4
 8009cae:	a802      	add	r0, sp, #8
 8009cb0:	f001 f82a 	bl	800ad08 <xTaskCheckForTimeOut>
 8009cb4:	b9c8      	cbnz	r0, 8009cea <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fdb9 	bl	800982e <prvIsQueueFull>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d0cf      	beq.n	8009c60 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	f104 0010 	add.w	r0, r4, #16
 8009cc6:	f000 ff97 	bl	800abf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7ff fe18 	bl	8009900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009cd0:	f000 fe6e 	bl	800a9b0 <xTaskResumeAll>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1c8      	bne.n	8009c6a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8009cd8:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <xQueueGenericSend+0x178>)
 8009cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	e7bf      	b.n	8009c6a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff fe08 	bl	8009900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cf0:	f000 fe5e 	bl	800a9b0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e7a0      	b.n	8009c3a <xQueueGenericSend+0xba>
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8009cfc:	b148      	cbz	r0, 8009d12 <prvInitialiseMutex+0x16>
	{
 8009cfe:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8009d00:	2100      	movs	r1, #0
 8009d02:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d04:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009d06:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d08:	460b      	mov	r3, r1
 8009d0a:	460a      	mov	r2, r1
 8009d0c:	f7ff ff38 	bl	8009b80 <xQueueGenericSend>
	}
 8009d10:	bd08      	pop	{r3, pc}
 8009d12:	4770      	bx	lr

08009d14 <xQueueCreateMutex>:
	{
 8009d14:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009d16:	4602      	mov	r2, r0
 8009d18:	2100      	movs	r1, #0
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	f7ff fec3 	bl	8009aa6 <xQueueGenericCreate>
 8009d20:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8009d22:	f7ff ffeb 	bl	8009cfc <prvInitialiseMutex>
	}
 8009d26:	4620      	mov	r0, r4
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <xQueueCreateMutexStatic>:
	{
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d2e:	9000      	str	r0, [sp, #0]
 8009d30:	460b      	mov	r3, r1
 8009d32:	2200      	movs	r2, #0
 8009d34:	4611      	mov	r1, r2
 8009d36:	2001      	movs	r0, #1
 8009d38:	f7ff fe6d 	bl	8009a16 <xQueueGenericCreateStatic>
 8009d3c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8009d3e:	f7ff ffdd 	bl	8009cfc <prvInitialiseMutex>
	}
 8009d42:	4620      	mov	r0, r4
 8009d44:	b002      	add	sp, #8
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <xQueueGiveMutexRecursive>:
	{
 8009d48:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009d4a:	b940      	cbnz	r0, 8009d5e <xQueueGiveMutexRecursive+0x16>
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGiveMutexRecursive+0x14>
 8009d5e:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009d60:	6845      	ldr	r5, [r0, #4]
 8009d62:	f001 f835 	bl	800add0 <xTaskGetCurrentTaskHandle>
 8009d66:	4285      	cmp	r5, r0
 8009d68:	d001      	beq.n	8009d6e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8009d6a:	2000      	movs	r0, #0
	}
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
			( pxMutex->u.uxRecursiveCallCount )--;
 8009d6e:	68e3      	ldr	r3, [r4, #12]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009d74:	b933      	cbnz	r3, 8009d84 <xQueueGiveMutexRecursive+0x3c>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009d76:	461a      	mov	r2, r3
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff ff00 	bl	8009b80 <xQueueGenericSend>
			xReturn = pdPASS;
 8009d80:	2001      	movs	r0, #1
 8009d82:	e7f3      	b.n	8009d6c <xQueueGiveMutexRecursive+0x24>
 8009d84:	2001      	movs	r0, #1
		return xReturn;
 8009d86:	e7f1      	b.n	8009d6c <xQueueGiveMutexRecursive+0x24>

08009d88 <xQueueGenericSendFromISR>:
{
 8009d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009d8c:	b160      	cbz	r0, 8009da8 <xQueueGenericSendFromISR+0x20>
 8009d8e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d90:	b999      	cbnz	r1, 8009dba <xQueueGenericSendFromISR+0x32>
 8009d92:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009d94:	b188      	cbz	r0, 8009dba <xQueueGenericSendFromISR+0x32>
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	e7fe      	b.n	8009da6 <xQueueGenericSendFromISR+0x1e>
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d10b      	bne.n	8009dd6 <xQueueGenericSendFromISR+0x4e>
 8009dbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009dc0:	2801      	cmp	r0, #1
 8009dc2:	d008      	beq.n	8009dd6 <xQueueGenericSendFromISR+0x4e>
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	e7fe      	b.n	8009dd4 <xQueueGenericSendFromISR+0x4c>
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	4690      	mov	r8, r2
 8009dda:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ddc:	f7ff fcf0 	bl	80097c0 <vPortValidateInterruptPriority>
	__asm volatile
 8009de0:	f3ef 8611 	mrs	r6, BASEPRI
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009df4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d303      	bcc.n	8009e04 <xQueueGenericSendFromISR+0x7c>
 8009dfc:	2f02      	cmp	r7, #2
 8009dfe:	d001      	beq.n	8009e04 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009e00:	2000      	movs	r0, #0
 8009e02:	e00f      	b.n	8009e24 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e04:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009e08:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff fd29 	bl	8009866 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009e14:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009e18:	d008      	beq.n	8009e2c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e1a:	1c6b      	adds	r3, r5, #1
 8009e1c:	b25b      	sxtb	r3, r3
 8009e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009e22:	2001      	movs	r0, #1
	__asm volatile
 8009e24:	f386 8811 	msr	BASEPRI, r6
}
 8009e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e2e:	b15b      	cbz	r3, 8009e48 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e34:	f000 ff14 	bl	800ac60 <xTaskRemoveFromEventList>
 8009e38:	b140      	cbz	r0, 8009e4c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009e3a:	f1b8 0f00 	cmp.w	r8, #0
 8009e3e:	d007      	beq.n	8009e50 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e40:	2001      	movs	r0, #1
 8009e42:	f8c8 0000 	str.w	r0, [r8]
 8009e46:	e7ed      	b.n	8009e24 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8009e48:	2001      	movs	r0, #1
 8009e4a:	e7eb      	b.n	8009e24 <xQueueGenericSendFromISR+0x9c>
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	e7e9      	b.n	8009e24 <xQueueGenericSendFromISR+0x9c>
 8009e50:	2001      	movs	r0, #1
 8009e52:	e7e7      	b.n	8009e24 <xQueueGenericSendFromISR+0x9c>

08009e54 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8009e54:	b160      	cbz	r0, 8009e70 <xQueueGiveFromISR+0x1c>
{
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009e5c:	b18b      	cbz	r3, 8009e82 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	e7fe      	b.n	8009e6e <xQueueGiveFromISR+0x1a>
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	e7fe      	b.n	8009e80 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009e82:	6803      	ldr	r3, [r0, #0]
 8009e84:	b32b      	cbz	r3, 8009ed2 <xQueueGiveFromISR+0x7e>
 8009e86:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e88:	f7ff fc9a 	bl	80097c0 <vPortValidateInterruptPriority>
	__asm volatile
 8009e8c:	f3ef 8511 	mrs	r5, BASEPRI
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ea0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009ea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d926      	bls.n	8009ef6 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ea8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009eac:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009eae:	3201      	adds	r2, #1
 8009eb0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d118      	bne.n	8009eea <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eba:	b1f3      	cbz	r3, 8009efa <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ebc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ec0:	f000 fece 	bl	800ac60 <xTaskRemoveFromEventList>
 8009ec4:	b1d8      	cbz	r0, 8009efe <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8009ec6:	b1e6      	cbz	r6, 8009f02 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ec8:	2001      	movs	r0, #1
 8009eca:	6030      	str	r0, [r6, #0]
	__asm volatile
 8009ecc:	f385 8811 	msr	BASEPRI, r5
}
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009ed2:	6843      	ldr	r3, [r0, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0d6      	beq.n	8009e86 <xQueueGiveFromISR+0x32>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eea:	3301      	adds	r3, #1
 8009eec:	b25b      	sxtb	r3, r3
 8009eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	e7ea      	b.n	8009ecc <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e7e8      	b.n	8009ecc <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8009efa:	2001      	movs	r0, #1
 8009efc:	e7e6      	b.n	8009ecc <xQueueGiveFromISR+0x78>
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7e4      	b.n	8009ecc <xQueueGiveFromISR+0x78>
 8009f02:	2001      	movs	r0, #1
 8009f04:	e7e2      	b.n	8009ecc <xQueueGiveFromISR+0x78>
	...

08009f08 <xQueueReceive>:
{
 8009f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009f0e:	b160      	cbz	r0, 8009f2a <xQueueReceive+0x22>
 8009f10:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f12:	b999      	cbnz	r1, 8009f3c <xQueueReceive+0x34>
 8009f14:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f16:	b18b      	cbz	r3, 8009f3c <xQueueReceive+0x34>
 8009f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	e7fe      	b.n	8009f28 <xQueueReceive+0x20>
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	e7fe      	b.n	8009f3a <xQueueReceive+0x32>
 8009f3c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f3e:	f000 ff4d 	bl	800addc <xTaskGetSchedulerState>
 8009f42:	b950      	cbnz	r0, 8009f5a <xQueueReceive+0x52>
 8009f44:	9b01      	ldr	r3, [sp, #4]
 8009f46:	b153      	cbz	r3, 8009f5e <xQueueReceive+0x56>
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	e7fe      	b.n	8009f58 <xQueueReceive+0x50>
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	e03e      	b.n	8009fdc <xQueueReceive+0xd4>
 8009f5e:	2600      	movs	r6, #0
 8009f60:	e03c      	b.n	8009fdc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f62:	4639      	mov	r1, r7
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7ff fcb9 	bl	80098dc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f6a:	3d01      	subs	r5, #1
 8009f6c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b923      	cbnz	r3, 8009f7c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8009f72:	f7ff fb39 	bl	80095e8 <vPortExitCritical>
				return pdPASS;
 8009f76:	2001      	movs	r0, #1
}
 8009f78:	b005      	add	sp, #20
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f7c:	f104 0010 	add.w	r0, r4, #16
 8009f80:	f000 fe6e 	bl	800ac60 <xTaskRemoveFromEventList>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d0f4      	beq.n	8009f72 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8009f88:	4b34      	ldr	r3, [pc, #208]	; (800a05c <xQueueReceive+0x154>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	e7eb      	b.n	8009f72 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8009f9a:	f7ff fb25 	bl	80095e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7ea      	b.n	8009f78 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fa2:	a802      	add	r0, sp, #8
 8009fa4:	f000 fea4 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fa8:	2601      	movs	r6, #1
 8009faa:	e021      	b.n	8009ff0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8009fac:	2300      	movs	r3, #0
 8009fae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009fb2:	e029      	b.n	800a008 <xQueueReceive+0x100>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fba:	e02b      	b.n	800a014 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7ff fc9f 	bl	8009900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc2:	f000 fcf5 	bl	800a9b0 <xTaskResumeAll>
 8009fc6:	e009      	b.n	8009fdc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7ff fc99 	bl	8009900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fce:	f000 fcef 	bl	800a9b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7ff fc3a 	bl	800984c <prvIsQueueEmpty>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d13d      	bne.n	800a058 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8009fdc:	f7ff fae2 	bl	80095a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	d1bd      	bne.n	8009f62 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0d6      	beq.n	8009f9a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009fec:	2e00      	cmp	r6, #0
 8009fee:	d0d8      	beq.n	8009fa2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8009ff0:	f7ff fafa 	bl	80095e8 <vPortExitCritical>
		vTaskSuspendAll();
 8009ff4:	f000 fc28 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ff8:	f7ff fad4 	bl	80095a4 <vPortEnterCritical>
 8009ffc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a000:	b25b      	sxtb	r3, r3
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d0d1      	beq.n	8009fac <xQueueReceive+0xa4>
 800a008:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a00c:	b25b      	sxtb	r3, r3
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d0cf      	beq.n	8009fb4 <xQueueReceive+0xac>
 800a014:	f7ff fae8 	bl	80095e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a018:	a901      	add	r1, sp, #4
 800a01a:	a802      	add	r0, sp, #8
 800a01c:	f000 fe74 	bl	800ad08 <xTaskCheckForTimeOut>
 800a020:	2800      	cmp	r0, #0
 800a022:	d1d1      	bne.n	8009fc8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a024:	4620      	mov	r0, r4
 800a026:	f7ff fc11 	bl	800984c <prvIsQueueEmpty>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d0c6      	beq.n	8009fbc <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a02e:	9901      	ldr	r1, [sp, #4]
 800a030:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a034:	f000 fde0 	bl	800abf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a038:	4620      	mov	r0, r4
 800a03a:	f7ff fc61 	bl	8009900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a03e:	f000 fcb7 	bl	800a9b0 <xTaskResumeAll>
 800a042:	2800      	cmp	r0, #0
 800a044:	d1ca      	bne.n	8009fdc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <xQueueReceive+0x154>)
 800a048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	e7c1      	b.n	8009fdc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 800a058:	2000      	movs	r0, #0
 800a05a:	e78d      	b.n	8009f78 <xQueueReceive+0x70>
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <xQueueSemaphoreTake>:
{
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a066:	b940      	cbnz	r0, 800a07a <xQueueSemaphoreTake+0x1a>
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	e7fe      	b.n	800a078 <xQueueSemaphoreTake+0x18>
 800a07a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a07c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a07e:	b143      	cbz	r3, 800a092 <xQueueSemaphoreTake+0x32>
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	e7fe      	b.n	800a090 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a092:	f000 fea3 	bl	800addc <xTaskGetSchedulerState>
 800a096:	b950      	cbnz	r0, 800a0ae <xQueueSemaphoreTake+0x4e>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	b15b      	cbz	r3, 800a0b4 <xQueueSemaphoreTake+0x54>
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	e7fe      	b.n	800a0ac <xQueueSemaphoreTake+0x4c>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	462e      	mov	r6, r5
 800a0b2:	e051      	b.n	800a158 <xQueueSemaphoreTake+0xf8>
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	462e      	mov	r6, r5
 800a0b8:	e04e      	b.n	800a158 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	b913      	cbnz	r3, 800a0c8 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a0c2:	f000 ff7f 	bl	800afc4 <pvTaskIncrementMutexHeldCount>
 800a0c6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b163      	cbz	r3, 800a0e6 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0cc:	f104 0010 	add.w	r0, r4, #16
 800a0d0:	f000 fdc6 	bl	800ac60 <xTaskRemoveFromEventList>
 800a0d4:	b138      	cbz	r0, 800a0e6 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 800a0d6:	4b48      	ldr	r3, [pc, #288]	; (800a1f8 <xQueueSemaphoreTake+0x198>)
 800a0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a0e6:	f7ff fa7f 	bl	80095e8 <vPortExitCritical>
				return pdPASS;
 800a0ea:	2501      	movs	r5, #1
}
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	b004      	add	sp, #16
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0f2:	b145      	cbz	r5, 800a106 <xQueueSemaphoreTake+0xa6>
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	e7fe      	b.n	800a104 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 800a106:	f7ff fa6f 	bl	80095e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a10a:	e7ef      	b.n	800a0ec <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a10c:	a802      	add	r0, sp, #8
 800a10e:	f000 fdef 	bl	800acf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a112:	2601      	movs	r6, #1
 800a114:	e02a      	b.n	800a16c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800a116:	2300      	movs	r3, #0
 800a118:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a11c:	e032      	b.n	800a184 <xQueueSemaphoreTake+0x124>
 800a11e:	2300      	movs	r3, #0
 800a120:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a124:	e034      	b.n	800a190 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800a126:	f7ff fa3d 	bl	80095a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a12a:	6860      	ldr	r0, [r4, #4]
 800a12c:	f000 fe66 	bl	800adfc <xTaskPriorityInherit>
 800a130:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a132:	f7ff fa59 	bl	80095e8 <vPortExitCritical>
 800a136:	e03b      	b.n	800a1b0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 800a138:	4620      	mov	r0, r4
 800a13a:	f7ff fbe1 	bl	8009900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a13e:	f000 fc37 	bl	800a9b0 <xTaskResumeAll>
 800a142:	e009      	b.n	800a158 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff fbdb 	bl	8009900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a14a:	f000 fc31 	bl	800a9b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff fb7c 	bl	800984c <prvIsQueueEmpty>
 800a154:	2800      	cmp	r0, #0
 800a156:	d140      	bne.n	800a1da <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 800a158:	f7ff fa24 	bl	80095a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a15c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1ab      	bne.n	800a0ba <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c4      	beq.n	800a0f2 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800a168:	2e00      	cmp	r6, #0
 800a16a:	d0cf      	beq.n	800a10c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 800a16c:	f7ff fa3c 	bl	80095e8 <vPortExitCritical>
		vTaskSuspendAll();
 800a170:	f000 fb6a 	bl	800a848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a174:	f7ff fa16 	bl	80095a4 <vPortEnterCritical>
 800a178:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a17c:	b25b      	sxtb	r3, r3
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a182:	d0c8      	beq.n	800a116 <xQueueSemaphoreTake+0xb6>
 800a184:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a188:	b25b      	sxtb	r3, r3
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d0c6      	beq.n	800a11e <xQueueSemaphoreTake+0xbe>
 800a190:	f7ff fa2a 	bl	80095e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a194:	a901      	add	r1, sp, #4
 800a196:	a802      	add	r0, sp, #8
 800a198:	f000 fdb6 	bl	800ad08 <xTaskCheckForTimeOut>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1d1      	bne.n	800a144 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f7ff fb53 	bl	800984c <prvIsQueueEmpty>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d0c6      	beq.n	800a138 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0ba      	beq.n	800a126 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1b0:	9901      	ldr	r1, [sp, #4]
 800a1b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1b6:	f000 fd1f 	bl	800abf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f7ff fba0 	bl	8009900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1c0:	f000 fbf6 	bl	800a9b0 <xTaskResumeAll>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1c7      	bne.n	800a158 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 800a1c8:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <xQueueSemaphoreTake+0x198>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	e7be      	b.n	800a158 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 800a1da:	2d00      	cmp	r5, #0
 800a1dc:	d086      	beq.n	800a0ec <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800a1de:	f7ff f9e1 	bl	80095a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7ff fb1a 	bl	800981c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a1e8:	4601      	mov	r1, r0
 800a1ea:	6860      	ldr	r0, [r4, #4]
 800a1ec:	f000 fe9a 	bl	800af24 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a1f0:	f7ff f9fa 	bl	80095e8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a1f4:	2500      	movs	r5, #0
 800a1f6:	e779      	b.n	800a0ec <xQueueSemaphoreTake+0x8c>
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800a1fc:	b940      	cbnz	r0, 800a210 <xQueueTakeMutexRecursive+0x14>
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	e7fe      	b.n	800a20e <xQueueTakeMutexRecursive+0x12>
	{
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	4604      	mov	r4, r0
 800a214:	460d      	mov	r5, r1
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a216:	6846      	ldr	r6, [r0, #4]
 800a218:	f000 fdda 	bl	800add0 <xTaskGetCurrentTaskHandle>
 800a21c:	4286      	cmp	r6, r0
 800a21e:	d009      	beq.n	800a234 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a220:	4629      	mov	r1, r5
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff ff1c 	bl	800a060 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800a228:	4602      	mov	r2, r0
 800a22a:	b138      	cbz	r0, 800a23c <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.uxRecursiveCallCount )++;
 800a22c:	68e3      	ldr	r3, [r4, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800a232:	e003      	b.n	800a23c <xQueueTakeMutexRecursive+0x40>
			( pxMutex->u.uxRecursiveCallCount )++;
 800a234:	68e3      	ldr	r3, [r4, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800a23a:	2201      	movs	r2, #1
	}
 800a23c:	4610      	mov	r0, r2
 800a23e:	bd70      	pop	{r4, r5, r6, pc}

0800a240 <xQueueReceiveFromISR>:
{
 800a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a244:	b160      	cbz	r0, 800a260 <xQueueReceiveFromISR+0x20>
 800a246:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a248:	b999      	cbnz	r1, 800a272 <xQueueReceiveFromISR+0x32>
 800a24a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a24c:	b18b      	cbz	r3, 800a272 <xQueueReceiveFromISR+0x32>
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	e7fe      	b.n	800a25e <xQueueReceiveFromISR+0x1e>
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	e7fe      	b.n	800a270 <xQueueReceiveFromISR+0x30>
 800a272:	4617      	mov	r7, r2
 800a274:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a276:	f7ff faa3 	bl	80097c0 <vPortValidateInterruptPriority>
	__asm volatile
 800a27a:	f3ef 8611 	mrs	r6, BASEPRI
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a28e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a292:	f1b8 0f00 	cmp.w	r8, #0
 800a296:	d01d      	beq.n	800a2d4 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a298:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a29c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f7ff fb1b 	bl	80098dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2a6:	f108 33ff 	add.w	r3, r8, #4294967295
 800a2aa:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a2ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a2b0:	d005      	beq.n	800a2be <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2b2:	1c6b      	adds	r3, r5, #1
 800a2b4:	b25b      	sxtb	r3, r3
 800a2b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e00b      	b.n	800a2d6 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	b16b      	cbz	r3, 800a2de <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2c2:	f104 0010 	add.w	r0, r4, #16
 800a2c6:	f000 fccb 	bl	800ac60 <xTaskRemoveFromEventList>
 800a2ca:	b150      	cbz	r0, 800a2e2 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 800a2cc:	b15f      	cbz	r7, 800a2e6 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	6038      	str	r0, [r7, #0]
 800a2d2:	e000      	b.n	800a2d6 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 800a2d4:	2000      	movs	r0, #0
	__asm volatile
 800a2d6:	f386 8811 	msr	BASEPRI, r6
}
 800a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7f9      	b.n	800a2d6 <xQueueReceiveFromISR+0x96>
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	e7f7      	b.n	800a2d6 <xQueueReceiveFromISR+0x96>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	e7f5      	b.n	800a2d6 <xQueueReceiveFromISR+0x96>
	...

0800a2ec <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b07      	cmp	r3, #7
 800a2f0:	d80c      	bhi.n	800a30c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2f2:	4a07      	ldr	r2, [pc, #28]	; (800a310 <vQueueAddToRegistry+0x24>)
 800a2f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a2f8:	b10a      	cbz	r2, 800a2fe <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	e7f7      	b.n	800a2ee <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2fe:	4a04      	ldr	r2, [pc, #16]	; (800a310 <vQueueAddToRegistry+0x24>)
 800a300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a308:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a30a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	20005068 	.word	0x20005068

0800a314 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a314:	2300      	movs	r3, #0
 800a316:	2b07      	cmp	r3, #7
 800a318:	d80f      	bhi.n	800a33a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a31a:	4a08      	ldr	r2, [pc, #32]	; (800a33c <vQueueUnregisterQueue+0x28>)
 800a31c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a320:	6852      	ldr	r2, [r2, #4]
 800a322:	4282      	cmp	r2, r0
 800a324:	d001      	beq.n	800a32a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a326:	3301      	adds	r3, #1
 800a328:	e7f5      	b.n	800a316 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <vQueueUnregisterQueue+0x28>)
 800a32c:	2100      	movs	r1, #0
 800a32e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a332:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a336:	6059      	str	r1, [r3, #4]
				break;
 800a338:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a33a:	4770      	bx	lr
 800a33c:	20005068 	.word	0x20005068

0800a340 <vQueueDelete>:
	configASSERT( pxQueue );
 800a340:	b940      	cbnz	r0, 800a354 <vQueueDelete+0x14>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	e7fe      	b.n	800a352 <vQueueDelete+0x12>
{
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800a358:	f7ff ffdc 	bl	800a314 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a35c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a360:	b103      	cbz	r3, 800a364 <vQueueDelete+0x24>
}
 800a362:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 800a364:	4620      	mov	r0, r4
 800a366:	f7ff f831 	bl	80093cc <vPortFree>
}
 800a36a:	e7fa      	b.n	800a362 <vQueueDelete+0x22>

0800a36c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
 800a372:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a374:	f7ff f916 	bl	80095a4 <vPortEnterCritical>
 800a378:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a37c:	b25b      	sxtb	r3, r3
 800a37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a382:	d00d      	beq.n	800a3a0 <vQueueWaitForMessageRestricted+0x34>
 800a384:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d00b      	beq.n	800a3a8 <vQueueWaitForMessageRestricted+0x3c>
 800a390:	f7ff f92a 	bl	80095e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a396:	b15b      	cbz	r3, 800a3b0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff fab1 	bl	8009900 <prvUnlockQueue>
	}
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a3a6:	e7ed      	b.n	800a384 <vQueueWaitForMessageRestricted+0x18>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ae:	e7ef      	b.n	800a390 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a3b8:	f000 fc36 	bl	800ac28 <vTaskPlaceOnEventListRestricted>
 800a3bc:	e7ec      	b.n	800a398 <vQueueWaitForMessageRestricted+0x2c>
	...

0800a3c0 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <prvGetExpectedIdleTime+0x38>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	b953      	cbnz	r3, 800a3dc <prvGetExpectedIdleTime+0x1c>
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a3c6:	2200      	movs	r2, #0
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a3c8:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <prvGetExpectedIdleTime+0x3c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	b973      	cbnz	r3, 800a3ee <prvGetExpectedIdleTime+0x2e>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <prvGetExpectedIdleTime+0x40>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d903      	bls.n	800a3e0 <prvGetExpectedIdleTime+0x20>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a3d8:	2000      	movs	r0, #0
 800a3da:	4770      	bx	lr
				uxHigherPriorityReadyTasks = pdTRUE;
 800a3dc:	2201      	movs	r2, #1
 800a3de:	e7f3      	b.n	800a3c8 <prvGetExpectedIdleTime+0x8>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a3e0:	b93a      	cbnz	r2, 800a3f2 <prvGetExpectedIdleTime+0x32>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <prvGetExpectedIdleTime+0x44>)
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	4b08      	ldr	r3, [pc, #32]	; (800a408 <prvGetExpectedIdleTime+0x48>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	1ac0      	subs	r0, r0, r3
 800a3ec:	4770      	bx	lr
			xReturn = 0;
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	4770      	bx	lr
			xReturn = 0;
 800a3f2:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	2000447c 	.word	0x2000447c
 800a3fc:	20003ffc 	.word	0x20003ffc
 800a400:	20004008 	.word	0x20004008
 800a404:	200044a8 	.word	0x200044a8
 800a408:	200044f0 	.word	0x200044f0

0800a40c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <prvResetNextTaskUnblockTime+0x24>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	b13b      	cbz	r3, 800a424 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a414:	4b06      	ldr	r3, [pc, #24]	; (800a430 <prvResetNextTaskUnblockTime+0x24>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <prvResetNextTaskUnblockTime+0x28>)
 800a420:	601a      	str	r2, [r3, #0]
	}
}
 800a422:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800a424:	4b03      	ldr	r3, [pc, #12]	; (800a434 <prvResetNextTaskUnblockTime+0x28>)
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20004000 	.word	0x20004000
 800a434:	200044a8 	.word	0x200044a8

0800a438 <prvInitialiseNewTask>:
{
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	4681      	mov	r9, r0
 800a43e:	460d      	mov	r5, r1
 800a440:	4617      	mov	r7, r2
 800a442:	469a      	mov	sl, r3
 800a444:	9e08      	ldr	r6, [sp, #32]
 800a446:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a44a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a44c:	0092      	lsls	r2, r2, #2
 800a44e:	21a5      	movs	r1, #165	; 0xa5
 800a450:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a452:	f002 ff3a 	bl	800d2ca <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a456:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a458:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800a45c:	3a01      	subs	r2, #1
 800a45e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a462:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a466:	2300      	movs	r3, #0
 800a468:	2b0f      	cmp	r3, #15
 800a46a:	d807      	bhi.n	800a47c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a46c:	5ce9      	ldrb	r1, [r5, r3]
 800a46e:	18e2      	adds	r2, r4, r3
 800a470:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800a474:	5cea      	ldrb	r2, [r5, r3]
 800a476:	b10a      	cbz	r2, 800a47c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a478:	3301      	adds	r3, #1
 800a47a:	e7f5      	b.n	800a468 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a47c:	2300      	movs	r3, #0
 800a47e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a482:	2e37      	cmp	r6, #55	; 0x37
 800a484:	d900      	bls.n	800a488 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a486:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a488:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a48a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a48c:	2500      	movs	r5, #0
 800a48e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a490:	1d20      	adds	r0, r4, #4
 800a492:	f7fe ffde 	bl	8009452 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a496:	f104 0018 	add.w	r0, r4, #24
 800a49a:	f7fe ffda 	bl	8009452 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a49e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800a4a4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4a6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a4a8:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4aa:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4ae:	4652      	mov	r2, sl
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f7ff f848 	bl	8009548 <pxPortInitialiseStack>
 800a4b8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800a4ba:	f1b8 0f00 	cmp.w	r8, #0
 800a4be:	d001      	beq.n	800a4c4 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4c0:	f8c8 4000 	str.w	r4, [r8]
}
 800a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4c8 <prvInitialiseTaskLists>:
{
 800a4c8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	e007      	b.n	800a4de <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4ce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a4d2:	0093      	lsls	r3, r2, #2
 800a4d4:	480e      	ldr	r0, [pc, #56]	; (800a510 <prvInitialiseTaskLists+0x48>)
 800a4d6:	4418      	add	r0, r3
 800a4d8:	f7fe ffb0 	bl	800943c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4dc:	3401      	adds	r4, #1
 800a4de:	2c37      	cmp	r4, #55	; 0x37
 800a4e0:	d9f5      	bls.n	800a4ce <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800a4e2:	4d0c      	ldr	r5, [pc, #48]	; (800a514 <prvInitialiseTaskLists+0x4c>)
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f7fe ffa9 	bl	800943c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4ea:	4c0b      	ldr	r4, [pc, #44]	; (800a518 <prvInitialiseTaskLists+0x50>)
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f7fe ffa5 	bl	800943c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4f2:	480a      	ldr	r0, [pc, #40]	; (800a51c <prvInitialiseTaskLists+0x54>)
 800a4f4:	f7fe ffa2 	bl	800943c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800a4f8:	4809      	ldr	r0, [pc, #36]	; (800a520 <prvInitialiseTaskLists+0x58>)
 800a4fa:	f7fe ff9f 	bl	800943c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800a4fe:	4809      	ldr	r0, [pc, #36]	; (800a524 <prvInitialiseTaskLists+0x5c>)
 800a500:	f7fe ff9c 	bl	800943c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a504:	4b08      	ldr	r3, [pc, #32]	; (800a528 <prvInitialiseTaskLists+0x60>)
 800a506:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <prvInitialiseTaskLists+0x64>)
 800a50a:	601c      	str	r4, [r3, #0]
}
 800a50c:	bd38      	pop	{r3, r4, r5, pc}
 800a50e:	bf00      	nop
 800a510:	20004008 	.word	0x20004008
 800a514:	20004480 	.word	0x20004480
 800a518:	20004494 	.word	0x20004494
 800a51c:	200044b0 	.word	0x200044b0
 800a520:	200044dc 	.word	0x200044dc
 800a524:	200044c8 	.word	0x200044c8
 800a528:	20004000 	.word	0x20004000
 800a52c:	20004004 	.word	0x20004004

0800a530 <prvAddNewTaskToReadyList>:
{
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a534:	f7ff f836 	bl	80095a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a538:	4a21      	ldr	r2, [pc, #132]	; (800a5c0 <prvAddNewTaskToReadyList+0x90>)
 800a53a:	6813      	ldr	r3, [r2, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a540:	4b20      	ldr	r3, [pc, #128]	; (800a5c4 <prvAddNewTaskToReadyList+0x94>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	b15b      	cbz	r3, 800a55e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a546:	4b20      	ldr	r3, [pc, #128]	; (800a5c8 <prvAddNewTaskToReadyList+0x98>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	b96b      	cbnz	r3, 800a568 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a54c:	4b1d      	ldr	r3, [pc, #116]	; (800a5c4 <prvAddNewTaskToReadyList+0x94>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a554:	429a      	cmp	r2, r3
 800a556:	d807      	bhi.n	800a568 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a558:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <prvAddNewTaskToReadyList+0x94>)
 800a55a:	601c      	str	r4, [r3, #0]
 800a55c:	e004      	b.n	800a568 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a55e:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <prvAddNewTaskToReadyList+0x94>)
 800a560:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d027      	beq.n	800a5b8 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800a568:	4a18      	ldr	r2, [pc, #96]	; (800a5cc <prvAddNewTaskToReadyList+0x9c>)
 800a56a:	6813      	ldr	r3, [r2, #0]
 800a56c:	3301      	adds	r3, #1
 800a56e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a570:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a574:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <prvAddNewTaskToReadyList+0xa0>)
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	4293      	cmp	r3, r2
 800a57a:	d901      	bls.n	800a580 <prvAddNewTaskToReadyList+0x50>
 800a57c:	4a14      	ldr	r2, [pc, #80]	; (800a5d0 <prvAddNewTaskToReadyList+0xa0>)
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a584:	009a      	lsls	r2, r3, #2
 800a586:	1d21      	adds	r1, r4, #4
 800a588:	4812      	ldr	r0, [pc, #72]	; (800a5d4 <prvAddNewTaskToReadyList+0xa4>)
 800a58a:	4410      	add	r0, r2
 800a58c:	f7fe ff64 	bl	8009458 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a590:	f7ff f82a 	bl	80095e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a594:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvAddNewTaskToReadyList+0x98>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	b16b      	cbz	r3, 800a5b6 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <prvAddNewTaskToReadyList+0x94>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d207      	bcs.n	800a5b6 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <prvAddNewTaskToReadyList+0xa8>)
 800a5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	f3bf 8f6f 	isb	sy
}
 800a5b6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a5b8:	f7ff ff86 	bl	800a4c8 <prvInitialiseTaskLists>
 800a5bc:	e7d4      	b.n	800a568 <prvAddNewTaskToReadyList+0x38>
 800a5be:	bf00      	nop
 800a5c0:	20004468 	.word	0x20004468
 800a5c4:	20003ffc 	.word	0x20003ffc
 800a5c8:	200044c4 	.word	0x200044c4
 800a5cc:	20004478 	.word	0x20004478
 800a5d0:	2000447c 	.word	0x2000447c
 800a5d4:	20004008 	.word	0x20004008
 800a5d8:	e000ed04 	.word	0xe000ed04

0800a5dc <prvDeleteTCB>:
	{
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5e0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800a5e4:	b933      	cbnz	r3, 800a5f4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800a5e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a5e8:	f7fe fef0 	bl	80093cc <vPortFree>
				vPortFree( pxTCB );
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7fe feed 	bl	80093cc <vPortFree>
	}
 800a5f2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d00a      	beq.n	800a60e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d0fa      	beq.n	800a5f2 <prvDeleteTCB+0x16>
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	e7fe      	b.n	800a60c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800a60e:	f7fe fedd 	bl	80093cc <vPortFree>
 800a612:	e7ee      	b.n	800a5f2 <prvDeleteTCB+0x16>

0800a614 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a614:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <prvCheckTasksWaitingTermination+0x40>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	b1d3      	cbz	r3, 800a650 <prvCheckTasksWaitingTermination+0x3c>
{
 800a61a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a61c:	f7fe ffc2 	bl	80095a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a620:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <prvCheckTasksWaitingTermination+0x44>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a626:	1d20      	adds	r0, r4, #4
 800a628:	f7fe ff3c 	bl	80094a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a62c:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <prvCheckTasksWaitingTermination+0x48>)
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	3b01      	subs	r3, #1
 800a632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a634:	4a07      	ldr	r2, [pc, #28]	; (800a654 <prvCheckTasksWaitingTermination+0x40>)
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	3b01      	subs	r3, #1
 800a63a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a63c:	f7fe ffd4 	bl	80095e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff ffcb 	bl	800a5dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a646:	4b03      	ldr	r3, [pc, #12]	; (800a654 <prvCheckTasksWaitingTermination+0x40>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e6      	bne.n	800a61c <prvCheckTasksWaitingTermination+0x8>
}
 800a64e:	bd10      	pop	{r4, pc}
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	2000446c 	.word	0x2000446c
 800a658:	200044dc 	.word	0x200044dc
 800a65c:	20004468 	.word	0x20004468

0800a660 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <prvAddCurrentTaskToDelayedList+0x64>)
 800a668:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a66a:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0x68>)
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	3004      	adds	r0, #4
 800a670:	f7fe ff18 	bl	80094a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a674:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a678:	d013      	beq.n	800a6a2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a67a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0x68>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a682:	42a5      	cmp	r5, r4
 800a684:	d816      	bhi.n	800a6b4 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a686:	4b11      	ldr	r3, [pc, #68]	; (800a6cc <prvAddCurrentTaskToDelayedList+0x6c>)
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0x68>)
 800a68c:	6819      	ldr	r1, [r3, #0]
 800a68e:	3104      	adds	r1, #4
 800a690:	f7fe feee 	bl	8009470 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a694:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d912      	bls.n	800a6c2 <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a69c:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a69e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6a0:	e00f      	b.n	800a6c2 <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6a2:	2e00      	cmp	r6, #0
 800a6a4:	d0e9      	beq.n	800a67a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0x68>)
 800a6a8:	6819      	ldr	r1, [r3, #0]
 800a6aa:	3104      	adds	r1, #4
 800a6ac:	4809      	ldr	r0, [pc, #36]	; (800a6d4 <prvAddCurrentTaskToDelayedList+0x74>)
 800a6ae:	f7fe fed3 	bl	8009458 <vListInsertEnd>
 800a6b2:	e006      	b.n	800a6c2 <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <prvAddCurrentTaskToDelayedList+0x78>)
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	4b03      	ldr	r3, [pc, #12]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0x68>)
 800a6ba:	6819      	ldr	r1, [r3, #0]
 800a6bc:	3104      	adds	r1, #4
 800a6be:	f7fe fed7 	bl	8009470 <vListInsert>
}
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	200044f0 	.word	0x200044f0
 800a6c8:	20003ffc 	.word	0x20003ffc
 800a6cc:	20004000 	.word	0x20004000
 800a6d0:	200044a8 	.word	0x200044a8
 800a6d4:	200044c8 	.word	0x200044c8
 800a6d8:	20004004 	.word	0x20004004

0800a6dc <xTaskCreateStatic>:
	{
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800a6e4:	b945      	cbnz	r5, 800a6f8 <xTaskCreateStatic+0x1c>
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	e7fe      	b.n	800a6f6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a6f8:	b944      	cbnz	r4, 800a70c <xTaskCreateStatic+0x30>
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	e7fe      	b.n	800a70a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a70c:	265c      	movs	r6, #92	; 0x5c
 800a70e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a710:	9e04      	ldr	r6, [sp, #16]
 800a712:	2e5c      	cmp	r6, #92	; 0x5c
 800a714:	d008      	beq.n	800a728 <xTaskCreateStatic+0x4c>
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	e7fe      	b.n	800a726 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a728:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a72a:	2502      	movs	r5, #2
 800a72c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a730:	2500      	movs	r5, #0
 800a732:	9503      	str	r5, [sp, #12]
 800a734:	9402      	str	r4, [sp, #8]
 800a736:	ad05      	add	r5, sp, #20
 800a738:	9501      	str	r5, [sp, #4]
 800a73a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a73c:	9500      	str	r5, [sp, #0]
 800a73e:	f7ff fe7b 	bl	800a438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff fef4 	bl	800a530 <prvAddNewTaskToReadyList>
	}
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	b006      	add	sp, #24
 800a74c:	bd70      	pop	{r4, r5, r6, pc}

0800a74e <xTaskCreate>:
	{
 800a74e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a752:	b085      	sub	sp, #20
 800a754:	4607      	mov	r7, r0
 800a756:	4688      	mov	r8, r1
 800a758:	4615      	mov	r5, r2
 800a75a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75c:	0090      	lsls	r0, r2, #2
 800a75e:	f7fe fdb1 	bl	80092c4 <pvPortMalloc>
			if( pxStack != NULL )
 800a762:	b308      	cbz	r0, 800a7a8 <xTaskCreate+0x5a>
 800a764:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a766:	205c      	movs	r0, #92	; 0x5c
 800a768:	f7fe fdac 	bl	80092c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a76c:	4604      	mov	r4, r0
 800a76e:	b1b8      	cbz	r0, 800a7a0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800a770:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800a772:	b1e4      	cbz	r4, 800a7ae <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a774:	2300      	movs	r3, #0
 800a776:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a77a:	9303      	str	r3, [sp, #12]
 800a77c:	9402      	str	r4, [sp, #8]
 800a77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	464b      	mov	r3, r9
 800a788:	462a      	mov	r2, r5
 800a78a:	4641      	mov	r1, r8
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7ff fe53 	bl	800a438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a792:	4620      	mov	r0, r4
 800a794:	f7ff fecc 	bl	800a530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a798:	2001      	movs	r0, #1
	}
 800a79a:	b005      	add	sp, #20
 800a79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7fe fe13 	bl	80093cc <vPortFree>
 800a7a6:	e7e4      	b.n	800a772 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	e7f5      	b.n	800a79a <xTaskCreate+0x4c>
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a7b2:	e7f2      	b.n	800a79a <xTaskCreate+0x4c>

0800a7b4 <vTaskStartScheduler>:
{
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7b8:	2400      	movs	r4, #0
 800a7ba:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7bc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7be:	aa07      	add	r2, sp, #28
 800a7c0:	a906      	add	r1, sp, #24
 800a7c2:	a805      	add	r0, sp, #20
 800a7c4:	f7fe fd06 	bl	80091d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	9302      	str	r3, [sp, #8]
 800a7cc:	9b06      	ldr	r3, [sp, #24]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	9400      	str	r4, [sp, #0]
 800a7d2:	4623      	mov	r3, r4
 800a7d4:	9a07      	ldr	r2, [sp, #28]
 800a7d6:	4917      	ldr	r1, [pc, #92]	; (800a834 <vTaskStartScheduler+0x80>)
 800a7d8:	4817      	ldr	r0, [pc, #92]	; (800a838 <vTaskStartScheduler+0x84>)
 800a7da:	f7ff ff7f 	bl	800a6dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a7de:	b140      	cbz	r0, 800a7f2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800a7e0:	f000 fdb8 	bl	800b354 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a7e4:	2801      	cmp	r0, #1
 800a7e6:	d006      	beq.n	800a7f6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7ec:	d018      	beq.n	800a820 <vTaskStartScheduler+0x6c>
}
 800a7ee:	b008      	add	sp, #32
 800a7f0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e7f6      	b.n	800a7e4 <vTaskStartScheduler+0x30>
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a806:	4b0d      	ldr	r3, [pc, #52]	; (800a83c <vTaskStartScheduler+0x88>)
 800a808:	f04f 32ff 	mov.w	r2, #4294967295
 800a80c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a80e:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <vTaskStartScheduler+0x8c>)
 800a810:	2201      	movs	r2, #1
 800a812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <vTaskStartScheduler+0x90>)
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a81a:	f7fe ff49 	bl	80096b0 <xPortStartScheduler>
 800a81e:	e7e6      	b.n	800a7ee <vTaskStartScheduler+0x3a>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	e7fe      	b.n	800a830 <vTaskStartScheduler+0x7c>
 800a832:	bf00      	nop
 800a834:	0800e678 	.word	0x0800e678
 800a838:	0800aaf1 	.word	0x0800aaf1
 800a83c:	200044a8 	.word	0x200044a8
 800a840:	200044c4 	.word	0x200044c4
 800a844:	200044f0 	.word	0x200044f0

0800a848 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a848:	4a02      	ldr	r2, [pc, #8]	; (800a854 <vTaskSuspendAll+0xc>)
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	6013      	str	r3, [r2, #0]
}
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20004474 	.word	0x20004474

0800a858 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a858:	4b01      	ldr	r3, [pc, #4]	; (800a860 <xTaskGetTickCount+0x8>)
 800a85a:	6818      	ldr	r0, [r3, #0]
}
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	200044f0 	.word	0x200044f0

0800a864 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <vTaskStepTick+0x2c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4403      	add	r3, r0
 800a86a:	4a0a      	ldr	r2, [pc, #40]	; (800a894 <vTaskStepTick+0x30>)
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	4293      	cmp	r3, r2
 800a870:	d908      	bls.n	800a884 <vTaskStepTick+0x20>
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	e7fe      	b.n	800a882 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800a884:	4a02      	ldr	r2, [pc, #8]	; (800a890 <vTaskStepTick+0x2c>)
 800a886:	6813      	ldr	r3, [r2, #0]
 800a888:	4403      	add	r3, r0
 800a88a:	6013      	str	r3, [r2, #0]
	}
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	200044f0 	.word	0x200044f0
 800a894:	200044a8 	.word	0x200044a8

0800a898 <xTaskIncrementTick>:
{
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a89a:	4b3a      	ldr	r3, [pc, #232]	; (800a984 <xTaskIncrementTick+0xec>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d164      	bne.n	800a96c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8a2:	4b39      	ldr	r3, [pc, #228]	; (800a988 <xTaskIncrementTick+0xf0>)
 800a8a4:	681d      	ldr	r5, [r3, #0]
 800a8a6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a8a8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8aa:	b9c5      	cbnz	r5, 800a8de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a8ac:	4b37      	ldr	r3, [pc, #220]	; (800a98c <xTaskIncrementTick+0xf4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	b143      	cbz	r3, 800a8c6 <xTaskIncrementTick+0x2e>
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	e7fe      	b.n	800a8c4 <xTaskIncrementTick+0x2c>
 800a8c6:	4a31      	ldr	r2, [pc, #196]	; (800a98c <xTaskIncrementTick+0xf4>)
 800a8c8:	6811      	ldr	r1, [r2, #0]
 800a8ca:	4b31      	ldr	r3, [pc, #196]	; (800a990 <xTaskIncrementTick+0xf8>)
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	6010      	str	r0, [r2, #0]
 800a8d0:	6019      	str	r1, [r3, #0]
 800a8d2:	4a30      	ldr	r2, [pc, #192]	; (800a994 <xTaskIncrementTick+0xfc>)
 800a8d4:	6813      	ldr	r3, [r2, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	f7ff fd97 	bl	800a40c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8de:	4b2e      	ldr	r3, [pc, #184]	; (800a998 <xTaskIncrementTick+0x100>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	42ab      	cmp	r3, r5
 800a8e4:	d938      	bls.n	800a958 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800a8e6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8e8:	4b2c      	ldr	r3, [pc, #176]	; (800a99c <xTaskIncrementTick+0x104>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a8f2:	009a      	lsls	r2, r3, #2
 800a8f4:	4b2a      	ldr	r3, [pc, #168]	; (800a9a0 <xTaskIncrementTick+0x108>)
 800a8f6:	589b      	ldr	r3, [r3, r2]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d93c      	bls.n	800a976 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800a8fc:	2401      	movs	r4, #1
 800a8fe:	e03a      	b.n	800a976 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800a900:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a902:	4b22      	ldr	r3, [pc, #136]	; (800a98c <xTaskIncrementTick+0xf4>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	b343      	cbz	r3, 800a95c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a90a:	4b20      	ldr	r3, [pc, #128]	; (800a98c <xTaskIncrementTick+0xf4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a912:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800a914:	429d      	cmp	r5, r3
 800a916:	d326      	bcc.n	800a966 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a918:	1d37      	adds	r7, r6, #4
 800a91a:	4638      	mov	r0, r7
 800a91c:	f7fe fdc2 	bl	80094a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a920:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a922:	b11b      	cbz	r3, 800a92c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a924:	f106 0018 	add.w	r0, r6, #24
 800a928:	f7fe fdbc 	bl	80094a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a92c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a92e:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <xTaskIncrementTick+0x10c>)
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	4293      	cmp	r3, r2
 800a934:	d901      	bls.n	800a93a <xTaskIncrementTick+0xa2>
 800a936:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <xTaskIncrementTick+0x10c>)
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a93e:	009a      	lsls	r2, r3, #2
 800a940:	4639      	mov	r1, r7
 800a942:	4817      	ldr	r0, [pc, #92]	; (800a9a0 <xTaskIncrementTick+0x108>)
 800a944:	4410      	add	r0, r2
 800a946:	f7fe fd87 	bl	8009458 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a94a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <xTaskIncrementTick+0x104>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	429a      	cmp	r2, r3
 800a954:	d2d4      	bcs.n	800a900 <xTaskIncrementTick+0x68>
 800a956:	e7d4      	b.n	800a902 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800a958:	2400      	movs	r4, #0
 800a95a:	e7d2      	b.n	800a902 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95c:	4b0e      	ldr	r3, [pc, #56]	; (800a998 <xTaskIncrementTick+0x100>)
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	601a      	str	r2, [r3, #0]
					break;
 800a964:	e7c0      	b.n	800a8e8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a966:	4a0c      	ldr	r2, [pc, #48]	; (800a998 <xTaskIncrementTick+0x100>)
 800a968:	6013      	str	r3, [r2, #0]
						break;
 800a96a:	e7bd      	b.n	800a8e8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800a96c:	4a0e      	ldr	r2, [pc, #56]	; (800a9a8 <xTaskIncrementTick+0x110>)
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a974:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800a976:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <xTaskIncrementTick+0x114>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	b103      	cbz	r3, 800a97e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800a97c:	2401      	movs	r4, #1
}
 800a97e:	4620      	mov	r0, r4
 800a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a982:	bf00      	nop
 800a984:	20004474 	.word	0x20004474
 800a988:	200044f0 	.word	0x200044f0
 800a98c:	20004000 	.word	0x20004000
 800a990:	20004004 	.word	0x20004004
 800a994:	200044ac 	.word	0x200044ac
 800a998:	200044a8 	.word	0x200044a8
 800a99c:	20003ffc 	.word	0x20003ffc
 800a9a0:	20004008 	.word	0x20004008
 800a9a4:	2000447c 	.word	0x2000447c
 800a9a8:	20004470 	.word	0x20004470
 800a9ac:	200044f4 	.word	0x200044f4

0800a9b0 <xTaskResumeAll>:
{
 800a9b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a9b2:	4b33      	ldr	r3, [pc, #204]	; (800aa80 <xTaskResumeAll+0xd0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	b943      	cbnz	r3, 800a9ca <xTaskResumeAll+0x1a>
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a9ca:	f7fe fdeb 	bl	80095a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a9ce:	4b2c      	ldr	r3, [pc, #176]	; (800aa80 <xTaskResumeAll+0xd0>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	3a01      	subs	r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d14d      	bne.n	800aa78 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9dc:	4b29      	ldr	r3, [pc, #164]	; (800aa84 <xTaskResumeAll+0xd4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	b923      	cbnz	r3, 800a9ec <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800a9e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a9e4:	f7fe fe00 	bl	80095e8 <vPortExitCritical>
}
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800a9ec:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9ee:	4b26      	ldr	r3, [pc, #152]	; (800aa88 <xTaskResumeAll+0xd8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	b31b      	cbz	r3, 800aa3c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a9f4:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <xTaskResumeAll+0xd8>)
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9fa:	f104 0018 	add.w	r0, r4, #24
 800a9fe:	f7fe fd51 	bl	80094a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa02:	1d25      	adds	r5, r4, #4
 800aa04:	4628      	mov	r0, r5
 800aa06:	f7fe fd4d 	bl	80094a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa0c:	4a1f      	ldr	r2, [pc, #124]	; (800aa8c <xTaskResumeAll+0xdc>)
 800aa0e:	6812      	ldr	r2, [r2, #0]
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d901      	bls.n	800aa18 <xTaskResumeAll+0x68>
 800aa14:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <xTaskResumeAll+0xdc>)
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa1c:	009a      	lsls	r2, r3, #2
 800aa1e:	4629      	mov	r1, r5
 800aa20:	481b      	ldr	r0, [pc, #108]	; (800aa90 <xTaskResumeAll+0xe0>)
 800aa22:	4410      	add	r0, r2
 800aa24:	f7fe fd18 	bl	8009458 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aa2a:	4b1a      	ldr	r3, [pc, #104]	; (800aa94 <xTaskResumeAll+0xe4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3dc      	bcc.n	800a9ee <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800aa34:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <xTaskResumeAll+0xe8>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e7d8      	b.n	800a9ee <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800aa3c:	b10c      	cbz	r4, 800aa42 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800aa3e:	f7ff fce5 	bl	800a40c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa42:	4b16      	ldr	r3, [pc, #88]	; (800aa9c <xTaskResumeAll+0xec>)
 800aa44:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa46:	b154      	cbz	r4, 800aa5e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 800aa48:	f7ff ff26 	bl	800a898 <xTaskIncrementTick>
 800aa4c:	b110      	cbz	r0, 800aa54 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800aa4e:	4b12      	ldr	r3, [pc, #72]	; (800aa98 <xTaskResumeAll+0xe8>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa54:	3c01      	subs	r4, #1
 800aa56:	d1f7      	bne.n	800aa48 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <xTaskResumeAll+0xec>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <xTaskResumeAll+0xe8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	b15b      	cbz	r3, 800aa7c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <xTaskResumeAll+0xf0>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800aa74:	2401      	movs	r4, #1
 800aa76:	e7b5      	b.n	800a9e4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800aa78:	2400      	movs	r4, #0
 800aa7a:	e7b3      	b.n	800a9e4 <xTaskResumeAll+0x34>
 800aa7c:	2400      	movs	r4, #0
 800aa7e:	e7b1      	b.n	800a9e4 <xTaskResumeAll+0x34>
 800aa80:	20004474 	.word	0x20004474
 800aa84:	20004468 	.word	0x20004468
 800aa88:	200044b0 	.word	0x200044b0
 800aa8c:	2000447c 	.word	0x2000447c
 800aa90:	20004008 	.word	0x20004008
 800aa94:	20003ffc 	.word	0x20003ffc
 800aa98:	200044f4 	.word	0x200044f4
 800aa9c:	20004470 	.word	0x20004470
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <vTaskDelay>:
	{
 800aaa4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaa6:	b1a8      	cbz	r0, 800aad4 <vTaskDelay+0x30>
 800aaa8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <vTaskDelay+0x44>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	b143      	cbz	r3, 800aac2 <vTaskDelay+0x1e>
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	e7fe      	b.n	800aac0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800aac2:	f7ff fec1 	bl	800a848 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aac6:	2100      	movs	r1, #0
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7ff fdc9 	bl	800a660 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800aace:	f7ff ff6f 	bl	800a9b0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800aad2:	b938      	cbnz	r0, 800aae4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <vTaskDelay+0x48>)
 800aad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	f3bf 8f6f 	isb	sy
	}
 800aae4:	bd10      	pop	{r4, pc}
 800aae6:	bf00      	nop
 800aae8:	20004474 	.word	0x20004474
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <prvIdleTask>:
{
 800aaf0:	b508      	push	{r3, lr}
 800aaf2:	e003      	b.n	800aafc <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800aaf4:	f7ff fc64 	bl	800a3c0 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d80e      	bhi.n	800ab1a <prvIdleTask+0x2a>
		prvCheckTasksWaitingTermination();
 800aafc:	f7ff fd8a 	bl	800a614 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <prvIdleTask+0x60>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d9f5      	bls.n	800aaf4 <prvIdleTask+0x4>
				taskYIELD();
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <prvIdleTask+0x64>)
 800ab0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	e7ec      	b.n	800aaf4 <prvIdleTask+0x4>
				vTaskSuspendAll();
 800ab1a:	f7ff fe95 	bl	800a848 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <prvIdleTask+0x68>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <prvIdleTask+0x6c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d308      	bcc.n	800ab3c <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800ab2a:	f7ff fc49 	bl	800a3c0 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ab2e:	2801      	cmp	r0, #1
 800ab30:	d901      	bls.n	800ab36 <prvIdleTask+0x46>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800ab32:	f7f6 ffeb 	bl	8001b0c <vPortSuppressTicksAndSleep>
				( void ) xTaskResumeAll();
 800ab36:	f7ff ff3b 	bl	800a9b0 <xTaskResumeAll>
 800ab3a:	e7df      	b.n	800aafc <prvIdleTask+0xc>
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	e7fe      	b.n	800ab4c <prvIdleTask+0x5c>
 800ab4e:	bf00      	nop
 800ab50:	20004008 	.word	0x20004008
 800ab54:	e000ed04 	.word	0xe000ed04
 800ab58:	200044a8 	.word	0x200044a8
 800ab5c:	200044f0 	.word	0x200044f0

0800ab60 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab60:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <vTaskSwitchContext+0x84>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b11b      	cbz	r3, 800ab6e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800ab66:	4b20      	ldr	r3, [pc, #128]	; (800abe8 <vTaskSwitchContext+0x88>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <vTaskSwitchContext+0x88>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <vTaskSwitchContext+0x8c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800ab7c:	008a      	lsls	r2, r1, #2
 800ab7e:	491c      	ldr	r1, [pc, #112]	; (800abf0 <vTaskSwitchContext+0x90>)
 800ab80:	588a      	ldr	r2, [r1, r2]
 800ab82:	b95a      	cbnz	r2, 800ab9c <vTaskSwitchContext+0x3c>
 800ab84:	b10b      	cbz	r3, 800ab8a <vTaskSwitchContext+0x2a>
 800ab86:	3b01      	subs	r3, #1
 800ab88:	e7f6      	b.n	800ab78 <vTaskSwitchContext+0x18>
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	e7fe      	b.n	800ab9a <vTaskSwitchContext+0x3a>
{
 800ab9c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ab9e:	4608      	mov	r0, r1
 800aba0:	009a      	lsls	r2, r3, #2
 800aba2:	18d4      	adds	r4, r2, r3
 800aba4:	00a1      	lsls	r1, r4, #2
 800aba6:	4401      	add	r1, r0
 800aba8:	684c      	ldr	r4, [r1, #4]
 800abaa:	6864      	ldr	r4, [r4, #4]
 800abac:	604c      	str	r4, [r1, #4]
 800abae:	441a      	add	r2, r3
 800abb0:	0091      	lsls	r1, r2, #2
 800abb2:	3108      	adds	r1, #8
 800abb4:	4408      	add	r0, r1
 800abb6:	4284      	cmp	r4, r0
 800abb8:	d00d      	beq.n	800abd6 <vTaskSwitchContext+0x76>
 800abba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800abbe:	0091      	lsls	r1, r2, #2
 800abc0:	4a0b      	ldr	r2, [pc, #44]	; (800abf0 <vTaskSwitchContext+0x90>)
 800abc2:	440a      	add	r2, r1
 800abc4:	6852      	ldr	r2, [r2, #4]
 800abc6:	68d1      	ldr	r1, [r2, #12]
 800abc8:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <vTaskSwitchContext+0x94>)
 800abca:	6011      	str	r1, [r2, #0]
 800abcc:	4a07      	ldr	r2, [pc, #28]	; (800abec <vTaskSwitchContext+0x8c>)
 800abce:	6013      	str	r3, [r2, #0]
}
 800abd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abd4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800abd6:	6861      	ldr	r1, [r4, #4]
 800abd8:	4805      	ldr	r0, [pc, #20]	; (800abf0 <vTaskSwitchContext+0x90>)
 800abda:	2214      	movs	r2, #20
 800abdc:	fb02 0203 	mla	r2, r2, r3, r0
 800abe0:	6051      	str	r1, [r2, #4]
 800abe2:	e7ea      	b.n	800abba <vTaskSwitchContext+0x5a>
 800abe4:	20004474 	.word	0x20004474
 800abe8:	200044f4 	.word	0x200044f4
 800abec:	2000447c 	.word	0x2000447c
 800abf0:	20004008 	.word	0x20004008
 800abf4:	20003ffc 	.word	0x20003ffc

0800abf8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800abf8:	b940      	cbnz	r0, 800ac0c <vTaskPlaceOnEventList+0x14>
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	e7fe      	b.n	800ac0a <vTaskPlaceOnEventList+0x12>
{
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac10:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <vTaskPlaceOnEventList+0x2c>)
 800ac12:	6819      	ldr	r1, [r3, #0]
 800ac14:	3118      	adds	r1, #24
 800ac16:	f7fe fc2b 	bl	8009470 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7ff fd1f 	bl	800a660 <prvAddCurrentTaskToDelayedList>
}
 800ac22:	bd10      	pop	{r4, pc}
 800ac24:	20003ffc 	.word	0x20003ffc

0800ac28 <vTaskPlaceOnEventListRestricted>:
	{
 800ac28:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800ac2a:	b940      	cbnz	r0, 800ac3e <vTaskPlaceOnEventListRestricted+0x16>
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	e7fe      	b.n	800ac3c <vTaskPlaceOnEventListRestricted+0x14>
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac42:	4a06      	ldr	r2, [pc, #24]	; (800ac5c <vTaskPlaceOnEventListRestricted+0x34>)
 800ac44:	6811      	ldr	r1, [r2, #0]
 800ac46:	3118      	adds	r1, #24
 800ac48:	f7fe fc06 	bl	8009458 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800ac4c:	b10d      	cbz	r5, 800ac52 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800ac4e:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac52:	4629      	mov	r1, r5
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7ff fd03 	bl	800a660 <prvAddCurrentTaskToDelayedList>
	}
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20003ffc 	.word	0x20003ffc

0800ac60 <xTaskRemoveFromEventList>:
{
 800ac60:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ac62:	68c3      	ldr	r3, [r0, #12]
 800ac64:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ac66:	b944      	cbnz	r4, 800ac7a <xTaskRemoveFromEventList+0x1a>
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	e7fe      	b.n	800ac78 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac7a:	f104 0518 	add.w	r5, r4, #24
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7fe fc10 	bl	80094a4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac84:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <xTaskRemoveFromEventList+0x78>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	b9fb      	cbnz	r3, 800acca <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac8a:	1d25      	adds	r5, r4, #4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f7fe fc09 	bl	80094a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac94:	4a11      	ldr	r2, [pc, #68]	; (800acdc <xTaskRemoveFromEventList+0x7c>)
 800ac96:	6812      	ldr	r2, [r2, #0]
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d901      	bls.n	800aca0 <xTaskRemoveFromEventList+0x40>
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <xTaskRemoveFromEventList+0x7c>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aca4:	009a      	lsls	r2, r3, #2
 800aca6:	4629      	mov	r1, r5
 800aca8:	480d      	ldr	r0, [pc, #52]	; (800ace0 <xTaskRemoveFromEventList+0x80>)
 800acaa:	4410      	add	r0, r2
 800acac:	f7fe fbd4 	bl	8009458 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acb2:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <xTaskRemoveFromEventList+0x84>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	429a      	cmp	r2, r3
 800acba:	d90b      	bls.n	800acd4 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 800acbc:	2401      	movs	r4, #1
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <xTaskRemoveFromEventList+0x88>)
 800acc0:	601c      	str	r4, [r3, #0]
		prvResetNextTaskUnblockTime();
 800acc2:	f7ff fba3 	bl	800a40c <prvResetNextTaskUnblockTime>
}
 800acc6:	4620      	mov	r0, r4
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acca:	4629      	mov	r1, r5
 800accc:	4807      	ldr	r0, [pc, #28]	; (800acec <xTaskRemoveFromEventList+0x8c>)
 800acce:	f7fe fbc3 	bl	8009458 <vListInsertEnd>
 800acd2:	e7ed      	b.n	800acb0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800acd4:	2400      	movs	r4, #0
 800acd6:	e7f4      	b.n	800acc2 <xTaskRemoveFromEventList+0x62>
 800acd8:	20004474 	.word	0x20004474
 800acdc:	2000447c 	.word	0x2000447c
 800ace0:	20004008 	.word	0x20004008
 800ace4:	20003ffc 	.word	0x20003ffc
 800ace8:	200044f4 	.word	0x200044f4
 800acec:	200044b0 	.word	0x200044b0

0800acf0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acf0:	4b03      	ldr	r3, [pc, #12]	; (800ad00 <vTaskInternalSetTimeOutState+0x10>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acf6:	4b03      	ldr	r3, [pc, #12]	; (800ad04 <vTaskInternalSetTimeOutState+0x14>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6043      	str	r3, [r0, #4]
}
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	200044ac 	.word	0x200044ac
 800ad04:	200044f0 	.word	0x200044f0

0800ad08 <xTaskCheckForTimeOut>:
{
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800ad0a:	b150      	cbz	r0, 800ad22 <xTaskCheckForTimeOut+0x1a>
 800ad0c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800ad0e:	b989      	cbnz	r1, 800ad34 <xTaskCheckForTimeOut+0x2c>
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	e7fe      	b.n	800ad20 <xTaskCheckForTimeOut+0x18>
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	e7fe      	b.n	800ad32 <xTaskCheckForTimeOut+0x2a>
 800ad34:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800ad36:	f7fe fc35 	bl	80095a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ad3a:	4b11      	ldr	r3, [pc, #68]	; (800ad80 <xTaskCheckForTimeOut+0x78>)
 800ad3c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad3e:	6868      	ldr	r0, [r5, #4]
 800ad40:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d016      	beq.n	800ad78 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad4a:	682f      	ldr	r7, [r5, #0]
 800ad4c:	4e0d      	ldr	r6, [pc, #52]	; (800ad84 <xTaskCheckForTimeOut+0x7c>)
 800ad4e:	6836      	ldr	r6, [r6, #0]
 800ad50:	42b7      	cmp	r7, r6
 800ad52:	d001      	beq.n	800ad58 <xTaskCheckForTimeOut+0x50>
 800ad54:	4288      	cmp	r0, r1
 800ad56:	d911      	bls.n	800ad7c <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d803      	bhi.n	800ad64 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ad60:	2401      	movs	r4, #1
 800ad62:	e005      	b.n	800ad70 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff ffc1 	bl	800acf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ad70:	f7fe fc3a 	bl	80095e8 <vPortExitCritical>
}
 800ad74:	4620      	mov	r0, r4
 800ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800ad78:	2400      	movs	r4, #0
 800ad7a:	e7f9      	b.n	800ad70 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800ad7c:	2401      	movs	r4, #1
 800ad7e:	e7f7      	b.n	800ad70 <xTaskCheckForTimeOut+0x68>
 800ad80:	200044f0 	.word	0x200044f0
 800ad84:	200044ac 	.word	0x200044ac

0800ad88 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ad88:	4b01      	ldr	r3, [pc, #4]	; (800ad90 <vTaskMissedYield+0x8>)
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	601a      	str	r2, [r3, #0]
}
 800ad8e:	4770      	bx	lr
 800ad90:	200044f4 	.word	0x200044f4

0800ad94 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <eTaskConfirmSleepModeStatus+0x2c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	b95b      	cbnz	r3, 800adb2 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <eTaskConfirmSleepModeStatus+0x30>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	b953      	cbnz	r3, 800adb6 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800ada0:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <eTaskConfirmSleepModeStatus+0x34>)
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	4b09      	ldr	r3, [pc, #36]	; (800adcc <eTaskConfirmSleepModeStatus+0x38>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	429a      	cmp	r2, r3
 800adac:	d005      	beq.n	800adba <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800adae:	2001      	movs	r0, #1
 800adb0:	4770      	bx	lr
			eReturn = eAbortSleep;
 800adb2:	2000      	movs	r0, #0
 800adb4:	4770      	bx	lr
			eReturn = eAbortSleep;
 800adb6:	2000      	movs	r0, #0
 800adb8:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800adba:	2002      	movs	r0, #2
	}
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	200044b0 	.word	0x200044b0
 800adc4:	200044f4 	.word	0x200044f4
 800adc8:	200044c8 	.word	0x200044c8
 800adcc:	20004468 	.word	0x20004468

0800add0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800add0:	4b01      	ldr	r3, [pc, #4]	; (800add8 <xTaskGetCurrentTaskHandle+0x8>)
 800add2:	6818      	ldr	r0, [r3, #0]
	}
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	20003ffc 	.word	0x20003ffc

0800addc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <xTaskGetSchedulerState+0x18>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	b133      	cbz	r3, 800adf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade2:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <xTaskGetSchedulerState+0x1c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	b10b      	cbz	r3, 800adec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800ade8:	2000      	movs	r0, #0
	}
 800adea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800adec:	2002      	movs	r0, #2
 800adee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adf0:	2001      	movs	r0, #1
 800adf2:	4770      	bx	lr
 800adf4:	200044c4 	.word	0x200044c4
 800adf8:	20004474 	.word	0x20004474

0800adfc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d040      	beq.n	800ae82 <xTaskPriorityInherit+0x86>
	{
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae04:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ae06:	4920      	ldr	r1, [pc, #128]	; (800ae88 <xTaskPriorityInherit+0x8c>)
 800ae08:	6809      	ldr	r1, [r1, #0]
 800ae0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	d22e      	bcs.n	800ae6e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae10:	6981      	ldr	r1, [r0, #24]
 800ae12:	2900      	cmp	r1, #0
 800ae14:	db05      	blt.n	800ae22 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae16:	491c      	ldr	r1, [pc, #112]	; (800ae88 <xTaskPriorityInherit+0x8c>)
 800ae18:	6809      	ldr	r1, [r1, #0]
 800ae1a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ae1c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800ae20:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae22:	6968      	ldr	r0, [r5, #20]
 800ae24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ae28:	0091      	lsls	r1, r2, #2
 800ae2a:	4a18      	ldr	r2, [pc, #96]	; (800ae8c <xTaskPriorityInherit+0x90>)
 800ae2c:	440a      	add	r2, r1
 800ae2e:	4290      	cmp	r0, r2
 800ae30:	d005      	beq.n	800ae3e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae32:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <xTaskPriorityInherit+0x8c>)
 800ae34:	6812      	ldr	r2, [r2, #0]
 800ae36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae38:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800ae3a:	2001      	movs	r0, #1
	}
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae3e:	1d2c      	adds	r4, r5, #4
 800ae40:	4620      	mov	r0, r4
 800ae42:	f7fe fb2f 	bl	80094a4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae46:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <xTaskPriorityInherit+0x8c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae4e:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <xTaskPriorityInherit+0x94>)
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d901      	bls.n	800ae5a <xTaskPriorityInherit+0x5e>
 800ae56:	4a0e      	ldr	r2, [pc, #56]	; (800ae90 <xTaskPriorityInherit+0x94>)
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae5e:	009a      	lsls	r2, r3, #2
 800ae60:	4621      	mov	r1, r4
 800ae62:	480a      	ldr	r0, [pc, #40]	; (800ae8c <xTaskPriorityInherit+0x90>)
 800ae64:	4410      	add	r0, r2
 800ae66:	f7fe faf7 	bl	8009458 <vListInsertEnd>
				xReturn = pdTRUE;
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	e7e6      	b.n	800ae3c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae6e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <xTaskPriorityInherit+0x8c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d201      	bcs.n	800ae7e <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 800ae7a:	2001      	movs	r0, #1
		return xReturn;
 800ae7c:	e7de      	b.n	800ae3c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7dc      	b.n	800ae3c <xTaskPriorityInherit+0x40>
 800ae82:	2000      	movs	r0, #0
	}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	20003ffc 	.word	0x20003ffc
 800ae8c:	20004008 	.word	0x20004008
 800ae90:	2000447c 	.word	0x2000447c

0800ae94 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d038      	beq.n	800af0a <xTaskPriorityDisinherit+0x76>
	{
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800ae9c:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <xTaskPriorityDisinherit+0x84>)
 800ae9e:	6812      	ldr	r2, [r2, #0]
 800aea0:	4282      	cmp	r2, r0
 800aea2:	d008      	beq.n	800aeb6 <xTaskPriorityDisinherit+0x22>
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	e7fe      	b.n	800aeb4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeb6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800aeb8:	b942      	cbnz	r2, 800aecc <xTaskPriorityDisinherit+0x38>
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	e7fe      	b.n	800aeca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800aecc:	3a01      	subs	r2, #1
 800aece:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aed0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800aed2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aed4:	4288      	cmp	r0, r1
 800aed6:	d01a      	beq.n	800af0e <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aed8:	b9da      	cbnz	r2, 800af12 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeda:	1d25      	adds	r5, r4, #4
 800aedc:	4628      	mov	r0, r5
 800aede:	f7fe fae1 	bl	80094a4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aee2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800aee4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aeea:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800aeec:	4a0b      	ldr	r2, [pc, #44]	; (800af1c <xTaskPriorityDisinherit+0x88>)
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d901      	bls.n	800aef8 <xTaskPriorityDisinherit+0x64>
 800aef4:	4a09      	ldr	r2, [pc, #36]	; (800af1c <xTaskPriorityDisinherit+0x88>)
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	4629      	mov	r1, r5
 800aefa:	4a09      	ldr	r2, [pc, #36]	; (800af20 <xTaskPriorityDisinherit+0x8c>)
 800aefc:	2014      	movs	r0, #20
 800aefe:	fb00 2003 	mla	r0, r0, r3, r2
 800af02:	f7fe faa9 	bl	8009458 <vListInsertEnd>
					xReturn = pdTRUE;
 800af06:	2001      	movs	r0, #1
	}
 800af08:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800af0a:	2000      	movs	r0, #0
	}
 800af0c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800af0e:	2000      	movs	r0, #0
 800af10:	e7fa      	b.n	800af08 <xTaskPriorityDisinherit+0x74>
 800af12:	2000      	movs	r0, #0
		return xReturn;
 800af14:	e7f8      	b.n	800af08 <xTaskPriorityDisinherit+0x74>
 800af16:	bf00      	nop
 800af18:	20003ffc 	.word	0x20003ffc
 800af1c:	2000447c 	.word	0x2000447c
 800af20:	20004008 	.word	0x20004008

0800af24 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800af24:	2800      	cmp	r0, #0
 800af26:	d045      	beq.n	800afb4 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800af2c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800af2e:	b940      	cbnz	r0, 800af42 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	e7fe      	b.n	800af40 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af44:	428a      	cmp	r2, r1
 800af46:	d200      	bcs.n	800af4a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af48:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800af4c:	4291      	cmp	r1, r2
 800af4e:	d001      	beq.n	800af54 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af50:	2801      	cmp	r0, #1
 800af52:	d000      	beq.n	800af56 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800af54:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800af56:	4818      	ldr	r0, [pc, #96]	; (800afb8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800af58:	6800      	ldr	r0, [r0, #0]
 800af5a:	4298      	cmp	r0, r3
 800af5c:	d108      	bne.n	800af70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	e7fe      	b.n	800af6e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800af70:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af72:	6998      	ldr	r0, [r3, #24]
 800af74:	2800      	cmp	r0, #0
 800af76:	db02      	blt.n	800af7e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af78:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800af7c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	480e      	ldr	r0, [pc, #56]	; (800afbc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800af82:	2414      	movs	r4, #20
 800af84:	fb04 0101 	mla	r1, r4, r1, r0
 800af88:	428a      	cmp	r2, r1
 800af8a:	d1e3      	bne.n	800af54 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800af8c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af8e:	1d1d      	adds	r5, r3, #4
 800af90:	4628      	mov	r0, r5
 800af92:	f7fe fa87 	bl	80094a4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800af96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af98:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d901      	bls.n	800afa4 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800afa0:	4a07      	ldr	r2, [pc, #28]	; (800afc0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	4629      	mov	r1, r5
 800afa6:	4a05      	ldr	r2, [pc, #20]	; (800afbc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800afa8:	2014      	movs	r0, #20
 800afaa:	fb00 2003 	mla	r0, r0, r3, r2
 800afae:	f7fe fa53 	bl	8009458 <vListInsertEnd>
	}
 800afb2:	e7cf      	b.n	800af54 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20003ffc 	.word	0x20003ffc
 800afbc:	20004008 	.word	0x20004008
 800afc0:	2000447c 	.word	0x2000447c

0800afc4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <pvTaskIncrementMutexHeldCount+0x18>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	b123      	cbz	r3, 800afd4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800afca:	4b04      	ldr	r3, [pc, #16]	; (800afdc <pvTaskIncrementMutexHeldCount+0x18>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800afd0:	3301      	adds	r3, #1
 800afd2:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800afd4:	4b01      	ldr	r3, [pc, #4]	; (800afdc <pvTaskIncrementMutexHeldCount+0x18>)
 800afd6:	6818      	ldr	r0, [r3, #0]
	}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20003ffc 	.word	0x20003ffc

0800afe0 <xTaskNotifyWait>:
	{
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	4607      	mov	r7, r0
 800afe4:	460d      	mov	r5, r1
 800afe6:	4614      	mov	r4, r2
 800afe8:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800afea:	f7fe fadb 	bl	80095a4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800afee:	4b20      	ldr	r3, [pc, #128]	; (800b070 <xTaskNotifyWait+0x90>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d00a      	beq.n	800b012 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800affc:	4b1c      	ldr	r3, [pc, #112]	; (800b070 <xTaskNotifyWait+0x90>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800b002:	ea20 0007 	bic.w	r0, r0, r7
 800b006:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800b010:	b9ce      	cbnz	r6, 800b046 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800b012:	f7fe fae9 	bl	80095e8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800b016:	f7fe fac5 	bl	80095a4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800b01a:	b11c      	cbz	r4, 800b024 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b01c:	4b14      	ldr	r3, [pc, #80]	; (800b070 <xTaskNotifyWait+0x90>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b022:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b024:	4b12      	ldr	r3, [pc, #72]	; (800b070 <xTaskNotifyWait+0x90>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d016      	beq.n	800b060 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800b032:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b034:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <xTaskNotifyWait+0x90>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800b03e:	f7fe fad3 	bl	80095e8 <vPortExitCritical>
	}
 800b042:	4620      	mov	r0, r4
 800b044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b046:	4611      	mov	r1, r2
 800b048:	4630      	mov	r0, r6
 800b04a:	f7ff fb09 	bl	800a660 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800b04e:	4b09      	ldr	r3, [pc, #36]	; (800b074 <xTaskNotifyWait+0x94>)
 800b050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	e7d8      	b.n	800b012 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b060:	4b03      	ldr	r3, [pc, #12]	; (800b070 <xTaskNotifyWait+0x90>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b066:	ea23 0505 	bic.w	r5, r3, r5
 800b06a:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 800b06c:	2401      	movs	r4, #1
 800b06e:	e7e1      	b.n	800b034 <xTaskNotifyWait+0x54>
 800b070:	20003ffc 	.word	0x20003ffc
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <xTaskGenericNotify>:
	{
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800b07a:	b940      	cbnz	r0, 800b08e <xTaskGenericNotify+0x16>
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	e7fe      	b.n	800b08c <xTaskGenericNotify+0x14>
 800b08e:	4604      	mov	r4, r0
 800b090:	461f      	mov	r7, r3
 800b092:	4615      	mov	r5, r2
 800b094:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 800b096:	f7fe fa85 	bl	80095a4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800b09a:	b10f      	cbz	r7, 800b0a0 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b09c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b09e:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b0a0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800b0a4:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 800b0ac:	1e6a      	subs	r2, r5, #1
 800b0ae:	2a03      	cmp	r2, #3
 800b0b0:	d81a      	bhi.n	800b0e8 <xTaskGenericNotify+0x70>
 800b0b2:	e8df f002 	tbb	[pc, r2]
 800b0b6:	0c02      	.short	0x0c02
 800b0b8:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 800b0ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b0bc:	4316      	orrs	r6, r2
 800b0be:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b0c0:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d014      	beq.n	800b0f0 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 800b0c6:	f7fe fa8f 	bl	80095e8 <vPortExitCritical>
	}
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800b0ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b0d0:	3201      	adds	r2, #1
 800b0d2:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b0d4:	2501      	movs	r5, #1
					break;
 800b0d6:	e7f4      	b.n	800b0c2 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 800b0d8:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b0da:	2501      	movs	r5, #1
					break;
 800b0dc:	e7f1      	b.n	800b0c2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d004      	beq.n	800b0ec <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 800b0e2:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b0e4:	2501      	movs	r5, #1
 800b0e6:	e7ec      	b.n	800b0c2 <xTaskGenericNotify+0x4a>
 800b0e8:	2501      	movs	r5, #1
 800b0ea:	e7ea      	b.n	800b0c2 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 800b0ec:	2500      	movs	r5, #0
 800b0ee:	e7e8      	b.n	800b0c2 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f0:	1d26      	adds	r6, r4, #4
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7fe f9d6 	bl	80094a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b0f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0fa:	4a14      	ldr	r2, [pc, #80]	; (800b14c <xTaskGenericNotify+0xd4>)
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <xTaskGenericNotify+0x8e>
 800b102:	4a12      	ldr	r2, [pc, #72]	; (800b14c <xTaskGenericNotify+0xd4>)
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	4631      	mov	r1, r6
 800b108:	4a11      	ldr	r2, [pc, #68]	; (800b150 <xTaskGenericNotify+0xd8>)
 800b10a:	2014      	movs	r0, #20
 800b10c:	fb00 2003 	mla	r0, r0, r3, r2
 800b110:	f7fe f9a2 	bl	8009458 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b116:	b143      	cbz	r3, 800b12a <xTaskGenericNotify+0xb2>
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	e7fe      	b.n	800b128 <xTaskGenericNotify+0xb0>
					prvResetNextTaskUnblockTime();
 800b12a:	f7ff f96f 	bl	800a40c <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b12e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b130:	4b08      	ldr	r3, [pc, #32]	; (800b154 <xTaskGenericNotify+0xdc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	429a      	cmp	r2, r3
 800b138:	d9c5      	bls.n	800b0c6 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 800b13a:	4b07      	ldr	r3, [pc, #28]	; (800b158 <xTaskGenericNotify+0xe0>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	e7bc      	b.n	800b0c6 <xTaskGenericNotify+0x4e>
 800b14c:	2000447c 	.word	0x2000447c
 800b150:	20004008 	.word	0x20004008
 800b154:	20003ffc 	.word	0x20003ffc
 800b158:	e000ed04 	.word	0xe000ed04

0800b15c <xTaskGenericNotifyFromISR>:
	{
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800b162:	b940      	cbnz	r0, 800b176 <xTaskGenericNotifyFromISR+0x1a>
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	e7fe      	b.n	800b174 <xTaskGenericNotifyFromISR+0x18>
 800b176:	4604      	mov	r4, r0
 800b178:	4699      	mov	r9, r3
 800b17a:	4615      	mov	r5, r2
 800b17c:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b17e:	f7fe fb1f 	bl	80097c0 <vPortValidateInterruptPriority>
	__asm volatile
 800b182:	f3ef 8711 	mrs	r7, BASEPRI
 800b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800b196:	f1b9 0f00 	cmp.w	r9, #0
 800b19a:	d002      	beq.n	800b1a2 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b19c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b19e:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1a2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800b1a6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 800b1ae:	1e6a      	subs	r2, r5, #1
 800b1b0:	2a03      	cmp	r2, #3
 800b1b2:	d81e      	bhi.n	800b1f2 <xTaskGenericNotifyFromISR+0x96>
 800b1b4:	e8df f002 	tbb	[pc, r2]
 800b1b8:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 800b1bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b1be:	ea42 0208 	orr.w	r2, r2, r8
 800b1c2:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b1c4:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d017      	beq.n	800b1fa <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 800b1ca:	f387 8811 	msr	BASEPRI, r7
	}
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800b1d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b1d6:	3201      	adds	r2, #1
 800b1d8:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b1da:	2501      	movs	r5, #1
					break;
 800b1dc:	e7f3      	b.n	800b1c6 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800b1de:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b1e2:	2501      	movs	r5, #1
					break;
 800b1e4:	e7ef      	b.n	800b1c6 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d005      	beq.n	800b1f6 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 800b1ea:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800b1ee:	2501      	movs	r5, #1
 800b1f0:	e7e9      	b.n	800b1c6 <xTaskGenericNotifyFromISR+0x6a>
 800b1f2:	2501      	movs	r5, #1
 800b1f4:	e7e7      	b.n	800b1c6 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	e7e5      	b.n	800b1c6 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b1fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b1fc:	b143      	cbz	r3, 800b210 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	e7fe      	b.n	800b20e <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b210:	4b14      	ldr	r3, [pc, #80]	; (800b264 <xTaskGenericNotifyFromISR+0x108>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	b9e3      	cbnz	r3, 800b250 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b216:	f104 0804 	add.w	r8, r4, #4
 800b21a:	4640      	mov	r0, r8
 800b21c:	f7fe f942 	bl	80094a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b222:	4a11      	ldr	r2, [pc, #68]	; (800b268 <xTaskGenericNotifyFromISR+0x10c>)
 800b224:	6812      	ldr	r2, [r2, #0]
 800b226:	4293      	cmp	r3, r2
 800b228:	d901      	bls.n	800b22e <xTaskGenericNotifyFromISR+0xd2>
 800b22a:	4a0f      	ldr	r2, [pc, #60]	; (800b268 <xTaskGenericNotifyFromISR+0x10c>)
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	4641      	mov	r1, r8
 800b230:	4a0e      	ldr	r2, [pc, #56]	; (800b26c <xTaskGenericNotifyFromISR+0x110>)
 800b232:	2014      	movs	r0, #20
 800b234:	fb00 2003 	mla	r0, r0, r3, r2
 800b238:	f7fe f90e 	bl	8009458 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b23c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <xTaskGenericNotifyFromISR+0x114>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	429a      	cmp	r2, r3
 800b246:	d9c0      	bls.n	800b1ca <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800b248:	b146      	cbz	r6, 800b25c <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	6033      	str	r3, [r6, #0]
 800b24e:	e7bc      	b.n	800b1ca <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b250:	f104 0118 	add.w	r1, r4, #24
 800b254:	4807      	ldr	r0, [pc, #28]	; (800b274 <xTaskGenericNotifyFromISR+0x118>)
 800b256:	f7fe f8ff 	bl	8009458 <vListInsertEnd>
 800b25a:	e7ef      	b.n	800b23c <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <xTaskGenericNotifyFromISR+0x11c>)
 800b25e:	2201      	movs	r2, #1
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e7b2      	b.n	800b1ca <xTaskGenericNotifyFromISR+0x6e>
 800b264:	20004474 	.word	0x20004474
 800b268:	2000447c 	.word	0x2000447c
 800b26c:	20004008 	.word	0x20004008
 800b270:	20003ffc 	.word	0x20003ffc
 800b274:	200044b0 	.word	0x200044b0
 800b278:	200044f4 	.word	0x200044f4

0800b27c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <prvGetNextExpireTime+0x1c>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	6813      	ldr	r3, [r2, #0]
 800b282:	fab3 f383 	clz	r3, r3
 800b286:	095b      	lsrs	r3, r3, #5
 800b288:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b28a:	b913      	cbnz	r3, 800b292 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b28c:	68d3      	ldr	r3, [r2, #12]
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b292:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	200044f8 	.word	0x200044f8

0800b29c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b29c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b29e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2a2:	4291      	cmp	r1, r2
 800b2a4:	d80c      	bhi.n	800b2c0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a6:	1ad2      	subs	r2, r2, r3
 800b2a8:	6983      	ldr	r3, [r0, #24]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d301      	bcc.n	800b2b2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	e010      	b.n	800b2d4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2b2:	1d01      	adds	r1, r0, #4
 800b2b4:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <prvInsertTimerInActiveList+0x40>)
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	f7fe f8da 	bl	8009470 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b2bc:	2000      	movs	r0, #0
 800b2be:	e009      	b.n	800b2d4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d201      	bcs.n	800b2c8 <prvInsertTimerInActiveList+0x2c>
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d206      	bcs.n	800b2d6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2c8:	1d01      	adds	r1, r0, #4
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <prvInsertTimerInActiveList+0x44>)
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	f7fe f8cf 	bl	8009470 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b2d2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800b2d4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800b2d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b2d8:	e7fc      	b.n	800b2d4 <prvInsertTimerInActiveList+0x38>
 800b2da:	bf00      	nop
 800b2dc:	200044fc 	.word	0x200044fc
 800b2e0:	200044f8 	.word	0x200044f8

0800b2e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2e4:	b530      	push	{r4, r5, lr}
 800b2e6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2e8:	f7fe f95c 	bl	80095a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2ec:	4b11      	ldr	r3, [pc, #68]	; (800b334 <prvCheckForValidListAndQueue+0x50>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	b11b      	cbz	r3, 800b2fa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2f2:	f7fe f979 	bl	80095e8 <vPortExitCritical>
}
 800b2f6:	b003      	add	sp, #12
 800b2f8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b2fa:	4d0f      	ldr	r5, [pc, #60]	; (800b338 <prvCheckForValidListAndQueue+0x54>)
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7fe f89d 	bl	800943c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b302:	4c0e      	ldr	r4, [pc, #56]	; (800b33c <prvCheckForValidListAndQueue+0x58>)
 800b304:	4620      	mov	r0, r4
 800b306:	f7fe f899 	bl	800943c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b30a:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <prvCheckForValidListAndQueue+0x5c>)
 800b30c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b30e:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <prvCheckForValidListAndQueue+0x60>)
 800b310:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b312:	2300      	movs	r3, #0
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <prvCheckForValidListAndQueue+0x64>)
 800b318:	4a0c      	ldr	r2, [pc, #48]	; (800b34c <prvCheckForValidListAndQueue+0x68>)
 800b31a:	2110      	movs	r1, #16
 800b31c:	200a      	movs	r0, #10
 800b31e:	f7fe fb7a 	bl	8009a16 <xQueueGenericCreateStatic>
 800b322:	4b04      	ldr	r3, [pc, #16]	; (800b334 <prvCheckForValidListAndQueue+0x50>)
 800b324:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b326:	2800      	cmp	r0, #0
 800b328:	d0e3      	beq.n	800b2f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b32a:	4909      	ldr	r1, [pc, #36]	; (800b350 <prvCheckForValidListAndQueue+0x6c>)
 800b32c:	f7fe ffde 	bl	800a2ec <vQueueAddToRegistry>
 800b330:	e7df      	b.n	800b2f2 <prvCheckForValidListAndQueue+0xe>
 800b332:	bf00      	nop
 800b334:	2000461c 	.word	0x2000461c
 800b338:	200045a0 	.word	0x200045a0
 800b33c:	200045b4 	.word	0x200045b4
 800b340:	200044f8 	.word	0x200044f8
 800b344:	200044fc 	.word	0x200044fc
 800b348:	200045cc 	.word	0x200045cc
 800b34c:	20004500 	.word	0x20004500
 800b350:	0800e680 	.word	0x0800e680

0800b354 <xTimerCreateTimerTask>:
{
 800b354:	b510      	push	{r4, lr}
 800b356:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b358:	f7ff ffc4 	bl	800b2e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b35c:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <xTimerCreateTimerTask+0x54>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	b1cb      	cbz	r3, 800b396 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b362:	2400      	movs	r4, #0
 800b364:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b366:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b368:	aa07      	add	r2, sp, #28
 800b36a:	a906      	add	r1, sp, #24
 800b36c:	a805      	add	r0, sp, #20
 800b36e:	f7fd ff3d 	bl	80091ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	9302      	str	r3, [sp, #8]
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	2302      	movs	r3, #2
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	4623      	mov	r3, r4
 800b380:	9a07      	ldr	r2, [sp, #28]
 800b382:	490a      	ldr	r1, [pc, #40]	; (800b3ac <xTimerCreateTimerTask+0x58>)
 800b384:	480a      	ldr	r0, [pc, #40]	; (800b3b0 <xTimerCreateTimerTask+0x5c>)
 800b386:	f7ff f9a9 	bl	800a6dc <xTaskCreateStatic>
 800b38a:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <xTimerCreateTimerTask+0x60>)
 800b38c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b38e:	b110      	cbz	r0, 800b396 <xTimerCreateTimerTask+0x42>
}
 800b390:	2001      	movs	r0, #1
 800b392:	b008      	add	sp, #32
 800b394:	bd10      	pop	{r4, pc}
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	e7fe      	b.n	800b3a6 <xTimerCreateTimerTask+0x52>
 800b3a8:	2000461c 	.word	0x2000461c
 800b3ac:	0800e688 	.word	0x0800e688
 800b3b0:	0800b699 	.word	0x0800b699
 800b3b4:	20004620 	.word	0x20004620

0800b3b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b3b8:	b1c8      	cbz	r0, 800b3ee <xTimerGenericCommand+0x36>
{
 800b3ba:	b530      	push	{r4, r5, lr}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	4615      	mov	r5, r2
 800b3c0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800b3c2:	4a17      	ldr	r2, [pc, #92]	; (800b420 <xTimerGenericCommand+0x68>)
 800b3c4:	6810      	ldr	r0, [r2, #0]
 800b3c6:	b340      	cbz	r0, 800b41a <xTimerGenericCommand+0x62>
 800b3c8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800b3ca:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3cc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b3ce:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3d0:	2905      	cmp	r1, #5
 800b3d2:	dc1d      	bgt.n	800b410 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3d4:	f7ff fd02 	bl	800addc <xTaskGetSchedulerState>
 800b3d8:	2802      	cmp	r0, #2
 800b3da:	d011      	beq.n	800b400 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3dc:	2300      	movs	r3, #0
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4669      	mov	r1, sp
 800b3e2:	480f      	ldr	r0, [pc, #60]	; (800b420 <xTimerGenericCommand+0x68>)
 800b3e4:	6800      	ldr	r0, [r0, #0]
 800b3e6:	f7fe fbcb 	bl	8009b80 <xQueueGenericSend>
}
 800b3ea:	b005      	add	sp, #20
 800b3ec:	bd30      	pop	{r4, r5, pc}
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	e7fe      	b.n	800b3fe <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b400:	2300      	movs	r3, #0
 800b402:	9a08      	ldr	r2, [sp, #32]
 800b404:	4669      	mov	r1, sp
 800b406:	4806      	ldr	r0, [pc, #24]	; (800b420 <xTimerGenericCommand+0x68>)
 800b408:	6800      	ldr	r0, [r0, #0]
 800b40a:	f7fe fbb9 	bl	8009b80 <xQueueGenericSend>
 800b40e:	e7ec      	b.n	800b3ea <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b410:	2300      	movs	r3, #0
 800b412:	4669      	mov	r1, sp
 800b414:	f7fe fcb8 	bl	8009d88 <xQueueGenericSendFromISR>
 800b418:	e7e7      	b.n	800b3ea <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800b41a:	2000      	movs	r0, #0
	return xReturn;
 800b41c:	e7e5      	b.n	800b3ea <xTimerGenericCommand+0x32>
 800b41e:	bf00      	nop
 800b420:	2000461c 	.word	0x2000461c

0800b424 <prvSwitchTimerLists>:
{
 800b424:	b570      	push	{r4, r5, r6, lr}
 800b426:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b428:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <prvSwitchTimerLists+0x70>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	b352      	cbz	r2, 800b486 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b434:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b436:	1d25      	adds	r5, r4, #4
 800b438:	4628      	mov	r0, r5
 800b43a:	f7fe f833 	bl	80094a4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b440:	4620      	mov	r0, r4
 800b442:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b444:	69e3      	ldr	r3, [r4, #28]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d1ee      	bne.n	800b428 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b44a:	69a3      	ldr	r3, [r4, #24]
 800b44c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800b44e:	429e      	cmp	r6, r3
 800b450:	d207      	bcs.n	800b462 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b452:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b454:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b456:	4629      	mov	r1, r5
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <prvSwitchTimerLists+0x70>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	f7fe f808 	bl	8009470 <vListInsert>
 800b460:	e7e2      	b.n	800b428 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b462:	2100      	movs	r1, #0
 800b464:	9100      	str	r1, [sp, #0]
 800b466:	460b      	mov	r3, r1
 800b468:	4632      	mov	r2, r6
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff ffa4 	bl	800b3b8 <xTimerGenericCommand>
				configASSERT( xResult );
 800b470:	2800      	cmp	r0, #0
 800b472:	d1d9      	bne.n	800b428 <prvSwitchTimerLists+0x4>
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	e7fe      	b.n	800b484 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800b486:	4a04      	ldr	r2, [pc, #16]	; (800b498 <prvSwitchTimerLists+0x74>)
 800b488:	6810      	ldr	r0, [r2, #0]
 800b48a:	4902      	ldr	r1, [pc, #8]	; (800b494 <prvSwitchTimerLists+0x70>)
 800b48c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800b48e:	6013      	str	r3, [r2, #0]
}
 800b490:	b002      	add	sp, #8
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	200044f8 	.word	0x200044f8
 800b498:	200044fc 	.word	0x200044fc

0800b49c <prvSampleTimeNow>:
{
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800b4a0:	f7ff f9da 	bl	800a858 <xTaskGetTickCount>
 800b4a4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800b4a6:	4b07      	ldr	r3, [pc, #28]	; (800b4c4 <prvSampleTimeNow+0x28>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4283      	cmp	r3, r0
 800b4ac:	d805      	bhi.n	800b4ba <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800b4b2:	4b04      	ldr	r3, [pc, #16]	; (800b4c4 <prvSampleTimeNow+0x28>)
 800b4b4:	601c      	str	r4, [r3, #0]
}
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800b4ba:	f7ff ffb3 	bl	800b424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	e7f6      	b.n	800b4b2 <prvSampleTimeNow+0x16>
 800b4c4:	200045c8 	.word	0x200045c8

0800b4c8 <prvProcessExpiredTimer>:
{
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4d0:	4b14      	ldr	r3, [pc, #80]	; (800b524 <prvProcessExpiredTimer+0x5c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4d8:	1d20      	adds	r0, r4, #4
 800b4da:	f7fd ffe3 	bl	80094a4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b4de:	69e3      	ldr	r3, [r4, #28]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d004      	beq.n	800b4ee <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4798      	blx	r3
}
 800b4ea:	b002      	add	sp, #8
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4ee:	69a1      	ldr	r1, [r4, #24]
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4429      	add	r1, r5
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7ff fed0 	bl	800b29c <prvInsertTimerInActiveList>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d0f1      	beq.n	800b4e4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b500:	2100      	movs	r1, #0
 800b502:	9100      	str	r1, [sp, #0]
 800b504:	460b      	mov	r3, r1
 800b506:	462a      	mov	r2, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	f7ff ff55 	bl	800b3b8 <xTimerGenericCommand>
			configASSERT( xResult );
 800b50e:	2800      	cmp	r0, #0
 800b510:	d1e8      	bne.n	800b4e4 <prvProcessExpiredTimer+0x1c>
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	e7fe      	b.n	800b522 <prvProcessExpiredTimer+0x5a>
 800b524:	200044f8 	.word	0x200044f8

0800b528 <prvProcessTimerOrBlockTask>:
{
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	4606      	mov	r6, r0
 800b52e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800b530:	f7ff f98a 	bl	800a848 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b534:	a801      	add	r0, sp, #4
 800b536:	f7ff ffb1 	bl	800b49c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	bb1b      	cbnz	r3, 800b586 <prvProcessTimerOrBlockTask+0x5e>
 800b53e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b540:	b90c      	cbnz	r4, 800b546 <prvProcessTimerOrBlockTask+0x1e>
 800b542:	42b0      	cmp	r0, r6
 800b544:	d218      	bcs.n	800b578 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800b546:	b12c      	cbz	r4, 800b554 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b548:	4b11      	ldr	r3, [pc, #68]	; (800b590 <prvProcessTimerOrBlockTask+0x68>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681c      	ldr	r4, [r3, #0]
 800b54e:	fab4 f484 	clz	r4, r4
 800b552:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b554:	4622      	mov	r2, r4
 800b556:	1b71      	subs	r1, r6, r5
 800b558:	4b0e      	ldr	r3, [pc, #56]	; (800b594 <prvProcessTimerOrBlockTask+0x6c>)
 800b55a:	6818      	ldr	r0, [r3, #0]
 800b55c:	f7fe ff06 	bl	800a36c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b560:	f7ff fa26 	bl	800a9b0 <xTaskResumeAll>
 800b564:	b988      	cbnz	r0, 800b58a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800b566:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvProcessTimerOrBlockTask+0x70>)
 800b568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	e008      	b.n	800b58a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800b578:	f7ff fa1a 	bl	800a9b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b57c:	4629      	mov	r1, r5
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ffa2 	bl	800b4c8 <prvProcessExpiredTimer>
 800b584:	e001      	b.n	800b58a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800b586:	f7ff fa13 	bl	800a9b0 <xTaskResumeAll>
}
 800b58a:	b002      	add	sp, #8
 800b58c:	bd70      	pop	{r4, r5, r6, pc}
 800b58e:	bf00      	nop
 800b590:	200044fc 	.word	0x200044fc
 800b594:	2000461c 	.word	0x2000461c
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <prvProcessReceivedCommands>:
{
 800b59c:	b530      	push	{r4, r5, lr}
 800b59e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5a0:	e002      	b.n	800b5a8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5a2:	9b04      	ldr	r3, [sp, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da0f      	bge.n	800b5c8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	a904      	add	r1, sp, #16
 800b5ac:	4b39      	ldr	r3, [pc, #228]	; (800b694 <prvProcessReceivedCommands+0xf8>)
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	f7fe fcaa 	bl	8009f08 <xQueueReceive>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d06a      	beq.n	800b68e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b5b8:	9b04      	ldr	r3, [sp, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	daf1      	bge.n	800b5a2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5be:	9907      	ldr	r1, [sp, #28]
 800b5c0:	9806      	ldr	r0, [sp, #24]
 800b5c2:	9b05      	ldr	r3, [sp, #20]
 800b5c4:	4798      	blx	r3
 800b5c6:	e7ec      	b.n	800b5a2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5c8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5ca:	6963      	ldr	r3, [r4, #20]
 800b5cc:	b113      	cbz	r3, 800b5d4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5ce:	1d20      	adds	r0, r4, #4
 800b5d0:	f7fd ff68 	bl	80094a4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5d4:	a803      	add	r0, sp, #12
 800b5d6:	f7ff ff61 	bl	800b49c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d8e3      	bhi.n	800b5a8 <prvProcessReceivedCommands+0xc>
 800b5e0:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <prvProcessReceivedCommands+0x4c>)
 800b5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e6:	bf00      	nop
 800b5e8:	0800b611 	.word	0x0800b611
 800b5ec:	0800b611 	.word	0x0800b611
 800b5f0:	0800b611 	.word	0x0800b611
 800b5f4:	0800b5a9 	.word	0x0800b5a9
 800b5f8:	0800b659 	.word	0x0800b659
 800b5fc:	0800b67f 	.word	0x0800b67f
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b611 	.word	0x0800b611
 800b608:	0800b5a9 	.word	0x0800b5a9
 800b60c:	0800b659 	.word	0x0800b659
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b610:	9905      	ldr	r1, [sp, #20]
 800b612:	69a5      	ldr	r5, [r4, #24]
 800b614:	460b      	mov	r3, r1
 800b616:	4602      	mov	r2, r0
 800b618:	4429      	add	r1, r5
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff fe3e 	bl	800b29c <prvInsertTimerInActiveList>
 800b620:	2800      	cmp	r0, #0
 800b622:	d0c1      	beq.n	800b5a8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b626:	4620      	mov	r0, r4
 800b628:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b62a:	69e3      	ldr	r3, [r4, #28]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d1bb      	bne.n	800b5a8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b630:	69a2      	ldr	r2, [r4, #24]
 800b632:	2100      	movs	r1, #0
 800b634:	9100      	str	r1, [sp, #0]
 800b636:	460b      	mov	r3, r1
 800b638:	9805      	ldr	r0, [sp, #20]
 800b63a:	4402      	add	r2, r0
 800b63c:	4620      	mov	r0, r4
 800b63e:	f7ff febb 	bl	800b3b8 <xTimerGenericCommand>
							configASSERT( xResult );
 800b642:	2800      	cmp	r0, #0
 800b644:	d1b0      	bne.n	800b5a8 <prvProcessReceivedCommands+0xc>
 800b646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	e7fe      	b.n	800b656 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b658:	9905      	ldr	r1, [sp, #20]
 800b65a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b65c:	b131      	cbz	r1, 800b66c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b65e:	4603      	mov	r3, r0
 800b660:	4602      	mov	r2, r0
 800b662:	4401      	add	r1, r0
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff fe19 	bl	800b29c <prvInsertTimerInActiveList>
					break;
 800b66a:	e79d      	b.n	800b5a8 <prvProcessReceivedCommands+0xc>
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	e7fe      	b.n	800b67c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b67e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b682:	2b00      	cmp	r3, #0
 800b684:	d190      	bne.n	800b5a8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800b686:	4620      	mov	r0, r4
 800b688:	f7fd fea0 	bl	80093cc <vPortFree>
 800b68c:	e78c      	b.n	800b5a8 <prvProcessReceivedCommands+0xc>
}
 800b68e:	b009      	add	sp, #36	; 0x24
 800b690:	bd30      	pop	{r4, r5, pc}
 800b692:	bf00      	nop
 800b694:	2000461c 	.word	0x2000461c

0800b698 <prvTimerTask>:
{
 800b698:	b500      	push	{lr}
 800b69a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b69c:	a801      	add	r0, sp, #4
 800b69e:	f7ff fded 	bl	800b27c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6a2:	9901      	ldr	r1, [sp, #4]
 800b6a4:	f7ff ff40 	bl	800b528 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800b6a8:	f7ff ff78 	bl	800b59c <prvProcessReceivedCommands>
 800b6ac:	e7f6      	b.n	800b69c <prvTimerTask+0x4>

0800b6ae <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800b6ae:	b570      	push	{r4, r5, r6, lr}
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800b6b6:	f001 fb93 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b6ba:	f001 fb5f 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800b6c4:	7002      	strb	r2, [r0, #0]
 800b6c6:	7043      	strb	r3, [r0, #1]
 800b6c8:	7083      	strb	r3, [r0, #2]
 800b6ca:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	7102      	strb	r2, [r0, #4]
 800b6d0:	7143      	strb	r3, [r0, #5]
 800b6d2:	7183      	strb	r3, [r0, #6]
 800b6d4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b6d6:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = aType;
 800b6d8:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800b6da:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800b6dc:	f001 fb60 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b6e0:	f001 fb52 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}

0800b6e6 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800b6e6:	b570      	push	{r4, r5, r6, lr}
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800b6ee:	f001 fb77 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b6f2:	f001 fb43 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 800b6fc:	7002      	strb	r2, [r0, #0]
 800b6fe:	7043      	strb	r3, [r0, #1]
 800b700:	7083      	strb	r3, [r0, #2]
 800b702:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800b704:	2203      	movs	r2, #3
 800b706:	7102      	strb	r2, [r0, #4]
 800b708:	7143      	strb	r3, [r0, #5]
 800b70a:	7183      	strb	r3, [r0, #6]
 800b70c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b70e:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800b710:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800b712:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800b714:	f001 fb44 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b718:	f001 fb36 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800b71c:	bd70      	pop	{r4, r5, r6, pc}

0800b71e <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800b71e:	b538      	push	{r3, r4, r5, lr}
 800b720:	4605      	mov	r5, r0
 800b722:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b724:	f001 fb5c 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b728:	f001 fb28 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800b72c:	2300      	movs	r3, #0
 800b72e:	f06f 025e 	mvn.w	r2, #94	; 0x5e
 800b732:	7002      	strb	r2, [r0, #0]
 800b734:	7043      	strb	r3, [r0, #1]
 800b736:	7083      	strb	r3, [r0, #2]
 800b738:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800b73a:	2202      	movs	r2, #2
 800b73c:	7102      	strb	r2, [r0, #4]
 800b73e:	7143      	strb	r3, [r0, #5]
 800b740:	7183      	strb	r3, [r0, #6]
 800b742:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b744:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800b746:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800b748:	f001 fb2a 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b74c:	f001 fb1c 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800b750:	bd38      	pop	{r3, r4, r5, pc}

0800b752 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800b752:	b538      	push	{r3, r4, r5, lr}
 800b754:	4605      	mov	r5, r0
 800b756:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b758:	f001 fb42 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b75c:	f001 fb0e 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800b760:	2300      	movs	r3, #0
 800b762:	f06f 025d 	mvn.w	r2, #93	; 0x5d
 800b766:	7002      	strb	r2, [r0, #0]
 800b768:	7043      	strb	r3, [r0, #1]
 800b76a:	7083      	strb	r3, [r0, #2]
 800b76c:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800b76e:	2202      	movs	r2, #2
 800b770:	7102      	strb	r2, [r0, #4]
 800b772:	7143      	strb	r3, [r0, #5]
 800b774:	7183      	strb	r3, [r0, #6]
 800b776:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b778:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800b77a:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800b77c:	f001 fb10 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b780:	f001 fb02 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800b784:	6880      	ldr	r0, [r0, #8]
}
 800b786:	b2c0      	uxtb	r0, r0
 800b788:	bd38      	pop	{r3, r4, r5, pc}

0800b78a <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800b78a:	b538      	push	{r3, r4, r5, lr}
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b790:	f001 fb26 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b794:	f001 faf2 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800b798:	2300      	movs	r3, #0
 800b79a:	f06f 0250 	mvn.w	r2, #80	; 0x50
 800b79e:	7002      	strb	r2, [r0, #0]
 800b7a0:	7043      	strb	r3, [r0, #1]
 800b7a2:	7083      	strb	r3, [r0, #2]
 800b7a4:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	7102      	strb	r2, [r0, #4]
 800b7aa:	7143      	strb	r3, [r0, #5]
 800b7ac:	7183      	strb	r3, [r0, #6]
 800b7ae:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b7b0:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800b7b2:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800b7b4:	f001 faf4 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b7b8:	f001 fae6 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800b7bc:	6880      	ldr	r0, [r0, #8]
}
 800b7be:	b2c0      	uxtb	r0, r0
 800b7c0:	bd38      	pop	{r3, r4, r5, pc}

0800b7c2 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b7c6:	f001 fb0b 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b7ca:	f001 fad7 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f06f 024d 	mvn.w	r2, #77	; 0x4d
 800b7d4:	7002      	strb	r2, [r0, #0]
 800b7d6:	7043      	strb	r3, [r0, #1]
 800b7d8:	7083      	strb	r3, [r0, #2]
 800b7da:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b7dc:	2201      	movs	r2, #1
 800b7de:	7102      	strb	r2, [r0, #4]
 800b7e0:	7143      	strb	r3, [r0, #5]
 800b7e2:	7183      	strb	r3, [r0, #6]
 800b7e4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b7e6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b7e8:	f001 fada 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b7ec:	f001 facc 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError) p_ot_req->Data[0];
 800b7f0:	6880      	ldr	r0, [r0, #8]
}
 800b7f2:	b2c0      	uxtb	r0, r0
 800b7f4:	bd10      	pop	{r4, pc}

0800b7f6 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800b7f6:	b538      	push	{r3, r4, r5, lr}
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b7fc:	f001 faf0 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b800:	f001 fabc 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800b804:	2300      	movs	r3, #0
 800b806:	f06f 0256 	mvn.w	r2, #86	; 0x56
 800b80a:	7002      	strb	r2, [r0, #0]
 800b80c:	7043      	strb	r3, [r0, #1]
 800b80e:	7083      	strb	r3, [r0, #2]
 800b810:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800b812:	2202      	movs	r2, #2
 800b814:	7102      	strb	r2, [r0, #4]
 800b816:	7143      	strb	r3, [r0, #5]
 800b818:	7183      	strb	r3, [r0, #6]
 800b81a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b81c:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800b81e:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800b820:	f001 fabe 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b824:	f001 fab0 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800b828:	bd38      	pop	{r3, r4, r5, pc}

0800b82a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800b82a:	b510      	push	{r4, lr}
 800b82c:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b82e:	f001 fad7 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b832:	f001 faa3 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800b836:	2300      	movs	r3, #0
 800b838:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800b83c:	7002      	strb	r2, [r0, #0]
 800b83e:	7043      	strb	r3, [r0, #1]
 800b840:	7083      	strb	r3, [r0, #2]
 800b842:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b844:	2201      	movs	r2, #1
 800b846:	7102      	strb	r2, [r0, #4]
 800b848:	7143      	strb	r3, [r0, #5]
 800b84a:	7183      	strb	r3, [r0, #6]
 800b84c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b84e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b850:	f001 faa6 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b854:	f001 fa98 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapType)p_ot_req->Data[0];
 800b858:	6880      	ldr	r0, [r0, #8]
}
 800b85a:	b2c0      	uxtb	r0, r0
 800b85c:	bd10      	pop	{r4, pc}

0800b85e <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800b85e:	b510      	push	{r4, lr}
 800b860:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b862:	f001 fabd 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b866:	f001 fa89 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800b86a:	2300      	movs	r3, #0
 800b86c:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 800b870:	7002      	strb	r2, [r0, #0]
 800b872:	7043      	strb	r3, [r0, #1]
 800b874:	7083      	strb	r3, [r0, #2]
 800b876:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b878:	2201      	movs	r2, #1
 800b87a:	7102      	strb	r2, [r0, #4]
 800b87c:	7143      	strb	r3, [r0, #5]
 800b87e:	7183      	strb	r3, [r0, #6]
 800b880:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b882:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b884:	f001 fa8c 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b888:	f001 fa7e 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otCoapCode)p_ot_req->Data[0];
 800b88c:	6880      	ldr	r0, [r0, #8]
}
 800b88e:	b2c0      	uxtb	r0, r0
 800b890:	bd10      	pop	{r4, pc}

0800b892 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800b892:	b510      	push	{r4, lr}
 800b894:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b896:	f001 faa3 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b89a:	f001 fa6f 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f06f 0255 	mvn.w	r2, #85	; 0x55
 800b8a4:	7002      	strb	r2, [r0, #0]
 800b8a6:	7043      	strb	r3, [r0, #1]
 800b8a8:	7083      	strb	r3, [r0, #2]
 800b8aa:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	7102      	strb	r2, [r0, #4]
 800b8b0:	7143      	strb	r3, [r0, #5]
 800b8b2:	7183      	strb	r3, [r0, #6]
 800b8b4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b8b6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b8b8:	f001 fa72 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b8bc:	f001 fa64 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800b8c0:	6880      	ldr	r0, [r0, #8]
}
 800b8c2:	b280      	uxth	r0, r0
 800b8c4:	bd10      	pop	{r4, pc}

0800b8c6 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b8ca:	f001 fa89 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b8ce:	f001 fa55 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f06f 0254 	mvn.w	r2, #84	; 0x54
 800b8d8:	7002      	strb	r2, [r0, #0]
 800b8da:	7043      	strb	r3, [r0, #1]
 800b8dc:	7083      	strb	r3, [r0, #2]
 800b8de:	70c3      	strb	r3, [r0, #3]

   p_ot_req->Size=1;
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	7102      	strb	r2, [r0, #4]
 800b8e4:	7143      	strb	r3, [r0, #5]
 800b8e6:	7183      	strb	r3, [r0, #6]
 800b8e8:	71c3      	strb	r3, [r0, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800b8ea:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b8ec:	f001 fa58 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b8f0:	f001 fa4a 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
   return (uint8_t)p_ot_req->Data[0];
 800b8f4:	6880      	ldr	r0, [r0, #8]
}
 800b8f6:	b2c0      	uxtb	r0, r0
 800b8f8:	bd10      	pop	{r4, pc}

0800b8fa <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800b8fe:	f001 fa6f 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b902:	f001 fa3b 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800b906:	2300      	movs	r3, #0
 800b908:	f06f 0253 	mvn.w	r2, #83	; 0x53
 800b90c:	7002      	strb	r2, [r0, #0]
 800b90e:	7043      	strb	r3, [r0, #1]
 800b910:	7083      	strb	r3, [r0, #2]
 800b912:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b914:	2201      	movs	r2, #1
 800b916:	7102      	strb	r2, [r0, #4]
 800b918:	7143      	strb	r3, [r0, #5]
 800b91a:	7183      	strb	r3, [r0, #6]
 800b91c:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b91e:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b920:	f001 fa3e 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b924:	f001 fa30 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint8_t *)p_ot_req->Data[0];
}
 800b928:	6880      	ldr	r0, [r0, #8]
 800b92a:	bd10      	pop	{r4, pc}

0800b92c <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800b92c:	b510      	push	{r4, lr}
 800b92e:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b930:	f001 fa56 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b934:	f001 fa22 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800b938:	2300      	movs	r3, #0
 800b93a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800b93e:	7002      	strb	r2, [r0, #0]
 800b940:	7043      	strb	r3, [r0, #1]
 800b942:	7083      	strb	r3, [r0, #2]
 800b944:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b946:	2201      	movs	r2, #1
 800b948:	7102      	strb	r2, [r0, #4]
 800b94a:	7143      	strb	r3, [r0, #5]
 800b94c:	7183      	strb	r3, [r0, #6]
 800b94e:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b950:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b952:	f001 fa25 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b956:	f001 fa17 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otMessage *)p_ot_req->Data[0];

}
 800b95a:	6880      	ldr	r0, [r0, #8]
 800b95c:	bd10      	pop	{r4, pc}

0800b95e <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800b95e:	b570      	push	{r4, r5, r6, lr}
 800b960:	460e      	mov	r6, r1
 800b962:	4615      	mov	r5, r2
 800b964:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800b966:	f001 fa3b 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b96a:	f001 fa07 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800b96e:	2300      	movs	r3, #0
 800b970:	f06f 0258 	mvn.w	r2, #88	; 0x58
 800b974:	7002      	strb	r2, [r0, #0]
 800b976:	7043      	strb	r3, [r0, #1]
 800b978:	7083      	strb	r3, [r0, #2]
 800b97a:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800b97c:	2203      	movs	r2, #3
 800b97e:	7102      	strb	r2, [r0, #4]
 800b980:	7143      	strb	r3, [r0, #5]
 800b982:	7183      	strb	r3, [r0, #6]
 800b984:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800b986:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800b988:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800b98a:	6104      	str	r4, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	6143      	str	r3, [r0, #20]

    Ot_Cmd_Transfer();
 800b990:	f001 fa06 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b994:	f001 f9f8 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800b998:	6880      	ldr	r0, [r0, #8]
}
 800b99a:	b2c0      	uxtb	r0, r0
 800b99c:	bd70      	pop	{r4, r5, r6, pc}

0800b99e <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800b99e:	b510      	push	{r4, lr}
 800b9a0:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b9a2:	f001 fa1d 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b9a6:	f001 f9e9 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800b9b0:	7002      	strb	r2, [r0, #0]
 800b9b2:	7043      	strb	r3, [r0, #1]
 800b9b4:	7083      	strb	r3, [r0, #2]
 800b9b6:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	7102      	strb	r2, [r0, #4]
 800b9bc:	7143      	strb	r3, [r0, #5]
 800b9be:	7183      	strb	r3, [r0, #6]
 800b9c0:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800b9c2:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b9c4:	f001 f9ec 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b9c8:	f001 f9de 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800b9cc:	6880      	ldr	r0, [r0, #8]
}
 800b9ce:	b2c0      	uxtb	r0, r0
 800b9d0:	bd10      	pop	{r4, pc}

0800b9d2 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800b9d2:	b510      	push	{r4, lr}
 800b9d4:	460c      	mov	r4, r1
    Pre_OtCmdProcessing();
 800b9d6:	f001 fa03 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b9da:	f001 f9cf 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f06f 0249 	mvn.w	r2, #73	; 0x49
 800b9e4:	7002      	strb	r2, [r0, #0]
 800b9e6:	7043      	strb	r3, [r0, #1]
 800b9e8:	7083      	strb	r3, [r0, #2]
 800b9ea:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	7102      	strb	r2, [r0, #4]
 800b9f0:	7143      	strb	r3, [r0, #5]
 800b9f2:	7183      	strb	r3, [r0, #6]
 800b9f4:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800b9f6:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800b9f8:	f001 f9d2 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b9fc:	f001 f9c4 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800ba00:	6880      	ldr	r0, [r0, #8]
}
 800ba02:	b2c0      	uxtb	r0, r0
 800ba04:	bd10      	pop	{r4, pc}

0800ba06 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800ba06:	b538      	push	{r3, r4, r5, lr}
 800ba08:	460d      	mov	r5, r1
 800ba0a:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800ba0c:	f001 f9e8 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ba10:	f001 f9b4 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800ba14:	2300      	movs	r3, #0
 800ba16:	f06f 0257 	mvn.w	r2, #87	; 0x57
 800ba1a:	7002      	strb	r2, [r0, #0]
 800ba1c:	7043      	strb	r3, [r0, #1]
 800ba1e:	7083      	strb	r3, [r0, #2]
 800ba20:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=2;
 800ba22:	2202      	movs	r2, #2
 800ba24:	7102      	strb	r2, [r0, #4]
 800ba26:	7143      	strb	r3, [r0, #5]
 800ba28:	7183      	strb	r3, [r0, #6]
 800ba2a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800ba2c:	6085      	str	r5, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ba2e:	60c4      	str	r4, [r0, #12]

    Ot_Cmd_Transfer();
 800ba30:	f001 f9b6 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ba34:	f001 f9a8 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800ba38:	6880      	ldr	r0, [r0, #8]
}
 800ba3a:	b2c0      	uxtb	r0, r0
 800ba3c:	bd38      	pop	{r3, r4, r5, pc}

0800ba3e <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800ba3e:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800ba40:	f001 f9ce 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ba44:	f001 f99a 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f06f 026b 	mvn.w	r2, #107	; 0x6b
 800ba4e:	7002      	strb	r2, [r0, #0]
 800ba50:	7043      	strb	r3, [r0, #1]
 800ba52:	7083      	strb	r3, [r0, #2]
 800ba54:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800ba56:	7103      	strb	r3, [r0, #4]
 800ba58:	7143      	strb	r3, [r0, #5]
 800ba5a:	7183      	strb	r3, [r0, #6]
 800ba5c:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800ba5e:	f001 f99f 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ba62:	f001 f991 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otInstance *)p_ot_req->Data[0];
}
 800ba66:	6880      	ldr	r0, [r0, #8]
 800ba68:	bd08      	pop	{r3, pc}

0800ba6a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800ba6a:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800ba6c:	f001 f9b8 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ba70:	f001 f984 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	f06f 0269 	mvn.w	r2, #105	; 0x69
 800ba7a:	7002      	strb	r2, [r0, #0]
 800ba7c:	7043      	strb	r3, [r0, #1]
 800ba7e:	7083      	strb	r3, [r0, #2]
 800ba80:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800ba82:	7103      	strb	r3, [r0, #4]
 800ba84:	7143      	strb	r3, [r0, #5]
 800ba86:	7183      	strb	r3, [r0, #6]
 800ba88:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800ba8a:	f001 f989 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ba8e:	f001 f97b 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800ba92:	bd08      	pop	{r3, pc}

0800ba94 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	460d      	mov	r5, r1
 800ba98:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800ba9a:	f001 f9a1 	bl	800cde0 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <otSetStateChangedCallback+0x3c>)
 800baa0:	601d      	str	r5, [r3, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800baa2:	f001 f96b 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	f06f 0268 	mvn.w	r2, #104	; 0x68
 800baac:	7002      	strb	r2, [r0, #0]
 800baae:	7043      	strb	r3, [r0, #1]
 800bab0:	7083      	strb	r3, [r0, #2]
 800bab2:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800bab4:	2201      	movs	r2, #1
 800bab6:	7102      	strb	r2, [r0, #4]
 800bab8:	7143      	strb	r3, [r0, #5]
 800baba:	7183      	strb	r3, [r0, #6]
 800babc:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800babe:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800bac0:	f001 f96e 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bac4:	f001 f960 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800bac8:	6880      	ldr	r0, [r0, #8]
}
 800baca:	b2c0      	uxtb	r0, r0
 800bacc:	bd38      	pop	{r3, r4, r5, pc}
 800bace:	bf00      	nop
 800bad0:	20004660 	.word	0x20004660

0800bad4 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800bad4:	b508      	push	{r3, lr}
    Pre_OtCmdProcessing();
 800bad6:	f001 f983 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bada:	f001 f94f 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800bade:	2300      	movs	r3, #0
 800bae0:	f06f 0264 	mvn.w	r2, #100	; 0x64
 800bae4:	7002      	strb	r2, [r0, #0]
 800bae6:	7043      	strb	r3, [r0, #1]
 800bae8:	7083      	strb	r3, [r0, #2]
 800baea:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=0;
 800baec:	7103      	strb	r3, [r0, #4]
 800baee:	7143      	strb	r3, [r0, #5]
 800baf0:	7183      	strb	r3, [r0, #6]
 800baf2:	71c3      	strb	r3, [r0, #7]

    Ot_Cmd_Transfer();
 800baf4:	f001 f954 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800baf8:	f001 f946 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800bafc:	6880      	ldr	r0, [r0, #8]
}
 800bafe:	b2c0      	uxtb	r0, r0
 800bb00:	bd08      	pop	{r3, pc}

0800bb02 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800bb02:	b510      	push	{r4, lr}
 800bb04:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800bb06:	f001 f96b 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bb0a:	f001 f937 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2227      	movs	r2, #39	; 0x27
 800bb12:	7002      	strb	r2, [r0, #0]
 800bb14:	7043      	strb	r3, [r0, #1]
 800bb16:	7083      	strb	r3, [r0, #2]
 800bb18:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	7102      	strb	r2, [r0, #4]
 800bb1e:	7143      	strb	r3, [r0, #5]
 800bb20:	7183      	strb	r3, [r0, #6]
 800bb22:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800bb24:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800bb26:	f001 f93b 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bb2a:	f001 f92d 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800bb2e:	6880      	ldr	r0, [r0, #8]
}
 800bb30:	b2c0      	uxtb	r0, r0
 800bb32:	bd10      	pop	{r4, pc}

0800bb34 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800bb34:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800bb36:	f001 f953 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bb3a:	f001 f91f 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	2228      	movs	r2, #40	; 0x28
 800bb42:	7002      	strb	r2, [r0, #0]
 800bb44:	7043      	strb	r3, [r0, #1]
 800bb46:	7083      	strb	r3, [r0, #2]
 800bb48:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800bb4a:	7103      	strb	r3, [r0, #4]
 800bb4c:	7143      	strb	r3, [r0, #5]
 800bb4e:	7183      	strb	r3, [r0, #6]
 800bb50:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800bb52:	f001 f925 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bb56:	f001 f917 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (bool)p_ot_req->Data[0];
 800bb5a:	6880      	ldr	r0, [r0, #8]
}
 800bb5c:	3000      	adds	r0, #0
 800bb5e:	bf18      	it	ne
 800bb60:	2001      	movne	r0, #1
 800bb62:	bd08      	pop	{r3, pc}

0800bb64 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800bb64:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800bb66:	f001 f93b 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bb6a:	f001 f907 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	222b      	movs	r2, #43	; 0x2b
 800bb72:	7002      	strb	r2, [r0, #0]
 800bb74:	7043      	strb	r3, [r0, #1]
 800bb76:	7083      	strb	r3, [r0, #2]
 800bb78:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800bb7a:	7103      	strb	r3, [r0, #4]
 800bb7c:	7143      	strb	r3, [r0, #5]
 800bb7e:	7183      	strb	r3, [r0, #6]
 800bb80:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800bb82:	f001 f90d 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bb86:	f001 f8ff 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otNetifAddress *)p_ot_req->Data[0];
}
 800bb8a:	6880      	ldr	r0, [r0, #8]
 800bb8c:	bd08      	pop	{r3, pc}

0800bb8e <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800bb8e:	b538      	push	{r3, r4, r5, lr}
 800bb90:	4605      	mov	r5, r0
 800bb92:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800bb94:	f001 f924 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bb98:	f001 f8f0 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	223f      	movs	r2, #63	; 0x3f
 800bba0:	7002      	strb	r2, [r0, #0]
 800bba2:	7043      	strb	r3, [r0, #1]
 800bba4:	7083      	strb	r3, [r0, #2]
 800bba6:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=2;
 800bba8:	2202      	movs	r2, #2
 800bbaa:	7102      	strb	r2, [r0, #4]
 800bbac:	7143      	strb	r3, [r0, #5]
 800bbae:	7183      	strb	r3, [r0, #6]
 800bbb0:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800bbb2:	6085      	str	r5, [r0, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800bbb4:	60c4      	str	r4, [r0, #12]

  Ot_Cmd_Transfer();
 800bbb6:	f001 f8f3 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bbba:	f001 f8e5 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800bbbe:	6880      	ldr	r0, [r0, #8]
}
 800bbc0:	b2c0      	uxtb	r0, r0
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}

0800bbc4 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800bbc8:	f001 f90a 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bbcc:	f001 f8d6 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2208      	movs	r2, #8
 800bbd4:	7002      	strb	r2, [r0, #0]
 800bbd6:	7043      	strb	r3, [r0, #1]
 800bbd8:	7083      	strb	r3, [r0, #2]
 800bbda:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800bbdc:	2201      	movs	r2, #1
 800bbde:	7102      	strb	r2, [r0, #4]
 800bbe0:	7143      	strb	r3, [r0, #5]
 800bbe2:	7183      	strb	r3, [r0, #6]
 800bbe4:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800bbe6:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800bbe8:	f001 f8da 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bbec:	f001 f8cc 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800bbf0:	6880      	ldr	r0, [r0, #8]
}
 800bbf2:	b2c0      	uxtb	r0, r0
 800bbf4:	bd10      	pop	{r4, pc}

0800bbf6 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800bbf6:	b510      	push	{r4, lr}
 800bbf8:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800bbfa:	f001 f8f1 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bbfe:	f001 f8bd 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800bc02:	2300      	movs	r3, #0
 800bc04:	220f      	movs	r2, #15
 800bc06:	7002      	strb	r2, [r0, #0]
 800bc08:	7043      	strb	r3, [r0, #1]
 800bc0a:	7083      	strb	r3, [r0, #2]
 800bc0c:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800bc0e:	2201      	movs	r2, #1
 800bc10:	7102      	strb	r2, [r0, #4]
 800bc12:	7143      	strb	r3, [r0, #5]
 800bc14:	7183      	strb	r3, [r0, #6]
 800bc16:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800bc18:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800bc1a:	f001 f8c1 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bc1e:	f001 f8b3 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800bc22:	6880      	ldr	r0, [r0, #8]
}
 800bc24:	b2c0      	uxtb	r0, r0
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800bc2c:	f001 f8d8 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bc30:	f001 f8a4 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	f06f 0246 	mvn.w	r2, #70	; 0x46
 800bc3a:	7002      	strb	r2, [r0, #0]
 800bc3c:	7043      	strb	r3, [r0, #1]
 800bc3e:	7083      	strb	r3, [r0, #2]
 800bc40:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800bc42:	2201      	movs	r2, #1
 800bc44:	7102      	strb	r2, [r0, #4]
 800bc46:	7143      	strb	r3, [r0, #5]
 800bc48:	7183      	strb	r3, [r0, #6]
 800bc4a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800bc4c:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800bc4e:	f001 f8a7 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bc52:	f001 f899 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
}
 800bc56:	bd10      	pop	{r4, pc}

0800bc58 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4604      	mov	r4, r0
    Pre_OtCmdProcessing();
 800bc5c:	f001 f8c0 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bc60:	f001 f88c 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800bc64:	2300      	movs	r3, #0
 800bc66:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800bc6a:	7002      	strb	r2, [r0, #0]
 800bc6c:	7043      	strb	r3, [r0, #1]
 800bc6e:	7083      	strb	r3, [r0, #2]
 800bc70:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=1;
 800bc72:	2201      	movs	r2, #1
 800bc74:	7102      	strb	r2, [r0, #4]
 800bc76:	7143      	strb	r3, [r0, #5]
 800bc78:	7183      	strb	r3, [r0, #6]
 800bc7a:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800bc7c:	6084      	str	r4, [r0, #8]

    Ot_Cmd_Transfer();
 800bc7e:	f001 f88f 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bc82:	f001 f881 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (uint16_t)p_ot_req->Data[0];
 800bc86:	6880      	ldr	r0, [r0, #8]
}
 800bc88:	b280      	uxth	r0, r0
 800bc8a:	bd10      	pop	{r4, pc}

0800bc8c <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	4606      	mov	r6, r0
 800bc90:	460d      	mov	r5, r1
 800bc92:	4614      	mov	r4, r2
    Pre_OtCmdProcessing();
 800bc94:	f001 f8a4 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bc98:	f001 f870 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f06f 023e 	mvn.w	r2, #62	; 0x3e
 800bca2:	7002      	strb	r2, [r0, #0]
 800bca4:	7043      	strb	r3, [r0, #1]
 800bca6:	7083      	strb	r3, [r0, #2]
 800bca8:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=3;
 800bcaa:	2203      	movs	r2, #3
 800bcac:	7102      	strb	r2, [r0, #4]
 800bcae:	7143      	strb	r3, [r0, #5]
 800bcb0:	7183      	strb	r3, [r0, #6]
 800bcb2:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800bcb4:	6086      	str	r6, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800bcb6:	60c5      	str	r5, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800bcb8:	6104      	str	r4, [r0, #16]

    Ot_Cmd_Transfer();
 800bcba:	f001 f871 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bcbe:	f001 f863 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (otError)p_ot_req->Data[0];
 800bcc2:	6880      	ldr	r0, [r0, #8]
}
 800bcc4:	b2c0      	uxtb	r0, r0
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}

0800bcc8 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	4607      	mov	r7, r0
 800bccc:	460e      	mov	r6, r1
 800bcce:	4615      	mov	r5, r2
 800bcd0:	461c      	mov	r4, r3
    Pre_OtCmdProcessing();
 800bcd2:	f001 f885 	bl	800cde0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bcd6:	f001 f851 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f06f 023d 	mvn.w	r2, #61	; 0x3d
 800bce0:	7002      	strb	r2, [r0, #0]
 800bce2:	7043      	strb	r3, [r0, #1]
 800bce4:	7083      	strb	r3, [r0, #2]
 800bce6:	70c3      	strb	r3, [r0, #3]

    p_ot_req->Size=4;
 800bce8:	2204      	movs	r2, #4
 800bcea:	7102      	strb	r2, [r0, #4]
 800bcec:	7143      	strb	r3, [r0, #5]
 800bcee:	7183      	strb	r3, [r0, #6]
 800bcf0:	71c3      	strb	r3, [r0, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800bcf2:	6087      	str	r7, [r0, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800bcf4:	60c6      	str	r6, [r0, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800bcf6:	6105      	str	r5, [r0, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800bcf8:	6144      	str	r4, [r0, #20]

    Ot_Cmd_Transfer();
 800bcfa:	f001 f851 	bl	800cda0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bcfe:	f001 f843 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
    return (int)p_ot_req->Data[0];
}
 800bd02:	6880      	ldr	r0, [r0, #8]
 800bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd08 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	b082      	sub	sp, #8
    HAL_StatusTypeDef status = HAL_OK;

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800bd0c:	f001 f842 	bl	800cd94 <THREAD_Get_NotificationPayloadBuffer>

    switch(p_notification->ID)
 800bd10:	6803      	ldr	r3, [r0, #0]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b14      	cmp	r3, #20
 800bd16:	f200 80e6 	bhi.w	800bee6 <OpenThread_CallBack_Processing+0x1de>
 800bd1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bd1e:	0015      	.short	0x0015
 800bd20:	002b001f 	.word	0x002b001f
 800bd24:	00440039 	.word	0x00440039
 800bd28:	0059004e 	.word	0x0059004e
 800bd2c:	006d0063 	.word	0x006d0063
 800bd30:	00810077 	.word	0x00810077
 800bd34:	00e4008b 	.word	0x00e4008b
 800bd38:	00a60097 	.word	0x00a60097
 800bd3c:	00bb00b1 	.word	0x00bb00b1
 800bd40:	00d200c6 	.word	0x00d200c6
 800bd44:	00db00e4 	.word	0x00db00e4
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800bd48:	4b7a      	ldr	r3, [pc, #488]	; (800bf34 <OpenThread_CallBack_Processing+0x22c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 80cc 	beq.w	800beea <OpenThread_CallBack_Processing+0x1e2>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800bd52:	68c1      	ldr	r1, [r0, #12]
 800bd54:	6880      	ldr	r0, [r0, #8]
 800bd56:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bd58:	2400      	movs	r4, #0
 800bd5a:	e01f      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
                    (void*) p_notification->Data[1]);
        }
        break;
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 800bd5c:	6883      	ldr	r3, [r0, #8]
 800bd5e:	4a76      	ldr	r2, [pc, #472]	; (800bf38 <OpenThread_CallBack_Processing+0x230>)
 800bd60:	6013      	str	r3, [r2, #0]

        if (coapRequestHandlerCb != NULL)
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 80c3 	beq.w	800beee <OpenThread_CallBack_Processing+0x1e6>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800bd68:	6942      	ldr	r2, [r0, #20]
 800bd6a:	6901      	ldr	r1, [r0, #16]
 800bd6c:	68c0      	ldr	r0, [r0, #12]
 800bd6e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bd70:	2400      	movs	r4, #0
 800bd72:	e013      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3]);
        }
        break;
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 800bd74:	6884      	ldr	r4, [r0, #8]
 800bd76:	4b71      	ldr	r3, [pc, #452]	; (800bf3c <OpenThread_CallBack_Processing+0x234>)
 800bd78:	601c      	str	r4, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	f000 80b9 	beq.w	800bef2 <OpenThread_CallBack_Processing+0x1ea>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
                    (otMessage *) p_notification->Data[2],
                    (otMessageInfo *) p_notification->Data[3],
                    (otError) p_notification->Data[4]);
 800bd80:	6983      	ldr	r3, [r0, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	6942      	ldr	r2, [r0, #20]
 800bd86:	6901      	ldr	r1, [r0, #16]
 800bd88:	68c0      	ldr	r0, [r0, #12]
 800bd8a:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	e005      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        }
        break;
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800bd90:	2001      	movs	r0, #1
 800bd92:	f000 f901 	bl	800bf98 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800bd96:	f7f8 f84f 	bl	8003e38 <HAL_NVIC_SystemReset>
    HAL_StatusTypeDef status = HAL_OK;
 800bd9a:	2400      	movs	r4, #0
    default:
        status = HAL_ERROR;
        break;
    }

    TL_THREAD_SendAck();
 800bd9c:	f000 fbce 	bl	800c53c <TL_THREAD_SendAck>
    return status;

}
 800bda0:	4620      	mov	r0, r4
 800bda2:	b002      	add	sp, #8
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
        if (otIp6ReceiveCb != NULL)
 800bda6:	4b66      	ldr	r3, [pc, #408]	; (800bf40 <OpenThread_CallBack_Processing+0x238>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80a3 	beq.w	800bef6 <OpenThread_CallBack_Processing+0x1ee>
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800bdb0:	68c1      	ldr	r1, [r0, #12]
 800bdb2:	6880      	ldr	r0, [r0, #8]
 800bdb4:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bdb6:	2400      	movs	r4, #0
 800bdb8:	e7f0      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (aIidCreateCb != NULL)
 800bdba:	4b62      	ldr	r3, [pc, #392]	; (800bf44 <OpenThread_CallBack_Processing+0x23c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 809b 	beq.w	800befa <OpenThread_CallBack_Processing+0x1f2>
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800bdc4:	68c2      	ldr	r2, [r0, #12]
 800bdc6:	6881      	ldr	r1, [r0, #8]
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bdcc:	2400      	movs	r4, #0
 800bdce:	e7e5      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otHandleActiveScanResultCb != NULL)
 800bdd0:	4b5d      	ldr	r3, [pc, #372]	; (800bf48 <OpenThread_CallBack_Processing+0x240>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8092 	beq.w	800befe <OpenThread_CallBack_Processing+0x1f6>
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800bdda:	68c1      	ldr	r1, [r0, #12]
 800bddc:	6880      	ldr	r0, [r0, #8]
 800bdde:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bde0:	2400      	movs	r4, #0
 800bde2:	e7db      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otHandleEnergyScanResultCb != NULL)
 800bde4:	4b59      	ldr	r3, [pc, #356]	; (800bf4c <OpenThread_CallBack_Processing+0x244>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 808a 	beq.w	800bf02 <OpenThread_CallBack_Processing+0x1fa>
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800bdee:	68c1      	ldr	r1, [r0, #12]
 800bdf0:	6880      	ldr	r0, [r0, #8]
 800bdf2:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bdf4:	2400      	movs	r4, #0
 800bdf6:	e7d1      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otLinkPcapCb != NULL)
 800bdf8:	4b55      	ldr	r3, [pc, #340]	; (800bf50 <OpenThread_CallBack_Processing+0x248>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 8082 	beq.w	800bf06 <OpenThread_CallBack_Processing+0x1fe>
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800be02:	68c1      	ldr	r1, [r0, #12]
 800be04:	6880      	ldr	r0, [r0, #8]
 800be06:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800be08:	2400      	movs	r4, #0
 800be0a:	e7c7      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otReceiveDiagnosticGetCb != NULL)
 800be0c:	4b51      	ldr	r3, [pc, #324]	; (800bf54 <OpenThread_CallBack_Processing+0x24c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d07a      	beq.n	800bf0a <OpenThread_CallBack_Processing+0x202>
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800be14:	6902      	ldr	r2, [r0, #16]
 800be16:	68c1      	ldr	r1, [r0, #12]
 800be18:	6880      	ldr	r0, [r0, #8]
 800be1a:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800be1c:	2400      	movs	r4, #0
 800be1e:	e7bd      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otThreadChildTableCallbackCb != NULL)
 800be20:	4b4d      	ldr	r3, [pc, #308]	; (800bf58 <OpenThread_CallBack_Processing+0x250>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d072      	beq.n	800bf0e <OpenThread_CallBack_Processing+0x206>
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800be28:	6882      	ldr	r2, [r0, #8]
 800be2a:	68c1      	ldr	r1, [r0, #12]
 800be2c:	b2d0      	uxtb	r0, r2
 800be2e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800be30:	2400      	movs	r4, #0
 800be32:	e7b3      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otCommissionerEnergyReportCb != NULL)
 800be34:	4b49      	ldr	r3, [pc, #292]	; (800bf5c <OpenThread_CallBack_Processing+0x254>)
 800be36:	681c      	ldr	r4, [r3, #0]
 800be38:	2c00      	cmp	r4, #0
 800be3a:	d06a      	beq.n	800bf12 <OpenThread_CallBack_Processing+0x20a>
                    (uint8_t) p_notification->Data[2],
 800be3c:	6902      	ldr	r2, [r0, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800be3e:	6943      	ldr	r3, [r0, #20]
 800be40:	b2d2      	uxtb	r2, r2
 800be42:	68c1      	ldr	r1, [r0, #12]
 800be44:	6880      	ldr	r0, [r0, #8]
 800be46:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800be48:	2400      	movs	r4, #0
 800be4a:	e7a7      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otDnsResponseHandlerCb != NULL)
 800be4c:	4b44      	ldr	r3, [pc, #272]	; (800bf60 <OpenThread_CallBack_Processing+0x258>)
 800be4e:	681d      	ldr	r5, [r3, #0]
 800be50:	2d00      	cmp	r5, #0
 800be52:	d060      	beq.n	800bf16 <OpenThread_CallBack_Processing+0x20e>
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800be54:	6886      	ldr	r6, [r0, #8]
                    (char*) p_notification->Data[1],
 800be56:	68c1      	ldr	r1, [r0, #12]
                    (otIp6Address*) p_notification->Data[2],
 800be58:	6902      	ldr	r2, [r0, #16]
                    (uint32_t) p_notification->Data[3],
 800be5a:	6943      	ldr	r3, [r0, #20]
                    (otError) p_notification->Data[4]);
 800be5c:	6984      	ldr	r4, [r0, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800be5e:	b2e4      	uxtb	r4, r4
 800be60:	9400      	str	r4, [sp, #0]
 800be62:	4630      	mov	r0, r6
 800be64:	47a8      	blx	r5
    HAL_StatusTypeDef status = HAL_OK;
 800be66:	2400      	movs	r4, #0
 800be68:	e798      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otIcmp6ReceiveCb != NULL)
 800be6a:	4b3e      	ldr	r3, [pc, #248]	; (800bf64 <OpenThread_CallBack_Processing+0x25c>)
 800be6c:	681c      	ldr	r4, [r3, #0]
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d053      	beq.n	800bf1a <OpenThread_CallBack_Processing+0x212>
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800be72:	6943      	ldr	r3, [r0, #20]
 800be74:	6902      	ldr	r2, [r0, #16]
 800be76:	68c1      	ldr	r1, [r0, #12]
 800be78:	6880      	ldr	r0, [r0, #8]
 800be7a:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800be7c:	2400      	movs	r4, #0
 800be7e:	e78d      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otJoinerCb != NULL)
 800be80:	4b39      	ldr	r3, [pc, #228]	; (800bf68 <OpenThread_CallBack_Processing+0x260>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d04a      	beq.n	800bf1e <OpenThread_CallBack_Processing+0x216>
            otJoinerCb((otError) p_notification->Data[0],
 800be88:	6882      	ldr	r2, [r0, #8]
 800be8a:	68c1      	ldr	r1, [r0, #12]
 800be8c:	b2d0      	uxtb	r0, r2
 800be8e:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800be90:	2400      	movs	r4, #0
 800be92:	e783      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawReceiveDoneCb != NULL)
 800be94:	4b35      	ldr	r3, [pc, #212]	; (800bf6c <OpenThread_CallBack_Processing+0x264>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d042      	beq.n	800bf22 <OpenThread_CallBack_Processing+0x21a>
                    (otError) p_notification->Data[2]);
 800be9c:	6902      	ldr	r2, [r0, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800be9e:	b2d2      	uxtb	r2, r2
 800bea0:	68c1      	ldr	r1, [r0, #12]
 800bea2:	6880      	ldr	r0, [r0, #8]
 800bea4:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bea6:	2400      	movs	r4, #0
 800bea8:	e778      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawTransmitDoneCb != NULL)
 800beaa:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <OpenThread_CallBack_Processing+0x268>)
 800beac:	681c      	ldr	r4, [r3, #0]
 800beae:	2c00      	cmp	r4, #0
 800beb0:	d039      	beq.n	800bf26 <OpenThread_CallBack_Processing+0x21e>
                    (otError) p_notification->Data[3]);
 800beb2:	6943      	ldr	r3, [r0, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	6902      	ldr	r2, [r0, #16]
 800beb8:	68c1      	ldr	r1, [r0, #12]
 800beba:	6880      	ldr	r0, [r0, #8]
 800bebc:	47a0      	blx	r4
    HAL_StatusTypeDef status = HAL_OK;
 800bebe:	2400      	movs	r4, #0
 800bec0:	e76c      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otLinkRawEnergyScanDoneCb != NULL)
 800bec2:	4b2c      	ldr	r3, [pc, #176]	; (800bf74 <OpenThread_CallBack_Processing+0x26c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	b383      	cbz	r3, 800bf2a <OpenThread_CallBack_Processing+0x222>
                    (int8_t) p_notification->Data[1]);
 800bec8:	68c1      	ldr	r1, [r0, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800beca:	b249      	sxtb	r1, r1
 800becc:	6880      	ldr	r0, [r0, #8]
 800bece:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bed0:	2400      	movs	r4, #0
 800bed2:	e763      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        if (otUdpReceiveCb != NULL)
 800bed4:	4b28      	ldr	r3, [pc, #160]	; (800bf78 <OpenThread_CallBack_Processing+0x270>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	b34b      	cbz	r3, 800bf2e <OpenThread_CallBack_Processing+0x226>
            otUdpReceiveCb((void*) p_notification->Data[0],
 800beda:	6902      	ldr	r2, [r0, #16]
 800bedc:	68c1      	ldr	r1, [r0, #12]
 800bede:	6880      	ldr	r0, [r0, #8]
 800bee0:	4798      	blx	r3
    HAL_StatusTypeDef status = HAL_OK;
 800bee2:	2400      	movs	r4, #0
 800bee4:	e75a      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
        status = HAL_ERROR;
 800bee6:	2401      	movs	r4, #1
 800bee8:	e758      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
    HAL_StatusTypeDef status = HAL_OK;
 800beea:	2400      	movs	r4, #0
 800beec:	e756      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800beee:	2400      	movs	r4, #0
 800bef0:	e754      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bef2:	2400      	movs	r4, #0
 800bef4:	e752      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bef6:	2400      	movs	r4, #0
 800bef8:	e750      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800befa:	2400      	movs	r4, #0
 800befc:	e74e      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800befe:	2400      	movs	r4, #0
 800bf00:	e74c      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf02:	2400      	movs	r4, #0
 800bf04:	e74a      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf06:	2400      	movs	r4, #0
 800bf08:	e748      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf0a:	2400      	movs	r4, #0
 800bf0c:	e746      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf0e:	2400      	movs	r4, #0
 800bf10:	e744      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf12:	2400      	movs	r4, #0
 800bf14:	e742      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf16:	2400      	movs	r4, #0
 800bf18:	e740      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	e73e      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf1e:	2400      	movs	r4, #0
 800bf20:	e73c      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf22:	2400      	movs	r4, #0
 800bf24:	e73a      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf26:	2400      	movs	r4, #0
 800bf28:	e738      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	e736      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf2e:	2400      	movs	r4, #0
 800bf30:	e734      	b.n	800bd9c <OpenThread_CallBack_Processing+0x94>
 800bf32:	bf00      	nop
 800bf34:	20004660 	.word	0x20004660
 800bf38:	20004628 	.word	0x20004628
 800bf3c:	2000462c 	.word	0x2000462c
 800bf40:	20004644 	.word	0x20004644
 800bf44:	20004624 	.word	0x20004624
 800bf48:	20004638 	.word	0x20004638
 800bf4c:	2000463c 	.word	0x2000463c
 800bf50:	2000464c 	.word	0x2000464c
 800bf54:	2000465c 	.word	0x2000465c
 800bf58:	20004664 	.word	0x20004664
 800bf5c:	20004630 	.word	0x20004630
 800bf60:	20004634 	.word	0x20004634
 800bf64:	20004640 	.word	0x20004640
 800bf68:	20004648 	.word	0x20004648
 800bf6c:	20004654 	.word	0x20004654
 800bf70:	20004658 	.word	0x20004658
 800bf74:	20004650 	.word	0x20004650
 800bf78:	20004668 	.word	0x20004668

0800bf7c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bf7c:	b500      	push	{lr}
 800bf7e:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bf80:	466b      	mov	r3, sp
 800bf82:	2200      	movs	r2, #0
 800bf84:	4611      	mov	r1, r2
 800bf86:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bf8a:	f000 f8e9 	bl	800c160 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800bf8e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800bf92:	b005      	add	sp, #20
 800bf94:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf98 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bf98:	b500      	push	{lr}
 800bf9a:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  local_buffer[0] = Ip;
 800bf9c:	aa04      	add	r2, sp, #16
 800bf9e:	f802 0d10 	strb.w	r0, [r2, #-16]!

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bfaa:	f000 f8d9 	bl	800c160 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800bfae:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800bfb2:	b005      	add	sp, #20
 800bfb4:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfb8 <SHCI_GetWirelessFwInfo>:
  MB_RefTable_t * p_RefTable = NULL;
  uint32_t version = 0;
  uint32_t memorySize = 0;
  uint32_t infoStack = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bfb8:	4b19      	ldr	r3, [pc, #100]	; (800c020 <SHCI_GetWirelessFwInfo+0x68>)
 800bfba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bfc4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	6912      	ldr	r2, [r2, #16]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bfcc:	0e11      	lsrs	r1, r2, #24
 800bfce:	7001      	strb	r1, [r0, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bfd0:	0c11      	lsrs	r1, r2, #16
 800bfd2:	7041      	strb	r1, [r0, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bfd4:	0a11      	lsrs	r1, r2, #8
 800bfd6:	7081      	strb	r1, [r0, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bfd8:	f3c2 1103 	ubfx	r1, r2, #4, #4
 800bfdc:	70c1      	strb	r1, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bfde:	f002 020f 	and.w	r2, r2, #15
 800bfe2:	7102      	strb	r2, [r0, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	6952      	ldr	r2, [r2, #20]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bfe8:	0e11      	lsrs	r1, r2, #24
 800bfea:	7141      	strb	r1, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bfec:	0c11      	lsrs	r1, r2, #16
 800bfee:	7181      	strb	r1, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bff0:	0a11      	lsrs	r1, r2, #8
 800bff2:	71c1      	strb	r1, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bff4:	7202      	strb	r2, [r0, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	6992      	ldr	r2, [r2, #24]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bffa:	7242      	strb	r2, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	6852      	ldr	r2, [r2, #4]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c000:	0e11      	lsrs	r1, r2, #24
 800c002:	7281      	strb	r1, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c004:	0c11      	lsrs	r1, r2, #16
 800c006:	72c1      	strb	r1, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c008:	0a12      	lsrs	r2, r2, #8
 800c00a:	7302      	strb	r2, [r0, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c010:	0e1a      	lsrs	r2, r3, #24
 800c012:	7342      	strb	r2, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c014:	0c1a      	lsrs	r2, r3, #16
 800c016:	7382      	strb	r2, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c018:	73c3      	strb	r3, [r0, #15]

  return (SHCI_Success);
}
 800c01a:	2000      	movs	r0, #0
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	58004000 	.word	0x58004000

0800c024 <Cmd_SetStatus>:

  return;
}

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c024:	b508      	push	{r3, lr}
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c026:	b938      	cbnz	r0, 800c038 <Cmd_SetStatus+0x14>
  {
    if(StatusNotCallBackFunction != 0)
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <Cmd_SetStatus+0x28>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	b103      	cbz	r3, 800c030 <Cmd_SetStatus+0xc>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c02e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c030:	4b07      	ldr	r3, [pc, #28]	; (800c050 <Cmd_SetStatus+0x2c>)
 800c032:	2200      	movs	r2, #0
 800c034:	701a      	strb	r2, [r3, #0]
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
}
 800c036:	bd08      	pop	{r3, pc}
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c038:	4b05      	ldr	r3, [pc, #20]	; (800c050 <Cmd_SetStatus+0x2c>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c03e:	4b03      	ldr	r3, [pc, #12]	; (800c04c <Cmd_SetStatus+0x28>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0f7      	beq.n	800c036 <Cmd_SetStatus+0x12>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c046:	4610      	mov	r0, r2
 800c048:	4798      	blx	r3
  return;
 800c04a:	e7f4      	b.n	800c036 <Cmd_SetStatus+0x12>
 800c04c:	2000466c 	.word	0x2000466c
 800c050:	20000174 	.word	0x20000174

0800c054 <TlInit>:
{
 800c054:	b530      	push	{r4, r5, lr}
 800c056:	b085      	sub	sp, #20
 800c058:	4605      	mov	r5, r0
  pCmdBuffer = p_cmdbuffer;
 800c05a:	4c0b      	ldr	r4, [pc, #44]	; (800c088 <TlInit+0x34>)
 800c05c:	6060      	str	r0, [r4, #4]
  LST_init_head (&SHciAsynchEventQueue);
 800c05e:	f104 0008 	add.w	r0, r4, #8
 800c062:	f000 f8b3 	bl	800c1cc <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c066:	2001      	movs	r0, #1
 800c068:	f7ff ffdc 	bl	800c024 <Cmd_SetStatus>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c06c:	2301      	movs	r3, #1
 800c06e:	7423      	strb	r3, [r4, #16]
  if (shciContext.io.Init)
 800c070:	4b06      	ldr	r3, [pc, #24]	; (800c08c <TlInit+0x38>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	b133      	cbz	r3, 800c084 <TlInit+0x30>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c076:	9503      	str	r5, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c078:	4a05      	ldr	r2, [pc, #20]	; (800c090 <TlInit+0x3c>)
 800c07a:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c07c:	4a05      	ldr	r2, [pc, #20]	; (800c094 <TlInit+0x40>)
 800c07e:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 800c080:	a801      	add	r0, sp, #4
 800c082:	4798      	blx	r3
}
 800c084:	b005      	add	sp, #20
 800c086:	bd30      	pop	{r4, r5, pc}
 800c088:	20000174 	.word	0x20000174
 800c08c:	20004670 	.word	0x20004670
 800c090:	0800c0b1 	.word	0x0800c0b1
 800c094:	0800c099 	.word	0x0800c099

0800c098 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c098:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c09a:	4c04      	ldr	r4, [pc, #16]	; (800c0ac <TlUserEvtReceived+0x14>)
 800c09c:	4601      	mov	r1, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 f8af 	bl	800c202 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7f4 fff5 	bl	8001094 <shci_notify_asynch_evt>

  return;
}
 800c0aa:	bd10      	pop	{r4, pc}
 800c0ac:	2000017c 	.word	0x2000017c

0800c0b0 <TlCmdEvtReceived>:
{
 800c0b0:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f7f4 fff8 	bl	80010a8 <shci_cmd_resp_release>
}
 800c0b8:	bd08      	pop	{r3, pc}
	...

0800c0bc <shci_init>:
{
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c0c0:	684a      	ldr	r2, [r1, #4]
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <shci_init+0x1c>)
 800c0c4:	601a      	str	r2, [r3, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c0c6:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <shci_init+0x20>)
 800c0c8:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f874 	bl	800c1b8 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c0d0:	6820      	ldr	r0, [r4, #0]
 800c0d2:	f7ff ffbf 	bl	800c054 <TlInit>
}
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	2000466c 	.word	0x2000466c
 800c0dc:	20004670 	.word	0x20004670

0800c0e0 <shci_user_evt_proc>:
{
 800c0e0:	b500      	push	{lr}
 800c0e2:	b085      	sub	sp, #20
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0e4:	481b      	ldr	r0, [pc, #108]	; (800c154 <shci_user_evt_proc+0x74>)
 800c0e6:	f000 f874 	bl	800c1d2 <LST_is_empty>
 800c0ea:	b910      	cbnz	r0, 800c0f2 <shci_user_evt_proc+0x12>
 800c0ec:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <shci_user_evt_proc+0x78>)
 800c0ee:	7c1b      	ldrb	r3, [r3, #16]
 800c0f0:	b94b      	cbnz	r3, 800c106 <shci_user_evt_proc+0x26>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0f2:	4818      	ldr	r0, [pc, #96]	; (800c154 <shci_user_evt_proc+0x74>)
 800c0f4:	f000 f86d 	bl	800c1d2 <LST_is_empty>
 800c0f8:	b910      	cbnz	r0, 800c100 <shci_user_evt_proc+0x20>
 800c0fa:	4b17      	ldr	r3, [pc, #92]	; (800c158 <shci_user_evt_proc+0x78>)
 800c0fc:	7c1b      	ldrb	r3, [r3, #16]
 800c0fe:	bb23      	cbnz	r3, 800c14a <shci_user_evt_proc+0x6a>
}
 800c100:	b005      	add	sp, #20
 800c102:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c106:	a903      	add	r1, sp, #12
 800c108:	4812      	ldr	r0, [pc, #72]	; (800c154 <shci_user_evt_proc+0x74>)
 800c10a:	f000 f892 	bl	800c232 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <shci_user_evt_proc+0x7c>)
 800c110:	69db      	ldr	r3, [r3, #28]
 800c112:	b18b      	cbz	r3, 800c138 <shci_user_evt_proc+0x58>
      UserEvtRxParam.pckt = phcievtbuffer;
 800c114:	9a03      	ldr	r2, [sp, #12]
 800c116:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c118:	a804      	add	r0, sp, #16
 800c11a:	2201      	movs	r2, #1
 800c11c:	f800 2d0c 	strb.w	r2, [r0, #-12]!
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c120:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c122:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c126:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <shci_user_evt_proc+0x78>)
 800c128:	741a      	strb	r2, [r3, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c12a:	4b0b      	ldr	r3, [pc, #44]	; (800c158 <shci_user_evt_proc+0x78>)
 800c12c:	7c1b      	ldrb	r3, [r3, #16]
 800c12e:	b13b      	cbz	r3, 800c140 <shci_user_evt_proc+0x60>
      TL_MM_EvtDone( phcievtbuffer );
 800c130:	9803      	ldr	r0, [sp, #12]
 800c132:	f000 fa59 	bl	800c5e8 <TL_MM_EvtDone>
 800c136:	e7dc      	b.n	800c0f2 <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c138:	4b07      	ldr	r3, [pc, #28]	; (800c158 <shci_user_evt_proc+0x78>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	741a      	strb	r2, [r3, #16]
 800c13e:	e7f4      	b.n	800c12a <shci_user_evt_proc+0x4a>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c140:	9903      	ldr	r1, [sp, #12]
 800c142:	4804      	ldr	r0, [pc, #16]	; (800c154 <shci_user_evt_proc+0x74>)
 800c144:	f000 f851 	bl	800c1ea <LST_insert_head>
 800c148:	e7d3      	b.n	800c0f2 <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c14a:	4802      	ldr	r0, [pc, #8]	; (800c154 <shci_user_evt_proc+0x74>)
 800c14c:	f7f4 ffa2 	bl	8001094 <shci_notify_asynch_evt>
  return;
 800c150:	e7d6      	b.n	800c100 <shci_user_evt_proc+0x20>
 800c152:	bf00      	nop
 800c154:	2000017c 	.word	0x2000017c
 800c158:	20000174 	.word	0x20000174
 800c15c:	20004670 	.word	0x20004670

0800c160 <shci_send>:
{
 800c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c164:	4680      	mov	r8, r0
 800c166:	460d      	mov	r5, r1
 800c168:	4617      	mov	r7, r2
 800c16a:	461e      	mov	r6, r3
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c16c:	2000      	movs	r0, #0
 800c16e:	f7ff ff59 	bl	800c024 <Cmd_SetStatus>
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c172:	4c0f      	ldr	r4, [pc, #60]	; (800c1b0 <shci_send+0x50>)
 800c174:	6860      	ldr	r0, [r4, #4]
 800c176:	f8a0 8009 	strh.w	r8, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c17a:	72c5      	strb	r5, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c17c:	462a      	mov	r2, r5
 800c17e:	4639      	mov	r1, r7
 800c180:	300c      	adds	r0, #12
 800c182:	f001 f897 	bl	800d2b4 <memcpy>
  shciContext.io.Send(0,0);
 800c186:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <shci_send+0x54>)
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2100      	movs	r1, #0
 800c18c:	4608      	mov	r0, r1
 800c18e:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c190:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c194:	f7f4 ff90 	bl	80010b8 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c198:	6861      	ldr	r1, [r4, #4]
 800c19a:	788a      	ldrb	r2, [r1, #2]
 800c19c:	3203      	adds	r2, #3
 800c19e:	f106 0008 	add.w	r0, r6, #8
 800c1a2:	f001 f887 	bl	800d2b4 <memcpy>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	f7ff ff3c 	bl	800c024 <Cmd_SetStatus>
}
 800c1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b0:	20000174 	.word	0x20000174
 800c1b4:	20004670 	.word	0x20004670

0800c1b8 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <shci_register_io_bus+0xc>)
 800c1ba:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <shci_register_io_bus+0x10>)
 800c1be:	6103      	str	r3, [r0, #16]

  return;
}
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	0800c455 	.word	0x0800c455
 800c1c8:	0800c491 	.word	0x0800c491

0800c1cc <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800c1cc:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800c1ce:	6040      	str	r0, [r0, #4]
}
 800c1d0:	4770      	bx	lr

0800c1d2 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1d2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c1d6:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c1d8:	6802      	ldr	r2, [r0, #0]
 800c1da:	4282      	cmp	r2, r0
 800c1dc:	d003      	beq.n	800c1e6 <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 800c1de:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1e0:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800c1e4:	4770      	bx	lr
    return_value = TRUE;
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	e7fa      	b.n	800c1e0 <LST_is_empty+0xe>

0800c1ea <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ea:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c1ee:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c1f0:	6802      	ldr	r2, [r0, #0]
 800c1f2:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800c1f4:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800c1f6:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800c1f8:	680a      	ldr	r2, [r1, #0]
 800c1fa:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1fc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c200:	4770      	bx	lr

0800c202 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c202:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c206:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c208:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800c20a:	6842      	ldr	r2, [r0, #4]
 800c20c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800c20e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800c210:	684a      	ldr	r2, [r1, #4]
 800c212:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c214:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c218:	4770      	bx	lr

0800c21a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c21a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c21e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c220:	6842      	ldr	r2, [r0, #4]
 800c222:	6801      	ldr	r1, [r0, #0]
 800c224:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 800c226:	6802      	ldr	r2, [r0, #0]
 800c228:	6841      	ldr	r1, [r0, #4]
 800c22a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c22c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c230:	4770      	bx	lr

0800c232 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c232:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c234:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c238:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c23a:	6803      	ldr	r3, [r0, #0]
 800c23c:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800c23e:	6800      	ldr	r0, [r0, #0]
 800c240:	f7ff ffeb 	bl	800c21a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c244:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c248:	bd10      	pop	{r4, pc}

0800c24a <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800c24a:	b510      	push	{r4, lr}
 800c24c:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c24e:	f000 fdc7 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c252:	f000 fd93 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800c256:	2300      	movs	r3, #0
 800c258:	2242      	movs	r2, #66	; 0x42
 800c25a:	7002      	strb	r2, [r0, #0]
 800c25c:	7043      	strb	r3, [r0, #1]
 800c25e:	7083      	strb	r3, [r0, #2]
 800c260:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c262:	2201      	movs	r2, #1
 800c264:	7102      	strb	r2, [r0, #4]
 800c266:	7143      	strb	r3, [r0, #5]
 800c268:	7183      	strb	r3, [r0, #6]
 800c26a:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800c26c:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c26e:	f000 fd97 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c272:	f000 fd89 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c276:	6880      	ldr	r0, [r0, #8]
}
 800c278:	b2c0      	uxtb	r0, r0
 800c27a:	bd10      	pop	{r4, pc}

0800c27c <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 800c27c:	b510      	push	{r4, lr}
 800c27e:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c280:	f000 fdae 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c284:	f000 fd7a 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 800c288:	2300      	movs	r3, #0
 800c28a:	224b      	movs	r2, #75	; 0x4b
 800c28c:	7002      	strb	r2, [r0, #0]
 800c28e:	7043      	strb	r3, [r0, #1]
 800c290:	7083      	strb	r3, [r0, #2]
 800c292:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c294:	2201      	movs	r2, #1
 800c296:	7102      	strb	r2, [r0, #4]
 800c298:	7143      	strb	r3, [r0, #5]
 800c29a:	7183      	strb	r3, [r0, #6]
 800c29c:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 800c29e:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c2a0:	f000 fd7e 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c2a4:	f000 fd70 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c2a8:	6880      	ldr	r0, [r0, #8]
}
 800c2aa:	b2c0      	uxtb	r0, r0
 800c2ac:	bd10      	pop	{r4, pc}

0800c2ae <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c2b2:	f000 fd95 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c2b6:	f000 fd61 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2250      	movs	r2, #80	; 0x50
 800c2be:	7002      	strb	r2, [r0, #0]
 800c2c0:	7043      	strb	r3, [r0, #1]
 800c2c2:	7083      	strb	r3, [r0, #2]
 800c2c4:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	7102      	strb	r2, [r0, #4]
 800c2ca:	7143      	strb	r3, [r0, #5]
 800c2cc:	7183      	strb	r3, [r0, #6]
 800c2ce:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800c2d0:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c2d2:	f000 fd65 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c2d6:	f000 fd57 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c2da:	6880      	ldr	r0, [r0, #8]
}
 800c2dc:	b2c0      	uxtb	r0, r0
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800c2e0:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800c2e2:	f000 fd7d 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c2e6:	f000 fd49 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	2251      	movs	r2, #81	; 0x51
 800c2ee:	7002      	strb	r2, [r0, #0]
 800c2f0:	7043      	strb	r3, [r0, #1]
 800c2f2:	7083      	strb	r3, [r0, #2]
 800c2f4:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800c2f6:	7103      	strb	r3, [r0, #4]
 800c2f8:	7143      	strb	r3, [r0, #5]
 800c2fa:	7183      	strb	r3, [r0, #6]
 800c2fc:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800c2fe:	f000 fd4f 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c302:	f000 fd41 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otIp6Address *)p_ot_req->Data[0];
}
 800c306:	6880      	ldr	r0, [r0, #8]
 800c308:	bd08      	pop	{r3, pc}

0800c30a <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800c30a:	b510      	push	{r4, lr}
 800c30c:	460c      	mov	r4, r1
  Pre_OtCmdProcessing();
 800c30e:	f000 fd67 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c312:	f000 fd33 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800c316:	2300      	movs	r3, #0
 800c318:	2256      	movs	r2, #86	; 0x56
 800c31a:	7002      	strb	r2, [r0, #0]
 800c31c:	7043      	strb	r3, [r0, #1]
 800c31e:	7083      	strb	r3, [r0, #2]
 800c320:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=1;
 800c322:	2201      	movs	r2, #1
 800c324:	7102      	strb	r2, [r0, #4]
 800c326:	7143      	strb	r3, [r0, #5]
 800c328:	7183      	strb	r3, [r0, #6]
 800c32a:	71c3      	strb	r3, [r0, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800c32c:	6084      	str	r4, [r0, #8]

  Ot_Cmd_Transfer();
 800c32e:	f000 fd37 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c332:	f000 fd29 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otError)p_ot_req->Data[0];
 800c336:	6880      	ldr	r0, [r0, #8]
}
 800c338:	b2c0      	uxtb	r0, r0
 800c33a:	bd10      	pop	{r4, pc}

0800c33c <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800c33c:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800c33e:	f000 fd4f 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c342:	f000 fd1b 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800c346:	2300      	movs	r3, #0
 800c348:	225e      	movs	r2, #94	; 0x5e
 800c34a:	7002      	strb	r2, [r0, #0]
 800c34c:	7043      	strb	r3, [r0, #1]
 800c34e:	7083      	strb	r3, [r0, #2]
 800c350:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800c352:	7103      	strb	r3, [r0, #4]
 800c354:	7143      	strb	r3, [r0, #5]
 800c356:	7183      	strb	r3, [r0, #6]
 800c358:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800c35a:	f000 fd21 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c35e:	f000 fd13 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (otDeviceRole)p_ot_req->Data[0];
 800c362:	6880      	ldr	r0, [r0, #8]
}
 800c364:	b2c0      	uxtb	r0, r0
 800c366:	bd08      	pop	{r3, pc}

0800c368 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800c368:	b508      	push	{r3, lr}
  Pre_OtCmdProcessing();
 800c36a:	f000 fd39 	bl	800cde0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c36e:	f000 fd05 	bl	800cd7c <THREAD_Get_OTCmdPayloadBuffer>

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800c372:	2300      	movs	r3, #0
 800c374:	2263      	movs	r2, #99	; 0x63
 800c376:	7002      	strb	r2, [r0, #0]
 800c378:	7043      	strb	r3, [r0, #1]
 800c37a:	7083      	strb	r3, [r0, #2]
 800c37c:	70c3      	strb	r3, [r0, #3]

  p_ot_req->Size=0;
 800c37e:	7103      	strb	r3, [r0, #4]
 800c380:	7143      	strb	r3, [r0, #5]
 800c382:	7183      	strb	r3, [r0, #6]
 800c384:	71c3      	strb	r3, [r0, #7]

  Ot_Cmd_Transfer();
 800c386:	f000 fd0b 	bl	800cda0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c38a:	f000 fcfd 	bl	800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>
  return (uint16_t)p_ot_req->Data[0];
 800c38e:	6880      	ldr	r0, [r0, #8]
}
 800c390:	b280      	uxth	r0, r0
 800c392:	bd08      	pop	{r3, pc}

0800c394 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800c394:	b500      	push	{lr}
 800c396:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c398:	e009      	b.n	800c3ae <SendFreeBuf+0x1a>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c39a:	a901      	add	r1, sp, #4
 800c39c:	4808      	ldr	r0, [pc, #32]	; (800c3c0 <SendFreeBuf+0x2c>)
 800c39e:	f7ff ff48 	bl	800c232 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <SendFreeBuf+0x30>)
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	9901      	ldr	r1, [sp, #4]
 800c3a8:	6918      	ldr	r0, [r3, #16]
 800c3aa:	f7ff ff2a 	bl	800c202 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c3ae:	4804      	ldr	r0, [pc, #16]	; (800c3c0 <SendFreeBuf+0x2c>)
 800c3b0:	f7ff ff0f 	bl	800c1d2 <LST_is_empty>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d0f0      	beq.n	800c39a <SendFreeBuf+0x6>
  }

  return;
}
 800c3b8:	b003      	add	sp, #12
 800c3ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3be:	bf00      	nop
 800c3c0:	20004698 	.word	0x20004698
 800c3c4:	20030000 	.word	0x20030000

0800c3c8 <TL_Enable>:
{
 800c3c8:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 800c3ca:	f000 fdad 	bl	800cf28 <HW_IPCC_Enable>
}
 800c3ce:	bd08      	pop	{r3, pc}

0800c3d0 <TL_Init>:
{
 800c3d0:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c3d2:	4a0e      	ldr	r2, [pc, #56]	; (800c40c <TL_Init+0x3c>)
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <TL_Init+0x40>)
 800c3d6:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c3d8:	f103 0120 	add.w	r1, r3, #32
 800c3dc:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c3de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3e2:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c3e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c3e8:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c3ea:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800c3ee:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c3f0:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800c3f4:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c3f6:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800c3fa:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c3fc:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800c400:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c402:	3378      	adds	r3, #120	; 0x78
 800c404:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800c406:	f000 fda7 	bl	800cf58 <HW_IPCC_Init>
}
 800c40a:	bd08      	pop	{r3, pc}
 800c40c:	20030000 	.word	0x20030000
 800c410:	20030024 	.word	0x20030024

0800c414 <HW_IPCC_BLE_RxEvtNot>:
{
 800c414:	b500      	push	{lr}
 800c416:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c418:	e007      	b.n	800c42a <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c41a:	a901      	add	r1, sp, #4
 800c41c:	4807      	ldr	r0, [pc, #28]	; (800c43c <HW_IPCC_BLE_RxEvtNot+0x28>)
 800c41e:	f7ff ff08 	bl	800c232 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <HW_IPCC_BLE_RxEvtNot+0x2c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	9801      	ldr	r0, [sp, #4]
 800c428:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c42a:	4804      	ldr	r0, [pc, #16]	; (800c43c <HW_IPCC_BLE_RxEvtNot+0x28>)
 800c42c:	f7ff fed1 	bl	800c1d2 <LST_is_empty>
 800c430:	2800      	cmp	r0, #0
 800c432:	d0f2      	beq.n	800c41a <HW_IPCC_BLE_RxEvtNot+0x6>
}
 800c434:	b003      	add	sp, #12
 800c436:	f85d fb04 	ldr.w	pc, [sp], #4
 800c43a:	bf00      	nop
 800c43c:	20030818 	.word	0x20030818
 800c440:	20004694 	.word	0x20004694

0800c444 <HW_IPCC_BLE_AclDataAckNot>:
{
 800c444:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 800c446:	4b02      	ldr	r3, [pc, #8]	; (800c450 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4798      	blx	r3
}
 800c44c:	bd08      	pop	{r3, pc}
 800c44e:	bf00      	nop
 800c450:	20004690 	.word	0x20004690

0800c454 <TL_SYS_Init>:
{
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800c458:	4d09      	ldr	r5, [pc, #36]	; (800c480 <TL_SYS_Init+0x2c>)
 800c45a:	4628      	mov	r0, r5
 800c45c:	f7ff feb6 	bl	800c1cc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c460:	4b08      	ldr	r3, [pc, #32]	; (800c484 <TL_SYS_Init+0x30>)
 800c462:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c464:	68a2      	ldr	r2, [r4, #8]
 800c466:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c468:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 800c46a:	f000 fdad 	bl	800cfc8 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c46e:	6822      	ldr	r2, [r4, #0]
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <TL_SYS_Init+0x34>)
 800c472:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c474:	6862      	ldr	r2, [r4, #4]
 800c476:	4b05      	ldr	r3, [pc, #20]	; (800c48c <TL_SYS_Init+0x38>)
 800c478:	601a      	str	r2, [r3, #0]
}
 800c47a:	2000      	movs	r0, #0
 800c47c:	bd38      	pop	{r3, r4, r5, pc}
 800c47e:	bf00      	nop
 800c480:	20030830 	.word	0x20030830
 800c484:	20030000 	.word	0x20030000
 800c488:	200046a0 	.word	0x200046a0
 800c48c:	200046a4 	.word	0x200046a4

0800c490 <TL_SYS_SendCmd>:
{
 800c490:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c492:	4b04      	ldr	r3, [pc, #16]	; (800c4a4 <TL_SYS_SendCmd+0x14>)
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2210      	movs	r2, #16
 800c49a:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 800c49c:	f000 fd9c 	bl	800cfd8 <HW_IPCC_SYS_SendCmd>
}
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	bd08      	pop	{r3, pc}
 800c4a4:	20030000 	.word	0x20030000

0800c4a8 <HW_IPCC_SYS_CmdEvtNot>:
{
 800c4a8:	b508      	push	{r3, lr}
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c4aa:	4b03      	ldr	r3, [pc, #12]	; (800c4b8 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <HW_IPCC_SYS_CmdEvtNot+0x14>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6810      	ldr	r0, [r2, #0]
 800c4b4:	4798      	blx	r3
}
 800c4b6:	bd08      	pop	{r3, pc}
 800c4b8:	20030000 	.word	0x20030000
 800c4bc:	200046a0 	.word	0x200046a0

0800c4c0 <HW_IPCC_SYS_EvtNot>:
{
 800c4c0:	b500      	push	{lr}
 800c4c2:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4c4:	e007      	b.n	800c4d6 <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c4c6:	a901      	add	r1, sp, #4
 800c4c8:	4807      	ldr	r0, [pc, #28]	; (800c4e8 <HW_IPCC_SYS_EvtNot+0x28>)
 800c4ca:	f7ff feb2 	bl	800c232 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HW_IPCC_SYS_EvtNot+0x2c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	9801      	ldr	r0, [sp, #4]
 800c4d4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c4d6:	4804      	ldr	r0, [pc, #16]	; (800c4e8 <HW_IPCC_SYS_EvtNot+0x28>)
 800c4d8:	f7ff fe7b 	bl	800c1d2 <LST_is_empty>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d0f2      	beq.n	800c4c6 <HW_IPCC_SYS_EvtNot+0x6>
}
 800c4e0:	b003      	add	sp, #12
 800c4e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4e6:	bf00      	nop
 800c4e8:	20030830 	.word	0x20030830
 800c4ec:	200046a4 	.word	0x200046a4

0800c4f0 <TL_THREAD_Init>:
{
 800c4f0:	b508      	push	{r3, lr}
  p_thread_table = TL_RefTable.p_thread_table;
 800c4f2:	4b05      	ldr	r3, [pc, #20]	; (800c508 <TL_THREAD_Init+0x18>)
 800c4f4:	689b      	ldr	r3, [r3, #8]
  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c4f6:	6842      	ldr	r2, [r0, #4]
 800c4f8:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c4fa:	6802      	ldr	r2, [r0, #0]
 800c4fc:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c4fe:	6882      	ldr	r2, [r0, #8]
 800c500:	601a      	str	r2, [r3, #0]
  HW_IPCC_THREAD_Init();
 800c502:	f000 fd8b 	bl	800d01c <HW_IPCC_THREAD_Init>
}
 800c506:	bd08      	pop	{r3, pc}
 800c508:	20030000 	.word	0x20030000

0800c50c <TL_OT_SendCmd>:
{
 800c50c:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c50e:	4b04      	ldr	r3, [pc, #16]	; (800c520 <TL_OT_SendCmd+0x14>)
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2208      	movs	r2, #8
 800c516:	721a      	strb	r2, [r3, #8]
  HW_IPCC_OT_SendCmd();
 800c518:	f000 fd8c 	bl	800d034 <HW_IPCC_OT_SendCmd>
}
 800c51c:	bd08      	pop	{r3, pc}
 800c51e:	bf00      	nop
 800c520:	20030000 	.word	0x20030000

0800c524 <TL_CLI_SendCmd>:
{
 800c524:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c526:	4b04      	ldr	r3, [pc, #16]	; (800c538 <TL_CLI_SendCmd+0x14>)
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	220a      	movs	r2, #10
 800c52e:	721a      	strb	r2, [r3, #8]
  HW_IPCC_CLI_SendCmd();
 800c530:	f000 fd8c 	bl	800d04c <HW_IPCC_CLI_SendCmd>
}
 800c534:	bd08      	pop	{r3, pc}
 800c536:	bf00      	nop
 800c538:	20030000 	.word	0x20030000

0800c53c <TL_THREAD_SendAck>:
{
 800c53c:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c53e:	4b04      	ldr	r3, [pc, #16]	; (800c550 <TL_THREAD_SendAck+0x14>)
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	220d      	movs	r2, #13
 800c546:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_SendAck();
 800c548:	f000 fd88 	bl	800d05c <HW_IPCC_THREAD_SendAck>
}
 800c54c:	bd08      	pop	{r3, pc}
 800c54e:	bf00      	nop
 800c550:	20030000 	.word	0x20030000

0800c554 <TL_THREAD_CliSendAck>:
{
 800c554:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c556:	4b04      	ldr	r3, [pc, #16]	; (800c568 <TL_THREAD_CliSendAck+0x14>)
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	220d      	movs	r2, #13
 800c55e:	721a      	strb	r2, [r3, #8]
  HW_IPCC_THREAD_CliSendAck();
 800c560:	f000 fd86 	bl	800d070 <HW_IPCC_THREAD_CliSendAck>
}
 800c564:	bd08      	pop	{r3, pc}
 800c566:	bf00      	nop
 800c568:	20030000 	.word	0x20030000

0800c56c <HW_IPCC_OT_CmdEvtNot>:
{
 800c56c:	b508      	push	{r3, lr}
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c56e:	4b03      	ldr	r3, [pc, #12]	; (800c57c <HW_IPCC_OT_CmdEvtNot+0x10>)
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	6898      	ldr	r0, [r3, #8]
 800c574:	f000 fc28 	bl	800cdc8 <TL_OT_CmdEvtReceived>
}
 800c578:	bd08      	pop	{r3, pc}
 800c57a:	bf00      	nop
 800c57c:	20030000 	.word	0x20030000

0800c580 <HW_IPCC_THREAD_EvtNot>:
{
 800c580:	b508      	push	{r3, lr}
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c582:	4b03      	ldr	r3, [pc, #12]	; (800c590 <HW_IPCC_THREAD_EvtNot+0x10>)
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	f000 fc22 	bl	800cdd0 <TL_THREAD_NotReceived>
}
 800c58c:	bd08      	pop	{r3, pc}
 800c58e:	bf00      	nop
 800c590:	20030000 	.word	0x20030000

0800c594 <HW_IPCC_THREAD_CliEvtNot>:
{
 800c594:	b508      	push	{r3, lr}
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c596:	4b03      	ldr	r3, [pc, #12]	; (800c5a4 <HW_IPCC_THREAD_CliEvtNot+0x10>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	6858      	ldr	r0, [r3, #4]
 800c59c:	f000 fc72 	bl	800ce84 <TL_THREAD_CliNotReceived>
}
 800c5a0:	bd08      	pop	{r3, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20030000 	.word	0x20030000

0800c5a8 <TL_MM_Init>:
{
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800c5ac:	4d0b      	ldr	r5, [pc, #44]	; (800c5dc <TL_MM_Init+0x34>)
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7ff fe0c 	bl	800c1cc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c5b4:	480a      	ldr	r0, [pc, #40]	; (800c5e0 <TL_MM_Init+0x38>)
 800c5b6:	f7ff fe09 	bl	800c1cc <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c5ba:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <TL_MM_Init+0x3c>)
 800c5bc:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c5be:	68a2      	ldr	r2, [r4, #8]
 800c5c0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c5c2:	68e2      	ldr	r2, [r4, #12]
 800c5c4:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c5c6:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c5c8:	6822      	ldr	r2, [r4, #0]
 800c5ca:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c5cc:	6862      	ldr	r2, [r4, #4]
 800c5ce:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c5d0:	6922      	ldr	r2, [r4, #16]
 800c5d2:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c5d4:	6962      	ldr	r2, [r4, #20]
 800c5d6:	619a      	str	r2, [r3, #24]
}
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	200300a8 	.word	0x200300a8
 800c5e0:	20004698 	.word	0x20004698
 800c5e4:	20030000 	.word	0x20030000

0800c5e8 <TL_MM_EvtDone>:
{
 800c5e8:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	4803      	ldr	r0, [pc, #12]	; (800c5fc <TL_MM_EvtDone+0x14>)
 800c5ee:	f7ff fe08 	bl	800c202 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c5f2:	4803      	ldr	r0, [pc, #12]	; (800c600 <TL_MM_EvtDone+0x18>)
 800c5f4:	f000 fda4 	bl	800d140 <HW_IPCC_MM_SendFreeBuf>
}
 800c5f8:	bd08      	pop	{r3, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20004698 	.word	0x20004698
 800c600:	0800c395 	.word	0x0800c395

0800c604 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c604:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800c606:	4c05      	ldr	r4, [pc, #20]	; (800c61c <TL_TRACES_Init+0x18>)
 800c608:	4620      	mov	r0, r4
 800c60a:	f7ff fddf 	bl	800c1cc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c60e:	4b04      	ldr	r3, [pc, #16]	; (800c620 <TL_TRACES_Init+0x1c>)
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c614:	f000 fdac 	bl	800d170 <HW_IPCC_TRACES_Init>

  return;
}
 800c618:	bd10      	pop	{r4, pc}
 800c61a:	bf00      	nop
 800c61c:	200300b0 	.word	0x200300b0
 800c620:	20030000 	.word	0x20030000

0800c624 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c624:	b500      	push	{lr}
 800c626:	b083      	sub	sp, #12
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c628:	e006      	b.n	800c638 <HW_IPCC_TRACES_EvtNot+0x14>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c62a:	a901      	add	r1, sp, #4
 800c62c:	4806      	ldr	r0, [pc, #24]	; (800c648 <HW_IPCC_TRACES_EvtNot+0x24>)
 800c62e:	f7ff fe00 	bl	800c232 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c632:	9801      	ldr	r0, [sp, #4]
 800c634:	f7f4 fd4a 	bl	80010cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c638:	4803      	ldr	r0, [pc, #12]	; (800c648 <HW_IPCC_TRACES_EvtNot+0x24>)
 800c63a:	f7ff fdca 	bl	800c1d2 <LST_is_empty>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d0f3      	beq.n	800c62a <HW_IPCC_TRACES_EvtNot+0x6>
  }

  return;
}
 800c642:	b003      	add	sp, #12
 800c644:	f85d fb04 	ldr.w	pc, [sp], #4
 800c648:	200300b0 	.word	0x200300b0

0800c64c <APP_THREAD_DummyReqHandler>:
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
    tempMessageInfo = pMessageInfo;
 800c64c:	4902      	ldr	r1, [pc, #8]	; (800c658 <APP_THREAD_DummyReqHandler+0xc>)
 800c64e:	600b      	str	r3, [r1, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800c650:	4b02      	ldr	r3, [pc, #8]	; (800c65c <APP_THREAD_DummyReqHandler+0x10>)
 800c652:	601a      	str	r2, [r3, #0]
}
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	200050a8 	.word	0x200050a8
 800c65c:	200050ec 	.word	0x200050ec

0800c660 <Wait_Getting_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
  while (FlagReceiveAckFromM0 == 0)
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <Wait_Getting_Ack_From_M0+0x10>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0fb      	beq.n	800c660 <Wait_Getting_Ack_From_M0>
  {
  }
  FlagReceiveAckFromM0 = 0;
 800c668:	4b01      	ldr	r3, [pc, #4]	; (800c670 <Wait_Getting_Ack_From_M0+0x10>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
}
 800c66e:	4770      	bx	lr
 800c670:	200047b0 	.word	0x200047b0

0800c674 <Receive_Ack_From_M0>:
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
  FlagReceiveAckFromM0 = 1;
 800c674:	4b01      	ldr	r3, [pc, #4]	; (800c67c <Receive_Ack_From_M0+0x8>)
 800c676:	2201      	movs	r2, #1
 800c678:	601a      	str	r2, [r3, #0]
}
 800c67a:	4770      	bx	lr
 800c67c:	200047b0 	.word	0x200047b0

0800c680 <APP_THREAD_CheckWirelessFirmwareInfo>:
{
 800c680:	b500      	push	{lr}
 800c682:	b087      	sub	sp, #28
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800c684:	a802      	add	r0, sp, #8
 800c686:	f7ff fc97 	bl	800bfb8 <SHCI_GetWirelessFwInfo>
 800c68a:	b110      	cbz	r0, 800c692 <APP_THREAD_CheckWirelessFirmwareInfo+0x12>
}
 800c68c:	b007      	add	sp, #28
 800c68e:	f85d fb04 	ldr.w	pc, [sp], #4
    APP_DBG("**********************************************************");
 800c692:	4a1b      	ldr	r2, [pc, #108]	; (800c700 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800c694:	2101      	movs	r1, #1
 800c696:	f7f6 fc4b 	bl	8002f30 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800c69a:	4a1a      	ldr	r2, [pc, #104]	; (800c704 <APP_THREAD_CheckWirelessFirmwareInfo+0x84>)
 800c69c:	2101      	movs	r1, #1
 800c69e:	2000      	movs	r0, #0
 800c6a0:	f7f6 fc46 	bl	8002f30 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800c6a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c6a8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800c6ac:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800c6b0:	9101      	str	r1, [sp, #4]
 800c6b2:	9200      	str	r2, [sp, #0]
 800c6b4:	4a14      	ldr	r2, [pc, #80]	; (800c708 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>)
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	f7f6 fc39 	bl	8002f30 <logApplication>
    switch(p_wireless_info->StackType)
 800c6be:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800c6c2:	2b11      	cmp	r3, #17
 800c6c4:	d00f      	beq.n	800c6e6 <APP_THREAD_CheckWirelessFirmwareInfo+0x66>
 800c6c6:	2b50      	cmp	r3, #80	; 0x50
 800c6c8:	d013      	beq.n	800c6f2 <APP_THREAD_CheckWirelessFirmwareInfo+0x72>
 800c6ca:	2b10      	cmp	r3, #16
 800c6cc:	d005      	beq.n	800c6da <APP_THREAD_CheckWirelessFirmwareInfo+0x5a>
    APP_DBG("**********************************************************");
 800c6ce:	4a0c      	ldr	r2, [pc, #48]	; (800c700 <APP_THREAD_CheckWirelessFirmwareInfo+0x80>)
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	f7f6 fc2c 	bl	8002f30 <logApplication>
}
 800c6d8:	e7d8      	b.n	800c68c <APP_THREAD_CheckWirelessFirmwareInfo+0xc>
      APP_DBG("FW Type : Thread FTD");
 800c6da:	4a0c      	ldr	r2, [pc, #48]	; (800c70c <APP_THREAD_CheckWirelessFirmwareInfo+0x8c>)
 800c6dc:	2101      	movs	r1, #1
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f7f6 fc26 	bl	8002f30 <logApplication>
      break;
 800c6e4:	e7f3      	b.n	800c6ce <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Thread MTD");
 800c6e6:	4a0a      	ldr	r2, [pc, #40]	; (800c710 <APP_THREAD_CheckWirelessFirmwareInfo+0x90>)
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f7f6 fc20 	bl	8002f30 <logApplication>
      break;
 800c6f0:	e7ed      	b.n	800c6ce <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 800c6f2:	4a08      	ldr	r2, [pc, #32]	; (800c714 <APP_THREAD_CheckWirelessFirmwareInfo+0x94>)
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	f7f6 fc1a 	bl	8002f30 <logApplication>
      break;
 800c6fc:	e7e7      	b.n	800c6ce <APP_THREAD_CheckWirelessFirmwareInfo+0x4e>
 800c6fe:	bf00      	nop
 800c700:	0800e690 	.word	0x0800e690
 800c704:	0800e6cc 	.word	0x0800e6cc
 800c708:	0800e6e8 	.word	0x0800e6e8
 800c70c:	0800e700 	.word	0x0800e700
 800c710:	0800e718 	.word	0x0800e718
 800c714:	0800e730 	.word	0x0800e730

0800c718 <APP_THREAD_DeviceConfig>:
{
 800c718:	b508      	push	{r3, lr}
  error = otInstanceErasePersistentInfo(NULL);
 800c71a:	2000      	movs	r0, #0
 800c71c:	f7ff f9da 	bl	800bad4 <otInstanceErasePersistentInfo>
  otInstanceFinalize(NULL);
 800c720:	2000      	movs	r0, #0
 800c722:	f7ff f9a2 	bl	800ba6a <otInstanceFinalize>
  otInstanceInitSingle();
 800c726:	f7ff f98a 	bl	800ba3e <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 800c72a:	2200      	movs	r2, #0
 800c72c:	491f      	ldr	r1, [pc, #124]	; (800c7ac <APP_THREAD_DeviceConfig+0x94>)
 800c72e:	4610      	mov	r0, r2
 800c730:	f7ff f9b0 	bl	800ba94 <otSetStateChangedCallback>
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 800c734:	2117      	movs	r1, #23
 800c736:	2000      	movs	r0, #0
 800c738:	f7ff fa44 	bl	800bbc4 <otLinkSetChannel>
  error = otLinkSetPanId(NULL, C_PANID);
 800c73c:	f241 2134 	movw	r1, #4660	; 0x1234
 800c740:	2000      	movs	r0, #0
 800c742:	f7ff fa58 	bl	800bbf6 <otLinkSetPanId>
  error = otIp6SetEnabled(NULL, true);
 800c746:	2101      	movs	r1, #1
 800c748:	2000      	movs	r0, #0
 800c74a:	f7ff f9da 	bl	800bb02 <otIp6SetEnabled>
  error = otThreadSetEnabled(NULL, true);
 800c74e:	2101      	movs	r1, #1
 800c750:	2000      	movs	r0, #0
 800c752:	f7ff fd7a 	bl	800c24a <otThreadSetEnabled>
  error = otThreadSetEnabled(NULL, false);
 800c756:	2100      	movs	r1, #0
 800c758:	4608      	mov	r0, r1
 800c75a:	f7ff fd76 	bl	800c24a <otThreadSetEnabled>
    error = otThreadSetMasterKey(NULL, &masterKey);
 800c75e:	4914      	ldr	r1, [pc, #80]	; (800c7b0 <APP_THREAD_DeviceConfig+0x98>)
 800c760:	2000      	movs	r0, #0
 800c762:	f7ff fda4 	bl	800c2ae <otThreadSetMasterKey>
    error = otThreadSetNetworkName(NULL, networkName);
 800c766:	4913      	ldr	r1, [pc, #76]	; (800c7b4 <APP_THREAD_DeviceConfig+0x9c>)
 800c768:	2000      	movs	r0, #0
 800c76a:	f7ff fdce 	bl	800c30a <otThreadSetNetworkName>
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 800c76e:	4912      	ldr	r1, [pc, #72]	; (800c7b8 <APP_THREAD_DeviceConfig+0xa0>)
 800c770:	2000      	movs	r0, #0
 800c772:	f7ff fd83 	bl	800c27c <otThreadSetExtendedPanId>
    error = otThreadSetEnabled(NULL, true);
 800c776:	2101      	movs	r1, #1
 800c778:	2000      	movs	r0, #0
 800c77a:	f7ff fd66 	bl	800c24a <otThreadSetEnabled>
    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 800c77e:	f241 6133 	movw	r1, #5683	; 0x1633
 800c782:	2000      	movs	r0, #0
 800c784:	f7ff f90b 	bl	800b99e <otCoapStart>
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 800c788:	490c      	ldr	r1, [pc, #48]	; (800c7bc <APP_THREAD_DeviceConfig+0xa4>)
 800c78a:	2000      	movs	r0, #0
 800c78c:	f7ff f921 	bl	800b9d2 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 800c790:	490b      	ldr	r1, [pc, #44]	; (800c7c0 <APP_THREAD_DeviceConfig+0xa8>)
 800c792:	2000      	movs	r0, #0
 800c794:	f7ff f91d 	bl	800b9d2 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 800c798:	490a      	ldr	r1, [pc, #40]	; (800c7c4 <APP_THREAD_DeviceConfig+0xac>)
 800c79a:	2000      	movs	r0, #0
 800c79c:	f7ff f919 	bl	800b9d2 <otCoapAddResource>
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 800c7a0:	4909      	ldr	r1, [pc, #36]	; (800c7c8 <APP_THREAD_DeviceConfig+0xb0>)
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	f7ff f915 	bl	800b9d2 <otCoapAddResource>
}
 800c7a8:	bd08      	pop	{r3, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0800cd09 	.word	0x0800cd09
 800c7b0:	0800e7fc 	.word	0x0800e7fc
 800c7b4:	0800e80c 	.word	0x0800e80c
 800c7b8:	0800e7f4 	.word	0x0800e7f4
 800c7bc:	20000038 	.word	0x20000038
 800c7c0:	20000048 	.word	0x20000048
 800c7c4:	20000028 	.word	0x20000028
 800c7c8:	20000058 	.word	0x20000058

0800c7cc <APP_THREAD_SendDataResponse>:
{
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	460e      	mov	r6, r1
  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 800c7d2:	4a18      	ldr	r2, [pc, #96]	; (800c834 <APP_THREAD_SendDataResponse+0x68>)
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	f7f6 fbaa 	bl	8002f30 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 800c7dc:	4c16      	ldr	r4, [pc, #88]	; (800c838 <APP_THREAD_SendDataResponse+0x6c>)
 800c7de:	2244      	movs	r2, #68	; 0x44
 800c7e0:	2120      	movs	r1, #32
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7fe ff63 	bl	800b6ae <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f7ff f852 	bl	800b892 <otCoapHeaderGetMessageId>
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7ff f800 	bl	800b7f6 <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f7ff f87f 	bl	800b8fa <otCoapHeaderGetToken>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	4628      	mov	r0, r5
 800c800:	f7ff f861 	bl	800b8c6 <otCoapHeaderGetTokenLength>
 800c804:	4602      	mov	r2, r0
 800c806:	4639      	mov	r1, r7
 800c808:	4620      	mov	r0, r4
 800c80a:	f7fe ff6c 	bl	800b6e6 <otCoapHeaderSetToken>
  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800c80e:	4621      	mov	r1, r4
 800c810:	2000      	movs	r0, #0
 800c812:	f7ff f88b 	bl	800b92c <otCoapNewMessage>
 800c816:	4601      	mov	r1, r0
 800c818:	4b08      	ldr	r3, [pc, #32]	; (800c83c <APP_THREAD_SendDataResponse+0x70>)
 800c81a:	6018      	str	r0, [r3, #0]
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 800c81c:	4632      	mov	r2, r6
 800c81e:	2000      	movs	r0, #0
 800c820:	f7ff f8f1 	bl	800ba06 <otCoapSendResponse>
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800c824:	b120      	cbz	r0, 800c830 <APP_THREAD_SendDataResponse+0x64>
 800c826:	4b05      	ldr	r3, [pc, #20]	; (800c83c <APP_THREAD_SendDataResponse+0x70>)
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	b108      	cbz	r0, 800c830 <APP_THREAD_SendDataResponse+0x64>
    otMessageFree(pOT_Message);
 800c82c:	f7ff f9fc 	bl	800bc28 <otMessageFree>
}
 800c830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c832:	bf00      	nop
 800c834:	0800e75c 	.word	0x0800e75c
 800c838:	200047b4 	.word	0x200047b4
 800c83c:	200049c4 	.word	0x200049c4

0800c840 <APP_THREAD_CoapToggleLoggingRequestHandler>:
{
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	460c      	mov	r4, r1
 800c846:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 800c848:	4608      	mov	r0, r1
 800c84a:	f7ff fa05 	bl	800bc58 <otMessageGetOffset>
 800c84e:	2306      	movs	r3, #6
 800c850:	4a17      	ldr	r2, [pc, #92]	; (800c8b0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800c852:	4601      	mov	r1, r0
 800c854:	4620      	mov	r0, r4
 800c856:	f7ff fa37 	bl	800bcc8 <otMessageRead>
 800c85a:	2806      	cmp	r0, #6
 800c85c:	d01b      	beq.n	800c896 <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
    tempMessageInfo = pMessageInfo;
 800c85e:	4b15      	ldr	r3, [pc, #84]	; (800c8b4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x74>)
 800c860:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800c862:	4b15      	ldr	r3, [pc, #84]	; (800c8b8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x78>)
 800c864:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800c866:	4628      	mov	r0, r5
 800c868:	f7fe ffdf 	bl	800b82a <otCoapHeaderGetType>
 800c86c:	b1d8      	cbz	r0, 800c8a6 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800c86e:	4628      	mov	r0, r5
 800c870:	f7fe ffdb 	bl	800b82a <otCoapHeaderGetType>
 800c874:	2810      	cmp	r0, #16
 800c876:	d11a      	bne.n	800c8ae <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800c878:	4628      	mov	r0, r5
 800c87a:	f7fe fff0 	bl	800b85e <otCoapHeaderGetCode>
 800c87e:	2803      	cmp	r0, #3
 800c880:	d115      	bne.n	800c8ae <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff f9e8 	bl	800bc58 <otMessageGetOffset>
 800c888:	2301      	movs	r3, #1
 800c88a:	4a0c      	ldr	r2, [pc, #48]	; (800c8bc <APP_THREAD_CoapToggleLoggingRequestHandler+0x7c>)
 800c88c:	4601      	mov	r1, r0
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fa1a 	bl	800bcc8 <otMessageRead>
}
 800c894:	e00b      	b.n	800c8ae <APP_THREAD_CoapToggleLoggingRequestHandler+0x6e>
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 800c896:	2300      	movs	r3, #0
 800c898:	461a      	mov	r2, r3
 800c89a:	4905      	ldr	r1, [pc, #20]	; (800c8b0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x70>)
 800c89c:	4808      	ldr	r0, [pc, #32]	; (800c8c0 <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>)
 800c89e:	6800      	ldr	r0, [r0, #0]
 800c8a0:	f7fc fbd0 	bl	8009044 <osMessageQueuePut>
 800c8a4:	e7db      	b.n	800c85e <APP_THREAD_CoapToggleLoggingRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7ff ff8f 	bl	800c7cc <APP_THREAD_SendDataResponse>
}
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	200050c0 	.word	0x200050c0
 800c8b4:	200050a8 	.word	0x200050a8
 800c8b8:	200050ec 	.word	0x200050ec
 800c8bc:	20004870 	.word	0x20004870
 800c8c0:	20004b9c 	.word	0x20004b9c

0800c8c4 <APP_THREAD_CoapLightsSimpleRequestHandler>:
{
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	4617      	mov	r7, r2
	lightsSimpleMessage = 0;
 800c8cc:	4e1a      	ldr	r6, [pc, #104]	; (800c938 <APP_THREAD_CoapLightsSimpleRequestHandler+0x74>)
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6033      	str	r3, [r6, #0]
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	f7ff f9c0 	bl	800bc58 <otMessageGetOffset>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	4632      	mov	r2, r6
 800c8dc:	4601      	mov	r1, r0
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f7ff f9f2 	bl	800bcc8 <otMessageRead>
 800c8e4:	2804      	cmp	r0, #4
 800c8e6:	d019      	beq.n	800c91c <APP_THREAD_CoapLightsSimpleRequestHandler+0x58>
    receivedMessage = (otMessageInfo *) pMessage;
 800c8e8:	4b14      	ldr	r3, [pc, #80]	; (800c93c <APP_THREAD_CoapLightsSimpleRequestHandler+0x78>)
 800c8ea:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f7fe ff9c 	bl	800b82a <otCoapHeaderGetType>
 800c8f2:	b1d8      	cbz	r0, 800c92c <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f7fe ff98 	bl	800b82a <otCoapHeaderGetType>
 800c8fa:	2810      	cmp	r0, #16
 800c8fc:	d11a      	bne.n	800c934 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7fe ffad 	bl	800b85e <otCoapHeaderGetCode>
 800c904:	2803      	cmp	r0, #3
 800c906:	d115      	bne.n	800c934 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800c908:	4620      	mov	r0, r4
 800c90a:	f7ff f9a5 	bl	800bc58 <otMessageGetOffset>
 800c90e:	2301      	movs	r3, #1
 800c910:	4a0b      	ldr	r2, [pc, #44]	; (800c940 <APP_THREAD_CoapLightsSimpleRequestHandler+0x7c>)
 800c912:	4601      	mov	r1, r0
 800c914:	4620      	mov	r0, r4
 800c916:	f7ff f9d7 	bl	800bcc8 <otMessageRead>
}
 800c91a:	e00b      	b.n	800c934 <APP_THREAD_CoapLightsSimpleRequestHandler+0x70>
    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 800c91c:	2300      	movs	r3, #0
 800c91e:	461a      	mov	r2, r3
 800c920:	4631      	mov	r1, r6
 800c922:	4808      	ldr	r0, [pc, #32]	; (800c944 <APP_THREAD_CoapLightsSimpleRequestHandler+0x80>)
 800c924:	6800      	ldr	r0, [r0, #0]
 800c926:	f7fc fb8d 	bl	8009044 <osMessageQueuePut>
 800c92a:	e7dd      	b.n	800c8e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x24>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800c92c:	4639      	mov	r1, r7
 800c92e:	4628      	mov	r0, r5
 800c930:	f7ff ff4c 	bl	800c7cc <APP_THREAD_SendDataResponse>
}
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c936:	bf00      	nop
 800c938:	20004bc4 	.word	0x20004bc4
 800c93c:	200050ec 	.word	0x200050ec
 800c940:	20004870 	.word	0x20004870
 800c944:	20004bbc 	.word	0x20004bbc

0800c948 <APP_THREAD_CoapLightsComplexRequestHandler>:
{
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4605      	mov	r5, r0
 800c94c:	460c      	mov	r4, r1
 800c94e:	4616      	mov	r6, r2
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 800c950:	4608      	mov	r0, r1
 800c952:	f7ff f981 	bl	800bc58 <otMessageGetOffset>
 800c956:	2312      	movs	r3, #18
 800c958:	4a11      	ldr	r2, [pc, #68]	; (800c9a0 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800c95a:	4601      	mov	r1, r0
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff f9b3 	bl	800bcc8 <otMessageRead>
 800c962:	2812      	cmp	r0, #18
 800c964:	d009      	beq.n	800c97a <APP_THREAD_CoapLightsComplexRequestHandler+0x32>
    tempMessageInfo = pMessageInfo;
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <APP_THREAD_CoapLightsComplexRequestHandler+0x5c>)
 800c968:	601e      	str	r6, [r3, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 800c96a:	4b0f      	ldr	r3, [pc, #60]	; (800c9a8 <APP_THREAD_CoapLightsComplexRequestHandler+0x60>)
 800c96c:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800c96e:	4628      	mov	r0, r5
 800c970:	f7fe ff5b 	bl	800b82a <otCoapHeaderGetType>
 800c974:	2810      	cmp	r0, #16
 800c976:	d004      	beq.n	800c982 <APP_THREAD_CoapLightsComplexRequestHandler+0x3a>
}
 800c978:	bd70      	pop	{r4, r5, r6, pc}
    	FrontLightsSet(&lightMessageComplex);
 800c97a:	4809      	ldr	r0, [pc, #36]	; (800c9a0 <APP_THREAD_CoapLightsComplexRequestHandler+0x58>)
 800c97c:	f7f5 ffc2 	bl	8002904 <FrontLightsSet>
 800c980:	e7f1      	b.n	800c966 <APP_THREAD_CoapLightsComplexRequestHandler+0x1e>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800c982:	4628      	mov	r0, r5
 800c984:	f7fe ff6b 	bl	800b85e <otCoapHeaderGetCode>
 800c988:	2803      	cmp	r0, #3
 800c98a:	d1f5      	bne.n	800c978 <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800c98c:	4620      	mov	r0, r4
 800c98e:	f7ff f963 	bl	800bc58 <otMessageGetOffset>
 800c992:	2301      	movs	r3, #1
 800c994:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <APP_THREAD_CoapLightsComplexRequestHandler+0x64>)
 800c996:	4601      	mov	r1, r0
 800c998:	4620      	mov	r0, r4
 800c99a:	f7ff f995 	bl	800bcc8 <otMessageRead>
}
 800c99e:	e7eb      	b.n	800c978 <APP_THREAD_CoapLightsComplexRequestHandler+0x30>
 800c9a0:	200050d8 	.word	0x200050d8
 800c9a4:	200050a8 	.word	0x200050a8
 800c9a8:	200050ec 	.word	0x200050ec
 800c9ac:	20004870 	.word	0x20004870

0800c9b0 <APP_THREAD_SendCoapUnicastRequest>:
{
 800c9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	4688      	mov	r8, r1
 800c9ba:	4615      	mov	r5, r2
 800c9bc:	4699      	mov	r9, r3
			  myRloc16 = otThreadGetRloc16(NULL);
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f7ff fcd2 	bl	800c368 <otThreadGetRloc16>
 800c9c4:	4b36      	ldr	r3, [pc, #216]	; (800caa0 <APP_THREAD_SendCoapUnicastRequest+0xf0>)
 800c9c6:	8018      	strh	r0, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	f7ff f8b3 	bl	800bb34 <otIp6IsEnabled>
 800c9ce:	4b35      	ldr	r3, [pc, #212]	; (800caa4 <APP_THREAD_SendCoapUnicastRequest+0xf4>)
 800c9d0:	7018      	strb	r0, [r3, #0]
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	f7ff fc84 	bl	800c2e0 <otThreadGetMeshLocalEid>
 800c9d8:	4b33      	ldr	r3, [pc, #204]	; (800caa8 <APP_THREAD_SendCoapUnicastRequest+0xf8>)
 800c9da:	6806      	ldr	r6, [r0, #0]
 800c9dc:	6844      	ldr	r4, [r0, #4]
 800c9de:	6881      	ldr	r1, [r0, #8]
 800c9e0:	68c2      	ldr	r2, [r0, #12]
 800c9e2:	601e      	str	r6, [r3, #0]
 800c9e4:	605c      	str	r4, [r3, #4]
 800c9e6:	6099      	str	r1, [r3, #8]
 800c9e8:	60da      	str	r2, [r3, #12]
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800c9ea:	4c30      	ldr	r4, [pc, #192]	; (800caac <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800c9ec:	222c      	movs	r2, #44	; 0x2c
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 fc6a 	bl	800d2ca <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800c9f6:	f104 0110 	add.w	r1, r4, #16
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7ff f8c7 	bl	800bb8e <otIp6AddressFromString>
 800ca00:	4e2b      	ldr	r6, [pc, #172]	; (800cab0 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800ca02:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800ca04:	2000      	movs	r0, #0
 800ca06:	f7ff fc6b 	bl	800c2e0 <otThreadGetMeshLocalEid>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	4625      	mov	r5, r4
 800ca0e:	6800      	ldr	r0, [r0, #0]
 800ca10:	6859      	ldr	r1, [r3, #4]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800ca1e:	f241 6333 	movw	r3, #5683	; 0x1633
 800ca22:	8463      	strh	r3, [r4, #34]	; 0x22
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 800ca24:	2000      	movs	r0, #0
 800ca26:	f7ff f89d 	bl	800bb64 <otIp6GetUnicastAddresses>
 800ca2a:	4b22      	ldr	r3, [pc, #136]	; (800cab4 <APP_THREAD_SendCoapUnicastRequest+0x104>)
 800ca2c:	6018      	str	r0, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 800ca2e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800ca30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800ca34:	4c20      	ldr	r4, [pc, #128]	; (800cab8 <APP_THREAD_SendCoapUnicastRequest+0x108>)
 800ca36:	2203      	movs	r2, #3
 800ca38:	2110      	movs	r1, #16
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7fe fe37 	bl	800b6ae <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800ca40:	2102      	movs	r1, #2
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7fe fe6b 	bl	800b71e <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800ca48:	4649      	mov	r1, r9
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7fe fe9d 	bl	800b78a <otCoapHeaderAppendUriPathOptions>
 800ca50:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7fe feb5 	bl	800b7c2 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800ca58:	4621      	mov	r1, r4
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	f7fe ff66 	bl	800b92c <otCoapNewMessage>
 800ca60:	4b16      	ldr	r3, [pc, #88]	; (800cabc <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800ca62:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800ca64:	b900      	cbnz	r0, 800ca68 <APP_THREAD_SendCoapUnicastRequest+0xb8>
 800ca66:	e7fe      	b.n	800ca66 <APP_THREAD_SendCoapUnicastRequest+0xb6>
			  error = otMessageAppend(pOT_Message, message, message_length);
 800ca68:	4642      	mov	r2, r8
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	f7ff f90e 	bl	800bc8c <otMessageAppend>
 800ca70:	4b0f      	ldr	r3, [pc, #60]	; (800cab0 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800ca72:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800ca74:	b100      	cbz	r0, 800ca78 <APP_THREAD_SendCoapUnicastRequest+0xc8>
 800ca76:	e7fe      	b.n	800ca76 <APP_THREAD_SendCoapUnicastRequest+0xc6>
			  error = otCoapSendRequest(NULL,
 800ca78:	2000      	movs	r0, #0
 800ca7a:	9000      	str	r0, [sp, #0]
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	4a0b      	ldr	r2, [pc, #44]	; (800caac <APP_THREAD_SendCoapUnicastRequest+0xfc>)
 800ca80:	490e      	ldr	r1, [pc, #56]	; (800cabc <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800ca82:	6809      	ldr	r1, [r1, #0]
 800ca84:	f7fe ff6b 	bl	800b95e <otCoapSendRequest>
 800ca88:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <APP_THREAD_SendCoapUnicastRequest+0x100>)
 800ca8a:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800ca8c:	b120      	cbz	r0, 800ca98 <APP_THREAD_SendCoapUnicastRequest+0xe8>
 800ca8e:	4b0b      	ldr	r3, [pc, #44]	; (800cabc <APP_THREAD_SendCoapUnicastRequest+0x10c>)
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	b108      	cbz	r0, 800ca98 <APP_THREAD_SendCoapUnicastRequest+0xe8>
				otMessageFree(pOT_Message);
 800ca94:	f7ff f8c8 	bl	800bc28 <otMessageFree>
}
 800ca98:	b003      	add	sp, #12
 800ca9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca9e:	bf00      	nop
 800caa0:	2000516a 	.word	0x2000516a
 800caa4:	200050ea 	.word	0x200050ea
 800caa8:	20005158 	.word	0x20005158
 800caac:	20004844 	.word	0x20004844
 800cab0:	200049c0 	.word	0x200049c0
 800cab4:	2000516c 	.word	0x2000516c
 800cab8:	200047b4 	.word	0x200047b4
 800cabc:	200049c4 	.word	0x200049c4

0800cac0 <APP_THREAD_SendCoapUnicastMsg>:
{
 800cac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cac4:	b083      	sub	sp, #12
 800cac6:	4607      	mov	r7, r0
 800cac8:	4688      	mov	r8, r1
 800caca:	4614      	mov	r4, r2
 800cacc:	4699      	mov	r9, r3
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 800cace:	4d2b      	ldr	r5, [pc, #172]	; (800cb7c <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800cad0:	222c      	movs	r2, #44	; 0x2c
 800cad2:	2100      	movs	r1, #0
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 fbf8 	bl	800d2ca <memset>
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 800cada:	f105 0110 	add.w	r1, r5, #16
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff f855 	bl	800bb8e <otIp6AddressFromString>
 800cae4:	4e26      	ldr	r6, [pc, #152]	; (800cb80 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800cae6:	7030      	strb	r0, [r6, #0]
			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 800cae8:	2000      	movs	r0, #0
 800caea:	f7ff fbf9 	bl	800c2e0 <otThreadGetMeshLocalEid>
 800caee:	4603      	mov	r3, r0
 800caf0:	462c      	mov	r4, r5
 800caf2:	6800      	ldr	r0, [r0, #0]
 800caf4:	6859      	ldr	r1, [r3, #4]
 800caf6:	689a      	ldr	r2, [r3, #8]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 800cafc:	2301      	movs	r3, #1
 800cafe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800cb02:	f241 6333 	movw	r3, #5683	; 0x1633
 800cb06:	846b      	strh	r3, [r5, #34]	; 0x22
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 800cb08:	4c1e      	ldr	r4, [pc, #120]	; (800cb84 <APP_THREAD_SendCoapUnicastMsg+0xc4>)
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	2110      	movs	r1, #16
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7fe fdcd 	bl	800b6ae <otCoapHeaderInit>
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 800cb14:	2102      	movs	r1, #2
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7fe fe01 	bl	800b71e <otCoapHeaderGenerateToken>
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7fe fe33 	bl	800b78a <otCoapHeaderAppendUriPathOptions>
 800cb24:	7030      	strb	r0, [r6, #0]
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 800cb26:	212a      	movs	r1, #42	; 0x2a
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f7fe fe12 	bl	800b752 <otCoapHeaderAppendContentFormatOption>
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7fe fe47 	bl	800b7c2 <otCoapHeaderSetPayloadMarker>
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 800cb34:	4621      	mov	r1, r4
 800cb36:	2000      	movs	r0, #0
 800cb38:	f7fe fef8 	bl	800b92c <otCoapNewMessage>
 800cb3c:	4b12      	ldr	r3, [pc, #72]	; (800cb88 <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800cb3e:	6018      	str	r0, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 800cb40:	b900      	cbnz	r0, 800cb44 <APP_THREAD_SendCoapUnicastMsg+0x84>
 800cb42:	e7fe      	b.n	800cb42 <APP_THREAD_SendCoapUnicastMsg+0x82>
			  error = otMessageAppend(pOT_Message, message, msgSize);
 800cb44:	4642      	mov	r2, r8
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7ff f8a0 	bl	800bc8c <otMessageAppend>
 800cb4c:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800cb4e:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE) while(1);
 800cb50:	b100      	cbz	r0, 800cb54 <APP_THREAD_SendCoapUnicastMsg+0x94>
 800cb52:	e7fe      	b.n	800cb52 <APP_THREAD_SendCoapUnicastMsg+0x92>
			  error = otCoapSendRequest(NULL,
 800cb54:	2000      	movs	r0, #0
 800cb56:	9000      	str	r0, [sp, #0]
 800cb58:	4603      	mov	r3, r0
 800cb5a:	4a08      	ldr	r2, [pc, #32]	; (800cb7c <APP_THREAD_SendCoapUnicastMsg+0xbc>)
 800cb5c:	490a      	ldr	r1, [pc, #40]	; (800cb88 <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800cb5e:	6809      	ldr	r1, [r1, #0]
 800cb60:	f7fe fefd 	bl	800b95e <otCoapSendRequest>
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <APP_THREAD_SendCoapUnicastMsg+0xc0>)
 800cb66:	7018      	strb	r0, [r3, #0]
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 800cb68:	b120      	cbz	r0, 800cb74 <APP_THREAD_SendCoapUnicastMsg+0xb4>
 800cb6a:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <APP_THREAD_SendCoapUnicastMsg+0xc8>)
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	b108      	cbz	r0, 800cb74 <APP_THREAD_SendCoapUnicastMsg+0xb4>
				otMessageFree(pOT_Message);
 800cb70:	f7ff f85a 	bl	800bc28 <otMessageFree>
}
 800cb74:	b003      	add	sp, #12
 800cb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20004844 	.word	0x20004844
 800cb80:	200049c0 	.word	0x200049c0
 800cb84:	200047b4 	.word	0x200047b4
 800cb88:	200049c4 	.word	0x200049c4

0800cb8c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800cb8c:	b508      	push	{r3, lr}
  CptReceiveMsgFromM0++;
 800cb8e:	4a05      	ldr	r2, [pc, #20]	; (800cba4 <Receive_Notification_From_M0+0x18>)
 800cb90:	6813      	ldr	r3, [r2, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800cb96:	2101      	movs	r1, #1
 800cb98:	4b03      	ldr	r3, [pc, #12]	; (800cba8 <Receive_Notification_From_M0+0x1c>)
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	f7fb ff1a 	bl	80089d4 <osThreadFlagsSet>
}
 800cba0:	bd08      	pop	{r3, pc}
 800cba2:	bf00      	nop
 800cba4:	200047ac 	.word	0x200047ac
 800cba8:	20004878 	.word	0x20004878

0800cbac <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 800cbac:	b508      	push	{r3, lr}
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800cbae:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <RxCpltCallback+0x44>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	2bff      	cmp	r3, #255	; 0xff
 800cbb6:	d80b      	bhi.n	800cbd0 <RxCpltCallback+0x24>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 800cbb8:	490d      	ldr	r1, [pc, #52]	; (800cbf0 <RxCpltCallback+0x44>)
 800cbba:	880b      	ldrh	r3, [r1, #0]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	b292      	uxth	r2, r2
 800cbc2:	800a      	strh	r2, [r1, #0]
 800cbc4:	4a0b      	ldr	r2, [pc, #44]	; (800cbf4 <RxCpltCallback+0x48>)
 800cbc6:	7812      	ldrb	r2, [r2, #0]
 800cbc8:	490b      	ldr	r1, [pc, #44]	; (800cbf8 <RxCpltCallback+0x4c>)
 800cbca:	54ca      	strb	r2, [r1, r3]
    if (aRxBuffer[0] == '\r')
 800cbcc:	2a0d      	cmp	r2, #13
 800cbce:	d006      	beq.n	800cbde <RxCpltCallback+0x32>
      osThreadFlagsSet(OsTaskCliId,1);
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 800cbd0:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <RxCpltCallback+0x50>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	4907      	ldr	r1, [pc, #28]	; (800cbf4 <RxCpltCallback+0x48>)
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f7f5 fc1e 	bl	8002418 <HW_UART_Receive_IT>
}
 800cbdc:	bd08      	pop	{r3, pc}
      CptReceiveCmdFromUser = 1U;
 800cbde:	2101      	movs	r1, #1
 800cbe0:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <RxCpltCallback+0x54>)
 800cbe2:	8019      	strh	r1, [r3, #0]
      osThreadFlagsSet(OsTaskCliId,1);
 800cbe4:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <RxCpltCallback+0x58>)
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	f7fb fef4 	bl	80089d4 <osThreadFlagsSet>
 800cbec:	e7f0      	b.n	800cbd0 <RxCpltCallback+0x24>
 800cbee:	bf00      	nop
 800cbf0:	200049c2 	.word	0x200049c2
 800cbf4:	2000487c 	.word	0x2000487c
 800cbf8:	200046a8 	.word	0x200046a8
 800cbfc:	0800cbad 	.word	0x0800cbad
 800cc00:	200047a8 	.word	0x200047a8
 800cc04:	20004874 	.word	0x20004874

0800cc08 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 800cc0a:	4c0f      	ldr	r4, [pc, #60]	; (800cc48 <Send_CLI_To_M0+0x40>)
 800cc0c:	f104 070c 	add.w	r7, r4, #12
 800cc10:	22ff      	movs	r2, #255	; 0xff
 800cc12:	2100      	movs	r1, #0
 800cc14:	4638      	mov	r0, r7
 800cc16:	f000 fb58 	bl	800d2ca <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 800cc1a:	4d0c      	ldr	r5, [pc, #48]	; (800cc4c <Send_CLI_To_M0+0x44>)
 800cc1c:	882a      	ldrh	r2, [r5, #0]
 800cc1e:	4e0c      	ldr	r6, [pc, #48]	; (800cc50 <Send_CLI_To_M0+0x48>)
 800cc20:	4631      	mov	r1, r6
 800cc22:	4638      	mov	r0, r7
 800cc24:	f000 fb46 	bl	800d2b4 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 800cc28:	882b      	ldrh	r3, [r5, #0]
 800cc2a:	72e3      	strb	r3, [r4, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	7261      	strb	r1, [r4, #9]
 800cc30:	72a1      	strb	r1, [r4, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 800cc32:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <Send_CLI_To_M0+0x4c>)
 800cc34:	8019      	strh	r1, [r3, #0]
  indexReceiveChar = 0;
 800cc36:	8029      	strh	r1, [r5, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 800cc38:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f000 fb44 	bl	800d2ca <memset>

  TL_CLI_SendCmd();
 800cc42:	f7ff fc6f 	bl	800c524 <TL_CLI_SendCmd>
}
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	20030838 	.word	0x20030838
 800cc4c:	200049c2 	.word	0x200049c2
 800cc50:	200046a8 	.word	0x200046a8
 800cc54:	200047a8 	.word	0x200047a8

0800cc58 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
{
 800cc58:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800cc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5e:	2101      	movs	r1, #1
 800cc60:	4608      	mov	r0, r1
 800cc62:	f7fb ff3d 	bl	8008ae0 <osThreadFlagsWait>
    Send_CLI_To_M0();
 800cc66:	f7ff ffcf 	bl	800cc08 <Send_CLI_To_M0>
 800cc6a:	e7f6      	b.n	800cc5a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x2>

0800cc6c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800cc6c:	b508      	push	{r3, lr}

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800cc6e:	f7ff fc71 	bl	800c554 <TL_THREAD_CliSendAck>
}
 800cc72:	bd08      	pop	{r3, pc}

0800cc74 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 800cc74:	b508      	push	{r3, lr}
  Send_CLI_Ack_For_OT();
 800cc76:	f7ff fff9 	bl	800cc6c <Send_CLI_Ack_For_OT>
}
 800cc7a:	bd08      	pop	{r3, pc}

0800cc7c <APP_THREAD_SendMyIP>:
void APP_THREAD_SendMyIP(){
 800cc7c:	b508      	push	{r3, lr}
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 800cc7e:	4b03      	ldr	r3, [pc, #12]	; (800cc8c <APP_THREAD_SendMyIP+0x10>)
 800cc80:	4a03      	ldr	r2, [pc, #12]	; (800cc90 <APP_THREAD_SendMyIP+0x14>)
 800cc82:	2105      	movs	r1, #5
 800cc84:	4803      	ldr	r0, [pc, #12]	; (800cc94 <APP_THREAD_SendMyIP+0x18>)
 800cc86:	f7ff fe93 	bl	800c9b0 <APP_THREAD_SendCoapUnicastRequest>
}
 800cc8a:	bd08      	pop	{r3, pc}
 800cc8c:	0800e7e4 	.word	0x0800e7e4
 800cc90:	20004980 	.word	0x20004980
 800cc94:	20000068 	.word	0x20000068

0800cc98 <APP_THREAD_CoapBorderTimeRequestHandler>:
{
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	4616      	mov	r6, r2
	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 800cca0:	4608      	mov	r0, r1
 800cca2:	f7fe ffd9 	bl	800bc58 <otMessageGetOffset>
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	4a14      	ldr	r2, [pc, #80]	; (800ccfc <APP_THREAD_CoapBorderTimeRequestHandler+0x64>)
 800ccaa:	4601      	mov	r1, r0
 800ccac:	4620      	mov	r0, r4
 800ccae:	f7ff f80b 	bl	800bcc8 <otMessageRead>
 800ccb2:	2840      	cmp	r0, #64	; 0x40
 800ccb4:	d019      	beq.n	800ccea <APP_THREAD_CoapBorderTimeRequestHandler+0x52>
    receivedMessage = (otMessageInfo *) pMessage;
 800ccb6:	4b12      	ldr	r3, [pc, #72]	; (800cd00 <APP_THREAD_CoapBorderTimeRequestHandler+0x68>)
 800ccb8:	601c      	str	r4, [r3, #0]
    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f7fe fdb5 	bl	800b82a <otCoapHeaderGetType>
 800ccc0:	b1b0      	cbz	r0, 800ccf0 <APP_THREAD_CoapBorderTimeRequestHandler+0x58>
    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f7fe fdb1 	bl	800b82a <otCoapHeaderGetType>
 800ccc8:	2810      	cmp	r0, #16
 800ccca:	d115      	bne.n	800ccf8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 800cccc:	4628      	mov	r0, r5
 800ccce:	f7fe fdc6 	bl	800b85e <otCoapHeaderGetCode>
 800ccd2:	2803      	cmp	r0, #3
 800ccd4:	d110      	bne.n	800ccf8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7fe ffbe 	bl	800bc58 <otMessageGetOffset>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <APP_THREAD_CoapBorderTimeRequestHandler+0x6c>)
 800cce0:	4601      	mov	r1, r0
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7fe fff0 	bl	800bcc8 <otMessageRead>
}
 800cce8:	e006      	b.n	800ccf8 <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
    	APP_THREAD_SendMyIP();
 800ccea:	f7ff ffc7 	bl	800cc7c <APP_THREAD_SendMyIP>
 800ccee:	e7e2      	b.n	800ccb6 <APP_THREAD_CoapBorderTimeRequestHandler+0x1e>
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f7ff fd6a 	bl	800c7cc <APP_THREAD_SendDataResponse>
}
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20004980 	.word	0x20004980
 800cd00:	200050ec 	.word	0x200050ec
 800cd04:	20004870 	.word	0x20004870

0800cd08 <APP_THREAD_StateNotif>:
  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800cd08:	f010 0f04 	tst.w	r0, #4
 800cd0c:	d100      	bne.n	800cd10 <APP_THREAD_StateNotif+0x8>
 800cd0e:	4770      	bx	lr
{
 800cd10:	b508      	push	{r3, lr}
    switch (otThreadGetDeviceRole(NULL))
 800cd12:	2000      	movs	r0, #0
 800cd14:	f7ff fb12 	bl	800c33c <otThreadGetDeviceRole>
 800cd18:	2804      	cmp	r0, #4
 800cd1a:	d813      	bhi.n	800cd44 <APP_THREAD_StateNotif+0x3c>
 800cd1c:	e8df f000 	tbb	[pc, r0]
 800cd20:	0c090308 	.word	0x0c090308
 800cd24:	0f          	.byte	0x0f
 800cd25:	00          	.byte	0x00
    	borderRouter.epoch = 0;
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <APP_THREAD_StateNotif+0x44>)
 800cd28:	2000      	movs	r0, #0
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
}
 800cd30:	bd08      	pop	{r3, pc}
    	APP_THREAD_SendMyIP();
 800cd32:	f7ff ffa3 	bl	800cc7c <APP_THREAD_SendMyIP>
      break;
 800cd36:	e7fb      	b.n	800cd30 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800cd38:	f7ff ffa0 	bl	800cc7c <APP_THREAD_SendMyIP>
      break;
 800cd3c:	e7f8      	b.n	800cd30 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800cd3e:	f7ff ff9d 	bl	800cc7c <APP_THREAD_SendMyIP>
      break;
 800cd42:	e7f5      	b.n	800cd30 <APP_THREAD_StateNotif+0x28>
    	APP_THREAD_SendMyIP();
 800cd44:	f7ff ff9a 	bl	800cc7c <APP_THREAD_SendMyIP>
}
 800cd48:	e7f2      	b.n	800cd30 <APP_THREAD_StateNotif+0x28>
 800cd4a:	bf00      	nop
 800cd4c:	20004980 	.word	0x20004980

0800cd50 <APP_THREAD_SendBorderPacket>:
void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 800cd50:	b500      	push	{lr}
 800cd52:	b083      	sub	sp, #12
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 800cd54:	2301      	movs	r3, #1
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	4b03      	ldr	r3, [pc, #12]	; (800cd68 <APP_THREAD_SendBorderPacket+0x18>)
 800cd5a:	4a04      	ldr	r2, [pc, #16]	; (800cd6c <APP_THREAD_SendBorderPacket+0x1c>)
 800cd5c:	21c4      	movs	r1, #196	; 0xc4
 800cd5e:	f7ff feaf 	bl	800cac0 <APP_THREAD_SendCoapUnicastMsg>
}
 800cd62:	b003      	add	sp, #12
 800cd64:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd68:	0800e7d4 	.word	0x0800e7d4
 800cd6c:	20004980 	.word	0x20004980

0800cd70 <APP_THREAD_RegisterCmdBuffer>:
  p_thread_otcmdbuffer = p_buffer;
 800cd70:	4b01      	ldr	r3, [pc, #4]	; (800cd78 <APP_THREAD_RegisterCmdBuffer+0x8>)
 800cd72:	6018      	str	r0, [r3, #0]
}
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	200049cc 	.word	0x200049cc

0800cd7c <THREAD_Get_OTCmdPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 800cd7c:	4b01      	ldr	r3, [pc, #4]	; (800cd84 <THREAD_Get_OTCmdPayloadBuffer+0x8>)
 800cd7e:	6818      	ldr	r0, [r3, #0]
}
 800cd80:	300c      	adds	r0, #12
 800cd82:	4770      	bx	lr
 800cd84:	200049cc 	.word	0x200049cc

0800cd88 <THREAD_Get_OTCmdRspPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800cd88:	4b01      	ldr	r3, [pc, #4]	; (800cd90 <THREAD_Get_OTCmdRspPayloadBuffer+0x8>)
 800cd8a:	6818      	ldr	r0, [r3, #0]
}
 800cd8c:	300b      	adds	r0, #11
 800cd8e:	4770      	bx	lr
 800cd90:	200049cc 	.word	0x200049cc

0800cd94 <THREAD_Get_NotificationPayloadBuffer>:
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 800cd94:	4b01      	ldr	r3, [pc, #4]	; (800cd9c <THREAD_Get_NotificationPayloadBuffer+0x8>)
 800cd96:	6818      	ldr	r0, [r3, #0]
}
 800cd98:	300b      	adds	r0, #11
 800cd9a:	4770      	bx	lr
 800cd9c:	200049c8 	.word	0x200049c8

0800cda0 <Ot_Cmd_Transfer>:
{
 800cda0:	b508      	push	{r3, lr}
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800cda2:	4b08      	ldr	r3, [pc, #32]	; (800cdc4 <Ot_Cmd_Transfer+0x24>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800cdaa:	7253      	strb	r3, [r2, #9]
 800cdac:	2302      	movs	r3, #2
 800cdae:	7293      	strb	r3, [r2, #10]
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 800cdb0:	6913      	ldr	r3, [r2, #16]
 800cdb2:	3302      	adds	r3, #2
 800cdb4:	009b      	lsls	r3, r3, #2
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 800cdb6:	72d3      	strb	r3, [r2, #11]
  TL_OT_SendCmd();
 800cdb8:	f7ff fba8 	bl	800c50c <TL_OT_SendCmd>
  Wait_Getting_Ack_From_M0();
 800cdbc:	f7ff fc50 	bl	800c660 <Wait_Getting_Ack_From_M0>
}
 800cdc0:	bd08      	pop	{r3, pc}
 800cdc2:	bf00      	nop
 800cdc4:	200049cc 	.word	0x200049cc

0800cdc8 <TL_OT_CmdEvtReceived>:
{
 800cdc8:	b508      	push	{r3, lr}
  Receive_Ack_From_M0();
 800cdca:	f7ff fc53 	bl	800c674 <Receive_Ack_From_M0>
}
 800cdce:	bd08      	pop	{r3, pc}

0800cdd0 <TL_THREAD_NotReceived>:
{
 800cdd0:	b508      	push	{r3, lr}
  p_thread_notif_M0_to_M4 = Notbuffer;
 800cdd2:	4b02      	ldr	r3, [pc, #8]	; (800cddc <TL_THREAD_NotReceived+0xc>)
 800cdd4:	6018      	str	r0, [r3, #0]
  Receive_Notification_From_M0();
 800cdd6:	f7ff fed9 	bl	800cb8c <Receive_Notification_From_M0>
}
 800cdda:	bd08      	pop	{r3, pc}
 800cddc:	200049c8 	.word	0x200049c8

0800cde0 <Pre_OtCmdProcessing>:
}
 800cde0:	4770      	bx	lr
	...

0800cde4 <APP_THREAD_Init_UART_CLI>:
{
 800cde4:	b508      	push	{r3, lr}
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 800cde6:	4a08      	ldr	r2, [pc, #32]	; (800ce08 <APP_THREAD_Init_UART_CLI+0x24>)
 800cde8:	2100      	movs	r1, #0
 800cdea:	4808      	ldr	r0, [pc, #32]	; (800ce0c <APP_THREAD_Init_UART_CLI+0x28>)
 800cdec:	f7fb fd7e 	bl	80088ec <osThreadNew>
 800cdf0:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <APP_THREAD_Init_UART_CLI+0x2c>)
 800cdf2:	6018      	str	r0, [r3, #0]
  MX_USART1_UART_Init();
 800cdf4:	f7f6 f9ca 	bl	800318c <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <APP_THREAD_Init_UART_CLI+0x30>)
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	4906      	ldr	r1, [pc, #24]	; (800ce18 <APP_THREAD_Init_UART_CLI+0x34>)
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f7f5 fb0a 	bl	8002418 <HW_UART_Receive_IT>
}
 800ce04:	bd08      	pop	{r3, pc}
 800ce06:	bf00      	nop
 800ce08:	0800e78c 	.word	0x0800e78c
 800ce0c:	0800cc59 	.word	0x0800cc59
 800ce10:	20004874 	.word	0x20004874
 800ce14:	0800cbad 	.word	0x0800cbad
 800ce18:	2000487c 	.word	0x2000487c

0800ce1c <APP_THREAD_TL_THREAD_INIT>:
{
 800ce1c:	b508      	push	{r3, lr}
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 800ce1e:	4806      	ldr	r0, [pc, #24]	; (800ce38 <APP_THREAD_TL_THREAD_INIT+0x1c>)
 800ce20:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <APP_THREAD_TL_THREAD_INIT+0x20>)
 800ce22:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800ce26:	6002      	str	r2, [r0, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 800ce28:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800ce2c:	6082      	str	r2, [r0, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800ce2e:	6043      	str	r3, [r0, #4]
  TL_THREAD_Init( &ThreadConfigBuffer );
 800ce30:	f7ff fb5e 	bl	800c4f0 <TL_THREAD_Init>
}
 800ce34:	bd08      	pop	{r3, pc}
 800ce36:	bf00      	nop
 800ce38:	200300b8 	.word	0x200300b8
 800ce3c:	20030838 	.word	0x20030838

0800ce40 <APP_THREAD_Init>:
{
 800ce40:	b508      	push	{r3, lr}
  APP_THREAD_CheckWirelessFirmwareInfo();
 800ce42:	f7ff fc1d 	bl	800c680 <APP_THREAD_CheckWirelessFirmwareInfo>
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 800ce46:	480b      	ldr	r0, [pc, #44]	; (800ce74 <APP_THREAD_Init+0x34>)
 800ce48:	f7ff ff92 	bl	800cd70 <APP_THREAD_RegisterCmdBuffer>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	2002      	movs	r0, #2
 800ce50:	f000 f9f0 	bl	800d234 <UTIL_LPM_SetOffMode>
  APP_THREAD_TL_THREAD_INIT();
 800ce54:	f7ff ffe2 	bl	800ce1c <APP_THREAD_TL_THREAD_INIT>
  APP_THREAD_Init_UART_CLI();
 800ce58:	f7ff ffc4 	bl	800cde4 <APP_THREAD_Init_UART_CLI>
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 800ce5c:	f7ff f88e 	bl	800bf7c <SHCI_C2_THREAD_Init>
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 800ce60:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <APP_THREAD_Init+0x38>)
 800ce62:	2100      	movs	r1, #0
 800ce64:	4805      	ldr	r0, [pc, #20]	; (800ce7c <APP_THREAD_Init+0x3c>)
 800ce66:	f7fb fd41 	bl	80088ec <osThreadNew>
 800ce6a:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <APP_THREAD_Init+0x40>)
 800ce6c:	6018      	str	r0, [r3, #0]
  APP_THREAD_DeviceConfig();
 800ce6e:	f7ff fc53 	bl	800c718 <APP_THREAD_DeviceConfig>
}
 800ce72:	bd08      	pop	{r3, pc}
 800ce74:	20030944 	.word	0x20030944
 800ce78:	0800e7b0 	.word	0x0800e7b0
 800ce7c:	0800ced9 	.word	0x0800ced9
 800ce80:	20004878 	.word	0x20004878

0800ce84 <TL_THREAD_CliNotReceived>:
{
 800ce84:	b538      	push	{r3, r4, r5, lr}
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800ce86:	7ac5      	ldrb	r5, [r0, #11]
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800ce88:	f100 040c 	add.w	r4, r0, #12
 800ce8c:	4907      	ldr	r1, [pc, #28]	; (800ceac <TL_THREAD_CliNotReceived+0x28>)
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f7f3 f976 	bl	8000180 <strcmp>
 800ce94:	b910      	cbnz	r0, 800ce9c <TL_THREAD_CliNotReceived+0x18>
    Send_CLI_Ack_For_OT();
 800ce96:	f7ff fee9 	bl	800cc6c <Send_CLI_Ack_For_OT>
}
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <TL_THREAD_CliNotReceived+0x2c>)
 800ce9e:	462a      	mov	r2, r5
 800cea0:	4621      	mov	r1, r4
 800cea2:	2000      	movs	r0, #0
 800cea4:	f7f5 faca 	bl	800243c <HW_UART_Transmit_IT>
 800cea8:	e7f7      	b.n	800ce9a <TL_THREAD_CliNotReceived+0x16>
 800ceaa:	bf00      	nop
 800ceac:	0800e788 	.word	0x0800e788
 800ceb0:	0800cc75 	.word	0x0800cc75

0800ceb4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 800ceb4:	b508      	push	{r3, lr}
  if (CptReceiveMsgFromM0 != 0)
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	b133      	cbz	r3, 800ceca <APP_THREAD_ProcessMsgM0ToM4+0x16>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d903      	bls.n	800cecc <APP_THREAD_ProcessMsgM0ToM4+0x18>
    else
    {
      OpenThread_CallBack_Processing();
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 800cec4:	4b03      	ldr	r3, [pc, #12]	; (800ced4 <APP_THREAD_ProcessMsgM0ToM4+0x20>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]
  }
}
 800ceca:	bd08      	pop	{r3, pc}
      OpenThread_CallBack_Processing();
 800cecc:	f7fe ff1c 	bl	800bd08 <OpenThread_CallBack_Processing>
 800ced0:	e7f8      	b.n	800cec4 <APP_THREAD_ProcessMsgM0ToM4+0x10>
 800ced2:	bf00      	nop
 800ced4:	200047ac 	.word	0x200047ac

0800ced8 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
{
 800ced8:	b508      	push	{r3, lr}
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 800ceda:	f04f 32ff 	mov.w	r2, #4294967295
 800cede:	2101      	movs	r1, #1
 800cee0:	4608      	mov	r0, r1
 800cee2:	f7fb fdfd 	bl	8008ae0 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 800cee6:	f7ff ffe5 	bl	800ceb4 <APP_THREAD_ProcessMsgM0ToM4>
 800ceea:	e7f6      	b.n	800ceda <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x2>

0800ceec <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ceec:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ceee:	4c06      	ldr	r4, [pc, #24]	; (800cf08 <HW_IPCC_MM_FreeBufHandler+0x1c>)
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cef6:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800cef8:	4b04      	ldr	r3, [pc, #16]	; (800cf0c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4798      	blx	r3
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cefe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf02:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	bf00      	nop
 800cf08:	58000c00 	.word	0x58000c00
 800cf0c:	200049d0 	.word	0x200049d0

0800cf10 <HW_IPCC_THREAD_CliNotEvtHandler>:
{
 800cf10:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800cf12:	4a04      	ldr	r2, [pc, #16]	; (800cf24 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800cf14:	6853      	ldr	r3, [r2, #4]
 800cf16:	f043 0310 	orr.w	r3, r3, #16
 800cf1a:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_CliEvtNot();
 800cf1c:	f7ff fb3a 	bl	800c594 <HW_IPCC_THREAD_CliEvtNot>
}
 800cf20:	bd08      	pop	{r3, pc}
 800cf22:	bf00      	nop
 800cf24:	58000c00 	.word	0x58000c00

0800cf28 <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cf28:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <HW_IPCC_Enable+0x28>)
 800cf2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cf2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf32:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf3c:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800cf3e:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800cf40:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cf42:	4a04      	ldr	r2, [pc, #16]	; (800cf54 <HW_IPCC_Enable+0x2c>)
 800cf44:	68d3      	ldr	r3, [r2, #12]
 800cf46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf4a:	60d3      	str	r3, [r2, #12]
}
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	58000800 	.word	0x58000800
 800cf54:	58000400 	.word	0x58000400

0800cf58 <HW_IPCC_Init>:
{
 800cf58:	b500      	push	{lr}
 800cf5a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cf5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cf66:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cf68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800cf70:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800cf72:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <HW_IPCC_Init+0x40>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cf82:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cf84:	202c      	movs	r0, #44	; 0x2c
 800cf86:	f7f6 ff37 	bl	8003df8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800cf8a:	202d      	movs	r0, #45	; 0x2d
 800cf8c:	f7f6 ff34 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 800cf90:	b003      	add	sp, #12
 800cf92:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf96:	bf00      	nop
 800cf98:	58000c00 	.word	0x58000c00

0800cf9c <HW_IPCC_BLE_AclDataEvtHandler>:
{
 800cf9c:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cf9e:	4a04      	ldr	r2, [pc, #16]	; (800cfb0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cfa0:	6853      	ldr	r3, [r2, #4]
 800cfa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfa6:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 800cfa8:	f7ff fa4c 	bl	800c444 <HW_IPCC_BLE_AclDataAckNot>
}
 800cfac:	bd08      	pop	{r3, pc}
 800cfae:	bf00      	nop
 800cfb0:	58000c00 	.word	0x58000c00

0800cfb4 <HW_IPCC_BLE_EvtHandler>:
{
 800cfb4:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 800cfb6:	f7ff fa2d 	bl	800c414 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800cfba:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <HW_IPCC_BLE_EvtHandler+0x10>)
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	609a      	str	r2, [r3, #8]
}
 800cfc0:	bd08      	pop	{r3, pc}
 800cfc2:	bf00      	nop
 800cfc4:	58000c00 	.word	0x58000c00

0800cfc8 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800cfc8:	4a02      	ldr	r2, [pc, #8]	; (800cfd4 <HW_IPCC_SYS_Init+0xc>)
 800cfca:	6853      	ldr	r3, [r2, #4]
 800cfcc:	f023 0302 	bic.w	r3, r3, #2
 800cfd0:	6053      	str	r3, [r2, #4]
}
 800cfd2:	4770      	bx	lr
 800cfd4:	58000c00 	.word	0x58000c00

0800cfd8 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <HW_IPCC_SYS_SendCmd+0x14>)
 800cfda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cfde:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cfe0:	685a      	ldr	r2, [r3, #4]
 800cfe2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cfe6:	605a      	str	r2, [r3, #4]
}
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	58000c00 	.word	0x58000c00

0800cff0 <HW_IPCC_SYS_CmdEvtHandler>:
{
 800cff0:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cff2:	4a04      	ldr	r2, [pc, #16]	; (800d004 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cff4:	6853      	ldr	r3, [r2, #4]
 800cff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cffa:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 800cffc:	f7ff fa54 	bl	800c4a8 <HW_IPCC_SYS_CmdEvtNot>
}
 800d000:	bd08      	pop	{r3, pc}
 800d002:	bf00      	nop
 800d004:	58000c00 	.word	0x58000c00

0800d008 <HW_IPCC_SYS_EvtHandler>:
{
 800d008:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 800d00a:	f7ff fa59 	bl	800c4c0 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d00e:	4b02      	ldr	r3, [pc, #8]	; (800d018 <HW_IPCC_SYS_EvtHandler+0x10>)
 800d010:	2202      	movs	r2, #2
 800d012:	609a      	str	r2, [r3, #8]
}
 800d014:	bd08      	pop	{r3, pc}
 800d016:	bf00      	nop
 800d018:	58000c00 	.word	0x58000c00

0800d01c <HW_IPCC_THREAD_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d01c:	4b04      	ldr	r3, [pc, #16]	; (800d030 <HW_IPCC_THREAD_Init+0x14>)
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	f022 0204 	bic.w	r2, r2, #4
 800d024:	605a      	str	r2, [r3, #4]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	f022 0210 	bic.w	r2, r2, #16
 800d02c:	605a      	str	r2, [r3, #4]
}
 800d02e:	4770      	bx	lr
 800d030:	58000c00 	.word	0x58000c00

0800d034 <HW_IPCC_OT_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <HW_IPCC_OT_SendCmd+0x14>)
 800d036:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d03a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d042:	605a      	str	r2, [r3, #4]
}
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	58000c00 	.word	0x58000c00

0800d04c <HW_IPCC_CLI_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d04c:	4b02      	ldr	r3, [pc, #8]	; (800d058 <HW_IPCC_CLI_SendCmd+0xc>)
 800d04e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d052:	609a      	str	r2, [r3, #8]
}
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	58000c00 	.word	0x58000c00

0800d05c <HW_IPCC_THREAD_SendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d05c:	4b03      	ldr	r3, [pc, #12]	; (800d06c <HW_IPCC_THREAD_SendAck+0x10>)
 800d05e:	2204      	movs	r2, #4
 800d060:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	f022 0204 	bic.w	r2, r2, #4
 800d068:	605a      	str	r2, [r3, #4]
}
 800d06a:	4770      	bx	lr
 800d06c:	58000c00 	.word	0x58000c00

0800d070 <HW_IPCC_THREAD_CliSendAck>:
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d070:	4b03      	ldr	r3, [pc, #12]	; (800d080 <HW_IPCC_THREAD_CliSendAck+0x10>)
 800d072:	2210      	movs	r2, #16
 800d074:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	f022 0210 	bic.w	r2, r2, #16
 800d07c:	605a      	str	r2, [r3, #4]
}
 800d07e:	4770      	bx	lr
 800d080:	58000c00 	.word	0x58000c00

0800d084 <HW_IPCC_OT_CmdEvtHandler>:
{
 800d084:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d086:	4a04      	ldr	r2, [pc, #16]	; (800d098 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800d088:	6853      	ldr	r3, [r2, #4]
 800d08a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d08e:	6053      	str	r3, [r2, #4]
  HW_IPCC_OT_CmdEvtNot();
 800d090:	f7ff fa6c 	bl	800c56c <HW_IPCC_OT_CmdEvtNot>
}
 800d094:	bd08      	pop	{r3, pc}
 800d096:	bf00      	nop
 800d098:	58000c00 	.word	0x58000c00

0800d09c <HW_IPCC_Tx_Handler>:
{
 800d09c:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d09e:	4b21      	ldr	r3, [pc, #132]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	f013 0f02 	tst.w	r3, #2
 800d0a6:	d104      	bne.n	800d0b2 <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d0a8:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d0b0:	d028      	beq.n	800d104 <HW_IPCC_Tx_Handler+0x68>
 800d0b2:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f013 0f04 	tst.w	r3, #4
 800d0ba:	d104      	bne.n	800d0c6 <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800d0bc:	4b19      	ldr	r3, [pc, #100]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800d0c4:	d021      	beq.n	800d10a <HW_IPCC_Tx_Handler+0x6e>
 800d0c6:	4b17      	ldr	r3, [pc, #92]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f013 0f02 	tst.w	r3, #2
 800d0ce:	d104      	bne.n	800d0da <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d0d0:	4b14      	ldr	r3, [pc, #80]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d0d8:	d01a      	beq.n	800d110 <HW_IPCC_Tx_Handler+0x74>
 800d0da:	4b12      	ldr	r3, [pc, #72]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	f013 0f08 	tst.w	r3, #8
 800d0e2:	d104      	bne.n	800d0ee <HW_IPCC_Tx_Handler+0x52>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d0e4:	4b0f      	ldr	r3, [pc, #60]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800d0ec:	d013      	beq.n	800d116 <HW_IPCC_Tx_Handler+0x7a>
 800d0ee:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f013 0f20 	tst.w	r3, #32
 800d0f6:	d104      	bne.n	800d102 <HW_IPCC_Tx_Handler+0x66>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <HW_IPCC_Tx_Handler+0x88>)
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800d100:	d00c      	beq.n	800d11c <HW_IPCC_Tx_Handler+0x80>
}
 800d102:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 800d104:	f7ff ff74 	bl	800cff0 <HW_IPCC_SYS_CmdEvtHandler>
 800d108:	e7fb      	b.n	800d102 <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_OT_CmdEvtHandler();
 800d10a:	f7ff ffbb 	bl	800d084 <HW_IPCC_OT_CmdEvtHandler>
 800d10e:	e7f8      	b.n	800d102 <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_SYS_CmdEvtHandler();
 800d110:	f7ff ff6e 	bl	800cff0 <HW_IPCC_SYS_CmdEvtHandler>
 800d114:	e7f5      	b.n	800d102 <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_MM_FreeBufHandler();
 800d116:	f7ff fee9 	bl	800ceec <HW_IPCC_MM_FreeBufHandler>
 800d11a:	e7f2      	b.n	800d102 <HW_IPCC_Tx_Handler+0x66>
    HW_IPCC_BLE_AclDataEvtHandler();
 800d11c:	f7ff ff3e 	bl	800cf9c <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 800d120:	e7ef      	b.n	800d102 <HW_IPCC_Tx_Handler+0x66>
 800d122:	bf00      	nop
 800d124:	58000c00 	.word	0x58000c00

0800d128 <HW_IPCC_THREAD_NotEvtHandler>:
{
 800d128:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel);
 800d12a:	4a04      	ldr	r2, [pc, #16]	; (800d13c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800d12c:	6853      	ldr	r3, [r2, #4]
 800d12e:	f043 0304 	orr.w	r3, r3, #4
 800d132:	6053      	str	r3, [r2, #4]
  HW_IPCC_THREAD_EvtNot();
 800d134:	f7ff fa24 	bl	800c580 <HW_IPCC_THREAD_EvtNot>
}
 800d138:	bd08      	pop	{r3, pc}
 800d13a:	bf00      	nop
 800d13c:	58000c00 	.word	0x58000c00

0800d140 <HW_IPCC_MM_SendFreeBuf>:
{
 800d140:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f013 0f08 	tst.w	r3, #8
 800d14a:	d105      	bne.n	800d158 <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 800d14c:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d14e:	4b06      	ldr	r3, [pc, #24]	; (800d168 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800d150:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d154:	609a      	str	r2, [r3, #8]
}
 800d156:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 800d158:	4b04      	ldr	r3, [pc, #16]	; (800d16c <HW_IPCC_MM_SendFreeBuf+0x2c>)
 800d15a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d15c:	4a02      	ldr	r2, [pc, #8]	; (800d168 <HW_IPCC_MM_SendFreeBuf+0x28>)
 800d15e:	6853      	ldr	r3, [r2, #4]
 800d160:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d164:	6053      	str	r3, [r2, #4]
 800d166:	e7f6      	b.n	800d156 <HW_IPCC_MM_SendFreeBuf+0x16>
 800d168:	58000c00 	.word	0x58000c00
 800d16c:	200049d0 	.word	0x200049d0

0800d170 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d170:	4a02      	ldr	r2, [pc, #8]	; (800d17c <HW_IPCC_TRACES_Init+0xc>)
 800d172:	6853      	ldr	r3, [r2, #4]
 800d174:	f023 0308 	bic.w	r3, r3, #8
 800d178:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800d17a:	4770      	bx	lr
 800d17c:	58000c00 	.word	0x58000c00

0800d180 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d180:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 800d182:	f7ff fa4f 	bl	800c624 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d186:	4b02      	ldr	r3, [pc, #8]	; (800d190 <HW_IPCC_TRACES_EvtHandler+0x10>)
 800d188:	2208      	movs	r2, #8
 800d18a:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800d18c:	bd08      	pop	{r3, pc}
 800d18e:	bf00      	nop
 800d190:	58000c00 	.word	0x58000c00

0800d194 <HW_IPCC_Rx_Handler>:
{
 800d194:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d196:	4b21      	ldr	r3, [pc, #132]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	f013 0f02 	tst.w	r3, #2
 800d19e:	d004      	beq.n	800d1aa <HW_IPCC_Rx_Handler+0x16>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d1a0:	4b1e      	ldr	r3, [pc, #120]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	f013 0f02 	tst.w	r3, #2
 800d1a8:	d028      	beq.n	800d1fc <HW_IPCC_Rx_Handler+0x68>
 800d1aa:	4b1c      	ldr	r3, [pc, #112]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	f013 0f04 	tst.w	r3, #4
 800d1b2:	d004      	beq.n	800d1be <HW_IPCC_Rx_Handler+0x2a>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800d1b4:	4b19      	ldr	r3, [pc, #100]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	f013 0f04 	tst.w	r3, #4
 800d1bc:	d021      	beq.n	800d202 <HW_IPCC_Rx_Handler+0x6e>
 800d1be:	4b17      	ldr	r3, [pc, #92]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	f013 0f10 	tst.w	r3, #16
 800d1c6:	d004      	beq.n	800d1d2 <HW_IPCC_Rx_Handler+0x3e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800d1c8:	4b14      	ldr	r3, [pc, #80]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	f013 0f10 	tst.w	r3, #16
 800d1d0:	d01a      	beq.n	800d208 <HW_IPCC_Rx_Handler+0x74>
 800d1d2:	4b12      	ldr	r3, [pc, #72]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	f013 0f01 	tst.w	r3, #1
 800d1da:	d004      	beq.n	800d1e6 <HW_IPCC_Rx_Handler+0x52>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	f013 0f01 	tst.w	r3, #1
 800d1e4:	d013      	beq.n	800d20e <HW_IPCC_Rx_Handler+0x7a>
 800d1e6:	4b0d      	ldr	r3, [pc, #52]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	f013 0f08 	tst.w	r3, #8
 800d1ee:	d004      	beq.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <HW_IPCC_Rx_Handler+0x88>)
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f013 0f08 	tst.w	r3, #8
 800d1f8:	d00c      	beq.n	800d214 <HW_IPCC_Rx_Handler+0x80>
}
 800d1fa:	bd08      	pop	{r3, pc}
      HW_IPCC_SYS_EvtHandler();
 800d1fc:	f7ff ff04 	bl	800d008 <HW_IPCC_SYS_EvtHandler>
 800d200:	e7fb      	b.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_NotEvtHandler();
 800d202:	f7ff ff91 	bl	800d128 <HW_IPCC_THREAD_NotEvtHandler>
 800d206:	e7f8      	b.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_THREAD_CliNotEvtHandler();
 800d208:	f7ff fe82 	bl	800cf10 <HW_IPCC_THREAD_CliNotEvtHandler>
 800d20c:	e7f5      	b.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_BLE_EvtHandler();
 800d20e:	f7ff fed1 	bl	800cfb4 <HW_IPCC_BLE_EvtHandler>
 800d212:	e7f2      	b.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
    HW_IPCC_TRACES_EvtHandler();
 800d214:	f7ff ffb4 	bl	800d180 <HW_IPCC_TRACES_EvtHandler>
  return;
 800d218:	e7ef      	b.n	800d1fa <HW_IPCC_Rx_Handler+0x66>
 800d21a:	bf00      	nop
 800d21c:	58000c00 	.word	0x58000c00

0800d220 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d220:	2300      	movs	r3, #0
 800d222:	4a02      	ldr	r2, [pc, #8]	; (800d22c <UTIL_LPM_Init+0xc>)
 800d224:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d226:	4a02      	ldr	r2, [pc, #8]	; (800d230 <UTIL_LPM_Init+0x10>)
 800d228:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d22a:	4770      	bx	lr
 800d22c:	200049d8 	.word	0x200049d8
 800d230:	200049d4 	.word	0x200049d4

0800d234 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d234:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d238:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800d23a:	b141      	cbz	r1, 800d24e <UTIL_LPM_SetOffMode+0x1a>
 800d23c:	2901      	cmp	r1, #1
 800d23e:	d103      	bne.n	800d248 <UTIL_LPM_SetOffMode+0x14>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d240:	4906      	ldr	r1, [pc, #24]	; (800d25c <UTIL_LPM_SetOffMode+0x28>)
 800d242:	680a      	ldr	r2, [r1, #0]
 800d244:	4310      	orrs	r0, r2
 800d246:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d248:	f383 8810 	msr	PRIMASK, r3
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d24c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800d24e:	4903      	ldr	r1, [pc, #12]	; (800d25c <UTIL_LPM_SetOffMode+0x28>)
 800d250:	680a      	ldr	r2, [r1, #0]
 800d252:	ea22 0000 	bic.w	r0, r2, r0
 800d256:	6008      	str	r0, [r1, #0]
      break;
 800d258:	e7f6      	b.n	800d248 <UTIL_LPM_SetOffMode+0x14>
 800d25a:	bf00      	nop
 800d25c:	200049d4 	.word	0x200049d4

0800d260 <__errno>:
 800d260:	4b01      	ldr	r3, [pc, #4]	; (800d268 <__errno+0x8>)
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20000070 	.word	0x20000070

0800d26c <__libc_init_array>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4e0d      	ldr	r6, [pc, #52]	; (800d2a4 <__libc_init_array+0x38>)
 800d270:	4c0d      	ldr	r4, [pc, #52]	; (800d2a8 <__libc_init_array+0x3c>)
 800d272:	1ba4      	subs	r4, r4, r6
 800d274:	10a4      	asrs	r4, r4, #2
 800d276:	2500      	movs	r5, #0
 800d278:	42a5      	cmp	r5, r4
 800d27a:	d109      	bne.n	800d290 <__libc_init_array+0x24>
 800d27c:	4e0b      	ldr	r6, [pc, #44]	; (800d2ac <__libc_init_array+0x40>)
 800d27e:	4c0c      	ldr	r4, [pc, #48]	; (800d2b0 <__libc_init_array+0x44>)
 800d280:	f001 f884 	bl	800e38c <_init>
 800d284:	1ba4      	subs	r4, r4, r6
 800d286:	10a4      	asrs	r4, r4, #2
 800d288:	2500      	movs	r5, #0
 800d28a:	42a5      	cmp	r5, r4
 800d28c:	d105      	bne.n	800d29a <__libc_init_array+0x2e>
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d294:	4798      	blx	r3
 800d296:	3501      	adds	r5, #1
 800d298:	e7ee      	b.n	800d278 <__libc_init_array+0xc>
 800d29a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d29e:	4798      	blx	r3
 800d2a0:	3501      	adds	r5, #1
 800d2a2:	e7f2      	b.n	800d28a <__libc_init_array+0x1e>
 800d2a4:	0800e920 	.word	0x0800e920
 800d2a8:	0800e920 	.word	0x0800e920
 800d2ac:	0800e920 	.word	0x0800e920
 800d2b0:	0800e924 	.word	0x0800e924

0800d2b4 <memcpy>:
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	1e43      	subs	r3, r0, #1
 800d2b8:	440a      	add	r2, r1
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	d100      	bne.n	800d2c0 <memcpy+0xc>
 800d2be:	bd10      	pop	{r4, pc}
 800d2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2c8:	e7f7      	b.n	800d2ba <memcpy+0x6>

0800d2ca <memset>:
 800d2ca:	4402      	add	r2, r0
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d100      	bne.n	800d2d4 <memset+0xa>
 800d2d2:	4770      	bx	lr
 800d2d4:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d8:	e7f9      	b.n	800d2ce <memset+0x4>
	...

0800d2dc <pow>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	ed2d 8b04 	vpush	{d8-d9}
 800d2e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d5b8 <pow+0x2dc>
 800d2e8:	b08d      	sub	sp, #52	; 0x34
 800d2ea:	ec57 6b10 	vmov	r6, r7, d0
 800d2ee:	ec55 4b11 	vmov	r4, r5, d1
 800d2f2:	f000 f965 	bl	800d5c0 <__ieee754_pow>
 800d2f6:	f999 3000 	ldrsb.w	r3, [r9]
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d302:	eef0 8a60 	vmov.f32	s17, s1
 800d306:	46c8      	mov	r8, r9
 800d308:	d05f      	beq.n	800d3ca <pow+0xee>
 800d30a:	4622      	mov	r2, r4
 800d30c:	462b      	mov	r3, r5
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f3 fb95 	bl	8000a40 <__aeabi_dcmpun>
 800d316:	4683      	mov	fp, r0
 800d318:	2800      	cmp	r0, #0
 800d31a:	d156      	bne.n	800d3ca <pow+0xee>
 800d31c:	4632      	mov	r2, r6
 800d31e:	463b      	mov	r3, r7
 800d320:	4630      	mov	r0, r6
 800d322:	4639      	mov	r1, r7
 800d324:	f7f3 fb8c 	bl	8000a40 <__aeabi_dcmpun>
 800d328:	9001      	str	r0, [sp, #4]
 800d32a:	b1e8      	cbz	r0, 800d368 <pow+0x8c>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2300      	movs	r3, #0
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f3 fb52 	bl	80009dc <__aeabi_dcmpeq>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d046      	beq.n	800d3ca <pow+0xee>
 800d33c:	2301      	movs	r3, #1
 800d33e:	9302      	str	r3, [sp, #8]
 800d340:	4b96      	ldr	r3, [pc, #600]	; (800d59c <pow+0x2c0>)
 800d342:	9303      	str	r3, [sp, #12]
 800d344:	4b96      	ldr	r3, [pc, #600]	; (800d5a0 <pow+0x2c4>)
 800d346:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d34a:	2200      	movs	r2, #0
 800d34c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d350:	9b00      	ldr	r3, [sp, #0]
 800d352:	2b02      	cmp	r3, #2
 800d354:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d358:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d35c:	d033      	beq.n	800d3c6 <pow+0xea>
 800d35e:	a802      	add	r0, sp, #8
 800d360:	f000 fefd 	bl	800e15e <matherr>
 800d364:	bb48      	cbnz	r0, 800d3ba <pow+0xde>
 800d366:	e05d      	b.n	800d424 <pow+0x148>
 800d368:	f04f 0a00 	mov.w	sl, #0
 800d36c:	f04f 0b00 	mov.w	fp, #0
 800d370:	4652      	mov	r2, sl
 800d372:	465b      	mov	r3, fp
 800d374:	4630      	mov	r0, r6
 800d376:	4639      	mov	r1, r7
 800d378:	f7f3 fb30 	bl	80009dc <__aeabi_dcmpeq>
 800d37c:	ec4b ab19 	vmov	d9, sl, fp
 800d380:	2800      	cmp	r0, #0
 800d382:	d054      	beq.n	800d42e <pow+0x152>
 800d384:	4652      	mov	r2, sl
 800d386:	465b      	mov	r3, fp
 800d388:	4620      	mov	r0, r4
 800d38a:	4629      	mov	r1, r5
 800d38c:	f7f3 fb26 	bl	80009dc <__aeabi_dcmpeq>
 800d390:	4680      	mov	r8, r0
 800d392:	b318      	cbz	r0, 800d3dc <pow+0x100>
 800d394:	2301      	movs	r3, #1
 800d396:	9302      	str	r3, [sp, #8]
 800d398:	4b80      	ldr	r3, [pc, #512]	; (800d59c <pow+0x2c0>)
 800d39a:	9303      	str	r3, [sp, #12]
 800d39c:	9b01      	ldr	r3, [sp, #4]
 800d39e:	930a      	str	r3, [sp, #40]	; 0x28
 800d3a0:	9b00      	ldr	r3, [sp, #0]
 800d3a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d3a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d3aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0d5      	beq.n	800d35e <pow+0x82>
 800d3b2:	4b7b      	ldr	r3, [pc, #492]	; (800d5a0 <pow+0x2c4>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3bc:	b11b      	cbz	r3, 800d3c6 <pow+0xea>
 800d3be:	f7ff ff4f 	bl	800d260 <__errno>
 800d3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c4:	6003      	str	r3, [r0, #0]
 800d3c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d3ca:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ce:	eef0 0a68 	vmov.f32	s1, s17
 800d3d2:	b00d      	add	sp, #52	; 0x34
 800d3d4:	ecbd 8b04 	vpop	{d8-d9}
 800d3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3dc:	ec45 4b10 	vmov	d0, r4, r5
 800d3e0:	f000 feb5 	bl	800e14e <finite>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d0f0      	beq.n	800d3ca <pow+0xee>
 800d3e8:	4652      	mov	r2, sl
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	f7f3 fafe 	bl	80009f0 <__aeabi_dcmplt>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d0e8      	beq.n	800d3ca <pow+0xee>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	9302      	str	r3, [sp, #8]
 800d3fc:	4b67      	ldr	r3, [pc, #412]	; (800d59c <pow+0x2c0>)
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	f999 3000 	ldrsb.w	r3, [r9]
 800d404:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d408:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d40c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d410:	b913      	cbnz	r3, 800d418 <pow+0x13c>
 800d412:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d416:	e7a2      	b.n	800d35e <pow+0x82>
 800d418:	4962      	ldr	r1, [pc, #392]	; (800d5a4 <pow+0x2c8>)
 800d41a:	2000      	movs	r0, #0
 800d41c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d420:	2b02      	cmp	r3, #2
 800d422:	d19c      	bne.n	800d35e <pow+0x82>
 800d424:	f7ff ff1c 	bl	800d260 <__errno>
 800d428:	2321      	movs	r3, #33	; 0x21
 800d42a:	6003      	str	r3, [r0, #0]
 800d42c:	e7c5      	b.n	800d3ba <pow+0xde>
 800d42e:	eeb0 0a48 	vmov.f32	s0, s16
 800d432:	eef0 0a68 	vmov.f32	s1, s17
 800d436:	f000 fe8a 	bl	800e14e <finite>
 800d43a:	9000      	str	r0, [sp, #0]
 800d43c:	2800      	cmp	r0, #0
 800d43e:	f040 8081 	bne.w	800d544 <pow+0x268>
 800d442:	ec47 6b10 	vmov	d0, r6, r7
 800d446:	f000 fe82 	bl	800e14e <finite>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d07a      	beq.n	800d544 <pow+0x268>
 800d44e:	ec45 4b10 	vmov	d0, r4, r5
 800d452:	f000 fe7c 	bl	800e14e <finite>
 800d456:	2800      	cmp	r0, #0
 800d458:	d074      	beq.n	800d544 <pow+0x268>
 800d45a:	ec53 2b18 	vmov	r2, r3, d8
 800d45e:	ee18 0a10 	vmov	r0, s16
 800d462:	4619      	mov	r1, r3
 800d464:	f7f3 faec 	bl	8000a40 <__aeabi_dcmpun>
 800d468:	f999 9000 	ldrsb.w	r9, [r9]
 800d46c:	4b4b      	ldr	r3, [pc, #300]	; (800d59c <pow+0x2c0>)
 800d46e:	b1b0      	cbz	r0, 800d49e <pow+0x1c2>
 800d470:	2201      	movs	r2, #1
 800d472:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d476:	9b00      	ldr	r3, [sp, #0]
 800d478:	930a      	str	r3, [sp, #40]	; 0x28
 800d47a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d47e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d482:	f1b9 0f00 	cmp.w	r9, #0
 800d486:	d0c4      	beq.n	800d412 <pow+0x136>
 800d488:	4652      	mov	r2, sl
 800d48a:	465b      	mov	r3, fp
 800d48c:	4650      	mov	r0, sl
 800d48e:	4659      	mov	r1, fp
 800d490:	f7f3 f966 	bl	8000760 <__aeabi_ddiv>
 800d494:	f1b9 0f02 	cmp.w	r9, #2
 800d498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d49c:	e7c1      	b.n	800d422 <pow+0x146>
 800d49e:	2203      	movs	r2, #3
 800d4a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4a4:	900a      	str	r0, [sp, #40]	; 0x28
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	4b3e      	ldr	r3, [pc, #248]	; (800d5a8 <pow+0x2cc>)
 800d4ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d4b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d4b6:	f7f3 f829 	bl	800050c <__aeabi_dmul>
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	460d      	mov	r5, r1
 800d4be:	f1b9 0f00 	cmp.w	r9, #0
 800d4c2:	d124      	bne.n	800d50e <pow+0x232>
 800d4c4:	4b39      	ldr	r3, [pc, #228]	; (800d5ac <pow+0x2d0>)
 800d4c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d4ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	465b      	mov	r3, fp
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	f7f3 fa8b 	bl	80009f0 <__aeabi_dcmplt>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d056      	beq.n	800d58c <pow+0x2b0>
 800d4de:	ec45 4b10 	vmov	d0, r4, r5
 800d4e2:	f000 fe49 	bl	800e178 <rint>
 800d4e6:	4622      	mov	r2, r4
 800d4e8:	462b      	mov	r3, r5
 800d4ea:	ec51 0b10 	vmov	r0, r1, d0
 800d4ee:	f7f3 fa75 	bl	80009dc <__aeabi_dcmpeq>
 800d4f2:	b920      	cbnz	r0, 800d4fe <pow+0x222>
 800d4f4:	4b2e      	ldr	r3, [pc, #184]	; (800d5b0 <pow+0x2d4>)
 800d4f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d4fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d4fe:	f998 3000 	ldrsb.w	r3, [r8]
 800d502:	2b02      	cmp	r3, #2
 800d504:	d142      	bne.n	800d58c <pow+0x2b0>
 800d506:	f7ff feab 	bl	800d260 <__errno>
 800d50a:	2322      	movs	r3, #34	; 0x22
 800d50c:	e78d      	b.n	800d42a <pow+0x14e>
 800d50e:	4b29      	ldr	r3, [pc, #164]	; (800d5b4 <pow+0x2d8>)
 800d510:	2200      	movs	r2, #0
 800d512:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d516:	4630      	mov	r0, r6
 800d518:	4652      	mov	r2, sl
 800d51a:	465b      	mov	r3, fp
 800d51c:	4639      	mov	r1, r7
 800d51e:	f7f3 fa67 	bl	80009f0 <__aeabi_dcmplt>
 800d522:	2800      	cmp	r0, #0
 800d524:	d0eb      	beq.n	800d4fe <pow+0x222>
 800d526:	ec45 4b10 	vmov	d0, r4, r5
 800d52a:	f000 fe25 	bl	800e178 <rint>
 800d52e:	4622      	mov	r2, r4
 800d530:	462b      	mov	r3, r5
 800d532:	ec51 0b10 	vmov	r0, r1, d0
 800d536:	f7f3 fa51 	bl	80009dc <__aeabi_dcmpeq>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d1df      	bne.n	800d4fe <pow+0x222>
 800d53e:	2200      	movs	r2, #0
 800d540:	4b18      	ldr	r3, [pc, #96]	; (800d5a4 <pow+0x2c8>)
 800d542:	e7da      	b.n	800d4fa <pow+0x21e>
 800d544:	2200      	movs	r2, #0
 800d546:	2300      	movs	r3, #0
 800d548:	ec51 0b18 	vmov	r0, r1, d8
 800d54c:	f7f3 fa46 	bl	80009dc <__aeabi_dcmpeq>
 800d550:	2800      	cmp	r0, #0
 800d552:	f43f af3a 	beq.w	800d3ca <pow+0xee>
 800d556:	ec47 6b10 	vmov	d0, r6, r7
 800d55a:	f000 fdf8 	bl	800e14e <finite>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f af33 	beq.w	800d3ca <pow+0xee>
 800d564:	ec45 4b10 	vmov	d0, r4, r5
 800d568:	f000 fdf1 	bl	800e14e <finite>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f43f af2c 	beq.w	800d3ca <pow+0xee>
 800d572:	2304      	movs	r3, #4
 800d574:	9302      	str	r3, [sp, #8]
 800d576:	4b09      	ldr	r3, [pc, #36]	; (800d59c <pow+0x2c0>)
 800d578:	9303      	str	r3, [sp, #12]
 800d57a:	2300      	movs	r3, #0
 800d57c:	930a      	str	r3, [sp, #40]	; 0x28
 800d57e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d582:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d586:	ed8d 9b08 	vstr	d9, [sp, #32]
 800d58a:	e7b8      	b.n	800d4fe <pow+0x222>
 800d58c:	a802      	add	r0, sp, #8
 800d58e:	f000 fde6 	bl	800e15e <matherr>
 800d592:	2800      	cmp	r0, #0
 800d594:	f47f af11 	bne.w	800d3ba <pow+0xde>
 800d598:	e7b5      	b.n	800d506 <pow+0x22a>
 800d59a:	bf00      	nop
 800d59c:	0800e8d4 	.word	0x0800e8d4
 800d5a0:	3ff00000 	.word	0x3ff00000
 800d5a4:	fff00000 	.word	0xfff00000
 800d5a8:	3fe00000 	.word	0x3fe00000
 800d5ac:	47efffff 	.word	0x47efffff
 800d5b0:	c7efffff 	.word	0xc7efffff
 800d5b4:	7ff00000 	.word	0x7ff00000
 800d5b8:	200000d4 	.word	0x200000d4
 800d5bc:	00000000 	.word	0x00000000

0800d5c0 <__ieee754_pow>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	b091      	sub	sp, #68	; 0x44
 800d5c6:	ed8d 1b00 	vstr	d1, [sp]
 800d5ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d5ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d5d2:	ea58 0302 	orrs.w	r3, r8, r2
 800d5d6:	ec57 6b10 	vmov	r6, r7, d0
 800d5da:	f000 84be 	beq.w	800df5a <__ieee754_pow+0x99a>
 800d5de:	4b7a      	ldr	r3, [pc, #488]	; (800d7c8 <__ieee754_pow+0x208>)
 800d5e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	463d      	mov	r5, r7
 800d5e8:	ee10 aa10 	vmov	sl, s0
 800d5ec:	dc09      	bgt.n	800d602 <__ieee754_pow+0x42>
 800d5ee:	d103      	bne.n	800d5f8 <__ieee754_pow+0x38>
 800d5f0:	b93e      	cbnz	r6, 800d602 <__ieee754_pow+0x42>
 800d5f2:	45a0      	cmp	r8, r4
 800d5f4:	dc0d      	bgt.n	800d612 <__ieee754_pow+0x52>
 800d5f6:	e001      	b.n	800d5fc <__ieee754_pow+0x3c>
 800d5f8:	4598      	cmp	r8, r3
 800d5fa:	dc02      	bgt.n	800d602 <__ieee754_pow+0x42>
 800d5fc:	4598      	cmp	r8, r3
 800d5fe:	d10e      	bne.n	800d61e <__ieee754_pow+0x5e>
 800d600:	b16a      	cbz	r2, 800d61e <__ieee754_pow+0x5e>
 800d602:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d606:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d60a:	ea54 030a 	orrs.w	r3, r4, sl
 800d60e:	f000 84a4 	beq.w	800df5a <__ieee754_pow+0x99a>
 800d612:	486e      	ldr	r0, [pc, #440]	; (800d7cc <__ieee754_pow+0x20c>)
 800d614:	b011      	add	sp, #68	; 0x44
 800d616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	f000 bda5 	b.w	800e168 <nan>
 800d61e:	2d00      	cmp	r5, #0
 800d620:	da53      	bge.n	800d6ca <__ieee754_pow+0x10a>
 800d622:	4b6b      	ldr	r3, [pc, #428]	; (800d7d0 <__ieee754_pow+0x210>)
 800d624:	4598      	cmp	r8, r3
 800d626:	dc4d      	bgt.n	800d6c4 <__ieee754_pow+0x104>
 800d628:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d62c:	4598      	cmp	r8, r3
 800d62e:	dd4c      	ble.n	800d6ca <__ieee754_pow+0x10a>
 800d630:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d634:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d638:	2b14      	cmp	r3, #20
 800d63a:	dd26      	ble.n	800d68a <__ieee754_pow+0xca>
 800d63c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d640:	fa22 f103 	lsr.w	r1, r2, r3
 800d644:	fa01 f303 	lsl.w	r3, r1, r3
 800d648:	4293      	cmp	r3, r2
 800d64a:	d13e      	bne.n	800d6ca <__ieee754_pow+0x10a>
 800d64c:	f001 0101 	and.w	r1, r1, #1
 800d650:	f1c1 0b02 	rsb	fp, r1, #2
 800d654:	2a00      	cmp	r2, #0
 800d656:	d15b      	bne.n	800d710 <__ieee754_pow+0x150>
 800d658:	4b5b      	ldr	r3, [pc, #364]	; (800d7c8 <__ieee754_pow+0x208>)
 800d65a:	4598      	cmp	r8, r3
 800d65c:	d124      	bne.n	800d6a8 <__ieee754_pow+0xe8>
 800d65e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d662:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d666:	ea53 030a 	orrs.w	r3, r3, sl
 800d66a:	f000 8476 	beq.w	800df5a <__ieee754_pow+0x99a>
 800d66e:	4b59      	ldr	r3, [pc, #356]	; (800d7d4 <__ieee754_pow+0x214>)
 800d670:	429c      	cmp	r4, r3
 800d672:	dd2d      	ble.n	800d6d0 <__ieee754_pow+0x110>
 800d674:	f1b9 0f00 	cmp.w	r9, #0
 800d678:	f280 8473 	bge.w	800df62 <__ieee754_pow+0x9a2>
 800d67c:	2000      	movs	r0, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	ec41 0b10 	vmov	d0, r0, r1
 800d684:	b011      	add	sp, #68	; 0x44
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	2a00      	cmp	r2, #0
 800d68c:	d13e      	bne.n	800d70c <__ieee754_pow+0x14c>
 800d68e:	f1c3 0314 	rsb	r3, r3, #20
 800d692:	fa48 f103 	asr.w	r1, r8, r3
 800d696:	fa01 f303 	lsl.w	r3, r1, r3
 800d69a:	4543      	cmp	r3, r8
 800d69c:	f040 8469 	bne.w	800df72 <__ieee754_pow+0x9b2>
 800d6a0:	f001 0101 	and.w	r1, r1, #1
 800d6a4:	f1c1 0b02 	rsb	fp, r1, #2
 800d6a8:	4b4b      	ldr	r3, [pc, #300]	; (800d7d8 <__ieee754_pow+0x218>)
 800d6aa:	4598      	cmp	r8, r3
 800d6ac:	d118      	bne.n	800d6e0 <__ieee754_pow+0x120>
 800d6ae:	f1b9 0f00 	cmp.w	r9, #0
 800d6b2:	f280 845a 	bge.w	800df6a <__ieee754_pow+0x9aa>
 800d6b6:	4948      	ldr	r1, [pc, #288]	; (800d7d8 <__ieee754_pow+0x218>)
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	463b      	mov	r3, r7
 800d6bc:	2000      	movs	r0, #0
 800d6be:	f7f3 f84f 	bl	8000760 <__aeabi_ddiv>
 800d6c2:	e7dd      	b.n	800d680 <__ieee754_pow+0xc0>
 800d6c4:	f04f 0b02 	mov.w	fp, #2
 800d6c8:	e7c4      	b.n	800d654 <__ieee754_pow+0x94>
 800d6ca:	f04f 0b00 	mov.w	fp, #0
 800d6ce:	e7c1      	b.n	800d654 <__ieee754_pow+0x94>
 800d6d0:	f1b9 0f00 	cmp.w	r9, #0
 800d6d4:	dad2      	bge.n	800d67c <__ieee754_pow+0xbc>
 800d6d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d6da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6de:	e7cf      	b.n	800d680 <__ieee754_pow+0xc0>
 800d6e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d6e4:	d106      	bne.n	800d6f4 <__ieee754_pow+0x134>
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	463b      	mov	r3, r7
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7f2 ff0d 	bl	800050c <__aeabi_dmul>
 800d6f2:	e7c5      	b.n	800d680 <__ieee754_pow+0xc0>
 800d6f4:	4b39      	ldr	r3, [pc, #228]	; (800d7dc <__ieee754_pow+0x21c>)
 800d6f6:	4599      	cmp	r9, r3
 800d6f8:	d10a      	bne.n	800d710 <__ieee754_pow+0x150>
 800d6fa:	2d00      	cmp	r5, #0
 800d6fc:	db08      	blt.n	800d710 <__ieee754_pow+0x150>
 800d6fe:	ec47 6b10 	vmov	d0, r6, r7
 800d702:	b011      	add	sp, #68	; 0x44
 800d704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	f000 bc68 	b.w	800dfdc <__ieee754_sqrt>
 800d70c:	f04f 0b00 	mov.w	fp, #0
 800d710:	ec47 6b10 	vmov	d0, r6, r7
 800d714:	f000 fd12 	bl	800e13c <fabs>
 800d718:	ec51 0b10 	vmov	r0, r1, d0
 800d71c:	f1ba 0f00 	cmp.w	sl, #0
 800d720:	d127      	bne.n	800d772 <__ieee754_pow+0x1b2>
 800d722:	b124      	cbz	r4, 800d72e <__ieee754_pow+0x16e>
 800d724:	4b2c      	ldr	r3, [pc, #176]	; (800d7d8 <__ieee754_pow+0x218>)
 800d726:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d121      	bne.n	800d772 <__ieee754_pow+0x1b2>
 800d72e:	f1b9 0f00 	cmp.w	r9, #0
 800d732:	da05      	bge.n	800d740 <__ieee754_pow+0x180>
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	2000      	movs	r0, #0
 800d73a:	4927      	ldr	r1, [pc, #156]	; (800d7d8 <__ieee754_pow+0x218>)
 800d73c:	f7f3 f810 	bl	8000760 <__aeabi_ddiv>
 800d740:	2d00      	cmp	r5, #0
 800d742:	da9d      	bge.n	800d680 <__ieee754_pow+0xc0>
 800d744:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d748:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d74c:	ea54 030b 	orrs.w	r3, r4, fp
 800d750:	d108      	bne.n	800d764 <__ieee754_pow+0x1a4>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4610      	mov	r0, r2
 800d758:	4619      	mov	r1, r3
 800d75a:	f7f2 fd1f 	bl	800019c <__aeabi_dsub>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	e7ac      	b.n	800d6be <__ieee754_pow+0xfe>
 800d764:	f1bb 0f01 	cmp.w	fp, #1
 800d768:	d18a      	bne.n	800d680 <__ieee754_pow+0xc0>
 800d76a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d76e:	4619      	mov	r1, r3
 800d770:	e786      	b.n	800d680 <__ieee754_pow+0xc0>
 800d772:	0fed      	lsrs	r5, r5, #31
 800d774:	1e6b      	subs	r3, r5, #1
 800d776:	930d      	str	r3, [sp, #52]	; 0x34
 800d778:	ea5b 0303 	orrs.w	r3, fp, r3
 800d77c:	d102      	bne.n	800d784 <__ieee754_pow+0x1c4>
 800d77e:	4632      	mov	r2, r6
 800d780:	463b      	mov	r3, r7
 800d782:	e7e8      	b.n	800d756 <__ieee754_pow+0x196>
 800d784:	4b16      	ldr	r3, [pc, #88]	; (800d7e0 <__ieee754_pow+0x220>)
 800d786:	4598      	cmp	r8, r3
 800d788:	f340 80fe 	ble.w	800d988 <__ieee754_pow+0x3c8>
 800d78c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d790:	4598      	cmp	r8, r3
 800d792:	dd0a      	ble.n	800d7aa <__ieee754_pow+0x1ea>
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <__ieee754_pow+0x214>)
 800d796:	429c      	cmp	r4, r3
 800d798:	dc0d      	bgt.n	800d7b6 <__ieee754_pow+0x1f6>
 800d79a:	f1b9 0f00 	cmp.w	r9, #0
 800d79e:	f6bf af6d 	bge.w	800d67c <__ieee754_pow+0xbc>
 800d7a2:	a307      	add	r3, pc, #28	; (adr r3, 800d7c0 <__ieee754_pow+0x200>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	e79f      	b.n	800d6ea <__ieee754_pow+0x12a>
 800d7aa:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <__ieee754_pow+0x224>)
 800d7ac:	429c      	cmp	r4, r3
 800d7ae:	ddf4      	ble.n	800d79a <__ieee754_pow+0x1da>
 800d7b0:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <__ieee754_pow+0x218>)
 800d7b2:	429c      	cmp	r4, r3
 800d7b4:	dd18      	ble.n	800d7e8 <__ieee754_pow+0x228>
 800d7b6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ba:	dcf2      	bgt.n	800d7a2 <__ieee754_pow+0x1e2>
 800d7bc:	e75e      	b.n	800d67c <__ieee754_pow+0xbc>
 800d7be:	bf00      	nop
 800d7c0:	8800759c 	.word	0x8800759c
 800d7c4:	7e37e43c 	.word	0x7e37e43c
 800d7c8:	7ff00000 	.word	0x7ff00000
 800d7cc:	0800e8d7 	.word	0x0800e8d7
 800d7d0:	433fffff 	.word	0x433fffff
 800d7d4:	3fefffff 	.word	0x3fefffff
 800d7d8:	3ff00000 	.word	0x3ff00000
 800d7dc:	3fe00000 	.word	0x3fe00000
 800d7e0:	41e00000 	.word	0x41e00000
 800d7e4:	3feffffe 	.word	0x3feffffe
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4b63      	ldr	r3, [pc, #396]	; (800d978 <__ieee754_pow+0x3b8>)
 800d7ec:	f7f2 fcd6 	bl	800019c <__aeabi_dsub>
 800d7f0:	a355      	add	r3, pc, #340	; (adr r3, 800d948 <__ieee754_pow+0x388>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	f7f2 fe87 	bl	800050c <__aeabi_dmul>
 800d7fe:	a354      	add	r3, pc, #336	; (adr r3, 800d950 <__ieee754_pow+0x390>)
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	4606      	mov	r6, r0
 800d806:	460f      	mov	r7, r1
 800d808:	4620      	mov	r0, r4
 800d80a:	4629      	mov	r1, r5
 800d80c:	f7f2 fe7e 	bl	800050c <__aeabi_dmul>
 800d810:	2200      	movs	r2, #0
 800d812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d816:	4b59      	ldr	r3, [pc, #356]	; (800d97c <__ieee754_pow+0x3bc>)
 800d818:	4620      	mov	r0, r4
 800d81a:	4629      	mov	r1, r5
 800d81c:	f7f2 fe76 	bl	800050c <__aeabi_dmul>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	a14c      	add	r1, pc, #304	; (adr r1, 800d958 <__ieee754_pow+0x398>)
 800d826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d82a:	f7f2 fcb7 	bl	800019c <__aeabi_dsub>
 800d82e:	4622      	mov	r2, r4
 800d830:	462b      	mov	r3, r5
 800d832:	f7f2 fe6b 	bl	800050c <__aeabi_dmul>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	2000      	movs	r0, #0
 800d83c:	4950      	ldr	r1, [pc, #320]	; (800d980 <__ieee754_pow+0x3c0>)
 800d83e:	f7f2 fcad 	bl	800019c <__aeabi_dsub>
 800d842:	4622      	mov	r2, r4
 800d844:	462b      	mov	r3, r5
 800d846:	4680      	mov	r8, r0
 800d848:	4689      	mov	r9, r1
 800d84a:	4620      	mov	r0, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f2 fe5d 	bl	800050c <__aeabi_dmul>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f2 fe57 	bl	800050c <__aeabi_dmul>
 800d85e:	a340      	add	r3, pc, #256	; (adr r3, 800d960 <__ieee754_pow+0x3a0>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f7f2 fe52 	bl	800050c <__aeabi_dmul>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d870:	f7f2 fc94 	bl	800019c <__aeabi_dsub>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fc8e 	bl	80001a0 <__adddf3>
 800d884:	2000      	movs	r0, #0
 800d886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d88a:	4632      	mov	r2, r6
 800d88c:	463b      	mov	r3, r7
 800d88e:	f7f2 fc85 	bl	800019c <__aeabi_dsub>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	4620      	mov	r0, r4
 800d898:	4629      	mov	r1, r5
 800d89a:	f7f2 fc7f 	bl	800019c <__aeabi_dsub>
 800d89e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	460f      	mov	r7, r1
 800d8aa:	f040 81eb 	bne.w	800dc84 <__ieee754_pow+0x6c4>
 800d8ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d968 <__ieee754_pow+0x3a8>
 800d8b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d8b6:	2400      	movs	r4, #0
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	462b      	mov	r3, r5
 800d8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8c4:	f7f2 fc6a 	bl	800019c <__aeabi_dsub>
 800d8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8cc:	f7f2 fe1e 	bl	800050c <__aeabi_dmul>
 800d8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	4630      	mov	r0, r6
 800d8da:	4639      	mov	r1, r7
 800d8dc:	f7f2 fe16 	bl	800050c <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7f2 fc5a 	bl	80001a0 <__adddf3>
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	4689      	mov	r9, r1
 800d8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8f8:	f7f2 fe08 	bl	800050c <__aeabi_dmul>
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4604      	mov	r4, r0
 800d900:	460d      	mov	r5, r1
 800d902:	4602      	mov	r2, r0
 800d904:	4649      	mov	r1, r9
 800d906:	4640      	mov	r0, r8
 800d908:	e9cd 4500 	strd	r4, r5, [sp]
 800d90c:	f7f2 fc48 	bl	80001a0 <__adddf3>
 800d910:	4b1c      	ldr	r3, [pc, #112]	; (800d984 <__ieee754_pow+0x3c4>)
 800d912:	4299      	cmp	r1, r3
 800d914:	4606      	mov	r6, r0
 800d916:	460f      	mov	r7, r1
 800d918:	468b      	mov	fp, r1
 800d91a:	f340 82f7 	ble.w	800df0c <__ieee754_pow+0x94c>
 800d91e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d922:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d926:	4303      	orrs	r3, r0
 800d928:	f000 81ea 	beq.w	800dd00 <__ieee754_pow+0x740>
 800d92c:	a310      	add	r3, pc, #64	; (adr r3, 800d970 <__ieee754_pow+0x3b0>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d936:	f7f2 fde9 	bl	800050c <__aeabi_dmul>
 800d93a:	a30d      	add	r3, pc, #52	; (adr r3, 800d970 <__ieee754_pow+0x3b0>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	e6d5      	b.n	800d6ee <__ieee754_pow+0x12e>
 800d942:	bf00      	nop
 800d944:	f3af 8000 	nop.w
 800d948:	60000000 	.word	0x60000000
 800d94c:	3ff71547 	.word	0x3ff71547
 800d950:	f85ddf44 	.word	0xf85ddf44
 800d954:	3e54ae0b 	.word	0x3e54ae0b
 800d958:	55555555 	.word	0x55555555
 800d95c:	3fd55555 	.word	0x3fd55555
 800d960:	652b82fe 	.word	0x652b82fe
 800d964:	3ff71547 	.word	0x3ff71547
 800d968:	00000000 	.word	0x00000000
 800d96c:	bff00000 	.word	0xbff00000
 800d970:	8800759c 	.word	0x8800759c
 800d974:	7e37e43c 	.word	0x7e37e43c
 800d978:	3ff00000 	.word	0x3ff00000
 800d97c:	3fd00000 	.word	0x3fd00000
 800d980:	3fe00000 	.word	0x3fe00000
 800d984:	408fffff 	.word	0x408fffff
 800d988:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d98c:	f04f 0200 	mov.w	r2, #0
 800d990:	da05      	bge.n	800d99e <__ieee754_pow+0x3de>
 800d992:	4bd3      	ldr	r3, [pc, #844]	; (800dce0 <__ieee754_pow+0x720>)
 800d994:	f7f2 fdba 	bl	800050c <__aeabi_dmul>
 800d998:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d99c:	460c      	mov	r4, r1
 800d99e:	1523      	asrs	r3, r4, #20
 800d9a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d9a4:	4413      	add	r3, r2
 800d9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a8:	4bce      	ldr	r3, [pc, #824]	; (800dce4 <__ieee754_pow+0x724>)
 800d9aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d9ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d9b2:	429c      	cmp	r4, r3
 800d9b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d9b8:	dd08      	ble.n	800d9cc <__ieee754_pow+0x40c>
 800d9ba:	4bcb      	ldr	r3, [pc, #812]	; (800dce8 <__ieee754_pow+0x728>)
 800d9bc:	429c      	cmp	r4, r3
 800d9be:	f340 815e 	ble.w	800dc7e <__ieee754_pow+0x6be>
 800d9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d9cc:	f04f 0a00 	mov.w	sl, #0
 800d9d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d9d4:	930c      	str	r3, [sp, #48]	; 0x30
 800d9d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9d8:	4bc4      	ldr	r3, [pc, #784]	; (800dcec <__ieee754_pow+0x72c>)
 800d9da:	4413      	add	r3, r2
 800d9dc:	ed93 7b00 	vldr	d7, [r3]
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	ec53 2b17 	vmov	r2, r3, d7
 800d9e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d9ee:	f7f2 fbd5 	bl	800019c <__aeabi_dsub>
 800d9f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	460f      	mov	r7, r1
 800d9fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9fe:	f7f2 fbcf 	bl	80001a0 <__adddf3>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	2000      	movs	r0, #0
 800da08:	49b9      	ldr	r1, [pc, #740]	; (800dcf0 <__ieee754_pow+0x730>)
 800da0a:	f7f2 fea9 	bl	8000760 <__aeabi_ddiv>
 800da0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	4630      	mov	r0, r6
 800da18:	4639      	mov	r1, r7
 800da1a:	f7f2 fd77 	bl	800050c <__aeabi_dmul>
 800da1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800da26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800da2a:	2300      	movs	r3, #0
 800da2c:	9302      	str	r3, [sp, #8]
 800da2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da32:	106d      	asrs	r5, r5, #1
 800da34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800da38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800da3c:	2200      	movs	r2, #0
 800da3e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	4614      	mov	r4, r2
 800da48:	461d      	mov	r5, r3
 800da4a:	f7f2 fd5f 	bl	800050c <__aeabi_dmul>
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4630      	mov	r0, r6
 800da54:	4639      	mov	r1, r7
 800da56:	f7f2 fba1 	bl	800019c <__aeabi_dsub>
 800da5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da5e:	4606      	mov	r6, r0
 800da60:	460f      	mov	r7, r1
 800da62:	4620      	mov	r0, r4
 800da64:	4629      	mov	r1, r5
 800da66:	f7f2 fb99 	bl	800019c <__aeabi_dsub>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da72:	f7f2 fb93 	bl	800019c <__aeabi_dsub>
 800da76:	4642      	mov	r2, r8
 800da78:	464b      	mov	r3, r9
 800da7a:	f7f2 fd47 	bl	800050c <__aeabi_dmul>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f2 fb89 	bl	800019c <__aeabi_dsub>
 800da8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800da8e:	f7f2 fd3d 	bl	800050c <__aeabi_dmul>
 800da92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da9a:	4610      	mov	r0, r2
 800da9c:	4619      	mov	r1, r3
 800da9e:	f7f2 fd35 	bl	800050c <__aeabi_dmul>
 800daa2:	a37b      	add	r3, pc, #492	; (adr r3, 800dc90 <__ieee754_pow+0x6d0>)
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	4604      	mov	r4, r0
 800daaa:	460d      	mov	r5, r1
 800daac:	f7f2 fd2e 	bl	800050c <__aeabi_dmul>
 800dab0:	a379      	add	r3, pc, #484	; (adr r3, 800dc98 <__ieee754_pow+0x6d8>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f7f2 fb73 	bl	80001a0 <__adddf3>
 800daba:	4622      	mov	r2, r4
 800dabc:	462b      	mov	r3, r5
 800dabe:	f7f2 fd25 	bl	800050c <__aeabi_dmul>
 800dac2:	a377      	add	r3, pc, #476	; (adr r3, 800dca0 <__ieee754_pow+0x6e0>)
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f7f2 fb6a 	bl	80001a0 <__adddf3>
 800dacc:	4622      	mov	r2, r4
 800dace:	462b      	mov	r3, r5
 800dad0:	f7f2 fd1c 	bl	800050c <__aeabi_dmul>
 800dad4:	a374      	add	r3, pc, #464	; (adr r3, 800dca8 <__ieee754_pow+0x6e8>)
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	f7f2 fb61 	bl	80001a0 <__adddf3>
 800dade:	4622      	mov	r2, r4
 800dae0:	462b      	mov	r3, r5
 800dae2:	f7f2 fd13 	bl	800050c <__aeabi_dmul>
 800dae6:	a372      	add	r3, pc, #456	; (adr r3, 800dcb0 <__ieee754_pow+0x6f0>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fb58 	bl	80001a0 <__adddf3>
 800daf0:	4622      	mov	r2, r4
 800daf2:	462b      	mov	r3, r5
 800daf4:	f7f2 fd0a 	bl	800050c <__aeabi_dmul>
 800daf8:	a36f      	add	r3, pc, #444	; (adr r3, 800dcb8 <__ieee754_pow+0x6f8>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	f7f2 fb4f 	bl	80001a0 <__adddf3>
 800db02:	4622      	mov	r2, r4
 800db04:	4606      	mov	r6, r0
 800db06:	460f      	mov	r7, r1
 800db08:	462b      	mov	r3, r5
 800db0a:	4620      	mov	r0, r4
 800db0c:	4629      	mov	r1, r5
 800db0e:	f7f2 fcfd 	bl	800050c <__aeabi_dmul>
 800db12:	4602      	mov	r2, r0
 800db14:	460b      	mov	r3, r1
 800db16:	4630      	mov	r0, r6
 800db18:	4639      	mov	r1, r7
 800db1a:	f7f2 fcf7 	bl	800050c <__aeabi_dmul>
 800db1e:	4642      	mov	r2, r8
 800db20:	4604      	mov	r4, r0
 800db22:	460d      	mov	r5, r1
 800db24:	464b      	mov	r3, r9
 800db26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db2a:	f7f2 fb39 	bl	80001a0 <__adddf3>
 800db2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db32:	f7f2 fceb 	bl	800050c <__aeabi_dmul>
 800db36:	4622      	mov	r2, r4
 800db38:	462b      	mov	r3, r5
 800db3a:	f7f2 fb31 	bl	80001a0 <__adddf3>
 800db3e:	4642      	mov	r2, r8
 800db40:	4606      	mov	r6, r0
 800db42:	460f      	mov	r7, r1
 800db44:	464b      	mov	r3, r9
 800db46:	4640      	mov	r0, r8
 800db48:	4649      	mov	r1, r9
 800db4a:	f7f2 fcdf 	bl	800050c <__aeabi_dmul>
 800db4e:	2200      	movs	r2, #0
 800db50:	4b68      	ldr	r3, [pc, #416]	; (800dcf4 <__ieee754_pow+0x734>)
 800db52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db56:	f7f2 fb23 	bl	80001a0 <__adddf3>
 800db5a:	4632      	mov	r2, r6
 800db5c:	463b      	mov	r3, r7
 800db5e:	f7f2 fb1f 	bl	80001a0 <__adddf3>
 800db62:	9802      	ldr	r0, [sp, #8]
 800db64:	460d      	mov	r5, r1
 800db66:	4604      	mov	r4, r0
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fccc 	bl	800050c <__aeabi_dmul>
 800db74:	2200      	movs	r2, #0
 800db76:	4680      	mov	r8, r0
 800db78:	4689      	mov	r9, r1
 800db7a:	4b5e      	ldr	r3, [pc, #376]	; (800dcf4 <__ieee754_pow+0x734>)
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 fb0c 	bl	800019c <__aeabi_dsub>
 800db84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db88:	f7f2 fb08 	bl	800019c <__aeabi_dsub>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4630      	mov	r0, r6
 800db92:	4639      	mov	r1, r7
 800db94:	f7f2 fb02 	bl	800019c <__aeabi_dsub>
 800db98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db9c:	f7f2 fcb6 	bl	800050c <__aeabi_dmul>
 800dba0:	4622      	mov	r2, r4
 800dba2:	4606      	mov	r6, r0
 800dba4:	460f      	mov	r7, r1
 800dba6:	462b      	mov	r3, r5
 800dba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbac:	f7f2 fcae 	bl	800050c <__aeabi_dmul>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f2 faf2 	bl	80001a0 <__adddf3>
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	460f      	mov	r7, r1
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	4640      	mov	r0, r8
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	f7f2 faea 	bl	80001a0 <__adddf3>
 800dbcc:	9802      	ldr	r0, [sp, #8]
 800dbce:	a33c      	add	r3, pc, #240	; (adr r3, 800dcc0 <__ieee754_pow+0x700>)
 800dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	f7f2 fc98 	bl	800050c <__aeabi_dmul>
 800dbdc:	4642      	mov	r2, r8
 800dbde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbe2:	464b      	mov	r3, r9
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	f7f2 fad8 	bl	800019c <__aeabi_dsub>
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	f7f2 fad2 	bl	800019c <__aeabi_dsub>
 800dbf8:	a333      	add	r3, pc, #204	; (adr r3, 800dcc8 <__ieee754_pow+0x708>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fc85 	bl	800050c <__aeabi_dmul>
 800dc02:	a333      	add	r3, pc, #204	; (adr r3, 800dcd0 <__ieee754_pow+0x710>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	4606      	mov	r6, r0
 800dc0a:	460f      	mov	r7, r1
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	f7f2 fc7c 	bl	800050c <__aeabi_dmul>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4630      	mov	r0, r6
 800dc1a:	4639      	mov	r1, r7
 800dc1c:	f7f2 fac0 	bl	80001a0 <__adddf3>
 800dc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc22:	4b35      	ldr	r3, [pc, #212]	; (800dcf8 <__ieee754_pow+0x738>)
 800dc24:	4413      	add	r3, r2
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	f7f2 fab9 	bl	80001a0 <__adddf3>
 800dc2e:	4604      	mov	r4, r0
 800dc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc32:	460d      	mov	r5, r1
 800dc34:	f7f2 fc00 	bl	8000438 <__aeabi_i2d>
 800dc38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc3a:	4b30      	ldr	r3, [pc, #192]	; (800dcfc <__ieee754_pow+0x73c>)
 800dc3c:	4413      	add	r3, r2
 800dc3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc42:	4606      	mov	r6, r0
 800dc44:	460f      	mov	r7, r1
 800dc46:	4622      	mov	r2, r4
 800dc48:	462b      	mov	r3, r5
 800dc4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc4e:	f7f2 faa7 	bl	80001a0 <__adddf3>
 800dc52:	4642      	mov	r2, r8
 800dc54:	464b      	mov	r3, r9
 800dc56:	f7f2 faa3 	bl	80001a0 <__adddf3>
 800dc5a:	4632      	mov	r2, r6
 800dc5c:	463b      	mov	r3, r7
 800dc5e:	f7f2 fa9f 	bl	80001a0 <__adddf3>
 800dc62:	9802      	ldr	r0, [sp, #8]
 800dc64:	4632      	mov	r2, r6
 800dc66:	463b      	mov	r3, r7
 800dc68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc6c:	f7f2 fa96 	bl	800019c <__aeabi_dsub>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	f7f2 fa92 	bl	800019c <__aeabi_dsub>
 800dc78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc7c:	e607      	b.n	800d88e <__ieee754_pow+0x2ce>
 800dc7e:	f04f 0a01 	mov.w	sl, #1
 800dc82:	e6a5      	b.n	800d9d0 <__ieee754_pow+0x410>
 800dc84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dcd8 <__ieee754_pow+0x718>
 800dc88:	e613      	b.n	800d8b2 <__ieee754_pow+0x2f2>
 800dc8a:	bf00      	nop
 800dc8c:	f3af 8000 	nop.w
 800dc90:	4a454eef 	.word	0x4a454eef
 800dc94:	3fca7e28 	.word	0x3fca7e28
 800dc98:	93c9db65 	.word	0x93c9db65
 800dc9c:	3fcd864a 	.word	0x3fcd864a
 800dca0:	a91d4101 	.word	0xa91d4101
 800dca4:	3fd17460 	.word	0x3fd17460
 800dca8:	518f264d 	.word	0x518f264d
 800dcac:	3fd55555 	.word	0x3fd55555
 800dcb0:	db6fabff 	.word	0xdb6fabff
 800dcb4:	3fdb6db6 	.word	0x3fdb6db6
 800dcb8:	33333303 	.word	0x33333303
 800dcbc:	3fe33333 	.word	0x3fe33333
 800dcc0:	e0000000 	.word	0xe0000000
 800dcc4:	3feec709 	.word	0x3feec709
 800dcc8:	dc3a03fd 	.word	0xdc3a03fd
 800dccc:	3feec709 	.word	0x3feec709
 800dcd0:	145b01f5 	.word	0x145b01f5
 800dcd4:	be3e2fe0 	.word	0xbe3e2fe0
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	3ff00000 	.word	0x3ff00000
 800dce0:	43400000 	.word	0x43400000
 800dce4:	0003988e 	.word	0x0003988e
 800dce8:	000bb679 	.word	0x000bb679
 800dcec:	0800e8d8 	.word	0x0800e8d8
 800dcf0:	3ff00000 	.word	0x3ff00000
 800dcf4:	40080000 	.word	0x40080000
 800dcf8:	0800e8f8 	.word	0x0800e8f8
 800dcfc:	0800e8e8 	.word	0x0800e8e8
 800dd00:	a3b4      	add	r3, pc, #720	; (adr r3, 800dfd4 <__ieee754_pow+0xa14>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	4640      	mov	r0, r8
 800dd08:	4649      	mov	r1, r9
 800dd0a:	f7f2 fa49 	bl	80001a0 <__adddf3>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd14:	462b      	mov	r3, r5
 800dd16:	4630      	mov	r0, r6
 800dd18:	4639      	mov	r1, r7
 800dd1a:	f7f2 fa3f 	bl	800019c <__aeabi_dsub>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd26:	f7f2 fe81 	bl	8000a2c <__aeabi_dcmpgt>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	f47f adfe 	bne.w	800d92c <__ieee754_pow+0x36c>
 800dd30:	4aa3      	ldr	r2, [pc, #652]	; (800dfc0 <__ieee754_pow+0xa00>)
 800dd32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd36:	4293      	cmp	r3, r2
 800dd38:	f340 810a 	ble.w	800df50 <__ieee754_pow+0x990>
 800dd3c:	151b      	asrs	r3, r3, #20
 800dd3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dd42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dd46:	fa4a f303 	asr.w	r3, sl, r3
 800dd4a:	445b      	add	r3, fp
 800dd4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dd50:	4e9c      	ldr	r6, [pc, #624]	; (800dfc4 <__ieee754_pow+0xa04>)
 800dd52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dd56:	4116      	asrs	r6, r2
 800dd58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	ea23 0106 	bic.w	r1, r3, r6
 800dd62:	f1c2 0214 	rsb	r2, r2, #20
 800dd66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dd6a:	fa4a fa02 	asr.w	sl, sl, r2
 800dd6e:	f1bb 0f00 	cmp.w	fp, #0
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	bfb8      	it	lt
 800dd7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800dd80:	f7f2 fa0c 	bl	800019c <__aeabi_dsub>
 800dd84:	e9cd 0100 	strd	r0, r1, [sp]
 800dd88:	4642      	mov	r2, r8
 800dd8a:	464b      	mov	r3, r9
 800dd8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd90:	f7f2 fa06 	bl	80001a0 <__adddf3>
 800dd94:	2000      	movs	r0, #0
 800dd96:	a378      	add	r3, pc, #480	; (adr r3, 800df78 <__ieee754_pow+0x9b8>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	460d      	mov	r5, r1
 800dda0:	f7f2 fbb4 	bl	800050c <__aeabi_dmul>
 800dda4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460f      	mov	r7, r1
 800ddac:	4620      	mov	r0, r4
 800ddae:	4629      	mov	r1, r5
 800ddb0:	f7f2 f9f4 	bl	800019c <__aeabi_dsub>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4640      	mov	r0, r8
 800ddba:	4649      	mov	r1, r9
 800ddbc:	f7f2 f9ee 	bl	800019c <__aeabi_dsub>
 800ddc0:	a36f      	add	r3, pc, #444	; (adr r3, 800df80 <__ieee754_pow+0x9c0>)
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	f7f2 fba1 	bl	800050c <__aeabi_dmul>
 800ddca:	a36f      	add	r3, pc, #444	; (adr r3, 800df88 <__ieee754_pow+0x9c8>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	4689      	mov	r9, r1
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	f7f2 fb98 	bl	800050c <__aeabi_dmul>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4640      	mov	r0, r8
 800dde2:	4649      	mov	r1, r9
 800dde4:	f7f2 f9dc 	bl	80001a0 <__adddf3>
 800dde8:	4604      	mov	r4, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	4639      	mov	r1, r7
 800ddf4:	f7f2 f9d4 	bl	80001a0 <__adddf3>
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4689      	mov	r9, r1
 800de00:	f7f2 f9cc 	bl	800019c <__aeabi_dsub>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4620      	mov	r0, r4
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7f2 f9c6 	bl	800019c <__aeabi_dsub>
 800de10:	4642      	mov	r2, r8
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	464b      	mov	r3, r9
 800de18:	4640      	mov	r0, r8
 800de1a:	4649      	mov	r1, r9
 800de1c:	f7f2 fb76 	bl	800050c <__aeabi_dmul>
 800de20:	a35b      	add	r3, pc, #364	; (adr r3, 800df90 <__ieee754_pow+0x9d0>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	4604      	mov	r4, r0
 800de28:	460d      	mov	r5, r1
 800de2a:	f7f2 fb6f 	bl	800050c <__aeabi_dmul>
 800de2e:	a35a      	add	r3, pc, #360	; (adr r3, 800df98 <__ieee754_pow+0x9d8>)
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	f7f2 f9b2 	bl	800019c <__aeabi_dsub>
 800de38:	4622      	mov	r2, r4
 800de3a:	462b      	mov	r3, r5
 800de3c:	f7f2 fb66 	bl	800050c <__aeabi_dmul>
 800de40:	a357      	add	r3, pc, #348	; (adr r3, 800dfa0 <__ieee754_pow+0x9e0>)
 800de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de46:	f7f2 f9ab 	bl	80001a0 <__adddf3>
 800de4a:	4622      	mov	r2, r4
 800de4c:	462b      	mov	r3, r5
 800de4e:	f7f2 fb5d 	bl	800050c <__aeabi_dmul>
 800de52:	a355      	add	r3, pc, #340	; (adr r3, 800dfa8 <__ieee754_pow+0x9e8>)
 800de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de58:	f7f2 f9a0 	bl	800019c <__aeabi_dsub>
 800de5c:	4622      	mov	r2, r4
 800de5e:	462b      	mov	r3, r5
 800de60:	f7f2 fb54 	bl	800050c <__aeabi_dmul>
 800de64:	a352      	add	r3, pc, #328	; (adr r3, 800dfb0 <__ieee754_pow+0x9f0>)
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	f7f2 f999 	bl	80001a0 <__adddf3>
 800de6e:	4622      	mov	r2, r4
 800de70:	462b      	mov	r3, r5
 800de72:	f7f2 fb4b 	bl	800050c <__aeabi_dmul>
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 f98d 	bl	800019c <__aeabi_dsub>
 800de82:	4604      	mov	r4, r0
 800de84:	460d      	mov	r5, r1
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4640      	mov	r0, r8
 800de8c:	4649      	mov	r1, r9
 800de8e:	f7f2 fb3d 	bl	800050c <__aeabi_dmul>
 800de92:	2200      	movs	r2, #0
 800de94:	e9cd 0100 	strd	r0, r1, [sp]
 800de98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	f7f2 f97c 	bl	800019c <__aeabi_dsub>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800deac:	f7f2 fc58 	bl	8000760 <__aeabi_ddiv>
 800deb0:	4632      	mov	r2, r6
 800deb2:	4604      	mov	r4, r0
 800deb4:	460d      	mov	r5, r1
 800deb6:	463b      	mov	r3, r7
 800deb8:	4640      	mov	r0, r8
 800deba:	4649      	mov	r1, r9
 800debc:	f7f2 fb26 	bl	800050c <__aeabi_dmul>
 800dec0:	4632      	mov	r2, r6
 800dec2:	463b      	mov	r3, r7
 800dec4:	f7f2 f96c 	bl	80001a0 <__adddf3>
 800dec8:	4602      	mov	r2, r0
 800deca:	460b      	mov	r3, r1
 800decc:	4620      	mov	r0, r4
 800dece:	4629      	mov	r1, r5
 800ded0:	f7f2 f964 	bl	800019c <__aeabi_dsub>
 800ded4:	4642      	mov	r2, r8
 800ded6:	464b      	mov	r3, r9
 800ded8:	f7f2 f960 	bl	800019c <__aeabi_dsub>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	2000      	movs	r0, #0
 800dee2:	4939      	ldr	r1, [pc, #228]	; (800dfc8 <__ieee754_pow+0xa08>)
 800dee4:	f7f2 f95a 	bl	800019c <__aeabi_dsub>
 800dee8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800deec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	da2f      	bge.n	800df56 <__ieee754_pow+0x996>
 800def6:	4650      	mov	r0, sl
 800def8:	ec43 2b10 	vmov	d0, r2, r3
 800defc:	f000 f9c0 	bl	800e280 <scalbn>
 800df00:	ec51 0b10 	vmov	r0, r1, d0
 800df04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df08:	f7ff bbf1 	b.w	800d6ee <__ieee754_pow+0x12e>
 800df0c:	4b2f      	ldr	r3, [pc, #188]	; (800dfcc <__ieee754_pow+0xa0c>)
 800df0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df12:	429e      	cmp	r6, r3
 800df14:	f77f af0c 	ble.w	800dd30 <__ieee754_pow+0x770>
 800df18:	4b2d      	ldr	r3, [pc, #180]	; (800dfd0 <__ieee754_pow+0xa10>)
 800df1a:	440b      	add	r3, r1
 800df1c:	4303      	orrs	r3, r0
 800df1e:	d00b      	beq.n	800df38 <__ieee754_pow+0x978>
 800df20:	a325      	add	r3, pc, #148	; (adr r3, 800dfb8 <__ieee754_pow+0x9f8>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df2a:	f7f2 faef 	bl	800050c <__aeabi_dmul>
 800df2e:	a322      	add	r3, pc, #136	; (adr r3, 800dfb8 <__ieee754_pow+0x9f8>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	f7ff bbdb 	b.w	800d6ee <__ieee754_pow+0x12e>
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	f7f2 f92e 	bl	800019c <__aeabi_dsub>
 800df40:	4642      	mov	r2, r8
 800df42:	464b      	mov	r3, r9
 800df44:	f7f2 fd68 	bl	8000a18 <__aeabi_dcmpge>
 800df48:	2800      	cmp	r0, #0
 800df4a:	f43f aef1 	beq.w	800dd30 <__ieee754_pow+0x770>
 800df4e:	e7e7      	b.n	800df20 <__ieee754_pow+0x960>
 800df50:	f04f 0a00 	mov.w	sl, #0
 800df54:	e718      	b.n	800dd88 <__ieee754_pow+0x7c8>
 800df56:	4621      	mov	r1, r4
 800df58:	e7d4      	b.n	800df04 <__ieee754_pow+0x944>
 800df5a:	2000      	movs	r0, #0
 800df5c:	491a      	ldr	r1, [pc, #104]	; (800dfc8 <__ieee754_pow+0xa08>)
 800df5e:	f7ff bb8f 	b.w	800d680 <__ieee754_pow+0xc0>
 800df62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df66:	f7ff bb8b 	b.w	800d680 <__ieee754_pow+0xc0>
 800df6a:	4630      	mov	r0, r6
 800df6c:	4639      	mov	r1, r7
 800df6e:	f7ff bb87 	b.w	800d680 <__ieee754_pow+0xc0>
 800df72:	4693      	mov	fp, r2
 800df74:	f7ff bb98 	b.w	800d6a8 <__ieee754_pow+0xe8>
 800df78:	00000000 	.word	0x00000000
 800df7c:	3fe62e43 	.word	0x3fe62e43
 800df80:	fefa39ef 	.word	0xfefa39ef
 800df84:	3fe62e42 	.word	0x3fe62e42
 800df88:	0ca86c39 	.word	0x0ca86c39
 800df8c:	be205c61 	.word	0xbe205c61
 800df90:	72bea4d0 	.word	0x72bea4d0
 800df94:	3e663769 	.word	0x3e663769
 800df98:	c5d26bf1 	.word	0xc5d26bf1
 800df9c:	3ebbbd41 	.word	0x3ebbbd41
 800dfa0:	af25de2c 	.word	0xaf25de2c
 800dfa4:	3f11566a 	.word	0x3f11566a
 800dfa8:	16bebd93 	.word	0x16bebd93
 800dfac:	3f66c16c 	.word	0x3f66c16c
 800dfb0:	5555553e 	.word	0x5555553e
 800dfb4:	3fc55555 	.word	0x3fc55555
 800dfb8:	c2f8f359 	.word	0xc2f8f359
 800dfbc:	01a56e1f 	.word	0x01a56e1f
 800dfc0:	3fe00000 	.word	0x3fe00000
 800dfc4:	000fffff 	.word	0x000fffff
 800dfc8:	3ff00000 	.word	0x3ff00000
 800dfcc:	4090cbff 	.word	0x4090cbff
 800dfd0:	3f6f3400 	.word	0x3f6f3400
 800dfd4:	652b82fe 	.word	0x652b82fe
 800dfd8:	3c971547 	.word	0x3c971547

0800dfdc <__ieee754_sqrt>:
 800dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe0:	4955      	ldr	r1, [pc, #340]	; (800e138 <__ieee754_sqrt+0x15c>)
 800dfe2:	ec55 4b10 	vmov	r4, r5, d0
 800dfe6:	43a9      	bics	r1, r5
 800dfe8:	462b      	mov	r3, r5
 800dfea:	462a      	mov	r2, r5
 800dfec:	d112      	bne.n	800e014 <__ieee754_sqrt+0x38>
 800dfee:	ee10 2a10 	vmov	r2, s0
 800dff2:	ee10 0a10 	vmov	r0, s0
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f2 fa88 	bl	800050c <__aeabi_dmul>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4620      	mov	r0, r4
 800e002:	4629      	mov	r1, r5
 800e004:	f7f2 f8cc 	bl	80001a0 <__adddf3>
 800e008:	4604      	mov	r4, r0
 800e00a:	460d      	mov	r5, r1
 800e00c:	ec45 4b10 	vmov	d0, r4, r5
 800e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e014:	2d00      	cmp	r5, #0
 800e016:	ee10 0a10 	vmov	r0, s0
 800e01a:	4621      	mov	r1, r4
 800e01c:	dc0f      	bgt.n	800e03e <__ieee754_sqrt+0x62>
 800e01e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e022:	4330      	orrs	r0, r6
 800e024:	d0f2      	beq.n	800e00c <__ieee754_sqrt+0x30>
 800e026:	b155      	cbz	r5, 800e03e <__ieee754_sqrt+0x62>
 800e028:	ee10 2a10 	vmov	r2, s0
 800e02c:	4620      	mov	r0, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	f7f2 f8b4 	bl	800019c <__aeabi_dsub>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	f7f2 fb92 	bl	8000760 <__aeabi_ddiv>
 800e03c:	e7e4      	b.n	800e008 <__ieee754_sqrt+0x2c>
 800e03e:	151b      	asrs	r3, r3, #20
 800e040:	d073      	beq.n	800e12a <__ieee754_sqrt+0x14e>
 800e042:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e046:	07dd      	lsls	r5, r3, #31
 800e048:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e04c:	bf48      	it	mi
 800e04e:	0fc8      	lsrmi	r0, r1, #31
 800e050:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e054:	bf44      	itt	mi
 800e056:	0049      	lslmi	r1, r1, #1
 800e058:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e05c:	2500      	movs	r5, #0
 800e05e:	1058      	asrs	r0, r3, #1
 800e060:	0fcb      	lsrs	r3, r1, #31
 800e062:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e066:	0049      	lsls	r1, r1, #1
 800e068:	2316      	movs	r3, #22
 800e06a:	462c      	mov	r4, r5
 800e06c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e070:	19a7      	adds	r7, r4, r6
 800e072:	4297      	cmp	r7, r2
 800e074:	bfde      	ittt	le
 800e076:	19bc      	addle	r4, r7, r6
 800e078:	1bd2      	suble	r2, r2, r7
 800e07a:	19ad      	addle	r5, r5, r6
 800e07c:	0fcf      	lsrs	r7, r1, #31
 800e07e:	3b01      	subs	r3, #1
 800e080:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e084:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e088:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e08c:	d1f0      	bne.n	800e070 <__ieee754_sqrt+0x94>
 800e08e:	f04f 0c20 	mov.w	ip, #32
 800e092:	469e      	mov	lr, r3
 800e094:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e098:	42a2      	cmp	r2, r4
 800e09a:	eb06 070e 	add.w	r7, r6, lr
 800e09e:	dc02      	bgt.n	800e0a6 <__ieee754_sqrt+0xca>
 800e0a0:	d112      	bne.n	800e0c8 <__ieee754_sqrt+0xec>
 800e0a2:	428f      	cmp	r7, r1
 800e0a4:	d810      	bhi.n	800e0c8 <__ieee754_sqrt+0xec>
 800e0a6:	2f00      	cmp	r7, #0
 800e0a8:	eb07 0e06 	add.w	lr, r7, r6
 800e0ac:	da42      	bge.n	800e134 <__ieee754_sqrt+0x158>
 800e0ae:	f1be 0f00 	cmp.w	lr, #0
 800e0b2:	db3f      	blt.n	800e134 <__ieee754_sqrt+0x158>
 800e0b4:	f104 0801 	add.w	r8, r4, #1
 800e0b8:	1b12      	subs	r2, r2, r4
 800e0ba:	428f      	cmp	r7, r1
 800e0bc:	bf88      	it	hi
 800e0be:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e0c2:	1bc9      	subs	r1, r1, r7
 800e0c4:	4433      	add	r3, r6
 800e0c6:	4644      	mov	r4, r8
 800e0c8:	0052      	lsls	r2, r2, #1
 800e0ca:	f1bc 0c01 	subs.w	ip, ip, #1
 800e0ce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e0d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e0d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0da:	d1dd      	bne.n	800e098 <__ieee754_sqrt+0xbc>
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	d006      	beq.n	800e0ee <__ieee754_sqrt+0x112>
 800e0e0:	1c5c      	adds	r4, r3, #1
 800e0e2:	bf13      	iteet	ne
 800e0e4:	3301      	addne	r3, #1
 800e0e6:	3501      	addeq	r5, #1
 800e0e8:	4663      	moveq	r3, ip
 800e0ea:	f023 0301 	bicne.w	r3, r3, #1
 800e0ee:	106a      	asrs	r2, r5, #1
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	07e9      	lsls	r1, r5, #31
 800e0f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e0f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e0fc:	bf48      	it	mi
 800e0fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e102:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e106:	461c      	mov	r4, r3
 800e108:	e780      	b.n	800e00c <__ieee754_sqrt+0x30>
 800e10a:	0aca      	lsrs	r2, r1, #11
 800e10c:	3815      	subs	r0, #21
 800e10e:	0549      	lsls	r1, r1, #21
 800e110:	2a00      	cmp	r2, #0
 800e112:	d0fa      	beq.n	800e10a <__ieee754_sqrt+0x12e>
 800e114:	02d6      	lsls	r6, r2, #11
 800e116:	d50a      	bpl.n	800e12e <__ieee754_sqrt+0x152>
 800e118:	f1c3 0420 	rsb	r4, r3, #32
 800e11c:	fa21 f404 	lsr.w	r4, r1, r4
 800e120:	1e5d      	subs	r5, r3, #1
 800e122:	4099      	lsls	r1, r3
 800e124:	4322      	orrs	r2, r4
 800e126:	1b43      	subs	r3, r0, r5
 800e128:	e78b      	b.n	800e042 <__ieee754_sqrt+0x66>
 800e12a:	4618      	mov	r0, r3
 800e12c:	e7f0      	b.n	800e110 <__ieee754_sqrt+0x134>
 800e12e:	0052      	lsls	r2, r2, #1
 800e130:	3301      	adds	r3, #1
 800e132:	e7ef      	b.n	800e114 <__ieee754_sqrt+0x138>
 800e134:	46a0      	mov	r8, r4
 800e136:	e7bf      	b.n	800e0b8 <__ieee754_sqrt+0xdc>
 800e138:	7ff00000 	.word	0x7ff00000

0800e13c <fabs>:
 800e13c:	ec51 0b10 	vmov	r0, r1, d0
 800e140:	ee10 2a10 	vmov	r2, s0
 800e144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e148:	ec43 2b10 	vmov	d0, r2, r3
 800e14c:	4770      	bx	lr

0800e14e <finite>:
 800e14e:	ee10 3a90 	vmov	r3, s1
 800e152:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e156:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e15a:	0fc0      	lsrs	r0, r0, #31
 800e15c:	4770      	bx	lr

0800e15e <matherr>:
 800e15e:	2000      	movs	r0, #0
 800e160:	4770      	bx	lr
 800e162:	0000      	movs	r0, r0
 800e164:	0000      	movs	r0, r0
	...

0800e168 <nan>:
 800e168:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e170 <nan+0x8>
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	00000000 	.word	0x00000000
 800e174:	7ff80000 	.word	0x7ff80000

0800e178 <rint>:
 800e178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e17a:	ec51 0b10 	vmov	r0, r1, d0
 800e17e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e182:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e186:	2e13      	cmp	r6, #19
 800e188:	460b      	mov	r3, r1
 800e18a:	ee10 4a10 	vmov	r4, s0
 800e18e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e192:	dc56      	bgt.n	800e242 <rint+0xca>
 800e194:	2e00      	cmp	r6, #0
 800e196:	da2b      	bge.n	800e1f0 <rint+0x78>
 800e198:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e19c:	4302      	orrs	r2, r0
 800e19e:	d023      	beq.n	800e1e8 <rint+0x70>
 800e1a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e1a4:	4302      	orrs	r2, r0
 800e1a6:	4254      	negs	r4, r2
 800e1a8:	4314      	orrs	r4, r2
 800e1aa:	0c4b      	lsrs	r3, r1, #17
 800e1ac:	0b24      	lsrs	r4, r4, #12
 800e1ae:	045b      	lsls	r3, r3, #17
 800e1b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e1b4:	ea44 0103 	orr.w	r1, r4, r3
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	492f      	ldr	r1, [pc, #188]	; (800e278 <rint+0x100>)
 800e1bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e1c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	4639      	mov	r1, r7
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7f1 ffe9 	bl	80001a0 <__adddf3>
 800e1ce:	e9cd 0100 	strd	r0, r1, [sp]
 800e1d2:	463b      	mov	r3, r7
 800e1d4:	4632      	mov	r2, r6
 800e1d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1da:	f7f1 ffdf 	bl	800019c <__aeabi_dsub>
 800e1de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	ec41 0b10 	vmov	d0, r0, r1
 800e1ec:	b003      	add	sp, #12
 800e1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f0:	4a22      	ldr	r2, [pc, #136]	; (800e27c <rint+0x104>)
 800e1f2:	4132      	asrs	r2, r6
 800e1f4:	ea01 0702 	and.w	r7, r1, r2
 800e1f8:	4307      	orrs	r7, r0
 800e1fa:	d0f5      	beq.n	800e1e8 <rint+0x70>
 800e1fc:	0852      	lsrs	r2, r2, #1
 800e1fe:	4011      	ands	r1, r2
 800e200:	430c      	orrs	r4, r1
 800e202:	d00b      	beq.n	800e21c <rint+0xa4>
 800e204:	ea23 0202 	bic.w	r2, r3, r2
 800e208:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e20c:	2e13      	cmp	r6, #19
 800e20e:	fa43 f306 	asr.w	r3, r3, r6
 800e212:	bf0c      	ite	eq
 800e214:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e218:	2400      	movne	r4, #0
 800e21a:	4313      	orrs	r3, r2
 800e21c:	4916      	ldr	r1, [pc, #88]	; (800e278 <rint+0x100>)
 800e21e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e222:	4622      	mov	r2, r4
 800e224:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f1 ffb8 	bl	80001a0 <__adddf3>
 800e230:	e9cd 0100 	strd	r0, r1, [sp]
 800e234:	4622      	mov	r2, r4
 800e236:	462b      	mov	r3, r5
 800e238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e23c:	f7f1 ffae 	bl	800019c <__aeabi_dsub>
 800e240:	e7d2      	b.n	800e1e8 <rint+0x70>
 800e242:	2e33      	cmp	r6, #51	; 0x33
 800e244:	dd07      	ble.n	800e256 <rint+0xde>
 800e246:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e24a:	d1cd      	bne.n	800e1e8 <rint+0x70>
 800e24c:	ee10 2a10 	vmov	r2, s0
 800e250:	f7f1 ffa6 	bl	80001a0 <__adddf3>
 800e254:	e7c8      	b.n	800e1e8 <rint+0x70>
 800e256:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e25a:	f04f 32ff 	mov.w	r2, #4294967295
 800e25e:	40f2      	lsrs	r2, r6
 800e260:	4210      	tst	r0, r2
 800e262:	d0c1      	beq.n	800e1e8 <rint+0x70>
 800e264:	0852      	lsrs	r2, r2, #1
 800e266:	4210      	tst	r0, r2
 800e268:	bf1f      	itttt	ne
 800e26a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e26e:	ea20 0202 	bicne.w	r2, r0, r2
 800e272:	4134      	asrne	r4, r6
 800e274:	4314      	orrne	r4, r2
 800e276:	e7d1      	b.n	800e21c <rint+0xa4>
 800e278:	0800e908 	.word	0x0800e908
 800e27c:	000fffff 	.word	0x000fffff

0800e280 <scalbn>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	ec55 4b10 	vmov	r4, r5, d0
 800e286:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e28a:	4606      	mov	r6, r0
 800e28c:	462b      	mov	r3, r5
 800e28e:	b9aa      	cbnz	r2, 800e2bc <scalbn+0x3c>
 800e290:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e294:	4323      	orrs	r3, r4
 800e296:	d03b      	beq.n	800e310 <scalbn+0x90>
 800e298:	4b31      	ldr	r3, [pc, #196]	; (800e360 <scalbn+0xe0>)
 800e29a:	4629      	mov	r1, r5
 800e29c:	2200      	movs	r2, #0
 800e29e:	ee10 0a10 	vmov	r0, s0
 800e2a2:	f7f2 f933 	bl	800050c <__aeabi_dmul>
 800e2a6:	4b2f      	ldr	r3, [pc, #188]	; (800e364 <scalbn+0xe4>)
 800e2a8:	429e      	cmp	r6, r3
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	460d      	mov	r5, r1
 800e2ae:	da12      	bge.n	800e2d6 <scalbn+0x56>
 800e2b0:	a327      	add	r3, pc, #156	; (adr r3, 800e350 <scalbn+0xd0>)
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	f7f2 f929 	bl	800050c <__aeabi_dmul>
 800e2ba:	e009      	b.n	800e2d0 <scalbn+0x50>
 800e2bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e2c0:	428a      	cmp	r2, r1
 800e2c2:	d10c      	bne.n	800e2de <scalbn+0x5e>
 800e2c4:	ee10 2a10 	vmov	r2, s0
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7f1 ff68 	bl	80001a0 <__adddf3>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	e01c      	b.n	800e310 <scalbn+0x90>
 800e2d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2da:	460b      	mov	r3, r1
 800e2dc:	3a36      	subs	r2, #54	; 0x36
 800e2de:	4432      	add	r2, r6
 800e2e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e2e4:	428a      	cmp	r2, r1
 800e2e6:	dd0b      	ble.n	800e300 <scalbn+0x80>
 800e2e8:	ec45 4b11 	vmov	d1, r4, r5
 800e2ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e358 <scalbn+0xd8>
 800e2f0:	f000 f83c 	bl	800e36c <copysign>
 800e2f4:	a318      	add	r3, pc, #96	; (adr r3, 800e358 <scalbn+0xd8>)
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	ec51 0b10 	vmov	r0, r1, d0
 800e2fe:	e7da      	b.n	800e2b6 <scalbn+0x36>
 800e300:	2a00      	cmp	r2, #0
 800e302:	dd08      	ble.n	800e316 <scalbn+0x96>
 800e304:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e308:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e30c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e310:	ec45 4b10 	vmov	d0, r4, r5
 800e314:	bd70      	pop	{r4, r5, r6, pc}
 800e316:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e31a:	da0d      	bge.n	800e338 <scalbn+0xb8>
 800e31c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e320:	429e      	cmp	r6, r3
 800e322:	ec45 4b11 	vmov	d1, r4, r5
 800e326:	dce1      	bgt.n	800e2ec <scalbn+0x6c>
 800e328:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e350 <scalbn+0xd0>
 800e32c:	f000 f81e 	bl	800e36c <copysign>
 800e330:	a307      	add	r3, pc, #28	; (adr r3, 800e350 <scalbn+0xd0>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	e7e0      	b.n	800e2fa <scalbn+0x7a>
 800e338:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e33c:	3236      	adds	r2, #54	; 0x36
 800e33e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e346:	4620      	mov	r0, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	2200      	movs	r2, #0
 800e34c:	4b06      	ldr	r3, [pc, #24]	; (800e368 <scalbn+0xe8>)
 800e34e:	e7b2      	b.n	800e2b6 <scalbn+0x36>
 800e350:	c2f8f359 	.word	0xc2f8f359
 800e354:	01a56e1f 	.word	0x01a56e1f
 800e358:	8800759c 	.word	0x8800759c
 800e35c:	7e37e43c 	.word	0x7e37e43c
 800e360:	43500000 	.word	0x43500000
 800e364:	ffff3cb0 	.word	0xffff3cb0
 800e368:	3c900000 	.word	0x3c900000

0800e36c <copysign>:
 800e36c:	ec51 0b10 	vmov	r0, r1, d0
 800e370:	ee11 0a90 	vmov	r0, s3
 800e374:	ee10 2a10 	vmov	r2, s0
 800e378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e37c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e380:	ea41 0300 	orr.w	r3, r1, r0
 800e384:	ec43 2b10 	vmov	d0, r2, r3
 800e388:	4770      	bx	lr
	...

0800e38c <_init>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr

0800e398 <_fini>:
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	bf00      	nop
 800e39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39e:	bc08      	pop	{r3}
 800e3a0:	469e      	mov	lr, r3
 800e3a2:	4770      	bx	lr
