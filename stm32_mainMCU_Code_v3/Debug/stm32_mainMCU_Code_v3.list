
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017124  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001130  08017268  08017268  00027268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018398  08018398  00028398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080183a0  080183a0  000283a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080183a4  080183a4  000283a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000004  080183a8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000138  080184dc  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001d4  08018575  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028580  200001e8  08018586  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20028768  08018586  00038768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   0006102a  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ad3f  00000000  00000000  0009123f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b88  00000000  00000000  0009bf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000036b0  00000000  00000000  0009fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002663e  00000000  00000000  000a31b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000180de  00000000  00000000  000c97f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e18d4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f61c  00000000  00000000  000e19c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f0fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801724c 	.word	0x0801724c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0801724c 	.word	0x0801724c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f004 fda4 	bl	8005a0c <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 f9a3 	bl	8004214 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f004 ffba 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 f98d 	bl	8004214 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2002779c 	.word	0x2002779c
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f006 fbcf 	bl	80076f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f006 f881 	bl	8007098 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f93a 	bl	8004214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027800 	.word	0x20027800
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f8cc 	bl	8003190 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200284cc 	.word	0x200284cc

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f014 fd32 	bl	8015a78 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f013 f9d9 	bl	80143d4 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00d fe6e 	bl	800ed04 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00d ffae 	bl	800ef94 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00d fc3e 	bl	800e8c4 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f012 fe94 	bl	8013d88 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 faea 	bl	8014650 <TL_MM_Init>

  TL_Enable();
 800107c:	f013 f9a3 	bl	80143c6 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027860 	.word	0x20027860
 800108c:	20027878 	.word	0x20027878
 8001090:	080176c8 	.word	0x080176c8
 8001094:	08001199 	.word	0x08001199
 8001098:	20027864 	.word	0x20027864
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00d feb2 	bl	800ee38 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00d ff0a 	bl	800eef4 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027860 	.word	0x20027860

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f003 fecc 	bl	8004ee8 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f003 fec6 	bl	8004ee8 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f003 febf 	bl	8004ee8 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08017280 	.word	0x08017280
 8001178:	080172a4 	.word	0x080172a4
 800117c:	080172c4 	.word	0x080172c4

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 fad4 	bl	8014730 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 fafe 	bl	8014788 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 fc84 	bl	8015a9c <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d fcea 	bl	800eb80 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f012 fe08 	bl	8013dc0 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d fc2a 	bl	800ea1c <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20027864 	.word	0x20027864

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d ffdb 	bl	800f19c <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027878 	.word	0x20027878

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00d ff63 	bl	800f0d0 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027878 	.word	0x20027878

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f013 fa51 	bl	80146c8 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f004 f9aa 	bl	8005598 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000204 	.word	0x20000204

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000204 	.word	0x20000204

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a45      	ldr	r2, [pc, #276]	; (80013bc <MX_FREERTOS_Init+0x11c>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00d fe73 	bl	800ef94 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MX_FREERTOS_Init+0x120>)
 80012b2:	601a      	str	r2, [r3, #0]
//  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 80012b4:	4a43      	ldr	r2, [pc, #268]	; (80013c4 <MX_FREERTOS_Init+0x124>)
 80012b6:	216c      	movs	r1, #108	; 0x6c
 80012b8:	200a      	movs	r0, #10
 80012ba:	f00d ffc7 	bl	800f24c <osMessageQueueNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <MX_FREERTOS_Init+0x128>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 80012c4:	4a41      	ldr	r2, [pc, #260]	; (80013cc <MX_FREERTOS_Init+0x12c>)
 80012c6:	2104      	movs	r1, #4
 80012c8:	2003      	movs	r0, #3
 80012ca:	f00d ffbf 	bl	800f24c <osMessageQueueNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <MX_FREERTOS_Init+0x130>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 80012d4:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <MX_FREERTOS_Init+0x134>)
 80012d6:	2106      	movs	r1, #6
 80012d8:	2004      	movs	r0, #4
 80012da:	f00d ffb7 	bl	800f24c <osMessageQueueNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MX_FREERTOS_Init+0x138>)
 80012e2:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 80012e4:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <MX_FREERTOS_Init+0x13c>)
 80012e6:	2118      	movs	r1, #24
 80012e8:	200a      	movs	r0, #10
 80012ea:	f00d ffaf 	bl	800f24c <osMessageQueueNew>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <MX_FREERTOS_Init+0x140>)
 80012f2:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 80012f4:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <MX_FREERTOS_Init+0x144>)
 80012f6:	2128      	movs	r1, #40	; 0x28
 80012f8:	200a      	movs	r0, #10
 80012fa:	f00d ffa7 	bl	800f24c <osMessageQueueNew>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <MX_FREERTOS_Init+0x148>)
 8001302:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001304:	4a39      	ldr	r2, [pc, #228]	; (80013ec <MX_FREERTOS_Init+0x14c>)
 8001306:	2110      	movs	r1, #16
 8001308:	200a      	movs	r0, #10
 800130a:	f00d ff9f 	bl	800f24c <osMessageQueueNew>
 800130e:	4602      	mov	r2, r0
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <MX_FREERTOS_Init+0x150>)
 8001312:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001314:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <MX_FREERTOS_Init+0x154>)
 8001316:	2118      	movs	r1, #24
 8001318:	2003      	movs	r0, #3
 800131a:	f00d ff97 	bl	800f24c <osMessageQueueNew>
 800131e:	4602      	mov	r2, r0
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <MX_FREERTOS_Init+0x158>)
 8001322:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001324:	4a35      	ldr	r2, [pc, #212]	; (80013fc <MX_FREERTOS_Init+0x15c>)
 8001326:	2106      	movs	r1, #6
 8001328:	200a      	movs	r0, #10
 800132a:	f00d ff8f 	bl	800f24c <osMessageQueueNew>
 800132e:	4602      	mov	r2, r0
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <MX_FREERTOS_Init+0x160>)
 8001332:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001334:	4a33      	ldr	r2, [pc, #204]	; (8001404 <MX_FREERTOS_Init+0x164>)
 8001336:	2118      	movs	r1, #24
 8001338:	200a      	movs	r0, #10
 800133a:	f00d ff87 	bl	800f24c <osMessageQueueNew>
 800133e:	4602      	mov	r2, r0
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <MX_FREERTOS_Init+0x168>)
 8001342:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <MX_FREERTOS_Init+0x16c>)
 8001346:	2100      	movs	r1, #0
 8001348:	4831      	ldr	r0, [pc, #196]	; (8001410 <MX_FREERTOS_Init+0x170>)
 800134a:	f00d fabb 	bl	800e8c4 <osThreadNew>
 800134e:	4602      	mov	r2, r0
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MX_FREERTOS_Init+0x174>)
 8001352:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 8001354:	4a30      	ldr	r2, [pc, #192]	; (8001418 <MX_FREERTOS_Init+0x178>)
 8001356:	2100      	movs	r1, #0
 8001358:	4830      	ldr	r0, [pc, #192]	; (800141c <MX_FREERTOS_Init+0x17c>)
 800135a:	f00d fab3 	bl	800e8c4 <osThreadNew>
 800135e:	4602      	mov	r2, r0
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <MX_FREERTOS_Init+0x180>)
 8001362:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 8001364:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <MX_FREERTOS_Init+0x184>)
 8001366:	2100      	movs	r1, #0
 8001368:	482f      	ldr	r0, [pc, #188]	; (8001428 <MX_FREERTOS_Init+0x188>)
 800136a:	f00d faab 	bl	800e8c4 <osThreadNew>
 800136e:	4602      	mov	r2, r0
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_FREERTOS_Init+0x18c>)
 8001372:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <MX_FREERTOS_Init+0x190>)
 8001376:	2100      	movs	r1, #0
 8001378:	482e      	ldr	r0, [pc, #184]	; (8001434 <MX_FREERTOS_Init+0x194>)
 800137a:	f00d faa3 	bl	800e8c4 <osThreadNew>
 800137e:	4602      	mov	r2, r0
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_FREERTOS_Init+0x198>)
 8001382:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 8001384:	4a2d      	ldr	r2, [pc, #180]	; (800143c <MX_FREERTOS_Init+0x19c>)
 8001386:	2100      	movs	r1, #0
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <MX_FREERTOS_Init+0x1a0>)
 800138a:	f00d fa9b 	bl	800e8c4 <osThreadNew>
 800138e:	4602      	mov	r2, r0
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_FREERTOS_Init+0x1a4>)
 8001392:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001394:	4a2c      	ldr	r2, [pc, #176]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 8001396:	2100      	movs	r1, #0
 8001398:	482c      	ldr	r0, [pc, #176]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 800139a:	f00d fa93 	bl	800e8c4 <osThreadNew>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 80013a2:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 80013a4:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	482b      	ldr	r0, [pc, #172]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 80013aa:	f00d fa8b 	bl	800e8c4 <osThreadNew>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 80013b2:	601a      	str	r2, [r3, #0]

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 80013b4:	f7ff fe18 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	080178c0 	.word	0x080178c0
 80013c0:	20027964 	.word	0x20027964
 80013c4:	080177e8 	.word	0x080177e8
 80013c8:	20027da8 	.word	0x20027da8
 80013cc:	08017800 	.word	0x08017800
 80013d0:	2002796c 	.word	0x2002796c
 80013d4:	08017818 	.word	0x08017818
 80013d8:	20027d94 	.word	0x20027d94
 80013dc:	08017830 	.word	0x08017830
 80013e0:	20027970 	.word	0x20027970
 80013e4:	08017848 	.word	0x08017848
 80013e8:	20027968 	.word	0x20027968
 80013ec:	08017860 	.word	0x08017860
 80013f0:	2002795c 	.word	0x2002795c
 80013f4:	08017878 	.word	0x08017878
 80013f8:	20027974 	.word	0x20027974
 80013fc:	08017890 	.word	0x08017890
 8001400:	20027868 	.word	0x20027868
 8001404:	080178a8 	.word	0x080178a8
 8001408:	2002786c 	.word	0x2002786c
 800140c:	080176ec 	.word	0x080176ec
 8001410:	08001461 	.word	0x08001461
 8001414:	20027950 	.word	0x20027950
 8001418:	08017710 	.word	0x08017710
 800141c:	08003ec5 	.word	0x08003ec5
 8001420:	20027958 	.word	0x20027958
 8001424:	08017734 	.word	0x08017734
 8001428:	08004225 	.word	0x08004225
 800142c:	20027d98 	.word	0x20027d98
 8001430:	08017758 	.word	0x08017758
 8001434:	080038dd 	.word	0x080038dd
 8001438:	20027dac 	.word	0x20027dac
 800143c:	0801777c 	.word	0x0801777c
 8001440:	08003a55 	.word	0x08003a55
 8001444:	20027da0 	.word	0x20027da0
 8001448:	080177a0 	.word	0x080177a0
 800144c:	08003b35 	.word	0x08003b35
 8001450:	20027d9c 	.word	0x20027d9c
 8001454:	080177c4 	.word	0x080177c4
 8001458:	08001471 	.word	0x08001471
 800145c:	20027954 	.word	0x20027954

08001460 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f00d fc1d 	bl	800eca8 <osDelay>
 800146e:	e7fb      	b.n	8001468 <DefaultTask+0x8>

08001470 <BlinkTask>:
uint32_t iterator = 0;

float previousTick_ms = 0;
float tick_ms_diff = 0;

void BlinkTask(void *argument){
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while(1){
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	2100      	movs	r1, #0
 800147e:	2001      	movs	r0, #1
 8001480:	f00d fb7e 	bl	800eb80 <osThreadFlagsWait>
 8001484:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if (evt == 0x00000001U)  {
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d1f5      	bne.n	8001478 <BlinkTask+0x8>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 800148c:	484b      	ldr	r0, [pc, #300]	; (80015bc <BlinkTask+0x14c>)
 800148e:	f00a f993 	bl	800b7b8 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001492:	2104      	movs	r1, #4
 8001494:	4849      	ldr	r0, [pc, #292]	; (80015bc <BlinkTask+0x14c>)
 8001496:	f00a fa45 	bl	800b924 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800149a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800149e:	4948      	ldr	r1, [pc, #288]	; (80015c0 <BlinkTask+0x150>)
 80014a0:	4848      	ldr	r0, [pc, #288]	; (80015c4 <BlinkTask+0x154>)
 80014a2:	f004 fbf9 	bl	8005c98 <HAL_ADC_Start_DMA>
//				buffer_pointer = &blinkMsgBuffer_1;
//		    	osMessageQueuePut(blinkMsgQueueHandle, &buffer_pointer, 0U, 0U);
				//osMessageQueuePut(blinkMsgQueueHandle, &blinkMsgBuffer_2, 0U, 0U);
//				osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);

				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	2100      	movs	r1, #0
 80014ac:	2006      	movs	r0, #6
 80014ae:	f00d fb67 	bl	800eb80 <osThreadFlagsWait>
 80014b2:	60f8      	str	r0, [r7, #12]

				if( (evt & 0x00000004U) == 0x00000004U){
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d064      	beq.n	8001588 <BlinkTask+0x118>

					// interpolate timestamps for blink packets
					if(previousTick_ms == 0){
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <BlinkTask+0x158>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	d108      	bne.n	80014e0 <BlinkTask+0x70>
						previousTick_ms = HAL_GetTick();
 80014ce:	f004 f863 	bl	8005598 <HAL_GetTick>
 80014d2:	ee07 0a90 	vmov	s15, r0
 80014d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <BlinkTask+0x158>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80014e0:	f004 f85a 	bl	8005598 <HAL_GetTick>
 80014e4:	ee07 0a90 	vmov	s15, r0
 80014e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ec:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <BlinkTask+0x158>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <BlinkTask+0x15c>)
 8001500:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <BlinkTask+0x160>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e039      	b.n	8001580 <BlinkTask+0x110>

						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator*BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <BlinkTask+0x160>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2264      	movs	r2, #100	; 0x64
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <BlinkTask+0x150>)
 8001518:	4413      	add	r3, r2
 800151a:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <BlinkTask+0x164>)
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	461a      	mov	r2, r3
 8001524:	f014 fdd8 	bl	80160d8 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <BlinkTask+0x158>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <BlinkTask+0x15c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153c:	ee17 2a90 	vmov	r2, s15
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <BlinkTask+0x164>)
 8001542:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <BlinkTask+0x168>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <BlinkTask+0x164>)
 800154a:	6693      	str	r3, [r2, #104]	; 0x68

						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <BlinkTask+0x164>)
 800154e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <BlinkTask+0x158>)
 800155a:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <BlinkTask+0x168>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <BlinkTask+0x168>)
 8001566:	6013      	str	r3, [r2, #0]

						osMessageQueuePut(blinkMsgQueueHandle, (void *) &blinkMsgBuffer_1, 0U, 0);
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <BlinkTask+0x16c>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	4918      	ldr	r1, [pc, #96]	; (80015d4 <BlinkTask+0x164>)
 8001572:	f00d fef1 	bl	800f358 <osMessageQueuePut>
					for(iterator=0; iterator < BLINK_ITERATOR_COUNT; iterator++){
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <BlinkTask+0x160>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <BlinkTask+0x160>)
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <BlinkTask+0x160>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d9c1      	bls.n	800150c <BlinkTask+0x9c>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if( (evt & 0x00000002U) == 0x00000002U){
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d089      	beq.n	80014a6 <BlinkTask+0x36>

					HAL_ADC_Stop_DMA(&hadc1);
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <BlinkTask+0x154>)
 8001594:	f004 fc04 	bl	8005da0 <HAL_ADC_Stop_DMA>
//					while(HAL_ADC_Stop(&hadc1) != HAL_OK)
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001598:	2104      	movs	r1, #4
 800159a:	4808      	ldr	r0, [pc, #32]	; (80015bc <BlinkTask+0x14c>)
 800159c:	f00a fa0c 	bl	800b9b8 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <BlinkTask+0x14c>)
 80015a2:	f00a f933 	bl	800b80c <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <BlinkTask+0x158>)
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <BlinkTask+0x16c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00d ffe8 	bl	800f588 <osMessageQueueReset>

					break;
 80015b8:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80015ba:	e75d      	b.n	8001478 <BlinkTask+0x8>
 80015bc:	20028530 	.word	0x20028530
 80015c0:	20000274 	.word	0x20000274
 80015c4:	2002779c 	.word	0x2002779c
 80015c8:	20000a4c 	.word	0x20000a4c
 80015cc:	20000a50 	.word	0x20000a50
 80015d0:	20000a48 	.word	0x20000a48
 80015d4:	20000208 	.word	0x20000208
 80015d8:	20000a44 	.word	0x20000a44
 80015dc:	20027da8 	.word	0x20027da8

080015e0 <HAL_ADC_ErrorCallback>:
//    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  i++;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_ADC_ErrorCallback+0x24>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_ADC_ErrorCallback+0x24>)
 80015f4:	701a      	strb	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000a54 	.word	0x20000a54

08001608 <HAL_ADC_ConvCpltCallback>:

//volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer[100]), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_ADC_ConvCpltCallback+0x24>)
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_ADC_ConvCpltCallback+0x28>)
 8001614:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2104      	movs	r1, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f00d f9fd 	bl	800ea1c <osThreadFlagsSet>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20027db0 	.word	0x20027db0
 8001630:	2000065c 	.word	0x2000065c
 8001634:	20027954 	.word	0x20027954

08001638 <HAL_ADC_ConvHalfCpltCallback>:

//volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
	blink_ptr = blink_buffer;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001644:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2104      	movs	r1, #4
 800164c:	4618      	mov	r0, r3
 800164e:	f00d f9e5 	bl	800ea1c <osThreadFlagsSet>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20027db0 	.word	0x20027db0
 8001660:	20000274 	.word	0x20000274
 8001664:	20027954 	.word	0x20027954

08001668 <LL_AHB2_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_COMP1_Init+0x50>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_COMP1_Init+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_3_4VREFINT;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_COMP1_Init+0x50>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_COMP1_Init+0x58>)
 80016aa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_COMP1_Init+0x50>)
 80016ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_COMP1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_COMP1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_COMP1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_COMP1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_COMP1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_COMP1_Init+0x50>)
 80016d4:	2231      	movs	r2, #49	; 0x31
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_COMP1_Init+0x50>)
 80016da:	f005 f9bd 	bl	8006a58 <HAL_COMP_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f002 fd96 	bl	8004214 <Error_Handler>
  }

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20027db4 	.word	0x20027db4
 80016f0:	40010200 	.word	0x40010200
 80016f4:	00c00020 	.word	0x00c00020

080016f8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_COMP_MspInit+0x5c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d117      	bne.n	800174a <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ffa4 	bl	8001668 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001720:	2302      	movs	r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001724:	2303      	movs	r3, #3
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001736:	f005 ffdf 	bl	80076f8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2105      	movs	r1, #5
 800173e:	2016      	movs	r0, #22
 8001740:	f005 fc53 	bl	8006fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001744:	2016      	movs	r0, #22
 8001746:	f005 fc6a 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010200 	.word	0x40010200

08001758 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d02a      	beq.n	80017c8 <process_pulse_lengths+0x70>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3302      	adds	r3, #2
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d025      	beq.n	80017c8 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3302      	adds	r3, #2
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	bf8c      	ite	hi
 800178a:	2301      	movhi	r3, #1
 800178c:	2300      	movls	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	d10e      	bne.n	80017bc <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	005a      	lsls	r2, r3, #1
 80017a4:	7efb      	ldrb	r3, [r7, #27]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <process_pulse_lengths+0xd0>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e002      	b.n	80017c2 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80017bc:	7efa      	ldrb	r2, [r7, #27]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db26      	blt.n	800181c <process_pulse_lengths+0xc4>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	dc22      	bgt.n	800181c <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80017f2:	e013      	b.n	800181c <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4291      	cmp	r1, r2
 800180c:	d101      	bne.n	8001812 <process_pulse_lengths+0xba>
 800180e:	2201      	movs	r2, #1
 8001810:	e001      	b.n	8001816 <process_pulse_lengths+0xbe>
 8001812:	f04f 32ff 	mov.w	r2, #4294967295
 8001816:	441a      	add	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	3724      	adds	r7, #36	; 0x24
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	080178d0 	.word	0x080178d0

0800182c <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b03      	cmp	r3, #3
 800183c:	dd06      	ble.n	800184c <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	e001      	b.n	8001850 <get_phase+0x24>
    } else {
        return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <reset>:

void reset(CyclePhaseClassifier * self) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <reset+0x30>)
 8001876:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	427a0000 	.word	0x427a0000

08001890 <LL_AHB1_GRP1_EnableClock>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800189e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018c6:	2004      	movs	r0, #4
 80018c8:	f7ff ffe2 	bl	8001890 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ffdf 	bl	8001890 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	200b      	movs	r0, #11
 80018d8:	f005 fb87 	bl	8006fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018dc:	200b      	movs	r0, #11
 80018de:	f005 fb9e 	bl	800701e <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	603a      	str	r2, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
 80018f4:	460b      	mov	r3, r1
 80018f6:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <IMU_begin+0x60>)
 8001900:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <IMU_begin+0x64>)
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <IMU_begin+0x68>)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 800190e:	f000 fa85 	bl	8001e1c <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <IMU_begin+0x6c>)
 8001914:	22f9      	movs	r2, #249	; 0xf9
 8001916:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <IMU_begin+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 800191e:	2302      	movs	r3, #2
 8001920:	2102      	movs	r1, #2
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fc14 	bl	8002150 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001928:	f000 fb6a 	bl	8002000 <IMU_receivePacket>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <IMU_begin+0x6c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2bf8      	cmp	r3, #248	; 0xf8
 8001938:	d101      	bne.n	800193e <IMU_begin+0x56>
		{
			return (true);
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000006 	.word	0x20000006
 800194c:	20027e36 	.word	0x20027e36
 8001950:	20027efc 	.word	0x20027efc
 8001954:	20027e74 	.word	0x20027e74

08001958 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <IMU_dataAvailable+0x64>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d00d      	beq.n	8001980 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <IMU_dataAvailable+0x68>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <IMU_dataAvailable+0x64>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f006 f831 	bl	80079d8 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <IMU_dataAvailable+0x28>
			return (false);
 800197c:	2300      	movs	r3, #0
 800197e:	e01b      	b.n	80019b8 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001980:	f000 fb3e 	bl	8002000 <IMU_receivePacket>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <IMU_dataAvailable+0x6c>)
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	2203      	movs	r2, #3
 8001990:	4293      	cmp	r3, r2
 8001992:	d107      	bne.n	80019a4 <IMU_dataAvailable+0x4c>
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <IMU_dataAvailable+0x70>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2bfb      	cmp	r3, #251	; 0xfb
 800199a:	d103      	bne.n	80019a4 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800199c:	f000 f832 	bl	8001a04 <IMU_parseInputReport>
			return (true);
 80019a0:	2301      	movs	r3, #1
 80019a2:	e009      	b.n	80019b8 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <IMU_dataAvailable+0x6c>)
 80019a6:	789b      	ldrb	r3, [r3, #2]
 80019a8:	2202      	movs	r2, #2
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d103      	bne.n	80019b6 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80019ae:	f000 f80d 	bl	80019cc <IMU_parseCommandReport>
			return (true);
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20027e36 	.word	0x20027e36
 80019c0:	20027efc 	.word	0x20027efc
 80019c4:	20027de4 	.word	0x20027de4
 80019c8:	20027e74 	.word	0x20027e74

080019cc <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <IMU_parseCommandReport+0x30>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2bf1      	cmp	r3, #241	; 0xf1
 80019d8:	d109      	bne.n	80019ee <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <IMU_parseCommandReport+0x30>)
 80019dc:	789b      	ldrb	r3, [r3, #2]
 80019de:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d103      	bne.n	80019ee <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <IMU_parseCommandReport+0x30>)
 80019e8:	795a      	ldrb	r2, [r3, #5]
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <IMU_parseCommandReport+0x34>)
 80019ec:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20027e74 	.word	0x20027e74
 8001a00:	20027f27 	.word	0x20027f27

08001a04 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001a0a:	4b96      	ldr	r3, [pc, #600]	; (8001c64 <IMU_parseInputReport+0x260>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b94      	ldr	r3, [pc, #592]	; (8001c64 <IMU_parseInputReport+0x260>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001a1c:	8a3b      	ldrh	r3, [r7, #16]
 8001a1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a22:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001a24:	8a3b      	ldrh	r3, [r7, #16]
 8001a26:	3b04      	subs	r3, #4
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001a2c:	4b8e      	ldr	r3, [pc, #568]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	061a      	lsls	r2, r3, #24
 8001a32:	4b8d      	ldr	r3, [pc, #564]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a34:	78db      	ldrb	r3, [r3, #3]
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	4313      	orrs	r3, r2
 8001a42:	4a89      	ldr	r2, [pc, #548]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a44:	7852      	ldrb	r2, [r2, #1]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	4a88      	ldr	r2, [pc, #544]	; (8001c6c <IMU_parseInputReport+0x268>)
 8001a4a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001a4c:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a4e:	79db      	ldrb	r3, [r3, #7]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001a56:	4b84      	ldr	r3, [pc, #528]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a58:	7a9b      	ldrb	r3, [r3, #10]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a60:	7a5b      	ldrb	r3, [r3, #9]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a6c:	7b1b      	ldrb	r3, [r3, #12]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a74:	7adb      	ldrb	r3, [r3, #11]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a80:	7b9b      	ldrb	r3, [r3, #14]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001a88:	7b5b      	ldrb	r3, [r3, #13]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001a96:	2300      	movs	r3, #0
 8001a98:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001a9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a9e:	3b05      	subs	r3, #5
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	dd09      	ble.n	8001ab8 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001aa6:	7c1b      	ldrb	r3, [r3, #16]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001aae:	7bdb      	ldrb	r3, [r3, #15]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001abc:	3b05      	subs	r3, #5
 8001abe:	2b0b      	cmp	r3, #11
 8001ac0:	dd09      	ble.n	8001ad6 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001ac4:	7c9b      	ldrb	r3, [r3, #18]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001acc:	7c5b      	ldrb	r3, [r3, #17]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001ad8:	795b      	ldrb	r3, [r3, #5]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10d      	bne.n	8001afa <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <IMU_parseInputReport+0x26c>)
 8001ae4:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001ae6:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <IMU_parseInputReport+0x270>)
 8001ae8:	89bb      	ldrh	r3, [r7, #12]
 8001aea:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001aec:	4a62      	ldr	r2, [pc, #392]	; (8001c78 <IMU_parseInputReport+0x274>)
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001af2:	4a62      	ldr	r2, [pc, #392]	; (8001c7c <IMU_parseInputReport+0x278>)
 8001af4:	893b      	ldrh	r3, [r7, #8]
 8001af6:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001af8:	e16a      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001afc:	795b      	ldrb	r3, [r3, #5]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d10d      	bne.n	8001b1e <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <IMU_parseInputReport+0x27c>)
 8001b08:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001b0a:	4a5e      	ldr	r2, [pc, #376]	; (8001c84 <IMU_parseInputReport+0x280>)
 8001b0c:	89bb      	ldrh	r3, [r7, #12]
 8001b0e:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001b10:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <IMU_parseInputReport+0x284>)
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001b16:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <IMU_parseInputReport+0x288>)
 8001b18:	893b      	ldrh	r3, [r7, #8]
 8001b1a:	8013      	strh	r3, [r2, #0]
}
 8001b1c:	e158      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d10d      	bne.n	8001b42 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <IMU_parseInputReport+0x28c>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001b2e:	4a59      	ldr	r2, [pc, #356]	; (8001c94 <IMU_parseInputReport+0x290>)
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <IMU_parseInputReport+0x294>)
 8001b36:	897b      	ldrh	r3, [r7, #10]
 8001b38:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <IMU_parseInputReport+0x298>)
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	8013      	strh	r3, [r2, #0]
}
 8001b40:	e146      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001b44:	795b      	ldrb	r3, [r3, #5]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d10d      	bne.n	8001b66 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <IMU_parseInputReport+0x29c>)
 8001b50:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001b52:	4a54      	ldr	r2, [pc, #336]	; (8001ca4 <IMU_parseInputReport+0x2a0>)
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <IMU_parseInputReport+0x2a4>)
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <IMU_parseInputReport+0x2a8>)
 8001b60:	893b      	ldrh	r3, [r7, #8]
 8001b62:	8013      	strh	r3, [r2, #0]
}
 8001b64:	e134      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001b68:	795b      	ldrb	r3, [r3, #5]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d003      	beq.n	8001b76 <IMU_parseInputReport+0x172>
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001b70:	795b      	ldrb	r3, [r3, #5]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d166      	bne.n	8001c44 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001b76:	f003 fd0f 	bl	8005598 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001b7e:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001b80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <IMU_parseInputReport+0x2b0>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f000 f966 	bl	8001e60 <IMU_qToFloat>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001b9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ba2:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <IMU_parseInputReport+0x2b0>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f000 f957 	bl	8001e60 <IMU_qToFloat>
 8001bb2:	eef0 7a40 	vmov.f32	s15, s0
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001bb8:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001bbc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <IMU_parseInputReport+0x2b0>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 f948 	bl	8001e60 <IMU_qToFloat>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001bd6:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001bda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <IMU_parseInputReport+0x2b0>)
 8001be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f000 f939 	bl	8001e60 <IMU_qToFloat>
 8001bee:	eef0 7a40 	vmov.f32	s15, s0
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001bf4:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001bf8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bfc:	210c      	movs	r1, #12
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f92e 	bl	8001e60 <IMU_qToFloat>
 8001c04:	eef0 7a40 	vmov.f32	s15, s0
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001c0a:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <IMU_parseInputReport+0x2b4>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2200      	movs	r2, #0
 8001c16:	4926      	ldr	r1, [pc, #152]	; (8001cb0 <IMU_parseInputReport+0x2ac>)
 8001c18:	f00d fb9e 	bl	800f358 <osMessageQueuePut>
		quatAccuracy = status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <IMU_parseInputReport+0x2b8>)
 8001c22:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <IMU_parseInputReport+0x2bc>)
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001c2a:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <IMU_parseInputReport+0x2c0>)
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <IMU_parseInputReport+0x2c4>)
 8001c32:	893b      	ldrh	r3, [r7, #8]
 8001c34:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <IMU_parseInputReport+0x2c8>)
 8001c38:	8afb      	ldrh	r3, [r7, #22]
 8001c3a:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <IMU_parseInputReport+0x2cc>)
 8001c3e:	8abb      	ldrh	r3, [r7, #20]
 8001c40:	8013      	strh	r3, [r2, #0]
}
 8001c42:	e0c5      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <IMU_parseInputReport+0x264>)
 8001c46:	795b      	ldrb	r3, [r3, #5]
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d147      	bne.n	8001cdc <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001c4c:	f003 fca4 	bl	8005598 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <IMU_parseInputReport+0x2d0>)
 8001c54:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <IMU_parseInputReport+0x2d0>)
 8001c58:	893b      	ldrh	r3, [r7, #8]
 8001c5a:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <IMU_parseInputReport+0x2d4>)
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	8013      	strh	r3, [r2, #0]
}
 8001c62:	e0b5      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
 8001c64:	20027de4 	.word	0x20027de4
 8001c68:	20027e74 	.word	0x20027e74
 8001c6c:	20027e00 	.word	0x20027e00
 8001c70:	20027f3c 	.word	0x20027f3c
 8001c74:	20027f24 	.word	0x20027f24
 8001c78:	20027f40 	.word	0x20027f40
 8001c7c:	20027e3c 	.word	0x20027e3c
 8001c80:	20027e38 	.word	0x20027e38
 8001c84:	20027e0a 	.word	0x20027e0a
 8001c88:	20027f28 	.word	0x20027f28
 8001c8c:	20027e66 	.word	0x20027e66
 8001c90:	20027e68 	.word	0x20027e68
 8001c94:	20027e6a 	.word	0x20027e6a
 8001c98:	20027e32 	.word	0x20027e32
 8001c9c:	20027e30 	.word	0x20027e30
 8001ca0:	20027de8 	.word	0x20027de8
 8001ca4:	20027e34 	.word	0x20027e34
 8001ca8:	20027f2a 	.word	0x20027f2a
 8001cac:	20027e3a 	.word	0x20027e3a
 8001cb0:	20027e4c 	.word	0x20027e4c
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20027974 	.word	0x20027974
 8001cbc:	20027e06 	.word	0x20027e06
 8001cc0:	20027f3e 	.word	0x20027f3e
 8001cc4:	20027e64 	.word	0x20027e64
 8001cc8:	20027de0 	.word	0x20027de0
 8001ccc:	20027dfc 	.word	0x20027dfc
 8001cd0:	20027e3e 	.word	0x20027e3e
 8001cd4:	20027dec 	.word	0x20027dec
 8001cd8:	20027f42 	.word	0x20027f42
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001cdc:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001cde:	795b      	ldrb	r3, [r3, #5]
 8001ce0:	2b13      	cmp	r3, #19
 8001ce2:	d10d      	bne.n	8001d00 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001ce4:	f003 fc58 	bl	8005598 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <IMU_parseInputReport+0x3d8>)
 8001cec:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001cf0:	7a5a      	ldrb	r2, [r3, #9]
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <IMU_parseInputReport+0x3d8>)
 8001cf4:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001cf8:	7a5a      	ldrb	r2, [r3, #9]
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <IMU_parseInputReport+0x3dc>)
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	e067      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d02:	795b      	ldrb	r3, [r3, #5]
 8001d04:	2b1e      	cmp	r3, #30
 8001d06:	d12b      	bne.n	8001d60 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001d08:	f003 fc46 	bl	8005598 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <IMU_parseInputReport+0x3e0>)
 8001d10:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001d12:	2300      	movs	r3, #0
 8001d14:	74fb      	strb	r3, [r7, #19]
 8001d16:	e00c      	b.n	8001d32 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	f103 020b 	add.w	r2, r3, #11
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <IMU_parseInputReport+0x3e4>)
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	7cfb      	ldrb	r3, [r7, #19]
 8001d24:	440b      	add	r3, r1
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d28:	5c8a      	ldrb	r2, [r1, r2]
 8001d2a:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	74fb      	strb	r3, [r7, #19]
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d9ef      	bls.n	8001d18 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d3a:	7a9a      	ldrb	r2, [r3, #10]
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <IMU_parseInputReport+0x3e8>)
 8001d3e:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <IMU_parseInputReport+0x3e4>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <IMU_parseInputReport+0x3e0>)
 8001d46:	6810      	ldr	r0, [r2, #0]
 8001d48:	6851      	ldr	r1, [r2, #4]
 8001d4a:	c303      	stmia	r3!, {r0, r1}
 8001d4c:	7a12      	ldrb	r2, [r2, #8]
 8001d4e:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <IMU_parseInputReport+0x3ec>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	2300      	movs	r3, #0
 8001d56:	2200      	movs	r2, #0
 8001d58:	4922      	ldr	r1, [pc, #136]	; (8001de4 <IMU_parseInputReport+0x3e0>)
 8001d5a:	f00d fafd 	bl	800f358 <osMessageQueuePut>
}
 8001d5e:	e037      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	2b14      	cmp	r3, #20
 8001d66:	d109      	bne.n	8001d7c <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <IMU_parseInputReport+0x3f0>)
 8001d6a:	89bb      	ldrh	r3, [r7, #12]
 8001d6c:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <IMU_parseInputReport+0x3f4>)
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <IMU_parseInputReport+0x3f8>)
 8001d76:	893b      	ldrh	r3, [r7, #8]
 8001d78:	8013      	strh	r3, [r2, #0]
}
 8001d7a:	e029      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d7e:	795b      	ldrb	r3, [r3, #5]
 8001d80:	2b15      	cmp	r3, #21
 8001d82:	d109      	bne.n	8001d98 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <IMU_parseInputReport+0x3fc>)
 8001d86:	89bb      	ldrh	r3, [r7, #12]
 8001d88:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <IMU_parseInputReport+0x400>)
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <IMU_parseInputReport+0x404>)
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	8013      	strh	r3, [r2, #0]
}
 8001d96:	e01b      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001d9a:	795b      	ldrb	r3, [r3, #5]
 8001d9c:	2b16      	cmp	r3, #22
 8001d9e:	d109      	bne.n	8001db4 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <IMU_parseInputReport+0x408>)
 8001da2:	89bb      	ldrh	r3, [r7, #12]
 8001da4:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001da6:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <IMU_parseInputReport+0x40c>)
 8001da8:	897b      	ldrh	r3, [r7, #10]
 8001daa:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <IMU_parseInputReport+0x410>)
 8001dae:	893b      	ldrh	r3, [r7, #8]
 8001db0:	8013      	strh	r3, [r2, #0]
}
 8001db2:	e00d      	b.n	8001dd0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001db6:	795b      	ldrb	r3, [r3, #5]
 8001db8:	2bf1      	cmp	r3, #241	; 0xf1
 8001dba:	d109      	bne.n	8001dd0 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001dbe:	79db      	ldrb	r3, [r3, #7]
 8001dc0:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d103      	bne.n	8001dd0 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <IMU_parseInputReport+0x3d4>)
 8001dca:	7a9a      	ldrb	r2, [r3, #10]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <IMU_parseInputReport+0x414>)
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20027e74 	.word	0x20027e74
 8001ddc:	20027df4 	.word	0x20027df4
 8001de0:	20027e6e 	.word	0x20027e6e
 8001de4:	20027f2c 	.word	0x20027f2c
 8001de8:	20027e48 	.word	0x20027e48
 8001dec:	20027f26 	.word	0x20027f26
 8001df0:	2002795c 	.word	0x2002795c
 8001df4:	20027e6c 	.word	0x20027e6c
 8001df8:	20027e46 	.word	0x20027e46
 8001dfc:	20027ef6 	.word	0x20027ef6
 8001e00:	20027dea 	.word	0x20027dea
 8001e04:	20027e70 	.word	0x20027e70
 8001e08:	20027e40 	.word	0x20027e40
 8001e0c:	20027e44 	.word	0x20027e44
 8001e10:	20027e42 	.word	0x20027e42
 8001e14:	20027e08 	.word	0x20027e08
 8001e18:	20027f27 	.word	0x20027f27

08001e1c <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <IMU_softReset+0x3c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001e26:	2301      	movs	r3, #1
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f990 	bl	8002150 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001e30:	20c8      	movs	r0, #200	; 0xc8
 8001e32:	f003 fbc9 	bl	80055c8 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001e36:	bf00      	nop
 8001e38:	f000 f8e2 	bl	8002000 <IMU_receivePacket>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1fa      	bne.n	8001e38 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001e42:	20c8      	movs	r0, #200	; 0xc8
 8001e44:	f003 fbc0 	bl	80055c8 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001e48:	bf00      	nop
 8001e4a:	f000 f8d9 	bl	8002000 <IMU_receivePacket>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1fa      	bne.n	8001e4a <IMU_softReset+0x2e>
		;
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20027e74 	.word	0x20027e74
 8001e5c:	00000000 	.word	0x00000000

08001e60 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	80fb      	strh	r3, [r7, #6]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001e80:	797b      	ldrb	r3, [r7, #5]
 8001e82:	425b      	negs	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fad7 	bl	8000438 <__aeabi_i2d>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	ec44 3b11 	vmov	d1, r3, r4
 8001e92:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001ed8 <IMU_qToFloat+0x78>
 8001e96:	f014 f933 	bl	8016100 <pow>
 8001e9a:	ec56 5b10 	vmov	r5, r6, d0
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7fe fadc 	bl	800045c <__aeabi_f2d>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	4628      	mov	r0, r5
 8001eae:	4631      	mov	r1, r6
 8001eb0:	f7fe fb2c 	bl	800050c <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4621      	mov	r1, r4
 8001ebc:	f7fe fdd6 	bl	8000a6c <__aeabi_d2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40000000 	.word	0x40000000

08001ee0 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4619      	mov	r1, r3
 8001eee:	2005      	movs	r0, #5
 8001ef0:	f000 f81a 	bl	8001f28 <IMU_setFeatureCommand_2>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <IMU_enableActivityClassifier+0x28>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4619      	mov	r1, r3
 8001f16:	201e      	movs	r0, #30
 8001f18:	f000 f818 	bl	8001f4c <IMU_setFeatureCommand_3>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20027e48 	.word	0x20027e48

08001f28 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460a      	mov	r2, r1
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8001f38:	88b9      	ldrh	r1, [r7, #4]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f804 	bl	8001f4c <IMU_setFeatureCommand_3>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f6a:	22fd      	movs	r2, #253	; 0xfd
 8001f6c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001f6e:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f8c:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001f96:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	141b      	asrs	r3, r3, #16
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fa0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0e1b      	lsrs	r3, r3, #24
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001faa:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fca:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fd4:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fde:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	0e1b      	lsrs	r3, r3, #24
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <IMU_setFeatureCommand_3+0xb0>)
 8001fe8:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8001fea:	2302      	movs	r3, #2
 8001fec:	2111      	movs	r1, #17
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f8ae 	bl	8002150 <IMU_sendPacket>
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20027e74 	.word	0x20027e74

08002000 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <IMU_receivePacket+0x90>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <IMU_receivePacket+0x94>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f005 fce0 	bl	80079d8 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <IMU_receivePacket+0x22>
		return (false);
 800201e:	2300      	movs	r3, #0
 8002020:	e031      	b.n	8002086 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <IMU_receivePacket+0x98>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f04f 31ff 	mov.w	r1, #4294967295
 800202a:	4618      	mov	r0, r3
 800202c:	f00d f850 	bl	800f0d0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <IMU_receivePacket+0x9c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b299      	uxth	r1, r3
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2304      	movs	r3, #4
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <IMU_receivePacket+0xa0>)
 800203e:	4819      	ldr	r0, [pc, #100]	; (80020a4 <IMU_receivePacket+0xa4>)
 8002040:	f005 fe7e 	bl	8007d40 <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <IMU_receivePacket+0x98>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f00d f8a7 	bl	800f19c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <IMU_receivePacket+0xa0>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	b21a      	sxth	r2, r3
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <IMU_receivePacket+0xa0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002066:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002070:	2300      	movs	r3, #0
 8002072:	e008      	b.n	8002086 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	3b04      	subs	r3, #4
 8002078:	b29b      	uxth	r3, r3
 800207a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f812 	bl	80020a8 <IMU_getData>


	return (true); //We're done!
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20027efc 	.word	0x20027efc
 8002094:	20027e36 	.word	0x20027e36
 8002098:	20027964 	.word	0x20027964
 800209c:	20000006 	.word	0x20000006
 80020a0:	20027de4 	.word	0x20027de4
 80020a4:	20027f4c 	.word	0x20027f4c

080020a8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80020b2:	2300      	movs	r3, #0
 80020b4:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80020b6:	e036      	b.n	8002126 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	2b1c      	cmp	r3, #28
 80020c0:	d901      	bls.n	80020c6 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80020c2:	231c      	movs	r3, #28
 80020c4:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <IMU_getData+0x90>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f04f 31ff 	mov.w	r1, #4294967295
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00c fffe 	bl	800f0d0 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <IMU_getData+0x94>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b299      	uxth	r1, r3
 80020da:	89bb      	ldrh	r3, [r7, #12]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3304      	adds	r3, #4
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	2364      	movs	r3, #100	; 0x64
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <IMU_getData+0x98>)
 80020ec:	4815      	ldr	r0, [pc, #84]	; (8002144 <IMU_getData+0x9c>)
 80020ee:	f005 fe27 	bl	8007d40 <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <IMU_getData+0x90>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00d f850 	bl	800f19c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 80020fc:	89fa      	ldrh	r2, [r7, #14]
 80020fe:	89bb      	ldrh	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	2b7f      	cmp	r3, #127	; 0x7f
 8002104:	dc07      	bgt.n	8002116 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <IMU_getData+0xa0>)
 800210a:	4413      	add	r3, r2
 800210c:	89ba      	ldrh	r2, [r7, #12]
 800210e:	490f      	ldr	r1, [pc, #60]	; (800214c <IMU_getData+0xa4>)
 8002110:	4618      	mov	r0, r3
 8002112:	f013 ffe1 	bl	80160d8 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8002116:	89fa      	ldrh	r2, [r7, #14]
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	89bb      	ldrh	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1c5      	bne.n	80020b8 <IMU_getData+0x10>
	}
	return (true); //Done!
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20027964 	.word	0x20027964
 800213c:	20000006 	.word	0x20000006
 8002140:	20000a60 	.word	0x20000a60
 8002144:	20027f4c 	.word	0x20027f4c
 8002148:	20027e74 	.word	0x20027e74
 800214c:	20000a64 	.word	0x20000a64

08002150 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	3304      	adds	r3, #4
 8002164:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <IMU_sendPacket+0x84>)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	121b      	asrs	r3, r3, #8
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <IMU_sendPacket+0x84>)
 8002174:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <IMU_sendPacket+0x84>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <IMU_sendPacket+0x88>)
 8002180:	5cd2      	ldrb	r2, [r2, r3]
 8002182:	1c51      	adds	r1, r2, #1
 8002184:	b2c8      	uxtb	r0, r1
 8002186:	4914      	ldr	r1, [pc, #80]	; (80021d8 <IMU_sendPacket+0x88>)
 8002188:	54c8      	strb	r0, [r1, r3]
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <IMU_sendPacket+0x84>)
 800218c:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	461a      	mov	r2, r3
 8002192:	4912      	ldr	r1, [pc, #72]	; (80021dc <IMU_sendPacket+0x8c>)
 8002194:	4812      	ldr	r0, [pc, #72]	; (80021e0 <IMU_sendPacket+0x90>)
 8002196:	f013 ff9f 	bl	80160d8 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <IMU_sendPacket+0x94>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 31ff 	mov.w	r1, #4294967295
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00c ff94 	bl	800f0d0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <IMU_sendPacket+0x98>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b299      	uxth	r1, r3
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	2364      	movs	r3, #100	; 0x64
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <IMU_sendPacket+0x84>)
 80021ba:	480c      	ldr	r0, [pc, #48]	; (80021ec <IMU_sendPacket+0x9c>)
 80021bc:	f005 fccc 	bl	8007b58 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <IMU_sendPacket+0x94>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00c ffe9 	bl	800f19c <osSemaphoreRelease>

	return (true);
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20027f00 	.word	0x20027f00
 80021d8:	20000a58 	.word	0x20000a58
 80021dc:	20027e74 	.word	0x20027e74
 80021e0:	20027f04 	.word	0x20027f04
 80021e4:	20027964 	.word	0x20027964
 80021e8:	20000006 	.word	0x20000006
 80021ec:	20027f4c 	.word	0x20027f4c

080021f0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800220a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800220e:	f00f fdb7 	bl	8011d80 <eTaskConfirmSleepModeStatus>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8002226:	e021      	b.n	800226c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d002      	beq.n	8002236 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f869 	bl	8002308 <LpTimerStart>
    LpEnter( );
 8002236:	f000 f8cb 	bl	80023d0 <LpEnter>
    if (xExpectedIdleTime != (~0))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002242:	f000 f8cd 	bl	80023e0 <LpGetElapsedTime>
 8002246:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f00f fab3 	bl	80117b4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <vPortSuppressTicksAndSleep+0x88>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <vPortSuppressTicksAndSleep+0x84>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <vPortSuppressTicksAndSleep+0x8c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <vPortSuppressTicksAndSleep+0x90>)
 8002266:	3b01      	subs	r3, #1
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	b662      	cpsie	i
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	e000e010 	.word	0xe000e010
 8002278:	e000e018 	.word	0xe000e018
 800227c:	20000a80 	.word	0x20000a80
 8002280:	e000e014 	.word	0xe000e014

08002284 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  LpTimerInit( );
 8002288:	f000 f828 	bl	80022dc <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <vPortSetupTimerInterrupt+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <vPortSetupTimerInterrupt+0x44>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <vPortSetupTimerInterrupt+0x48>)
 800229a:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <vPortSetupTimerInterrupt+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <vPortSetupTimerInterrupt+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <vPortSetupTimerInterrupt+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <vPortSetupTimerInterrupt+0x44>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <vPortSetupTimerInterrupt+0x54>)
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <vPortSetupTimerInterrupt+0x4c>)
 80022bc:	2207      	movs	r2, #7
 80022be:	601a      	str	r2, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000078 	.word	0x20000078
 80022c8:	10624dd3 	.word	0x10624dd3
 80022cc:	20000a80 	.word	0x20000a80
 80022d0:	e000e010 	.word	0xe000e010
 80022d4:	e000e018 	.word	0xe000e018
 80022d8:	e000e014 	.word	0xe000e014

080022dc <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <LpTimerInit+0x14>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <LpTimerInit+0x18>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	f001 f832 	bl	8003350 <HW_TS_Create>

  return;
 80022ec:	bf00      	nop
}
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	20000a88 	.word	0x20000a88

080022f8 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 80022fc:	bf00      	nop
}
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002316:	4293      	cmp	r3, r2
 8002318:	d80c      	bhi.n	8002334 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <LpTimerStart+0xb8>)
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <LpTimerStart+0xbc>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	e034      	b.n	800239e <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <LpTimerStart+0xc0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d81b      	bhi.n	8002374 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <LpTimerStart+0xbc>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <LpTimerStart+0xc0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d806      	bhi.n	800236c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e018      	b.n	800239e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	e014      	b.n	800239e <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <LpTimerStart+0xbc>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002388:	4293      	cmp	r3, r2
 800238a:	d805      	bhi.n	8002398 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <LpTimerStart+0xb8>)
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	e002      	b.n	800239e <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <LpTimerStart+0xc4>)
 80023a0:	791b      	ldrb	r3, [r3, #4]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f8d3 	bl	8003550 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80023aa:	f001 f957 	bl	800365c <HW_TS_RTC_ReadLeftTicksToCount>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <LpTimerStart+0xc4>)
 80023b4:	601a      	str	r2, [r3, #0]

  return;
 80023b6:	bf00      	nop
}
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000f4240 	.word	0x000f4240
 80023c4:	0113094d 	.word	0x0113094d
 80023c8:	00418937 	.word	0x00418937
 80023cc:	20000a84 	.word	0x20000a84

080023d0 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80023d4:	bf00      	nop
}
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <LpGetElapsedTime+0x60>)
 80023e8:	681c      	ldr	r4, [r3, #0]
 80023ea:	f001 f937 	bl	800365c <HW_TS_RTC_ReadLeftTicksToCount>
 80023ee:	4603      	mov	r3, r0
 80023f0:	1ae3      	subs	r3, r4, r3
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <LpGetElapsedTime+0x64>)
 80023f8:	fb02 f104 	mul.w	r1, r2, r4
 80023fc:	2200      	movs	r2, #0
 80023fe:	fb02 f203 	mul.w	r2, r2, r3
 8002402:	440a      	add	r2, r1
 8002404:	490f      	ldr	r1, [pc, #60]	; (8002444 <LpGetElapsedTime+0x64>)
 8002406:	fba3 3401 	umull	r3, r4, r3, r1
 800240a:	4422      	add	r2, r4
 800240c:	4614      	mov	r4, r2
 800240e:	e9c7 3400 	strd	r3, r4, [r7]
 8002412:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8002416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LpGetElapsedTime+0x68>)
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	f7fe fb74 	bl	8000b0c <__aeabi_uldivmod>
 8002424:	4603      	mov	r3, r0
 8002426:	460c      	mov	r4, r1
 8002428:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <LpGetElapsedTime+0x60>)
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f001 f803 	bl	800343c <HW_TS_Stop>

  return (uint32_t)return_value;
 8002436:	683b      	ldr	r3, [r7, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}
 8002440:	20000a84 	.word	0x20000a84
 8002444:	00077240 	.word	0x00077240
 8002448:	000f4240 	.word	0x000f4240

0800244c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{0.780941, 2.300994, -0.204002},
							  {-0.184830, -0.411017, 0.892694, 0.104180, 0.895032, 0.433664, -0.977233, 0.173155, -0.122609}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800244c:	b4b0      	push	{r4, r5, r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_GeometryBuilder+0x54>)
 8002458:	461c      	mov	r4, r3
 800245a:	4615      	mov	r5, r2
 800245c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <_GeometryBuilder+0x58>)
 8002470:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002474:	4615      	mov	r5, r2
 8002476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <_GeometryBuilder+0x5c>)
 800248a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800248e:	4613      	mov	r3, r2
 8002490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bcb0      	pop	{r4, r5, r7}
 800249e:	4770      	bx	lr
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000038 	.word	0x20000038
 80024a8:	20000a8c 	.word	0x20000a8c

080024ac <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b096      	sub	sp, #88	; 0x58
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2bc7      	cmp	r3, #199	; 0xc7
 80024bc:	f340 808e 	ble.w	80025dc <consume_angles+0x130>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3360      	adds	r3, #96	; 0x60
 80024c4:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80024c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	3310      	adds	r3, #16
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80024d8:	2300      	movs	r3, #0
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	e011      	b.n	8002502 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80024e6:	3104      	adds	r1, #4
 80024e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf38      	it	cc
 80024f8:	4613      	movcc	r3, r2
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	3301      	adds	r3, #1
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
 8002502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002504:	2b03      	cmp	r3, #3
 8002506:	ddea      	ble.n	80024de <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	2b0b      	cmp	r3, #11
 800250c:	d866      	bhi.n	80025dc <consume_angles+0x130>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002518:	ed93 7a01 	vldr	s14, [r3, #4]
 800251c:	f107 0214 	add.w	r2, r7, #20
 8002520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002524:	4619      	mov	r1, r3
 8002526:	eef0 0a47 	vmov.f32	s1, s14
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	f000 f8dd 	bl	80026ec <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253a:	edd3 7a02 	vldr	s15, [r3, #8]
 800253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002540:	ed93 7a03 	vldr	s14, [r3, #12]
 8002544:	f107 0208 	add.w	r2, r7, #8
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	4619      	mov	r1, r3
 800254e:	eef0 0a47 	vmov.f32	s1, s14
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	f000 f8c9 	bl	80026ec <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3370      	adds	r3, #112	; 0x70
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	327c      	adds	r2, #124	; 0x7c
 8002562:	f107 0520 	add.w	r5, r7, #32
 8002566:	f107 0408 	add.w	r4, r7, #8
 800256a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800256e:	f107 0014 	add.w	r0, r7, #20
 8002572:	9201      	str	r2, [sp, #4]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	462b      	mov	r3, r5
 8002578:	4622      	mov	r2, r4
 800257a:	f000 f93d 	bl	80027f8 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800257e:	2300      	movs	r3, #0
 8002580:	647b      	str	r3, [r7, #68]	; 0x44
 8002582:	e019      	b.n	80025b8 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	331c      	adds	r3, #28
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3304      	adds	r3, #4
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	331c      	adds	r3, #28
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	3301      	adds	r3, #1
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	dde2      	ble.n	8002584 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80025be:	f002 ffeb 	bl	8005598 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <consume_angles+0x138>)
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80025d4:	2300      	movs	r3, #0
 80025d6:	2200      	movs	r2, #0
 80025d8:	f00c febe 	bl	800f358 <osMessageQueuePut>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 80025dc:	bf00      	nop
 80025de:	3750      	adds	r7, #80	; 0x50
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	2002786c 	.word	0x2002786c

080025e8 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3304      	adds	r3, #4
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3308      	adds	r3, #8
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3308      	adds	r3, #8
 800260c:	edd3 6a00 	vldr	s13, [r3]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3304      	adds	r3, #4
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3308      	adds	r3, #8
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	edd3 6a00 	vldr	s13, [r3]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3308      	adds	r3, #8
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	ed93 7a00 	vldr	s14, [r3]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3304      	adds	r3, #4
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3304      	adds	r3, #4
 800266c:	edd3 6a00 	vldr	s13, [r3]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3308      	adds	r3, #8
 800267e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002682:	edc3 7a00 	vstr	s15, [r3]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <vec_length>:

float vec_length(float *vec) {
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	461a      	mov	r2, r3
 80026a0:	2103      	movs	r1, #3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f013 fa28 	bl	8015af8 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80026b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	db09      	blt.n	80026d4 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80026c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80026c4:	f013 fe8c 	bl	80163e0 <sqrtf>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	edc3 7a00 	vstr	s15, [r3]
 80026d2:	e003      	b.n	80026dc <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

    return res;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	ee07 3a90 	vmov	s15, r3
}
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b09a      	sub	sp, #104	; 0x68
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6178      	str	r0, [r7, #20]
 80026f4:	ed87 0a04 	vstr	s0, [r7, #16]
 80026f8:	edc7 0a03 	vstr	s1, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002700:	ed97 0a04 	vldr	s0, [r7, #16]
 8002704:	f013 fb24 	bl	8015d50 <arm_cos_f32>
 8002708:	eef0 7a40 	vmov.f32	s15, s0
 800270c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002716:	ed97 0a04 	vldr	s0, [r7, #16]
 800271a:	f013 fad3 	bl	8015cc4 <arm_sin_f32>
 800271e:	eef0 7a40 	vmov.f32	s15, s0
 8002722:	eef1 7a67 	vneg.f32	s15, s15
 8002726:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002730:	ed97 0a03 	vldr	s0, [r7, #12]
 8002734:	f013 fb0c 	bl	8015d50 <arm_cos_f32>
 8002738:	eef0 7a40 	vmov.f32	s15, s0
 800273c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002740:	ed97 0a03 	vldr	s0, [r7, #12]
 8002744:	f013 fabe 	bl	8015cc4 <arm_sin_f32>
 8002748:	eef0 7a40 	vmov.f32	s15, s0
 800274c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800275c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002760:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002764:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff3d 	bl	80025e8 <vec_cross_product>
    float len = vec_length(ray);
 800276e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff8d 	bl	8002692 <vec_length>
 8002778:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 800277c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002780:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002788:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800278c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002790:	2203      	movs	r2, #3
 8002792:	eeb0 0a66 	vmov.f32	s0, s13
 8002796:	4618      	mov	r0, r3
 8002798:	f013 fb7e 	bl	8015e98 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 800279c:	2303      	movs	r3, #3
 800279e:	873b      	strh	r3, [r7, #56]	; 0x38
 80027a0:	2303      	movs	r3, #3
 80027a2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	330c      	adds	r3, #12
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80027aa:	2303      	movs	r3, #3
 80027ac:	863b      	strh	r3, [r7, #48]	; 0x30
 80027ae:	2301      	movs	r3, #1
 80027b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80027b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80027b8:	2303      	movs	r3, #3
 80027ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80027bc:	2301      	movs	r3, #1
 80027be:	857b      	strh	r3, [r7, #42]	; 0x2a
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80027c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80027cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027d0:	4618      	mov	r0, r3
 80027d2:	f013 f9d7 	bl	8015b84 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f107 011c 	add.w	r1, r7, #28
 80027e8:	2303      	movs	r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	f013 fbf0 	bl	8015fd0 <arm_add_f32>
}
 80027f0:	bf00      	nop
 80027f2:	3768      	adds	r7, #104	; 0x68
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b098      	sub	sp, #96	; 0x60
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002812:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002816:	2303      	movs	r3, #3
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f013 fae2 	bl	8015de4 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002820:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002824:	2203      	movs	r2, #3
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	68b8      	ldr	r0, [r7, #8]
 800282a:	f013 fb79 	bl	8015f20 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 800282e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002832:	2203      	movs	r2, #3
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	68b8      	ldr	r0, [r7, #8]
 8002838:	f013 fb72 	bl	8015f20 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 800283c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002840:	2203      	movs	r2, #3
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	6838      	ldr	r0, [r7, #0]
 8002846:	f013 fb6b 	bl	8015f20 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800284a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800284e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002852:	2203      	movs	r2, #3
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	f013 fb63 	bl	8015f20 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800285a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800285e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002862:	2203      	movs	r2, #3
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f013 fb5b 	bl	8015f20 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800286a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800286e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002876:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800287a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 800288a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800288e:	eef0 7ae7 	vabs.f32	s15, s15
 8002892:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80029b0 <intersect_lines+0x1b8>
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d501      	bpl.n	80028a4 <intersect_lines+0xac>
        return 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e081      	b.n	80029a8 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 80028a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80028b4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80028b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80028c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80028cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 80028d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028dc:	2203      	movs	r2, #3
 80028de:	4619      	mov	r1, r3
 80028e0:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	f013 fad7 	bl	8015e98 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 80028ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028f2:	2303      	movs	r3, #3
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	f013 fb6b 	bl	8015fd0 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 80028fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80028fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800290a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800290e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002912:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002916:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800291a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	2203      	movs	r2, #3
 8002934:	4619      	mov	r1, r3
 8002936:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f013 faac 	bl	8015e98 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002940:	f107 021c 	add.w	r2, r7, #28
 8002944:	f107 001c 	add.w	r0, r7, #28
 8002948:	2303      	movs	r3, #3
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f013 fb40 	bl	8015fd0 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 800295c:	f107 0210 	add.w	r2, r7, #16
 8002960:	f107 011c 	add.w	r1, r7, #28
 8002964:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002968:	2303      	movs	r3, #3
 800296a:	f013 fb31 	bl	8015fd0 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	2203      	movs	r2, #3
 8002974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002976:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800297a:	4618      	mov	r0, r3
 800297c:	f013 fa8c 	bl	8015e98 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002980:	f107 0210 	add.w	r2, r7, #16
 8002984:	f107 011c 	add.w	r1, r7, #28
 8002988:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800298c:	2303      	movs	r3, #3
 800298e:	f013 fa29 	bl	8015de4 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fe7b 	bl	8002692 <vec_length>
 800299c:	eef0 7a40 	vmov.f32	s15, s0
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3760      	adds	r7, #96	; 0x60
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	3727c5ac 	.word	0x3727c5ac

080029b4 <LL_AHB2_GRP1_EnableClock>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fc:	2004      	movs	r0, #4
 80029fe:	f7ff ffd9 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a02:	2080      	movs	r0, #128	; 0x80
 8002a04:	f7ff ffd6 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f7ff ffd3 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7ff ffd0 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a14:	2010      	movs	r0, #16
 8002a16:	f7ff ffcd 	bl	80029b4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <MX_GPIO_Init+0xe8>)
 8002a2c:	f004 fe64 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002a30:	f240 3333 	movw	r3, #819	; 0x333
 8002a34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a36:	2303      	movs	r3, #3
 8002a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4824      	ldr	r0, [pc, #144]	; (8002ad4 <MX_GPIO_Init+0xec>)
 8002a44:	f004 fe58 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002a48:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002a4c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5e:	f004 fe4b 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002a62:	2320      	movs	r3, #32
 8002a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_GPIO_Init+0xf0>)
 8002a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f004 fe3f 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <MX_GPIO_Init+0xf4>)
 8002a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <MX_GPIO_Init+0xec>)
 8002a8c:	f004 fe34 	bl	80076f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a90:	2310      	movs	r3, #16
 8002a92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a94:	2303      	movs	r3, #3
 8002a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <MX_GPIO_Init+0xf8>)
 8002aa2:	f004 fe29 	bl	80076f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2105      	movs	r1, #5
 8002aaa:	2008      	movs	r0, #8
 8002aac:	f004 fa9d 	bl	8006fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ab0:	2008      	movs	r0, #8
 8002ab2:	f004 fab4 	bl	800701e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2105      	movs	r1, #5
 8002aba:	2017      	movs	r0, #23
 8002abc:	f004 fa95 	bl	8006fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ac0:	2017      	movs	r0, #23
 8002ac2:	f004 faac 	bl	800701e <HAL_NVIC_EnableIRQ>

}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	48001c00 	.word	0x48001c00
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	10210000 	.word	0x10210000
 8002adc:	10110000 	.word	0x10110000
 8002ae0:	48001000 	.word	0x48001000

08002ae4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002aee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002af2:	4905      	ldr	r1, [pc, #20]	; (8002b08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	58000800 	.word	0x58000800

08002b0c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4904      	ldr	r1, [pc, #16]	; (8002b2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	58000800 	.word	0x58000800

08002b30 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <ReadRtcSsrValue+0x3c>)
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <ReadRtcSsrValue+0x3c>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b46:	e005      	b.n	8002b54 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <ReadRtcSsrValue+0x3c>)
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1f5      	bne.n	8002b48 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b5c:	683b      	ldr	r3, [r7, #0]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40002800 	.word	0x40002800

08002b70 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	460a      	mov	r2, r1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b80:	79ba      	ldrb	r2, [r7, #6]
 8002b82:	491d      	ldr	r1, [pc, #116]	; (8002bf8 <LinkTimerAfter+0x88>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3315      	adds	r3, #21
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d009      	beq.n	8002bae <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	4916      	ldr	r1, [pc, #88]	; (8002bf8 <LinkTimerAfter+0x88>)
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3314      	adds	r3, #20
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002bae:	79fa      	ldrb	r2, [r7, #7]
 8002bb0:	4911      	ldr	r1, [pc, #68]	; (8002bf8 <LinkTimerAfter+0x88>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3315      	adds	r3, #21
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <LinkTimerAfter+0x88>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3314      	adds	r3, #20
 8002bd2:	79ba      	ldrb	r2, [r7, #6]
 8002bd4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002bd6:	79ba      	ldrb	r2, [r7, #6]
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <LinkTimerAfter+0x88>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3315      	adds	r3, #21
 8002be6:	79fa      	ldrb	r2, [r7, #7]
 8002be8:	701a      	strb	r2, [r3, #0]

  return;
 8002bea:	bf00      	nop
}
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000138 	.word	0x20000138

08002bfc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	460a      	mov	r2, r1
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <LinkTimerBefore+0xb8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	79ba      	ldrb	r2, [r7, #6]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d032      	beq.n	8002c7e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c18:	79ba      	ldrb	r2, [r7, #6]
 8002c1a:	4927      	ldr	r1, [pc, #156]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3314      	adds	r3, #20
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3315      	adds	r3, #21
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	491d      	ldr	r1, [pc, #116]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3315      	adds	r3, #21
 8002c50:	79ba      	ldrb	r2, [r7, #6]
 8002c52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	4918      	ldr	r1, [pc, #96]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3314      	adds	r3, #20
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c68:	79ba      	ldrb	r2, [r7, #6]
 8002c6a:	4913      	ldr	r1, [pc, #76]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3314      	adds	r3, #20
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c7c:	e014      	b.n	8002ca8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3315      	adds	r3, #21
 8002c8e:	79ba      	ldrb	r2, [r7, #6]
 8002c90:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c92:	79ba      	ldrb	r2, [r7, #6]
 8002c94:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <LinkTimerBefore+0xbc>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	701a      	strb	r2, [r3, #0]
  return;
 8002ca6:	bf00      	nop
}
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200001c8 	.word	0x200001c8
 8002cb8:	20000138 	.word	0x20000138

08002cbc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cc6:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <linkTimer+0x144>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d118      	bne.n	8002d02 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <linkTimer+0x144>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <linkTimer+0x148>)
 8002cd8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002cda:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <linkTimer+0x144>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	4949      	ldr	r1, [pc, #292]	; (8002e08 <linkTimer+0x14c>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3315      	adds	r3, #21
 8002cf0:	2206      	movs	r2, #6
 8002cf2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <linkTimer+0x150>)
 8002cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81fb      	strh	r3, [r7, #14]
 8002d00:	e078      	b.n	8002df4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002d02:	f000 f909 	bl	8002f18 <ReturnTimeElapsed>
 8002d06:	4603      	mov	r3, r0
 8002d08:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002d0a:	79fa      	ldrb	r2, [r7, #7]
 8002d0c:	493e      	ldr	r1, [pc, #248]	; (8002e08 <linkTimer+0x14c>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	3308      	adds	r3, #8
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	4419      	add	r1, r3
 8002d22:	4839      	ldr	r0, [pc, #228]	; (8002e08 <linkTimer+0x14c>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4403      	add	r3, r0
 8002d2e:	3308      	adds	r3, #8
 8002d30:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	4934      	ldr	r1, [pc, #208]	; (8002e08 <linkTimer+0x14c>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3308      	adds	r3, #8
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <linkTimer+0x144>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <linkTimer+0x14c>)
 8002d50:	460b      	mov	r3, r1
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	440b      	add	r3, r1
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d337      	bcc.n	8002dd4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <linkTimer+0x144>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d6a:	7b7a      	ldrb	r2, [r7, #13]
 8002d6c:	4926      	ldr	r1, [pc, #152]	; (8002e08 <linkTimer+0x14c>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3315      	adds	r3, #21
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d7e:	e013      	b.n	8002da8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d80:	7b7a      	ldrb	r2, [r7, #13]
 8002d82:	4921      	ldr	r1, [pc, #132]	; (8002e08 <linkTimer+0x14c>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3315      	adds	r3, #21
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002d94:	7b7a      	ldrb	r2, [r7, #13]
 8002d96:	491c      	ldr	r1, [pc, #112]	; (8002e08 <linkTimer+0x14c>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3315      	adds	r3, #21
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002da8:	7b3b      	ldrb	r3, [r7, #12]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d00b      	beq.n	8002dc6 <linkTimer+0x10a>
 8002dae:	7b3a      	ldrb	r2, [r7, #12]
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <linkTimer+0x14c>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d2dc      	bcs.n	8002d80 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002dc6:	7b7a      	ldrb	r2, [r7, #13]
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fecf 	bl	8002b70 <LinkTimerAfter>
 8002dd2:	e00f      	b.n	8002df4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <linkTimer+0x144>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff0c 	bl	8002bfc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <linkTimer+0x144>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <linkTimer+0x148>)
 8002dec:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <linkTimer+0x144>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002df4:	89fb      	ldrh	r3, [r7, #14]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200001c8 	.word	0x200001c8
 8002e04:	200001c9 	.word	0x200001c9
 8002e08:	20000138 	.word	0x20000138
 8002e0c:	200001cc 	.word	0x200001cc

08002e10 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	460a      	mov	r2, r1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <UnlinkTimer+0xf8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d111      	bne.n	8002e50 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <UnlinkTimer+0xf8>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <UnlinkTimer+0xfc>)
 8002e34:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <UnlinkTimer+0x100>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3315      	adds	r3, #21
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <UnlinkTimer+0xf8>)
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e03e      	b.n	8002ece <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	492f      	ldr	r1, [pc, #188]	; (8002f10 <UnlinkTimer+0x100>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3314      	adds	r3, #20
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	492a      	ldr	r1, [pc, #168]	; (8002f10 <UnlinkTimer+0x100>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3315      	adds	r3, #21
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e78:	79f9      	ldrb	r1, [r7, #7]
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	4824      	ldr	r0, [pc, #144]	; (8002f10 <UnlinkTimer+0x100>)
 8002e7e:	460b      	mov	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4403      	add	r3, r0
 8002e88:	3315      	adds	r3, #21
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2d8      	uxtb	r0, r3
 8002e8e:	4920      	ldr	r1, [pc, #128]	; (8002f10 <UnlinkTimer+0x100>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d013      	beq.n	8002ece <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002ea6:	79f9      	ldrb	r1, [r7, #7]
 8002ea8:	7bba      	ldrb	r2, [r7, #14]
 8002eaa:	4819      	ldr	r0, [pc, #100]	; (8002f10 <UnlinkTimer+0x100>)
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4403      	add	r3, r0
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2d8      	uxtb	r0, r3
 8002ebc:	4914      	ldr	r1, [pc, #80]	; (8002f10 <UnlinkTimer+0x100>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3314      	adds	r3, #20
 8002eca:	4602      	mov	r2, r0
 8002ecc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ece:	79fa      	ldrb	r2, [r7, #7]
 8002ed0:	490f      	ldr	r1, [pc, #60]	; (8002f10 <UnlinkTimer+0x100>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	330c      	adds	r3, #12
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <UnlinkTimer+0xf8>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d107      	bne.n	8002efc <UnlinkTimer+0xec>
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <UnlinkTimer+0x104>)
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  return;
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
}
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	200001c8 	.word	0x200001c8
 8002f0c:	200001c9 	.word	0x200001c9
 8002f10:	20000138 	.word	0x20000138
 8002f14:	200001cc 	.word	0x200001cc

08002f18 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <ReturnTimeElapsed+0x70>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d026      	beq.n	8002f76 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f28:	f7ff fe02 	bl	8002b30 <ReadRtcSsrValue>
 8002f2c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <ReturnTimeElapsed+0x70>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d805      	bhi.n	8002f44 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <ReturnTimeElapsed+0x70>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	e00a      	b.n	8002f5a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <ReturnTimeElapsed+0x74>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <ReturnTimeElapsed+0x70>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <ReturnTimeElapsed+0x78>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <ReturnTimeElapsed+0x7c>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	40d3      	lsrs	r3, r2
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	e001      	b.n	8002f7a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	b29b      	uxth	r3, r3
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001cc 	.word	0x200001cc
 8002f8c:	20000aa2 	.word	0x20000aa2
 8002f90:	20000aa1 	.word	0x20000aa1
 8002f94:	20000aa0 	.word	0x20000aa0

08002f98 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002fa8:	f7ff fdc2 	bl	8002b30 <ReadRtcSsrValue>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <RestartWakeupCounter+0xa8>)
 8002fb0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	f004 f853 	bl	800705e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002fb8:	e03e      	b.n	8003038 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d803      	bhi.n	8002fc8 <RestartWakeupCounter+0x30>
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <RestartWakeupCounter+0xac>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d002      	beq.n	8002fce <RestartWakeupCounter+0x36>
      Value -= 1;
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002fce:	bf00      	nop
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <RestartWakeupCounter+0xb0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f7      	beq.n	8002fd0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <RestartWakeupCounter+0xb0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <RestartWakeupCounter+0xb0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ff4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <RestartWakeupCounter+0xb4>)
 8002ff8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ffc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002ffe:	2003      	movs	r0, #3
 8003000:	f004 f83b 	bl	800707a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <RestartWakeupCounter+0xb8>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <RestartWakeupCounter+0xb8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003014:	f7ff fd8c 	bl	8002b30 <ReadRtcSsrValue>
 8003018:	4602      	mov	r2, r0
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <RestartWakeupCounter+0xa8>)
 800301c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <RestartWakeupCounter+0xb0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <RestartWakeupCounter+0xb0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003030:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003032:	f3af 8000 	nop.w
  return ;
 8003036:	bf00      	nop
}
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200001cc 	.word	0x200001cc
 8003044:	20000aa0 	.word	0x20000aa0
 8003048:	20000a9c 	.word	0x20000a9c
 800304c:	58000800 	.word	0x58000800
 8003050:	40002800 	.word	0x40002800

08003054 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <RescheduleTimerList+0x124>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d108      	bne.n	800307a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003068:	bf00      	nop
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <RescheduleTimerList+0x128>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f7      	bne.n	800306a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800307a:	4b40      	ldr	r3, [pc, #256]	; (800317c <RescheduleTimerList+0x128>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b3e      	ldr	r3, [pc, #248]	; (800317c <RescheduleTimerList+0x128>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <RescheduleTimerList+0x12c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	493b      	ldr	r1, [pc, #236]	; (8003184 <RescheduleTimerList+0x130>)
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3308      	adds	r3, #8
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80030a8:	f7ff ff36 	bl	8002f18 <ReturnTimeElapsed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d205      	bcs.n	80030c4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030bc:	4b32      	ldr	r3, [pc, #200]	; (8003188 <RescheduleTimerList+0x134>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e04d      	b.n	8003160 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	4a31      	ldr	r2, [pc, #196]	; (800318c <RescheduleTimerList+0x138>)
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	b292      	uxth	r2, r2
 80030cc:	4413      	add	r3, r2
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d906      	bls.n	80030e4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <RescheduleTimerList+0x138>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <RescheduleTimerList+0x134>)
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e03d      	b.n	8003160 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <RescheduleTimerList+0x134>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030f4:	e034      	b.n	8003160 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	4922      	ldr	r1, [pc, #136]	; (8003184 <RescheduleTimerList+0x130>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	3308      	adds	r3, #8
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	429a      	cmp	r2, r3
 800310c:	d20a      	bcs.n	8003124 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	491c      	ldr	r1, [pc, #112]	; (8003184 <RescheduleTimerList+0x130>)
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	3308      	adds	r3, #8
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e013      	b.n	800314c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	4917      	ldr	r1, [pc, #92]	; (8003184 <RescheduleTimerList+0x130>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3308      	adds	r3, #8
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	1ac9      	subs	r1, r1, r3
 800313c:	4811      	ldr	r0, [pc, #68]	; (8003184 <RescheduleTimerList+0x130>)
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4403      	add	r3, r0
 8003148:	3308      	adds	r3, #8
 800314a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	490d      	ldr	r1, [pc, #52]	; (8003184 <RescheduleTimerList+0x130>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3315      	adds	r3, #21
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d1c7      	bne.n	80030f6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003166:	89bb      	ldrh	r3, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff15 	bl	8002f98 <RestartWakeupCounter>

  return ;
 800316e:	bf00      	nop
}
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40002800 	.word	0x40002800
 800317c:	20000a9c 	.word	0x20000a9c
 8003180:	200001c8 	.word	0x200001c8
 8003184:	20000138 	.word	0x20000138
 8003188:	200001d0 	.word	0x200001d0
 800318c:	20000aa4 	.word	0x20000aa4

08003190 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800319c:	4a61      	ldr	r2, [pc, #388]	; (8003324 <HW_TS_Init+0x194>)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HW_TS_Init+0x194>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	22ca      	movs	r2, #202	; 0xca
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HW_TS_Init+0x194>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2253      	movs	r2, #83	; 0x53
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031b6:	4b5c      	ldr	r3, [pc, #368]	; (8003328 <HW_TS_Init+0x198>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HW_TS_Init+0x198>)
 80031bc:	f043 0320 	orr.w	r3, r3, #32
 80031c0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80031c2:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HW_TS_Init+0x198>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f1c3 0304 	rsb	r3, r3, #4
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b55      	ldr	r3, [pc, #340]	; (800332c <HW_TS_Init+0x19c>)
 80031d6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HW_TS_Init+0x198>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031e0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80031e4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	40d3      	lsrs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HW_TS_Init+0x1a0>)
 8003200:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HW_TS_Init+0x198>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800320c:	b29b      	uxth	r3, r3
 800320e:	3301      	adds	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	4b48      	ldr	r3, [pc, #288]	; (8003334 <HW_TS_Init+0x1a4>)
 8003214:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HW_TS_Init+0x1a4>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <HW_TS_Init+0x1a0>)
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <HW_TS_Init+0x19c>)
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	40d3      	lsrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003236:	4293      	cmp	r3, r2
 8003238:	d904      	bls.n	8003244 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HW_TS_Init+0x1a8>)
 800323c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	e003      	b.n	800324c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <HW_TS_Init+0x1a8>)
 800324a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800324c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003250:	f7ff fc5c 	bl	8002b0c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003254:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003258:	f7ff fc44 	bl	8002ae4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d143      	bne.n	80032ea <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003262:	4b36      	ldr	r3, [pc, #216]	; (800333c <HW_TS_Init+0x1ac>)
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HW_TS_Init+0x1b0>)
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]
 8003274:	e00c      	b.n	8003290 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003276:	7dfa      	ldrb	r2, [r7, #23]
 8003278:	4932      	ldr	r1, [pc, #200]	; (8003344 <HW_TS_Init+0x1b4>)
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	330c      	adds	r3, #12
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	3301      	adds	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d9ef      	bls.n	8003276 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <HW_TS_Init+0x1b8>)
 8003298:	2206      	movs	r2, #6
 800329a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HW_TS_Init+0x194>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HW_TS_Init+0x194>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HW_TS_Init+0x194>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HW_TS_Init+0x194>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <HW_TS_Init+0x1bc>)
 80032c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032cc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80032ce:	2003      	movs	r0, #3
 80032d0:	f003 fed3 	bl	800707a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HW_TS_Init+0x194>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HW_TS_Init+0x194>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	e00a      	b.n	8003300 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HW_TS_Init+0x194>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80032fa:	2003      	movs	r0, #3
 80032fc:	f003 feaf 	bl	800705e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HW_TS_Init+0x194>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800330a:	2200      	movs	r2, #0
 800330c:	2106      	movs	r1, #6
 800330e:	2003      	movs	r0, #3
 8003310:	f003 fe6b 	bl	8006fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003314:	2003      	movs	r0, #3
 8003316:	f003 fe82 	bl	800701e <HAL_NVIC_EnableIRQ>

  return;
 800331a:	bf00      	nop
}
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000a9c 	.word	0x20000a9c
 8003328:	40002800 	.word	0x40002800
 800332c:	20000aa0 	.word	0x20000aa0
 8003330:	20000aa1 	.word	0x20000aa1
 8003334:	20000aa2 	.word	0x20000aa2
 8003338:	20000aa4 	.word	0x20000aa4
 800333c:	200001d0 	.word	0x200001d0
 8003340:	200001cc 	.word	0x200001cc
 8003344:	20000138 	.word	0x20000138
 8003348:	200001c8 	.word	0x200001c8
 800334c:	58000800 	.word	0x58000800

08003350 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003350:	b480      	push	{r7}
 8003352:	b08b      	sub	sp, #44	; 0x2c
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003366:	f3ef 8310 	mrs	r3, PRIMASK
 800336a:	61fb      	str	r3, [r7, #28]
  return(result);
 800336c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800336e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003372:	e004      	b.n	800337e <HW_TS_Create+0x2e>
  {
    loop++;
 8003374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003378:	3301      	adds	r3, #1
 800337a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800337e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003382:	2b05      	cmp	r3, #5
 8003384:	d80c      	bhi.n	80033a0 <HW_TS_Create+0x50>
 8003386:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800338a:	492b      	ldr	r1, [pc, #172]	; (8003438 <HW_TS_Create+0xe8>)
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	330c      	adds	r3, #12
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e9      	bne.n	8003374 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	d037      	beq.n	8003418 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80033a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033ac:	4922      	ldr	r1, [pc, #136]	; (8003438 <HW_TS_Create+0xe8>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	330c      	adds	r3, #12
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80033c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033cc:	491a      	ldr	r1, [pc, #104]	; (8003438 <HW_TS_Create+0xe8>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3310      	adds	r3, #16
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80033de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033e2:	4915      	ldr	r1, [pc, #84]	; (8003438 <HW_TS_Create+0xe8>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	330d      	adds	r3, #13
 80033f0:	79fa      	ldrb	r2, [r7, #7]
 80033f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80033f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033f8:	490f      	ldr	r1, [pc, #60]	; (8003438 <HW_TS_Create+0xe8>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800340e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003416:	e007      	b.n	8003428 <HW_TS_Create+0xd8>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800342c:	4618      	mov	r0, r3
 800342e:	372c      	adds	r7, #44	; 0x2c
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	20000138 	.word	0x20000138

0800343c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003446:	f3ef 8310 	mrs	r3, PRIMASK
 800344a:	60fb      	str	r3, [r7, #12]
  return(result);
 800344c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800344e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003452:	2003      	movs	r0, #3
 8003454:	f003 fdf1 	bl	800703a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HW_TS_Stop+0xfc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	22ca      	movs	r2, #202	; 0xca
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
 8003462:	4b35      	ldr	r3, [pc, #212]	; (8003538 <HW_TS_Stop+0xfc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2253      	movs	r2, #83	; 0x53
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800346c:	79fa      	ldrb	r2, [r7, #7]
 800346e:	4933      	ldr	r1, [pc, #204]	; (800353c <HW_TS_Stop+0x100>)
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	330c      	adds	r3, #12
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d148      	bne.n	8003516 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fcc1 	bl	8002e10 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800348e:	4b2c      	ldr	r3, [pc, #176]	; (8003540 <HW_TS_Stop+0x104>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	2b06      	cmp	r3, #6
 8003498:	d135      	bne.n	8003506 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HW_TS_Stop+0x108>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d108      	bne.n	80034ba <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80034a8:	bf00      	nop
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HW_TS_Stop+0xfc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f7      	bne.n	80034aa <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HW_TS_Stop+0xfc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HW_TS_Stop+0xfc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80034ce:	bf00      	nop
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HW_TS_Stop+0xfc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f7      	beq.n	80034d0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HW_TS_Stop+0xfc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HW_TS_Stop+0xfc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034f4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HW_TS_Stop+0x10c>)
 80034f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034fc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80034fe:	2003      	movs	r0, #3
 8003500:	f003 fdbb 	bl	800707a <HAL_NVIC_ClearPendingIRQ>
 8003504:	e007      	b.n	8003516 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <HW_TS_Stop+0x110>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	7cfa      	ldrb	r2, [r7, #19]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003512:	f7ff fd9f 	bl	8003054 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HW_TS_Stop+0xfc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003520:	2003      	movs	r0, #3
 8003522:	f003 fd7c 	bl	800701e <HAL_NVIC_EnableIRQ>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003530:	bf00      	nop
}
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000a9c 	.word	0x20000a9c
 800353c:	20000138 	.word	0x20000138
 8003540:	200001c8 	.word	0x200001c8
 8003544:	40002800 	.word	0x40002800
 8003548:	58000800 	.word	0x58000800
 800354c:	200001c9 	.word	0x200001c9

08003550 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800355c:	79fa      	ldrb	r2, [r7, #7]
 800355e:	493b      	ldr	r1, [pc, #236]	; (800364c <HW_TS_Start+0xfc>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	330c      	adds	r3, #12
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d103      	bne.n	800357c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff60 	bl	800343c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	60fb      	str	r3, [r7, #12]
  return(result);
 8003582:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003586:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003588:	2003      	movs	r0, #3
 800358a:	f003 fd56 	bl	800703a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HW_TS_Start+0x100>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	22ca      	movs	r2, #202	; 0xca
 8003596:	625a      	str	r2, [r3, #36]	; 0x24
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HW_TS_Start+0x100>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2253      	movs	r2, #83	; 0x53
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80035a2:	79fa      	ldrb	r2, [r7, #7]
 80035a4:	4929      	ldr	r1, [pc, #164]	; (800364c <HW_TS_Start+0xfc>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	330c      	adds	r3, #12
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80035b6:	79fa      	ldrb	r2, [r7, #7]
 80035b8:	4924      	ldr	r1, [pc, #144]	; (800364c <HW_TS_Start+0xfc>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	3308      	adds	r3, #8
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80035ca:	79fa      	ldrb	r2, [r7, #7]
 80035cc:	491f      	ldr	r1, [pc, #124]	; (800364c <HW_TS_Start+0xfc>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	3304      	adds	r3, #4
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fb6b 	bl	8002cbc <linkTimer>
 80035e6:	4603      	mov	r3, r0
 80035e8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HW_TS_Start+0x104>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HW_TS_Start+0x108>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	7c7a      	ldrb	r2, [r7, #17]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d002      	beq.n	8003602 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80035fc:	f7ff fd2a 	bl	8003054 <RescheduleTimerList>
 8003600:	e013      	b.n	800362a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003602:	79fa      	ldrb	r2, [r7, #7]
 8003604:	4911      	ldr	r1, [pc, #68]	; (800364c <HW_TS_Start+0xfc>)
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	3308      	adds	r3, #8
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	8a7b      	ldrh	r3, [r7, #18]
 8003616:	79fa      	ldrb	r2, [r7, #7]
 8003618:	1ac9      	subs	r1, r1, r3
 800361a:	480c      	ldr	r0, [pc, #48]	; (800364c <HW_TS_Start+0xfc>)
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4403      	add	r3, r0
 8003626:	3308      	adds	r3, #8
 8003628:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HW_TS_Start+0x100>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	22ff      	movs	r2, #255	; 0xff
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003634:	2003      	movs	r0, #3
 8003636:	f003 fcf2 	bl	800701e <HAL_NVIC_EnableIRQ>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003644:	bf00      	nop
}
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000138 	.word	0x20000138
 8003650:	20000a9c 	.word	0x20000a9c
 8003654:	200001c8 	.word	0x200001c8
 8003658:	200001c9 	.word	0x200001c9

0800365c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	60bb      	str	r3, [r7, #8]
  return(result);
 8003668:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800366a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800366c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d112      	bne.n	80036a2 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 8003682:	f7ff fc49 	bl	8002f18 <ReturnTimeElapsed>
 8003686:	4603      	mov	r3, r0
 8003688:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 800368a:	89fa      	ldrh	r2, [r7, #14]
 800368c:	89bb      	ldrh	r3, [r7, #12]
 800368e:	429a      	cmp	r2, r3
 8003690:	d904      	bls.n	800369c <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 8003692:	89fa      	ldrh	r2, [r7, #14]
 8003694:	89bb      	ldrh	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	82fb      	strh	r3, [r7, #22]
 800369a:	e005      	b.n	80036a8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	82fb      	strh	r3, [r7, #22]
 80036a0:	e002      	b.n	80036a8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80036a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a6:	82fb      	strh	r3, [r7, #22]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80036b2:	8afb      	ldrh	r3, [r7, #22]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40002800 	.word	0x40002800

080036c0 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	4603      	mov	r3, r0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	4613      	mov	r3, r2
 80036d0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d000      	beq.n	80036da <HW_UART_Receive_IT+0x1a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80036d8:	e00c      	b.n	80036f4 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(huart1, USART1);
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HW_UART_Receive_IT+0x3c>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HW_UART_Receive_IT+0x40>)
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HW_UART_Receive_IT+0x44>)
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	89bb      	ldrh	r3, [r7, #12]
 80036e8:	461a      	mov	r2, r3
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4804      	ldr	r0, [pc, #16]	; (8003700 <HW_UART_Receive_IT+0x40>)
 80036ee:	f009 f9f3 	bl	800cad8 <HAL_UART_Receive_IT>
            break;
 80036f2:	bf00      	nop
    }

    return;
 80036f4:	bf00      	nop
}
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20027f44 	.word	0x20027f44
 8003700:	200285b0 	.word	0x200285b0
 8003704:	40013800 	.word	0x40013800

08003708 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	4613      	mov	r3, r2
 8003718:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d000      	beq.n	8003722 <HW_UART_Transmit_IT+0x1a>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003720:	e00c      	b.n	800373c <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(huart1, USART1);
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HW_UART_Transmit_IT+0x3c>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HW_UART_Transmit_IT+0x40>)
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <HW_UART_Transmit_IT+0x44>)
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	89bb      	ldrh	r3, [r7, #12]
 8003730:	461a      	mov	r2, r3
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4804      	ldr	r0, [pc, #16]	; (8003748 <HW_UART_Transmit_IT+0x40>)
 8003736:	f009 f94b 	bl	800c9d0 <HAL_UART_Transmit_IT>
            break;
 800373a:	bf00      	nop
    }

    return;
 800373c:	bf00      	nop
}
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20027f48 	.word	0x20027f48
 8003748:	200285b0 	.word	0x200285b0
 800374c:	40013800 	.word	0x40013800

08003750 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_UART_RxCpltCallback+0x30>)
 8003760:	429a      	cmp	r2, r3
 8003762:	d000      	beq.n	8003766 <HAL_UART_RxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003764:	e007      	b.n	8003776 <HAL_UART_RxCpltCallback+0x26>
            if(HW_huart1RxCb)
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_UART_RxCpltCallback+0x34>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_RxCpltCallback+0x24>
                HW_huart1RxCb();
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_UART_RxCpltCallback+0x34>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4798      	blx	r3
            break;
 8003774:	bf00      	nop
    }

    return;
 8003776:	bf00      	nop
}
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40013800 	.word	0x40013800
 8003784:	20027f44 	.word	0x20027f44

08003788 <LL_AHB2_GRP1_EnableClock>:
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037ac:	68fb      	ldr	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <MX_I2C1_Init+0x74>)
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <MX_I2C1_Init+0x78>)
 80037f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <MX_I2C1_Init+0x74>)
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <MX_I2C1_Init+0x7c>)
 80037fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_I2C1_Init+0x74>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <MX_I2C1_Init+0x74>)
 8003804:	2201      	movs	r2, #1
 8003806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MX_I2C1_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <MX_I2C1_Init+0x74>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <MX_I2C1_Init+0x74>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <MX_I2C1_Init+0x74>)
 800381c:	2200      	movs	r2, #0
 800381e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <MX_I2C1_Init+0x74>)
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003826:	480e      	ldr	r0, [pc, #56]	; (8003860 <MX_I2C1_Init+0x74>)
 8003828:	f004 f906 	bl	8007a38 <HAL_I2C_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003832:	f000 fcef 	bl	8004214 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003836:	2100      	movs	r1, #0
 8003838:	4809      	ldr	r0, [pc, #36]	; (8003860 <MX_I2C1_Init+0x74>)
 800383a:	f005 fffe 	bl	800983a <HAL_I2CEx_ConfigAnalogFilter>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003844:	f000 fce6 	bl	8004214 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003848:	2100      	movs	r1, #0
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_I2C1_Init+0x74>)
 800384c:	f006 f840 	bl	80098d0 <HAL_I2CEx_ConfigDigitalFilter>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003856:	f000 fcdd 	bl	8004214 <Error_Handler>
  }

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20027f4c 	.word	0x20027f4c
 8003864:	40005400 	.word	0x40005400
 8003868:	00e27cae 	.word	0x00e27cae

0800386c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_I2C_MspInit+0x6c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d120      	bne.n	80038d0 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2001      	movs	r0, #1
 8003890:	f7ff ff7a 	bl	8003788 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003894:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003898:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800389a:	2312      	movs	r3, #18
 800389c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038a6:	2304      	movs	r3, #4
 80038a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	4619      	mov	r1, r3
 80038b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b4:	f003 ff20 	bl	80076f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038b8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80038bc:	f7ff ff7d 	bl	80037ba <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2105      	movs	r1, #5
 80038c4:	201e      	movs	r0, #30
 80038c6:	f003 fb90 	bl	8006fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80038ca:	201e      	movs	r0, #30
 80038cc:	f003 fba7 	bl	800701e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40005400 	.word	0x40005400

080038dc <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 80038e4:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <InertialSensingTask+0xec>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 80038ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80038ee:	2120      	movs	r1, #32
 80038f0:	204a      	movs	r0, #74	; 0x4a
 80038f2:	f7fd fff9 	bl	80018e8 <IMU_begin>

	uint32_t evt = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	2100      	movs	r1, #0
 8003900:	2001      	movs	r0, #1
 8003902:	f00b f93d 	bl	800eb80 <osThreadFlagsWait>
		//evt = 0x00000001U;

	//			// configure IMU
		osDelay(500);
 8003906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800390a:	f00b f9cd 	bl	800eca8 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 800390e:	2064      	movs	r0, #100	; 0x64
 8003910:	f7fe fae6 	bl	8001ee0 <IMU_enableRotationVector>
		osDelay(100);
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	f00b f9c7 	bl	800eca8 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <InertialSensingTask+0xf0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <InertialSensingTask+0xf4>)
 8003920:	4619      	mov	r1, r3
 8003922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003926:	f7fe fae9 	bl	8001efc <IMU_enableActivityClassifier>

		// give some time for things to buffer
		osDelay(400);
 800392a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800392e:	f00b f9bb 	bl	800eca8 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003932:	2064      	movs	r0, #100	; 0x64
 8003934:	f00b f9b8 	bl	800eca8 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003938:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <InertialSensingTask+0xf8>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	2364      	movs	r3, #100	; 0x64
 800393e:	2200      	movs	r2, #0
 8003940:	4925      	ldr	r1, [pc, #148]	; (80039d8 <InertialSensingTask+0xfc>)
 8003942:	f00b fd7d 	bl	800f440 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003946:	4b25      	ldr	r3, [pc, #148]	; (80039dc <InertialSensingTask+0x100>)
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	2200      	movs	r2, #0
 800394e:	4924      	ldr	r1, [pc, #144]	; (80039e0 <InertialSensingTask+0x104>)
 8003950:	f00b fd76 	bl	800f440 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <InertialSensingTask+0x108>)
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	2200      	movs	r2, #0
 800395c:	491e      	ldr	r1, [pc, #120]	; (80039d8 <InertialSensingTask+0xfc>)
 800395e:	f00b fcfb 	bl	800f358 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003962:	2120      	movs	r1, #32
 8003964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003968:	f004 f836 	bl	80079d8 <HAL_GPIO_ReadPin>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <InertialSensingTask+0x9a>
 8003972:	f7fd fff1 	bl	8001958 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	2002      	movs	r0, #2
 800397c:	f00b f900 	bl	800eb80 <osThreadFlagsWait>
 8003980:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0d2      	beq.n	8003932 <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 800398c:	f7fe fa46 	bl	8001e1c <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003994:	f00b f988 	bl	800eca8 <osDelay>

				inertialEnabled = 0;
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <InertialSensingTask+0xec>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <InertialSensingTask+0x108>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f00b fdf0 	bl	800f588 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <InertialSensingTask+0x100>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00b fdeb 	bl	800f588 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <InertialSensingTask+0xf8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f00b fde6 	bl	800f588 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 80039bc:	200e      	movs	r0, #14
 80039be:	f00b f88f 	bl	800eae0 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 80039c2:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80039c4:	e799      	b.n	80038fa <InertialSensingTask+0x1e>
 80039c6:	bf00      	nop
 80039c8:	20000aa6 	.word	0x20000aa6
 80039cc:	20000068 	.word	0x20000068
 80039d0:	20027fdc 	.word	0x20027fdc
 80039d4:	20027974 	.word	0x20027974
 80039d8:	20027fa0 	.word	0x20027fa0
 80039dc:	2002795c 	.word	0x2002795c
 80039e0:	20027fb8 	.word	0x20027fb8
 80039e4:	20027968 	.word	0x20027968

080039e8 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d105      	bne.n	8003a04 <HAL_GPIO_EXTI_Callback+0x1c>
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_GPIO_EXTI_Callback+0x24>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a00:	f7fd ffaa 	bl	8001958 <IMU_dataAvailable>
	}
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000aa6 	.word	0x20000aa6

08003a10 <_Input>:
//#include "UART_Print.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a1c:	480b      	ldr	r0, [pc, #44]	; (8003a4c <_Input+0x3c>)
 8003a1e:	f7fe fd15 	bl	800244c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a22:	2101      	movs	r1, #1
 8003a24:	480a      	ldr	r0, [pc, #40]	; (8003a50 <_Input+0x40>)
 8003a26:	f000 fde9 	bl	80045fc <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <_Input+0x40>)
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <_Input+0x3c>)
 8003a2e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <_Input+0x40>)
 8003a36:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20028008 	.word	0x20028008
 8003a50:	20028090 	.word	0x20028090

08003a54 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	2100      	movs	r1, #0
 8003a66:	2001      	movs	r0, #1
 8003a68:	f00b f88a 	bl	800eb80 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003a6c:	4818      	ldr	r0, [pc, #96]	; (8003ad0 <PulseHandlerTask+0x7c>)
 8003a6e:	f007 fea3 	bl	800b7b8 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003a72:	4818      	ldr	r0, [pc, #96]	; (8003ad4 <PulseHandlerTask+0x80>)
 8003a74:	f003 f8d2 	bl	8006c1c <HAL_COMP_Start>
		_Input(&input0, 0);
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4817      	ldr	r0, [pc, #92]	; (8003ad8 <PulseHandlerTask+0x84>)
 8003a7c:	f7ff ffc8 	bl	8003a10 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <PulseHandlerTask+0x88>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4915      	ldr	r1, [pc, #84]	; (8003ae0 <PulseHandlerTask+0x8c>)
 8003a8c:	f00b fcd8 	bl	800f440 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <PulseHandlerTask+0x84>)
 8003a92:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003a96:	4912      	ldr	r1, [pc, #72]	; (8003ae0 <PulseHandlerTask+0x8c>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fde3 	bl	8004664 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f00b f86c 	bl	800eb80 <osThreadFlagsWait>
 8003aa8:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0e5      	beq.n	8003a80 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003ab4:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <PulseHandlerTask+0x80>)
 8003ab6:	f003 f8fb 	bl	8006cb0 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <PulseHandlerTask+0x7c>)
 8003abc:	f007 fea6 	bl	800b80c <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <PulseHandlerTask+0x88>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f00b fd5f 	bl	800f588 <osMessageQueueReset>
				break;
 8003aca:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003acc:	e7c8      	b.n	8003a60 <PulseHandlerTask+0xc>
 8003ace:	bf00      	nop
 8003ad0:	20028570 	.word	0x20028570
 8003ad4:	20027db4 	.word	0x20027db4
 8003ad8:	20027978 	.word	0x20027978
 8003adc:	20027868 	.word	0x20027868
 8003ae0:	20027fe8 	.word	0x20027fe8

08003ae4 <enqueue_pulse>:
	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
}


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003afa:	723b      	strb	r3, [r7, #8]
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	817b      	strh	r3, [r7, #10]
 8003b00:	883b      	ldrh	r3, [r7, #0]
 8003b02:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <enqueue_pulse+0x48>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	f107 0108 	add.w	r1, r7, #8
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f00b fc22 	bl	800f358 <osMessageQueuePut>
	count = osMessageQueueGetCount(pulseQueueHandle);
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <enqueue_pulse+0x48>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00b fd03 	bl	800f524 <osMessageQueueGetCount>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <enqueue_pulse+0x4c>)
 8003b22:	601a      	str	r2, [r3, #0]
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20027868 	.word	0x20027868
 8003b30:	20000aa8 	.word	0x20000aa8

08003b34 <InterProcessorTask>:
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};

struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00b fac1 	bl	800f0d0 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003b4e:	bf00      	nop
 8003b50:	2364      	movs	r3, #100	; 0x64
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2306      	movs	r3, #6
 8003b56:	4a64      	ldr	r2, [pc, #400]	; (8003ce8 <InterProcessorTask+0x1b4>)
 8003b58:	21e6      	movs	r1, #230	; 0xe6
 8003b5a:	4864      	ldr	r0, [pc, #400]	; (8003cec <InterProcessorTask+0x1b8>)
 8003b5c:	f003 fffc 	bl	8007b58 <HAL_I2C_Master_Transmit>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f4      	bne.n	8003b50 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003b66:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f00b fb16 	bl	800f19c <osSemaphoreRelease>

	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b70:	f04f 32ff 	mov.w	r2, #4294967295
 8003b74:	2100      	movs	r1, #0
 8003b76:	2001      	movs	r0, #1
 8003b78:	f00b f802 	bl	800eb80 <osThreadFlagsWait>
 8003b7c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f3      	beq.n	8003b70 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <InterProcessorTask+0x1bc>)
 8003b8a:	4a5a      	ldr	r2, [pc, #360]	; (8003cf4 <InterProcessorTask+0x1c0>)
 8003b8c:	6811      	ldr	r1, [r2, #0]
 8003b8e:	6019      	str	r1, [r3, #0]
 8003b90:	8892      	ldrh	r2, [r2, #4]
 8003b92:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00b fa97 	bl	800f0d0 <osSemaphoreAcquire>
			while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003ba2:	bf00      	nop
 8003ba4:	2364      	movs	r3, #100	; 0x64
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2306      	movs	r3, #6
 8003baa:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <InterProcessorTask+0x1bc>)
 8003bac:	21e6      	movs	r1, #230	; 0xe6
 8003bae:	484f      	ldr	r0, [pc, #316]	; (8003cec <InterProcessorTask+0x1b8>)
 8003bb0:	f003 ffd2 	bl	8007b58 <HAL_I2C_Master_Transmit>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f4      	bne.n	8003ba4 <InterProcessorTask+0x70>
			osDelay(100);
 8003bba:	2064      	movs	r0, #100	; 0x64
 8003bbc:	f00b f874 	bl	800eca8 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003bc0:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00b fae9 	bl	800f19c <osSemaphoreRelease>
			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003bca:	f04f 32ff 	mov.w	r2, #4294967295
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2006      	movs	r0, #6
 8003bd2:	f00a ffd5 	bl	800eb80 <osThreadFlagsWait>
 8003bd6:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d05b      	beq.n	8003c9a <InterProcessorTask+0x166>
 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bea:	4618      	mov	r0, r3
 8003bec:	f00b fa70 	bl	800f0d0 <osSemaphoreAcquire>
// 					taskENTER_CRITICAL();
 					// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003bf0:	bf00      	nop
 8003bf2:	2364      	movs	r3, #100	; 0x64
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2306      	movs	r3, #6
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <InterProcessorTask+0x1bc>)
 8003bfa:	21e6      	movs	r1, #230	; 0xe6
 8003bfc:	483b      	ldr	r0, [pc, #236]	; (8003cec <InterProcessorTask+0x1b8>)
 8003bfe:	f003 ffab 	bl	8007b58 <HAL_I2C_Master_Transmit>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f4      	bne.n	8003bf2 <InterProcessorTask+0xbe>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003c08:	2008      	movs	r0, #8
 8003c0a:	f00a ff69 	bl	800eae0 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003c0e:	bf00      	nop
 8003c10:	2358      	movs	r3, #88	; 0x58
 8003c12:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <InterProcessorTask+0x1c4>)
 8003c14:	21e6      	movs	r1, #230	; 0xe6
 8003c16:	4835      	ldr	r0, [pc, #212]	; (8003cec <InterProcessorTask+0x1b8>)
 8003c18:	f004 f988 	bl	8007f2c <HAL_I2C_Master_Receive_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f6      	bne.n	8003c10 <InterProcessorTask+0xdc>
// 						osDelay(100);
// 						osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	2100      	movs	r1, #0
 8003c28:	200a      	movs	r0, #10
 8003c2a:	f00a ffa9 	bl	800eb80 <osThreadFlagsWait>
 8003c2e:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f00b fab1 	bl	800f19c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14d      	bne.n	8003ce0 <InterProcessorTask+0x1ac>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <InterProcessorTask+0x1c4>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <InterProcessorTask+0x1c8>)
 8003c4a:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <InterProcessorTask+0x1c4>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <InterProcessorTask+0x1c8>)
 8003c52:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	e01c      	b.n	8003c94 <InterProcessorTask+0x160>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <InterProcessorTask+0x1c4>)
 8003c60:	4413      	add	r3, r2
 8003c62:	2208      	movs	r2, #8
 8003c64:	4619      	mov	r1, r3
 8003c66:	4825      	ldr	r0, [pc, #148]	; (8003cfc <InterProcessorTask+0x1c8>)
 8003c68:	f012 fa36 	bl	80160d8 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3305      	adds	r3, #5
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <InterProcessorTask+0x1c4>)
 8003c74:	4413      	add	r3, r2
 8003c76:	2208      	movs	r2, #8
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4821      	ldr	r0, [pc, #132]	; (8003d00 <InterProcessorTask+0x1cc>)
 8003c7c:	f012 fa2c 	bl	80160d8 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <InterProcessorTask+0x1d0>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	2200      	movs	r2, #0
 8003c88:	491c      	ldr	r1, [pc, #112]	; (8003cfc <InterProcessorTask+0x1c8>)
 8003c8a:	f00b fb65 	bl	800f358 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	dddf      	ble.n	8003c5a <InterProcessorTask+0x126>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d092      	beq.n	8003bca <InterProcessorTask+0x96>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00b fa0f 	bl	800f0d0 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003cb2:	bf00      	nop
 8003cb4:	2364      	movs	r3, #100	; 0x64
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2306      	movs	r3, #6
 8003cba:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <InterProcessorTask+0x1b4>)
 8003cbc:	21e6      	movs	r1, #230	; 0xe6
 8003cbe:	480b      	ldr	r0, [pc, #44]	; (8003cec <InterProcessorTask+0x1b8>)
 8003cc0:	f003 ff4a 	bl	8007b58 <HAL_I2C_Master_Transmit>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f4      	bne.n	8003cb4 <InterProcessorTask+0x180>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <InterProcessorTask+0x1b0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f00b fa64 	bl	800f19c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <InterProcessorTask+0x1d0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f00b fc55 	bl	800f588 <osMessageQueueReset>

					break;
 8003cde:	e000      	b.n	8003ce2 <InterProcessorTask+0x1ae>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003ce0:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ce2:	e745      	b.n	8003b70 <InterProcessorTask+0x3c>
 8003ce4:	20027964 	.word	0x20027964
 8003ce8:	080178d4 	.word	0x080178d4
 8003cec:	20027f4c 	.word	0x20027f4c
 8003cf0:	200283b8 	.word	0x200283b8
 8003cf4:	20027870 	.word	0x20027870
 8003cf8:	20028360 	.word	0x20028360
 8003cfc:	200283c0 	.word	0x200283c0
 8003d00:	200283c8 	.word	0x200283c8
 8003d04:	20027970 	.word	0x20027970

08003d08 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2110      	movs	r1, #16
 8003d16:	4618      	mov	r0, r3
 8003d18:	f00a fe80 	bl	800ea1c <osThreadFlagsSet>
	test_1 = 1;
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20027d9c 	.word	0x20027d9c
 8003d30:	20000aac 	.word	0x20000aac

08003d34 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2108      	movs	r1, #8
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00a fe6a 	bl	800ea1c <osThreadFlagsSet>
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20027d9c 	.word	0x20027d9c

08003d54 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af04      	add	r7, sp, #16
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]

	deviceAddress = ADDR << 1;
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <setup_LP5523+0xcc>)
 8003d66:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <setup_LP5523+0xd0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	4618      	mov	r0, r3
 8003d72:	f00b f9ad 	bl	800f0d0 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <setup_LP5523+0xd4>)
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <setup_LP5523+0xcc>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b299      	uxth	r1, r3
 8003d82:	2364      	movs	r3, #100	; 0x64
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	2301      	movs	r3, #1
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <setup_LP5523+0xd4>)
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	2200      	movs	r2, #0
 8003d92:	4826      	ldr	r0, [pc, #152]	; (8003e2c <setup_LP5523+0xd8>)
 8003d94:	f004 f93a 	bl	800800c <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <setup_LP5523+0xd4>)
 8003d9a:	224f      	movs	r2, #79	; 0x4f
 8003d9c:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <setup_LP5523+0xcc>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b299      	uxth	r1, r3
 8003da4:	2364      	movs	r3, #100	; 0x64
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	2301      	movs	r3, #1
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <setup_LP5523+0xd4>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2301      	movs	r3, #1
 8003db2:	2236      	movs	r2, #54	; 0x36
 8003db4:	481d      	ldr	r0, [pc, #116]	; (8003e2c <setup_LP5523+0xd8>)
 8003db6:	f004 f929 	bl	800800c <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <setup_LP5523+0xcc>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	2364      	movs	r3, #100	; 0x64
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <setup_LP5523+0xdc>)
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2301      	movs	r3, #1
 8003dce:	2216      	movs	r2, #22
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <setup_LP5523+0xd8>)
 8003dd2:	f004 f91b 	bl	800800c <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <setup_LP5523+0xcc>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	2364      	movs	r3, #100	; 0x64
 8003dde:	9302      	str	r3, [sp, #8]
 8003de0:	2309      	movs	r3, #9
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <setup_LP5523+0xe0>)
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2301      	movs	r3, #1
 8003dea:	2226      	movs	r2, #38	; 0x26
 8003dec:	480f      	ldr	r0, [pc, #60]	; (8003e2c <setup_LP5523+0xd8>)
 8003dee:	f004 f90d 	bl	800800c <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <setup_LP5523+0xcc>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b299      	uxth	r1, r3
 8003df8:	2364      	movs	r3, #100	; 0x64
 8003dfa:	9302      	str	r3, [sp, #8]
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <setup_LP5523+0xe4>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2301      	movs	r3, #1
 8003e06:	2206      	movs	r2, #6
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <setup_LP5523+0xd8>)
 8003e0a:	f004 f8ff 	bl	800800c <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <setup_LP5523+0xd0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00b f9c2 	bl	800f19c <osSemaphoreRelease>
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200283d9 	.word	0x200283d9
 8003e24:	20027964 	.word	0x20027964
 8003e28:	200283d8 	.word	0x200283d8
 8003e2c:	20027f4c 	.word	0x20027f4c
 8003e30:	20000ac8 	.word	0x20000ac8
 8003e34:	2000006c 	.word	0x2000006c
 8003e38:	080178dc 	.word	0x080178dc

08003e3c <FrontLightsSet>:
//
//
//  return true;
//}

void FrontLightsSet(union ColorComplex *setColors){
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	6078      	str	r0, [r7, #4]
	memcpy(led_left_PWM, setColors, 9);
 8003e44:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <FrontLightsSet+0x78>)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6810      	ldr	r0, [r2, #0]
 8003e4a:	6851      	ldr	r1, [r2, #4]
 8003e4c:	c303      	stmia	r3!, {r0, r1}
 8003e4e:	7a12      	ldrb	r2, [r2, #8]
 8003e50:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f103 0209 	add.w	r2, r3, #9
 8003e58:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <FrontLightsSet+0x7c>)
 8003e5a:	6810      	ldr	r0, [r2, #0]
 8003e5c:	6851      	ldr	r1, [r2, #4]
 8003e5e:	c303      	stmia	r3!, {r0, r1}
 8003e60:	7a12      	ldrb	r2, [r2, #8]
 8003e62:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e64:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <FrontLightsSet+0x80>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f00b f92f 	bl	800f0d0 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8003e72:	2364      	movs	r3, #100	; 0x64
 8003e74:	9302      	str	r3, [sp, #8]
 8003e76:	2309      	movs	r3, #9
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <FrontLightsSet+0x78>)
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2216      	movs	r2, #22
 8003e82:	2168      	movs	r1, #104	; 0x68
 8003e84:	480e      	ldr	r0, [pc, #56]	; (8003ec0 <FrontLightsSet+0x84>)
 8003e86:	f004 f8c1 	bl	800800c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003e8a:	2364      	movs	r3, #100	; 0x64
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	2309      	movs	r3, #9
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <FrontLightsSet+0x7c>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2301      	movs	r3, #1
 8003e98:	2216      	movs	r2, #22
 8003e9a:	216a      	movs	r1, #106	; 0x6a
 8003e9c:	4808      	ldr	r0, [pc, #32]	; (8003ec0 <FrontLightsSet+0x84>)
 8003e9e:	f004 f8b5 	bl	800800c <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <FrontLightsSet+0x80>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f00b f978 	bl	800f19c <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000ab0 	.word	0x20000ab0
 8003eb8:	20000abc 	.word	0x20000abc
 8003ebc:	20027964 	.word	0x20027964
 8003ec0:	20027f4c 	.word	0x20027f4c

08003ec4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8003ecc:	2034      	movs	r0, #52	; 0x34
 8003ece:	f7ff ff41 	bl	8003d54 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8003ed2:	2035      	movs	r0, #53	; 0x35
 8003ed4:	f7ff ff3e 	bl	8003d54 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 8003edc:	2001      	movs	r0, #1
 8003ede:	f00a fee3 	bl	800eca8 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <ThreadFrontLightsTask+0xdc>)
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f107 010c 	add.w	r1, r7, #12
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f00b faa6 	bl	800f440 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e011      	b.n	8003f1e <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	425b      	negs	r3, r3
 8003f06:	b2d9      	uxtb	r1, r3
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <ThreadFrontLightsTask+0xe0>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	460a      	mov	r2, r1
 8003f10:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	ddea      	ble.n	8003efa <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e011      	b.n	8003f4e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	425b      	negs	r3, r3
 8003f36:	b2d9      	uxtb	r1, r3
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <ThreadFrontLightsTask+0xe4>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	460a      	mov	r2, r1
 8003f40:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	ddea      	ble.n	8003f2a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f54:	4b15      	ldr	r3, [pc, #84]	; (8003fac <ThreadFrontLightsTask+0xe8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f00b f8b7 	bl	800f0d0 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8003f62:	2364      	movs	r3, #100	; 0x64
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	2309      	movs	r3, #9
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <ThreadFrontLightsTask+0xe0>)
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2301      	movs	r3, #1
 8003f70:	2216      	movs	r2, #22
 8003f72:	2168      	movs	r1, #104	; 0x68
 8003f74:	480e      	ldr	r0, [pc, #56]	; (8003fb0 <ThreadFrontLightsTask+0xec>)
 8003f76:	f004 f849 	bl	800800c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8003f7a:	2364      	movs	r3, #100	; 0x64
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	2309      	movs	r3, #9
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <ThreadFrontLightsTask+0xe4>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2301      	movs	r3, #1
 8003f88:	2216      	movs	r2, #22
 8003f8a:	216a      	movs	r1, #106	; 0x6a
 8003f8c:	4808      	ldr	r0, [pc, #32]	; (8003fb0 <ThreadFrontLightsTask+0xec>)
 8003f8e:	f004 f83d 	bl	800800c <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <ThreadFrontLightsTask+0xe8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f00b f900 	bl	800f19c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8003f9c:	e79c      	b.n	8003ed8 <ThreadFrontLightsTask+0x14>
 8003f9e:	bf00      	nop
 8003fa0:	2002796c 	.word	0x2002796c
 8003fa4:	20000ab0 	.word	0x20000ab0
 8003fa8:	20000abc 	.word	0x20000abc
 8003fac:	20027964 	.word	0x20027964
 8003fb0:	20027f4c 	.word	0x20027f4c

08003fb4 <LL_RCC_LSE_SetDriveCapability>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f023 0218 	bic.w	r2, r3, #24
 8003fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fe4:	f001 faa6 	bl	8005534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fe8:	f000 f81c 	bl	8004024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fec:	f7fe fcfc 	bl	80029e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ff0:	f7fd fc67 	bl	80018c2 <MX_DMA_Init>
  MX_ADC1_Init();
 8003ff4:	f7fc ff24 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8003ff8:	f000 fe46 	bl	8004c88 <MX_RTC_Init>
  MX_TIM2_Init();
 8003ffc:	f001 f8c8 	bl	8005190 <MX_TIM2_Init>
  MX_RF_Init();
 8004000:	f000 fe2a 	bl	8004c58 <MX_RF_Init>
  MX_USART1_UART_Init();
 8004004:	f001 f9e0 	bl	80053c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004008:	f7ff fbf0 	bl	80037ec <MX_I2C1_Init>
  MX_COMP1_Init();
 800400c:	f7fd fb46 	bl	800169c <MX_COMP1_Init>
  MX_TIM16_Init();
 8004010:	f001 f934 	bl	800527c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8004014:	f00a fbee 	bl	800e7f4 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004018:	f7fd f942 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 800401c:	f00a fc1e 	bl	800e85c <osKernelStart>
//
//  for(int i = 0; i<1000; i++){
//	  test_packet[i] = i;
//  }

  while (1)
 8004020:	e7fe      	b.n	8004020 <main+0x40>
	...

08004024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0ae      	sub	sp, #184	; 0xb8
 8004028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800402a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800402e:	2248      	movs	r2, #72	; 0x48
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f012 f85b 	bl	80160ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
 8004048:	615a      	str	r2, [r3, #20]
 800404a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	2250      	movs	r2, #80	; 0x50
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f012 f84b 	bl	80160ee <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	f043 0310 	orr.w	r3, r3, #16
 800406a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004076:	f043 0303 	orr.w	r3, r3, #3
 800407a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800407c:	2000      	movs	r0, #0
 800407e:	f7ff ff99 	bl	8003fb4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004082:	4b3a      	ldr	r3, [pc, #232]	; (800416c <SystemClock_Config+0x148>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408a:	4a38      	ldr	r2, [pc, #224]	; (800416c <SystemClock_Config+0x148>)
 800408c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <SystemClock_Config+0x148>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800409e:	230f      	movs	r3, #15
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80040a8:	2301      	movs	r3, #1
 80040aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040b2:	2340      	movs	r3, #64	; 0x40
 80040b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80040b8:	2305      	movs	r3, #5
 80040ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040c8:	4618      	mov	r0, r3
 80040ca:	f006 f80b 	bl	800a0e4 <HAL_RCC_OscConfig>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80040d4:	f000 f89e 	bl	8004214 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80040d8:	236f      	movs	r3, #111	; 0x6f
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80040dc:	2302      	movs	r3, #2
 80040de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040e4:	2300      	movs	r3, #0
 80040e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040e8:	2300      	movs	r3, #0
 80040ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80040ec:	2300      	movs	r3, #0
 80040ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80040f0:	2300      	movs	r3, #0
 80040f2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80040f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f006 fb50 	bl	800a7a0 <HAL_RCC_ClockConfig>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8004106:	f000 f885 	bl	8004214 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800410a:	f643 4305 	movw	r3, #15365	; 0x3c05
 800410e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004110:	2306      	movs	r3, #6
 8004112:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004118:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800411a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800411e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004120:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004124:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8004126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800412a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004130:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800413c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004140:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004148:	2302      	movs	r3, #2
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800414c:	2300      	movs	r3, #0
 800414e:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f006 ff91 	bl	800b07a <HAL_RCCEx_PeriphCLKConfig>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800415e:	f000 f859 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004162:	bf00      	nop
 8004164:	37b8      	adds	r7, #184	; 0xb8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58000400 	.word	0x58000400

08004170 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_COMP_TriggerCallback+0x74>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	b29a      	uxth	r2, r3
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_COMP_TriggerCallback+0x78>)
 8004182:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f002 fdf5 	bl	8006d74 <HAL_COMP_GetOutputLevel>
 800418a:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d109      	bne.n	80041a6 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_COMP_TriggerCallback+0x78>)
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 8004198:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80041a4:	e019      	b.n	80041da <HAL_COMP_TriggerCallback+0x6a>
	else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 80041a8:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d014      	beq.n	80041da <HAL_COMP_TriggerCallback+0x6a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d111      	bne.n	80041da <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 80041b8:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_COMP_TriggerCallback+0x78>)
 80041be:	881a      	ldrh	r2, [r3, #0]
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 80041c2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	4807      	ldr	r0, [pc, #28]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 80041ce:	f7ff fc89 	bl	8003ae4 <enqueue_pulse>
		input0.rise_valid_ = 0;
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_COMP_TriggerCallback+0x7c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20028570 	.word	0x20028570
 80041e8:	20000ad2 	.word	0x20000ad2
 80041ec:	20027978 	.word	0x20027978

080041f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004202:	f001 f9b7 	bl	8005574 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <MasterThreadTask>:
 */

uint8_t logEnabled = 0;

void MasterThreadTask(void *argument)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
//			get3D_location(&vive_loc);
//			osDelay(1000);
//		}
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <MasterThreadTask+0xec>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	2200      	movs	r2, #0
 8004236:	4937      	ldr	r1, [pc, #220]	; (8004314 <MasterThreadTask+0xf0>)
 8004238:	f00b f902 	bl	800f440 <osMessageQueueGet>

//		togLogMessageReceived.status = 0;
//		togLogMessageReceived.logStatus = 0;
		togLogMessageReceived.blinkEnabled = 1;
 800423c:	4b35      	ldr	r3, [pc, #212]	; (8004314 <MasterThreadTask+0xf0>)
 800423e:	2201      	movs	r2, #1
 8004240:	709a      	strb	r2, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 8004242:	4b34      	ldr	r3, [pc, #208]	; (8004314 <MasterThreadTask+0xf0>)
 8004244:	2201      	movs	r2, #1
 8004246:	70da      	strb	r2, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 8004248:	4b32      	ldr	r3, [pc, #200]	; (8004314 <MasterThreadTask+0xf0>)
 800424a:	2201      	movs	r2, #1
 800424c:	711a      	strb	r2, [r3, #4]
		togLogMessageReceived.positionEnabled = 0;
 800424e:	4b31      	ldr	r3, [pc, #196]	; (8004314 <MasterThreadTask+0xf0>)
 8004250:	2200      	movs	r2, #0
 8004252:	715a      	strb	r2, [r3, #5]


		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8004254:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <MasterThreadTask+0xf0>)
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d14b      	bne.n	80042f4 <MasterThreadTask+0xd0>
		{
			logEnabled = 1;
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <MasterThreadTask+0xf4>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004262:	4b2e      	ldr	r3, [pc, #184]	; (800431c <MasterThreadTask+0xf8>)
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <MasterThreadTask+0xf0>)
 8004266:	6811      	ldr	r1, [r2, #0]
 8004268:	6019      	str	r1, [r3, #0]
 800426a:	8892      	ldrh	r2, [r2, #4]
 800426c:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <MasterThreadTask+0xf8>)
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <MasterThreadTask+0x5e>
			{
				osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <MasterThreadTask+0xfc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f00a fbcd 	bl	800ea1c <osThreadFlagsSet>
			if(togLogMessageReceived.positionEnabled == SENSOR_ENABLE)
			{
				// start timer for 3D position sample to be taken
			}

			if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <MasterThreadTask+0xf8>)
 8004284:	78db      	ldrb	r3, [r3, #3]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <MasterThreadTask+0x72>
			{
				osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <MasterThreadTask+0x100>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f00a fbc3 	bl	800ea1c <osThreadFlagsSet>
			}

			if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <MasterThreadTask+0xf8>)
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <MasterThreadTask+0x86>
			{
				osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <MasterThreadTask+0x104>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	4618      	mov	r0, r3
 80042a6:	f00a fbb9 	bl	800ea1c <osThreadFlagsSet>
			}

			osDelay(500);
 80042aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ae:	f00a fcfb 	bl	800eca8 <osDelay>
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// allow sometime for context switching
				osDelay(50);
 80042b2:	2032      	movs	r0, #50	; 0x32
 80042b4:	f00a fcf8 	bl	800eca8 <osDelay>

				// grab data from sensor thread queues
				grabSensorData();
 80042b8:	f000 f842 	bl	8004340 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived, &vive_loc);
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <MasterThreadTask+0x108>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <MasterThreadTask+0x10c>)
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <MasterThreadTask+0x110>)
 80042c4:	491c      	ldr	r1, [pc, #112]	; (8004338 <MasterThreadTask+0x114>)
 80042c6:	481d      	ldr	r0, [pc, #116]	; (800433c <MasterThreadTask+0x118>)
 80042c8:	f000 f8e6 	bl	8004498 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80042cc:	481b      	ldr	r0, [pc, #108]	; (800433c <MasterThreadTask+0x118>)
 80042ce:	f010 fca3 	bl	8014c18 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <MasterThreadTask+0xec>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	2200      	movs	r2, #0
 80042da:	490e      	ldr	r1, [pc, #56]	; (8004314 <MasterThreadTask+0xf0>)
 80042dc:	f00b f8b0 	bl	800f440 <osMessageQueueGet>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e5      	bne.n	80042b2 <MasterThreadTask+0x8e>
				{
					// disable threads
					if(togLogMessageReceived.status == DISABLE_SENSING){
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <MasterThreadTask+0xf0>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e1      	bne.n	80042b2 <MasterThreadTask+0x8e>

						masterExitRoutine();
 80042ee:	f000 f8a9 	bl	8004444 <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 80042f2:	e00c      	b.n	800430e <MasterThreadTask+0xea>
					}
				}
			}
		}
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <MasterThreadTask+0xf4>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d197      	bne.n	800422c <MasterThreadTask+0x8>
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <MasterThreadTask+0xf0>)
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d193      	bne.n	800422c <MasterThreadTask+0x8>
		{
			logEnabled = 0;
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <MasterThreadTask+0xf4>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800430a:	f000 f89b 	bl	8004444 <masterExitRoutine>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 800430e:	e78d      	b.n	800422c <MasterThreadTask+0x8>
 8004310:	20027d94 	.word	0x20027d94
 8004314:	20027870 	.word	0x20027870
 8004318:	20000ad4 	.word	0x20000ad4
 800431c:	20027948 	.word	0x20027948
 8004320:	20027954 	.word	0x20027954
 8004324:	20027d9c 	.word	0x20027d9c
 8004328:	20027dac 	.word	0x20027dac
 800432c:	2002845c 	.word	0x2002845c
 8004330:	20028474 	.word	0x20028474
 8004334:	200284b0 	.word	0x200284b0
 8004338:	200283f0 	.word	0x200283f0
 800433c:	2002787c 	.word	0x2002787c

08004340 <grabSensorData>:


	}
}

void grabSensorData(void){
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8004344:	4b32      	ldr	r3, [pc, #200]	; (8004410 <grabSensorData+0xd0>)
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d112      	bne.n	8004372 <grabSensorData+0x32>
	{
		if(osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 1000)){
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <grabSensorData+0xd4>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004354:	2200      	movs	r2, #0
 8004356:	4930      	ldr	r1, [pc, #192]	; (8004418 <grabSensorData+0xd8>)
 8004358:	f00b f872 	bl	800f440 <osMessageQueueGet>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <grabSensorData+0x32>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8004362:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <grabSensorData+0xd8>)
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <grabSensorData+0xdc>)
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	236c      	movs	r3, #108	; 0x6c
 800436c:	461a      	mov	r2, r3
 800436e:	f011 feb3 	bl	80160d8 <memcpy>
		}
	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <grabSensorData+0xd0>)
 8004374:	78db      	ldrb	r3, [r3, #3]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d114      	bne.n	80043a4 <grabSensorData+0x64>
	{
		if(osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 1000)){
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <grabSensorData+0xe0>)
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004382:	2200      	movs	r2, #0
 8004384:	4927      	ldr	r1, [pc, #156]	; (8004424 <grabSensorData+0xe4>)
 8004386:	f00b f85b 	bl	800f440 <osMessageQueueGet>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <grabSensorData+0x64>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived, sizeof(struct parsedSecondaryProcessorPacket));
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <grabSensorData+0xe4>)
 8004392:	4b25      	ldr	r3, [pc, #148]	; (8004428 <grabSensorData+0xe8>)
 8004394:	4614      	mov	r4, r2
 8004396:	461d      	mov	r5, r3
 8004398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80043a0:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}

	if( (prevLogMessage.positionEnabled == SENSOR_ENABLE))
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <grabSensorData+0xd0>)
 80043a6:	795b      	ldrb	r3, [r3, #5]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d114      	bne.n	80043d6 <grabSensorData+0x96>
		{
		if(osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 1000)){
 80043ac:	4b1f      	ldr	r3, [pc, #124]	; (800442c <grabSensorData+0xec>)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b4:	2200      	movs	r2, #0
 80043b6:	491e      	ldr	r1, [pc, #120]	; (8004430 <grabSensorData+0xf0>)
 80043b8:	f00b f842 	bl	800f440 <osMessageQueueGet>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <grabSensorData+0x96>
				memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80043c2:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <grabSensorData+0xf0>)
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <grabSensorData+0xf4>)
 80043c6:	4614      	mov	r4, r2
 80043c8:	461d      	mov	r5, r3
 80043ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80043d2:	e884 0003 	stmia.w	r4, {r0, r1}
			}
		}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 80043d6:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <grabSensorData+0xd0>)
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d115      	bne.n	800440a <grabSensorData+0xca>
	{
		if(osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)){
 80043de:	4b16      	ldr	r3, [pc, #88]	; (8004438 <grabSensorData+0xf8>)
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	2200      	movs	r2, #0
 80043e6:	4915      	ldr	r1, [pc, #84]	; (800443c <grabSensorData+0xfc>)
 80043e8:	f00b f82a 	bl	800f440 <osMessageQueueGet>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <grabSensorData+0xca>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <grabSensorData+0xfc>)
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <grabSensorData+0x100>)
 80043f6:	4614      	mov	r4, r2
 80043f8:	461d      	mov	r5, r3
 80043fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004402:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004406:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 800440a:	bf00      	nop
 800440c:	bdb0      	pop	{r4, r5, r7, pc}
 800440e:	bf00      	nop
 8004410:	20027948 	.word	0x20027948
 8004414:	20027da8 	.word	0x20027da8
 8004418:	200283f0 	.word	0x200283f0
 800441c:	080178e8 	.word	0x080178e8
 8004420:	20027970 	.word	0x20027970
 8004424:	200284b0 	.word	0x200284b0
 8004428:	08017954 	.word	0x08017954
 800442c:	2002786c 	.word	0x2002786c
 8004430:	2002845c 	.word	0x2002845c
 8004434:	08017994 	.word	0x08017994
 8004438:	20027968 	.word	0x20027968
 800443c:	20028474 	.word	0x20028474
 8004440:	0801796c 	.word	0x0801796c

08004444 <masterExitRoutine>:



void masterExitRoutine(void){
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	if(prevLogMessage.blinkEnabled == SENSOR_ENABLE)
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <masterExitRoutine+0x44>)
 800444a:	789b      	ldrb	r3, [r3, #2]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <masterExitRoutine+0x18>
	{
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <masterExitRoutine+0x48>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f00a fae0 	bl	800ea1c <osThreadFlagsSet>
	{
		// stop timer for 3D position sensing

	}

	if( (prevLogMessage.tempEnabled == SENSOR_ENABLE))
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <masterExitRoutine+0x44>)
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <masterExitRoutine+0x2c>
	{
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <masterExitRoutine+0x4c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f00a fad6 	bl	800ea1c <osThreadFlagsSet>
	}

	if( (prevLogMessage.intertialEnabled == SENSOR_ENABLE))
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <masterExitRoutine+0x44>)
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <masterExitRoutine+0x40>
	{
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <masterExitRoutine+0x50>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f00a facc 	bl	800ea1c <osThreadFlagsSet>
	}

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20027948 	.word	0x20027948
 800448c:	20027954 	.word	0x20027954
 8004490:	20027d9c 	.word	0x20027d9c
 8004494:	20027dac 	.word	0x20027dac

08004498 <packetizeData>:
void packetizeData(struct LogPacket *packet,
		struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg,
		struct inertialData *inertialMsg,
		VIVEVars *posMsg)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 80044a6:	f001 f877 	bl	8005598 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
//	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);

	// add sensor data
	memcpy ( &(packet->blink), blink, sizeof(struct blinkData) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	226c      	movs	r2, #108	; 0x6c
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f011 fe0d 	bl	80160d8 <memcpy>
	memcpy ( &(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket) );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	336c      	adds	r3, #108	; 0x6c
 80044c2:	2218      	movs	r2, #24
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f011 fe06 	bl	80160d8 <memcpy>
	memcpy ( &(packet->inertial), inertialMsg, sizeof(struct inertialData) );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3384      	adds	r3, #132	; 0x84
 80044d0:	2228      	movs	r2, #40	; 0x28
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f011 fdff 	bl	80160d8 <memcpy>
	memcpy ( &(packet->pos), posMsg, sizeof(struct VIVEVars) );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	33ac      	adds	r3, #172	; 0xac
 80044de:	2218      	movs	r2, #24
 80044e0:	69b9      	ldr	r1, [r7, #24]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f011 fdf8 	bl	80160d8 <memcpy>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	d80f      	bhi.n	8004522 <vector_push+0x32>
    	self->items[self->count++] = *item;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004506:	1c51      	adds	r1, r2, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6619      	str	r1, [r3, #96]	; 0x60
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	440b      	add	r3, r1
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	6811      	ldr	r1, [r2, #0]
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	8892      	ldrh	r2, [r2, #4]
 8004520:	809a      	strh	r2, [r3, #4]
    }
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <vector_pop>:

Pulse vector_pop(vector *self){
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01c      	beq.n	800457a <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	18ca      	adds	r2, r1, r3
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	6810      	ldr	r0, [r2, #0]
 8004558:	6018      	str	r0, [r3, #0]
 800455a:	8892      	ldrh	r2, [r2, #4]
 800455c:	809a      	strh	r2, [r3, #4]
		self->count--;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	461a      	mov	r2, r3
 800456c:	f107 0308 	add.w	r3, r7, #8
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	6010      	str	r0, [r2, #0]
 8004574:	889b      	ldrh	r3, [r3, #4]
 8004576:	8093      	strh	r3, [r2, #4]
 8004578:	e005      	b.n	8004586 <vector_pop+0x58>
	}
	return self->items[0];
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	6810      	ldr	r0, [r2, #0]
 8004580:	6018      	str	r0, [r3, #0]
 8004582:	8892      	ldrh	r2, [r2, #4]
 8004584:	809a      	strh	r2, [r3, #4]
}
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db12      	blt.n	80045ca <vector_get+0x38>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d90d      	bls.n	80045ca <vector_get+0x38>
    	return self->items[index];
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	18ca      	adds	r2, r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	6811      	ldr	r1, [r2, #0]
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	8892      	ldrh	r2, [r2, #4]
 80045c6:	809a      	strh	r2, [r3, #4]
 80045c8:	e005      	b.n	80045d6 <vector_get+0x44>
    }
    return self->items[0];
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	6810      	ldr	r0, [r2, #0]
 80045d0:	6018      	str	r0, [r3, #0]
 80045d2:	8892      	ldrh	r2, [r2, #4]
 80045d4:	809a      	strh	r2, [r3, #4]
}
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <vector_clear>:

void vector_clear(vector *self){
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e00c      	b.n	8004638 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2264      	movs	r2, #100	; 0x64
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	3310      	adds	r3, #16
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ffd8 	bl	80045e2 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	ddef      	ble.n	800461e <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	33d8      	adds	r3, #216	; 0xd8
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffcd 	bl	80045e2 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ffc7 	bl	80045e2 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <consume_pulse>:

void consume_pulse(PulseProcessor *self, Pulse* p){
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	889b      	ldrh	r3, [r3, #4]
 8004672:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004676:	d20c      	bcs.n	8004692 <consume_pulse+0x2e>
		//Ignore very long pulses
	}
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	889b      	ldrh	r3, [r3, #4]
 800467c:	2b27      	cmp	r3, #39	; 0x27
 800467e:	d904      	bls.n	800468a <consume_pulse+0x26>
		process_long_pulse(self, p);
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f80a 	bl	800469c <process_long_pulse>
	}
	else{	//Short pulse -likely laser sweep
		process_short_pulse(self, p);
	}
}
 8004688:	e003      	b.n	8004692 <consume_pulse+0x2e>
		process_short_pulse(self, p);
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f897 	bl	80047c0 <process_short_pulse>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d144      	bne.n	8004738 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d03f      	beq.n	8004738 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff32 	bl	800452e <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	885a      	ldrh	r2, [r3, #2]
 80046ce:	897b      	ldrh	r3, [r7, #10]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 80046e0:	461a      	mov	r2, r3
 80046e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80046e6:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80046ea:	330d      	adds	r3, #13
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f113 0f1e 	cmn.w	r3, #30
 80046f6:	db1c      	blt.n	8004732 <process_long_pulse+0x96>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b1d      	cmp	r3, #29
 80046fc:	dc19      	bgt.n	8004732 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	885a      	ldrh	r2, [r3, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004718:	4618      	mov	r0, r3
 800471a:	f7fd f89f 	bl	800185c <reset>

                reset_cycle_long_pulses(self);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa64 	bl	8004bec <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa7c 	bl	8004c22 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa87 	bl	8004c3e <reset_cycle_short_pulses>
 8004730:	e002      	b.n	8004738 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa75 	bl	8004c22 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02d      	beq.n	80047a0 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	885a      	ldrh	r2, [r3, #2]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	891b      	ldrh	r3, [r3, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e021      	b.n	800479a <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <process_long_pulse+0x120>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800475e:	8a7a      	ldrh	r2, [r7, #18]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	b29b      	uxth	r3, r3
 8004764:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004766:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800476a:	f113 0f1e 	cmn.w	r3, #30
 800476e:	db11      	blt.n	8004794 <process_long_pulse+0xf8>
 8004770:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004774:	2b1d      	cmp	r3, #29
 8004776:	dc0d      	bgt.n	8004794 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2264      	movs	r2, #100	; 0x64
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	3310      	adds	r3, #16
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff feb1 	bl	80044f0 <vector_push>
                pulse_classified = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	77fb      	strb	r3, [r7, #31]
                break;
 8004792:	e005      	b.n	80047a0 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	3301      	adds	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	ddda      	ble.n	8004756 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fe9e 	bl	80044f0 <vector_push>
    }
}
 80047b4:	bf00      	nop
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	080179ac 	.word	0x080179ac

080047c0 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00f      	beq.n	80047f2 <process_short_pulse+0x32>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d208      	bcs.n	80047f2 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	33d8      	adds	r3, #216	; 0xd8
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fe82 	bl	80044f0 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f805 	bl	80047fc <process_cycle_fix>
	}
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b0a2      	sub	sp, #136	; 0x88
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004804:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 800480e:	2300      	movs	r3, #0
 8004810:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <process_cycle_fix+0x2a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80b7 	beq.w	8004994 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b09      	cmp	r3, #9
 800482c:	d80d      	bhi.n	800484a <process_cycle_fix+0x4e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <process_cycle_fix+0x4e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004850:	e090      	b.n	8004974 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004858:	2164      	movs	r1, #100	; 0x64
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3370      	adds	r3, #112	; 0x70
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004868:	2b00      	cmp	r3, #0
 800486a:	d07e      	beq.n	800496a <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	891a      	ldrh	r2, [r3, #8]
 8004870:	49c0      	ldr	r1, [pc, #768]	; (8004b74 <process_cycle_fix+0x378>)
 8004872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004876:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800487a:	4413      	add	r3, r2
 800487c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004886:	e03e      	b.n	8004906 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800488c:	2264      	movs	r2, #100	; 0x64
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	3310      	adds	r3, #16
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	18d1      	adds	r1, r2, r3
 8004898:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fe76 	bl	8004592 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 80048a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80048b0:	4413      	add	r3, r2
 80048b2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80048b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048ba:	4619      	mov	r1, r3
 80048bc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80048c0:	1acb      	subs	r3, r1, r3
 80048c2:	441a      	add	r2, r3
 80048c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80048ce:	440b      	add	r3, r1
 80048d0:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 80048d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80048de:	4413      	add	r3, r2
 80048e0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80048e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048e8:	4413      	add	r3, r2
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80048f6:	440b      	add	r3, r1
 80048f8:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 80048fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004900:	3301      	adds	r3, #1
 8004902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	429a      	cmp	r2, r3
 800490e:	d3bb      	bcc.n	8004888 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004912:	2b01      	cmp	r3, #1
 8004914:	d929      	bls.n	800496a <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004920:	4413      	add	r3, r2
 8004922:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004926:	461a      	mov	r2, r3
 8004928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	461a      	mov	r2, r3
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800493a:	440b      	add	r3, r1
 800493c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800494a:	4413      	add	r3, r2
 800494c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004950:	461a      	mov	r2, r3
 8004952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	b29a      	uxth	r2, r3
 800495a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004964:	440b      	add	r3, r1
 8004966:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 800496a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800496e:	3301      	adds	r3, #1
 8004970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004978:	2b01      	cmp	r3, #1
 800497a:	f77f af6a 	ble.w	8004852 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800498c:	4619      	mov	r1, r3
 800498e:	f7fc fee3 	bl	8001758 <process_pulse_lengths>
 8004992:	e008      	b.n	80049a6 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fc ff3a 	bl	800182c <get_phase>
 80049b8:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f2c0 80b5 	blt.w	8004b2c <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	2220      	movs	r2, #32
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f011 fb8f 	bl	80160ee <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 80049d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	105b      	asrs	r3, r3, #1
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	891a      	ldrh	r2, [r3, #8]
 80049e8:	4962      	ldr	r1, [pc, #392]	; (8004b74 <process_cycle_fix+0x378>)
 80049ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80049f0:	4413      	add	r3, r2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80049fc:	440b      	add	r3, r1
 80049fe:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a0e:	e04a      	b.n	8004aa6 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fdb8 	bl	8004592 <vector_get>
            uint32_t input_idx = p.input_idx;
 8004a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004a26:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004a28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004a3e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004a42:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004a46:	d32b      	bcc.n	8004aa0 <process_cycle_fix+0x2a4>
 8004a48:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004a4c:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d825      	bhi.n	8004aa0 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <process_cycle_fix+0x280>
 8004a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a6e:	4413      	add	r3, r2
 8004a70:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004a74:	889a      	ldrh	r2, [r3, #4]
 8004a76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d211      	bcs.n	8004aa0 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a84:	4413      	add	r3, r2
 8004a86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a8a:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a96:	4413      	add	r3, r2
 8004a98:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004a9c:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004aac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3ae      	bcc.n	8004a10 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab6:	e034      	b.n	8004b22 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d028      	beq.n	8004b1c <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004acc:	015b      	lsls	r3, r3, #5
 8004ace:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004ae6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b78 <process_cycle_fix+0x37c>
 8004af6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004afa:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004b7c <process_cycle_fix+0x380>
 8004afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68d9      	ldr	r1, [r3, #12]
 8004b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b16:	3204      	adds	r2, #4
 8004b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1e:	3301      	adds	r3, #1
 8004b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3c5      	bcc.n	8004ab8 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db06      	blt.n	8004b40 <process_cycle_fix+0x344>
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e008      	b.n	8004b52 <process_cycle_fix+0x356>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02b      	beq.n	8004bae <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	891a      	ldrh	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db0c      	blt.n	8004b80 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d908      	bls.n	8004b80 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004b6e:	22c8      	movs	r2, #200	; 0xc8
 8004b70:	e007      	b.n	8004b82 <process_cycle_fix+0x386>
 8004b72:	bf00      	nop
 8004b74:	080179ac 	.word	0x080179ac
 8004b78:	40490fdb 	.word	0x40490fdb
 8004b7c:	46023400 	.word	0x46023400
 8004b80:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b96:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fd fc7f 	bl	80024ac <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f81c 	bl	8004bec <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f834 	bl	8004c22 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f83f 	bl	8004c3e <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	891a      	ldrh	r2, [r3, #8]
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004bd0:	330d      	adds	r3, #13
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
}
 8004be2:	bf00      	nop
 8004be4:	3788      	adds	r7, #136	; 0x88
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e00c      	b.n	8004c14 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2264      	movs	r2, #100	; 0x64
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	3310      	adds	r3, #16
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fcea 	bl	80045e2 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	ddef      	ble.n	8004bfa <reset_cycle_long_pulses+0xe>
	}
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fcd6 	bl	80045e2 <vector_clear>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	33d8      	adds	r3, #216	; 0xd8
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fcc9 	bl	80045e2 <vector_clear>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0

}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <MX_RTC_Init+0x34>)
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <MX_RTC_Init+0x38>)
 8004c90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <MX_RTC_Init+0x34>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <MX_RTC_Init+0x34>)
 8004c9a:	220f      	movs	r2, #15
 8004c9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <MX_RTC_Init+0x34>)
 8004ca0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004ca4:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ca6:	4805      	ldr	r0, [pc, #20]	; (8004cbc <MX_RTC_Init+0x34>)
 8004ca8:	f006 fc6d 	bl	800b586 <HAL_RTC_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004cb2:	f7ff faaf 	bl	8004214 <Error_Handler>
  }

}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200284cc 	.word	0x200284cc
 8004cc0:	40002800 	.word	0x40002800

08004cc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RTC_MspInit+0x20>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cd6:	f7ff ffc6 	bl	8004c66 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40002800 	.word	0x40002800

08004ce8 <LL_AHB3_GRP1_EnableClock>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004d1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d22:	f7ff ffe1 	bl	8004ce8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	210f      	movs	r1, #15
 8004d2a:	f06f 0001 	mvn.w	r0, #1
 8004d2e:	f002 f95c 	bl	8006fea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8004d32:	2200      	movs	r2, #0
 8004d34:	210f      	movs	r1, #15
 8004d36:	202c      	movs	r0, #44	; 0x2c
 8004d38:	f002 f957 	bl	8006fea <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	210f      	movs	r1, #15
 8004d40:	202d      	movs	r0, #45	; 0x2d
 8004d42:	f002 f952 	bl	8006fea <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	2019      	movs	r0, #25
 8004d92:	f002 f92a 	bl	8006fea <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8004d96:	2019      	movs	r0, #25
 8004d98:	f002 f941 	bl	800701e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004da0:	f7ff ffd3 	bl	8004d4a <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	f107 030c 	add.w	r3, r7, #12
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f005 fedc 	bl	800ab6c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004db4:	f005 fec4 	bl	800ab40 <HAL_RCC_GetPCLK2Freq>
 8004db8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <HAL_InitTick+0x8c>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0c9b      	lsrs	r3, r3, #18
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004dc8:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_InitTick+0x90>)
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <HAL_InitTick+0x94>)
 8004dcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_InitTick+0x90>)
 8004dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <HAL_InitTick+0x90>)
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_InitTick+0x90>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_InitTick+0x90>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004de8:	4808      	ldr	r0, [pc, #32]	; (8004e0c <HAL_InitTick+0x90>)
 8004dea:	f006 fcba 	bl	800b762 <HAL_TIM_Base_Init>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004df4:	4805      	ldr	r0, [pc, #20]	; (8004e0c <HAL_InitTick+0x90>)
 8004df6:	f006 fd35 	bl	800b864 <HAL_TIM_Base_Start_IT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	e000      	b.n	8004e00 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3730      	adds	r7, #48	; 0x30
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	431bde83 	.word	0x431bde83
 8004e0c:	200284f0 	.word	0x200284f0
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e26:	e7fe      	b.n	8004e26 <HardFault_Handler+0x4>

08004e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e2c:	e7fe      	b.n	8004e2c <MemManage_Handler+0x4>

08004e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e32:	e7fe      	b.n	8004e32 <BusFault_Handler+0x4>

08004e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e38:	e7fe      	b.n	8004e38 <UsageFault_Handler+0x4>

08004e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e4c:	2004      	movs	r0, #4
 8004e4e:	f002 fddb 	bl	8007a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <EXTI2_IRQHandler+0x1c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2104      	movs	r1, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f009 fddf 	bl	800ea1c <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20027d9c 	.word	0x20027d9c

08004e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <DMA1_Channel1_IRQHandler+0x10>)
 8004e6e:	f002 faf4 	bl	800745a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20027800 	.word	0x20027800

08004e7c <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <COMP_IRQHandler+0x10>)
 8004e82:	f001 ff49 	bl	8006d18 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20027db4 	.word	0x20027db4

08004e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004e94:	2020      	movs	r0, #32
 8004e96:	f002 fdb7 	bl	8007a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ea4:	4803      	ldr	r0, [pc, #12]	; (8004eb4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004ea6:	f006 fde7 	bl	800ba78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004eaa:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004eac:	f006 fde4 	bl	800ba78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200284f0 	.word	0x200284f0
 8004eb8:	20028570 	.word	0x20028570

08004ebc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ec0:	4802      	ldr	r0, [pc, #8]	; (8004ecc <I2C1_EV_IRQHandler+0x10>)
 8004ec2:	f003 f9b7 	bl	8008234 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20027f4c 	.word	0x20027f4c

08004ed0 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8004ed4:	f010 fc54 	bl	8015780 <HW_IPCC_Tx_Handler>

  return;
 8004ed8:	bf00      	nop
}
 8004eda:	bd80      	pop	{r7, pc}

08004edc <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8004ee0:	f010 fbf4 	bl	80156cc <HW_IPCC_Rx_Handler>
  return;
 8004ee4:	bf00      	nop
}
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8004ee8:	b40c      	push	{r2, r3}
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	71fb      	strb	r3, [r7, #7]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	b002      	add	sp, #8
 8004f06:	4770      	bx	lr

08004f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004f0c:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <SystemInit+0xa0>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004f12:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <SystemInit+0xa0>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <SystemInit+0xa0>)
 8004f1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <SystemInit+0xa4>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f58:	f023 0305 	bic.w	r3, r3, #5
 8004f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f78:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <SystemInit+0xa8>)
 8004f7a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f80:	4a0b      	ldr	r2, [pc, #44]	; (8004fb0 <SystemInit+0xa8>)
 8004f82:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	2200      	movs	r2, #0
 8004f9a:	619a      	str	r2, [r3, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000ed00 	.word	0xe000ed00
 8004fac:	faf6fefb 	.word	0xfaf6fefb
 8004fb0:	22041000 	.word	0x22041000

08004fb4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	4a47      	ldr	r2, [pc, #284]	; (80050e4 <SystemCoreClockUpdate+0x130>)
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d867      	bhi.n	80050ac <SystemCoreClockUpdate+0xf8>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <SystemCoreClockUpdate+0x30>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	080050ad 	.word	0x080050ad
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	080050ad 	.word	0x080050ad
 8004ffc:	080050ad 	.word	0x080050ad
 8005000:	080050ad 	.word	0x080050ad
 8005004:	08005029 	.word	0x08005029
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050ad 	.word	0x080050ad
 8005014:	08005031 	.word	0x08005031
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005018:	4a33      	ldr	r2, [pc, #204]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6013      	str	r3, [r2, #0]
      break;
 800501e:	e049      	b.n	80050b4 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005020:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 8005022:	4a32      	ldr	r2, [pc, #200]	; (80050ec <SystemCoreClockUpdate+0x138>)
 8005024:	601a      	str	r2, [r3, #0]
      break;
 8005026:	e045      	b.n	80050b4 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 800502a:	4a31      	ldr	r2, [pc, #196]	; (80050f0 <SystemCoreClockUpdate+0x13c>)
 800502c:	601a      	str	r2, [r3, #0]
      break;
 800502e:	e041      	b.n	80050b4 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	3301      	adds	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d105      	bne.n	800505e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005052:	4a26      	ldr	r2, [pc, #152]	; (80050ec <SystemCoreClockUpdate+0x138>)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e00d      	b.n	800507a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d105      	bne.n	8005070 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005064:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <SystemCoreClockUpdate+0x13c>)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e004      	b.n	800507a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0f5b      	lsrs	r3, r3, #29
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	3301      	adds	r3, #1
 800509c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 80050a8:	6013      	str	r3, [r2, #0]
      break;
 80050aa:	e003      	b.n	80050b4 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80050ac:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6013      	str	r3, [r2, #0]
      break;
 80050b2:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <SystemCoreClockUpdate+0x140>)
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <SystemCoreClockUpdate+0x134>)
 80050d4:	6013      	str	r3, [r2, #0]

}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	08017a10 	.word	0x08017a10
 80050e8:	20000078 	.word	0x20000078
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	01e84800 	.word	0x01e84800
 80050f4:	080179b0 	.word	0x080179b0

080050f8 <LL_AHB2_GRP1_EnableClock>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4313      	orrs	r3, r2
 800510e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800511c:	68fb      	ldr	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_APB1_GRP1_EnableClock>:
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4313      	orrs	r3, r2
 8005140:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005146:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4013      	ands	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <LL_APB2_GRP1_EnableClock>:
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800516a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4313      	orrs	r3, r2
 8005172:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a4:	f107 031c 	add.w	r3, r7, #28
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051b0:	463b      	mov	r3, r7
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	60da      	str	r2, [r3, #12]
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	615a      	str	r2, [r3, #20]
 80051c0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80051c2:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 80051ca:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051cc:	f240 227f 	movw	r2, #639	; 0x27f
 80051d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d2:	4b29      	ldr	r3, [pc, #164]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051da:	2209      	movs	r2, #9
 80051dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051de:	4b26      	ldr	r3, [pc, #152]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051ea:	4823      	ldr	r0, [pc, #140]	; (8005278 <MX_TIM2_Init+0xe8>)
 80051ec:	f006 fab9 	bl	800b762 <HAL_TIM_Base_Init>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80051f6:	f7ff f80d 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005204:	4619      	mov	r1, r3
 8005206:	481c      	ldr	r0, [pc, #112]	; (8005278 <MX_TIM2_Init+0xe8>)
 8005208:	f006 fe6e 	bl	800bee8 <HAL_TIM_ConfigClockSource>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005212:	f7fe ffff 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005216:	4818      	ldr	r0, [pc, #96]	; (8005278 <MX_TIM2_Init+0xe8>)
 8005218:	f006 fb4e 	bl	800b8b8 <HAL_TIM_PWM_Init>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005222:	f7fe fff7 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005226:	2320      	movs	r3, #32
 8005228:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800522e:	f107 031c 	add.w	r3, r7, #28
 8005232:	4619      	mov	r1, r3
 8005234:	4810      	ldr	r0, [pc, #64]	; (8005278 <MX_TIM2_Init+0xe8>)
 8005236:	f007 fadd 	bl	800c7f4 <HAL_TIMEx_MasterConfigSynchronization>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005240:	f7fe ffe8 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005244:	2360      	movs	r3, #96	; 0x60
 8005246:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005248:	2309      	movs	r3, #9
 800524a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005254:	463b      	mov	r3, r7
 8005256:	2204      	movs	r2, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4807      	ldr	r0, [pc, #28]	; (8005278 <MX_TIM2_Init+0xe8>)
 800525c:	f006 fd2c 	bl	800bcb8 <HAL_TIM_PWM_ConfigChannel>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005266:	f7fe ffd5 	bl	8004214 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800526a:	4803      	ldr	r0, [pc, #12]	; (8005278 <MX_TIM2_Init+0xe8>)
 800526c:	f000 f850 	bl	8005310 <HAL_TIM_MspPostInit>

}
 8005270:	bf00      	nop
 8005272:	3738      	adds	r7, #56	; 0x38
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20028530 	.word	0x20028530

0800527c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <MX_TIM16_Init+0x44>)
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <MX_TIM16_Init+0x48>)
 8005284:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005286:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <MX_TIM16_Init+0x44>)
 8005288:	221f      	movs	r2, #31
 800528a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <MX_TIM16_Init+0x44>)
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <MX_TIM16_Init+0x44>)
 8005294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005298:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <MX_TIM16_Init+0x44>)
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <MX_TIM16_Init+0x44>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <MX_TIM16_Init+0x44>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80052ac:	4804      	ldr	r0, [pc, #16]	; (80052c0 <MX_TIM16_Init+0x44>)
 80052ae:	f006 fa58 	bl	800b762 <HAL_TIM_Base_Init>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80052b8:	f7fe ffac 	bl	8004214 <Error_Handler>
  }

}
 80052bc:	bf00      	nop
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20028570 	.word	0x20028570
 80052c4:	40014400 	.word	0x40014400

080052c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d103      	bne.n	80052e2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052da:	2001      	movs	r0, #1
 80052dc:	f7ff ff25 	bl	800512a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80052e0:	e010      	b.n	8005304 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <HAL_TIM_Base_MspInit+0x44>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10b      	bne.n	8005304 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80052ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80052f0:	f7ff ff34 	bl	800515c <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	2019      	movs	r0, #25
 80052fa:	f001 fe76 	bl	8006fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052fe:	2019      	movs	r0, #25
 8005300:	f001 fe8d 	bl	800701e <HAL_NVIC_EnableIRQ>
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40014400 	.word	0x40014400

08005310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	f107 030c 	add.w	r3, r7, #12
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d112      	bne.n	8005358 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005332:	2002      	movs	r0, #2
 8005334:	f7ff fee0 	bl	80050f8 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005338:	2308      	movs	r3, #8
 800533a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005348:	2301      	movs	r3, #1
 800534a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4619      	mov	r1, r3
 8005352:	4803      	ldr	r0, [pc, #12]	; (8005360 <HAL_TIM_MspPostInit+0x50>)
 8005354:	f002 f9d0 	bl	80076f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005358:	bf00      	nop
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	48000400 	.word	0x48000400

08005364 <LL_AHB2_GRP1_EnableClock>:
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4313      	orrs	r3, r2
 800537a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4013      	ands	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_APB2_GRP1_EnableClock>:
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4013      	ands	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80053cc:	4b23      	ldr	r3, [pc, #140]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053ce:	4a24      	ldr	r2, [pc, #144]	; (8005460 <MX_USART1_UART_Init+0x98>)
 80053d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053d2:	4b22      	ldr	r3, [pc, #136]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053ee:	220c      	movs	r2, #12
 80053f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80053f8:	4b18      	ldr	r3, [pc, #96]	; (800545c <MX_USART1_UART_Init+0x94>)
 80053fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005406:	4b15      	ldr	r3, [pc, #84]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005408:	2200      	movs	r2, #0
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <MX_USART1_UART_Init+0x94>)
 800540e:	2200      	movs	r2, #0
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005412:	4812      	ldr	r0, [pc, #72]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005414:	f007 fa8c 	bl	800c930 <HAL_UART_Init>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800541e:	f7fe fef9 	bl	8004214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005422:	2100      	movs	r1, #0
 8005424:	480d      	ldr	r0, [pc, #52]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005426:	f009 f900 	bl	800e62a <HAL_UARTEx_SetTxFifoThreshold>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005430:	f7fe fef0 	bl	8004214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005434:	2100      	movs	r1, #0
 8005436:	4809      	ldr	r0, [pc, #36]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005438:	f009 f935 	bl	800e6a6 <HAL_UARTEx_SetRxFifoThreshold>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8005442:	f7fe fee7 	bl	8004214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005446:	4805      	ldr	r0, [pc, #20]	; (800545c <MX_USART1_UART_Init+0x94>)
 8005448:	f009 f8b6 	bl	800e5b8 <HAL_UARTEx_DisableFifoMode>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8005452:	f7fe fedf 	bl	8004214 <Error_Handler>
  }

}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200285b0 	.word	0x200285b0
 8005460:	40013800 	.word	0x40013800

08005464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <HAL_UART_MspInit+0x58>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d116      	bne.n	80054b4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005486:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800548a:	f7ff ff84 	bl	8005396 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548e:	2002      	movs	r0, #2
 8005490:	f7ff ff68 	bl	8005364 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005494:	23c0      	movs	r3, #192	; 0xc0
 8005496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005498:	2302      	movs	r3, #2
 800549a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054a4:	2307      	movs	r3, #7
 80054a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a8:	f107 030c 	add.w	r3, r7, #12
 80054ac:	4619      	mov	r1, r3
 80054ae:	4804      	ldr	r0, [pc, #16]	; (80054c0 <HAL_UART_MspInit+0x5c>)
 80054b0:	f002 f922 	bl	80076f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80054b4:	bf00      	nop
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40013800 	.word	0x40013800
 80054c0:	48000400 	.word	0x48000400

080054c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80054c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054c8:	3304      	adds	r3, #4

080054ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80054ce:	d3f9      	bcc.n	80054c4 <CopyDataInit>
  bx lr
 80054d0:	4770      	bx	lr

080054d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80054d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80054d4:	3004      	adds	r0, #4

080054d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80054d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80054d8:	d3fb      	bcc.n	80054d2 <FillZerobss>
  bx lr
 80054da:	4770      	bx	lr

080054dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054dc:	480c      	ldr	r0, [pc, #48]	; (8005510 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80054de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80054e0:	480c      	ldr	r0, [pc, #48]	; (8005514 <LoopForever+0x8>)
 80054e2:	490d      	ldr	r1, [pc, #52]	; (8005518 <LoopForever+0xc>)
 80054e4:	4a0d      	ldr	r2, [pc, #52]	; (800551c <LoopForever+0x10>)
 80054e6:	2300      	movs	r3, #0
 80054e8:	f7ff ffef 	bl	80054ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80054ec:	480c      	ldr	r0, [pc, #48]	; (8005520 <LoopForever+0x14>)
 80054ee:	490d      	ldr	r1, [pc, #52]	; (8005524 <LoopForever+0x18>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	f7ff fff0 	bl	80054d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80054f6:	480c      	ldr	r0, [pc, #48]	; (8005528 <LoopForever+0x1c>)
 80054f8:	490c      	ldr	r1, [pc, #48]	; (800552c <LoopForever+0x20>)
 80054fa:	2300      	movs	r3, #0
 80054fc:	f7ff ffeb 	bl	80054d6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005500:	f7ff fd02 	bl	8004f08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005504:	f010 fdc4 	bl	8016090 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005508:	f7fe fd6a 	bl	8003fe0 <main>

0800550c <LoopForever>:

LoopForever:
  b LoopForever
 800550c:	e7fe      	b.n	800550c <LoopForever>
 800550e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005510:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005514:	20000004 	.word	0x20000004
 8005518:	20000138 	.word	0x20000138
 800551c:	080183a8 	.word	0x080183a8
  INIT_BSS _sbss, _ebss
 8005520:	200001e8 	.word	0x200001e8
 8005524:	20028768 	.word	0x20028768
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005528:	200300c4 	.word	0x200300c4
 800552c:	20030b5b 	.word	0x20030b5b

08005530 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005530:	e7fe      	b.n	8005530 <ADC1_IRQHandler>
	...

08005534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_Init+0x3c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a0b      	ldr	r2, [pc, #44]	; (8005570 <HAL_Init+0x3c>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800554a:	2003      	movs	r0, #3
 800554c:	f001 fd42 	bl	8006fd4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005550:	2000      	movs	r0, #0
 8005552:	f7ff fc13 	bl	8004d7c <HAL_InitTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	71fb      	strb	r3, [r7, #7]
 8005560:	e001      	b.n	8005566 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005562:	f7ff fbda 	bl	8004d1a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005566:	79fb      	ldrb	r3, [r7, #7]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	58004000 	.word	0x58004000

08005574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_IncTick+0x1c>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_IncTick+0x20>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4413      	add	r3, r2
 8005582:	4a03      	ldr	r2, [pc, #12]	; (8005590 <HAL_IncTick+0x1c>)
 8005584:	6013      	str	r3, [r2, #0]
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	2002863c 	.word	0x2002863c
 8005594:	20000080 	.word	0x20000080

08005598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return uwTick;
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <HAL_GetTick+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2002863c 	.word	0x2002863c

080055b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <HAL_GetTickPrio+0x14>)
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	2000007c 	.word	0x2000007c

080055c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80055d0:	f7ff ffe2 	bl	8005598 <HAL_GetTick>
 80055d4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d004      	beq.n	80055ec <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_Delay+0x40>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80055ec:	bf00      	nop
 80055ee:	f7ff ffd3 	bl	8005598 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d8f7      	bhi.n	80055ee <HAL_Delay+0x26>
    {
    }
  }
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000080 	.word	0x20000080

0800560c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005664:	b490      	push	{r4, r7}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3360      	adds	r3, #96	; 0x60
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <LL_ADC_SetOffset+0x40>)
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005696:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bc90      	pop	{r4, r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	03fff000 	.word	0x03fff000

080056a8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80056a8:	b490      	push	{r4, r7}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3360      	adds	r3, #96	; 0x60
 80056b6:	461a      	mov	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc90      	pop	{r4, r7}
 80056ce:	4770      	bx	lr

080056d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80056d0:	b490      	push	{r4, r7}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	461a      	mov	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc90      	pop	{r4, r7}
 80056fe:	4770      	bx	lr

08005700 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005726:	b490      	push	{r4, r7}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3330      	adds	r3, #48	; 0x30
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	4413      	add	r3, r2
 8005744:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	211f      	movs	r1, #31
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0e9b      	lsrs	r3, r3, #26
 800575c:	f003 011f 	and.w	r1, r3, #31
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	4313      	orrs	r3, r2
 800576c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bc90      	pop	{r4, r7}
 8005776:	4770      	bx	lr

08005778 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005778:	b490      	push	{r4, r7}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3314      	adds	r3, #20
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	0e5b      	lsrs	r3, r3, #25
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	4413      	add	r3, r2
 8005796:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	0d1b      	lsrs	r3, r3, #20
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2107      	movs	r1, #7
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0d1b      	lsrs	r3, r3, #20
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc90      	pop	{r4, r7}
 80057c6:	4770      	bx	lr

080057c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0318 	and.w	r3, r3, #24
 80057ea:	4908      	ldr	r1, [pc, #32]	; (800580c <LL_ADC_SetChannelSingleDiff+0x44>)
 80057ec:	40d9      	lsrs	r1, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	400b      	ands	r3, r1
 80057f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	0007ffff 	.word	0x0007ffff

08005810 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6093      	str	r3, [r2, #8]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d101      	bne.n	800584e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800586c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005898:	d101      	bne.n	800589e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058e8:	f043 0202 	orr.w	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <LL_ADC_IsEnabled+0x18>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <LL_ADC_IsEnabled+0x1a>
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d101      	bne.n	800593a <LL_ADC_IsDisableOngoing+0x18>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <LL_ADC_IsDisableOngoing+0x1a>
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005984:	f043 0210 	orr.w	r2, r3, #16
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d101      	bne.n	80059b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d101      	bne.n	80059fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e12a      	b.n	8005c7c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fb fa6b 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fef1 	bl	8005834 <LL_ADC_IsDeepPowerDownEnabled>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fed7 	bl	8005810 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff0c 	bl	8005884 <LL_ADC_IsInternalRegulatorEnabled>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d113      	bne.n	8005a9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fef0 	bl	800585c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005a7c:	4b81      	ldr	r3, [pc, #516]	; (8005c84 <HAL_ADC_Init+0x278>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	099b      	lsrs	r3, r3, #6
 8005a82:	4a81      	ldr	r2, [pc, #516]	; (8005c88 <HAL_ADC_Init+0x27c>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a8c:	e002      	b.n	8005a94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f9      	bne.n	8005a8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fef0 	bl	8005884 <LL_ADC_IsInternalRegulatorEnabled>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f043 0210 	orr.w	r2, r3, #16
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ff64 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8005ad0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 80c5 	bne.w	8005c6a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 80c1 	bne.w	8005c6a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005af0:	f043 0202 	orr.w	r2, r3, #2
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fefd 	bl	80058fc <LL_ADC_IsEnabled>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b08:	4860      	ldr	r0, [pc, #384]	; (8005c8c <HAL_ADC_Init+0x280>)
 8005b0a:	f7ff fef7 	bl	80058fc <LL_ADC_IsEnabled>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	485d      	ldr	r0, [pc, #372]	; (8005c90 <HAL_ADC_Init+0x284>)
 8005b1c:	f7ff fd76 	bl	800560c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7e5b      	ldrb	r3, [r3, #25]
 8005b24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005b30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005b36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d106      	bne.n	8005b5c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	3b01      	subs	r3, #1
 8005b54:	045b      	lsls	r3, r3, #17
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <HAL_ADC_Init+0x288>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff01 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8005b96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff22 	bl	80059e6 <LL_ADC_INJ_IsConversionOngoing>
 8005ba2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d13d      	bne.n	8005c26 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d13a      	bne.n	8005c26 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005bb4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bbc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bcc:	f023 0302 	bic.w	r3, r3, #2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	69b9      	ldr	r1, [r7, #24]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d118      	bne.n	8005c16 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bee:	f023 0304 	bic.w	r3, r3, #4
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c06:	430a      	orrs	r2, r1
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	e007      	b.n	8005c26 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10c      	bne.n	8005c48 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f023 010f 	bic.w	r1, r3, #15
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
 8005c46:	e007      	b.n	8005c58 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 020f 	bic.w	r2, r2, #15
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
 8005c68:	e007      	b.n	8005c7a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	f043 0210 	orr.w	r2, r3, #16
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000078 	.word	0x20000078
 8005c88:	053e2d63 	.word	0x053e2d63
 8005c8c:	50040000 	.word	0x50040000
 8005c90:	50040300 	.word	0x50040300
 8005c94:	fff0c007 	.word	0xfff0c007

08005c98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fe75 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d167      	bne.n	8005d84 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_ADC_Start_DMA+0x2a>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e063      	b.n	8005d8a <HAL_ADC_Start_DMA+0xf2>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fcb8 	bl	8006640 <ADC_Enable>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d14f      	bne.n	8005d7a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	f023 0206 	bic.w	r2, r3, #6
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	659a      	str	r2, [r3, #88]	; 0x58
 8005d06:	e002      	b.n	8005d0e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <HAL_ADC_Start_DMA+0xfc>)
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <HAL_ADC_Start_DMA+0x100>)
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <HAL_ADC_Start_DMA+0x104>)
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	221c      	movs	r2, #28
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0210 	orr.w	r2, r2, #16
 8005d44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3340      	adds	r3, #64	; 0x40
 8005d60:	4619      	mov	r1, r3
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f001 fa3f 	bl	80071e8 <HAL_DMA_Start_IT>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fde8 	bl	8005948 <LL_ADC_REG_StartConversion>
 8005d78:	e006      	b.n	8005d88 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005d82:	e001      	b.n	8005d88 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
 8005d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	080067a5 	.word	0x080067a5
 8005d98:	0800687d 	.word	0x0800687d
 8005d9c:	08006899 	.word	0x08006899

08005da0 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_ADC_Stop_DMA+0x16>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e051      	b.n	8005e5a <HAL_ADC_Stop_DMA+0xba>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb89 	bl	80064d8 <ADC_ConversionStop>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d13f      	bne.n	8005e50 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10f      	bne.n	8005e0e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 fa73 	bl	80072de <HAL_DMA_Abort>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0210 	bic.w	r2, r2, #16
 8005e1c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc65 	bl	80066f4 <ADC_Disable>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
 8005e2e:	e002      	b.n	8005e36 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc5f 	bl	80066f4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b0a6      	sub	sp, #152	; 0x98
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x22>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e31e      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x660>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fd80 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 8303 	bne.w	80064a6 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6859      	ldr	r1, [r3, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f7ff fc3a 	bl	8005726 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fd6e 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8005ebc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff fd8e 	bl	80059e6 <LL_ADC_INJ_IsConversionOngoing>
 8005eca:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ece:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 8148 	bne.w	8006168 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8143 	bne.w	8006168 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6819      	ldr	r1, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f7ff fc42 	bl	8005778 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	08db      	lsrs	r3, r3, #3
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00a      	beq.n	8005f2c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6919      	ldr	r1, [r3, #16]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f26:	f7ff fb9d 	bl	8005664 <LL_ADC_SetOffset>
 8005f2a:	e11d      	b.n	8006168 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fbb8 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0xf4>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fbad 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	0e9b      	lsrs	r3, r3, #26
 8005f52:	f003 021f 	and.w	r2, r3, #31
 8005f56:	e012      	b.n	8005f7e <HAL_ADC_ConfigChannel+0x11a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fba2 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f6e:	fa93 f3a3 	rbit	r3, r3
 8005f72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f76:	fab3 f383 	clz	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <HAL_ADC_ConfigChannel+0x132>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	0e9b      	lsrs	r3, r3, #26
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	e00a      	b.n	8005fac <HAL_ADC_ConfigChannel+0x148>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9e:	fa93 f3a3 	rbit	r3, r3
 8005fa2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa6:	fab3 f383 	clz	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d106      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fb89 	bl	80056d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fb6f 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <HAL_ADC_ConfigChannel+0x186>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fb64 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	0e9b      	lsrs	r3, r3, #26
 8005fe4:	f003 021f 	and.w	r2, r3, #31
 8005fe8:	e010      	b.n	800600c <HAL_ADC_ConfigChannel+0x1a8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fb59 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ffc:	fa93 f3a3 	rbit	r3, r3
 8006000:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	fab3 f383 	clz	r3, r3
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x1c0>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	0e9b      	lsrs	r3, r3, #26
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	e00a      	b.n	800603a <HAL_ADC_ConfigChannel+0x1d6>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602c:	fa93 f3a3 	rbit	r3, r3
 8006030:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006034:	fab3 f383 	clz	r3, r3
 8006038:	b2db      	uxtb	r3, r3
 800603a:	429a      	cmp	r2, r3
 800603c:	d106      	bne.n	800604c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fb42 	bl	80056d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2102      	movs	r1, #2
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fb28 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8006058:	4603      	mov	r3, r0
 800605a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x214>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fb1d 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 800606e:	4603      	mov	r3, r0
 8006070:	0e9b      	lsrs	r3, r3, #26
 8006072:	f003 021f 	and.w	r2, r3, #31
 8006076:	e010      	b.n	800609a <HAL_ADC_ConfigChannel+0x236>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fb12 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8006084:	4603      	mov	r3, r0
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608a:	fa93 f3a3 	rbit	r3, r3
 800608e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006092:	fab3 f383 	clz	r3, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x24e>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	0e9b      	lsrs	r3, r3, #26
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	e00a      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x264>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ba:	fa93 f3a3 	rbit	r3, r3
 80060be:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80060c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d106      	bne.n	80060da <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2102      	movs	r1, #2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fafb 	bl	80056d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2103      	movs	r1, #3
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fae1 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x2a2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2103      	movs	r1, #3
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fad6 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 80060fc:	4603      	mov	r3, r0
 80060fe:	0e9b      	lsrs	r3, r3, #26
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	e010      	b.n	8006128 <HAL_ADC_ConfigChannel+0x2c4>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2103      	movs	r1, #3
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff facb 	bl	80056a8 <LL_ADC_GetOffsetChannel>
 8006112:	4603      	mov	r3, r0
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006118:	fa93 f3a3 	rbit	r3, r3
 800611c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800611e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x2dc>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0e9b      	lsrs	r3, r3, #26
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	e00a      	b.n	8006156 <HAL_ADC_ConfigChannel+0x2f2>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006148:	fa93 f3a3 	rbit	r3, r3
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	b2db      	uxtb	r3, r3
 8006156:	429a      	cmp	r2, r3
 8006158:	d106      	bne.n	8006168 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	2103      	movs	r1, #3
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fab4 	bl	80056d0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fbc5 	bl	80058fc <LL_ADC_IsEnabled>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 819f 	bne.w	80064b8 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6819      	ldr	r1, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	461a      	mov	r2, r3
 8006188:	f7ff fb1e 	bl	80057c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4aab      	ldr	r2, [pc, #684]	; (8006440 <HAL_ADC_ConfigChannel+0x5dc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f040 80fd 	bne.w	8006392 <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <HAL_ADC_ConfigChannel+0x35c>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	0e9b      	lsrs	r3, r3, #26
 80061ae:	3301      	adds	r3, #1
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	bf94      	ite	ls
 80061b8:	2301      	movls	r3, #1
 80061ba:	2300      	movhi	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e012      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x382>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80061ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d0:	fab3 f383 	clz	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	3301      	adds	r3, #1
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b09      	cmp	r3, #9
 80061de:	bf94      	ite	ls
 80061e0:	2301      	movls	r3, #1
 80061e2:	2300      	movhi	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d064      	beq.n	80062b4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x3a2>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	0e9b      	lsrs	r3, r3, #26
 80061fc:	3301      	adds	r3, #1
 80061fe:	069b      	lsls	r3, r3, #26
 8006200:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006204:	e00e      	b.n	8006224 <HAL_ADC_ConfigChannel+0x3c0>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	fa93 f3a3 	rbit	r3, r3
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	3301      	adds	r3, #1
 800621e:	069b      	lsls	r3, r3, #26
 8006220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x3e0>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	0e9b      	lsrs	r3, r3, #26
 8006236:	3301      	adds	r3, #1
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	2101      	movs	r1, #1
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	e010      	b.n	8006266 <HAL_ADC_ConfigChannel+0x402>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	fa93 f3a3 	rbit	r3, r3
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	fab3 f383 	clz	r3, r3
 8006258:	b2db      	uxtb	r3, r3
 800625a:	3301      	adds	r3, #1
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2101      	movs	r1, #1
 8006262:	fa01 f303 	lsl.w	r3, r1, r3
 8006266:	ea42 0103 	orr.w	r1, r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <HAL_ADC_ConfigChannel+0x428>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	0e9b      	lsrs	r3, r3, #26
 800627c:	3301      	adds	r3, #1
 800627e:	f003 021f 	and.w	r2, r3, #31
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	051b      	lsls	r3, r3, #20
 800628a:	e011      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x44c>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	fab3 f383 	clz	r3, r3
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	3301      	adds	r3, #1
 80062a4:	f003 021f 	and.w	r2, r3, #31
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062b0:	430b      	orrs	r3, r1
 80062b2:	e069      	b.n	8006388 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <HAL_ADC_ConfigChannel+0x46c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0e9b      	lsrs	r3, r3, #26
 80062c6:	3301      	adds	r3, #1
 80062c8:	069b      	lsls	r3, r3, #26
 80062ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ce:	e00e      	b.n	80062ee <HAL_ADC_ConfigChannel+0x48a>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	61fb      	str	r3, [r7, #28]
  return result;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3301      	adds	r3, #1
 80062e8:	069b      	lsls	r3, r3, #26
 80062ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <HAL_ADC_ConfigChannel+0x4aa>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	0e9b      	lsrs	r3, r3, #26
 8006300:	3301      	adds	r3, #1
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	e010      	b.n	8006330 <HAL_ADC_ConfigChannel+0x4cc>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	617b      	str	r3, [r7, #20]
  return result;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	3301      	adds	r3, #1
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2101      	movs	r1, #1
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	ea42 0103 	orr.w	r1, r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_ADC_ConfigChannel+0x4f8>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	0e9b      	lsrs	r3, r3, #26
 8006346:	3301      	adds	r3, #1
 8006348:	f003 021f 	and.w	r2, r3, #31
 800634c:	4613      	mov	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4413      	add	r3, r2
 8006352:	3b1e      	subs	r3, #30
 8006354:	051b      	lsls	r3, r3, #20
 8006356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800635a:	e014      	b.n	8006386 <HAL_ADC_ConfigChannel+0x522>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	fa93 f3a3 	rbit	r3, r3
 8006368:	60fb      	str	r3, [r7, #12]
  return result;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	3301      	adds	r3, #1
 8006374:	f003 021f 	and.w	r2, r3, #31
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	3b1e      	subs	r3, #30
 8006380:	051b      	lsls	r3, r3, #20
 8006382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006386:	430b      	orrs	r3, r1
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	4619      	mov	r1, r3
 800638e:	f7ff f9f3 	bl	8005778 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_ADC_ConfigChannel+0x5e0>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 808c 	beq.w	80064b8 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063a0:	4829      	ldr	r0, [pc, #164]	; (8006448 <HAL_ADC_ConfigChannel+0x5e4>)
 80063a2:	f7ff f951 	bl	8005648 <LL_ADC_GetCommonPathInternalCh>
 80063a6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063aa:	4828      	ldr	r0, [pc, #160]	; (800644c <HAL_ADC_ConfigChannel+0x5e8>)
 80063ac:	f7ff faa6 	bl	80058fc <LL_ADC_IsEnabled>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d16d      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_ADC_ConfigChannel+0x5ec>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d126      	bne.n	800640e <HAL_ADC_ConfigChannel+0x5aa>
 80063c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d120      	bne.n	800640e <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1e      	ldr	r2, [pc, #120]	; (800644c <HAL_ADC_ConfigChannel+0x5e8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d170      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80063d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063de:	4619      	mov	r1, r3
 80063e0:	4819      	ldr	r0, [pc, #100]	; (8006448 <HAL_ADC_ConfigChannel+0x5e4>)
 80063e2:	f7ff f91e 	bl	8005622 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <HAL_ADC_ConfigChannel+0x5f0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	4a1a      	ldr	r2, [pc, #104]	; (8006458 <HAL_ADC_ConfigChannel+0x5f4>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	099a      	lsrs	r2, r3, #6
 80063f4:	4613      	mov	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80063fe:	e002      	b.n	8006406 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3b01      	subs	r3, #1
 8006404:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f9      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800640c:	e054      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <HAL_ADC_ConfigChannel+0x5f8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d123      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x5fc>
 8006418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800641c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <HAL_ADC_ConfigChannel+0x5e8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d144      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800642e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006436:	4619      	mov	r1, r3
 8006438:	4803      	ldr	r0, [pc, #12]	; (8006448 <HAL_ADC_ConfigChannel+0x5e4>)
 800643a:	f7ff f8f2 	bl	8005622 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800643e:	e03b      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
 8006440:	407f0000 	.word	0x407f0000
 8006444:	80080000 	.word	0x80080000
 8006448:	50040300 	.word	0x50040300
 800644c:	50040000 	.word	0x50040000
 8006450:	c7520000 	.word	0xc7520000
 8006454:	20000078 	.word	0x20000078
 8006458:	053e2d63 	.word	0x053e2d63
 800645c:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <HAL_ADC_ConfigChannel+0x668>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d126      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
 800646a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800646e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d120      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_ADC_ConfigChannel+0x66c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d11b      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006488:	4619      	mov	r1, r3
 800648a:	4812      	ldr	r0, [pc, #72]	; (80064d4 <HAL_ADC_ConfigChannel+0x670>)
 800648c:	f7ff f8c9 	bl	8005622 <LL_ADC_SetCommonPathInternalCh>
 8006490:	e012      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f043 0220 	orr.w	r2, r3, #32
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80064a4:	e008      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80064c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3798      	adds	r7, #152	; 0x98
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	80000001 	.word	0x80000001
 80064d0:	50040000 	.word	0x50040000
 80064d4:	50040300 	.word	0x50040300

080064d8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fa52 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 80064f4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fa73 	bl	80059e6 <LL_ADC_INJ_IsConversionOngoing>
 8006500:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8090 	beq.w	8006630 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02a      	beq.n	8006574 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	7e5b      	ldrb	r3, [r3, #25]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d126      	bne.n	8006574 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7e1b      	ldrb	r3, [r3, #24]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d122      	bne.n	8006574 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006532:	e014      	b.n	800655e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4a41      	ldr	r2, [pc, #260]	; (800663c <ADC_ConversionStop+0x164>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d90d      	bls.n	8006558 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f043 0210 	orr.w	r2, r3, #16
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654c:	f043 0201 	orr.w	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e06c      	b.n	8006632 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d1e3      	bne.n	8006534 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2240      	movs	r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d014      	beq.n	80065a4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fa0a 	bl	8005998 <LL_ADC_REG_IsConversionOngoing>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff f9c7 	bl	8005922 <LL_ADC_IsDisableOngoing>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff f9e6 	bl	8005970 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d014      	beq.n	80065d4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fa19 	bl	80059e6 <LL_ADC_INJ_IsConversionOngoing>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f9af 	bl	8005922 <LL_ADC_IsDisableOngoing>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff f9f5 	bl	80059be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d004      	beq.n	80065e4 <ADC_ConversionStop+0x10c>
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d105      	bne.n	80065ea <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80065de:	230c      	movs	r3, #12
 80065e0:	617b      	str	r3, [r7, #20]
        break;
 80065e2:	e005      	b.n	80065f0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80065e4:	2308      	movs	r3, #8
 80065e6:	617b      	str	r3, [r7, #20]
        break;
 80065e8:	e002      	b.n	80065f0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80065ea:	2304      	movs	r3, #4
 80065ec:	617b      	str	r3, [r7, #20]
        break;
 80065ee:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80065f0:	f7fe ffd2 	bl	8005598 <HAL_GetTick>
 80065f4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80065f6:	e014      	b.n	8006622 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80065f8:	f7fe ffce 	bl	8005598 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b05      	cmp	r3, #5
 8006604:	d90d      	bls.n	8006622 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	f043 0210 	orr.w	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	f043 0201 	orr.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e007      	b.n	8006632 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e3      	bne.n	80065f8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	a33fffff 	.word	0xa33fffff

08006640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff f955 	bl	80058fc <LL_ADC_IsEnabled>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d146      	bne.n	80066e6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <ADC_Enable+0xb0>)
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f043 0210 	orr.w	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	f043 0201 	orr.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e032      	b.n	80066e8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff f910 	bl	80058ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800668c:	f7fe ff84 	bl	8005598 <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006692:	e021      	b.n	80066d8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff f92f 	bl	80058fc <LL_ADC_IsEnabled>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff f8ff 	bl	80058ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066ae:	f7fe ff73 	bl	8005598 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d90d      	bls.n	80066d8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c0:	f043 0210 	orr.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066cc:	f043 0201 	orr.w	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e007      	b.n	80066e8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d1d6      	bne.n	8006694 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	8000003f 	.word	0x8000003f

080066f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff f90e 	bl	8005922 <LL_ADC_IsDisableOngoing>
 8006706:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff f8f5 	bl	80058fc <LL_ADC_IsEnabled>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d040      	beq.n	800679a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d13d      	bne.n	800679a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030d 	and.w	r3, r3, #13
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10c      	bne.n	8006746 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff f8cf 	bl	80058d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2203      	movs	r2, #3
 800673c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800673e:	f7fe ff2b 	bl	8005598 <HAL_GetTick>
 8006742:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006744:	e022      	b.n	800678c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f043 0210 	orr.w	r2, r3, #16
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e01c      	b.n	800679c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006762:	f7fe ff19 	bl	8005598 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d90d      	bls.n	800678c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e007      	b.n	800679c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e3      	bne.n	8006762 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d14b      	bne.n	8006856 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d021      	beq.n	800681c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe ff8f 	bl	8005700 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d032      	beq.n	800684e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d12b      	bne.n	800684e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11f      	bne.n	800684e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	f043 0201 	orr.w	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
 800681a:	e018      	b.n	800684e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d111      	bne.n	800684e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7fa feda 	bl	8001608 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006854:	e00e      	b.n	8006874 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7fa febc 	bl	80015e0 <HAL_ADC_ErrorCallback>
}
 8006868:	e004      	b.n	8006874 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7fa fed4 	bl	8001638 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	f043 0204 	orr.w	r2, r3, #4
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7fa fe8e 	bl	80015e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <LL_EXTI_EnableIT_0_31>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80068d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80068da:	4905      	ldr	r1, [pc, #20]	; (80068f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	58000800 	.word	0x58000800

080068f4 <LL_EXTI_DisableIT_0_31>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <LL_EXTI_DisableIT_0_31+0x28>)
 80068fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	43db      	mvns	r3, r3
 8006906:	4905      	ldr	r1, [pc, #20]	; (800691c <LL_EXTI_DisableIT_0_31+0x28>)
 8006908:	4013      	ands	r3, r2
 800690a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	58000800 	.word	0x58000800

08006920 <LL_EXTI_EnableEvent_0_31>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <LL_EXTI_EnableEvent_0_31+0x24>)
 800692a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800692e:	4905      	ldr	r1, [pc, #20]	; (8006944 <LL_EXTI_EnableEvent_0_31+0x24>)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	58000800 	.word	0x58000800

08006948 <LL_EXTI_DisableEvent_0_31>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <LL_EXTI_DisableEvent_0_31+0x28>)
 8006952:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	43db      	mvns	r3, r3
 800695a:	4905      	ldr	r1, [pc, #20]	; (8006970 <LL_EXTI_DisableEvent_0_31+0x28>)
 800695c:	4013      	ands	r3, r2
 800695e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	58000800 	.word	0x58000800

08006974 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	4904      	ldr	r1, [pc, #16]	; (8006994 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	58000800 	.word	0x58000800

08006998 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	43db      	mvns	r3, r3
 80069a8:	4904      	ldr	r1, [pc, #16]	; (80069bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]

}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	58000800 	.word	0x58000800

080069c0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4904      	ldr	r1, [pc, #16]	; (80069e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	58000800 	.word	0x58000800

080069e4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	4904      	ldr	r1, [pc, #16]	; (8006a08 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	58000800 	.word	0x58000800

08006a0c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d101      	bne.n	8006a26 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	58000800 	.word	0x58000800

08006a38 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60d3      	str	r3, [r2, #12]
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	58000800 	.word	0x58000800

08006a58 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e0c4      	b.n	8006bfe <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a82:	d102      	bne.n	8006a8a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0b9      	b.n	8006bfe <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fa fe27 	bl	80016f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <HAL_COMP_Init+0x1b0>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af6:	d106      	bne.n	8006b06 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006af8:	4b44      	ldr	r3, [pc, #272]	; (8006c0c <HAL_COMP_Init+0x1b4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a43      	ldr	r2, [pc, #268]	; (8006c0c <HAL_COMP_Init+0x1b4>)
 8006afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	e005      	b.n	8006b12 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <HAL_COMP_Init+0x1b4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a40      	ldr	r2, [pc, #256]	; (8006c0c <HAL_COMP_Init+0x1b4>)
 8006b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b10:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <HAL_COMP_Init+0xf4>
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d112      	bne.n	8006b4c <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006b26:	4b3a      	ldr	r3, [pc, #232]	; (8006c10 <HAL_COMP_Init+0x1b8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	099b      	lsrs	r3, r3, #6
 8006b2c:	4a39      	ldr	r2, [pc, #228]	; (8006c14 <HAL_COMP_Init+0x1bc>)
 8006b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b32:	099a      	lsrs	r2, r3, #6
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006b3e:	e002      	b.n	8006b46 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f9      	bne.n	8006b40 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a31      	ldr	r2, [pc, #196]	; (8006c18 <HAL_COMP_Init+0x1c0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d102      	bne.n	8006b5c <HAL_COMP_Init+0x104>
 8006b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b5a:	e001      	b.n	8006b60 <HAL_COMP_Init+0x108>
 8006b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b60:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d037      	beq.n	8006bde <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f7ff fefa 	bl	8006974 <LL_EXTI_EnableRisingTrig_0_31>
 8006b80:	e002      	b.n	8006b88 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006b82:	6938      	ldr	r0, [r7, #16]
 8006b84:	f7ff ff08 	bl	8006998 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f7ff ff13 	bl	80069c0 <LL_EXTI_EnableFallingTrig_0_31>
 8006b9a:	e002      	b.n	8006ba2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006b9c:	6938      	ldr	r0, [r7, #16]
 8006b9e:	f7ff ff21 	bl	80069e4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006ba2:	6938      	ldr	r0, [r7, #16]
 8006ba4:	f7ff ff48 	bl	8006a38 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006bb4:	6938      	ldr	r0, [r7, #16]
 8006bb6:	f7ff feb3 	bl	8006920 <LL_EXTI_EnableEvent_0_31>
 8006bba:	e002      	b.n	8006bc2 <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f7ff fec3 	bl	8006948 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f7ff fe7c 	bl	80068cc <LL_EXTI_EnableIT_0_31>
 8006bd4:	e009      	b.n	8006bea <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006bd6:	6938      	ldr	r0, [r7, #16]
 8006bd8:	f7ff fe8c 	bl	80068f4 <LL_EXTI_DisableIT_0_31>
 8006bdc:	e005      	b.n	8006bea <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006bde:	6938      	ldr	r0, [r7, #16]
 8006be0:	f7ff feb2 	bl	8006948 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006be4:	6938      	ldr	r0, [r7, #16]
 8006be6:	f7ff fe85 	bl	80068f4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	f9207c03 	.word	0xf9207c03
 8006c0c:	40010204 	.word	0x40010204
 8006c10:	20000078 	.word	0x20000078
 8006c14:	053e2d63 	.word	0x053e2d63
 8006c18:	40010200 	.word	0x40010200

08006c1c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e02f      	b.n	8006c98 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c46:	d102      	bne.n	8006c4e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e024      	b.n	8006c98 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d11c      	bne.n	8006c94 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <HAL_COMP_Start+0x8c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	4a0c      	ldr	r2, [pc, #48]	; (8006cac <HAL_COMP_Start+0x90>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	099b      	lsrs	r3, r3, #6
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006c84:	e002      	b.n	8006c8c <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f9      	bne.n	8006c86 <HAL_COMP_Start+0x6a>
 8006c92:	e001      	b.n	8006c98 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000078 	.word	0x20000078
 8006cac:	053e2d63 	.word	0x053e2d63

08006cb0 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	73fb      	strb	r3, [r7, #15]
 8006cc6:	e01f      	b.n	8006d08 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd6:	d102      	bne.n	8006cde <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	e014      	b.n	8006d08 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00c      	beq.n	8006d04 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8006d02:	e001      	b.n	8006d08 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <HAL_COMP_IRQHandler+0x54>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d102      	bne.n	8006d30 <HAL_COMP_IRQHandler+0x18>
 8006d2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d2e:	e001      	b.n	8006d34 <HAL_COMP_IRQHandler+0x1c>
 8006d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fe68 	bl	8006a0c <LL_EXTI_IsActiveFlag_0_31>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_COMP_IRQHandler+0x58>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8006d4e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006d52:	f7ff fe71 	bl	8006a38 <LL_EXTI_ClearFlag_0_31>
 8006d56:	e002      	b.n	8006d5e <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fe6d 	bl	8006a38 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fd fa06 	bl	8004170 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40010200 	.word	0x40010200
 8006d70:	40010204 	.word	0x40010204

08006d74 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	0f9b      	lsrs	r3, r3, #30
 8006d84:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006db0:	4013      	ands	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dc6:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	60d3      	str	r3, [r2, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	e000ed00 	.word	0xe000ed00

08006ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <__NVIC_GetPriorityGrouping+0x18>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	f003 0307 	and.w	r3, r3, #7
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	e000ed00 	.word	0xe000ed00

08006df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	db0b      	blt.n	8006e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	f003 021f 	and.w	r2, r3, #31
 8006e10:	4907      	ldr	r1, [pc, #28]	; (8006e30 <__NVIC_EnableIRQ+0x38>)
 8006e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	2001      	movs	r0, #1
 8006e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	e000e100 	.word	0xe000e100

08006e34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db10      	blt.n	8006e68 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	f003 021f 	and.w	r2, r3, #31
 8006e4c:	4909      	ldr	r1, [pc, #36]	; (8006e74 <__NVIC_DisableIRQ+0x40>)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2001      	movs	r0, #1
 8006e56:	fa00 f202 	lsl.w	r2, r0, r2
 8006e5a:	3320      	adds	r3, #32
 8006e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006e64:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	e000e100 	.word	0xe000e100

08006e78 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	db0c      	blt.n	8006ea4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	f003 021f 	and.w	r2, r3, #31
 8006e90:	4907      	ldr	r1, [pc, #28]	; (8006eb0 <__NVIC_SetPendingIRQ+0x38>)
 8006e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	2001      	movs	r0, #1
 8006e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e9e:	3340      	adds	r3, #64	; 0x40
 8006ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	e000e100 	.word	0xe000e100

08006eb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	db0c      	blt.n	8006ee0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	f003 021f 	and.w	r2, r3, #31
 8006ecc:	4907      	ldr	r1, [pc, #28]	; (8006eec <__NVIC_ClearPendingIRQ+0x38>)
 8006ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8006eda:	3360      	adds	r3, #96	; 0x60
 8006edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	e000e100 	.word	0xe000e100

08006ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	db0a      	blt.n	8006f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	490c      	ldr	r1, [pc, #48]	; (8006f3c <__NVIC_SetPriority+0x4c>)
 8006f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0e:	0112      	lsls	r2, r2, #4
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	440b      	add	r3, r1
 8006f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f18:	e00a      	b.n	8006f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	4908      	ldr	r1, [pc, #32]	; (8006f40 <__NVIC_SetPriority+0x50>)
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	3b04      	subs	r3, #4
 8006f28:	0112      	lsls	r2, r2, #4
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	761a      	strb	r2, [r3, #24]
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	e000e100 	.word	0xe000e100
 8006f40:	e000ed00 	.word	0xe000ed00

08006f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b089      	sub	sp, #36	; 0x24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f1c3 0307 	rsb	r3, r3, #7
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	bf28      	it	cs
 8006f62:	2304      	movcs	r3, #4
 8006f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d902      	bls.n	8006f74 <NVIC_EncodePriority+0x30>
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3b03      	subs	r3, #3
 8006f72:	e000      	b.n	8006f76 <NVIC_EncodePriority+0x32>
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	43da      	mvns	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	401a      	ands	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	fa01 f303 	lsl.w	r3, r1, r3
 8006f96:	43d9      	mvns	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f9c:	4313      	orrs	r3, r2
         );
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3724      	adds	r7, #36	; 0x24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006fb0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <__NVIC_SystemReset+0x20>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006fbc:	4903      	ldr	r1, [pc, #12]	; (8006fcc <__NVIC_SystemReset+0x20>)
 8006fbe:	4b04      	ldr	r3, [pc, #16]	; (8006fd0 <__NVIC_SystemReset+0x24>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60cb      	str	r3, [r1, #12]
 8006fc4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006fc8:	bf00      	nop
 8006fca:	e7fd      	b.n	8006fc8 <__NVIC_SystemReset+0x1c>
 8006fcc:	e000ed00 	.word	0xe000ed00
 8006fd0:	05fa0004 	.word	0x05fa0004

08006fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fed9 	bl	8006d94 <__NVIC_SetPriorityGrouping>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ff8:	f7ff fef0 	bl	8006ddc <__NVIC_GetPriorityGrouping>
 8006ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	6978      	ldr	r0, [r7, #20]
 8007004:	f7ff ff9e 	bl	8006f44 <NVIC_EncodePriority>
 8007008:	4602      	mov	r2, r0
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff6d 	bl	8006ef0 <__NVIC_SetPriority>
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	4603      	mov	r3, r0
 8007026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fee3 	bl	8006df8 <__NVIC_EnableIRQ>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fef3 	bl	8006e34 <__NVIC_DisableIRQ>
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800705a:	f7ff ffa7 	bl	8006fac <__NVIC_SystemReset>

0800705e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	4603      	mov	r3, r0
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff03 	bl	8006e78 <__NVIC_SetPendingIRQ>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	4603      	mov	r3, r0
 8007082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ff13 	bl	8006eb4 <__NVIC_ClearPendingIRQ>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e08d      	b.n	80071c6 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <HAL_DMA_Init+0x138>)
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d80f      	bhi.n	80070d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b45      	ldr	r3, [pc, #276]	; (80071d4 <HAL_DMA_Init+0x13c>)
 80070be:	4413      	add	r3, r2
 80070c0:	4a45      	ldr	r2, [pc, #276]	; (80071d8 <HAL_DMA_Init+0x140>)
 80070c2:	fba2 2303 	umull	r2, r3, r2, r3
 80070c6:	091b      	lsrs	r3, r3, #4
 80070c8:	009a      	lsls	r2, r3, #2
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a42      	ldr	r2, [pc, #264]	; (80071dc <HAL_DMA_Init+0x144>)
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
 80070d4:	e00e      	b.n	80070f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	4b40      	ldr	r3, [pc, #256]	; (80071e0 <HAL_DMA_Init+0x148>)
 80070de:	4413      	add	r3, r2
 80070e0:	4a3d      	ldr	r2, [pc, #244]	; (80071d8 <HAL_DMA_Init+0x140>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	009a      	lsls	r2, r3, #2
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a3c      	ldr	r2, [pc, #240]	; (80071e4 <HAL_DMA_Init+0x14c>)
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa74 	bl	8007634 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007154:	d102      	bne.n	800715c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007170:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d010      	beq.n	800719c <HAL_DMA_Init+0x104>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d80c      	bhi.n	800719c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa94 	bl	80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	e008      	b.n	80071ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40020407 	.word	0x40020407
 80071d4:	bffdfff8 	.word	0xbffdfff8
 80071d8:	cccccccd 	.word	0xcccccccd
 80071dc:	40020000 	.word	0x40020000
 80071e0:	bffdfbf8 	.word	0xbffdfbf8
 80071e4:	40020400 	.word	0x40020400

080071e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_DMA_Start_IT+0x20>
 8007204:	2302      	movs	r3, #2
 8007206:	e066      	b.n	80072d6 <HAL_DMA_Start_IT+0xee>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d155      	bne.n	80072c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f9b9 	bl	80075b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 020e 	orr.w	r2, r2, #14
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e00f      	b.n	8007280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 020a 	orr.w	r2, r2, #10
 800727e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e005      	b.n	80072d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80072d0:	2302      	movs	r3, #2
 80072d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e04f      	b.n	8007390 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d008      	beq.n	800730e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e040      	b.n	8007390 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 020e 	bic.w	r2, r2, #14
 800731c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800732c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0201 	bic.w	r2, r2, #1
 800733c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	f003 021c 	and.w	r2, r3, #28
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	2101      	movs	r1, #1
 800734c:	fa01 f202 	lsl.w	r2, r1, r2
 8007350:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800735a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007372:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800737c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d005      	beq.n	80073c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2204      	movs	r2, #4
 80073b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e047      	b.n	8007450 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 020e 	bic.w	r2, r2, #14
 80073ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	f003 021c 	and.w	r2, r3, #28
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2101      	movs	r1, #1
 80073fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800740c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800742e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
    }
  }
  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007476:	f003 031c 	and.w	r3, r3, #28
 800747a:	2204      	movs	r2, #4
 800747c:	409a      	lsls	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d026      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x7a>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d021      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d107      	bne.n	80074ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0204 	bic.w	r2, r2, #4
 80074ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f003 021c 	and.w	r2, r3, #28
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2104      	movs	r1, #4
 80074bc:	fa01 f202 	lsl.w	r2, r1, r2
 80074c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d071      	beq.n	80075ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80074d2:	e06c      	b.n	80075ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d8:	f003 031c 	and.w	r3, r3, #28
 80074dc:	2202      	movs	r2, #2
 80074de:	409a      	lsls	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02e      	beq.n	8007546 <HAL_DMA_IRQHandler+0xec>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d029      	beq.n	8007546 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 020a 	bic.w	r2, r2, #10
 800750e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	f003 021c 	and.w	r2, r3, #28
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	2102      	movs	r1, #2
 8007526:	fa01 f202 	lsl.w	r2, r1, r2
 800752a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d038      	beq.n	80075ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007544:	e033      	b.n	80075ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754a:	f003 031c 	and.w	r3, r3, #28
 800754e:	2208      	movs	r2, #8
 8007550:	409a      	lsls	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02a      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x156>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d025      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 020e 	bic.w	r2, r2, #14
 8007572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007578:	f003 021c 	and.w	r2, r3, #28
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	2101      	movs	r1, #1
 8007582:	fa01 f202 	lsl.w	r2, r1, r2
 8007586:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
}
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	f003 021c 	and.w	r2, r3, #28
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f202 	lsl.w	r2, r1, r2
 80075f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b10      	cmp	r3, #16
 8007604:	d108      	bne.n	8007618 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007616:	e007      	b.n	8007628 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	60da      	str	r2, [r3, #12]
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	4b17      	ldr	r3, [pc, #92]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007644:	429a      	cmp	r2, r3
 8007646:	d80a      	bhi.n	800765e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	089b      	lsrs	r3, r3, #2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007654:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6493      	str	r3, [r2, #72]	; 0x48
 800765c:	e007      	b.n	800766e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	009a      	lsls	r2, r3, #2
 8007666:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007668:	4413      	add	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	3b08      	subs	r3, #8
 8007676:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007678:	fba2 2303 	umull	r2, r3, r2, r3
 800767c:	091b      	lsrs	r3, r3, #4
 800767e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007684:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f003 031c 	and.w	r3, r3, #28
 800768c:	2201      	movs	r2, #1
 800768e:	409a      	lsls	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40020407 	.word	0x40020407
 80076a4:	4002081c 	.word	0x4002081c
 80076a8:	cccccccd 	.word	0xcccccccd
 80076ac:	40020880 	.word	0x40020880

080076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80076d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2201      	movs	r2, #1
 80076de:	409a      	lsls	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	1000823f 	.word	0x1000823f
 80076f4:	40020940 	.word	0x40020940

080076f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007706:	e14c      	b.n	80079a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	2101      	movs	r1, #1
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	fa01 f303 	lsl.w	r3, r1, r3
 8007714:	4013      	ands	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 813e 	beq.w	800799c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d003      	beq.n	8007730 <HAL_GPIO_Init+0x38>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b12      	cmp	r3, #18
 800772e:	d123      	bne.n	8007778 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	08da      	lsrs	r2, r3, #3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3208      	adds	r2, #8
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	220f      	movs	r2, #15
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4013      	ands	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	08da      	lsrs	r2, r3, #3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3208      	adds	r2, #8
 8007772:	6939      	ldr	r1, [r7, #16]
 8007774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	2203      	movs	r2, #3
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4013      	ands	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 0203 	and.w	r2, r3, #3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d00b      	beq.n	80077cc <HAL_GPIO_Init+0xd4>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d007      	beq.n	80077cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077c0:	2b11      	cmp	r3, #17
 80077c2:	d003      	beq.n	80077cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b12      	cmp	r3, #18
 80077ca:	d130      	bne.n	800782e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	2203      	movs	r2, #3
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4013      	ands	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007802:	2201      	movs	r2, #1
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4013      	ands	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 0201 	and.w	r2, r3, #1
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	2203      	movs	r2, #3
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	43db      	mvns	r3, r3
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4013      	ands	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	fa02 f303 	lsl.w	r3, r2, r3
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8098 	beq.w	800799c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800786c:	4a54      	ldr	r2, [pc, #336]	; (80079c0 <HAL_GPIO_Init+0x2c8>)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	089b      	lsrs	r3, r3, #2
 8007872:	3302      	adds	r3, #2
 8007874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	220f      	movs	r2, #15
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007896:	d019      	beq.n	80078cc <HAL_GPIO_Init+0x1d4>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a4a      	ldr	r2, [pc, #296]	; (80079c4 <HAL_GPIO_Init+0x2cc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <HAL_GPIO_Init+0x1d0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a49      	ldr	r2, [pc, #292]	; (80079c8 <HAL_GPIO_Init+0x2d0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00d      	beq.n	80078c4 <HAL_GPIO_Init+0x1cc>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a48      	ldr	r2, [pc, #288]	; (80079cc <HAL_GPIO_Init+0x2d4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <HAL_GPIO_Init+0x1c8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a47      	ldr	r2, [pc, #284]	; (80079d0 <HAL_GPIO_Init+0x2d8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <HAL_GPIO_Init+0x1c4>
 80078b8:	2304      	movs	r3, #4
 80078ba:	e008      	b.n	80078ce <HAL_GPIO_Init+0x1d6>
 80078bc:	2307      	movs	r3, #7
 80078be:	e006      	b.n	80078ce <HAL_GPIO_Init+0x1d6>
 80078c0:	2303      	movs	r3, #3
 80078c2:	e004      	b.n	80078ce <HAL_GPIO_Init+0x1d6>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e002      	b.n	80078ce <HAL_GPIO_Init+0x1d6>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_GPIO_Init+0x1d6>
 80078cc:	2300      	movs	r3, #0
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	f002 0203 	and.w	r2, r2, #3
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	4093      	lsls	r3, r2
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80078de:	4938      	ldr	r1, [pc, #224]	; (80079c0 <HAL_GPIO_Init+0x2c8>)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	3302      	adds	r3, #2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80078ec:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 80078ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	43db      	mvns	r3, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007912:	4a30      	ldr	r2, [pc, #192]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800791a:	4b2e      	ldr	r3, [pc, #184]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 800791c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	43db      	mvns	r3, r3
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007940:	4a24      	ldr	r2, [pc, #144]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007948:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	43db      	mvns	r3, r3
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4013      	ands	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800796c:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007972:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	43db      	mvns	r3, r3
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007996:	4a0f      	ldr	r2, [pc, #60]	; (80079d4 <HAL_GPIO_Init+0x2dc>)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	3301      	adds	r3, #1
 80079a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f aeab 	bne.w	8007708 <HAL_GPIO_Init+0x10>
  }
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	48000400 	.word	0x48000400
 80079c8:	48000800 	.word	0x48000800
 80079cc:	48000c00 	.word	0x48000c00
 80079d0:	48001000 	.word	0x48001000
 80079d4:	58000800 	.word	0x58000800

080079d8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	887b      	ldrh	r3, [r7, #2]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e001      	b.n	80079fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a1e:	4a05      	ldr	r2, [pc, #20]	; (8007a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fb ffde 	bl	80039e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	58000800 	.word	0x58000800

08007a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e081      	b.n	8007b4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fb ff04 	bl	800386c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2224      	movs	r2, #36	; 0x24
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d107      	bne.n	8007ab2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	e006      	b.n	8007ac0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d104      	bne.n	8007ad2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	ea42 0103 	orr.w	r1, r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69d9      	ldr	r1, [r3, #28]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1a      	ldr	r2, [r3, #32]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	817b      	strh	r3, [r7, #10]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	f040 80da 	bne.w	8007d2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_I2C_Master_Transmit+0x30>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e0d3      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b90:	f7fd fd02 	bl	8005598 <HAL_GetTick>
 8007b94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2319      	movs	r3, #25
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 fbba 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e0be      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2221      	movs	r2, #33	; 0x21
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	893a      	ldrh	r2, [r7, #8]
 8007bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2bff      	cmp	r3, #255	; 0xff
 8007be2:	d90e      	bls.n	8007c02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	22ff      	movs	r2, #255	; 0xff
 8007be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	8979      	ldrh	r1, [r7, #10]
 8007bf2:	4b51      	ldr	r3, [pc, #324]	; (8007d38 <HAL_I2C_Master_Transmit+0x1e0>)
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f001 fd1c 	bl	8009638 <I2C_TransferConfig>
 8007c00:	e06c      	b.n	8007cdc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	8979      	ldrh	r1, [r7, #10]
 8007c14:	4b48      	ldr	r3, [pc, #288]	; (8007d38 <HAL_I2C_Master_Transmit+0x1e0>)
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f001 fd0b 	bl	8009638 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007c22:	e05b      	b.n	8007cdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	6a39      	ldr	r1, [r7, #32]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 fbb7 	bl	800939c <I2C_WaitOnTXISFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e07b      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d034      	beq.n	8007cdc <HAL_I2C_Master_Transmit+0x184>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d130      	bne.n	8007cdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f001 fb49 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e04d      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2bff      	cmp	r3, #255	; 0xff
 8007c9c:	d90e      	bls.n	8007cbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	8979      	ldrh	r1, [r7, #10]
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f001 fcbf 	bl	8009638 <I2C_TransferConfig>
 8007cba:	e00f      	b.n	8007cdc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	8979      	ldrh	r1, [r7, #10]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 fcae 	bl	8009638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d19e      	bne.n	8007c24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	6a39      	ldr	r1, [r7, #32]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 fb96 	bl	800941c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e01a      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6859      	ldr	r1, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <HAL_I2C_Master_Transmit+0x1e4>)
 8007d0e:	400b      	ands	r3, r1
 8007d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e000      	b.n	8007d30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	80002000 	.word	0x80002000
 8007d3c:	fe00e800 	.word	0xfe00e800

08007d40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	817b      	strh	r3, [r7, #10]
 8007d50:	4613      	mov	r3, r2
 8007d52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	f040 80db 	bne.w	8007f18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_I2C_Master_Receive+0x30>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e0d4      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d78:	f7fd fc0e 	bl	8005598 <HAL_GetTick>
 8007d7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2319      	movs	r3, #25
 8007d84:	2201      	movs	r2, #1
 8007d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f001 fac6 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0bf      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2222      	movs	r2, #34	; 0x22
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2210      	movs	r2, #16
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	893a      	ldrh	r2, [r7, #8]
 8007dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2bff      	cmp	r3, #255	; 0xff
 8007dca:	d90e      	bls.n	8007dea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	22ff      	movs	r2, #255	; 0xff
 8007dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	8979      	ldrh	r1, [r7, #10]
 8007dda:	4b52      	ldr	r3, [pc, #328]	; (8007f24 <HAL_I2C_Master_Receive+0x1e4>)
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f001 fc28 	bl	8009638 <I2C_TransferConfig>
 8007de8:	e06d      	b.n	8007ec6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	8979      	ldrh	r1, [r7, #10]
 8007dfc:	4b49      	ldr	r3, [pc, #292]	; (8007f24 <HAL_I2C_Master_Receive+0x1e4>)
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 fc17 	bl	8009638 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007e0a:	e05c      	b.n	8007ec6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	6a39      	ldr	r1, [r7, #32]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f001 fb3f 	bl	8009494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e07c      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d034      	beq.n	8007ec6 <HAL_I2C_Master_Receive+0x186>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d130      	bne.n	8007ec6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 fa54 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e04d      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2bff      	cmp	r3, #255	; 0xff
 8007e86:	d90e      	bls.n	8007ea6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	22ff      	movs	r2, #255	; 0xff
 8007e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	8979      	ldrh	r1, [r7, #10]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f001 fbca 	bl	8009638 <I2C_TransferConfig>
 8007ea4:	e00f      	b.n	8007ec6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	8979      	ldrh	r1, [r7, #10]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f001 fbb9 	bl	8009638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d19d      	bne.n	8007e0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	6a39      	ldr	r1, [r7, #32]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f001 faa1 	bl	800941c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e01a      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6859      	ldr	r1, [r3, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <HAL_I2C_Master_Receive+0x1e8>)
 8007ef8:	400b      	ands	r3, r1
 8007efa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e000      	b.n	8007f1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	80002400 	.word	0x80002400
 8007f28:	fe00e800 	.word	0xfe00e800

08007f2c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	461a      	mov	r2, r3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	817b      	strh	r3, [r7, #10]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d153      	bne.n	8007ff4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5a:	d101      	bne.n	8007f60 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e04a      	b.n	8007ff6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_I2C_Master_Receive_IT+0x42>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e043      	b.n	8007ff6 <HAL_I2C_Master_Receive_IT+0xca>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2222      	movs	r2, #34	; 0x22
 8007f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2210      	movs	r2, #16
 8007f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	893a      	ldrh	r2, [r7, #8]
 8007f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_I2C_Master_Receive_IT+0xd4>)
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4a18      	ldr	r2, [pc, #96]	; (8008004 <HAL_I2C_Master_Receive_IT+0xd8>)
 8007fa2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2bff      	cmp	r3, #255	; 0xff
 8007fac:	d906      	bls.n	8007fbc <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	22ff      	movs	r2, #255	; 0xff
 8007fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	e007      	b.n	8007fcc <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fca:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	8979      	ldrh	r1, [r7, #10]
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <HAL_I2C_Master_Receive_IT+0xdc>)
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f001 fb2c 	bl	8009638 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007fe8:	2102      	movs	r1, #2
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f001 fb52 	bl	8009694 <I2C_Enable_IRQ>

    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	ffff0000 	.word	0xffff0000
 8008004:	08008311 	.word	0x08008311
 8008008:	80002400 	.word	0x80002400

0800800c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	4608      	mov	r0, r1
 8008016:	4611      	mov	r1, r2
 8008018:	461a      	mov	r2, r3
 800801a:	4603      	mov	r3, r0
 800801c:	817b      	strh	r3, [r7, #10]
 800801e:	460b      	mov	r3, r1
 8008020:	813b      	strh	r3, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b20      	cmp	r3, #32
 8008030:	f040 80f9 	bne.w	8008226 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_I2C_Mem_Write+0x34>
 800803a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0ed      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_I2C_Mem_Write+0x4e>
 8008056:	2302      	movs	r3, #2
 8008058:	e0e6      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008062:	f7fd fa99 	bl	8005598 <HAL_GetTick>
 8008066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2319      	movs	r3, #25
 800806e:	2201      	movs	r2, #1
 8008070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 f951 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0d1      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2221      	movs	r2, #33	; 0x21
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2240      	movs	r2, #64	; 0x40
 8008090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080ac:	88f8      	ldrh	r0, [r7, #6]
 80080ae:	893a      	ldrh	r2, [r7, #8]
 80080b0:	8979      	ldrh	r1, [r7, #10]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	4603      	mov	r3, r0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fd0f 	bl	8008ae0 <I2C_RequestMemoryWrite>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0a9      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2bff      	cmp	r3, #255	; 0xff
 80080dc:	d90e      	bls.n	80080fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	8979      	ldrh	r1, [r7, #10]
 80080ec:	2300      	movs	r3, #0
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f001 fa9f 	bl	8009638 <I2C_TransferConfig>
 80080fa:	e00f      	b.n	800811c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	b2da      	uxtb	r2, r3
 800810c:	8979      	ldrh	r1, [r7, #10]
 800810e:	2300      	movs	r3, #0
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f001 fa8e 	bl	8009638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 f93b 	bl	800939c <I2C_WaitOnTXISFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e07b      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d034      	beq.n	80081d4 <HAL_I2C_Mem_Write+0x1c8>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	2b00      	cmp	r3, #0
 8008170:	d130      	bne.n	80081d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	2200      	movs	r2, #0
 800817a:	2180      	movs	r1, #128	; 0x80
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f001 f8cd 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e04d      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2bff      	cmp	r3, #255	; 0xff
 8008194:	d90e      	bls.n	80081b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	22ff      	movs	r2, #255	; 0xff
 800819a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	8979      	ldrh	r1, [r7, #10]
 80081a4:	2300      	movs	r3, #0
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f001 fa43 	bl	8009638 <I2C_TransferConfig>
 80081b2:	e00f      	b.n	80081d4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	8979      	ldrh	r1, [r7, #10]
 80081c6:	2300      	movs	r3, #0
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f001 fa32 	bl	8009638 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d19e      	bne.n	800811c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f001 f91a 	bl	800941c <I2C_WaitOnSTOPFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e01a      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2220      	movs	r2, #32
 80081f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6859      	ldr	r1, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <HAL_I2C_Mem_Write+0x224>)
 8008206:	400b      	ands	r3, r1
 8008208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e000      	b.n	8008228 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008226:	2302      	movs	r3, #2
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	fe00e800 	.word	0xfe00e800

08008234 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
  }
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
 800829c:	4613      	mov	r3, r2
 800829e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <I2C_Master_ISR_IT+0x1e>
 800832a:	2302      	movs	r3, #2
 800832c:	e115      	b.n	800855a <I2C_Master_ISR_IT+0x24a>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <I2C_Master_ISR_IT+0x5a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	091b      	lsrs	r3, r3, #4
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2210      	movs	r2, #16
 8008354:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	f043 0204 	orr.w	r2, r3, #4
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 ff92 	bl	800928c <I2C_Flush_TXDR>
 8008368:	e0e2      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d023      	beq.n	80083be <I2C_Master_ISR_IT+0xae>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	089b      	lsrs	r3, r3, #2
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01d      	beq.n	80083be <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 0304 	bic.w	r3, r3, #4
 8008388:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083bc:	e0b8      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01e      	beq.n	8008408 <I2C_Master_ISR_IT+0xf8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008406:	e093      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	09db      	lsrs	r3, r3, #7
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05e      	beq.n	80084d2 <I2C_Master_ISR_IT+0x1c2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d058      	beq.n	80084d2 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d041      	beq.n	80084ae <I2C_Master_ISR_IT+0x19e>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d13d      	bne.n	80084ae <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800843e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008444:	b29b      	uxth	r3, r3
 8008446:	2bff      	cmp	r3, #255	; 0xff
 8008448:	d90e      	bls.n	8008468 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	22ff      	movs	r2, #255	; 0xff
 800844e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008454:	b2da      	uxtb	r2, r3
 8008456:	8a79      	ldrh	r1, [r7, #18]
 8008458:	2300      	movs	r3, #0
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f001 f8e9 	bl	8009638 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008466:	e033      	b.n	80084d0 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800847a:	d00c      	beq.n	8008496 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	b2da      	uxtb	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008486:	8a79      	ldrh	r1, [r7, #18]
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	4603      	mov	r3, r0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f001 f8d2 	bl	8009638 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008494:	e01c      	b.n	80084d0 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849a:	b2da      	uxtb	r2, r3
 800849c:	8a79      	ldrh	r1, [r7, #18]
 800849e:	2300      	movs	r3, #0
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 f8c6 	bl	8009638 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084ac:	e010      	b.n	80084d0 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084bc:	d003      	beq.n	80084c6 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fbe4 	bl	8008c8c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084c4:	e034      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084c6:	2140      	movs	r1, #64	; 0x40
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fe1f 	bl	800910c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084ce:	e02f      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
 80084d0:	e02e      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	099b      	lsrs	r3, r3, #6
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d028      	beq.n	8008530 <I2C_Master_ISR_IT+0x220>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	099b      	lsrs	r3, r3, #6
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d022      	beq.n	8008530 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d119      	bne.n	8008528 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008502:	d015      	beq.n	8008530 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800850c:	d108      	bne.n	8008520 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	e007      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fbb3 	bl	8008c8c <I2C_ITMasterSeqCplt>
 8008526:	e003      	b.n	8008530 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008528:	2140      	movs	r1, #64	; 0x40
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fdee 	bl	800910c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <I2C_Master_ISR_IT+0x240>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008548:	6979      	ldr	r1, [r7, #20]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fc18 	bl	8008d80 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <I2C_Slave_ISR_IT+0x24>
 8008582:	2302      	movs	r3, #2
 8008584:	e0ec      	b.n	8008760 <I2C_Slave_ISR_IT+0x1fe>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <I2C_Slave_ISR_IT+0x4c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80085a6:	6939      	ldr	r1, [r7, #16]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fc85 	bl	8008eb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d04d      	beq.n	8008656 <I2C_Slave_ISR_IT+0xf4>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	091b      	lsrs	r3, r3, #4
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d047      	beq.n	8008656 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d128      	bne.n	8008622 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b28      	cmp	r3, #40	; 0x28
 80085da:	d108      	bne.n	80085ee <I2C_Slave_ISR_IT+0x8c>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085e2:	d104      	bne.n	80085ee <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80085e4:	6939      	ldr	r1, [r7, #16]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fd3c 	bl	8009064 <I2C_ITListenCplt>
 80085ec:	e032      	b.n	8008654 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b29      	cmp	r3, #41	; 0x29
 80085f8:	d10e      	bne.n	8008618 <I2C_Slave_ISR_IT+0xb6>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008600:	d00a      	beq.n	8008618 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2210      	movs	r2, #16
 8008608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fe3e 	bl	800928c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 fb78 	bl	8008d06 <I2C_ITSlaveSeqCplt>
 8008616:	e01d      	b.n	8008654 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2210      	movs	r2, #16
 800861e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008620:	e096      	b.n	8008750 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2210      	movs	r2, #16
 8008628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	f043 0204 	orr.w	r2, r3, #4
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d004      	beq.n	8008646 <I2C_Slave_ISR_IT+0xe4>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008642:	f040 8085 	bne.w	8008750 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fd5d 	bl	800910c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008652:	e07d      	b.n	8008750 <I2C_Slave_ISR_IT+0x1ee>
 8008654:	e07c      	b.n	8008750 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	089b      	lsrs	r3, r3, #2
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d030      	beq.n	80086c4 <I2C_Slave_ISR_IT+0x162>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	089b      	lsrs	r3, r3, #2
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02a      	beq.n	80086c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d018      	beq.n	80086aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d14f      	bne.n	8008754 <I2C_Slave_ISR_IT+0x1f2>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086ba:	d04b      	beq.n	8008754 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fb22 	bl	8008d06 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80086c2:	e047      	b.n	8008754 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <I2C_Slave_ISR_IT+0x184>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80086dc:	6939      	ldr	r1, [r7, #16]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fa52 	bl	8008b88 <I2C_ITAddrCplt>
 80086e4:	e037      	b.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d031      	beq.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d02b      	beq.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d018      	beq.n	800873a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	851a      	strh	r2, [r3, #40]	; 0x28
 8008738:	e00d      	b.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008740:	d002      	beq.n	8008748 <I2C_Slave_ISR_IT+0x1e6>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d106      	bne.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fadc 	bl	8008d06 <I2C_ITSlaveSeqCplt>
 800874e:	e002      	b.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008750:	bf00      	nop
 8008752:	e000      	b.n	8008756 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008754:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <I2C_Master_ISR_DMA+0x1a>
 800877e:	2302      	movs	r3, #2
 8008780:	e0e1      	b.n	8008946 <I2C_Master_ISR_DMA+0x1de>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	091b      	lsrs	r3, r3, #4
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d017      	beq.n	80087c6 <I2C_Master_ISR_DMA+0x5e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d011      	beq.n	80087c6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2210      	movs	r2, #16
 80087a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ae:	f043 0204 	orr.w	r2, r3, #4
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80087b6:	2112      	movs	r1, #18
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 ff6b 	bl	8009694 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fd64 	bl	800928c <I2C_Flush_TXDR>
 80087c4:	e0ba      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	09db      	lsrs	r3, r3, #7
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d072      	beq.n	80088b8 <I2C_Master_ISR_DMA+0x150>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	099b      	lsrs	r3, r3, #6
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d06c      	beq.n	80088b8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d04e      	beq.n	8008896 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008804:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880a:	b29b      	uxth	r3, r3
 800880c:	2bff      	cmp	r3, #255	; 0xff
 800880e:	d906      	bls.n	800881e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	22ff      	movs	r2, #255	; 0xff
 8008814:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e010      	b.n	8008840 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008830:	d003      	beq.n	800883a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e002      	b.n	8008840 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800883a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800883e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008844:	b2da      	uxtb	r2, r3
 8008846:	8a79      	ldrh	r1, [r7, #18]
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fef2 	bl	8009638 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b22      	cmp	r3, #34	; 0x22
 8008870:	d108      	bne.n	8008884 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008880:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008882:	e05b      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008892:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008894:	e052      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a4:	d003      	beq.n	80088ae <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f9f0 	bl	8008c8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80088ac:	e046      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80088ae:	2140      	movs	r1, #64	; 0x40
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fc2b 	bl	800910c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80088b6:	e041      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	099b      	lsrs	r3, r3, #6
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d029      	beq.n	8008918 <I2C_Master_ISR_DMA+0x1b0>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	099b      	lsrs	r3, r3, #6
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d023      	beq.n	8008918 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d119      	bne.n	800890e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088e8:	d027      	beq.n	800893a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088f2:	d108      	bne.n	8008906 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008902:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008904:	e019      	b.n	800893a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 f9c0 	bl	8008c8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800890c:	e015      	b.n	800893a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800890e:	2140      	movs	r1, #64	; 0x40
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fbfb 	bl	800910c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008916:	e010      	b.n	800893a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <I2C_Master_ISR_DMA+0x1d4>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fa24 	bl	8008d80 <I2C_ITMasterCplt>
 8008938:	e000      	b.n	800893c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800893a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <I2C_Slave_ISR_DMA+0x24>
 800896e:	2302      	movs	r3, #2
 8008970:	e0b1      	b.n	8008ad6 <I2C_Slave_ISR_DMA+0x188>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <I2C_Slave_ISR_DMA+0x4c>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	095b      	lsrs	r3, r3, #5
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fa8f 	bl	8008eb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8082 	beq.w	8008aac <I2C_Slave_ISR_DMA+0x15e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	091b      	lsrs	r3, r3, #4
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d07b      	beq.n	8008aac <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	0b9b      	lsrs	r3, r3, #14
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	0bdb      	lsrs	r3, r3, #15
 80089c4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d068      	beq.n	8008a9e <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00d      	beq.n	80089f0 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	0bdb      	lsrs	r3, r3, #15
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00d      	beq.n	8008a14 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	0b9b      	lsrs	r3, r3, #14
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8008a10:	2301      	movs	r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d128      	bne.n	8008a6c <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b28      	cmp	r3, #40	; 0x28
 8008a24:	d108      	bne.n	8008a38 <I2C_Slave_ISR_DMA+0xea>
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a2c:	d104      	bne.n	8008a38 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fb17 	bl	8009064 <I2C_ITListenCplt>
 8008a36:	e031      	b.n	8008a9c <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b29      	cmp	r3, #41	; 0x29
 8008a42:	d10e      	bne.n	8008a62 <I2C_Slave_ISR_DMA+0x114>
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a4a:	d00a      	beq.n	8008a62 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2210      	movs	r2, #16
 8008a52:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fc19 	bl	800928c <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f953 	bl	8008d06 <I2C_ITSlaveSeqCplt>
 8008a60:	e01c      	b.n	8008a9c <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2210      	movs	r2, #16
 8008a68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008a6a:	e01d      	b.n	8008aa8 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2210      	movs	r2, #16
 8008a72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f043 0204 	orr.w	r2, r3, #4
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <I2C_Slave_ISR_DMA+0x140>
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a8c:	d10c      	bne.n	8008aa8 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a92:	4619      	mov	r1, r3
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fb39 	bl	800910c <I2C_ITError>
      if (treatdmanack == 1U)
 8008a9a:	e005      	b.n	8008aa8 <I2C_Slave_ISR_DMA+0x15a>
 8008a9c:	e004      	b.n	8008aa8 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2210      	movs	r2, #16
 8008aa4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008aa6:	e011      	b.n	8008acc <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8008aa8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008aaa:	e00f      	b.n	8008acc <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	08db      	lsrs	r3, r3, #3
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <I2C_Slave_ISR_DMA+0x17e>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 f85e 	bl	8008b88 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	4608      	mov	r0, r1
 8008aea:	4611      	mov	r1, r2
 8008aec:	461a      	mov	r2, r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	817b      	strh	r3, [r7, #10]
 8008af2:	460b      	mov	r3, r1
 8008af4:	813b      	strh	r3, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	8979      	ldrh	r1, [r7, #10]
 8008b00:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <I2C_RequestMemoryWrite+0xa4>)
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fd95 	bl	8009638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	69b9      	ldr	r1, [r7, #24]
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fc42 	bl	800939c <I2C_WaitOnTXISFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e02c      	b.n	8008b7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d105      	bne.n	8008b34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	629a      	str	r2, [r3, #40]	; 0x28
 8008b32:	e015      	b.n	8008b60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	69b9      	ldr	r1, [r7, #24]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fc28 	bl	800939c <I2C_WaitOnTXISFlagUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e012      	b.n	8008b7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b56:	893b      	ldrh	r3, [r7, #8]
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2200      	movs	r2, #0
 8008b68:	2180      	movs	r1, #128	; 0x80
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fbd6 	bl	800931c <I2C_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	80002000 	.word	0x80002000

08008b88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b9e:	2b28      	cmp	r3, #40	; 0x28
 8008ba0:	d168      	bne.n	8008c74 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	0c1b      	lsrs	r3, r3, #16
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008bc0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008bdc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d137      	bne.n	8008c56 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008be6:	897b      	ldrh	r3, [r7, #10]
 8008be8:	09db      	lsrs	r3, r3, #7
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	89bb      	ldrh	r3, [r7, #12]
 8008bee:	4053      	eors	r3, r2
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	f003 0306 	and.w	r3, r3, #6
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d11c      	bne.n	8008c34 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008bfa:	897b      	ldrh	r3, [r7, #10]
 8008bfc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d139      	bne.n	8008c84 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c26:	89ba      	ldrh	r2, [r7, #12]
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fb2f 	bl	8008290 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008c32:	e027      	b.n	8008c84 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c38:	2104      	movs	r1, #4
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fd98 	bl	8009770 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c48:	89ba      	ldrh	r2, [r7, #12]
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fb1e 	bl	8008290 <HAL_I2C_AddrCallback>
}
 8008c54:	e016      	b.n	8008c84 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c56:	2104      	movs	r1, #4
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fd89 	bl	8009770 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c66:	89ba      	ldrh	r2, [r7, #12]
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff fb0f 	bl	8008290 <HAL_I2C_AddrCallback>
}
 8008c72:	e007      	b.n	8008c84 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008c84:	bf00      	nop
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b21      	cmp	r3, #33	; 0x21
 8008ca6:	d115      	bne.n	8008cd4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2211      	movs	r2, #17
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fd56 	bl	8009770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fb f81b 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cd2:	e014      	b.n	8008cfe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2212      	movs	r2, #18
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ce8:	2102      	movs	r1, #2
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fd40 	bl	8009770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7fb f81b 	bl	8003d34 <HAL_I2C_MasterRxCpltCallback>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b29      	cmp	r3, #41	; 0x29
 8008d20:	d112      	bne.n	8008d48 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2228      	movs	r2, #40	; 0x28
 8008d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2221      	movs	r2, #33	; 0x21
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008d30:	2101      	movs	r1, #1
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fd1c 	bl	8009770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff fa91 	bl	8008268 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d46:	e017      	b.n	8008d78 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b2a      	cmp	r3, #42	; 0x2a
 8008d52:	d111      	bne.n	8008d78 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2228      	movs	r2, #40	; 0x28
 8008d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2222      	movs	r2, #34	; 0x22
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008d62:	2102      	movs	r1, #2
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fd03 	bl	8009770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fa82 	bl	800827c <HAL_I2C_SlaveRxCpltCallback>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6859      	ldr	r1, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b44      	ldr	r3, [pc, #272]	; (8008eb0 <I2C_ITMasterCplt+0x130>)
 8008d9e:	400b      	ands	r3, r1
 8008da0:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a40      	ldr	r2, [pc, #256]	; (8008eb4 <I2C_ITMasterCplt+0x134>)
 8008db2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	091b      	lsrs	r3, r3, #4
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dcc:	f043 0204 	orr.w	r2, r3, #4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa59 	bl	800928c <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008dda:	2103      	movs	r1, #3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fcc7 	bl	8009770 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b60      	cmp	r3, #96	; 0x60
 8008df2:	d002      	beq.n	8008dfa <I2C_ITMasterCplt+0x7a>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d006      	beq.n	8008e08 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f983 	bl	800910c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e06:	e04e      	b.n	8008ea6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b21      	cmp	r3, #33	; 0x21
 8008e12:	d121      	bne.n	8008e58 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d10b      	bne.n	8008e40 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fa41 	bl	80082c0 <HAL_I2C_MemTxCpltCallback>
}
 8008e3e:	e032      	b.n	8008ea6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fa ff59 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
}
 8008e56:	e026      	b.n	8008ea6 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b22      	cmp	r3, #34	; 0x22
 8008e62:	d120      	bne.n	8008ea6 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d10b      	bne.n	8008e90 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fa23 	bl	80082d4 <HAL_I2C_MemRxCpltCallback>
}
 8008e8e:	e00a      	b.n	8008ea6 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7fa ff47 	bl	8003d34 <HAL_I2C_MasterRxCpltCallback>
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	fe00e800 	.word	0xfe00e800
 8008eb4:	ffff0000 	.word	0xffff0000

08008eb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008ed6:	2107      	movs	r1, #7
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc49 	bl	8009770 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b58      	ldr	r3, [pc, #352]	; (800905c <I2C_ITSlaveCplt+0x1a4>)
 8008efa:	400b      	ands	r3, r1
 8008efc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f9c4 	bl	800928c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	0b9b      	lsrs	r3, r3, #14
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d018      	beq.n	8008f4a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f26:	e010      	b.n	8008f4a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	0bdb      	lsrs	r3, r3, #15
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	089b      	lsrs	r3, r3, #2
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d020      	beq.n	8008f98 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f023 0304 	bic.w	r3, r3, #4
 8008f5c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa6:	f043 0204 	orr.w	r2, r3, #4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d010      	beq.n	8008fec <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f89b 	bl	800910c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b28      	cmp	r3, #40	; 0x28
 8008fe0:	d138      	bne.n	8009054 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f83d 	bl	8009064 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fea:	e033      	b.n	8009054 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ff4:	d011      	beq.n	800901a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7ff fe85 	bl	8008d06 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a18      	ldr	r2, [pc, #96]	; (8009060 <I2C_ITSlaveCplt+0x1a8>)
 8009000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff f94a 	bl	80082ac <HAL_I2C_ListenCpltCallback>
}
 8009018:	e01c      	b.n	8009054 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b22      	cmp	r3, #34	; 0x22
 8009024:	d10b      	bne.n	800903e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff f920 	bl	800827c <HAL_I2C_SlaveRxCpltCallback>
}
 800903c:	e00a      	b.n	8009054 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff f90a 	bl	8008268 <HAL_I2C_SlaveTxCpltCallback>
}
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	fe00e800 	.word	0xfe00e800
 8009060:	ffff0000 	.word	0xffff0000

08009064 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a25      	ldr	r2, [pc, #148]	; (8009108 <I2C_ITListenCplt+0xa4>)
 8009072:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d022      	beq.n	80090e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d012      	beq.n	80090e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090da:	f043 0204 	orr.w	r2, r3, #4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80090e2:	2107      	movs	r1, #7
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fb43 	bl	8009770 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2210      	movs	r2, #16
 80090f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff f8d6 	bl	80082ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	ffff0000 	.word	0xffff0000

0800910c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800911c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a55      	ldr	r2, [pc, #340]	; (8009280 <I2C_ITError+0x174>)
 800912a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	2b28      	cmp	r3, #40	; 0x28
 8009142:	d005      	beq.n	8009150 <I2C_ITError+0x44>
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	2b29      	cmp	r3, #41	; 0x29
 8009148:	d002      	beq.n	8009150 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b2a      	cmp	r3, #42	; 0x2a
 800914e:	d10e      	bne.n	800916e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009150:	2103      	movs	r1, #3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb0c 	bl	8009770 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2228      	movs	r2, #40	; 0x28
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a46      	ldr	r2, [pc, #280]	; (8009284 <I2C_ITError+0x178>)
 800916a:	635a      	str	r2, [r3, #52]	; 0x34
 800916c:	e013      	b.n	8009196 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800916e:	2107      	movs	r1, #7
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fafd 	bl	8009770 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b60      	cmp	r3, #96	; 0x60
 8009180:	d003      	beq.n	800918a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a4:	d123      	bne.n	80091ee <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d05c      	beq.n	8009278 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	4a31      	ldr	r2, [pc, #196]	; (8009288 <I2C_ITError+0x17c>)
 80091c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe f8e2 	bl	800739c <HAL_DMA_Abort_IT>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d04c      	beq.n	8009278 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091ec:	e044      	b.n	8009278 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091fc:	d123      	bne.n	8009246 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800920c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d030      	beq.n	8009278 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	4a1b      	ldr	r2, [pc, #108]	; (8009288 <I2C_ITError+0x17c>)
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe f8b6 	bl	800739c <HAL_DMA_Abort_IT>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d020      	beq.n	8009278 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
}
 8009244:	e018      	b.n	8009278 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b60      	cmp	r3, #96	; 0x60
 8009250:	d10b      	bne.n	800926a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff f84a 	bl	80082fc <HAL_I2C_AbortCpltCallback>
}
 8009268:	e006      	b.n	8009278 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff f838 	bl	80082e8 <HAL_I2C_ErrorCallback>
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	ffff0000 	.word	0xffff0000
 8009284:	08008563 	.word	0x08008563
 8009288:	080092d5 	.word	0x080092d5

0800928c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d103      	bne.n	80092aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d007      	beq.n	80092c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	619a      	str	r2, [r3, #24]
  }
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	2200      	movs	r2, #0
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ee:	2200      	movs	r2, #0
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b60      	cmp	r3, #96	; 0x60
 80092fc:	d107      	bne.n	800930e <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2220      	movs	r2, #32
 8009302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7fe fff8 	bl	80082fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800930c:	e002      	b.n	8009314 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7fe ffea 	bl	80082e8 <HAL_I2C_ErrorCallback>
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	4613      	mov	r3, r2
 800932a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800932c:	e022      	b.n	8009374 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d01e      	beq.n	8009374 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009336:	f7fc f92f 	bl	8005598 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d113      	bne.n	8009374 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009350:	f043 0220 	orr.w	r2, r3, #32
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e00f      	b.n	8009394 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4013      	ands	r3, r2
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	bf0c      	ite	eq
 8009384:	2301      	moveq	r3, #1
 8009386:	2300      	movne	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	429a      	cmp	r2, r3
 8009390:	d0cd      	beq.n	800932e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093a8:	e02c      	b.n	8009404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 f8dc 	bl	800956c <I2C_IsAcknowledgeFailed>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e02a      	b.n	8009414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c4:	d01e      	beq.n	8009404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c6:	f7fc f8e7 	bl	8005598 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d302      	bcc.n	80093dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d113      	bne.n	8009404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e0:	f043 0220 	orr.w	r2, r3, #32
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e007      	b.n	8009414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b02      	cmp	r3, #2
 8009410:	d1cb      	bne.n	80093aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009428:	e028      	b.n	800947c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 f89c 	bl	800956c <I2C_IsAcknowledgeFailed>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e026      	b.n	800948c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943e:	f7fc f8ab 	bl	8005598 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	429a      	cmp	r2, r3
 800944c:	d302      	bcc.n	8009454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d113      	bne.n	800947c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009458:	f043 0220 	orr.w	r2, r3, #32
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e007      	b.n	800948c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b20      	cmp	r3, #32
 8009488:	d1cf      	bne.n	800942a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094a0:	e055      	b.n	800954e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f860 	bl	800956c <I2C_IsAcknowledgeFailed>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e053      	b.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d129      	bne.n	8009518 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d105      	bne.n	80094de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	e03f      	b.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2220      	movs	r2, #32
 80094e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6859      	ldr	r1, [r3, #4]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80094f2:	400b      	ands	r3, r1
 80094f4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e022      	b.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009518:	f7fc f83e 	bl	8005598 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	d302      	bcc.n	800952e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10f      	bne.n	800954e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e007      	b.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b04      	cmp	r3, #4
 800955a:	d1a2      	bne.n	80094a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	fe00e800 	.word	0xfe00e800

0800956c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b10      	cmp	r3, #16
 8009584:	d151      	bne.n	800962a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009586:	e022      	b.n	80095ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958e:	d01e      	beq.n	80095ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009590:	f7fc f802 	bl	8005598 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <I2C_IsAcknowledgeFailed+0x3a>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d113      	bne.n	80095ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	f043 0220 	orr.w	r2, r3, #32
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e02e      	b.n	800962c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d1d5      	bne.n	8009588 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2210      	movs	r2, #16
 80095e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2220      	movs	r2, #32
 80095ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f7ff fe4d 	bl	800928c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6859      	ldr	r1, [r3, #4]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <I2C_IsAcknowledgeFailed+0xc8>)
 80095fe:	400b      	ands	r3, r1
 8009600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	fe00e800 	.word	0xfe00e800

08009638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	817b      	strh	r3, [r7, #10]
 8009646:	4613      	mov	r3, r2
 8009648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	0d5b      	lsrs	r3, r3, #21
 8009654:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009658:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <I2C_TransferConfig+0x58>)
 800965a:	430b      	orrs	r3, r1
 800965c:	43db      	mvns	r3, r3
 800965e:	ea02 0103 	and.w	r1, r2, r3
 8009662:	897b      	ldrh	r3, [r7, #10]
 8009664:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009668:	7a7b      	ldrb	r3, [r7, #9]
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	431a      	orrs	r2, r3
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	431a      	orrs	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009682:	bf00      	nop
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	03ff63ff 	.word	0x03ff63ff

08009694 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	4a2f      	ldr	r2, [pc, #188]	; (8009768 <I2C_Enable_IRQ+0xd4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80096b2:	4a2e      	ldr	r2, [pc, #184]	; (800976c <I2C_Enable_IRQ+0xd8>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d124      	bne.n	8009702 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80096b8:	887b      	ldrh	r3, [r7, #2]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80096c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80096ca:	887b      	ldrh	r3, [r7, #2]
 80096cc:	f003 0311 	and.w	r3, r3, #17
 80096d0:	2b11      	cmp	r3, #17
 80096d2:	d103      	bne.n	80096dc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80096da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80096dc:	887b      	ldrh	r3, [r7, #2]
 80096de:	f003 0312 	and.w	r3, r3, #18
 80096e2:	2b12      	cmp	r3, #18
 80096e4:	d103      	bne.n	80096ee <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f043 0320 	orr.w	r3, r3, #32
 80096ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80096ee:	887b      	ldrh	r3, [r7, #2]
 80096f0:	f003 0312 	and.w	r3, r3, #18
 80096f4:	2b12      	cmp	r3, #18
 80096f6:	d128      	bne.n	800974a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fe:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009700:	e023      	b.n	800974a <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009702:	887b      	ldrh	r3, [r7, #2]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009712:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009714:	887b      	ldrh	r3, [r7, #2]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009724:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009726:	887b      	ldrh	r3, [r7, #2]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009736:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009738:	887b      	ldrh	r3, [r7, #2]
 800973a:	f003 0312 	and.w	r3, r3, #18
 800973e:	2b12      	cmp	r3, #18
 8009740:	d103      	bne.n	800974a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f043 0320 	orr.w	r3, r3, #32
 8009748:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6819      	ldr	r1, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	430a      	orrs	r2, r1
 8009758:	601a      	str	r2, [r3, #0]
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	08008769 	.word	0x08008769
 800976c:	0800894f 	.word	0x0800894f

08009770 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009780:	887b      	ldrh	r3, [r7, #2]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00f      	beq.n	80097aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009790:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800979e:	2b28      	cmp	r3, #40	; 0x28
 80097a0:	d003      	beq.n	80097aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80097a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80097aa:	887b      	ldrh	r3, [r7, #2]
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00f      	beq.n	80097d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80097ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097c8:	2b28      	cmp	r3, #40	; 0x28
 80097ca:	d003      	beq.n	80097d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80097d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80097d4:	887b      	ldrh	r3, [r7, #2]
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80097e4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80097e6:	887b      	ldrh	r3, [r7, #2]
 80097e8:	f003 0311 	and.w	r3, r3, #17
 80097ec:	2b11      	cmp	r3, #17
 80097ee:	d103      	bne.n	80097f8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80097f6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80097f8:	887b      	ldrh	r3, [r7, #2]
 80097fa:	f003 0312 	and.w	r3, r3, #18
 80097fe:	2b12      	cmp	r3, #18
 8009800:	d103      	bne.n	800980a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800980a:	887b      	ldrh	r3, [r7, #2]
 800980c:	f003 0312 	and.w	r3, r3, #18
 8009810:	2b12      	cmp	r3, #18
 8009812:	d103      	bne.n	800981c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	43da      	mvns	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	400a      	ands	r2, r1
 800982c:	601a      	str	r2, [r3, #0]
}
 800982e:	bf00      	nop
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b20      	cmp	r3, #32
 800984e:	d138      	bne.n	80098c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800985a:	2302      	movs	r3, #2
 800985c:	e032      	b.n	80098c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2224      	movs	r2, #36	; 0x24
 800986a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0201 	bic.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800988c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0201 	orr.w	r2, r2, #1
 80098ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e000      	b.n	80098c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80098c2:	2302      	movs	r3, #2
  }
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d139      	bne.n	800995a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d101      	bne.n	80098f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098f0:	2302      	movs	r3, #2
 80098f2:	e033      	b.n	800995c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2224      	movs	r2, #36	; 0x24
 8009900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0201 	bic.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0201 	orr.w	r2, r2, #1
 8009944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e000      	b.n	800995c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800995a:	2302      	movs	r3, #2
  }
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800996c:	4b05      	ldr	r3, [pc, #20]	; (8009984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a04      	ldr	r2, [pc, #16]	; (8009984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009976:	6013      	str	r3, [r2, #0]
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	58000400 	.word	0x58000400

08009988 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009994:	4618      	mov	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	58000400 	.word	0x58000400

080099a4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80099a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b6:	d101      	bne.n	80099bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <LL_RCC_HSE_EnableBypass>:
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80099cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <LL_RCC_HSE_DisableBypass>:
{
 80099e6:	b480      	push	{r7}
 80099e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80099ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099f8:	6013      	str	r3, [r2, #0]
}
 80099fa:	bf00      	nop
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <LL_RCC_HSE_Enable>:
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a16:	6013      	str	r3, [r2, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <LL_RCC_HSE_Disable>:
{
 8009a22:	b480      	push	{r7}
 8009a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a34:	6013      	str	r3, [r2, #0]
}
 8009a36:	bf00      	nop
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <LL_RCC_HSE_IsReady>:
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a52:	d101      	bne.n	8009a58 <LL_RCC_HSE_IsReady+0x18>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <LL_RCC_HSE_IsReady+0x1a>
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <LL_RCC_HSI_Enable>:
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a76:	6013      	str	r3, [r2, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <LL_RCC_HSI_Disable>:
{
 8009a82:	b480      	push	{r7}
 8009a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8009a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a94:	6013      	str	r3, [r2, #0]
}
 8009a96:	bf00      	nop
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <LL_RCC_HSI_IsReady>:
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab2:	d101      	bne.n	8009ab8 <LL_RCC_HSI_IsReady+0x18>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <LL_RCC_HSI_IsReady+0x1a>
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	604b      	str	r3, [r1, #4]
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <LL_RCC_HSI48_Enable>:
{
 8009aee:	b480      	push	{r7}
 8009af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009b06:	bf00      	nop
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <LL_RCC_HSI48_Disable>:
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b20:	f023 0301 	bic.w	r3, r3, #1
 8009b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009b28:	bf00      	nop
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <LL_RCC_HSI48_IsReady>:
{
 8009b32:	b480      	push	{r7}
 8009b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d101      	bne.n	8009b4a <LL_RCC_HSI48_IsReady+0x18>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <LL_RCC_HSI48_IsReady+0x1a>
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <LL_RCC_LSE_Enable>:
{
 8009b56:	b480      	push	{r7}
 8009b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009b6e:	bf00      	nop
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <LL_RCC_LSE_Disable>:
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009b90:	bf00      	nop
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <LL_RCC_LSE_EnableBypass>:
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009baa:	f043 0304 	orr.w	r3, r3, #4
 8009bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009bb2:	bf00      	nop
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <LL_RCC_LSE_DisableBypass>:
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bcc:	f023 0304 	bic.w	r3, r3, #4
 8009bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009bd4:	bf00      	nop
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <LL_RCC_LSE_IsReady>:
{
 8009bde:	b480      	push	{r7}
 8009be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d101      	bne.n	8009bf6 <LL_RCC_LSE_IsReady+0x18>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <LL_RCC_LSE_IsReady+0x1a>
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <LL_RCC_LSI1_Enable>:
{
 8009c02:	b480      	push	{r7}
 8009c04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <LL_RCC_LSI1_Disable>:
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c34:	f023 0301 	bic.w	r3, r3, #1
 8009c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009c3c:	bf00      	nop
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <LL_RCC_LSI1_IsReady>:
{
 8009c46:	b480      	push	{r7}
 8009c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d101      	bne.n	8009c5e <LL_RCC_LSI1_IsReady+0x18>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <LL_RCC_LSI1_IsReady+0x1a>
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <LL_RCC_LSI2_Enable>:
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c7a:	f043 0304 	orr.w	r3, r3, #4
 8009c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009c82:	bf00      	nop
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <LL_RCC_LSI2_Disable>:
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c9c:	f023 0304 	bic.w	r3, r3, #4
 8009ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ca4:	bf00      	nop
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <LL_RCC_LSI2_IsReady>:
{
 8009cae:	b480      	push	{r7}
 8009cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8009cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d101      	bne.n	8009cc6 <LL_RCC_LSI2_IsReady+0x18>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <LL_RCC_LSI2_IsReady+0x1a>
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <LL_RCC_LSI2_SetTrimming>:
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ce2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <LL_RCC_MSI_Enable>:
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	6013      	str	r3, [r2, #0]
}
 8009d14:	bf00      	nop
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <LL_RCC_MSI_Disable>:
{
 8009d1e:	b480      	push	{r7}
 8009d20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	6013      	str	r3, [r2, #0]
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <LL_RCC_MSI_IsReady>:
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d101      	bne.n	8009d52 <LL_RCC_MSI_IsReady+0x16>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <LL_RCC_MSI_IsReady+0x18>
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <LL_RCC_MSI_SetRange>:
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	600b      	str	r3, [r1, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <LL_RCC_MSI_GetRange>:
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8009d9c:	d901      	bls.n	8009da2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009d9e:	23b0      	movs	r3, #176	; 0xb0
 8009da0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8009da2:	687b      	ldr	r3, [r7, #4]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	604b      	str	r3, [r1, #4]
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <LL_RCC_SetSysClkSource>:
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f023 0203 	bic.w	r2, r3, #3
 8009dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <LL_RCC_GetSysClkSource>:
{
 8009e02:	b480      	push	{r7}
 8009e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 030c 	and.w	r3, r3, #12
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <LL_RCC_SetAHBPrescaler>:
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	608b      	str	r3, [r1, #8]
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <LL_C2_RCC_SetAHBPrescaler>:
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8009e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <LL_RCC_SetAHB4Prescaler>:
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8009e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009e7e:	f023 020f 	bic.w	r2, r3, #15
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	091b      	lsrs	r3, r3, #4
 8009e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <LL_RCC_SetAPB1Prescaler>:
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	608b      	str	r3, [r1, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <LL_RCC_SetAPB2Prescaler>:
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	608b      	str	r3, [r1, #8]
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <LL_RCC_GetAHBPrescaler>:
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <LL_C2_RCC_GetAHBPrescaler>:
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8009f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <LL_RCC_GetAHB4Prescaler>:
{
 8009f1e:	b480      	push	{r7}
 8009f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <LL_RCC_GetAPB1Prescaler>:
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <LL_RCC_GetAPB2Prescaler>:
{
 8009f52:	b480      	push	{r7}
 8009f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f7c:	6013      	str	r3, [r2, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f9a:	6013      	str	r3, [r2, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fb8:	d101      	bne.n	8009fbe <LL_RCC_PLL_IsReady+0x18>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e000      	b.n	8009fc0 <LL_RCC_PLL_IsReady+0x1a>
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	0a1b      	lsrs	r3, r3, #8
 8009fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f003 0303 	and.w	r3, r3, #3
}
 800a022:	4618      	mov	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03e:	d101      	bne.n	800a044 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a064:	d101      	bne.n	800a06a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a076:	b480      	push	{r7}
 800a078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a07a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a07e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a08a:	d101      	bne.n	800a090 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a0a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0ae:	d101      	bne.n	800a0b4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0d2:	d101      	bne.n	800a0d8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b08b      	sub	sp, #44	; 0x2c
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e34b      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 808f 	beq.w	800a222 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a104:	f7ff fe7d 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800a108:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a10a:	f7ff ff83 	bl	800a014 <LL_RCC_PLL_GetMainSource>
 800a10e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <HAL_RCC_OscConfig+0x3e>
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	2b0c      	cmp	r3, #12
 800a11a:	d149      	bne.n	800a1b0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d146      	bne.n	800a1b0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a122:	f7ff fe0b 	bl	8009d3c <LL_RCC_MSI_IsReady>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <HAL_RCC_OscConfig+0x54>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e32a      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a13c:	f7ff fe23 	bl	8009d86 <LL_RCC_MSI_GetRange>
 800a140:	4603      	mov	r3, r0
 800a142:	429c      	cmp	r4, r3
 800a144:	d914      	bls.n	800a170 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fd40 	bl	800abd0 <RCC_SetFlashLatencyFromMSIRange>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e319      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff fdfd 	bl	8009d5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fe21 	bl	8009db0 <LL_RCC_MSI_SetCalibTrimming>
 800a16e:	e013      	b.n	800a198 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fdf2 	bl	8009d5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fe16 	bl	8009db0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fd21 	bl	800abd0 <RCC_SetFlashLatencyFromMSIRange>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e2fa      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800a198:	f7fa ff0c 	bl	8004fb4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a19c:	4bb4      	ldr	r3, [pc, #720]	; (800a470 <HAL_RCC_OscConfig+0x38c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fa fdeb 	bl	8004d7c <HAL_InitTick>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d039      	beq.n	800a220 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e2ee      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01e      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a1b8:	f7ff fda2 	bl	8009d00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1bc:	f7fb f9ec 	bl	8005598 <HAL_GetTick>
 800a1c0:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1c4:	f7fb f9e8 	bl	8005598 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e2db      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a1d6:	f7ff fdb1 	bl	8009d3c <LL_RCC_MSI_IsReady>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0f1      	beq.n	800a1c4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff fdba 	bl	8009d5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff fdde 	bl	8009db0 <LL_RCC_MSI_SetCalibTrimming>
 800a1f4:	e015      	b.n	800a222 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a1f6:	f7ff fd92 	bl	8009d1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1fa:	f7fb f9cd 	bl	8005598 <HAL_GetTick>
 800a1fe:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a202:	f7fb f9c9 	bl	8005598 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e2bc      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a214:	f7ff fd92 	bl	8009d3c <LL_RCC_MSI_IsReady>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1f1      	bne.n	800a202 <HAL_RCC_OscConfig+0x11e>
 800a21e:	e000      	b.n	800a222 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d05a      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a22e:	f7ff fde8 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800a232:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a234:	f7ff feee 	bl	800a014 <LL_RCC_PLL_GetMainSource>
 800a238:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d005      	beq.n	800a24c <HAL_RCC_OscConfig+0x168>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b0c      	cmp	r3, #12
 800a244:	d10d      	bne.n	800a262 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d10a      	bne.n	800a262 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a24c:	f7ff fbf8 	bl	8009a40 <LL_RCC_HSE_IsReady>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d045      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x1fe>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d141      	bne.n	800a2e2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e295      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a26a:	d102      	bne.n	800a272 <HAL_RCC_OscConfig+0x18e>
 800a26c:	f7ff fbca 	bl	8009a04 <LL_RCC_HSE_Enable>
 800a270:	e00d      	b.n	800a28e <HAL_RCC_OscConfig+0x1aa>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a27a:	d104      	bne.n	800a286 <HAL_RCC_OscConfig+0x1a2>
 800a27c:	f7ff fba4 	bl	80099c8 <LL_RCC_HSE_EnableBypass>
 800a280:	f7ff fbc0 	bl	8009a04 <LL_RCC_HSE_Enable>
 800a284:	e003      	b.n	800a28e <HAL_RCC_OscConfig+0x1aa>
 800a286:	f7ff fbcc 	bl	8009a22 <LL_RCC_HSE_Disable>
 800a28a:	f7ff fbac 	bl	80099e6 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d012      	beq.n	800a2bc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a296:	f7fb f97f 	bl	8005598 <HAL_GetTick>
 800a29a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a29c:	e008      	b.n	800a2b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a29e:	f7fb f97b 	bl	8005598 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2b64      	cmp	r3, #100	; 0x64
 800a2aa:	d901      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e26e      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a2b0:	f7ff fbc6 	bl	8009a40 <LL_RCC_HSE_IsReady>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f1      	beq.n	800a29e <HAL_RCC_OscConfig+0x1ba>
 800a2ba:	e013      	b.n	800a2e4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2bc:	f7fb f96c 	bl	8005598 <HAL_GetTick>
 800a2c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2c4:	f7fb f968 	bl	8005598 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b64      	cmp	r3, #100	; 0x64
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e25b      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a2d6:	f7ff fbb3 	bl	8009a40 <LL_RCC_HSE_IsReady>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f1      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x1e0>
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d051      	beq.n	800a394 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2f0:	f7ff fd87 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800a2f4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2f6:	f7ff fe8d 	bl	800a014 <LL_RCC_PLL_GetMainSource>
 800a2fa:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d005      	beq.n	800a30e <HAL_RCC_OscConfig+0x22a>
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b0c      	cmp	r3, #12
 800a306:	d113      	bne.n	800a330 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d110      	bne.n	800a330 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a30e:	f7ff fbc7 	bl	8009aa0 <LL_RCC_HSI_IsReady>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_RCC_OscConfig+0x240>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e234      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fbcb 	bl	8009ac4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a32e:	e031      	b.n	800a394 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d019      	beq.n	800a36c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a338:	f7ff fb94 	bl	8009a64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a33c:	f7fb f92c 	bl	8005598 <HAL_GetTick>
 800a340:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a342:	e008      	b.n	800a356 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a344:	f7fb f928 	bl	8005598 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d901      	bls.n	800a356 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e21b      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a356:	f7ff fba3 	bl	8009aa0 <LL_RCC_HSI_IsReady>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0f1      	beq.n	800a344 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fbad 	bl	8009ac4 <LL_RCC_HSI_SetCalibTrimming>
 800a36a:	e013      	b.n	800a394 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a36c:	f7ff fb89 	bl	8009a82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a370:	f7fb f912 	bl	8005598 <HAL_GetTick>
 800a374:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a378:	f7fb f90e 	bl	8005598 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e201      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a38a:	f7ff fb89 	bl	8009aa0 <LL_RCC_HSI_IsReady>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1f1      	bne.n	800a378 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d106      	bne.n	800a3ae <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80a2 	beq.w	800a4f2 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d075      	beq.n	800a4a2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d046      	beq.n	800a450 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800a3c2:	f7ff fc40 	bl	8009c46 <LL_RCC_LSI1_IsReady>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d113      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800a3cc:	f7ff fc19 	bl	8009c02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3d0:	f7fb f8e2 	bl	8005598 <HAL_GetTick>
 800a3d4:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a3d6:	e008      	b.n	800a3ea <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a3d8:	f7fb f8de 	bl	8005598 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e1d1      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800a3ea:	f7ff fc2c 	bl	8009c46 <LL_RCC_LSI1_IsReady>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0f1      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800a3f4:	f7ff fc39 	bl	8009c6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7fb f8ce 	bl	8005598 <HAL_GetTick>
 800a3fc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a400:	f7fb f8ca 	bl	8005598 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e1bd      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800a412:	f7ff fc4c 	bl	8009cae <LL_RCC_LSI2_IsReady>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0f1      	beq.n	800a400 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff fc56 	bl	8009cd2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800a426:	f7ff fbfd 	bl	8009c24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42a:	f7fb f8b5 	bl	8005598 <HAL_GetTick>
 800a42e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a432:	f7fb f8b1 	bl	8005598 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e1a4      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800a444:	f7ff fbff 	bl	8009c46 <LL_RCC_LSI1_IsReady>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f1      	bne.n	800a432 <HAL_RCC_OscConfig+0x34e>
 800a44e:	e050      	b.n	800a4f2 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800a450:	f7ff fbd7 	bl	8009c02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a454:	f7fb f8a0 	bl	8005598 <HAL_GetTick>
 800a458:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a45a:	e00b      	b.n	800a474 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a45c:	f7fb f89c 	bl	8005598 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d904      	bls.n	800a474 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e18f      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
 800a46e:	bf00      	nop
 800a470:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800a474:	f7ff fbe7 	bl	8009c46 <LL_RCC_LSI1_IsReady>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0ee      	beq.n	800a45c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800a47e:	f7ff fc05 	bl	8009c8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a482:	e008      	b.n	800a496 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a484:	f7fb f888 	bl	8005598 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d901      	bls.n	800a496 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e17b      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800a496:	f7ff fc0a 	bl	8009cae <LL_RCC_LSI2_IsReady>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f1      	bne.n	800a484 <HAL_RCC_OscConfig+0x3a0>
 800a4a0:	e027      	b.n	800a4f2 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800a4a2:	f7ff fbf3 	bl	8009c8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4a6:	f7fb f877 	bl	8005598 <HAL_GetTick>
 800a4aa:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800a4ae:	f7fb f873 	bl	8005598 <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e166      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800a4c0:	f7ff fbf5 	bl	8009cae <LL_RCC_LSI2_IsReady>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f1      	bne.n	800a4ae <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800a4ca:	f7ff fbab 	bl	8009c24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4ce:	f7fb f863 	bl	8005598 <HAL_GetTick>
 800a4d2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a4d4:	e008      	b.n	800a4e8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a4d6:	f7fb f85f 	bl	8005598 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e152      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a4e8:	f7ff fbad 	bl	8009c46 <LL_RCC_LSI1_IsReady>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f1      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d05b      	beq.n	800a5b6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4fe:	4ba6      	ldr	r3, [pc, #664]	; (800a798 <HAL_RCC_OscConfig+0x6b4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a506:	2b00      	cmp	r3, #0
 800a508:	d114      	bne.n	800a534 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a50a:	f7ff fa2d 	bl	8009968 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a50e:	f7fb f843 	bl	8005598 <HAL_GetTick>
 800a512:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a516:	f7fb f83f 	bl	8005598 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e132      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a528:	4b9b      	ldr	r3, [pc, #620]	; (800a798 <HAL_RCC_OscConfig+0x6b4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0f0      	beq.n	800a516 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d102      	bne.n	800a542 <HAL_RCC_OscConfig+0x45e>
 800a53c:	f7ff fb0b 	bl	8009b56 <LL_RCC_LSE_Enable>
 800a540:	e00c      	b.n	800a55c <HAL_RCC_OscConfig+0x478>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b05      	cmp	r3, #5
 800a548:	d104      	bne.n	800a554 <HAL_RCC_OscConfig+0x470>
 800a54a:	f7ff fb26 	bl	8009b9a <LL_RCC_LSE_EnableBypass>
 800a54e:	f7ff fb02 	bl	8009b56 <LL_RCC_LSE_Enable>
 800a552:	e003      	b.n	800a55c <HAL_RCC_OscConfig+0x478>
 800a554:	f7ff fb10 	bl	8009b78 <LL_RCC_LSE_Disable>
 800a558:	f7ff fb30 	bl	8009bbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d014      	beq.n	800a58e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a564:	f7fb f818 	bl	8005598 <HAL_GetTick>
 800a568:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800a56a:	e00a      	b.n	800a582 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56c:	f7fb f814 	bl	8005598 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e105      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800a582:	f7ff fb2c 	bl	8009bde <LL_RCC_LSE_IsReady>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0ef      	beq.n	800a56c <HAL_RCC_OscConfig+0x488>
 800a58c:	e013      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a58e:	f7fb f803 	bl	8005598 <HAL_GetTick>
 800a592:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800a594:	e00a      	b.n	800a5ac <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a596:	f7fa ffff 	bl	8005598 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d901      	bls.n	800a5ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e0f0      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800a5ac:	f7ff fb17 	bl	8009bde <LL_RCC_LSE_IsReady>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1ef      	bne.n	800a596 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d02c      	beq.n	800a61c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d014      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5ca:	f7ff fa90 	bl	8009aee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ce:	f7fa ffe3 	bl	8005598 <HAL_GetTick>
 800a5d2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a5d4:	e008      	b.n	800a5e8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d6:	f7fa ffdf 	bl	8005598 <HAL_GetTick>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d901      	bls.n	800a5e8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e0d2      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a5e8:	f7ff faa3 	bl	8009b32 <LL_RCC_HSI48_IsReady>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f1      	beq.n	800a5d6 <HAL_RCC_OscConfig+0x4f2>
 800a5f2:	e013      	b.n	800a61c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5f4:	f7ff fa8c 	bl	8009b10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5f8:	f7fa ffce 	bl	8005598 <HAL_GetTick>
 800a5fc:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a5fe:	e008      	b.n	800a612 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a600:	f7fa ffca 	bl	8005598 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d901      	bls.n	800a612 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e0bd      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a612:	f7ff fa8e 	bl	8009b32 <LL_RCC_HSI48_IsReady>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f1      	bne.n	800a600 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 80b3 	beq.w	800a78c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a626:	f7ff fbec 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b0c      	cmp	r3, #12
 800a62e:	d076      	beq.n	800a71e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	2b02      	cmp	r3, #2
 800a636:	d14b      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a638:	f7ff fca6 	bl	8009f88 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a63c:	f7fa ffac 	bl	8005598 <HAL_GetTick>
 800a640:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a642:	e008      	b.n	800a656 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a644:	f7fa ffa8 	bl	8005598 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e09b      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a656:	f7ff fca6 	bl	8009fa6 <LL_RCC_PLL_IsReady>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f1      	bne.n	800a644 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <HAL_RCC_OscConfig+0x6b8>)
 800a668:	4013      	ands	r3, r2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a672:	4311      	orrs	r1, r2
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a678:	0212      	lsls	r2, r2, #8
 800a67a:	4311      	orrs	r1, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a680:	4311      	orrs	r1, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a686:	4311      	orrs	r1, r2
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a68c:	430a      	orrs	r2, r1
 800a68e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a692:	4313      	orrs	r3, r2
 800a694:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a696:	f7ff fc68 	bl	8009f6a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a69a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6a8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6aa:	f7fa ff75 	bl	8005598 <HAL_GetTick>
 800a6ae:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6b2:	f7fa ff71 	bl	8005598 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d901      	bls.n	800a6c4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e064      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800a6c4:	f7ff fc6f 	bl	8009fa6 <LL_RCC_PLL_IsReady>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0f1      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x5ce>
 800a6ce:	e05d      	b.n	800a78c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6d0:	f7ff fc5a 	bl	8009f88 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a6d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800a6e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6ee:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800a6f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6f6:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f8:	f7fa ff4e 	bl	8005598 <HAL_GetTick>
 800a6fc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800a6fe:	e008      	b.n	800a712 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a700:	f7fa ff4a 	bl	8005598 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d901      	bls.n	800a712 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e03d      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800a712:	f7ff fc48 	bl	8009fa6 <LL_RCC_PLL_IsReady>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f1      	bne.n	800a700 <HAL_RCC_OscConfig+0x61c>
 800a71c:	e036      	b.n	800a78c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e031      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a72a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f003 0203 	and.w	r2, r3, #3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d123      	bne.n	800a788 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d11c      	bne.n	800a788 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	0a1b      	lsrs	r3, r3, #8
 800a752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d114      	bne.n	800a788 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a768:	429a      	cmp	r2, r3
 800a76a:	d10d      	bne.n	800a788 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a776:	429a      	cmp	r2, r3
 800a778:	d106      	bne.n	800a788 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a784:	429a      	cmp	r2, r3
 800a786:	d001      	beq.n	800a78c <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	372c      	adds	r7, #44	; 0x2c
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}
 800a796:	bf00      	nop
 800a798:	58000400 	.word	0x58000400
 800a79c:	11c1808c 	.word	0x11c1808c

0800a7a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e12a      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7b4:	4b97      	ldr	r3, [pc, #604]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d91b      	bls.n	800a7fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7c2:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f023 0207 	bic.w	r2, r3, #7
 800a7ca:	4992      	ldr	r1, [pc, #584]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d2:	f7fa fee1 	bl	8005598 <HAL_GetTick>
 800a7d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7d8:	e008      	b.n	800a7ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a7da:	f7fa fedd 	bl	8005598 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d901      	bls.n	800a7ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e10e      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7ec:	4b89      	ldr	r3, [pc, #548]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d1ef      	bne.n	800a7da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d016      	beq.n	800a834 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7ff fb05 	bl	8009e1a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a810:	f7fa fec2 	bl	8005598 <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a816:	e008      	b.n	800a82a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a818:	f7fa febe 	bl	8005598 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e0ef      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a82a:	f7ff fbff 	bl	800a02c <LL_RCC_IsActiveFlag_HPRE>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0f1      	beq.n	800a818 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0320 	and.w	r3, r3, #32
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d016      	beq.n	800a86e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff fafc 	bl	8009e42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a84a:	f7fa fea5 	bl	8005598 <HAL_GetTick>
 800a84e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a850:	e008      	b.n	800a864 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a852:	f7fa fea1 	bl	8005598 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d901      	bls.n	800a864 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e0d2      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a864:	f7ff fbf4 	bl	800a050 <LL_RCC_IsActiveFlag_C2HPRE>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0f1      	beq.n	800a852 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d016      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff faf5 	bl	8009e6e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a884:	f7fa fe88 	bl	8005598 <HAL_GetTick>
 800a888:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a88c:	f7fa fe84 	bl	8005598 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e0b5      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a89e:	f7ff fbea 	bl	800a076 <LL_RCC_IsActiveFlag_SHDHPRE>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0f1      	beq.n	800a88c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d016      	beq.n	800a8e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff faef 	bl	8009e9c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a8be:	f7fa fe6b 	bl	8005598 <HAL_GetTick>
 800a8c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a8c4:	e008      	b.n	800a8d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a8c6:	f7fa fe67 	bl	8005598 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e098      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a8d8:	f7ff fbe0 	bl	800a09c <LL_RCC_IsActiveFlag_PPRE1>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f1      	beq.n	800a8c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fae5 	bl	8009ec4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a8fa:	f7fa fe4d 	bl	8005598 <HAL_GetTick>
 800a8fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a900:	e008      	b.n	800a914 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a902:	f7fa fe49 	bl	8005598 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d901      	bls.n	800a914 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e07a      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a914:	f7ff fbd4 	bl	800a0c0 <LL_RCC_IsActiveFlag_PPRE2>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0f1      	beq.n	800a902 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d043      	beq.n	800a9b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d106      	bne.n	800a940 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a932:	f7ff f885 	bl	8009a40 <LL_RCC_HSE_IsReady>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11e      	bne.n	800a97a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e064      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d106      	bne.n	800a956 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a948:	f7ff fb2d 	bl	8009fa6 <LL_RCC_PLL_IsReady>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d113      	bne.n	800a97a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e059      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a95e:	f7ff f9ed 	bl	8009d3c <LL_RCC_MSI_IsReady>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d108      	bne.n	800a97a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e04e      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a96c:	f7ff f898 	bl	8009aa0 <LL_RCC_HSI_IsReady>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e047      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fa2b 	bl	8009dda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a984:	f7fa fe08 	bl	8005598 <HAL_GetTick>
 800a988:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a98a:	e00a      	b.n	800a9a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a98c:	f7fa fe04 	bl	8005598 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e033      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9a2:	f7ff fa2e 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d1ec      	bne.n	800a98c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9b2:	4b18      	ldr	r3, [pc, #96]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d21b      	bcs.n	800a9f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9c0:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f023 0207 	bic.w	r2, r3, #7
 800a9c8:	4912      	ldr	r1, [pc, #72]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9d0:	f7fa fde2 	bl	8005598 <HAL_GetTick>
 800a9d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d6:	e008      	b.n	800a9ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a9d8:	f7fa fdde 	bl	8005598 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e00f      	b.n	800aa0a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ea:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <HAL_RCC_ClockConfig+0x274>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d1ef      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800a9f8:	f7fa fadc 	bl	8004fb4 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a9fc:	f7fa fdd8 	bl	80055b0 <HAL_GetTickPrio>
 800aa00:	4603      	mov	r3, r0
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fa f9ba 	bl	8004d7c <HAL_InitTick>
 800aa08:	4603      	mov	r3, r0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	58004000 	.word	0x58004000

0800aa18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa18:	b590      	push	{r4, r7, lr}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa1e:	f7ff f9f0 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800aa22:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800aa2a:	f7ff f9ac 	bl	8009d86 <LL_RCC_MSI_GetRange>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	091b      	lsrs	r3, r3, #4
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	4a2a      	ldr	r2, [pc, #168]	; (800aae0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800aa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e04a      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	d102      	bne.n	800aa4c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aa46:	4b27      	ldr	r3, [pc, #156]	; (800aae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e044      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b08      	cmp	r3, #8
 800aa50:	d10a      	bne.n	800aa68 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800aa52:	f7fe ffa7 	bl	80099a4 <LL_RCC_HSE_IsEnabledDiv2>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d102      	bne.n	800aa62 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800aa5c:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e039      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800aa62:	4b21      	ldr	r3, [pc, #132]	; (800aae8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e036      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800aa68:	f7ff fad4 	bl	800a014 <LL_RCC_PLL_GetMainSource>
 800aa6c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d002      	beq.n	800aa7a <HAL_RCC_GetSysClockFreq+0x62>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d003      	beq.n	800aa80 <HAL_RCC_GetSysClockFreq+0x68>
 800aa78:	e00d      	b.n	800aa96 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800aa7a:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aa7c:	60bb      	str	r3, [r7, #8]
        break;
 800aa7e:	e015      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800aa80:	f7fe ff90 	bl	80099a4 <LL_RCC_HSE_IsEnabledDiv2>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d102      	bne.n	800aa90 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800aa8a:	4b16      	ldr	r3, [pc, #88]	; (800aae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800aa8c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800aa8e:	e00d      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800aa90:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800aa92:	60bb      	str	r3, [r7, #8]
        break;
 800aa94:	e00a      	b.n	800aaac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800aa96:	f7ff f976 	bl	8009d86 <LL_RCC_MSI_GetRange>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	091b      	lsrs	r3, r3, #4
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	4a0f      	ldr	r2, [pc, #60]	; (800aae0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800aaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaa8:	60bb      	str	r3, [r7, #8]
        break;
 800aaaa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800aaac:	f7ff fa8d 	bl	8009fca <LL_RCC_PLL_GetN>
 800aab0:	4602      	mov	r2, r0
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	fb03 f402 	mul.w	r4, r3, r2
 800aab8:	f7ff faa0 	bl	8009ffc <LL_RCC_PLL_GetDivider>
 800aabc:	4603      	mov	r3, r0
 800aabe:	091b      	lsrs	r3, r3, #4
 800aac0:	3301      	adds	r3, #1
 800aac2:	fbb4 f4f3 	udiv	r4, r4, r3
 800aac6:	f7ff fa8d 	bl	8009fe4 <LL_RCC_PLL_GetR>
 800aaca:	4603      	mov	r3, r0
 800aacc:	0f5b      	lsrs	r3, r3, #29
 800aace:	3301      	adds	r3, #1
 800aad0:	fbb4 f3f3 	udiv	r3, r4, r3
 800aad4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800aad6:	68fb      	ldr	r3, [r7, #12]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd90      	pop	{r4, r7, pc}
 800aae0:	08017a10 	.word	0x08017a10
 800aae4:	00f42400 	.word	0x00f42400
 800aae8:	01e84800 	.word	0x01e84800

0800aaec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aaec:	b598      	push	{r3, r4, r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800aaf0:	f7ff ff92 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	f7ff f9f9 	bl	8009eec <LL_RCC_GetAHBPrescaler>
 800aafa:	4603      	mov	r3, r0
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	4a03      	ldr	r2, [pc, #12]	; (800ab10 <HAL_RCC_GetHCLKFreq+0x24>)
 800ab04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	bd98      	pop	{r3, r4, r7, pc}
 800ab10:	080179b0 	.word	0x080179b0

0800ab14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab14:	b598      	push	{r3, r4, r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ab18:	f7ff ffe8 	bl	800aaec <HAL_RCC_GetHCLKFreq>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	f7ff fa0c 	bl	8009f3a <LL_RCC_GetAPB1Prescaler>
 800ab22:	4603      	mov	r3, r0
 800ab24:	0a1b      	lsrs	r3, r3, #8
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	4a04      	ldr	r2, [pc, #16]	; (800ab3c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab30:	f003 031f 	and.w	r3, r3, #31
 800ab34:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	bd98      	pop	{r3, r4, r7, pc}
 800ab3c:	080179f0 	.word	0x080179f0

0800ab40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab40:	b598      	push	{r3, r4, r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ab44:	f7ff ffd2 	bl	800aaec <HAL_RCC_GetHCLKFreq>
 800ab48:	4604      	mov	r4, r0
 800ab4a:	f7ff fa02 	bl	8009f52 <LL_RCC_GetAPB2Prescaler>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	0adb      	lsrs	r3, r3, #11
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5c:	f003 031f 	and.w	r3, r3, #31
 800ab60:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	bd98      	pop	{r3, r4, r7, pc}
 800ab68:	080179f0 	.word	0x080179f0

0800ab6c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	226f      	movs	r2, #111	; 0x6f
 800ab7a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800ab7c:	f7ff f941 	bl	8009e02 <LL_RCC_GetSysClkSource>
 800ab80:	4602      	mov	r2, r0
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800ab86:	f7ff f9b1 	bl	8009eec <LL_RCC_GetAHBPrescaler>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800ab90:	f7ff f9d3 	bl	8009f3a <LL_RCC_GetAPB1Prescaler>
 800ab94:	4602      	mov	r2, r0
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800ab9a:	f7ff f9da 	bl	8009f52 <LL_RCC_GetAPB2Prescaler>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800aba4:	f7ff f9ae 	bl	8009f04 <LL_C2_RCC_GetAHBPrescaler>
 800aba8:	4602      	mov	r2, r0
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800abae:	f7ff f9b6 	bl	8009f1e <LL_RCC_GetAHB4Prescaler>
 800abb2:	4602      	mov	r2, r0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <HAL_RCC_GetClockConfig+0x60>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0207 	and.w	r2, r3, #7
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	58004000 	.word	0x58004000

0800abd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800abd0:	b590      	push	{r4, r7, lr}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2bb0      	cmp	r3, #176	; 0xb0
 800abdc:	d903      	bls.n	800abe6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800abde:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e007      	b.n	800abf6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	4a11      	ldr	r2, [pc, #68]	; (800ac34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800abf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800abf6:	f7ff f992 	bl	8009f1e <LL_RCC_GetAHB4Prescaler>
 800abfa:	4603      	mov	r3, r0
 800abfc:	091b      	lsrs	r3, r3, #4
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	4a0d      	ldr	r2, [pc, #52]	; (800ac38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ac04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	0c9c      	lsrs	r4, r3, #18
 800ac1a:	f7fe feb5 	bl	8009988 <HAL_PWREx_GetVoltageRange>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4619      	mov	r1, r3
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 f80c 	bl	800ac40 <RCC_SetFlashLatency>
 800ac28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd90      	pop	{r4, r7, pc}
 800ac32:	bf00      	nop
 800ac34:	08017a10 	.word	0x08017a10
 800ac38:	080179b0 	.word	0x080179b0
 800ac3c:	431bde83 	.word	0x431bde83

0800ac40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ac40:	b590      	push	{r4, r7, lr}
 800ac42:	b093      	sub	sp, #76	; 0x4c
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ac4a:	4b39      	ldr	r3, [pc, #228]	; (800ad30 <RCC_SetFlashLatency+0xf0>)
 800ac4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ac50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ac56:	4a37      	ldr	r2, [pc, #220]	; (800ad34 <RCC_SetFlashLatency+0xf4>)
 800ac58:	f107 031c 	add.w	r3, r7, #28
 800ac5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ac62:	4b35      	ldr	r3, [pc, #212]	; (800ad38 <RCC_SetFlashLatency+0xf8>)
 800ac64:	f107 040c 	add.w	r4, r7, #12
 800ac68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ac6e:	2300      	movs	r3, #0
 800ac70:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac78:	d11c      	bne.n	800acb4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ac7e:	e015      	b.n	800acac <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ac80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac88:	4413      	add	r3, r2
 800ac8a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d808      	bhi.n	800aca6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ac94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800aca2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800aca4:	e022      	b.n	800acec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800aca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca8:	3301      	adds	r3, #1
 800acaa:	643b      	str	r3, [r7, #64]	; 0x40
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d9e6      	bls.n	800ac80 <RCC_SetFlashLatency+0x40>
 800acb2:	e01b      	b.n	800acec <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800acb4:	2300      	movs	r3, #0
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb8:	e015      	b.n	800ace6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800acba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800acc2:	4413      	add	r3, r2
 800acc4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	429a      	cmp	r2, r3
 800accc:	d808      	bhi.n	800ace0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800acce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800acd6:	4413      	add	r3, r2
 800acd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800acdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800acde:	e005      	b.n	800acec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	3301      	adds	r3, #1
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d9e6      	bls.n	800acba <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800acec:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <RCC_SetFlashLatency+0xfc>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f023 0207 	bic.w	r2, r3, #7
 800acf4:	4911      	ldr	r1, [pc, #68]	; (800ad3c <RCC_SetFlashLatency+0xfc>)
 800acf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf8:	4313      	orrs	r3, r2
 800acfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800acfc:	f7fa fc4c 	bl	8005598 <HAL_GetTick>
 800ad00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ad02:	e008      	b.n	800ad16 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ad04:	f7fa fc48 	bl	8005598 <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d901      	bls.n	800ad16 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e007      	b.n	800ad26 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <RCC_SetFlashLatency+0xfc>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d1ef      	bne.n	800ad04 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	374c      	adds	r7, #76	; 0x4c
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd90      	pop	{r4, r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	080173f8 	.word	0x080173f8
 800ad34:	08017408 	.word	0x08017408
 800ad38:	08017414 	.word	0x08017414
 800ad3c:	58004000 	.word	0x58004000

0800ad40 <LL_RCC_LSE_IsEnabled>:
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ad44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <LL_RCC_LSE_IsEnabled+0x18>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <LL_RCC_LSE_IsEnabled+0x1a>
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <LL_RCC_LSE_IsReady>:
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ad68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d101      	bne.n	800ad7c <LL_RCC_LSE_IsReady+0x18>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <LL_RCC_LSE_IsReady+0x1a>
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <LL_RCC_SetRFWKPClockSource>:
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ad90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_RCC_SetSMPSClockSource>:
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800adbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	f023 0203 	bic.w	r2, r3, #3
 800adc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4313      	orrs	r3, r2
 800adce:	624b      	str	r3, [r1, #36]	; 0x24
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <LL_RCC_SetSMPSPrescaler>:
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ade4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <LL_RCC_SetUSARTClockSource>:
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ae0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae14:	f023 0203 	bic.w	r2, r3, #3
 800ae18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <LL_RCC_SetLPUARTClockSource>:
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ae38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <LL_RCC_SetI2CClockSource>:
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ae64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	091b      	lsrs	r3, r3, #4
 800ae70:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ae74:	43db      	mvns	r3, r3
 800ae76:	401a      	ands	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800ae80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ae8a:	bf00      	nop
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <LL_RCC_SetLPTIMClockSource>:
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ae9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aea2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	0c1b      	lsrs	r3, r3, #16
 800aeaa:	041b      	lsls	r3, r3, #16
 800aeac:	43db      	mvns	r3, r3
 800aeae:	401a      	ands	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	041b      	lsls	r3, r3, #16
 800aeb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <LL_RCC_SetSAIClockSource>:
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800aed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <LL_RCC_SetRNGClockSource>:
{
 800aef6:	b480      	push	{r7}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800aefe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800af0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4313      	orrs	r3, r2
 800af12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <LL_RCC_SetCLK48ClockSource>:
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800af2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800af36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <LL_RCC_SetUSBClockSource>:
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ffe3 	bl	800af22 <LL_RCC_SetCLK48ClockSource>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <LL_RCC_SetADCClockSource>:
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800af6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <LL_RCC_SetRTCClockSource>:
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800af98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4313      	orrs	r3, r2
 800afac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <LL_RCC_GetRTCClockSource>:
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800afc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800afcc:	4618      	mov	r0, r3
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <LL_RCC_ForceBackupDomainReset>:
{
 800afd6:	b480      	push	{r7}
 800afd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800afda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800afe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800afee:	bf00      	nop
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800affc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b010:	bf00      	nop
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <LL_RCC_PLLSAI1_Enable>:
{
 800b01a:	b480      	push	{r7}
 800b01c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b01e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b02c:	6013      	str	r3, [r2, #0]
}
 800b02e:	bf00      	nop
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <LL_RCC_PLLSAI1_Disable>:
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b03c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b04a:	6013      	str	r3, [r2, #0]
}
 800b04c:	bf00      	nop
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <LL_RCC_PLLSAI1_IsReady>:
{
 800b056:	b480      	push	{r7}
 800b058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b05a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b068:	d101      	bne.n	800b06e <LL_RCC_PLLSAI1_IsReady+0x18>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e000      	b.n	800b070 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b088      	sub	sp, #32
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b082:	2300      	movs	r3, #0
 800b084:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b086:	2300      	movs	r3, #0
 800b088:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	d033      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b09e:	d00c      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b0a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a4:	d802      	bhi.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d010      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b0aa:	e017      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b0ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0b0:	d017      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800b0b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0b6:	d016      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b0b8:	e010      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b0ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b0c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0c8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0ca:	e00d      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f947 	bl	800b364 <RCCEx_PLLSAI1_ConfigNP>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0da:	e005      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	77fb      	strb	r3, [r7, #31]
        break;
 800b0e0:	e002      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b0e2:	bf00      	nop
 800b0e4:	e000      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800b0e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e8:	7ffb      	ldrb	r3, [r7, #31]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d105      	bne.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff fee9 	bl	800aeca <LL_RCC_SetSAIClockSource>
 800b0f8:	e001      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	7ffb      	ldrb	r3, [r7, #31]
 800b0fc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b106:	2b00      	cmp	r3, #0
 800b108:	d046      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b10a:	f7ff ff57 	bl	800afbc <LL_RCC_GetRTCClockSource>
 800b10e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	429a      	cmp	r2, r3
 800b118:	d03c      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b11a:	f7fe fc25 	bl	8009968 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d105      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff ff31 	bl	800af90 <LL_RCC_SetRTCClockSource>
 800b12e:	e02e      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b138:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b13a:	f7ff ff4c 	bl	800afd6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b13e:	f7ff ff5b 	bl	800aff8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b15a:	f7ff fdf1 	bl	800ad40 <LL_RCC_LSE_IsEnabled>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d114      	bne.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b164:	f7fa fa18 	bl	8005598 <HAL_GetTick>
 800b168:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b16a:	e00b      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b16c:	f7fa fa14 	bl	8005598 <HAL_GetTick>
 800b170:	4602      	mov	r2, r0
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d902      	bls.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800b17e:	2303      	movs	r3, #3
 800b180:	77fb      	strb	r3, [r7, #31]
              break;
 800b182:	e004      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b184:	f7ff fdee 	bl	800ad64 <LL_RCC_LSE_IsReady>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d1ee      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b18e:	7ffb      	ldrb	r3, [r7, #31]
 800b190:	77bb      	strb	r3, [r7, #30]
 800b192:	e001      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b194:	7ffb      	ldrb	r3, [r7, #31]
 800b196:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff fe2b 	bl	800ae04 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff fe36 	bl	800ae30 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff fe5e 	bl	800ae96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0320 	and.w	r3, r3, #32
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fe53 	bl	800ae96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fe2b 	bl	800ae5c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff fe20 	bl	800ae5c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b224:	2b00      	cmp	r3, #0
 800b226:	d022      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff fe8e 	bl	800af4e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b23a:	d107      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b24a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b254:	d10b      	bne.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3304      	adds	r3, #4
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f8dd 	bl	800b41a <RCCEx_PLLSAI1_ConfigNQ>
 800b260:	4603      	mov	r3, r0
 800b262:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b264:	7ffb      	ldrb	r3, [r7, #31]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800b26a:	7ffb      	ldrb	r3, [r7, #31]
 800b26c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b276:	2b00      	cmp	r3, #0
 800b278:	d02b      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b282:	d008      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b28c:	d003      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	2b00      	cmp	r3, #0
 800b294:	d105      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fe2b 	bl	800aef6 <LL_RCC_SetRNGClockSource>
 800b2a0:	e00a      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f7ff fe22 	bl	800aef6 <LL_RCC_SetRNGClockSource>
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fe35 	bl	800af22 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b2c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d022      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff fe3e 	bl	800af64 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2f0:	d107      	bne.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b2f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b300:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b30a:	d10b      	bne.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4618      	mov	r0, r3
 800b312:	f000 f8dd 	bl	800b4d0 <RCCEx_PLLSAI1_ConfigNR>
 800b316:	4603      	mov	r3, r0
 800b318:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800b320:	7ffb      	ldrb	r3, [r7, #31]
 800b322:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d004      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fd27 	bl	800ad88 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fd46 	bl	800addc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff fd2d 	bl	800adb4 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800b35a:	7fbb      	ldrb	r3, [r7, #30]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3720      	adds	r7, #32
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b370:	f7ff fe62 	bl	800b038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b374:	f7fa f910 	bl	8005598 <HAL_GetTick>
 800b378:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b37a:	e009      	b.n	800b390 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b37c:	f7fa f90c 	bl	8005598 <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d902      	bls.n	800b390 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	73fb      	strb	r3, [r7, #15]
      break;
 800b38e:	e004      	b.n	800b39a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b390:	f7ff fe61 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f0      	bne.n	800b37c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d137      	bne.n	800b410 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b3a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	021b      	lsls	r3, r3, #8
 800b3b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800b3b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b3ce:	f7ff fe24 	bl	800b01a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d2:	f7fa f8e1 	bl	8005598 <HAL_GetTick>
 800b3d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b3d8:	e009      	b.n	800b3ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3da:	f7fa f8dd 	bl	8005598 <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d902      	bls.n	800b3ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	73fb      	strb	r3, [r7, #15]
        break;
 800b3ec:	e004      	b.n	800b3f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b3ee:	f7ff fe32 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d1f0      	bne.n	800b3da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d108      	bne.n	800b410 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b3fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b402:	691a      	ldr	r2, [r3, #16]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b40c:	4313      	orrs	r3, r2
 800b40e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b426:	f7ff fe07 	bl	800b038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b42a:	f7fa f8b5 	bl	8005598 <HAL_GetTick>
 800b42e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b430:	e009      	b.n	800b446 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b432:	f7fa f8b1 	bl	8005598 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d902      	bls.n	800b446 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	73fb      	strb	r3, [r7, #15]
      break;
 800b444:	e004      	b.n	800b450 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b446:	f7ff fe06 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1f0      	bne.n	800b432 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d137      	bne.n	800b4c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b46a:	4313      	orrs	r3, r2
 800b46c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800b46e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b480:	4313      	orrs	r3, r2
 800b482:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b484:	f7ff fdc9 	bl	800b01a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b488:	f7fa f886 	bl	8005598 <HAL_GetTick>
 800b48c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b48e:	e009      	b.n	800b4a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b490:	f7fa f882 	bl	8005598 <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d902      	bls.n	800b4a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	73fb      	strb	r3, [r7, #15]
        break;
 800b4a2:	e004      	b.n	800b4ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b4a4:	f7ff fdd7 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d1f0      	bne.n	800b490 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d108      	bne.n	800b4c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b4b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b4dc:	f7ff fdac 	bl	800b038 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b4e0:	f7fa f85a 	bl	8005598 <HAL_GetTick>
 800b4e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b4e6:	e009      	b.n	800b4fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4e8:	f7fa f856 	bl	8005598 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d902      	bls.n	800b4fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fa:	e004      	b.n	800b506 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b4fc:	f7ff fdab 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1f0      	bne.n	800b4e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d137      	bne.n	800b57c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b520:	4313      	orrs	r3, r2
 800b522:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800b524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b536:	4313      	orrs	r3, r2
 800b538:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b53a:	f7ff fd6e 	bl	800b01a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b53e:	f7fa f82b 	bl	8005598 <HAL_GetTick>
 800b542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b544:	e009      	b.n	800b55a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b546:	f7fa f827 	bl	8005598 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	2b02      	cmp	r3, #2
 800b552:	d902      	bls.n	800b55a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	73fb      	strb	r3, [r7, #15]
        break;
 800b558:	e004      	b.n	800b564 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b55a:	f7ff fd7c 	bl	800b056 <LL_RCC_PLLSAI1_IsReady>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b01      	cmp	r3, #1
 800b562:	d1f0      	bne.n	800b546 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d108      	bne.n	800b57c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b56a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b56e:	691a      	ldr	r2, [r3, #16]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b578:	4313      	orrs	r3, r2
 800b57a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e090      	b.n	800b6ba <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d106      	bne.n	800b5b2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7f9 fb89 	bl	8004cc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	22ca      	movs	r2, #202	; 0xca
 800b5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2253      	movs	r2, #83	; 0x53
 800b5c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f89f 	bl	800b70e <RTC_EnterInitMode>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	22ff      	movs	r2, #255	; 0xff
 800b5dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2204      	movs	r2, #4
 800b5e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e067      	b.n	800b6ba <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5fc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6899      	ldr	r1, [r3, #8]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	431a      	orrs	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	431a      	orrs	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	68d2      	ldr	r2, [r2, #12]
 800b624:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6919      	ldr	r1, [r3, #16]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	041a      	lsls	r2, r3, #16
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b648:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 0203 	bic.w	r2, r2, #3
 800b658:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	69da      	ldr	r2, [r3, #28]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d113      	bne.n	800b6a8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f81e 	bl	800b6c2 <HAL_RTC_WaitForSynchro>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00d      	beq.n	800b6a8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	22ff      	movs	r2, #255	; 0xff
 800b692:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2204      	movs	r2, #4
 800b698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e008      	b.n	800b6ba <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	22ff      	movs	r2, #255	; 0xff
 800b6ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68da      	ldr	r2, [r3, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b6d8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b6da:	f7f9 ff5d 	bl	8005598 <HAL_GetTick>
 800b6de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b6e0:	e009      	b.n	800b6f6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b6e2:	f7f9 ff59 	bl	8005598 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6f0:	d901      	bls.n	800b6f6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e007      	b.n	800b706 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0ee      	beq.n	800b6e2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b720:	2b00      	cmp	r3, #0
 800b722:	d119      	bne.n	800b758 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f04f 32ff 	mov.w	r2, #4294967295
 800b72c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b72e:	f7f9 ff33 	bl	8005598 <HAL_GetTick>
 800b732:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b734:	e009      	b.n	800b74a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b736:	f7f9 ff2f 	bl	8005598 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b744:	d901      	bls.n	800b74a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e007      	b.n	800b75a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0ee      	beq.n	800b736 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e01d      	b.n	800b7b0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7f9 fd9d 	bl	80052c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2202      	movs	r2, #2
 800b792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	f000 fc83 	bl	800c0ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <HAL_TIM_Base_Start+0x50>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b06      	cmp	r3, #6
 800b7d8:	d00b      	beq.n	800b7f2 <HAL_TIM_Base_Start+0x3a>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e0:	d007      	beq.n	800b7f2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0201 	orr.w	r2, r2, #1
 800b7f0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	00010007 	.word	0x00010007

0800b80c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a1a      	ldr	r2, [r3, #32]
 800b822:	f241 1311 	movw	r3, #4369	; 0x1111
 800b826:	4013      	ands	r3, r2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10f      	bne.n	800b84c <HAL_TIM_Base_Stop+0x40>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6a1a      	ldr	r2, [r3, #32]
 800b832:	f240 4344 	movw	r3, #1092	; 0x444
 800b836:	4013      	ands	r3, r2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <HAL_TIM_Base_Stop+0x40>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f022 0201 	bic.w	r2, r2, #1
 800b84a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f042 0201 	orr.w	r2, r2, #1
 800b87a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689a      	ldr	r2, [r3, #8]
 800b882:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <HAL_TIM_Base_Start_IT+0x50>)
 800b884:	4013      	ands	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b06      	cmp	r3, #6
 800b88c:	d00b      	beq.n	800b8a6 <HAL_TIM_Base_Start_IT+0x42>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b894:	d007      	beq.n	800b8a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f042 0201 	orr.w	r2, r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	00010007 	.word	0x00010007

0800b8b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e01d      	b.n	800b906 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f815 	bl	800b90e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f000 fbd8 	bl	800c0ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2201      	movs	r2, #1
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff36 	bl	800c7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <HAL_TIM_PWM_Start+0x84>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d009      	beq.n	800b95a <HAL_TIM_PWM_Start+0x36>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a18      	ldr	r2, [pc, #96]	; (800b9ac <HAL_TIM_PWM_Start+0x88>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d004      	beq.n	800b95a <HAL_TIM_PWM_Start+0x36>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a16      	ldr	r2, [pc, #88]	; (800b9b0 <HAL_TIM_PWM_Start+0x8c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d101      	bne.n	800b95e <HAL_TIM_PWM_Start+0x3a>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <HAL_TIM_PWM_Start+0x3c>
 800b95e:	2300      	movs	r3, #0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d007      	beq.n	800b974 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b972:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	4b0e      	ldr	r3, [pc, #56]	; (800b9b4 <HAL_TIM_PWM_Start+0x90>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b06      	cmp	r3, #6
 800b984:	d00b      	beq.n	800b99e <HAL_TIM_PWM_Start+0x7a>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98c:	d007      	beq.n	800b99e <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f042 0201 	orr.w	r2, r2, #1
 800b99c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	40012c00 	.word	0x40012c00
 800b9ac:	40014400 	.word	0x40014400
 800b9b0:	40014800 	.word	0x40014800
 800b9b4:	00010007 	.word	0x00010007

0800b9b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 feec 	bl	800c7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a25      	ldr	r2, [pc, #148]	; (800ba6c <HAL_TIM_PWM_Stop+0xb4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d009      	beq.n	800b9ee <HAL_TIM_PWM_Stop+0x36>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a24      	ldr	r2, [pc, #144]	; (800ba70 <HAL_TIM_PWM_Stop+0xb8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d004      	beq.n	800b9ee <HAL_TIM_PWM_Stop+0x36>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a22      	ldr	r2, [pc, #136]	; (800ba74 <HAL_TIM_PWM_Stop+0xbc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d101      	bne.n	800b9f2 <HAL_TIM_PWM_Stop+0x3a>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <HAL_TIM_PWM_Stop+0x3c>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d017      	beq.n	800ba28 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6a1a      	ldr	r2, [r3, #32]
 800b9fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba02:	4013      	ands	r3, r2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10f      	bne.n	800ba28 <HAL_TIM_PWM_Stop+0x70>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6a1a      	ldr	r2, [r3, #32]
 800ba0e:	f240 4344 	movw	r3, #1092	; 0x444
 800ba12:	4013      	ands	r3, r2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d107      	bne.n	800ba28 <HAL_TIM_PWM_Stop+0x70>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10f      	bne.n	800ba58 <HAL_TIM_PWM_Stop+0xa0>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	f240 4344 	movw	r3, #1092	; 0x444
 800ba42:	4013      	ands	r3, r2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d107      	bne.n	800ba58 <HAL_TIM_PWM_Stop+0xa0>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f022 0201 	bic.w	r2, r2, #1
 800ba56:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	40012c00 	.word	0x40012c00
 800ba70:	40014400 	.word	0x40014400
 800ba74:	40014800 	.word	0x40014800

0800ba78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d122      	bne.n	800bad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d11b      	bne.n	800bad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f06f 0202 	mvn.w	r2, #2
 800baa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fad7 	bl	800c06e <HAL_TIM_IC_CaptureCallback>
 800bac0:	e005      	b.n	800bace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fac9 	bl	800c05a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fada 	bl	800c082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b04      	cmp	r3, #4
 800bae0:	d122      	bne.n	800bb28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f003 0304 	and.w	r3, r3, #4
 800baec:	2b04      	cmp	r3, #4
 800baee:	d11b      	bne.n	800bb28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0204 	mvn.w	r2, #4
 800baf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2202      	movs	r2, #2
 800bafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 faad 	bl	800c06e <HAL_TIM_IC_CaptureCallback>
 800bb14:	e005      	b.n	800bb22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fa9f 	bl	800c05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fab0 	bl	800c082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b08      	cmp	r3, #8
 800bb34:	d122      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f003 0308 	and.w	r3, r3, #8
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d11b      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f06f 0208 	mvn.w	r2, #8
 800bb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2204      	movs	r2, #4
 800bb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa83 	bl	800c06e <HAL_TIM_IC_CaptureCallback>
 800bb68:	e005      	b.n	800bb76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fa75 	bl	800c05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fa86 	bl	800c082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b10      	cmp	r3, #16
 800bb88:	d122      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d11b      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f06f 0210 	mvn.w	r2, #16
 800bba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2208      	movs	r2, #8
 800bba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa59 	bl	800c06e <HAL_TIM_IC_CaptureCallback>
 800bbbc:	e005      	b.n	800bbca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa4b 	bl	800c05a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fa5c 	bl	800c082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d10e      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d107      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f06f 0201 	mvn.w	r2, #1
 800bbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7f8 fafa 	bl	80041f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc06:	2b80      	cmp	r3, #128	; 0x80
 800bc08:	d10e      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc14:	2b80      	cmp	r3, #128	; 0x80
 800bc16:	d107      	bne.n	800bc28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fe50 	bl	800c8c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc36:	d10e      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc42:	2b80      	cmp	r3, #128	; 0x80
 800bc44:	d107      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fe43 	bl	800c8dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc60:	2b40      	cmp	r3, #64	; 0x40
 800bc62:	d10e      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6e:	2b40      	cmp	r3, #64	; 0x40
 800bc70:	d107      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa0a 	bl	800c096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	f003 0320 	and.w	r3, r3, #32
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	d10e      	bne.n	800bcae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f003 0320 	and.w	r3, r3, #32
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d107      	bne.n	800bcae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f06f 0220 	mvn.w	r2, #32
 800bca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fe03 	bl	800c8b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e105      	b.n	800bede <HAL_TIM_PWM_ConfigChannel+0x226>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b14      	cmp	r3, #20
 800bce6:	f200 80f0 	bhi.w	800beca <HAL_TIM_PWM_ConfigChannel+0x212>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800becb 	.word	0x0800becb
 800bcf8:	0800becb 	.word	0x0800becb
 800bcfc:	0800becb 	.word	0x0800becb
 800bd00:	0800bd85 	.word	0x0800bd85
 800bd04:	0800becb 	.word	0x0800becb
 800bd08:	0800becb 	.word	0x0800becb
 800bd0c:	0800becb 	.word	0x0800becb
 800bd10:	0800bdc7 	.word	0x0800bdc7
 800bd14:	0800becb 	.word	0x0800becb
 800bd18:	0800becb 	.word	0x0800becb
 800bd1c:	0800becb 	.word	0x0800becb
 800bd20:	0800be07 	.word	0x0800be07
 800bd24:	0800becb 	.word	0x0800becb
 800bd28:	0800becb 	.word	0x0800becb
 800bd2c:	0800becb 	.word	0x0800becb
 800bd30:	0800be49 	.word	0x0800be49
 800bd34:	0800becb 	.word	0x0800becb
 800bd38:	0800becb 	.word	0x0800becb
 800bd3c:	0800becb 	.word	0x0800becb
 800bd40:	0800be89 	.word	0x0800be89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fa12 	bl	800c174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699a      	ldr	r2, [r3, #24]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0208 	orr.w	r2, r2, #8
 800bd5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0204 	bic.w	r2, r2, #4
 800bd6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6999      	ldr	r1, [r3, #24]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	619a      	str	r2, [r3, #24]
      break;
 800bd82:	e0a3      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fa6e 	bl	800c26c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6999      	ldr	r1, [r3, #24]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	021a      	lsls	r2, r3, #8
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	619a      	str	r2, [r3, #24]
      break;
 800bdc4:	e082      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fac7 	bl	800c360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69da      	ldr	r2, [r3, #28]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0208 	orr.w	r2, r2, #8
 800bde0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69da      	ldr	r2, [r3, #28]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0204 	bic.w	r2, r2, #4
 800bdf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	69d9      	ldr	r1, [r3, #28]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	61da      	str	r2, [r3, #28]
      break;
 800be04:	e062      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fb1f 	bl	800c450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69da      	ldr	r2, [r3, #28]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69d9      	ldr	r1, [r3, #28]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	021a      	lsls	r2, r3, #8
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	430a      	orrs	r2, r1
 800be44:	61da      	str	r2, [r3, #28]
      break;
 800be46:	e041      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fb5c 	bl	800c50c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0208 	orr.w	r2, r2, #8
 800be62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 0204 	bic.w	r2, r2, #4
 800be72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	691a      	ldr	r2, [r3, #16]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be86:	e021      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fb94 	bl	800c5bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	021a      	lsls	r2, r3, #8
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bec8:	e000      	b.n	800becc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800beca:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop

0800bee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_TIM_ConfigClockSource+0x18>
 800befc:	2302      	movs	r3, #2
 800befe:	e0a8      	b.n	800c052 <HAL_TIM_ConfigClockSource+0x16a>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800bf1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	d067      	beq.n	800c00c <HAL_TIM_ConfigClockSource+0x124>
 800bf3c:	2b40      	cmp	r3, #64	; 0x40
 800bf3e:	d80b      	bhi.n	800bf58 <HAL_TIM_ConfigClockSource+0x70>
 800bf40:	2b10      	cmp	r3, #16
 800bf42:	d073      	beq.n	800c02c <HAL_TIM_ConfigClockSource+0x144>
 800bf44:	2b10      	cmp	r3, #16
 800bf46:	d802      	bhi.n	800bf4e <HAL_TIM_ConfigClockSource+0x66>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d06f      	beq.n	800c02c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bf4c:	e078      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	d06c      	beq.n	800c02c <HAL_TIM_ConfigClockSource+0x144>
 800bf52:	2b30      	cmp	r3, #48	; 0x30
 800bf54:	d06a      	beq.n	800c02c <HAL_TIM_ConfigClockSource+0x144>
      break;
 800bf56:	e073      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bf58:	2b70      	cmp	r3, #112	; 0x70
 800bf5a:	d00d      	beq.n	800bf78 <HAL_TIM_ConfigClockSource+0x90>
 800bf5c:	2b70      	cmp	r3, #112	; 0x70
 800bf5e:	d804      	bhi.n	800bf6a <HAL_TIM_ConfigClockSource+0x82>
 800bf60:	2b50      	cmp	r3, #80	; 0x50
 800bf62:	d033      	beq.n	800bfcc <HAL_TIM_ConfigClockSource+0xe4>
 800bf64:	2b60      	cmp	r3, #96	; 0x60
 800bf66:	d041      	beq.n	800bfec <HAL_TIM_ConfigClockSource+0x104>
      break;
 800bf68:	e06a      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bf6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf6e:	d066      	beq.n	800c03e <HAL_TIM_ConfigClockSource+0x156>
 800bf70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf74:	d017      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800bf76:	e063      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	6899      	ldr	r1, [r3, #8]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f000 fbee 	bl	800c768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	609a      	str	r2, [r3, #8]
      break;
 800bfa4:	e04c      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	6899      	ldr	r1, [r3, #8]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f000 fbd7 	bl	800c768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfc8:	609a      	str	r2, [r3, #8]
      break;
 800bfca:	e039      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6818      	ldr	r0, [r3, #0]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	6859      	ldr	r1, [r3, #4]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	f000 fb49 	bl	800c670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2150      	movs	r1, #80	; 0x50
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fba2 	bl	800c72e <TIM_ITRx_SetConfig>
      break;
 800bfea:	e029      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	6859      	ldr	r1, [r3, #4]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	461a      	mov	r2, r3
 800bffa:	f000 fb68 	bl	800c6ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2160      	movs	r1, #96	; 0x60
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fb92 	bl	800c72e <TIM_ITRx_SetConfig>
      break;
 800c00a:	e019      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6818      	ldr	r0, [r3, #0]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	6859      	ldr	r1, [r3, #4]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	461a      	mov	r2, r3
 800c01a:	f000 fb29 	bl	800c670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2140      	movs	r1, #64	; 0x40
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fb82 	bl	800c72e <TIM_ITRx_SetConfig>
      break;
 800c02a:	e009      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f000 fb79 	bl	800c72e <TIM_ITRx_SetConfig>
      break;
 800c03c:	e000      	b.n	800c040 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c03e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c062:	bf00      	nop
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c06e:	b480      	push	{r7}
 800c070:	b083      	sub	sp, #12
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c082:	b480      	push	{r7}
 800c084:	b083      	sub	sp, #12
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c08a:	bf00      	nop
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c096:	b480      	push	{r7}
 800c098:	b083      	sub	sp, #12
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c09e:	bf00      	nop
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
	...

0800c0ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a2a      	ldr	r2, [pc, #168]	; (800c168 <TIM_Base_SetConfig+0xbc>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d003      	beq.n	800c0cc <TIM_Base_SetConfig+0x20>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ca:	d108      	bne.n	800c0de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a21      	ldr	r2, [pc, #132]	; (800c168 <TIM_Base_SetConfig+0xbc>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00b      	beq.n	800c0fe <TIM_Base_SetConfig+0x52>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ec:	d007      	beq.n	800c0fe <TIM_Base_SetConfig+0x52>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a1e      	ldr	r2, [pc, #120]	; (800c16c <TIM_Base_SetConfig+0xc0>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d003      	beq.n	800c0fe <TIM_Base_SetConfig+0x52>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a1d      	ldr	r2, [pc, #116]	; (800c170 <TIM_Base_SetConfig+0xc4>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d108      	bne.n	800c110 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a0c      	ldr	r2, [pc, #48]	; (800c168 <TIM_Base_SetConfig+0xbc>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d007      	beq.n	800c14c <TIM_Base_SetConfig+0xa0>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a0b      	ldr	r2, [pc, #44]	; (800c16c <TIM_Base_SetConfig+0xc0>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d003      	beq.n	800c14c <TIM_Base_SetConfig+0xa0>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a0a      	ldr	r2, [pc, #40]	; (800c170 <TIM_Base_SetConfig+0xc4>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d103      	bne.n	800c154 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	691a      	ldr	r2, [r3, #16]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	615a      	str	r2, [r3, #20]
}
 800c15a:	bf00      	nop
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	40012c00 	.word	0x40012c00
 800c16c:	40014400 	.word	0x40014400
 800c170:	40014800 	.word	0x40014800

0800c174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c174:	b480      	push	{r7}
 800c176:	b087      	sub	sp, #28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	f023 0201 	bic.w	r2, r3, #1
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f023 0302 	bic.w	r3, r3, #2
 800c1c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a24      	ldr	r2, [pc, #144]	; (800c260 <TIM_OC1_SetConfig+0xec>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d007      	beq.n	800c1e4 <TIM_OC1_SetConfig+0x70>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a23      	ldr	r2, [pc, #140]	; (800c264 <TIM_OC1_SetConfig+0xf0>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_OC1_SetConfig+0x70>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a22      	ldr	r2, [pc, #136]	; (800c268 <TIM_OC1_SetConfig+0xf4>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d10c      	bne.n	800c1fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f023 0308 	bic.w	r3, r3, #8
 800c1ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	f023 0304 	bic.w	r3, r3, #4
 800c1fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a17      	ldr	r2, [pc, #92]	; (800c260 <TIM_OC1_SetConfig+0xec>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d007      	beq.n	800c216 <TIM_OC1_SetConfig+0xa2>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a17      	ldr	r2, [pc, #92]	; (800c268 <TIM_OC1_SetConfig+0xf4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d003      	beq.n	800c216 <TIM_OC1_SetConfig+0xa2>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a14      	ldr	r2, [pc, #80]	; (800c264 <TIM_OC1_SetConfig+0xf0>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d111      	bne.n	800c23a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c21c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	4313      	orrs	r3, r2
 800c238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	621a      	str	r2, [r3, #32]
}
 800c254:	bf00      	nop
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	40012c00 	.word	0x40012c00
 800c264:	40014800 	.word	0x40014800
 800c268:	40014400 	.word	0x40014400

0800c26c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	f023 0210 	bic.w	r2, r3, #16
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f023 0320 	bic.w	r3, r3, #32
 800c2ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	011b      	lsls	r3, r3, #4
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a22      	ldr	r2, [pc, #136]	; (800c354 <TIM_OC2_SetConfig+0xe8>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d10d      	bne.n	800c2ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	011b      	lsls	r3, r3, #4
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a19      	ldr	r2, [pc, #100]	; (800c354 <TIM_OC2_SetConfig+0xe8>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d007      	beq.n	800c304 <TIM_OC2_SetConfig+0x98>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a18      	ldr	r2, [pc, #96]	; (800c358 <TIM_OC2_SetConfig+0xec>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d003      	beq.n	800c304 <TIM_OC2_SetConfig+0x98>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a17      	ldr	r2, [pc, #92]	; (800c35c <TIM_OC2_SetConfig+0xf0>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d113      	bne.n	800c32c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c30a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	695b      	ldr	r3, [r3, #20]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4313      	orrs	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	621a      	str	r2, [r3, #32]
}
 800c346:	bf00      	nop
 800c348:	371c      	adds	r7, #28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	40012c00 	.word	0x40012c00
 800c358:	40014400 	.word	0x40014400
 800c35c:	40014800 	.word	0x40014800

0800c360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	021b      	lsls	r3, r3, #8
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a21      	ldr	r2, [pc, #132]	; (800c444 <TIM_OC3_SetConfig+0xe4>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d10d      	bne.n	800c3de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a18      	ldr	r2, [pc, #96]	; (800c444 <TIM_OC3_SetConfig+0xe4>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d007      	beq.n	800c3f6 <TIM_OC3_SetConfig+0x96>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a17      	ldr	r2, [pc, #92]	; (800c448 <TIM_OC3_SetConfig+0xe8>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d003      	beq.n	800c3f6 <TIM_OC3_SetConfig+0x96>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a16      	ldr	r2, [pc, #88]	; (800c44c <TIM_OC3_SetConfig+0xec>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d113      	bne.n	800c41e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	011b      	lsls	r3, r3, #4
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	4313      	orrs	r3, r2
 800c410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	621a      	str	r2, [r3, #32]
}
 800c438:	bf00      	nop
 800c43a:	371c      	adds	r7, #28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	40012c00 	.word	0x40012c00
 800c448:	40014400 	.word	0x40014400
 800c44c:	40014800 	.word	0x40014800

0800c450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c49e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	031b      	lsls	r3, r3, #12
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a14      	ldr	r2, [pc, #80]	; (800c500 <TIM_OC4_SetConfig+0xb0>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d007      	beq.n	800c4c4 <TIM_OC4_SetConfig+0x74>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a13      	ldr	r2, [pc, #76]	; (800c504 <TIM_OC4_SetConfig+0xb4>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d003      	beq.n	800c4c4 <TIM_OC4_SetConfig+0x74>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a12      	ldr	r2, [pc, #72]	; (800c508 <TIM_OC4_SetConfig+0xb8>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d109      	bne.n	800c4d8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	019b      	lsls	r3, r3, #6
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	621a      	str	r2, [r3, #32]
}
 800c4f2:	bf00      	nop
 800c4f4:	371c      	adds	r7, #28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	40012c00 	.word	0x40012c00
 800c504:	40014400 	.word	0x40014400
 800c508:	40014800 	.word	0x40014800

0800c50c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	4313      	orrs	r3, r2
 800c548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	041b      	lsls	r3, r3, #16
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a13      	ldr	r2, [pc, #76]	; (800c5b0 <TIM_OC5_SetConfig+0xa4>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d007      	beq.n	800c576 <TIM_OC5_SetConfig+0x6a>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a12      	ldr	r2, [pc, #72]	; (800c5b4 <TIM_OC5_SetConfig+0xa8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d003      	beq.n	800c576 <TIM_OC5_SetConfig+0x6a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a11      	ldr	r2, [pc, #68]	; (800c5b8 <TIM_OC5_SetConfig+0xac>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d109      	bne.n	800c58a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c57c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	021b      	lsls	r3, r3, #8
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	4313      	orrs	r3, r2
 800c588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	621a      	str	r2, [r3, #32]
}
 800c5a4:	bf00      	nop
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40014400 	.word	0x40014400
 800c5b8:	40014800 	.word	0x40014800

0800c5bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	051b      	lsls	r3, r3, #20
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a14      	ldr	r2, [pc, #80]	; (800c664 <TIM_OC6_SetConfig+0xa8>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d007      	beq.n	800c628 <TIM_OC6_SetConfig+0x6c>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a13      	ldr	r2, [pc, #76]	; (800c668 <TIM_OC6_SetConfig+0xac>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d003      	beq.n	800c628 <TIM_OC6_SetConfig+0x6c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a12      	ldr	r2, [pc, #72]	; (800c66c <TIM_OC6_SetConfig+0xb0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d109      	bne.n	800c63c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c62e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	029b      	lsls	r3, r3, #10
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	621a      	str	r2, [r3, #32]
}
 800c656:	bf00      	nop
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	40012c00 	.word	0x40012c00
 800c668:	40014400 	.word	0x40014400
 800c66c:	40014800 	.word	0x40014800

0800c670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	f023 0201 	bic.w	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	011b      	lsls	r3, r3, #4
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f023 030a 	bic.w	r3, r3, #10
 800c6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	621a      	str	r2, [r3, #32]
}
 800c6c2:	bf00      	nop
 800c6c4:	371c      	adds	r7, #28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b087      	sub	sp, #28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	f023 0210 	bic.w	r2, r3, #16
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6a1b      	ldr	r3, [r3, #32]
 800c6f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	031b      	lsls	r3, r3, #12
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	4313      	orrs	r3, r2
 800c702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c70a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	011b      	lsls	r3, r3, #4
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	4313      	orrs	r3, r2
 800c714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	621a      	str	r2, [r3, #32]
}
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4313      	orrs	r3, r2
 800c750:	f043 0307 	orr.w	r3, r3, #7
 800c754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	609a      	str	r2, [r3, #8]
}
 800c75c:	bf00      	nop
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	021a      	lsls	r2, r3, #8
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4313      	orrs	r3, r2
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	4313      	orrs	r3, r2
 800c794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	609a      	str	r2, [r3, #8]
}
 800c79c:	bf00      	nop
 800c79e:	371c      	adds	r7, #28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f003 031f 	and.w	r3, r3, #31
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	43db      	mvns	r3, r3
 800c7ca:	401a      	ands	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a1a      	ldr	r2, [r3, #32]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	f003 031f 	and.w	r3, r3, #31
 800c7da:	6879      	ldr	r1, [r7, #4]
 800c7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	621a      	str	r2, [r3, #32]
}
 800c7e6:	bf00      	nop
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c804:	2b01      	cmp	r3, #1
 800c806:	d101      	bne.n	800c80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c808:	2302      	movs	r3, #2
 800c80a:	e04a      	b.n	800c8a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2202      	movs	r2, #2
 800c818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a1f      	ldr	r2, [pc, #124]	; (800c8b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d108      	bne.n	800c848 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c83c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	4313      	orrs	r3, r2
 800c846:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c84e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4313      	orrs	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a12      	ldr	r2, [pc, #72]	; (800c8b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d004      	beq.n	800c876 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c874:	d10c      	bne.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c87c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	4313      	orrs	r3, r2
 800c886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	40012c00 	.word	0x40012c00

0800c8b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <LL_RCC_GetUSARTClockSource>:
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c8f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4013      	ands	r3, r2
}
 800c904:	4618      	mov	r0, r3
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <LL_RCC_GetLPUARTClockSource>:
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c91c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4013      	ands	r3, r2
}
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e042      	b.n	800c9c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d106      	bne.n	800c95a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7f8 fd85 	bl	8005464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2224      	movs	r2, #36	; 0x24
 800c95e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f022 0201 	bic.w	r2, r2, #1
 800c970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f988 	bl	800cc88 <UART_SetConfig>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d101      	bne.n	800c982 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	e022      	b.n	800c9c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 f9e0 	bl	800dd50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c99e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	689a      	ldr	r2, [r3, #8]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f042 0201 	orr.w	r2, r2, #1
 800c9be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 fa67 	bl	800de94 <UART_CheckIdleState>
 800c9c6:	4603      	mov	r3, r0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	d168      	bne.n	800caba <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d002      	beq.n	800c9f4 <HAL_UART_Transmit_IT+0x24>
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e061      	b.n	800cabc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d101      	bne.n	800ca06 <HAL_UART_Transmit_IT+0x36>
 800ca02:	2302      	movs	r3, #2
 800ca04:	e05a      	b.n	800cabc <HAL_UART_Transmit_IT+0xec>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	88fa      	ldrh	r2, [r7, #6]
 800ca18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	88fa      	ldrh	r2, [r7, #6]
 800ca20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2221      	movs	r2, #33	; 0x21
 800ca36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca42:	d11c      	bne.n	800ca7e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca4c:	d107      	bne.n	800ca5e <HAL_UART_Transmit_IT+0x8e>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d103      	bne.n	800ca5e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4a1b      	ldr	r2, [pc, #108]	; (800cac8 <HAL_UART_Transmit_IT+0xf8>)
 800ca5a:	671a      	str	r2, [r3, #112]	; 0x70
 800ca5c:	e002      	b.n	800ca64 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	4a1a      	ldr	r2, [pc, #104]	; (800cacc <HAL_UART_Transmit_IT+0xfc>)
 800ca62:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	689a      	ldr	r2, [r3, #8]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ca7a:	609a      	str	r2, [r3, #8]
 800ca7c:	e01b      	b.n	800cab6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca86:	d107      	bne.n	800ca98 <HAL_UART_Transmit_IT+0xc8>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d103      	bne.n	800ca98 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4a0f      	ldr	r2, [pc, #60]	; (800cad0 <HAL_UART_Transmit_IT+0x100>)
 800ca94:	671a      	str	r2, [r3, #112]	; 0x70
 800ca96:	e002      	b.n	800ca9e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <HAL_UART_Transmit_IT+0x104>)
 800ca9c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cab4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e000      	b.n	800cabc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800caba:	2302      	movs	r3, #2
  }
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	0800e1b1 	.word	0x0800e1b1
 800cacc:	0800e117 	.word	0x0800e117
 800cad0:	0800e099 	.word	0x0800e099
 800cad4:	0800e025 	.word	0x0800e025

0800cad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	4613      	mov	r3, r2
 800cae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caec:	2b20      	cmp	r3, #32
 800caee:	f040 80bc 	bne.w	800cc6a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <HAL_UART_Receive_IT+0x26>
 800caf8:	88fb      	ldrh	r3, [r7, #6]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e0b4      	b.n	800cc6c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d101      	bne.n	800cb10 <HAL_UART_Receive_IT+0x38>
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e0ad      	b.n	800cc6c <HAL_UART_Receive_IT+0x194>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	88fa      	ldrh	r2, [r7, #6]
 800cb22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	88fa      	ldrh	r2, [r7, #6]
 800cb2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb3c:	d10e      	bne.n	800cb5c <HAL_UART_Receive_IT+0x84>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d105      	bne.n	800cb52 <HAL_UART_Receive_IT+0x7a>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cb4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb50:	e02d      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	22ff      	movs	r2, #255	; 0xff
 800cb56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb5a:	e028      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10d      	bne.n	800cb80 <HAL_UART_Receive_IT+0xa8>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d104      	bne.n	800cb76 <HAL_UART_Receive_IT+0x9e>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	22ff      	movs	r2, #255	; 0xff
 800cb70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb74:	e01b      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	227f      	movs	r2, #127	; 0x7f
 800cb7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb7e:	e016      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb88:	d10d      	bne.n	800cba6 <HAL_UART_Receive_IT+0xce>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d104      	bne.n	800cb9c <HAL_UART_Receive_IT+0xc4>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	227f      	movs	r2, #127	; 0x7f
 800cb96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb9a:	e008      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	223f      	movs	r2, #63	; 0x3f
 800cba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cba4:	e003      	b.n	800cbae <HAL_UART_Receive_IT+0xd6>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2222      	movs	r2, #34	; 0x22
 800cbba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f042 0201 	orr.w	r2, r2, #1
 800cbcc:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd6:	d12a      	bne.n	800cc2e <HAL_UART_Receive_IT+0x156>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbde:	88fa      	ldrh	r2, [r7, #6]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d324      	bcc.n	800cc2e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbec:	d107      	bne.n	800cbfe <HAL_UART_Receive_IT+0x126>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d103      	bne.n	800cbfe <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <HAL_UART_Receive_IT+0x1a0>)
 800cbfa:	66da      	str	r2, [r3, #108]	; 0x6c
 800cbfc:	e002      	b.n	800cc04 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4a1e      	ldr	r2, [pc, #120]	; (800cc7c <HAL_UART_Receive_IT+0x1a4>)
 800cc02:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc1a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689a      	ldr	r2, [r3, #8]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cc2a:	609a      	str	r2, [r3, #8]
 800cc2c:	e01b      	b.n	800cc66 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc36:	d107      	bne.n	800cc48 <HAL_UART_Receive_IT+0x170>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d103      	bne.n	800cc48 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <HAL_UART_Receive_IT+0x1a8>)
 800cc44:	66da      	str	r2, [r3, #108]	; 0x6c
 800cc46:	e002      	b.n	800cc4e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4a0e      	ldr	r2, [pc, #56]	; (800cc84 <HAL_UART_Receive_IT+0x1ac>)
 800cc4c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cc64:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e000      	b.n	800cc6c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800cc6a:	2302      	movs	r3, #2
  }
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	0800e4b1 	.word	0x0800e4b1
 800cc7c:	0800e3a9 	.word	0x0800e3a9
 800cc80:	0800e2ff 	.word	0x0800e2ff
 800cc84:	0800e255 	.word	0x0800e255

0800cc88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800cc8c:	b08a      	sub	sp, #40	; 0x28
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689a      	ldr	r2, [r3, #8]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	431a      	orrs	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	431a      	orrs	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	4ba4      	ldr	r3, [pc, #656]	; (800cf58 <UART_SetConfig+0x2d0>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	6812      	ldr	r2, [r2, #0]
 800ccce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccd0:	430b      	orrs	r3, r1
 800ccd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68da      	ldr	r2, [r3, #12]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	430a      	orrs	r2, r1
 800cce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a99      	ldr	r2, [pc, #612]	; (800cf5c <UART_SetConfig+0x2d4>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d004      	beq.n	800cd04 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd00:	4313      	orrs	r3, r2
 800cd02:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cd0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	6812      	ldr	r2, [r2, #0]
 800cd16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd22:	f023 010f 	bic.w	r1, r3, #15
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a8a      	ldr	r2, [pc, #552]	; (800cf60 <UART_SetConfig+0x2d8>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d126      	bne.n	800cd8a <UART_SetConfig+0x102>
 800cd3c:	2003      	movs	r0, #3
 800cd3e:	f7ff fdd7 	bl	800c8f0 <LL_RCC_GetUSARTClockSource>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d81b      	bhi.n	800cd80 <UART_SetConfig+0xf8>
 800cd48:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <UART_SetConfig+0xc8>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cd61 	.word	0x0800cd61
 800cd54:	0800cd71 	.word	0x0800cd71
 800cd58:	0800cd69 	.word	0x0800cd69
 800cd5c:	0800cd79 	.word	0x0800cd79
 800cd60:	2301      	movs	r3, #1
 800cd62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd66:	e042      	b.n	800cdee <UART_SetConfig+0x166>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd6e:	e03e      	b.n	800cdee <UART_SetConfig+0x166>
 800cd70:	2304      	movs	r3, #4
 800cd72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd76:	e03a      	b.n	800cdee <UART_SetConfig+0x166>
 800cd78:	2308      	movs	r3, #8
 800cd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd7e:	e036      	b.n	800cdee <UART_SetConfig+0x166>
 800cd80:	2310      	movs	r3, #16
 800cd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd86:	bf00      	nop
 800cd88:	e031      	b.n	800cdee <UART_SetConfig+0x166>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a73      	ldr	r2, [pc, #460]	; (800cf5c <UART_SetConfig+0x2d4>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d129      	bne.n	800cde8 <UART_SetConfig+0x160>
 800cd94:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800cd98:	f7ff fdba 	bl	800c910 <LL_RCC_GetLPUARTClockSource>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cda2:	d014      	beq.n	800cdce <UART_SetConfig+0x146>
 800cda4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cda8:	d802      	bhi.n	800cdb0 <UART_SetConfig+0x128>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d007      	beq.n	800cdbe <UART_SetConfig+0x136>
 800cdae:	e016      	b.n	800cdde <UART_SetConfig+0x156>
 800cdb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdb4:	d007      	beq.n	800cdc6 <UART_SetConfig+0x13e>
 800cdb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cdba:	d00c      	beq.n	800cdd6 <UART_SetConfig+0x14e>
 800cdbc:	e00f      	b.n	800cdde <UART_SetConfig+0x156>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdc4:	e013      	b.n	800cdee <UART_SetConfig+0x166>
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdcc:	e00f      	b.n	800cdee <UART_SetConfig+0x166>
 800cdce:	2304      	movs	r3, #4
 800cdd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdd4:	e00b      	b.n	800cdee <UART_SetConfig+0x166>
 800cdd6:	2308      	movs	r3, #8
 800cdd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cddc:	e007      	b.n	800cdee <UART_SetConfig+0x166>
 800cdde:	2310      	movs	r3, #16
 800cde0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cde4:	bf00      	nop
 800cde6:	e002      	b.n	800cdee <UART_SetConfig+0x166>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a5a      	ldr	r2, [pc, #360]	; (800cf5c <UART_SetConfig+0x2d4>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	f040 8428 	bne.w	800d64a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdfe:	2b08      	cmp	r3, #8
 800ce00:	f200 8171 	bhi.w	800d0e6 <UART_SetConfig+0x45e>
 800ce04:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <UART_SetConfig+0x184>)
 800ce06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0a:	bf00      	nop
 800ce0c:	0800ce31 	.word	0x0800ce31
 800ce10:	0800d0e7 	.word	0x0800d0e7
 800ce14:	0800ced3 	.word	0x0800ced3
 800ce18:	0800d0e7 	.word	0x0800d0e7
 800ce1c:	0800cf97 	.word	0x0800cf97
 800ce20:	0800d0e7 	.word	0x0800d0e7
 800ce24:	0800d0e7 	.word	0x0800d0e7
 800ce28:	0800d0e7 	.word	0x0800d0e7
 800ce2c:	0800d039 	.word	0x0800d039
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ce30:	f7fd fe70 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 800ce34:	4602      	mov	r2, r0
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d044      	beq.n	800cec8 <UART_SetConfig+0x240>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d03e      	beq.n	800cec4 <UART_SetConfig+0x23c>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d038      	beq.n	800cec0 <UART_SetConfig+0x238>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d032      	beq.n	800cebc <UART_SetConfig+0x234>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	d02c      	beq.n	800ceb8 <UART_SetConfig+0x230>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce62:	2b05      	cmp	r3, #5
 800ce64:	d026      	beq.n	800ceb4 <UART_SetConfig+0x22c>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6a:	2b06      	cmp	r3, #6
 800ce6c:	d020      	beq.n	800ceb0 <UART_SetConfig+0x228>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce72:	2b07      	cmp	r3, #7
 800ce74:	d01a      	beq.n	800ceac <UART_SetConfig+0x224>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7a:	2b08      	cmp	r3, #8
 800ce7c:	d014      	beq.n	800cea8 <UART_SetConfig+0x220>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	d00e      	beq.n	800cea4 <UART_SetConfig+0x21c>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8a:	2b0a      	cmp	r3, #10
 800ce8c:	d008      	beq.n	800cea0 <UART_SetConfig+0x218>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce92:	2b0b      	cmp	r3, #11
 800ce94:	d102      	bne.n	800ce9c <UART_SetConfig+0x214>
 800ce96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce9a:	e016      	b.n	800ceca <UART_SetConfig+0x242>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e014      	b.n	800ceca <UART_SetConfig+0x242>
 800cea0:	2380      	movs	r3, #128	; 0x80
 800cea2:	e012      	b.n	800ceca <UART_SetConfig+0x242>
 800cea4:	2340      	movs	r3, #64	; 0x40
 800cea6:	e010      	b.n	800ceca <UART_SetConfig+0x242>
 800cea8:	2320      	movs	r3, #32
 800ceaa:	e00e      	b.n	800ceca <UART_SetConfig+0x242>
 800ceac:	2310      	movs	r3, #16
 800ceae:	e00c      	b.n	800ceca <UART_SetConfig+0x242>
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	e00a      	b.n	800ceca <UART_SetConfig+0x242>
 800ceb4:	230a      	movs	r3, #10
 800ceb6:	e008      	b.n	800ceca <UART_SetConfig+0x242>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	e006      	b.n	800ceca <UART_SetConfig+0x242>
 800cebc:	2306      	movs	r3, #6
 800cebe:	e004      	b.n	800ceca <UART_SetConfig+0x242>
 800cec0:	2304      	movs	r3, #4
 800cec2:	e002      	b.n	800ceca <UART_SetConfig+0x242>
 800cec4:	2302      	movs	r3, #2
 800cec6:	e000      	b.n	800ceca <UART_SetConfig+0x242>
 800cec8:	2301      	movs	r3, #1
 800ceca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cece:	617b      	str	r3, [r7, #20]
        break;
 800ced0:	e10c      	b.n	800d0ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d05a      	beq.n	800cf90 <UART_SetConfig+0x308>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d054      	beq.n	800cf8c <UART_SetConfig+0x304>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d04e      	beq.n	800cf88 <UART_SetConfig+0x300>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	2b03      	cmp	r3, #3
 800cef0:	d048      	beq.n	800cf84 <UART_SetConfig+0x2fc>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef6:	2b04      	cmp	r3, #4
 800cef8:	d02c      	beq.n	800cf54 <UART_SetConfig+0x2cc>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	2b05      	cmp	r3, #5
 800cf00:	d026      	beq.n	800cf50 <UART_SetConfig+0x2c8>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	2b06      	cmp	r3, #6
 800cf08:	d020      	beq.n	800cf4c <UART_SetConfig+0x2c4>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	2b07      	cmp	r3, #7
 800cf10:	d01a      	beq.n	800cf48 <UART_SetConfig+0x2c0>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf16:	2b08      	cmp	r3, #8
 800cf18:	d014      	beq.n	800cf44 <UART_SetConfig+0x2bc>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1e:	2b09      	cmp	r3, #9
 800cf20:	d00e      	beq.n	800cf40 <UART_SetConfig+0x2b8>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	2b0a      	cmp	r3, #10
 800cf28:	d008      	beq.n	800cf3c <UART_SetConfig+0x2b4>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	2b0b      	cmp	r3, #11
 800cf30:	d102      	bne.n	800cf38 <UART_SetConfig+0x2b0>
 800cf32:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cf36:	e02c      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <UART_SetConfig+0x2dc>)
 800cf3a:	e02a      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <UART_SetConfig+0x2e0>)
 800cf3e:	e028      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <UART_SetConfig+0x2e4>)
 800cf42:	e026      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf44:	4b0a      	ldr	r3, [pc, #40]	; (800cf70 <UART_SetConfig+0x2e8>)
 800cf46:	e024      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <UART_SetConfig+0x2ec>)
 800cf4a:	e022      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <UART_SetConfig+0x2f0>)
 800cf4e:	e020      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf50:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <UART_SetConfig+0x2f4>)
 800cf52:	e01e      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf54:	4b0a      	ldr	r3, [pc, #40]	; (800cf80 <UART_SetConfig+0x2f8>)
 800cf56:	e01c      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf58:	cfff69f3 	.word	0xcfff69f3
 800cf5c:	40008000 	.word	0x40008000
 800cf60:	40013800 	.word	0x40013800
 800cf64:	00f42400 	.word	0x00f42400
 800cf68:	0001e848 	.word	0x0001e848
 800cf6c:	0003d090 	.word	0x0003d090
 800cf70:	0007a120 	.word	0x0007a120
 800cf74:	000f4240 	.word	0x000f4240
 800cf78:	00145855 	.word	0x00145855
 800cf7c:	00186a00 	.word	0x00186a00
 800cf80:	001e8480 	.word	0x001e8480
 800cf84:	4ba6      	ldr	r3, [pc, #664]	; (800d220 <UART_SetConfig+0x598>)
 800cf86:	e004      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf88:	4ba6      	ldr	r3, [pc, #664]	; (800d224 <UART_SetConfig+0x59c>)
 800cf8a:	e002      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf8c:	4ba6      	ldr	r3, [pc, #664]	; (800d228 <UART_SetConfig+0x5a0>)
 800cf8e:	e000      	b.n	800cf92 <UART_SetConfig+0x30a>
 800cf90:	4ba6      	ldr	r3, [pc, #664]	; (800d22c <UART_SetConfig+0x5a4>)
 800cf92:	617b      	str	r3, [r7, #20]
        break;
 800cf94:	e0aa      	b.n	800d0ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800cf96:	f7fd fd3f 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d044      	beq.n	800d02e <UART_SetConfig+0x3a6>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d03e      	beq.n	800d02a <UART_SetConfig+0x3a2>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d038      	beq.n	800d026 <UART_SetConfig+0x39e>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d032      	beq.n	800d022 <UART_SetConfig+0x39a>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d02c      	beq.n	800d01e <UART_SetConfig+0x396>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	2b05      	cmp	r3, #5
 800cfca:	d026      	beq.n	800d01a <UART_SetConfig+0x392>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	2b06      	cmp	r3, #6
 800cfd2:	d020      	beq.n	800d016 <UART_SetConfig+0x38e>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd8:	2b07      	cmp	r3, #7
 800cfda:	d01a      	beq.n	800d012 <UART_SetConfig+0x38a>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d014      	beq.n	800d00e <UART_SetConfig+0x386>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2b09      	cmp	r3, #9
 800cfea:	d00e      	beq.n	800d00a <UART_SetConfig+0x382>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff0:	2b0a      	cmp	r3, #10
 800cff2:	d008      	beq.n	800d006 <UART_SetConfig+0x37e>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff8:	2b0b      	cmp	r3, #11
 800cffa:	d102      	bne.n	800d002 <UART_SetConfig+0x37a>
 800cffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d000:	e016      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d002:	2301      	movs	r3, #1
 800d004:	e014      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d006:	2380      	movs	r3, #128	; 0x80
 800d008:	e012      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d00a:	2340      	movs	r3, #64	; 0x40
 800d00c:	e010      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d00e:	2320      	movs	r3, #32
 800d010:	e00e      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d012:	2310      	movs	r3, #16
 800d014:	e00c      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d016:	230c      	movs	r3, #12
 800d018:	e00a      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d01a:	230a      	movs	r3, #10
 800d01c:	e008      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d01e:	2308      	movs	r3, #8
 800d020:	e006      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d022:	2306      	movs	r3, #6
 800d024:	e004      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d026:	2304      	movs	r3, #4
 800d028:	e002      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d02a:	2302      	movs	r3, #2
 800d02c:	e000      	b.n	800d030 <UART_SetConfig+0x3a8>
 800d02e:	2301      	movs	r3, #1
 800d030:	fbb2 f3f3 	udiv	r3, r2, r3
 800d034:	617b      	str	r3, [r7, #20]
        break;
 800d036:	e059      	b.n	800d0ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d04e      	beq.n	800d0de <UART_SetConfig+0x456>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	2b01      	cmp	r3, #1
 800d046:	d047      	beq.n	800d0d8 <UART_SetConfig+0x450>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d040      	beq.n	800d0d2 <UART_SetConfig+0x44a>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d054:	2b03      	cmp	r3, #3
 800d056:	d039      	beq.n	800d0cc <UART_SetConfig+0x444>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	2b04      	cmp	r3, #4
 800d05e:	d032      	beq.n	800d0c6 <UART_SetConfig+0x43e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	2b05      	cmp	r3, #5
 800d066:	d02b      	beq.n	800d0c0 <UART_SetConfig+0x438>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06c:	2b06      	cmp	r3, #6
 800d06e:	d024      	beq.n	800d0ba <UART_SetConfig+0x432>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d074:	2b07      	cmp	r3, #7
 800d076:	d01d      	beq.n	800d0b4 <UART_SetConfig+0x42c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	2b08      	cmp	r3, #8
 800d07e:	d016      	beq.n	800d0ae <UART_SetConfig+0x426>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	2b09      	cmp	r3, #9
 800d086:	d00f      	beq.n	800d0a8 <UART_SetConfig+0x420>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08c:	2b0a      	cmp	r3, #10
 800d08e:	d008      	beq.n	800d0a2 <UART_SetConfig+0x41a>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	2b0b      	cmp	r3, #11
 800d096:	d101      	bne.n	800d09c <UART_SetConfig+0x414>
 800d098:	2380      	movs	r3, #128	; 0x80
 800d09a:	e022      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d09c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0a0:	e01f      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0a6:	e01c      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0ac:	e019      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0b2:	e016      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0b8:	e013      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0ba:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800d0be:	e010      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0c0:	f640 43cc 	movw	r3, #3276	; 0xccc
 800d0c4:	e00d      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0ca:	e00a      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0cc:	f241 5355 	movw	r3, #5461	; 0x1555
 800d0d0:	e007      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0d6:	e004      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d0dc:	e001      	b.n	800d0e2 <UART_SetConfig+0x45a>
 800d0de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0e2:	617b      	str	r3, [r7, #20]
        break;
 800d0e4:	e002      	b.n	800d0ec <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	76fb      	strb	r3, [r7, #27]
        break;
 800d0ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 8604 	beq.w	800dcfc <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	4413      	add	r3, r2
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	429a      	cmp	r2, r3
 800d102:	d305      	bcc.n	800d110 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d903      	bls.n	800d118 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	76fb      	strb	r3, [r7, #27]
 800d114:	f000 bdf2 	b.w	800dcfc <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 800d118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	f200 8281 	bhi.w	800d624 <UART_SetConfig+0x99c>
 800d122:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <UART_SetConfig+0x4a0>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d14d 	.word	0x0800d14d
 800d12c:	0800d625 	.word	0x0800d625
 800d130:	0800d29d 	.word	0x0800d29d
 800d134:	0800d625 	.word	0x0800d625
 800d138:	0800d393 	.word	0x0800d393
 800d13c:	0800d625 	.word	0x0800d625
 800d140:	0800d625 	.word	0x0800d625
 800d144:	0800d625 	.word	0x0800d625
 800d148:	0800d4d1 	.word	0x0800d4d1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800d14c:	f7fd fce2 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 800d150:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	4618      	mov	r0, r3
 800d156:	f04f 0100 	mov.w	r1, #0
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d070      	beq.n	800d244 <UART_SetConfig+0x5bc>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b01      	cmp	r3, #1
 800d168:	d067      	beq.n	800d23a <UART_SetConfig+0x5b2>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d05e      	beq.n	800d230 <UART_SetConfig+0x5a8>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b03      	cmp	r3, #3
 800d178:	d04c      	beq.n	800d214 <UART_SetConfig+0x58c>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b04      	cmp	r3, #4
 800d180:	d043      	beq.n	800d20a <UART_SetConfig+0x582>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	2b05      	cmp	r3, #5
 800d188:	d03a      	beq.n	800d200 <UART_SetConfig+0x578>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18e:	2b06      	cmp	r3, #6
 800d190:	d031      	beq.n	800d1f6 <UART_SetConfig+0x56e>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d196:	2b07      	cmp	r3, #7
 800d198:	d028      	beq.n	800d1ec <UART_SetConfig+0x564>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	2b08      	cmp	r3, #8
 800d1a0:	d01f      	beq.n	800d1e2 <UART_SetConfig+0x55a>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d016      	beq.n	800d1d8 <UART_SetConfig+0x550>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	2b0a      	cmp	r3, #10
 800d1b0:	d00d      	beq.n	800d1ce <UART_SetConfig+0x546>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b6:	2b0b      	cmp	r3, #11
 800d1b8:	d104      	bne.n	800d1c4 <UART_SetConfig+0x53c>
 800d1ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1be:	f04f 0400 	mov.w	r4, #0
 800d1c2:	e043      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1c4:	f04f 0301 	mov.w	r3, #1
 800d1c8:	f04f 0400 	mov.w	r4, #0
 800d1cc:	e03e      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d1d2:	f04f 0400 	mov.w	r4, #0
 800d1d6:	e039      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d1dc:	f04f 0400 	mov.w	r4, #0
 800d1e0:	e034      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1e2:	f04f 0320 	mov.w	r3, #32
 800d1e6:	f04f 0400 	mov.w	r4, #0
 800d1ea:	e02f      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1ec:	f04f 0310 	mov.w	r3, #16
 800d1f0:	f04f 0400 	mov.w	r4, #0
 800d1f4:	e02a      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d1f6:	f04f 030c 	mov.w	r3, #12
 800d1fa:	f04f 0400 	mov.w	r4, #0
 800d1fe:	e025      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d200:	f04f 030a 	mov.w	r3, #10
 800d204:	f04f 0400 	mov.w	r4, #0
 800d208:	e020      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d20a:	f04f 0308 	mov.w	r3, #8
 800d20e:	f04f 0400 	mov.w	r4, #0
 800d212:	e01b      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d214:	f04f 0306 	mov.w	r3, #6
 800d218:	f04f 0400 	mov.w	r4, #0
 800d21c:	e016      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d21e:	bf00      	nop
 800d220:	0028b0aa 	.word	0x0028b0aa
 800d224:	003d0900 	.word	0x003d0900
 800d228:	007a1200 	.word	0x007a1200
 800d22c:	00f42400 	.word	0x00f42400
 800d230:	f04f 0304 	mov.w	r3, #4
 800d234:	f04f 0400 	mov.w	r4, #0
 800d238:	e008      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d23a:	f04f 0302 	mov.w	r3, #2
 800d23e:	f04f 0400 	mov.w	r4, #0
 800d242:	e003      	b.n	800d24c <UART_SetConfig+0x5c4>
 800d244:	f04f 0301 	mov.w	r3, #1
 800d248:	f04f 0400 	mov.w	r4, #0
 800d24c:	461a      	mov	r2, r3
 800d24e:	4623      	mov	r3, r4
 800d250:	f7f3 fc5c 	bl	8000b0c <__aeabi_uldivmod>
 800d254:	4603      	mov	r3, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4619      	mov	r1, r3
 800d25a:	4622      	mov	r2, r4
 800d25c:	f04f 0300 	mov.w	r3, #0
 800d260:	f04f 0400 	mov.w	r4, #0
 800d264:	0214      	lsls	r4, r2, #8
 800d266:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d26a:	020b      	lsls	r3, r1, #8
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	6852      	ldr	r2, [r2, #4]
 800d270:	0852      	lsrs	r2, r2, #1
 800d272:	4611      	mov	r1, r2
 800d274:	f04f 0200 	mov.w	r2, #0
 800d278:	eb13 0b01 	adds.w	fp, r3, r1
 800d27c:	eb44 0c02 	adc.w	ip, r4, r2
 800d280:	4658      	mov	r0, fp
 800d282:	4661      	mov	r1, ip
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f04f 0400 	mov.w	r4, #0
 800d28c:	461a      	mov	r2, r3
 800d28e:	4623      	mov	r3, r4
 800d290:	f7f3 fc3c 	bl	8000b0c <__aeabi_uldivmod>
 800d294:	4603      	mov	r3, r0
 800d296:	460c      	mov	r4, r1
 800d298:	61fb      	str	r3, [r7, #28]
            break;
 800d29a:	e1c6      	b.n	800d62a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d05b      	beq.n	800d35c <UART_SetConfig+0x6d4>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d053      	beq.n	800d354 <UART_SetConfig+0x6cc>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d04b      	beq.n	800d34c <UART_SetConfig+0x6c4>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d043      	beq.n	800d344 <UART_SetConfig+0x6bc>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d03b      	beq.n	800d33c <UART_SetConfig+0x6b4>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c8:	2b05      	cmp	r3, #5
 800d2ca:	d033      	beq.n	800d334 <UART_SetConfig+0x6ac>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d0:	2b06      	cmp	r3, #6
 800d2d2:	d02b      	beq.n	800d32c <UART_SetConfig+0x6a4>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d8:	2b07      	cmp	r3, #7
 800d2da:	d023      	beq.n	800d324 <UART_SetConfig+0x69c>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	2b08      	cmp	r3, #8
 800d2e2:	d01b      	beq.n	800d31c <UART_SetConfig+0x694>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	2b09      	cmp	r3, #9
 800d2ea:	d013      	beq.n	800d314 <UART_SetConfig+0x68c>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f0:	2b0a      	cmp	r3, #10
 800d2f2:	d00b      	beq.n	800d30c <UART_SetConfig+0x684>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f8:	2b0b      	cmp	r3, #11
 800d2fa:	d103      	bne.n	800d304 <UART_SetConfig+0x67c>
 800d2fc:	4bae      	ldr	r3, [pc, #696]	; (800d5b8 <UART_SetConfig+0x930>)
 800d2fe:	f04f 0400 	mov.w	r4, #0
 800d302:	e02e      	b.n	800d362 <UART_SetConfig+0x6da>
 800d304:	4bad      	ldr	r3, [pc, #692]	; (800d5bc <UART_SetConfig+0x934>)
 800d306:	f04f 0400 	mov.w	r4, #0
 800d30a:	e02a      	b.n	800d362 <UART_SetConfig+0x6da>
 800d30c:	4bac      	ldr	r3, [pc, #688]	; (800d5c0 <UART_SetConfig+0x938>)
 800d30e:	f04f 0400 	mov.w	r4, #0
 800d312:	e026      	b.n	800d362 <UART_SetConfig+0x6da>
 800d314:	4bab      	ldr	r3, [pc, #684]	; (800d5c4 <UART_SetConfig+0x93c>)
 800d316:	f04f 0400 	mov.w	r4, #0
 800d31a:	e022      	b.n	800d362 <UART_SetConfig+0x6da>
 800d31c:	4baa      	ldr	r3, [pc, #680]	; (800d5c8 <UART_SetConfig+0x940>)
 800d31e:	f04f 0400 	mov.w	r4, #0
 800d322:	e01e      	b.n	800d362 <UART_SetConfig+0x6da>
 800d324:	4ba9      	ldr	r3, [pc, #676]	; (800d5cc <UART_SetConfig+0x944>)
 800d326:	f04f 0400 	mov.w	r4, #0
 800d32a:	e01a      	b.n	800d362 <UART_SetConfig+0x6da>
 800d32c:	a49e      	add	r4, pc, #632	; (adr r4, 800d5a8 <UART_SetConfig+0x920>)
 800d32e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d332:	e016      	b.n	800d362 <UART_SetConfig+0x6da>
 800d334:	4ba6      	ldr	r3, [pc, #664]	; (800d5d0 <UART_SetConfig+0x948>)
 800d336:	f04f 0400 	mov.w	r4, #0
 800d33a:	e012      	b.n	800d362 <UART_SetConfig+0x6da>
 800d33c:	4ba5      	ldr	r3, [pc, #660]	; (800d5d4 <UART_SetConfig+0x94c>)
 800d33e:	f04f 0400 	mov.w	r4, #0
 800d342:	e00e      	b.n	800d362 <UART_SetConfig+0x6da>
 800d344:	a49a      	add	r4, pc, #616	; (adr r4, 800d5b0 <UART_SetConfig+0x928>)
 800d346:	e9d4 3400 	ldrd	r3, r4, [r4]
 800d34a:	e00a      	b.n	800d362 <UART_SetConfig+0x6da>
 800d34c:	4ba2      	ldr	r3, [pc, #648]	; (800d5d8 <UART_SetConfig+0x950>)
 800d34e:	f04f 0400 	mov.w	r4, #0
 800d352:	e006      	b.n	800d362 <UART_SetConfig+0x6da>
 800d354:	4ba1      	ldr	r3, [pc, #644]	; (800d5dc <UART_SetConfig+0x954>)
 800d356:	f04f 0400 	mov.w	r4, #0
 800d35a:	e002      	b.n	800d362 <UART_SetConfig+0x6da>
 800d35c:	4b97      	ldr	r3, [pc, #604]	; (800d5bc <UART_SetConfig+0x934>)
 800d35e:	f04f 0400 	mov.w	r4, #0
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	6852      	ldr	r2, [r2, #4]
 800d366:	0852      	lsrs	r2, r2, #1
 800d368:	4611      	mov	r1, r2
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	eb13 0b01 	adds.w	fp, r3, r1
 800d372:	eb44 0c02 	adc.w	ip, r4, r2
 800d376:	4658      	mov	r0, fp
 800d378:	4661      	mov	r1, ip
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f04f 0400 	mov.w	r4, #0
 800d382:	461a      	mov	r2, r3
 800d384:	4623      	mov	r3, r4
 800d386:	f7f3 fbc1 	bl	8000b0c <__aeabi_uldivmod>
 800d38a:	4603      	mov	r3, r0
 800d38c:	460c      	mov	r4, r1
 800d38e:	61fb      	str	r3, [r7, #28]
            break;
 800d390:	e14b      	b.n	800d62a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800d392:	f7fd fb41 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800d396:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f04f 0100 	mov.w	r1, #0
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d067      	beq.n	800d478 <UART_SetConfig+0x7f0>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d05e      	beq.n	800d46e <UART_SetConfig+0x7e6>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d055      	beq.n	800d464 <UART_SetConfig+0x7dc>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	2b03      	cmp	r3, #3
 800d3be:	d04c      	beq.n	800d45a <UART_SetConfig+0x7d2>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	d043      	beq.n	800d450 <UART_SetConfig+0x7c8>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b05      	cmp	r3, #5
 800d3ce:	d03a      	beq.n	800d446 <UART_SetConfig+0x7be>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d4:	2b06      	cmp	r3, #6
 800d3d6:	d031      	beq.n	800d43c <UART_SetConfig+0x7b4>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	2b07      	cmp	r3, #7
 800d3de:	d028      	beq.n	800d432 <UART_SetConfig+0x7aa>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	2b08      	cmp	r3, #8
 800d3e6:	d01f      	beq.n	800d428 <UART_SetConfig+0x7a0>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ec:	2b09      	cmp	r3, #9
 800d3ee:	d016      	beq.n	800d41e <UART_SetConfig+0x796>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	2b0a      	cmp	r3, #10
 800d3f6:	d00d      	beq.n	800d414 <UART_SetConfig+0x78c>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	2b0b      	cmp	r3, #11
 800d3fe:	d104      	bne.n	800d40a <UART_SetConfig+0x782>
 800d400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d404:	f04f 0400 	mov.w	r4, #0
 800d408:	e03a      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d40a:	f04f 0301 	mov.w	r3, #1
 800d40e:	f04f 0400 	mov.w	r4, #0
 800d412:	e035      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d414:	f04f 0380 	mov.w	r3, #128	; 0x80
 800d418:	f04f 0400 	mov.w	r4, #0
 800d41c:	e030      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d41e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800d422:	f04f 0400 	mov.w	r4, #0
 800d426:	e02b      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d428:	f04f 0320 	mov.w	r3, #32
 800d42c:	f04f 0400 	mov.w	r4, #0
 800d430:	e026      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d432:	f04f 0310 	mov.w	r3, #16
 800d436:	f04f 0400 	mov.w	r4, #0
 800d43a:	e021      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d43c:	f04f 030c 	mov.w	r3, #12
 800d440:	f04f 0400 	mov.w	r4, #0
 800d444:	e01c      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d446:	f04f 030a 	mov.w	r3, #10
 800d44a:	f04f 0400 	mov.w	r4, #0
 800d44e:	e017      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d450:	f04f 0308 	mov.w	r3, #8
 800d454:	f04f 0400 	mov.w	r4, #0
 800d458:	e012      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d45a:	f04f 0306 	mov.w	r3, #6
 800d45e:	f04f 0400 	mov.w	r4, #0
 800d462:	e00d      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d464:	f04f 0304 	mov.w	r3, #4
 800d468:	f04f 0400 	mov.w	r4, #0
 800d46c:	e008      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d46e:	f04f 0302 	mov.w	r3, #2
 800d472:	f04f 0400 	mov.w	r4, #0
 800d476:	e003      	b.n	800d480 <UART_SetConfig+0x7f8>
 800d478:	f04f 0301 	mov.w	r3, #1
 800d47c:	f04f 0400 	mov.w	r4, #0
 800d480:	461a      	mov	r2, r3
 800d482:	4623      	mov	r3, r4
 800d484:	f7f3 fb42 	bl	8000b0c <__aeabi_uldivmod>
 800d488:	4603      	mov	r3, r0
 800d48a:	460c      	mov	r4, r1
 800d48c:	4619      	mov	r1, r3
 800d48e:	4622      	mov	r2, r4
 800d490:	f04f 0300 	mov.w	r3, #0
 800d494:	f04f 0400 	mov.w	r4, #0
 800d498:	0214      	lsls	r4, r2, #8
 800d49a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d49e:	020b      	lsls	r3, r1, #8
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	6852      	ldr	r2, [r2, #4]
 800d4a4:	0852      	lsrs	r2, r2, #1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	f04f 0200 	mov.w	r2, #0
 800d4ac:	eb13 0b01 	adds.w	fp, r3, r1
 800d4b0:	eb44 0c02 	adc.w	ip, r4, r2
 800d4b4:	4658      	mov	r0, fp
 800d4b6:	4661      	mov	r1, ip
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f04f 0400 	mov.w	r4, #0
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4623      	mov	r3, r4
 800d4c4:	f7f3 fb22 	bl	8000b0c <__aeabi_uldivmod>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	61fb      	str	r3, [r7, #28]
            break;
 800d4ce:	e0ac      	b.n	800d62a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 8089 	beq.w	800d5ec <UART_SetConfig+0x964>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d05b      	beq.n	800d59a <UART_SetConfig+0x912>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d052      	beq.n	800d590 <UART_SetConfig+0x908>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d04a      	beq.n	800d588 <UART_SetConfig+0x900>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d041      	beq.n	800d57e <UART_SetConfig+0x8f6>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fe:	2b05      	cmp	r3, #5
 800d500:	d039      	beq.n	800d576 <UART_SetConfig+0x8ee>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	2b06      	cmp	r3, #6
 800d508:	d031      	beq.n	800d56e <UART_SetConfig+0x8e6>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b07      	cmp	r3, #7
 800d510:	d028      	beq.n	800d564 <UART_SetConfig+0x8dc>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	2b08      	cmp	r3, #8
 800d518:	d01f      	beq.n	800d55a <UART_SetConfig+0x8d2>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	2b09      	cmp	r3, #9
 800d520:	d016      	beq.n	800d550 <UART_SetConfig+0x8c8>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	2b0a      	cmp	r3, #10
 800d528:	d00d      	beq.n	800d546 <UART_SetConfig+0x8be>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52e:	2b0b      	cmp	r3, #11
 800d530:	d104      	bne.n	800d53c <UART_SetConfig+0x8b4>
 800d532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d536:	f04f 0400 	mov.w	r4, #0
 800d53a:	e05b      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d53c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d540:	f04f 0400 	mov.w	r4, #0
 800d544:	e056      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d54a:	f04f 0400 	mov.w	r4, #0
 800d54e:	e051      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d554:	f04f 0400 	mov.w	r4, #0
 800d558:	e04c      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d55a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d55e:	f04f 0400 	mov.w	r4, #0
 800d562:	e047      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d564:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d568:	f04f 0400 	mov.w	r4, #0
 800d56c:	e042      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d56e:	4b1c      	ldr	r3, [pc, #112]	; (800d5e0 <UART_SetConfig+0x958>)
 800d570:	f04f 0400 	mov.w	r4, #0
 800d574:	e03e      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d576:	4b1b      	ldr	r3, [pc, #108]	; (800d5e4 <UART_SetConfig+0x95c>)
 800d578:	f04f 0400 	mov.w	r4, #0
 800d57c:	e03a      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d57e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d582:	f04f 0400 	mov.w	r4, #0
 800d586:	e035      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d588:	4b17      	ldr	r3, [pc, #92]	; (800d5e8 <UART_SetConfig+0x960>)
 800d58a:	f04f 0400 	mov.w	r4, #0
 800d58e:	e031      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d594:	f04f 0400 	mov.w	r4, #0
 800d598:	e02c      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d59a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d59e:	f04f 0400 	mov.w	r4, #0
 800d5a2:	e027      	b.n	800d5f4 <UART_SetConfig+0x96c>
 800d5a4:	f3af 8000 	nop.w
 800d5a8:	14585500 	.word	0x14585500
 800d5ac:	00000000 	.word	0x00000000
 800d5b0:	28b0aa00 	.word	0x28b0aa00
 800d5b4:	00000000 	.word	0x00000000
 800d5b8:	00f42400 	.word	0x00f42400
 800d5bc:	f4240000 	.word	0xf4240000
 800d5c0:	01e84800 	.word	0x01e84800
 800d5c4:	03d09000 	.word	0x03d09000
 800d5c8:	07a12000 	.word	0x07a12000
 800d5cc:	0f424000 	.word	0x0f424000
 800d5d0:	186a0000 	.word	0x186a0000
 800d5d4:	1e848000 	.word	0x1e848000
 800d5d8:	3d090000 	.word	0x3d090000
 800d5dc:	7a120000 	.word	0x7a120000
 800d5e0:	000aaa00 	.word	0x000aaa00
 800d5e4:	000ccc00 	.word	0x000ccc00
 800d5e8:	00155500 	.word	0x00155500
 800d5ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d5f0:	f04f 0400 	mov.w	r4, #0
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6852      	ldr	r2, [r2, #4]
 800d5f8:	0852      	lsrs	r2, r2, #1
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	f04f 0200 	mov.w	r2, #0
 800d600:	eb13 0b01 	adds.w	fp, r3, r1
 800d604:	eb44 0c02 	adc.w	ip, r4, r2
 800d608:	4658      	mov	r0, fp
 800d60a:	4661      	mov	r1, ip
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	f04f 0400 	mov.w	r4, #0
 800d614:	461a      	mov	r2, r3
 800d616:	4623      	mov	r3, r4
 800d618:	f7f3 fa78 	bl	8000b0c <__aeabi_uldivmod>
 800d61c:	4603      	mov	r3, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	61fb      	str	r3, [r7, #28]
            break;
 800d622:	e002      	b.n	800d62a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	76fb      	strb	r3, [r7, #27]
            break;
 800d628:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d630:	d308      	bcc.n	800d644 <UART_SetConfig+0x9bc>
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d638:	d204      	bcs.n	800d644 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	69fa      	ldr	r2, [r7, #28]
 800d640:	60da      	str	r2, [r3, #12]
 800d642:	e35b      	b.n	800dcfc <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	76fb      	strb	r3, [r7, #27]
 800d648:	e358      	b.n	800dcfc <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	69db      	ldr	r3, [r3, #28]
 800d64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d652:	f040 81a6 	bne.w	800d9a2 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d65a:	3b01      	subs	r3, #1
 800d65c:	2b07      	cmp	r3, #7
 800d65e:	f200 8180 	bhi.w	800d962 <UART_SetConfig+0xcda>
 800d662:	a201      	add	r2, pc, #4	; (adr r2, 800d668 <UART_SetConfig+0x9e0>)
 800d664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d668:	0800d689 	.word	0x0800d689
 800d66c:	0800d741 	.word	0x0800d741
 800d670:	0800d963 	.word	0x0800d963
 800d674:	0800d7e9 	.word	0x0800d7e9
 800d678:	0800d963 	.word	0x0800d963
 800d67c:	0800d963 	.word	0x0800d963
 800d680:	0800d963 	.word	0x0800d963
 800d684:	0800d8a1 	.word	0x0800d8a1
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d688:	f7fd fa5a 	bl	800ab40 <HAL_RCC_GetPCLK2Freq>
 800d68c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	2b00      	cmp	r3, #0
 800d694:	d044      	beq.n	800d720 <UART_SetConfig+0xa98>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d03e      	beq.n	800d71c <UART_SetConfig+0xa94>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d038      	beq.n	800d718 <UART_SetConfig+0xa90>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d032      	beq.n	800d714 <UART_SetConfig+0xa8c>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	2b04      	cmp	r3, #4
 800d6b4:	d02c      	beq.n	800d710 <UART_SetConfig+0xa88>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	d026      	beq.n	800d70c <UART_SetConfig+0xa84>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c2:	2b06      	cmp	r3, #6
 800d6c4:	d020      	beq.n	800d708 <UART_SetConfig+0xa80>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ca:	2b07      	cmp	r3, #7
 800d6cc:	d01a      	beq.n	800d704 <UART_SetConfig+0xa7c>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	2b08      	cmp	r3, #8
 800d6d4:	d014      	beq.n	800d700 <UART_SetConfig+0xa78>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	2b09      	cmp	r3, #9
 800d6dc:	d00e      	beq.n	800d6fc <UART_SetConfig+0xa74>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e2:	2b0a      	cmp	r3, #10
 800d6e4:	d008      	beq.n	800d6f8 <UART_SetConfig+0xa70>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	2b0b      	cmp	r3, #11
 800d6ec:	d102      	bne.n	800d6f4 <UART_SetConfig+0xa6c>
 800d6ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6f2:	e016      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e014      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	e012      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d6fc:	2340      	movs	r3, #64	; 0x40
 800d6fe:	e010      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d700:	2320      	movs	r3, #32
 800d702:	e00e      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d704:	2310      	movs	r3, #16
 800d706:	e00c      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d708:	230c      	movs	r3, #12
 800d70a:	e00a      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d70c:	230a      	movs	r3, #10
 800d70e:	e008      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d710:	2308      	movs	r3, #8
 800d712:	e006      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d714:	2306      	movs	r3, #6
 800d716:	e004      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d718:	2304      	movs	r3, #4
 800d71a:	e002      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d71c:	2302      	movs	r3, #2
 800d71e:	e000      	b.n	800d722 <UART_SetConfig+0xa9a>
 800d720:	2301      	movs	r3, #1
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	fbb2 f3f3 	udiv	r3, r2, r3
 800d728:	005a      	lsls	r2, r3, #1
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	085b      	lsrs	r3, r3, #1
 800d730:	441a      	add	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	fbb2 f3f3 	udiv	r3, r2, r3
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	61fb      	str	r3, [r7, #28]
        break;
 800d73e:	e113      	b.n	800d968 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d744:	2b00      	cmp	r3, #0
 800d746:	d043      	beq.n	800d7d0 <UART_SetConfig+0xb48>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d03d      	beq.n	800d7cc <UART_SetConfig+0xb44>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d754:	2b02      	cmp	r3, #2
 800d756:	d037      	beq.n	800d7c8 <UART_SetConfig+0xb40>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75c:	2b03      	cmp	r3, #3
 800d75e:	d031      	beq.n	800d7c4 <UART_SetConfig+0xb3c>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	2b04      	cmp	r3, #4
 800d766:	d02b      	beq.n	800d7c0 <UART_SetConfig+0xb38>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	2b05      	cmp	r3, #5
 800d76e:	d025      	beq.n	800d7bc <UART_SetConfig+0xb34>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d774:	2b06      	cmp	r3, #6
 800d776:	d01f      	beq.n	800d7b8 <UART_SetConfig+0xb30>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	2b07      	cmp	r3, #7
 800d77e:	d019      	beq.n	800d7b4 <UART_SetConfig+0xb2c>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d784:	2b08      	cmp	r3, #8
 800d786:	d013      	beq.n	800d7b0 <UART_SetConfig+0xb28>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	2b09      	cmp	r3, #9
 800d78e:	d00d      	beq.n	800d7ac <UART_SetConfig+0xb24>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	2b0a      	cmp	r3, #10
 800d796:	d007      	beq.n	800d7a8 <UART_SetConfig+0xb20>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79c:	2b0b      	cmp	r3, #11
 800d79e:	d101      	bne.n	800d7a4 <UART_SetConfig+0xb1c>
 800d7a0:	4b8c      	ldr	r3, [pc, #560]	; (800d9d4 <UART_SetConfig+0xd4c>)
 800d7a2:	e016      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7a4:	4b8c      	ldr	r3, [pc, #560]	; (800d9d8 <UART_SetConfig+0xd50>)
 800d7a6:	e014      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7a8:	4b8c      	ldr	r3, [pc, #560]	; (800d9dc <UART_SetConfig+0xd54>)
 800d7aa:	e012      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7ac:	4b8c      	ldr	r3, [pc, #560]	; (800d9e0 <UART_SetConfig+0xd58>)
 800d7ae:	e010      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7b0:	4b8c      	ldr	r3, [pc, #560]	; (800d9e4 <UART_SetConfig+0xd5c>)
 800d7b2:	e00e      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7b4:	4b8c      	ldr	r3, [pc, #560]	; (800d9e8 <UART_SetConfig+0xd60>)
 800d7b6:	e00c      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7b8:	4b8c      	ldr	r3, [pc, #560]	; (800d9ec <UART_SetConfig+0xd64>)
 800d7ba:	e00a      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7bc:	4b8c      	ldr	r3, [pc, #560]	; (800d9f0 <UART_SetConfig+0xd68>)
 800d7be:	e008      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7c0:	4b8c      	ldr	r3, [pc, #560]	; (800d9f4 <UART_SetConfig+0xd6c>)
 800d7c2:	e006      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7c4:	4b8c      	ldr	r3, [pc, #560]	; (800d9f8 <UART_SetConfig+0xd70>)
 800d7c6:	e004      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7c8:	4b8c      	ldr	r3, [pc, #560]	; (800d9fc <UART_SetConfig+0xd74>)
 800d7ca:	e002      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7cc:	4b8c      	ldr	r3, [pc, #560]	; (800da00 <UART_SetConfig+0xd78>)
 800d7ce:	e000      	b.n	800d7d2 <UART_SetConfig+0xb4a>
 800d7d0:	4b81      	ldr	r3, [pc, #516]	; (800d9d8 <UART_SetConfig+0xd50>)
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	6852      	ldr	r2, [r2, #4]
 800d7d6:	0852      	lsrs	r2, r2, #1
 800d7d8:	441a      	add	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	61fb      	str	r3, [r7, #28]
        break;
 800d7e6:	e0bf      	b.n	800d968 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7e8:	f7fd f916 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800d7ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d044      	beq.n	800d880 <UART_SetConfig+0xbf8>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d03e      	beq.n	800d87c <UART_SetConfig+0xbf4>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	2b02      	cmp	r3, #2
 800d804:	d038      	beq.n	800d878 <UART_SetConfig+0xbf0>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d032      	beq.n	800d874 <UART_SetConfig+0xbec>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d812:	2b04      	cmp	r3, #4
 800d814:	d02c      	beq.n	800d870 <UART_SetConfig+0xbe8>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81a:	2b05      	cmp	r3, #5
 800d81c:	d026      	beq.n	800d86c <UART_SetConfig+0xbe4>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	2b06      	cmp	r3, #6
 800d824:	d020      	beq.n	800d868 <UART_SetConfig+0xbe0>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	2b07      	cmp	r3, #7
 800d82c:	d01a      	beq.n	800d864 <UART_SetConfig+0xbdc>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	2b08      	cmp	r3, #8
 800d834:	d014      	beq.n	800d860 <UART_SetConfig+0xbd8>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d00e      	beq.n	800d85c <UART_SetConfig+0xbd4>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d842:	2b0a      	cmp	r3, #10
 800d844:	d008      	beq.n	800d858 <UART_SetConfig+0xbd0>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84a:	2b0b      	cmp	r3, #11
 800d84c:	d102      	bne.n	800d854 <UART_SetConfig+0xbcc>
 800d84e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d852:	e016      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d854:	2301      	movs	r3, #1
 800d856:	e014      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d858:	2380      	movs	r3, #128	; 0x80
 800d85a:	e012      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d85c:	2340      	movs	r3, #64	; 0x40
 800d85e:	e010      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d860:	2320      	movs	r3, #32
 800d862:	e00e      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d864:	2310      	movs	r3, #16
 800d866:	e00c      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d868:	230c      	movs	r3, #12
 800d86a:	e00a      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d86c:	230a      	movs	r3, #10
 800d86e:	e008      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d870:	2308      	movs	r3, #8
 800d872:	e006      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d874:	2306      	movs	r3, #6
 800d876:	e004      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d878:	2304      	movs	r3, #4
 800d87a:	e002      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d87c:	2302      	movs	r3, #2
 800d87e:	e000      	b.n	800d882 <UART_SetConfig+0xbfa>
 800d880:	2301      	movs	r3, #1
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	fbb2 f3f3 	udiv	r3, r2, r3
 800d888:	005a      	lsls	r2, r3, #1
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	085b      	lsrs	r3, r3, #1
 800d890:	441a      	add	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	61fb      	str	r3, [r7, #28]
        break;
 800d89e:	e063      	b.n	800d968 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d04f      	beq.n	800d948 <UART_SetConfig+0xcc0>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d048      	beq.n	800d942 <UART_SetConfig+0xcba>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d041      	beq.n	800d93c <UART_SetConfig+0xcb4>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	2b03      	cmp	r3, #3
 800d8be:	d03a      	beq.n	800d936 <UART_SetConfig+0xcae>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d033      	beq.n	800d930 <UART_SetConfig+0xca8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	2b05      	cmp	r3, #5
 800d8ce:	d02c      	beq.n	800d92a <UART_SetConfig+0xca2>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d4:	2b06      	cmp	r3, #6
 800d8d6:	d025      	beq.n	800d924 <UART_SetConfig+0xc9c>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	2b07      	cmp	r3, #7
 800d8de:	d01e      	beq.n	800d91e <UART_SetConfig+0xc96>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e4:	2b08      	cmp	r3, #8
 800d8e6:	d017      	beq.n	800d918 <UART_SetConfig+0xc90>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ec:	2b09      	cmp	r3, #9
 800d8ee:	d010      	beq.n	800d912 <UART_SetConfig+0xc8a>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f4:	2b0a      	cmp	r3, #10
 800d8f6:	d009      	beq.n	800d90c <UART_SetConfig+0xc84>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fc:	2b0b      	cmp	r3, #11
 800d8fe:	d102      	bne.n	800d906 <UART_SetConfig+0xc7e>
 800d900:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d904:	e022      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d90a:	e01f      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d90c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d910:	e01c      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d916:	e019      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d91c:	e016      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d91e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d922:	e013      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d924:	f241 5354 	movw	r3, #5460	; 0x1554
 800d928:	e010      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d92a:	f641 1398 	movw	r3, #6552	; 0x1998
 800d92e:	e00d      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d934:	e00a      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d936:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800d93a:	e007      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d93c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d940:	e004      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d946:	e001      	b.n	800d94c <UART_SetConfig+0xcc4>
 800d948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6852      	ldr	r2, [r2, #4]
 800d950:	0852      	lsrs	r2, r2, #1
 800d952:	441a      	add	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	fbb2 f3f3 	udiv	r3, r2, r3
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	61fb      	str	r3, [r7, #28]
        break;
 800d960:	e002      	b.n	800d968 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	76fb      	strb	r3, [r7, #27]
        break;
 800d966:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	2b0f      	cmp	r3, #15
 800d96c:	d916      	bls.n	800d99c <UART_SetConfig+0xd14>
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d974:	d212      	bcs.n	800d99c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	f023 030f 	bic.w	r3, r3, #15
 800d97e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	085b      	lsrs	r3, r3, #1
 800d984:	b29b      	uxth	r3, r3
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	89fb      	ldrh	r3, [r7, #14]
 800d98e:	4313      	orrs	r3, r2
 800d990:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	89fa      	ldrh	r2, [r7, #14]
 800d998:	60da      	str	r2, [r3, #12]
 800d99a:	e1af      	b.n	800dcfc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	76fb      	strb	r3, [r7, #27]
 800d9a0:	e1ac      	b.n	800dcfc <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800d9a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	2b07      	cmp	r3, #7
 800d9aa:	f200 8196 	bhi.w	800dcda <UART_SetConfig+0x1052>
 800d9ae:	a201      	add	r2, pc, #4	; (adr r2, 800d9b4 <UART_SetConfig+0xd2c>)
 800d9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b4:	0800da05 	.word	0x0800da05
 800d9b8:	0800dabb 	.word	0x0800dabb
 800d9bc:	0800dcdb 	.word	0x0800dcdb
 800d9c0:	0800db65 	.word	0x0800db65
 800d9c4:	0800dcdb 	.word	0x0800dcdb
 800d9c8:	0800dcdb 	.word	0x0800dcdb
 800d9cc:	0800dcdb 	.word	0x0800dcdb
 800d9d0:	0800dc1b 	.word	0x0800dc1b
 800d9d4:	0001e848 	.word	0x0001e848
 800d9d8:	01e84800 	.word	0x01e84800
 800d9dc:	0003d090 	.word	0x0003d090
 800d9e0:	0007a120 	.word	0x0007a120
 800d9e4:	000f4240 	.word	0x000f4240
 800d9e8:	001e8480 	.word	0x001e8480
 800d9ec:	0028b0aa 	.word	0x0028b0aa
 800d9f0:	0030d400 	.word	0x0030d400
 800d9f4:	003d0900 	.word	0x003d0900
 800d9f8:	00516154 	.word	0x00516154
 800d9fc:	007a1200 	.word	0x007a1200
 800da00:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da04:	f7fd f89c 	bl	800ab40 <HAL_RCC_GetPCLK2Freq>
 800da08:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d044      	beq.n	800da9c <UART_SetConfig+0xe14>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da16:	2b01      	cmp	r3, #1
 800da18:	d03e      	beq.n	800da98 <UART_SetConfig+0xe10>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d038      	beq.n	800da94 <UART_SetConfig+0xe0c>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	2b03      	cmp	r3, #3
 800da28:	d032      	beq.n	800da90 <UART_SetConfig+0xe08>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d02c      	beq.n	800da8c <UART_SetConfig+0xe04>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da36:	2b05      	cmp	r3, #5
 800da38:	d026      	beq.n	800da88 <UART_SetConfig+0xe00>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	2b06      	cmp	r3, #6
 800da40:	d020      	beq.n	800da84 <UART_SetConfig+0xdfc>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da46:	2b07      	cmp	r3, #7
 800da48:	d01a      	beq.n	800da80 <UART_SetConfig+0xdf8>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	2b08      	cmp	r3, #8
 800da50:	d014      	beq.n	800da7c <UART_SetConfig+0xdf4>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da56:	2b09      	cmp	r3, #9
 800da58:	d00e      	beq.n	800da78 <UART_SetConfig+0xdf0>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5e:	2b0a      	cmp	r3, #10
 800da60:	d008      	beq.n	800da74 <UART_SetConfig+0xdec>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da66:	2b0b      	cmp	r3, #11
 800da68:	d102      	bne.n	800da70 <UART_SetConfig+0xde8>
 800da6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da6e:	e016      	b.n	800da9e <UART_SetConfig+0xe16>
 800da70:	2301      	movs	r3, #1
 800da72:	e014      	b.n	800da9e <UART_SetConfig+0xe16>
 800da74:	2380      	movs	r3, #128	; 0x80
 800da76:	e012      	b.n	800da9e <UART_SetConfig+0xe16>
 800da78:	2340      	movs	r3, #64	; 0x40
 800da7a:	e010      	b.n	800da9e <UART_SetConfig+0xe16>
 800da7c:	2320      	movs	r3, #32
 800da7e:	e00e      	b.n	800da9e <UART_SetConfig+0xe16>
 800da80:	2310      	movs	r3, #16
 800da82:	e00c      	b.n	800da9e <UART_SetConfig+0xe16>
 800da84:	230c      	movs	r3, #12
 800da86:	e00a      	b.n	800da9e <UART_SetConfig+0xe16>
 800da88:	230a      	movs	r3, #10
 800da8a:	e008      	b.n	800da9e <UART_SetConfig+0xe16>
 800da8c:	2308      	movs	r3, #8
 800da8e:	e006      	b.n	800da9e <UART_SetConfig+0xe16>
 800da90:	2306      	movs	r3, #6
 800da92:	e004      	b.n	800da9e <UART_SetConfig+0xe16>
 800da94:	2304      	movs	r3, #4
 800da96:	e002      	b.n	800da9e <UART_SetConfig+0xe16>
 800da98:	2302      	movs	r3, #2
 800da9a:	e000      	b.n	800da9e <UART_SetConfig+0xe16>
 800da9c:	2301      	movs	r3, #1
 800da9e:	693a      	ldr	r2, [r7, #16]
 800daa0:	fbb2 f2f3 	udiv	r2, r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	085b      	lsrs	r3, r3, #1
 800daaa:	441a      	add	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	61fb      	str	r3, [r7, #28]
        break;
 800dab8:	e112      	b.n	800dce0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d044      	beq.n	800db4c <UART_SetConfig+0xec4>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d03e      	beq.n	800db48 <UART_SetConfig+0xec0>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d038      	beq.n	800db44 <UART_SetConfig+0xebc>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d032      	beq.n	800db40 <UART_SetConfig+0xeb8>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d02c      	beq.n	800db3c <UART_SetConfig+0xeb4>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	2b05      	cmp	r3, #5
 800dae8:	d026      	beq.n	800db38 <UART_SetConfig+0xeb0>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	2b06      	cmp	r3, #6
 800daf0:	d020      	beq.n	800db34 <UART_SetConfig+0xeac>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	2b07      	cmp	r3, #7
 800daf8:	d01a      	beq.n	800db30 <UART_SetConfig+0xea8>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	2b08      	cmp	r3, #8
 800db00:	d014      	beq.n	800db2c <UART_SetConfig+0xea4>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db06:	2b09      	cmp	r3, #9
 800db08:	d00e      	beq.n	800db28 <UART_SetConfig+0xea0>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0e:	2b0a      	cmp	r3, #10
 800db10:	d008      	beq.n	800db24 <UART_SetConfig+0xe9c>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	2b0b      	cmp	r3, #11
 800db18:	d102      	bne.n	800db20 <UART_SetConfig+0xe98>
 800db1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800db1e:	e016      	b.n	800db4e <UART_SetConfig+0xec6>
 800db20:	4b80      	ldr	r3, [pc, #512]	; (800dd24 <UART_SetConfig+0x109c>)
 800db22:	e014      	b.n	800db4e <UART_SetConfig+0xec6>
 800db24:	4b80      	ldr	r3, [pc, #512]	; (800dd28 <UART_SetConfig+0x10a0>)
 800db26:	e012      	b.n	800db4e <UART_SetConfig+0xec6>
 800db28:	4b80      	ldr	r3, [pc, #512]	; (800dd2c <UART_SetConfig+0x10a4>)
 800db2a:	e010      	b.n	800db4e <UART_SetConfig+0xec6>
 800db2c:	4b80      	ldr	r3, [pc, #512]	; (800dd30 <UART_SetConfig+0x10a8>)
 800db2e:	e00e      	b.n	800db4e <UART_SetConfig+0xec6>
 800db30:	4b80      	ldr	r3, [pc, #512]	; (800dd34 <UART_SetConfig+0x10ac>)
 800db32:	e00c      	b.n	800db4e <UART_SetConfig+0xec6>
 800db34:	4b80      	ldr	r3, [pc, #512]	; (800dd38 <UART_SetConfig+0x10b0>)
 800db36:	e00a      	b.n	800db4e <UART_SetConfig+0xec6>
 800db38:	4b80      	ldr	r3, [pc, #512]	; (800dd3c <UART_SetConfig+0x10b4>)
 800db3a:	e008      	b.n	800db4e <UART_SetConfig+0xec6>
 800db3c:	4b80      	ldr	r3, [pc, #512]	; (800dd40 <UART_SetConfig+0x10b8>)
 800db3e:	e006      	b.n	800db4e <UART_SetConfig+0xec6>
 800db40:	4b80      	ldr	r3, [pc, #512]	; (800dd44 <UART_SetConfig+0x10bc>)
 800db42:	e004      	b.n	800db4e <UART_SetConfig+0xec6>
 800db44:	4b80      	ldr	r3, [pc, #512]	; (800dd48 <UART_SetConfig+0x10c0>)
 800db46:	e002      	b.n	800db4e <UART_SetConfig+0xec6>
 800db48:	4b80      	ldr	r3, [pc, #512]	; (800dd4c <UART_SetConfig+0x10c4>)
 800db4a:	e000      	b.n	800db4e <UART_SetConfig+0xec6>
 800db4c:	4b75      	ldr	r3, [pc, #468]	; (800dd24 <UART_SetConfig+0x109c>)
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	6852      	ldr	r2, [r2, #4]
 800db52:	0852      	lsrs	r2, r2, #1
 800db54:	441a      	add	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db5e:	b29b      	uxth	r3, r3
 800db60:	61fb      	str	r3, [r7, #28]
        break;
 800db62:	e0bd      	b.n	800dce0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db64:	f7fc ff58 	bl	800aa18 <HAL_RCC_GetSysClockFreq>
 800db68:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d044      	beq.n	800dbfc <UART_SetConfig+0xf74>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db76:	2b01      	cmp	r3, #1
 800db78:	d03e      	beq.n	800dbf8 <UART_SetConfig+0xf70>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d038      	beq.n	800dbf4 <UART_SetConfig+0xf6c>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	2b03      	cmp	r3, #3
 800db88:	d032      	beq.n	800dbf0 <UART_SetConfig+0xf68>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8e:	2b04      	cmp	r3, #4
 800db90:	d02c      	beq.n	800dbec <UART_SetConfig+0xf64>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db96:	2b05      	cmp	r3, #5
 800db98:	d026      	beq.n	800dbe8 <UART_SetConfig+0xf60>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9e:	2b06      	cmp	r3, #6
 800dba0:	d020      	beq.n	800dbe4 <UART_SetConfig+0xf5c>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba6:	2b07      	cmp	r3, #7
 800dba8:	d01a      	beq.n	800dbe0 <UART_SetConfig+0xf58>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbae:	2b08      	cmp	r3, #8
 800dbb0:	d014      	beq.n	800dbdc <UART_SetConfig+0xf54>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	2b09      	cmp	r3, #9
 800dbb8:	d00e      	beq.n	800dbd8 <UART_SetConfig+0xf50>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbe:	2b0a      	cmp	r3, #10
 800dbc0:	d008      	beq.n	800dbd4 <UART_SetConfig+0xf4c>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc6:	2b0b      	cmp	r3, #11
 800dbc8:	d102      	bne.n	800dbd0 <UART_SetConfig+0xf48>
 800dbca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbce:	e016      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e014      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbd4:	2380      	movs	r3, #128	; 0x80
 800dbd6:	e012      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbd8:	2340      	movs	r3, #64	; 0x40
 800dbda:	e010      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbdc:	2320      	movs	r3, #32
 800dbde:	e00e      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	e00c      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbe4:	230c      	movs	r3, #12
 800dbe6:	e00a      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbe8:	230a      	movs	r3, #10
 800dbea:	e008      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbec:	2308      	movs	r3, #8
 800dbee:	e006      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbf0:	2306      	movs	r3, #6
 800dbf2:	e004      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	e002      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	e000      	b.n	800dbfe <UART_SetConfig+0xf76>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	085b      	lsrs	r3, r3, #1
 800dc0a:	441a      	add	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	61fb      	str	r3, [r7, #28]
        break;
 800dc18:	e062      	b.n	800dce0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d04e      	beq.n	800dcc0 <UART_SetConfig+0x1038>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d047      	beq.n	800dcba <UART_SetConfig+0x1032>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d040      	beq.n	800dcb4 <UART_SetConfig+0x102c>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d039      	beq.n	800dcae <UART_SetConfig+0x1026>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d032      	beq.n	800dca8 <UART_SetConfig+0x1020>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc46:	2b05      	cmp	r3, #5
 800dc48:	d02b      	beq.n	800dca2 <UART_SetConfig+0x101a>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	2b06      	cmp	r3, #6
 800dc50:	d024      	beq.n	800dc9c <UART_SetConfig+0x1014>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	2b07      	cmp	r3, #7
 800dc58:	d01d      	beq.n	800dc96 <UART_SetConfig+0x100e>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	2b08      	cmp	r3, #8
 800dc60:	d016      	beq.n	800dc90 <UART_SetConfig+0x1008>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc66:	2b09      	cmp	r3, #9
 800dc68:	d00f      	beq.n	800dc8a <UART_SetConfig+0x1002>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	2b0a      	cmp	r3, #10
 800dc70:	d008      	beq.n	800dc84 <UART_SetConfig+0xffc>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	2b0b      	cmp	r3, #11
 800dc78:	d101      	bne.n	800dc7e <UART_SetConfig+0xff6>
 800dc7a:	2380      	movs	r3, #128	; 0x80
 800dc7c:	e022      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc82:	e01f      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc88:	e01c      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc8e:	e019      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc94:	e016      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc9a:	e013      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dc9c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800dca0:	e010      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dca2:	f640 43cc 	movw	r3, #3276	; 0xccc
 800dca6:	e00d      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcac:	e00a      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dcae:	f241 5355 	movw	r3, #5461	; 0x1555
 800dcb2:	e007      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dcb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcb8:	e004      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dcba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dcbe:	e001      	b.n	800dcc4 <UART_SetConfig+0x103c>
 800dcc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	6852      	ldr	r2, [r2, #4]
 800dcc8:	0852      	lsrs	r2, r2, #1
 800dcca:	441a      	add	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	61fb      	str	r3, [r7, #28]
        break;
 800dcd8:	e002      	b.n	800dce0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	76fb      	strb	r3, [r7, #27]
        break;
 800dcde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	2b0f      	cmp	r3, #15
 800dce4:	d908      	bls.n	800dcf8 <UART_SetConfig+0x1070>
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcec:	d204      	bcs.n	800dcf8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	69fa      	ldr	r2, [r7, #28]
 800dcf4:	60da      	str	r2, [r3, #12]
 800dcf6:	e001      	b.n	800dcfc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800dd18:	7efb      	ldrb	r3, [r7, #27]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3728      	adds	r7, #40	; 0x28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800dd24:	00f42400 	.word	0x00f42400
 800dd28:	0001e848 	.word	0x0001e848
 800dd2c:	0003d090 	.word	0x0003d090
 800dd30:	0007a120 	.word	0x0007a120
 800dd34:	000f4240 	.word	0x000f4240
 800dd38:	00145855 	.word	0x00145855
 800dd3c:	00186a00 	.word	0x00186a00
 800dd40:	001e8480 	.word	0x001e8480
 800dd44:	0028b0aa 	.word	0x0028b0aa
 800dd48:	003d0900 	.word	0x003d0900
 800dd4c:	007a1200 	.word	0x007a1200

0800dd50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00a      	beq.n	800dd9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	430a      	orrs	r2, r1
 800dd9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00a      	beq.n	800ddbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00a      	beq.n	800dde0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	430a      	orrs	r2, r1
 800ddde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde4:	f003 0310 	and.w	r3, r3, #16
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00a      	beq.n	800de02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	430a      	orrs	r2, r1
 800de00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de06:	f003 0320 	and.w	r3, r3, #32
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	430a      	orrs	r2, r1
 800de22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01a      	beq.n	800de66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	430a      	orrs	r2, r1
 800de44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de4e:	d10a      	bne.n	800de66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	430a      	orrs	r2, r1
 800de64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00a      	beq.n	800de88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	430a      	orrs	r2, r1
 800de86:	605a      	str	r2, [r3, #4]
  }
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af02      	add	r7, sp, #8
 800de9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800dea4:	f7f7 fb78 	bl	8005598 <HAL_GetTick>
 800dea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f003 0308 	and.w	r3, r3, #8
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	d10e      	bne.n	800ded6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f82c 	bl	800df24 <UART_WaitOnFlagUntilTimeout>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e022      	b.n	800df1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d10e      	bne.n	800df02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f816 	bl	800df24 <UART_WaitOnFlagUntilTimeout>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e00c      	b.n	800df1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2220      	movs	r2, #32
 800df06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2220      	movs	r2, #32
 800df0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	603b      	str	r3, [r7, #0]
 800df30:	4613      	mov	r3, r2
 800df32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df34:	e062      	b.n	800dffc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3c:	d05e      	beq.n	800dffc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df3e:	f7f7 fb2b 	bl	8005598 <HAL_GetTick>
 800df42:	4602      	mov	r2, r0
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	69ba      	ldr	r2, [r7, #24]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d302      	bcc.n	800df54 <UART_WaitOnFlagUntilTimeout+0x30>
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d11d      	bne.n	800df90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df62:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	689a      	ldr	r2, [r3, #8]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f022 0201 	bic.w	r2, r2, #1
 800df72:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2220      	movs	r2, #32
 800df78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2220      	movs	r2, #32
 800df80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e045      	b.n	800e01c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f003 0304 	and.w	r3, r3, #4
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d02e      	beq.n	800dffc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfac:	d126      	bne.n	800dffc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfb6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dfc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	689a      	ldr	r2, [r3, #8]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0201 	bic.w	r2, r2, #1
 800dfd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2220      	movs	r2, #32
 800dfdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2220      	movs	r2, #32
 800dfe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2220      	movs	r2, #32
 800dfec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800dff8:	2303      	movs	r3, #3
 800dffa:	e00f      	b.n	800e01c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	69da      	ldr	r2, [r3, #28]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	4013      	ands	r3, r2
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	429a      	cmp	r2, r3
 800e00a:	bf0c      	ite	eq
 800e00c:	2301      	moveq	r3, #1
 800e00e:	2300      	movne	r3, #0
 800e010:	b2db      	uxtb	r3, r3
 800e012:	461a      	mov	r2, r3
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	429a      	cmp	r2, r3
 800e018:	d08d      	beq.n	800df36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e032:	2b21      	cmp	r3, #33	; 0x21
 800e034:	d12a      	bne.n	800e08c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d110      	bne.n	800e064 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e050:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e060:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e062:	e013      	b.n	800e08c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e068:	781a      	ldrb	r2, [r3, #0]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e080:	b29b      	uxth	r3, r3
 800e082:	3b01      	subs	r3, #1
 800e084:	b29a      	uxth	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e08c:	bf00      	nop
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0a6:	2b21      	cmp	r3, #33	; 0x21
 800e0a8:	d12f      	bne.n	800e10a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d110      	bne.n	800e0d8 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e0c4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0d4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e0d6:	e018      	b.n	800e10a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0ec:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0f2:	1c9a      	adds	r2, r3, #2
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	3b01      	subs	r3, #1
 800e102:	b29a      	uxth	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e10a:	bf00      	nop
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e116:	b480      	push	{r7}
 800e118:	b085      	sub	sp, #20
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e124:	2b21      	cmp	r3, #33	; 0x21
 800e126:	d13d      	bne.n	800e1a4 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e12e:	81fb      	strh	r3, [r7, #14]
 800e130:	e035      	b.n	800e19e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e138:	b29b      	uxth	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d111      	bne.n	800e162 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e14c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e15c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e15e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e160:	e020      	b.n	800e1a4 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	69db      	ldr	r3, [r3, #28]
 800e168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d013      	beq.n	800e198 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e174:	781a      	ldrb	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e180:	1c5a      	adds	r2, r3, #1
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	3b01      	subs	r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e198:	89fb      	ldrh	r3, [r7, #14]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	81fb      	strh	r3, [r7, #14]
 800e19e:	89fb      	ldrh	r3, [r7, #14]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1c6      	bne.n	800e132 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800e1a4:	bf00      	nop
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1be:	2b21      	cmp	r3, #33	; 0x21
 800e1c0:	d142      	bne.n	800e248 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1c8:	81fb      	strh	r3, [r7, #14]
 800e1ca:	e03a      	b.n	800e242 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d111      	bne.n	800e1fc <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	689a      	ldr	r2, [r3, #8]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e1e6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1f6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800e1f8:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800e1fa:	e025      	b.n	800e248 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	69db      	ldr	r3, [r3, #28]
 800e202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e206:	2b00      	cmp	r3, #0
 800e208:	d018      	beq.n	800e23c <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e20e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	881b      	ldrh	r3, [r3, #0]
 800e214:	461a      	mov	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e21e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e224:	1c9a      	adds	r2, r3, #2
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e230:	b29b      	uxth	r3, r3
 800e232:	3b01      	subs	r3, #1
 800e234:	b29a      	uxth	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e23c:	89fb      	ldrh	r3, [r7, #14]
 800e23e:	3b01      	subs	r3, #1
 800e240:	81fb      	strh	r3, [r7, #14]
 800e242:	89fb      	ldrh	r3, [r7, #14]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1c1      	bne.n	800e1cc <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800e248:	bf00      	nop
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e262:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e26a:	2b22      	cmp	r3, #34	; 0x22
 800e26c:	d13b      	bne.n	800e2e6 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e276:	89bb      	ldrh	r3, [r7, #12]
 800e278:	b2d9      	uxtb	r1, r3
 800e27a:	89fb      	ldrh	r3, [r7, #14]
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e282:	400a      	ands	r2, r1
 800e284:	b2d2      	uxtb	r2, r2
 800e286:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e28c:	1c5a      	adds	r2, r3, #1
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e298:	b29b      	uxth	r3, r3
 800e29a:	3b01      	subs	r3, #1
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d122      	bne.n	800e2f6 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e2be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	689a      	ldr	r2, [r3, #8]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f022 0201 	bic.w	r2, r2, #1
 800e2ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7f5 fa36 	bl	8003750 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2e4:	e007      	b.n	800e2f6 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	699a      	ldr	r2, [r3, #24]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f042 0208 	orr.w	r2, r2, #8
 800e2f4:	619a      	str	r2, [r3, #24]
}
 800e2f6:	bf00      	nop
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e30c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e314:	2b22      	cmp	r3, #34	; 0x22
 800e316:	d13b      	bne.n	800e390 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e324:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e326:	89ba      	ldrh	r2, [r7, #12]
 800e328:	89fb      	ldrh	r3, [r7, #14]
 800e32a:	4013      	ands	r3, r2
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e336:	1c9a      	adds	r2, r3, #2
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e342:	b29b      	uxth	r3, r3
 800e344:	3b01      	subs	r3, #1
 800e346:	b29a      	uxth	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e354:	b29b      	uxth	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d122      	bne.n	800e3a0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e368:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f022 0201 	bic.w	r2, r2, #1
 800e378:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2220      	movs	r2, #32
 800e37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7f5 f9e1 	bl	8003750 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e38e:	e007      	b.n	800e3a0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	699a      	ldr	r2, [r3, #24]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f042 0208 	orr.w	r2, r2, #8
 800e39e:	619a      	str	r2, [r3, #24]
}
 800e3a0:	bf00      	nop
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3b6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3be:	2b22      	cmp	r3, #34	; 0x22
 800e3c0:	d168      	bne.n	800e494 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e3c8:	81fb      	strh	r3, [r7, #14]
 800e3ca:	e03f      	b.n	800e44c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	b2d9      	uxtb	r1, r3
 800e3d8:	89bb      	ldrh	r3, [r7, #12]
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3e0:	400a      	ands	r2, r1
 800e3e2:	b2d2      	uxtb	r2, r2
 800e3e4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e408:	b29b      	uxth	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d11b      	bne.n	800e446 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e41c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2220      	movs	r2, #32
 800e436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7f5 f985 	bl	8003750 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e446:	89fb      	ldrh	r3, [r7, #14]
 800e448:	3b01      	subs	r3, #1
 800e44a:	81fb      	strh	r3, [r7, #14]
 800e44c:	89fb      	ldrh	r3, [r7, #14]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1bc      	bne.n	800e3cc <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e458:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e45a:	897b      	ldrh	r3, [r7, #10]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d021      	beq.n	800e4a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e466:	897a      	ldrh	r2, [r7, #10]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d21b      	bcs.n	800e4a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	689a      	ldr	r2, [r3, #8]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e47a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a0b      	ldr	r2, [pc, #44]	; (800e4ac <UART_RxISR_8BIT_FIFOEN+0x104>)
 800e480:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f042 0220 	orr.w	r2, r2, #32
 800e490:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e492:	e007      	b.n	800e4a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	699a      	ldr	r2, [r3, #24]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f042 0208 	orr.w	r2, r2, #8
 800e4a2:	619a      	str	r2, [r3, #24]
}
 800e4a4:	bf00      	nop
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0800e255 	.word	0x0800e255

0800e4b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4be:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4c6:	2b22      	cmp	r3, #34	; 0x22
 800e4c8:	d168      	bne.n	800e59c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e4d0:	82fb      	strh	r3, [r7, #22]
 800e4d2:	e03f      	b.n	800e554 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4da:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e4e2:	8a3a      	ldrh	r2, [r7, #16]
 800e4e4:	8abb      	ldrh	r3, [r7, #20]
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f2:	1c9a      	adds	r2, r3, #2
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	3b01      	subs	r3, #1
 800e502:	b29a      	uxth	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e510:	b29b      	uxth	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d11b      	bne.n	800e54e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e524:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	6812      	ldr	r2, [r2, #0]
 800e530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e534:	f023 0301 	bic.w	r3, r3, #1
 800e538:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2220      	movs	r2, #32
 800e53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7f5 f901 	bl	8003750 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e54e:	8afb      	ldrh	r3, [r7, #22]
 800e550:	3b01      	subs	r3, #1
 800e552:	82fb      	strh	r3, [r7, #22]
 800e554:	8afb      	ldrh	r3, [r7, #22]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1bc      	bne.n	800e4d4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e560:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e562:	8a7b      	ldrh	r3, [r7, #18]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d021      	beq.n	800e5ac <UART_RxISR_16BIT_FIFOEN+0xfc>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e56e:	8a7a      	ldrh	r2, [r7, #18]
 800e570:	429a      	cmp	r2, r3
 800e572:	d21b      	bcs.n	800e5ac <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	689a      	ldr	r2, [r3, #8]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e582:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a0b      	ldr	r2, [pc, #44]	; (800e5b4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800e588:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f042 0220 	orr.w	r2, r2, #32
 800e598:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e59a:	e007      	b.n	800e5ac <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	699a      	ldr	r2, [r3, #24]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f042 0208 	orr.w	r2, r2, #8
 800e5aa:	619a      	str	r2, [r3, #24]
}
 800e5ac:	bf00      	nop
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	0800e2ff 	.word	0x0800e2ff

0800e5b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d101      	bne.n	800e5ce <HAL_UARTEx_DisableFifoMode+0x16>
 800e5ca:	2302      	movs	r3, #2
 800e5cc:	e027      	b.n	800e61e <HAL_UARTEx_DisableFifoMode+0x66>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2224      	movs	r2, #36	; 0x24
 800e5da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f022 0201 	bic.w	r2, r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e5fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2220      	movs	r2, #32
 800e610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d101      	bne.n	800e642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e63e:	2302      	movs	r3, #2
 800e640:	e02d      	b.n	800e69e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2224      	movs	r2, #36	; 0x24
 800e64e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f022 0201 	bic.w	r2, r2, #1
 800e668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f850 	bl	800e724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2220      	movs	r2, #32
 800e690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b084      	sub	sp, #16
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d101      	bne.n	800e6be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	e02d      	b.n	800e71a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2224      	movs	r2, #36	; 0x24
 800e6ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f022 0201 	bic.w	r2, r2, #1
 800e6e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	430a      	orrs	r2, r1
 800e6f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f812 	bl	800e724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2220      	movs	r2, #32
 800e70c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e724:	b480      	push	{r7}
 800e726:	b089      	sub	sp, #36	; 0x24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e72c:	4a2f      	ldr	r2, [pc, #188]	; (800e7ec <UARTEx_SetNbDataToProcess+0xc8>)
 800e72e:	f107 0314 	add.w	r3, r7, #20
 800e732:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e736:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e73a:	4a2d      	ldr	r2, [pc, #180]	; (800e7f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800e73c:	f107 030c 	add.w	r3, r7, #12
 800e740:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e744:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d108      	bne.n	800e762 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2201      	movs	r2, #1
 800e754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e760:	e03d      	b.n	800e7de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e762:	2308      	movs	r3, #8
 800e764:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e766:	2308      	movs	r3, #8
 800e768:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	0e5b      	lsrs	r3, r3, #25
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0307 	and.w	r3, r3, #7
 800e778:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	0f5b      	lsrs	r3, r3, #29
 800e782:	b2db      	uxtb	r3, r3
 800e784:	f003 0307 	and.w	r3, r3, #7
 800e788:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e78a:	7fbb      	ldrb	r3, [r7, #30]
 800e78c:	7f3a      	ldrb	r2, [r7, #28]
 800e78e:	f107 0120 	add.w	r1, r7, #32
 800e792:	440a      	add	r2, r1
 800e794:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e798:	fb02 f303 	mul.w	r3, r2, r3
 800e79c:	7f3a      	ldrb	r2, [r7, #28]
 800e79e:	f107 0120 	add.w	r1, r7, #32
 800e7a2:	440a      	add	r2, r1
 800e7a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e7b4:	7ffb      	ldrb	r3, [r7, #31]
 800e7b6:	7f7a      	ldrb	r2, [r7, #29]
 800e7b8:	f107 0120 	add.w	r1, r7, #32
 800e7bc:	440a      	add	r2, r1
 800e7be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e7c2:	fb02 f303 	mul.w	r3, r2, r3
 800e7c6:	7f7a      	ldrb	r2, [r7, #29]
 800e7c8:	f107 0120 	add.w	r1, r7, #32
 800e7cc:	440a      	add	r2, r1
 800e7ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e7d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e7de:	bf00      	nop
 800e7e0:	3724      	adds	r7, #36	; 0x24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	08017424 	.word	0x08017424
 800e7f0:	0801742c 	.word	0x0801742c

0800e7f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7fa:	f3ef 8305 	mrs	r3, IPSR
 800e7fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800e800:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10f      	bne.n	800e826 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e806:	f3ef 8310 	mrs	r3, PRIMASK
 800e80a:	607b      	str	r3, [r7, #4]
  return(result);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d109      	bne.n	800e826 <osKernelInitialize+0x32>
 800e812:	4b11      	ldr	r3, [pc, #68]	; (800e858 <osKernelInitialize+0x64>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b02      	cmp	r3, #2
 800e818:	d109      	bne.n	800e82e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e81a:	f3ef 8311 	mrs	r3, BASEPRI
 800e81e:	603b      	str	r3, [r7, #0]
  return(result);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d003      	beq.n	800e82e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e826:	f06f 0305 	mvn.w	r3, #5
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	e00c      	b.n	800e848 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e82e:	4b0a      	ldr	r3, [pc, #40]	; (800e858 <osKernelInitialize+0x64>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d105      	bne.n	800e842 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800e836:	4b08      	ldr	r3, [pc, #32]	; (800e858 <osKernelInitialize+0x64>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e002      	b.n	800e848 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	20000ad8 	.word	0x20000ad8

0800e85c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e862:	f3ef 8305 	mrs	r3, IPSR
 800e866:	60bb      	str	r3, [r7, #8]
  return(result);
 800e868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10f      	bne.n	800e88e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e86e:	f3ef 8310 	mrs	r3, PRIMASK
 800e872:	607b      	str	r3, [r7, #4]
  return(result);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d109      	bne.n	800e88e <osKernelStart+0x32>
 800e87a:	4b11      	ldr	r3, [pc, #68]	; (800e8c0 <osKernelStart+0x64>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d109      	bne.n	800e896 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e882:	f3ef 8311 	mrs	r3, BASEPRI
 800e886:	603b      	str	r3, [r7, #0]
  return(result);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e88e:	f06f 0305 	mvn.w	r3, #5
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	e00e      	b.n	800e8b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800e896:	4b0a      	ldr	r3, [pc, #40]	; (800e8c0 <osKernelStart+0x64>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d107      	bne.n	800e8ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800e89e:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <osKernelStart+0x64>)
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e8a4:	f002 fe2e 	bl	8011504 <vTaskStartScheduler>
      stat = osOK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	e002      	b.n	800e8b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000ad8 	.word	0x20000ad8

0800e8c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b092      	sub	sp, #72	; 0x48
 800e8c8:	af04      	add	r7, sp, #16
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8d4:	f3ef 8305 	mrs	r3, IPSR
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f040 8095 	bne.w	800ea0c <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8e2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8e6:	623b      	str	r3, [r7, #32]
  return(result);
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f040 808e 	bne.w	800ea0c <osThreadNew+0x148>
 800e8f0:	4b49      	ldr	r3, [pc, #292]	; (800ea18 <osThreadNew+0x154>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d106      	bne.n	800e906 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8f8:	f3ef 8311 	mrs	r3, BASEPRI
 800e8fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	f040 8083 	bne.w	800ea0c <osThreadNew+0x148>
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d07f      	beq.n	800ea0c <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800e90c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e910:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800e912:	2318      	movs	r3, #24
 800e914:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800e916:	2300      	movs	r3, #0
 800e918:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800e91a:	f107 031b 	add.w	r3, r7, #27
 800e91e:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800e920:	f04f 33ff 	mov.w	r3, #4294967295
 800e924:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d045      	beq.n	800e9b8 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <osThreadNew+0x76>
        name = attr->name;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	699b      	ldr	r3, [r3, #24]
 800e946:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d008      	beq.n	800e960 <osThreadNew+0x9c>
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	2b38      	cmp	r3, #56	; 0x38
 800e952:	d805      	bhi.n	800e960 <osThreadNew+0x9c>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <osThreadNew+0xa0>
        return (NULL);
 800e960:	2300      	movs	r3, #0
 800e962:	e054      	b.n	800ea0e <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	089b      	lsrs	r3, r3, #2
 800e972:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00e      	beq.n	800e99a <osThreadNew+0xd6>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	2b63      	cmp	r3, #99	; 0x63
 800e982:	d90a      	bls.n	800e99a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d006      	beq.n	800e99a <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <osThreadNew+0xd6>
        mem = 1;
 800e994:	2301      	movs	r3, #1
 800e996:	62bb      	str	r3, [r7, #40]	; 0x28
 800e998:	e010      	b.n	800e9bc <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10c      	bne.n	800e9bc <osThreadNew+0xf8>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d108      	bne.n	800e9bc <osThreadNew+0xf8>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d104      	bne.n	800e9bc <osThreadNew+0xf8>
          mem = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	e001      	b.n	800e9bc <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d110      	bne.n	800e9e4 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f002 fbc5 	bl	8011168 <xTaskCreateStatic>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e013      	b.n	800ea0c <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d110      	bne.n	800ea0c <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	f107 0314 	add.w	r3, r7, #20
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f002 fc0c 	bl	801121a <xTaskCreate>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d001      	beq.n	800ea0c <osThreadNew+0x148>
          hTask = NULL;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea0c:	697b      	ldr	r3, [r7, #20]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3738      	adds	r7, #56	; 0x38
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000ad8 	.word	0x20000ad8

0800ea1c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b08a      	sub	sp, #40	; 0x28
 800ea20:	af02      	add	r7, sp, #8
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <osThreadFlagsSet+0x1a>
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	da03      	bge.n	800ea3e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ea36:	f06f 0303 	mvn.w	r3, #3
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	e046      	b.n	800eacc <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ea3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea44:	f3ef 8305 	mrs	r3, IPSR
 800ea48:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea4a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d10f      	bne.n	800ea70 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea50:	f3ef 8310 	mrs	r3, PRIMASK
 800ea54:	617b      	str	r3, [r7, #20]
  return(result);
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d109      	bne.n	800ea70 <osThreadFlagsSet+0x54>
 800ea5c:	4b1e      	ldr	r3, [pc, #120]	; (800ead8 <osThreadFlagsSet+0xbc>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d126      	bne.n	800eab2 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea64:	f3ef 8311 	mrs	r3, BASEPRI
 800ea68:	613b      	str	r3, [r7, #16]
  return(result);
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d020      	beq.n	800eab2 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ea70:	2300      	movs	r3, #0
 800ea72:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ea74:	f107 0308 	add.w	r3, r7, #8
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	69f8      	ldr	r0, [r7, #28]
 800ea82:	f003 fd09 	bl	8012498 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ea86:	f107 020c 	add.w	r2, r7, #12
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	2200      	movs	r2, #0
 800ea92:	2100      	movs	r1, #0
 800ea94:	69f8      	ldr	r0, [r7, #28]
 800ea96:	f003 fcff 	bl	8012498 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d015      	beq.n	800eacc <osThreadFlagsSet+0xb0>
 800eaa0:	4b0e      	ldr	r3, [pc, #56]	; (800eadc <osThreadFlagsSet+0xc0>)
 800eaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaa6:	601a      	str	r2, [r3, #0]
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	e00c      	b.n	800eacc <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800eab2:	2300      	movs	r3, #0
 800eab4:	2201      	movs	r2, #1
 800eab6:	6839      	ldr	r1, [r7, #0]
 800eab8:	69f8      	ldr	r0, [r7, #28]
 800eaba:	f003 fc49 	bl	8012350 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800eabe:	f107 030c 	add.w	r3, r7, #12
 800eac2:	2200      	movs	r2, #0
 800eac4:	2100      	movs	r1, #0
 800eac6:	69f8      	ldr	r0, [r7, #28]
 800eac8:	f003 fc42 	bl	8012350 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800eacc:	68fb      	ldr	r3, [r7, #12]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3720      	adds	r7, #32
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20000ad8 	.word	0x20000ad8
 800eadc:	e000ed04 	.word	0xe000ed04

0800eae0 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eae8:	f3ef 8305 	mrs	r3, IPSR
 800eaec:	617b      	str	r3, [r7, #20]
  return(result);
 800eaee:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10f      	bne.n	800eb14 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaf4:	f3ef 8310 	mrs	r3, PRIMASK
 800eaf8:	613b      	str	r3, [r7, #16]
  return(result);
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d109      	bne.n	800eb14 <osThreadFlagsClear+0x34>
 800eb00:	4b1e      	ldr	r3, [pc, #120]	; (800eb7c <osThreadFlagsClear+0x9c>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d109      	bne.n	800eb1c <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb08:	f3ef 8311 	mrs	r3, BASEPRI
 800eb0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800eb14:	f06f 0305 	mvn.w	r3, #5
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	e02a      	b.n	800eb72 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da03      	bge.n	800eb2a <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800eb22:	f06f 0303 	mvn.w	r3, #3
 800eb26:	61fb      	str	r3, [r7, #28]
 800eb28:	e023      	b.n	800eb72 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800eb2a:	f003 fa17 	bl	8011f5c <xTaskGetCurrentTaskHandle>
 800eb2e:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800eb30:	f107 0308 	add.w	r3, r7, #8
 800eb34:	2200      	movs	r2, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	69b8      	ldr	r0, [r7, #24]
 800eb3a:	f003 fc09 	bl	8012350 <xTaskGenericNotify>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d113      	bne.n	800eb6c <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	43da      	mvns	r2, r3
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	4013      	ands	r3, r2
 800eb50:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	2300      	movs	r3, #0
 800eb56:	2203      	movs	r2, #3
 800eb58:	69b8      	ldr	r0, [r7, #24]
 800eb5a:	f003 fbf9 	bl	8012350 <xTaskGenericNotify>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d006      	beq.n	800eb72 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800eb64:	f04f 33ff 	mov.w	r3, #4294967295
 800eb68:	61fb      	str	r3, [r7, #28]
 800eb6a:	e002      	b.n	800eb72 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800eb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb70:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800eb72:	69fb      	ldr	r3, [r7, #28]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3720      	adds	r7, #32
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	20000ad8 	.word	0x20000ad8

0800eb80 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b08e      	sub	sp, #56	; 0x38
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb8c:	f3ef 8305 	mrs	r3, IPSR
 800eb90:	61fb      	str	r3, [r7, #28]
  return(result);
 800eb92:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10f      	bne.n	800ebb8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb98:	f3ef 8310 	mrs	r3, PRIMASK
 800eb9c:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d109      	bne.n	800ebb8 <osThreadFlagsWait+0x38>
 800eba4:	4b3f      	ldr	r3, [pc, #252]	; (800eca4 <osThreadFlagsWait+0x124>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d109      	bne.n	800ebc0 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebac:	f3ef 8311 	mrs	r3, BASEPRI
 800ebb0:	617b      	str	r3, [r7, #20]
  return(result);
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800ebb8:	f06f 0305 	mvn.w	r3, #5
 800ebbc:	637b      	str	r3, [r7, #52]	; 0x34
 800ebbe:	e06b      	b.n	800ec98 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da03      	bge.n	800ebce <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800ebc6:	f06f 0303 	mvn.w	r3, #3
 800ebca:	637b      	str	r3, [r7, #52]	; 0x34
 800ebcc:	e064      	b.n	800ec98 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	f003 0302 	and.w	r3, r3, #2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <osThreadFlagsWait+0x5e>
      clear = 0U;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	633b      	str	r3, [r7, #48]	; 0x30
 800ebdc:	e001      	b.n	800ebe2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800ebea:	f002 fdd3 	bl	8011794 <xTaskGetTickCount>
 800ebee:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ebf0:	f107 0210 	add.w	r2, r7, #16
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	f003 fb4f 	bl	801229c <xTaskNotifyWait>
 800ebfe:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d137      	bne.n	800ec76 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ec06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec12:	4313      	orrs	r3, r2
 800ec14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	f003 0301 	and.w	r3, r3, #1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00c      	beq.n	800ec3a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec24:	4013      	ands	r3, r2
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d032      	beq.n	800ec92 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10f      	bne.n	800ec52 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ec32:	f06f 0302 	mvn.w	r3, #2
 800ec36:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ec38:	e02e      	b.n	800ec98 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3e:	4013      	ands	r3, r2
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d128      	bne.n	800ec96 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d103      	bne.n	800ec52 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ec4a:	f06f 0302 	mvn.w	r3, #2
 800ec4e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ec50:	e022      	b.n	800ec98 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ec52:	f002 fd9f 	bl	8011794 <xTaskGetTickCount>
 800ec56:	4602      	mov	r2, r0
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800ec5e:	6a3a      	ldr	r2, [r7, #32]
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d902      	bls.n	800ec6c <osThreadFlagsWait+0xec>
          tout  = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec6a:	e00e      	b.n	800ec8a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800ec6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec74:	e009      	b.n	800ec8a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d103      	bne.n	800ec84 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800ec7c:	f06f 0302 	mvn.w	r3, #2
 800ec80:	637b      	str	r3, [r7, #52]	; 0x34
 800ec82:	e002      	b.n	800ec8a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ec84:	f06f 0301 	mvn.w	r3, #1
 800ec88:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1af      	bne.n	800ebf0 <osThreadFlagsWait+0x70>
 800ec90:	e002      	b.n	800ec98 <osThreadFlagsWait+0x118>
            break;
 800ec92:	bf00      	nop
 800ec94:	e000      	b.n	800ec98 <osThreadFlagsWait+0x118>
            break;
 800ec96:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ec98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3738      	adds	r7, #56	; 0x38
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000ad8 	.word	0x20000ad8

0800eca8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecb0:	f3ef 8305 	mrs	r3, IPSR
 800ecb4:	613b      	str	r3, [r7, #16]
  return(result);
 800ecb6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10f      	bne.n	800ecdc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecbc:	f3ef 8310 	mrs	r3, PRIMASK
 800ecc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d109      	bne.n	800ecdc <osDelay+0x34>
 800ecc8:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <osDelay+0x58>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d109      	bne.n	800ece4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecd0:	f3ef 8311 	mrs	r3, BASEPRI
 800ecd4:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <osDelay+0x3c>
    stat = osErrorISR;
 800ecdc:	f06f 0305 	mvn.w	r3, #5
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	e007      	b.n	800ecf4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d002      	beq.n	800ecf4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f002 fbd4 	bl	801149c <vTaskDelay>
    }
  }

  return (stat);
 800ecf4:	697b      	ldr	r3, [r7, #20]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20000ad8 	.word	0x20000ad8

0800ed04 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b08a      	sub	sp, #40	; 0x28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed10:	f3ef 8305 	mrs	r3, IPSR
 800ed14:	613b      	str	r3, [r7, #16]
  return(result);
 800ed16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f040 8085 	bne.w	800ee28 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ed22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d17e      	bne.n	800ee28 <osMutexNew+0x124>
 800ed2a:	4b42      	ldr	r3, [pc, #264]	; (800ee34 <osMutexNew+0x130>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d105      	bne.n	800ed3e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed32:	f3ef 8311 	mrs	r3, BASEPRI
 800ed36:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d174      	bne.n	800ee28 <osMutexNew+0x124>
    if (attr != NULL) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <osMutexNew+0x48>
      type = attr->attr_bits;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	623b      	str	r3, [r7, #32]
 800ed4a:	e001      	b.n	800ed50 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ed50:	6a3b      	ldr	r3, [r7, #32]
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <osMutexNew+0x5c>
      rmtx = 1U;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	61fb      	str	r3, [r7, #28]
 800ed5e:	e001      	b.n	800ed64 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ed60:	2300      	movs	r3, #0
 800ed62:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f003 0308 	and.w	r3, r3, #8
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d15c      	bne.n	800ee28 <osMutexNew+0x124>
      mem = -1;
 800ed6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed72:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d015      	beq.n	800eda6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d006      	beq.n	800ed90 <osMutexNew+0x8c>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	2b4f      	cmp	r3, #79	; 0x4f
 800ed88:	d902      	bls.n	800ed90 <osMutexNew+0x8c>
          mem = 1;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	61bb      	str	r3, [r7, #24]
 800ed8e:	e00c      	b.n	800edaa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d108      	bne.n	800edaa <osMutexNew+0xa6>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d104      	bne.n	800edaa <osMutexNew+0xa6>
            mem = 0;
 800eda0:	2300      	movs	r3, #0
 800eda2:	61bb      	str	r3, [r7, #24]
 800eda4:	e001      	b.n	800edaa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d112      	bne.n	800edd6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d007      	beq.n	800edc6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	4619      	mov	r1, r3
 800edbc:	2004      	movs	r0, #4
 800edbe:	f001 fa67 	bl	8010290 <xQueueCreateMutexStatic>
 800edc2:	6278      	str	r0, [r7, #36]	; 0x24
 800edc4:	e016      	b.n	800edf4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	4619      	mov	r1, r3
 800edcc:	2001      	movs	r0, #1
 800edce:	f001 fa5f 	bl	8010290 <xQueueCreateMutexStatic>
 800edd2:	6278      	str	r0, [r7, #36]	; 0x24
 800edd4:	e00e      	b.n	800edf4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10b      	bne.n	800edf4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ede2:	2004      	movs	r0, #4
 800ede4:	f001 fa3c 	bl	8010260 <xQueueCreateMutex>
 800ede8:	6278      	str	r0, [r7, #36]	; 0x24
 800edea:	e003      	b.n	800edf4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800edec:	2001      	movs	r0, #1
 800edee:	f001 fa37 	bl	8010260 <xQueueCreateMutex>
 800edf2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00c      	beq.n	800ee14 <osMutexNew+0x110>
        if (attr != NULL) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d003      	beq.n	800ee08 <osMutexNew+0x104>
          name = attr->name;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	617b      	str	r3, [r7, #20]
 800ee06:	e001      	b.n	800ee0c <osMutexNew+0x108>
        } else {
          name = NULL;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ee0c:	6979      	ldr	r1, [r7, #20]
 800ee0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee10:	f002 f924 	bl	801105c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d006      	beq.n	800ee28 <osMutexNew+0x124>
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ee20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee22:	f043 0301 	orr.w	r3, r3, #1
 800ee26:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3728      	adds	r7, #40	; 0x28
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20000ad8 	.word	0x20000ad8

0800ee38 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f023 0301 	bic.w	r3, r3, #1
 800ee48:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f003 0301 	and.w	r3, r3, #1
 800ee50:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee56:	f3ef 8305 	mrs	r3, IPSR
 800ee5a:	613b      	str	r3, [r7, #16]
  return(result);
 800ee5c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10f      	bne.n	800ee82 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee62:	f3ef 8310 	mrs	r3, PRIMASK
 800ee66:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d109      	bne.n	800ee82 <osMutexAcquire+0x4a>
 800ee6e:	4b20      	ldr	r3, [pc, #128]	; (800eef0 <osMutexAcquire+0xb8>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d109      	bne.n	800ee8a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee76:	f3ef 8311 	mrs	r3, BASEPRI
 800ee7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ee82:	f06f 0305 	mvn.w	r3, #5
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e02c      	b.n	800eee4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d103      	bne.n	800ee98 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ee90:	f06f 0303 	mvn.w	r3, #3
 800ee94:	61fb      	str	r3, [r7, #28]
 800ee96:	e025      	b.n	800eee4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d011      	beq.n	800eec2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	69b8      	ldr	r0, [r7, #24]
 800eea2:	f001 fa43 	bl	801032c <xQueueTakeMutexRecursive>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d01b      	beq.n	800eee4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800eeb2:	f06f 0301 	mvn.w	r3, #1
 800eeb6:	61fb      	str	r3, [r7, #28]
 800eeb8:	e014      	b.n	800eee4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eeba:	f06f 0302 	mvn.w	r3, #2
 800eebe:	61fb      	str	r3, [r7, #28]
 800eec0:	e010      	b.n	800eee4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800eec2:	6839      	ldr	r1, [r7, #0]
 800eec4:	69b8      	ldr	r0, [r7, #24]
 800eec6:	f001 fdc1 	bl	8010a4c <xQueueSemaphoreTake>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d009      	beq.n	800eee4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d003      	beq.n	800eede <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800eed6:	f06f 0301 	mvn.w	r3, #1
 800eeda:	61fb      	str	r3, [r7, #28]
 800eedc:	e002      	b.n	800eee4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800eede:	f06f 0302 	mvn.w	r3, #2
 800eee2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eee4:	69fb      	ldr	r3, [r7, #28]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3720      	adds	r7, #32
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20000ad8 	.word	0x20000ad8

0800eef4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f023 0301 	bic.w	r3, r3, #1
 800ef02:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f003 0301 	and.w	r3, r3, #1
 800ef0a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef10:	f3ef 8305 	mrs	r3, IPSR
 800ef14:	613b      	str	r3, [r7, #16]
  return(result);
 800ef16:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10f      	bne.n	800ef3c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef20:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d109      	bne.n	800ef3c <osMutexRelease+0x48>
 800ef28:	4b19      	ldr	r3, [pc, #100]	; (800ef90 <osMutexRelease+0x9c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d109      	bne.n	800ef44 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef30:	f3ef 8311 	mrs	r3, BASEPRI
 800ef34:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ef3c:	f06f 0305 	mvn.w	r3, #5
 800ef40:	61fb      	str	r3, [r7, #28]
 800ef42:	e01f      	b.n	800ef84 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ef4a:	f06f 0303 	mvn.w	r3, #3
 800ef4e:	61fb      	str	r3, [r7, #28]
 800ef50:	e018      	b.n	800ef84 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d009      	beq.n	800ef6c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ef58:	69b8      	ldr	r0, [r7, #24]
 800ef5a:	f001 f9b4 	bl	80102c6 <xQueueGiveMutexRecursive>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d00f      	beq.n	800ef84 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ef64:	f06f 0302 	mvn.w	r3, #2
 800ef68:	61fb      	str	r3, [r7, #28]
 800ef6a:	e00b      	b.n	800ef84 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	2200      	movs	r2, #0
 800ef70:	2100      	movs	r1, #0
 800ef72:	69b8      	ldr	r0, [r7, #24]
 800ef74:	f001 fa76 	bl	8010464 <xQueueGenericSend>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d002      	beq.n	800ef84 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ef7e:	f06f 0302 	mvn.w	r3, #2
 800ef82:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ef84:	69fb      	ldr	r3, [r7, #28]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3720      	adds	r7, #32
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20000ad8 	.word	0x20000ad8

0800ef94 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08c      	sub	sp, #48	; 0x30
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800efa0:	2300      	movs	r3, #0
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efa4:	f3ef 8305 	mrs	r3, IPSR
 800efa8:	61bb      	str	r3, [r7, #24]
  return(result);
 800efaa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 8088 	bne.w	800f0c2 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efb2:	f3ef 8310 	mrs	r3, PRIMASK
 800efb6:	617b      	str	r3, [r7, #20]
  return(result);
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f040 8081 	bne.w	800f0c2 <osSemaphoreNew+0x12e>
 800efc0:	4b42      	ldr	r3, [pc, #264]	; (800f0cc <osSemaphoreNew+0x138>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d105      	bne.n	800efd4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efc8:	f3ef 8311 	mrs	r3, BASEPRI
 800efcc:	613b      	str	r3, [r7, #16]
  return(result);
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d176      	bne.n	800f0c2 <osSemaphoreNew+0x12e>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d073      	beq.n	800f0c2 <osSemaphoreNew+0x12e>
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d86f      	bhi.n	800f0c2 <osSemaphoreNew+0x12e>
    mem = -1;
 800efe2:	f04f 33ff 	mov.w	r3, #4294967295
 800efe6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d015      	beq.n	800f01a <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d006      	beq.n	800f004 <osSemaphoreNew+0x70>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	2b4f      	cmp	r3, #79	; 0x4f
 800effc:	d902      	bls.n	800f004 <osSemaphoreNew+0x70>
        mem = 1;
 800effe:	2301      	movs	r3, #1
 800f000:	623b      	str	r3, [r7, #32]
 800f002:	e00c      	b.n	800f01e <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d108      	bne.n	800f01e <osSemaphoreNew+0x8a>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d104      	bne.n	800f01e <osSemaphoreNew+0x8a>
          mem = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	623b      	str	r3, [r7, #32]
 800f018:	e001      	b.n	800f01e <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f024:	d04d      	beq.n	800f0c2 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d129      	bne.n	800f080 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d10b      	bne.n	800f04a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	689a      	ldr	r2, [r3, #8]
 800f036:	2303      	movs	r3, #3
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	4613      	mov	r3, r2
 800f03c:	2200      	movs	r2, #0
 800f03e:	2100      	movs	r1, #0
 800f040:	2001      	movs	r0, #1
 800f042:	f001 f821 	bl	8010088 <xQueueGenericCreateStatic>
 800f046:	6278      	str	r0, [r7, #36]	; 0x24
 800f048:	e005      	b.n	800f056 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f04a:	2203      	movs	r2, #3
 800f04c:	2100      	movs	r1, #0
 800f04e:	2001      	movs	r0, #1
 800f050:	f001 f88c 	bl	801016c <xQueueGenericCreate>
 800f054:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d022      	beq.n	800f0a2 <osSemaphoreNew+0x10e>
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d01f      	beq.n	800f0a2 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f062:	2300      	movs	r3, #0
 800f064:	2200      	movs	r2, #0
 800f066:	2100      	movs	r1, #0
 800f068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f06a:	f001 f9fb 	bl	8010464 <xQueueGenericSend>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b01      	cmp	r3, #1
 800f072:	d016      	beq.n	800f0a2 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800f074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f076:	f001 fea6 	bl	8010dc6 <vQueueDelete>
            hSemaphore = NULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	627b      	str	r3, [r7, #36]	; 0x24
 800f07e:	e010      	b.n	800f0a2 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800f080:	6a3b      	ldr	r3, [r7, #32]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d108      	bne.n	800f098 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	461a      	mov	r2, r3
 800f08c:	68b9      	ldr	r1, [r7, #8]
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f001 f981 	bl	8010396 <xQueueCreateCountingSemaphoreStatic>
 800f094:	6278      	str	r0, [r7, #36]	; 0x24
 800f096:	e004      	b.n	800f0a2 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f001 f9b0 	bl	8010400 <xQueueCreateCountingSemaphore>
 800f0a0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00c      	beq.n	800f0c2 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d003      	beq.n	800f0b6 <osSemaphoreNew+0x122>
          name = attr->name;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	61fb      	str	r3, [r7, #28]
 800f0b4:	e001      	b.n	800f0ba <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f0ba:	69f9      	ldr	r1, [r7, #28]
 800f0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0be:	f001 ffcd 	bl	801105c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3728      	adds	r7, #40	; 0x28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	20000ad8 	.word	0x20000ad8

0800f0d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d103      	bne.n	800f0f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f0e8:	f06f 0303 	mvn.w	r3, #3
 800f0ec:	61fb      	str	r3, [r7, #28]
 800f0ee:	e04b      	b.n	800f188 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0f0:	f3ef 8305 	mrs	r3, IPSR
 800f0f4:	617b      	str	r3, [r7, #20]
  return(result);
 800f0f6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10f      	bne.n	800f11c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f100:	613b      	str	r3, [r7, #16]
  return(result);
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <osSemaphoreAcquire+0x4c>
 800f108:	4b22      	ldr	r3, [pc, #136]	; (800f194 <osSemaphoreAcquire+0xc4>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d128      	bne.n	800f162 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f110:	f3ef 8311 	mrs	r3, BASEPRI
 800f114:	60fb      	str	r3, [r7, #12]
  return(result);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d022      	beq.n	800f162 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f122:	f06f 0303 	mvn.w	r3, #3
 800f126:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f128:	e02d      	b.n	800f186 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f12e:	f107 0308 	add.w	r3, r7, #8
 800f132:	461a      	mov	r2, r3
 800f134:	2100      	movs	r1, #0
 800f136:	69b8      	ldr	r0, [r7, #24]
 800f138:	f001 fd90 	bl	8010c5c <xQueueReceiveFromISR>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d003      	beq.n	800f14a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f142:	f06f 0302 	mvn.w	r3, #2
 800f146:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f148:	e01d      	b.n	800f186 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d01a      	beq.n	800f186 <osSemaphoreAcquire+0xb6>
 800f150:	4b11      	ldr	r3, [pc, #68]	; (800f198 <osSemaphoreAcquire+0xc8>)
 800f152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f160:	e011      	b.n	800f186 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	69b8      	ldr	r0, [r7, #24]
 800f166:	f001 fc71 	bl	8010a4c <xQueueSemaphoreTake>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d00b      	beq.n	800f188 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f176:	f06f 0301 	mvn.w	r3, #1
 800f17a:	61fb      	str	r3, [r7, #28]
 800f17c:	e004      	b.n	800f188 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f17e:	f06f 0302 	mvn.w	r3, #2
 800f182:	61fb      	str	r3, [r7, #28]
 800f184:	e000      	b.n	800f188 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f186:	bf00      	nop
      }
    }
  }

  return (stat);
 800f188:	69fb      	ldr	r3, [r7, #28]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3720      	adds	r7, #32
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20000ad8 	.word	0x20000ad8
 800f198:	e000ed04 	.word	0xe000ed04

0800f19c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d103      	bne.n	800f1ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f1b2:	f06f 0303 	mvn.w	r3, #3
 800f1b6:	61fb      	str	r3, [r7, #28]
 800f1b8:	e03e      	b.n	800f238 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ba:	f3ef 8305 	mrs	r3, IPSR
 800f1be:	617b      	str	r3, [r7, #20]
  return(result);
 800f1c0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10f      	bne.n	800f1e6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ca:	613b      	str	r3, [r7, #16]
  return(result);
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <osSemaphoreRelease+0x4a>
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <osSemaphoreRelease+0xa8>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d120      	bne.n	800f21c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f1da:	f3ef 8311 	mrs	r3, BASEPRI
 800f1de:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d01a      	beq.n	800f21c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f1ea:	f107 0308 	add.w	r3, r7, #8
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	69b8      	ldr	r0, [r7, #24]
 800f1f2:	f001 fac5 	bl	8010780 <xQueueGiveFromISR>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d003      	beq.n	800f204 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f1fc:	f06f 0302 	mvn.w	r3, #2
 800f200:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f202:	e018      	b.n	800f236 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d015      	beq.n	800f236 <osSemaphoreRelease+0x9a>
 800f20a:	4b0f      	ldr	r3, [pc, #60]	; (800f248 <osSemaphoreRelease+0xac>)
 800f20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f21a:	e00c      	b.n	800f236 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f21c:	2300      	movs	r3, #0
 800f21e:	2200      	movs	r2, #0
 800f220:	2100      	movs	r1, #0
 800f222:	69b8      	ldr	r0, [r7, #24]
 800f224:	f001 f91e 	bl	8010464 <xQueueGenericSend>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d004      	beq.n	800f238 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f22e:	f06f 0302 	mvn.w	r3, #2
 800f232:	61fb      	str	r3, [r7, #28]
 800f234:	e000      	b.n	800f238 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f236:	bf00      	nop
    }
  }

  return (stat);
 800f238:	69fb      	ldr	r3, [r7, #28]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3720      	adds	r7, #32
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20000ad8 	.word	0x20000ad8
 800f248:	e000ed04 	.word	0xe000ed04

0800f24c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b08c      	sub	sp, #48	; 0x30
 800f250:	af02      	add	r7, sp, #8
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f258:	2300      	movs	r3, #0
 800f25a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f25c:	f3ef 8305 	mrs	r3, IPSR
 800f260:	61bb      	str	r3, [r7, #24]
  return(result);
 800f262:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f264:	2b00      	cmp	r3, #0
 800f266:	d170      	bne.n	800f34a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f268:	f3ef 8310 	mrs	r3, PRIMASK
 800f26c:	617b      	str	r3, [r7, #20]
  return(result);
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d16a      	bne.n	800f34a <osMessageQueueNew+0xfe>
 800f274:	4b37      	ldr	r3, [pc, #220]	; (800f354 <osMessageQueueNew+0x108>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d105      	bne.n	800f288 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f27c:	f3ef 8311 	mrs	r3, BASEPRI
 800f280:	613b      	str	r3, [r7, #16]
  return(result);
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d160      	bne.n	800f34a <osMessageQueueNew+0xfe>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d05d      	beq.n	800f34a <osMessageQueueNew+0xfe>
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d05a      	beq.n	800f34a <osMessageQueueNew+0xfe>
    mem = -1;
 800f294:	f04f 33ff 	mov.w	r3, #4294967295
 800f298:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d029      	beq.n	800f2f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d012      	beq.n	800f2ce <osMessageQueueNew+0x82>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	2b4f      	cmp	r3, #79	; 0x4f
 800f2ae:	d90e      	bls.n	800f2ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00a      	beq.n	800f2ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	695a      	ldr	r2, [r3, #20]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	fb01 f303 	mul.w	r3, r1, r3
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d302      	bcc.n	800f2ce <osMessageQueueNew+0x82>
        mem = 1;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	623b      	str	r3, [r7, #32]
 800f2cc:	e014      	b.n	800f2f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d110      	bne.n	800f2f8 <osMessageQueueNew+0xac>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10c      	bne.n	800f2f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d108      	bne.n	800f2f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d104      	bne.n	800f2f8 <osMessageQueueNew+0xac>
          mem = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	623b      	str	r3, [r7, #32]
 800f2f2:	e001      	b.n	800f2f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d10c      	bne.n	800f318 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	691a      	ldr	r2, [r3, #16]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6899      	ldr	r1, [r3, #8]
 800f306:	2300      	movs	r3, #0
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	460b      	mov	r3, r1
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 feba 	bl	8010088 <xQueueGenericCreateStatic>
 800f314:	6278      	str	r0, [r7, #36]	; 0x24
 800f316:	e008      	b.n	800f32a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d105      	bne.n	800f32a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f31e:	2200      	movs	r2, #0
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 ff22 	bl	801016c <xQueueGenericCreate>
 800f328:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00c      	beq.n	800f34a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <osMessageQueueNew+0xf2>
        name = attr->name;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	61fb      	str	r3, [r7, #28]
 800f33c:	e001      	b.n	800f342 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f342:	69f9      	ldr	r1, [r7, #28]
 800f344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f346:	f001 fe89 	bl	801105c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3728      	adds	r7, #40	; 0x28
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20000ad8 	.word	0x20000ad8

0800f358 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f358:	b580      	push	{r7, lr}
 800f35a:	b08a      	sub	sp, #40	; 0x28
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	603b      	str	r3, [r7, #0]
 800f364:	4613      	mov	r3, r2
 800f366:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f370:	f3ef 8305 	mrs	r3, IPSR
 800f374:	61fb      	str	r3, [r7, #28]
  return(result);
 800f376:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10f      	bne.n	800f39c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f37c:	f3ef 8310 	mrs	r3, PRIMASK
 800f380:	61bb      	str	r3, [r7, #24]
  return(result);
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d109      	bne.n	800f39c <osMessageQueuePut+0x44>
 800f388:	4b2b      	ldr	r3, [pc, #172]	; (800f438 <osMessageQueuePut+0xe0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d12e      	bne.n	800f3ee <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f390:	f3ef 8311 	mrs	r3, BASEPRI
 800f394:	617b      	str	r3, [r7, #20]
  return(result);
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d028      	beq.n	800f3ee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d005      	beq.n	800f3ae <osMessageQueuePut+0x56>
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d002      	beq.n	800f3ae <osMessageQueuePut+0x56>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d003      	beq.n	800f3b6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f3ae:	f06f 0303 	mvn.w	r3, #3
 800f3b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3b4:	e039      	b.n	800f42a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f3ba:	f107 0210 	add.w	r2, r7, #16
 800f3be:	2300      	movs	r3, #0
 800f3c0:	68b9      	ldr	r1, [r7, #8]
 800f3c2:	6a38      	ldr	r0, [r7, #32]
 800f3c4:	f001 f948 	bl	8010658 <xQueueGenericSendFromISR>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d003      	beq.n	800f3d6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f3ce:	f06f 0302 	mvn.w	r3, #2
 800f3d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3d4:	e029      	b.n	800f42a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d026      	beq.n	800f42a <osMessageQueuePut+0xd2>
 800f3dc:	4b17      	ldr	r3, [pc, #92]	; (800f43c <osMessageQueuePut+0xe4>)
 800f3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3ec:	e01d      	b.n	800f42a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <osMessageQueuePut+0xa2>
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d103      	bne.n	800f402 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f3fa:	f06f 0303 	mvn.w	r3, #3
 800f3fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f400:	e014      	b.n	800f42c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f402:	2300      	movs	r3, #0
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	68b9      	ldr	r1, [r7, #8]
 800f408:	6a38      	ldr	r0, [r7, #32]
 800f40a:	f001 f82b 	bl	8010464 <xQueueGenericSend>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b01      	cmp	r3, #1
 800f412:	d00b      	beq.n	800f42c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f41a:	f06f 0301 	mvn.w	r3, #1
 800f41e:	627b      	str	r3, [r7, #36]	; 0x24
 800f420:	e004      	b.n	800f42c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f422:	f06f 0302 	mvn.w	r3, #2
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
 800f428:	e000      	b.n	800f42c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f42a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3728      	adds	r7, #40	; 0x28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	20000ad8 	.word	0x20000ad8
 800f43c:	e000ed04 	.word	0xe000ed04

0800f440 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f452:	2300      	movs	r3, #0
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f456:	f3ef 8305 	mrs	r3, IPSR
 800f45a:	61fb      	str	r3, [r7, #28]
  return(result);
 800f45c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d10f      	bne.n	800f482 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f462:	f3ef 8310 	mrs	r3, PRIMASK
 800f466:	61bb      	str	r3, [r7, #24]
  return(result);
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d109      	bne.n	800f482 <osMessageQueueGet+0x42>
 800f46e:	4b2b      	ldr	r3, [pc, #172]	; (800f51c <osMessageQueueGet+0xdc>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2b02      	cmp	r3, #2
 800f474:	d12e      	bne.n	800f4d4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f476:	f3ef 8311 	mrs	r3, BASEPRI
 800f47a:	617b      	str	r3, [r7, #20]
  return(result);
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d028      	beq.n	800f4d4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d005      	beq.n	800f494 <osMessageQueueGet+0x54>
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d002      	beq.n	800f494 <osMessageQueueGet+0x54>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d003      	beq.n	800f49c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f494:	f06f 0303 	mvn.w	r3, #3
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f49a:	e038      	b.n	800f50e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f49c:	2300      	movs	r3, #0
 800f49e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f4a0:	f107 0310 	add.w	r3, r7, #16
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	68b9      	ldr	r1, [r7, #8]
 800f4a8:	6a38      	ldr	r0, [r7, #32]
 800f4aa:	f001 fbd7 	bl	8010c5c <xQueueReceiveFromISR>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d003      	beq.n	800f4bc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f4b4:	f06f 0302 	mvn.w	r3, #2
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f4ba:	e028      	b.n	800f50e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d025      	beq.n	800f50e <osMessageQueueGet+0xce>
 800f4c2:	4b17      	ldr	r3, [pc, #92]	; (800f520 <osMessageQueueGet+0xe0>)
 800f4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f4d2:	e01c      	b.n	800f50e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <osMessageQueueGet+0xa0>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d103      	bne.n	800f4e8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f4e0:	f06f 0303 	mvn.w	r3, #3
 800f4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4e6:	e013      	b.n	800f510 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	6a38      	ldr	r0, [r7, #32]
 800f4ee:	f001 f9d1 	bl	8010894 <xQueueReceive>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d00b      	beq.n	800f510 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f4fe:	f06f 0301 	mvn.w	r3, #1
 800f502:	627b      	str	r3, [r7, #36]	; 0x24
 800f504:	e004      	b.n	800f510 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f506:	f06f 0302 	mvn.w	r3, #2
 800f50a:	627b      	str	r3, [r7, #36]	; 0x24
 800f50c:	e000      	b.n	800f510 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f50e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f512:	4618      	mov	r0, r3
 800f514:	3728      	adds	r7, #40	; 0x28
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	20000ad8 	.word	0x20000ad8
 800f520:	e000ed04 	.word	0xe000ed04

0800f524 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f524:	b580      	push	{r7, lr}
 800f526:	b088      	sub	sp, #32
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d102      	bne.n	800f53c <osMessageQueueGetCount+0x18>
    count = 0U;
 800f536:	2300      	movs	r3, #0
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	e01e      	b.n	800f57a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f53c:	f3ef 8305 	mrs	r3, IPSR
 800f540:	617b      	str	r3, [r7, #20]
  return(result);
 800f542:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10f      	bne.n	800f568 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f548:	f3ef 8310 	mrs	r3, PRIMASK
 800f54c:	613b      	str	r3, [r7, #16]
  return(result);
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d109      	bne.n	800f568 <osMessageQueueGetCount+0x44>
 800f554:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <osMessageQueueGetCount+0x60>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d10a      	bne.n	800f572 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f55c:	f3ef 8311 	mrs	r3, BASEPRI
 800f560:	60fb      	str	r3, [r7, #12]
  return(result);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d004      	beq.n	800f572 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800f568:	69b8      	ldr	r0, [r7, #24]
 800f56a:	f001 fc11 	bl	8010d90 <uxQueueMessagesWaitingFromISR>
 800f56e:	61f8      	str	r0, [r7, #28]
 800f570:	e003      	b.n	800f57a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800f572:	69b8      	ldr	r0, [r7, #24]
 800f574:	f001 fbef 	bl	8010d56 <uxQueueMessagesWaiting>
 800f578:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800f57a:	69fb      	ldr	r3, [r7, #28]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20000ad8 	.word	0x20000ad8

0800f588 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f594:	f3ef 8305 	mrs	r3, IPSR
 800f598:	617b      	str	r3, [r7, #20]
  return(result);
 800f59a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10f      	bne.n	800f5c0 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800f5a4:	613b      	str	r3, [r7, #16]
  return(result);
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d109      	bne.n	800f5c0 <osMessageQueueReset+0x38>
 800f5ac:	4b0f      	ldr	r3, [pc, #60]	; (800f5ec <osMessageQueueReset+0x64>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	d109      	bne.n	800f5c8 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5b4:	f3ef 8311 	mrs	r3, BASEPRI
 800f5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800f5c0:	f06f 0305 	mvn.w	r3, #5
 800f5c4:	61fb      	str	r3, [r7, #28]
 800f5c6:	e00c      	b.n	800f5e2 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d103      	bne.n	800f5d6 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800f5ce:	f06f 0303 	mvn.w	r3, #3
 800f5d2:	61fb      	str	r3, [r7, #28]
 800f5d4:	e005      	b.n	800f5e2 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800f5da:	2100      	movs	r1, #0
 800f5dc:	69b8      	ldr	r0, [r7, #24]
 800f5de:	f000 fceb 	bl	800ffb8 <xQueueGenericReset>
  }

  return (stat);
 800f5e2:	69fb      	ldr	r3, [r7, #28]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3720      	adds	r7, #32
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	20000ad8 	.word	0x20000ad8

0800f5f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	4a07      	ldr	r2, [pc, #28]	; (800f61c <vApplicationGetIdleTaskMemory+0x2c>)
 800f600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	4a06      	ldr	r2, [pc, #24]	; (800f620 <vApplicationGetIdleTaskMemory+0x30>)
 800f606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f60e:	601a      	str	r2, [r3, #0]
}
 800f610:	bf00      	nop
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	20000adc 	.word	0x20000adc
 800f620:	20000b40 	.word	0x20000b40

0800f624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	4a07      	ldr	r2, [pc, #28]	; (800f650 <vApplicationGetTimerTaskMemory+0x2c>)
 800f634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	4a06      	ldr	r2, [pc, #24]	; (800f654 <vApplicationGetTimerTaskMemory+0x30>)
 800f63a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f642:	601a      	str	r2, [r3, #0]
}
 800f644:	bf00      	nop
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	20001340 	.word	0x20001340
 800f654:	200013a4 	.word	0x200013a4

0800f658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f660:	2300      	movs	r3, #0
 800f662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f664:	f001 ffb4 	bl	80115d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f668:	4b59      	ldr	r3, [pc, #356]	; (800f7d0 <pvPortMalloc+0x178>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d101      	bne.n	800f674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f670:	f000 f910 	bl	800f894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f674:	4b57      	ldr	r3, [pc, #348]	; (800f7d4 <pvPortMalloc+0x17c>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4013      	ands	r3, r2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f040 808c 	bne.w	800f79a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d01c      	beq.n	800f6c2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f688:	2208      	movs	r2, #8
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4413      	add	r3, r2
 800f68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	2b00      	cmp	r3, #0
 800f698:	d013      	beq.n	800f6c2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f023 0307 	bic.w	r3, r3, #7
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f003 0307 	and.w	r3, r3, #7
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d009      	beq.n	800f6c2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	617b      	str	r3, [r7, #20]
 800f6c0:	e7fe      	b.n	800f6c0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d068      	beq.n	800f79a <pvPortMalloc+0x142>
 800f6c8:	4b43      	ldr	r3, [pc, #268]	; (800f7d8 <pvPortMalloc+0x180>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d863      	bhi.n	800f79a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f6d2:	4b42      	ldr	r3, [pc, #264]	; (800f7dc <pvPortMalloc+0x184>)
 800f6d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f6d6:	4b41      	ldr	r3, [pc, #260]	; (800f7dc <pvPortMalloc+0x184>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6dc:	e004      	b.n	800f6e8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d903      	bls.n	800f6fa <pvPortMalloc+0xa2>
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1f1      	bne.n	800f6de <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6fa:	4b35      	ldr	r3, [pc, #212]	; (800f7d0 <pvPortMalloc+0x178>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f700:	429a      	cmp	r2, r3
 800f702:	d04a      	beq.n	800f79a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f704:	6a3b      	ldr	r3, [r7, #32]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2208      	movs	r2, #8
 800f70a:	4413      	add	r3, r2
 800f70c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	6a3b      	ldr	r3, [r7, #32]
 800f714:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	685a      	ldr	r2, [r3, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	1ad2      	subs	r2, r2, r3
 800f71e:	2308      	movs	r3, #8
 800f720:	005b      	lsls	r3, r3, #1
 800f722:	429a      	cmp	r2, r3
 800f724:	d91e      	bls.n	800f764 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4413      	add	r3, r2
 800f72c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	f003 0307 	and.w	r3, r3, #7
 800f734:	2b00      	cmp	r3, #0
 800f736:	d009      	beq.n	800f74c <pvPortMalloc+0xf4>
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	613b      	str	r3, [r7, #16]
 800f74a:	e7fe      	b.n	800f74a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74e:	685a      	ldr	r2, [r3, #4]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	1ad2      	subs	r2, r2, r3
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f75e:	69b8      	ldr	r0, [r7, #24]
 800f760:	f000 f8fc 	bl	800f95c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f764:	4b1c      	ldr	r3, [pc, #112]	; (800f7d8 <pvPortMalloc+0x180>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	4a1a      	ldr	r2, [pc, #104]	; (800f7d8 <pvPortMalloc+0x180>)
 800f770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f772:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <pvPortMalloc+0x180>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	4b1a      	ldr	r3, [pc, #104]	; (800f7e0 <pvPortMalloc+0x188>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d203      	bcs.n	800f786 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f77e:	4b16      	ldr	r3, [pc, #88]	; (800f7d8 <pvPortMalloc+0x180>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4a17      	ldr	r2, [pc, #92]	; (800f7e0 <pvPortMalloc+0x188>)
 800f784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	4b12      	ldr	r3, [pc, #72]	; (800f7d4 <pvPortMalloc+0x17c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	431a      	orrs	r2, r3
 800f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f796:	2200      	movs	r2, #0
 800f798:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f79a:	f001 ff5f 	bl	801165c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d101      	bne.n	800f7a8 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f7a4:	f7f1 fd6c 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	f003 0307 	and.w	r3, r3, #7
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d009      	beq.n	800f7c6 <pvPortMalloc+0x16e>
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e7fe      	b.n	800f7c4 <pvPortMalloc+0x16c>
	return pvReturn;
 800f7c6:	69fb      	ldr	r3, [r7, #28]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3728      	adds	r7, #40	; 0x28
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	20026d9c 	.word	0x20026d9c
 800f7d4:	20026da8 	.word	0x20026da8
 800f7d8:	20026da0 	.word	0x20026da0
 800f7dc:	20026d94 	.word	0x20026d94
 800f7e0:	20026da4 	.word	0x20026da4

0800f7e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b086      	sub	sp, #24
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d046      	beq.n	800f884 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f7f6:	2308      	movs	r3, #8
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	4b20      	ldr	r3, [pc, #128]	; (800f88c <vPortFree+0xa8>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4013      	ands	r3, r2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d109      	bne.n	800f826 <vPortFree+0x42>
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	e7fe      	b.n	800f824 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d009      	beq.n	800f842 <vPortFree+0x5e>
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	60bb      	str	r3, [r7, #8]
 800f840:	e7fe      	b.n	800f840 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	685a      	ldr	r2, [r3, #4]
 800f846:	4b11      	ldr	r3, [pc, #68]	; (800f88c <vPortFree+0xa8>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4013      	ands	r3, r2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d019      	beq.n	800f884 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d115      	bne.n	800f884 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <vPortFree+0xa8>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	43db      	mvns	r3, r3
 800f862:	401a      	ands	r2, r3
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f868:	f001 feb2 	bl	80115d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <vPortFree+0xac>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4413      	add	r3, r2
 800f876:	4a06      	ldr	r2, [pc, #24]	; (800f890 <vPortFree+0xac>)
 800f878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f87a:	6938      	ldr	r0, [r7, #16]
 800f87c:	f000 f86e 	bl	800f95c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f880:	f001 feec 	bl	801165c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f884:	bf00      	nop
 800f886:	3718      	adds	r7, #24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	20026da8 	.word	0x20026da8
 800f890:	20026da0 	.word	0x20026da0

0800f894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f89a:	4b29      	ldr	r3, [pc, #164]	; (800f940 <prvHeapInit+0xac>)
 800f89c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f89e:	4b29      	ldr	r3, [pc, #164]	; (800f944 <prvHeapInit+0xb0>)
 800f8a0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f003 0307 	and.w	r3, r3, #7
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00c      	beq.n	800f8c6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3307      	adds	r3, #7
 800f8b0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f023 0307 	bic.w	r3, r3, #7
 800f8b8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	4a20      	ldr	r2, [pc, #128]	; (800f944 <prvHeapInit+0xb0>)
 800f8c2:	4413      	add	r3, r2
 800f8c4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f8ca:	4a1f      	ldr	r2, [pc, #124]	; (800f948 <prvHeapInit+0xb4>)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f8d0:	4b1d      	ldr	r3, [pc, #116]	; (800f948 <prvHeapInit+0xb4>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68ba      	ldr	r2, [r7, #8]
 800f8da:	4413      	add	r3, r2
 800f8dc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f8de:	2208      	movs	r2, #8
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	1a9b      	subs	r3, r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f023 0307 	bic.w	r3, r3, #7
 800f8ec:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4a16      	ldr	r2, [pc, #88]	; (800f94c <prvHeapInit+0xb8>)
 800f8f2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f8f4:	4b15      	ldr	r3, [pc, #84]	; (800f94c <prvHeapInit+0xb8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8fc:	4b13      	ldr	r3, [pc, #76]	; (800f94c <prvHeapInit+0xb8>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2200      	movs	r2, #0
 800f902:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	1ad2      	subs	r2, r2, r3
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f912:	4b0e      	ldr	r3, [pc, #56]	; (800f94c <prvHeapInit+0xb8>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	4a0c      	ldr	r2, [pc, #48]	; (800f950 <prvHeapInit+0xbc>)
 800f920:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	4a0b      	ldr	r2, [pc, #44]	; (800f954 <prvHeapInit+0xc0>)
 800f928:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f92a:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <prvHeapInit+0xc4>)
 800f92c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f930:	601a      	str	r2, [r3, #0]
}
 800f932:	bf00      	nop
 800f934:	3714      	adds	r7, #20
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	000249f0 	.word	0x000249f0
 800f944:	200023a4 	.word	0x200023a4
 800f948:	20026d94 	.word	0x20026d94
 800f94c:	20026d9c 	.word	0x20026d9c
 800f950:	20026da4 	.word	0x20026da4
 800f954:	20026da0 	.word	0x20026da0
 800f958:	20026da8 	.word	0x20026da8

0800f95c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f964:	4b28      	ldr	r3, [pc, #160]	; (800fa08 <prvInsertBlockIntoFreeList+0xac>)
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	e002      	b.n	800f970 <prvInsertBlockIntoFreeList+0x14>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	429a      	cmp	r2, r3
 800f978:	d8f7      	bhi.n	800f96a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	4413      	add	r3, r2
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d108      	bne.n	800f99e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	685a      	ldr	r2, [r3, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	441a      	add	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	441a      	add	r2, r3
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d118      	bne.n	800f9e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	4b15      	ldr	r3, [pc, #84]	; (800fa0c <prvInsertBlockIntoFreeList+0xb0>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d00d      	beq.n	800f9da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	441a      	add	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	601a      	str	r2, [r3, #0]
 800f9d8:	e008      	b.n	800f9ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f9da:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <prvInsertBlockIntoFreeList+0xb0>)
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	e003      	b.n	800f9ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d002      	beq.n	800f9fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9fa:	bf00      	nop
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	20026d94 	.word	0x20026d94
 800fa0c:	20026d9c 	.word	0x20026d9c

0800fa10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f103 0208 	add.w	r2, r3, #8
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f04f 32ff 	mov.w	r2, #4294967295
 800fa28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f103 0208 	add.w	r2, r3, #8
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f103 0208 	add.w	r2, r3, #8
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa5e:	bf00      	nop
 800fa60:	370c      	adds	r7, #12
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	689a      	ldr	r2, [r3, #8]
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	689b      	ldr	r3, [r3, #8]
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	601a      	str	r2, [r3, #0]
}
 800faa6:	bf00      	nop
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fab2:	b480      	push	{r7}
 800fab4:	b085      	sub	sp, #20
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac8:	d103      	bne.n	800fad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	60fb      	str	r3, [r7, #12]
 800fad0:	e00c      	b.n	800faec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	3308      	adds	r3, #8
 800fad6:	60fb      	str	r3, [r7, #12]
 800fad8:	e002      	b.n	800fae0 <vListInsert+0x2e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	60fb      	str	r3, [r7, #12]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d2f6      	bcs.n	800fada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	1c5a      	adds	r2, r3, #1
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	601a      	str	r2, [r3, #0]
}
 800fb18:	bf00      	nop
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	6892      	ldr	r2, [r2, #8]
 800fb3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	6852      	ldr	r2, [r2, #4]
 800fb44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d103      	bne.n	800fb58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689a      	ldr	r2, [r3, #8]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	1e5a      	subs	r2, r3, #1
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3714      	adds	r7, #20
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	3b04      	subs	r3, #4
 800fb88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3b04      	subs	r3, #4
 800fb96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	f023 0201 	bic.w	r2, r3, #1
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3b04      	subs	r3, #4
 800fba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fba8:	4a0c      	ldr	r2, [pc, #48]	; (800fbdc <pxPortInitialiseStack+0x64>)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3b14      	subs	r3, #20
 800fbb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	3b04      	subs	r3, #4
 800fbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f06f 0202 	mvn.w	r2, #2
 800fbc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	3b20      	subs	r3, #32
 800fbcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbce:	68fb      	ldr	r3, [r7, #12]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3714      	adds	r7, #20
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	0800fbe1 	.word	0x0800fbe1

0800fbe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fbea:	4b11      	ldr	r3, [pc, #68]	; (800fc30 <prvTaskExitError+0x50>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf2:	d009      	beq.n	800fc08 <prvTaskExitError+0x28>
 800fbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf8:	f383 8811 	msr	BASEPRI, r3
 800fbfc:	f3bf 8f6f 	isb	sy
 800fc00:	f3bf 8f4f 	dsb	sy
 800fc04:	60fb      	str	r3, [r7, #12]
 800fc06:	e7fe      	b.n	800fc06 <prvTaskExitError+0x26>
 800fc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0c:	f383 8811 	msr	BASEPRI, r3
 800fc10:	f3bf 8f6f 	isb	sy
 800fc14:	f3bf 8f4f 	dsb	sy
 800fc18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc1a:	bf00      	nop
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d0fc      	beq.n	800fc1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc22:	bf00      	nop
 800fc24:	3714      	adds	r7, #20
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop
 800fc30:	20000084 	.word	0x20000084
	...

0800fc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc40:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <pxCurrentTCBConst2>)
 800fc42:	6819      	ldr	r1, [r3, #0]
 800fc44:	6808      	ldr	r0, [r1, #0]
 800fc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4a:	f380 8809 	msr	PSP, r0
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f04f 0000 	mov.w	r0, #0
 800fc56:	f380 8811 	msr	BASEPRI, r0
 800fc5a:	4770      	bx	lr
 800fc5c:	f3af 8000 	nop.w

0800fc60 <pxCurrentTCBConst2>:
 800fc60:	20026db4 	.word	0x20026db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc64:	bf00      	nop
 800fc66:	bf00      	nop

0800fc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc68:	4808      	ldr	r0, [pc, #32]	; (800fc8c <prvPortStartFirstTask+0x24>)
 800fc6a:	6800      	ldr	r0, [r0, #0]
 800fc6c:	6800      	ldr	r0, [r0, #0]
 800fc6e:	f380 8808 	msr	MSP, r0
 800fc72:	f04f 0000 	mov.w	r0, #0
 800fc76:	f380 8814 	msr	CONTROL, r0
 800fc7a:	b662      	cpsie	i
 800fc7c:	b661      	cpsie	f
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	df00      	svc	0
 800fc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc8a:	bf00      	nop
 800fc8c:	e000ed08 	.word	0xe000ed08

0800fc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc96:	4b44      	ldr	r3, [pc, #272]	; (800fda8 <xPortStartScheduler+0x118>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a44      	ldr	r2, [pc, #272]	; (800fdac <xPortStartScheduler+0x11c>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d109      	bne.n	800fcb4 <xPortStartScheduler+0x24>
 800fca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca4:	f383 8811 	msr	BASEPRI, r3
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	f3bf 8f4f 	dsb	sy
 800fcb0:	613b      	str	r3, [r7, #16]
 800fcb2:	e7fe      	b.n	800fcb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fcb4:	4b3c      	ldr	r3, [pc, #240]	; (800fda8 <xPortStartScheduler+0x118>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a3d      	ldr	r2, [pc, #244]	; (800fdb0 <xPortStartScheduler+0x120>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d109      	bne.n	800fcd2 <xPortStartScheduler+0x42>
 800fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	e7fe      	b.n	800fcd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fcd2:	4b38      	ldr	r3, [pc, #224]	; (800fdb4 <xPortStartScheduler+0x124>)
 800fcd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	22ff      	movs	r2, #255	; 0xff
 800fce2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	4b30      	ldr	r3, [pc, #192]	; (800fdb8 <xPortStartScheduler+0x128>)
 800fcf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcfa:	4b30      	ldr	r3, [pc, #192]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fcfc:	2207      	movs	r2, #7
 800fcfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd00:	e009      	b.n	800fd16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fd02:	4b2e      	ldr	r3, [pc, #184]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	4a2c      	ldr	r2, [pc, #176]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd0c:	78fb      	ldrb	r3, [r7, #3]
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd16:	78fb      	ldrb	r3, [r7, #3]
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd1e:	2b80      	cmp	r3, #128	; 0x80
 800fd20:	d0ef      	beq.n	800fd02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd22:	4b26      	ldr	r3, [pc, #152]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f1c3 0307 	rsb	r3, r3, #7
 800fd2a:	2b04      	cmp	r3, #4
 800fd2c:	d009      	beq.n	800fd42 <xPortStartScheduler+0xb2>
 800fd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	60bb      	str	r3, [r7, #8]
 800fd40:	e7fe      	b.n	800fd40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd42:	4b1e      	ldr	r3, [pc, #120]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	021b      	lsls	r3, r3, #8
 800fd48:	4a1c      	ldr	r2, [pc, #112]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd4c:	4b1b      	ldr	r3, [pc, #108]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd54:	4a19      	ldr	r2, [pc, #100]	; (800fdbc <xPortStartScheduler+0x12c>)
 800fd56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd60:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <xPortStartScheduler+0x130>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a16      	ldr	r2, [pc, #88]	; (800fdc0 <xPortStartScheduler+0x130>)
 800fd66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd6c:	4b14      	ldr	r3, [pc, #80]	; (800fdc0 <xPortStartScheduler+0x130>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a13      	ldr	r2, [pc, #76]	; (800fdc0 <xPortStartScheduler+0x130>)
 800fd72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd78:	f7f2 fa84 	bl	8002284 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd7c:	4b11      	ldr	r3, [pc, #68]	; (800fdc4 <xPortStartScheduler+0x134>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd82:	f000 f8d1 	bl	800ff28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd86:	4b10      	ldr	r3, [pc, #64]	; (800fdc8 <xPortStartScheduler+0x138>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a0f      	ldr	r2, [pc, #60]	; (800fdc8 <xPortStartScheduler+0x138>)
 800fd8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd92:	f7ff ff69 	bl	800fc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd96:	f001 fdf9 	bl	801198c <vTaskSwitchContext>
	prvTaskExitError();
 800fd9a:	f7ff ff21 	bl	800fbe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3718      	adds	r7, #24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	e000ed00 	.word	0xe000ed00
 800fdac:	410fc271 	.word	0x410fc271
 800fdb0:	410fc270 	.word	0x410fc270
 800fdb4:	e000e400 	.word	0xe000e400
 800fdb8:	20026dac 	.word	0x20026dac
 800fdbc:	20026db0 	.word	0x20026db0
 800fdc0:	e000ed20 	.word	0xe000ed20
 800fdc4:	20000084 	.word	0x20000084
 800fdc8:	e000ef34 	.word	0xe000ef34

0800fdcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fde4:	4b0e      	ldr	r3, [pc, #56]	; (800fe20 <vPortEnterCritical+0x54>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3301      	adds	r3, #1
 800fdea:	4a0d      	ldr	r2, [pc, #52]	; (800fe20 <vPortEnterCritical+0x54>)
 800fdec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fdee:	4b0c      	ldr	r3, [pc, #48]	; (800fe20 <vPortEnterCritical+0x54>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d10e      	bne.n	800fe14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdf6:	4b0b      	ldr	r3, [pc, #44]	; (800fe24 <vPortEnterCritical+0x58>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d009      	beq.n	800fe14 <vPortEnterCritical+0x48>
 800fe00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	603b      	str	r3, [r7, #0]
 800fe12:	e7fe      	b.n	800fe12 <vPortEnterCritical+0x46>
	}
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	20000084 	.word	0x20000084
 800fe24:	e000ed04 	.word	0xe000ed04

0800fe28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe2e:	4b11      	ldr	r3, [pc, #68]	; (800fe74 <vPortExitCritical+0x4c>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <vPortExitCritical+0x22>
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	f383 8811 	msr	BASEPRI, r3
 800fe3e:	f3bf 8f6f 	isb	sy
 800fe42:	f3bf 8f4f 	dsb	sy
 800fe46:	607b      	str	r3, [r7, #4]
 800fe48:	e7fe      	b.n	800fe48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fe4a:	4b0a      	ldr	r3, [pc, #40]	; (800fe74 <vPortExitCritical+0x4c>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	4a08      	ldr	r2, [pc, #32]	; (800fe74 <vPortExitCritical+0x4c>)
 800fe52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe54:	4b07      	ldr	r3, [pc, #28]	; (800fe74 <vPortExitCritical+0x4c>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d104      	bne.n	800fe66 <vPortExitCritical+0x3e>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe66:	bf00      	nop
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	20000084 	.word	0x20000084
	...

0800fe80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe80:	f3ef 8009 	mrs	r0, PSP
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	4b15      	ldr	r3, [pc, #84]	; (800fee0 <pxCurrentTCBConst>)
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	f01e 0f10 	tst.w	lr, #16
 800fe90:	bf08      	it	eq
 800fe92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9a:	6010      	str	r0, [r2, #0]
 800fe9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fea4:	f380 8811 	msr	BASEPRI, r0
 800fea8:	f3bf 8f4f 	dsb	sy
 800feac:	f3bf 8f6f 	isb	sy
 800feb0:	f001 fd6c 	bl	801198c <vTaskSwitchContext>
 800feb4:	f04f 0000 	mov.w	r0, #0
 800feb8:	f380 8811 	msr	BASEPRI, r0
 800febc:	bc09      	pop	{r0, r3}
 800febe:	6819      	ldr	r1, [r3, #0]
 800fec0:	6808      	ldr	r0, [r1, #0]
 800fec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec6:	f01e 0f10 	tst.w	lr, #16
 800feca:	bf08      	it	eq
 800fecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fed0:	f380 8809 	msr	PSP, r0
 800fed4:	f3bf 8f6f 	isb	sy
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	f3af 8000 	nop.w

0800fee0 <pxCurrentTCBConst>:
 800fee0:	20026db4 	.word	0x20026db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fee4:	bf00      	nop
 800fee6:	bf00      	nop

0800fee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff00:	f001 fc7e 	bl	8011800 <xTaskIncrementTick>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d003      	beq.n	800ff12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff0a:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <SysTick_Handler+0x3c>)
 800ff0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	2300      	movs	r3, #0
 800ff14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff1c:	bf00      	nop
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	e000ed04 	.word	0xe000ed04

0800ff28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ff38 <vPortEnableVFP+0x10>
 800ff2c:	6801      	ldr	r1, [r0, #0]
 800ff2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff32:	6001      	str	r1, [r0, #0]
 800ff34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff36:	bf00      	nop
 800ff38:	e000ed88 	.word	0xe000ed88

0800ff3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff42:	f3ef 8305 	mrs	r3, IPSR
 800ff46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2b0f      	cmp	r3, #15
 800ff4c:	d913      	bls.n	800ff76 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff4e:	4a16      	ldr	r2, [pc, #88]	; (800ffa8 <vPortValidateInterruptPriority+0x6c>)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	4413      	add	r3, r2
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff58:	4b14      	ldr	r3, [pc, #80]	; (800ffac <vPortValidateInterruptPriority+0x70>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	7afa      	ldrb	r2, [r7, #11]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d209      	bcs.n	800ff76 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ff62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	607b      	str	r3, [r7, #4]
 800ff74:	e7fe      	b.n	800ff74 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff76:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <vPortValidateInterruptPriority+0x74>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff7e:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <vPortValidateInterruptPriority+0x78>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d909      	bls.n	800ff9a <vPortValidateInterruptPriority+0x5e>
 800ff86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8a:	f383 8811 	msr	BASEPRI, r3
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	e7fe      	b.n	800ff98 <vPortValidateInterruptPriority+0x5c>
	}
 800ff9a:	bf00      	nop
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	e000e3f0 	.word	0xe000e3f0
 800ffac:	20026dac 	.word	0x20026dac
 800ffb0:	e000ed0c 	.word	0xe000ed0c
 800ffb4:	20026db0 	.word	0x20026db0

0800ffb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d109      	bne.n	800ffe0 <xQueueGenericReset+0x28>
 800ffcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	60bb      	str	r3, [r7, #8]
 800ffde:	e7fe      	b.n	800ffde <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ffe0:	f7ff fef4 	bl	800fdcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffec:	68f9      	ldr	r1, [r7, #12]
 800ffee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fff0:	fb01 f303 	mul.w	r3, r1, r3
 800fff4:	441a      	add	r2, r3
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2200      	movs	r2, #0
 800fffe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010010:	3b01      	subs	r3, #1
 8010012:	68f9      	ldr	r1, [r7, #12]
 8010014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010016:	fb01 f303 	mul.w	r3, r1, r3
 801001a:	441a      	add	r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	22ff      	movs	r2, #255	; 0xff
 8010024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	22ff      	movs	r2, #255	; 0xff
 801002c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d114      	bne.n	8010060 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	691b      	ldr	r3, [r3, #16]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d01a      	beq.n	8010074 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3310      	adds	r3, #16
 8010042:	4618      	mov	r0, r3
 8010044:	f001 fd78 	bl	8011b38 <xTaskRemoveFromEventList>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d012      	beq.n	8010074 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801004e:	4b0d      	ldr	r3, [pc, #52]	; (8010084 <xQueueGenericReset+0xcc>)
 8010050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	e009      	b.n	8010074 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3310      	adds	r3, #16
 8010064:	4618      	mov	r0, r3
 8010066:	f7ff fcd3 	bl	800fa10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3324      	adds	r3, #36	; 0x24
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fcce 	bl	800fa10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010074:	f7ff fed8 	bl	800fe28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010078:	2301      	movs	r3, #1
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	e000ed04 	.word	0xe000ed04

08010088 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010088:	b580      	push	{r7, lr}
 801008a:	b08e      	sub	sp, #56	; 0x38
 801008c:	af02      	add	r7, sp, #8
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d109      	bne.n	80100b0 <xQueueGenericCreateStatic+0x28>
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80100ae:	e7fe      	b.n	80100ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d109      	bne.n	80100ca <xQueueGenericCreateStatic+0x42>
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	627b      	str	r3, [r7, #36]	; 0x24
 80100c8:	e7fe      	b.n	80100c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <xQueueGenericCreateStatic+0x4e>
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d001      	beq.n	80100da <xQueueGenericCreateStatic+0x52>
 80100d6:	2301      	movs	r3, #1
 80100d8:	e000      	b.n	80100dc <xQueueGenericCreateStatic+0x54>
 80100da:	2300      	movs	r3, #0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d109      	bne.n	80100f4 <xQueueGenericCreateStatic+0x6c>
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	623b      	str	r3, [r7, #32]
 80100f2:	e7fe      	b.n	80100f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d102      	bne.n	8010100 <xQueueGenericCreateStatic+0x78>
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <xQueueGenericCreateStatic+0x7c>
 8010100:	2301      	movs	r3, #1
 8010102:	e000      	b.n	8010106 <xQueueGenericCreateStatic+0x7e>
 8010104:	2300      	movs	r3, #0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d109      	bne.n	801011e <xQueueGenericCreateStatic+0x96>
 801010a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	61fb      	str	r3, [r7, #28]
 801011c:	e7fe      	b.n	801011c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801011e:	2350      	movs	r3, #80	; 0x50
 8010120:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2b50      	cmp	r3, #80	; 0x50
 8010126:	d009      	beq.n	801013c <xQueueGenericCreateStatic+0xb4>
 8010128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012c:	f383 8811 	msr	BASEPRI, r3
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	61bb      	str	r3, [r7, #24]
 801013a:	e7fe      	b.n	801013a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00d      	beq.n	8010162 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	2201      	movs	r2, #1
 801014a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801014e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	4613      	mov	r3, r2
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	68b9      	ldr	r1, [r7, #8]
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 f842 	bl	80101e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010164:	4618      	mov	r0, r3
 8010166:	3730      	adds	r7, #48	; 0x30
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08a      	sub	sp, #40	; 0x28
 8010170:	af02      	add	r7, sp, #8
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	4613      	mov	r3, r2
 8010178:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d109      	bne.n	8010194 <xQueueGenericCreate+0x28>
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	613b      	str	r3, [r7, #16]
 8010192:	e7fe      	b.n	8010192 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d102      	bne.n	80101a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801019a:	2300      	movs	r3, #0
 801019c:	61fb      	str	r3, [r7, #28]
 801019e:	e004      	b.n	80101aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	fb02 f303 	mul.w	r3, r2, r3
 80101a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	3350      	adds	r3, #80	; 0x50
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff fa52 	bl	800f658 <pvPortMalloc>
 80101b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00f      	beq.n	80101dc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	3350      	adds	r3, #80	; 0x50
 80101c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101ca:	79fa      	ldrb	r2, [r7, #7]
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4613      	mov	r3, r2
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	68b9      	ldr	r1, [r7, #8]
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f000 f805 	bl	80101e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80101dc:	69bb      	ldr	r3, [r7, #24]
	}
 80101de:	4618      	mov	r0, r3
 80101e0:	3720      	adds	r7, #32
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b084      	sub	sp, #16
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	60f8      	str	r0, [r7, #12]
 80101ee:	60b9      	str	r1, [r7, #8]
 80101f0:	607a      	str	r2, [r7, #4]
 80101f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d103      	bne.n	8010202 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	69ba      	ldr	r2, [r7, #24]
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	e002      	b.n	8010208 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010214:	2101      	movs	r1, #1
 8010216:	69b8      	ldr	r0, [r7, #24]
 8010218:	f7ff fece 	bl	800ffb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010224:	bf00      	nop
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00e      	beq.n	8010258 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2200      	movs	r2, #0
 801023e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801024c:	2300      	movs	r3, #0
 801024e:	2200      	movs	r2, #0
 8010250:	2100      	movs	r1, #0
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f906 	bl	8010464 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801026a:	2301      	movs	r3, #1
 801026c:	617b      	str	r3, [r7, #20]
 801026e:	2300      	movs	r3, #0
 8010270:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	461a      	mov	r2, r3
 8010276:	6939      	ldr	r1, [r7, #16]
 8010278:	6978      	ldr	r0, [r7, #20]
 801027a:	f7ff ff77 	bl	801016c <xQueueGenericCreate>
 801027e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7ff ffd3 	bl	801022c <prvInitialiseMutex>

		return pxNewQueue;
 8010286:	68fb      	ldr	r3, [r7, #12]
	}
 8010288:	4618      	mov	r0, r3
 801028a:	3718      	adds	r7, #24
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af02      	add	r7, sp, #8
 8010296:	4603      	mov	r3, r0
 8010298:	6039      	str	r1, [r7, #0]
 801029a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801029c:	2301      	movs	r3, #1
 801029e:	617b      	str	r3, [r7, #20]
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2200      	movs	r2, #0
 80102ac:	6939      	ldr	r1, [r7, #16]
 80102ae:	6978      	ldr	r0, [r7, #20]
 80102b0:	f7ff feea 	bl	8010088 <xQueueGenericCreateStatic>
 80102b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f7ff ffb8 	bl	801022c <prvInitialiseMutex>

		return pxNewQueue;
 80102bc:	68fb      	ldr	r3, [r7, #12]
	}
 80102be:	4618      	mov	r0, r3
 80102c0:	3718      	adds	r7, #24
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80102c6:	b590      	push	{r4, r7, lr}
 80102c8:	b087      	sub	sp, #28
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d109      	bne.n	80102ec <xQueueGiveMutexRecursive+0x26>
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	60fb      	str	r3, [r7, #12]
 80102ea:	e7fe      	b.n	80102ea <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	685c      	ldr	r4, [r3, #4]
 80102f0:	f001 fe34 	bl	8011f5c <xTaskGetCurrentTaskHandle>
 80102f4:	4603      	mov	r3, r0
 80102f6:	429c      	cmp	r4, r3
 80102f8:	d111      	bne.n	801031e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	1e5a      	subs	r2, r3, #1
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d105      	bne.n	8010318 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801030c:	2300      	movs	r3, #0
 801030e:	2200      	movs	r2, #0
 8010310:	2100      	movs	r1, #0
 8010312:	6938      	ldr	r0, [r7, #16]
 8010314:	f000 f8a6 	bl	8010464 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010318:	2301      	movs	r3, #1
 801031a:	617b      	str	r3, [r7, #20]
 801031c:	e001      	b.n	8010322 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801031e:	2300      	movs	r3, #0
 8010320:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010322:	697b      	ldr	r3, [r7, #20]
	}
 8010324:	4618      	mov	r0, r3
 8010326:	371c      	adds	r7, #28
 8010328:	46bd      	mov	sp, r7
 801032a:	bd90      	pop	{r4, r7, pc}

0801032c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801032c:	b590      	push	{r4, r7, lr}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d109      	bne.n	8010354 <xQueueTakeMutexRecursive+0x28>
 8010340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	e7fe      	b.n	8010352 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	685c      	ldr	r4, [r3, #4]
 8010358:	f001 fe00 	bl	8011f5c <xTaskGetCurrentTaskHandle>
 801035c:	4603      	mov	r3, r0
 801035e:	429c      	cmp	r4, r3
 8010360:	d107      	bne.n	8010372 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	1c5a      	adds	r2, r3, #1
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801036c:	2301      	movs	r3, #1
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	e00c      	b.n	801038c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010372:	6839      	ldr	r1, [r7, #0]
 8010374:	6938      	ldr	r0, [r7, #16]
 8010376:	f000 fb69 	bl	8010a4c <xQueueSemaphoreTake>
 801037a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d004      	beq.n	801038c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801038c:	697b      	ldr	r3, [r7, #20]
	}
 801038e:	4618      	mov	r0, r3
 8010390:	371c      	adds	r7, #28
 8010392:	46bd      	mov	sp, r7
 8010394:	bd90      	pop	{r4, r7, pc}

08010396 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010396:	b580      	push	{r7, lr}
 8010398:	b08a      	sub	sp, #40	; 0x28
 801039a:	af02      	add	r7, sp, #8
 801039c:	60f8      	str	r0, [r7, #12]
 801039e:	60b9      	str	r1, [r7, #8]
 80103a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d109      	bne.n	80103bc <xQueueCreateCountingSemaphoreStatic+0x26>
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	61bb      	str	r3, [r7, #24]
 80103ba:	e7fe      	b.n	80103ba <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d909      	bls.n	80103d8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	617b      	str	r3, [r7, #20]
 80103d6:	e7fe      	b.n	80103d6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80103d8:	2302      	movs	r3, #2
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	2100      	movs	r1, #0
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f7ff fe50 	bl	8010088 <xQueueGenericCreateStatic>
 80103e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80103f6:	69fb      	ldr	r3, [r7, #28]
	}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d109      	bne.n	8010424 <xQueueCreateCountingSemaphore+0x24>
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	613b      	str	r3, [r7, #16]
 8010422:	e7fe      	b.n	8010422 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	429a      	cmp	r2, r3
 801042a:	d909      	bls.n	8010440 <xQueueCreateCountingSemaphore+0x40>
 801042c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	60fb      	str	r3, [r7, #12]
 801043e:	e7fe      	b.n	801043e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010440:	2202      	movs	r2, #2
 8010442:	2100      	movs	r1, #0
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff fe91 	bl	801016c <xQueueGenericCreate>
 801044a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d002      	beq.n	8010458 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	683a      	ldr	r2, [r7, #0]
 8010456:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010458:	697b      	ldr	r3, [r7, #20]
	}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
	...

08010464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b08e      	sub	sp, #56	; 0x38
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	607a      	str	r2, [r7, #4]
 8010470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010472:	2300      	movs	r3, #0
 8010474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	2b00      	cmp	r3, #0
 801047e:	d109      	bne.n	8010494 <xQueueGenericSend+0x30>
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	62bb      	str	r3, [r7, #40]	; 0x28
 8010492:	e7fe      	b.n	8010492 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d103      	bne.n	80104a2 <xQueueGenericSend+0x3e>
 801049a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <xQueueGenericSend+0x42>
 80104a2:	2301      	movs	r3, #1
 80104a4:	e000      	b.n	80104a8 <xQueueGenericSend+0x44>
 80104a6:	2300      	movs	r3, #0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d109      	bne.n	80104c0 <xQueueGenericSend+0x5c>
 80104ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b0:	f383 8811 	msr	BASEPRI, r3
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	627b      	str	r3, [r7, #36]	; 0x24
 80104be:	e7fe      	b.n	80104be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d103      	bne.n	80104ce <xQueueGenericSend+0x6a>
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d101      	bne.n	80104d2 <xQueueGenericSend+0x6e>
 80104ce:	2301      	movs	r3, #1
 80104d0:	e000      	b.n	80104d4 <xQueueGenericSend+0x70>
 80104d2:	2300      	movs	r3, #0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d109      	bne.n	80104ec <xQueueGenericSend+0x88>
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	623b      	str	r3, [r7, #32]
 80104ea:	e7fe      	b.n	80104ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104ec:	f001 fd46 	bl	8011f7c <xTaskGetSchedulerState>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d102      	bne.n	80104fc <xQueueGenericSend+0x98>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d101      	bne.n	8010500 <xQueueGenericSend+0x9c>
 80104fc:	2301      	movs	r3, #1
 80104fe:	e000      	b.n	8010502 <xQueueGenericSend+0x9e>
 8010500:	2300      	movs	r3, #0
 8010502:	2b00      	cmp	r3, #0
 8010504:	d109      	bne.n	801051a <xQueueGenericSend+0xb6>
 8010506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050a:	f383 8811 	msr	BASEPRI, r3
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	e7fe      	b.n	8010518 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801051a:	f7ff fc57 	bl	800fdcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010526:	429a      	cmp	r2, r3
 8010528:	d302      	bcc.n	8010530 <xQueueGenericSend+0xcc>
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d129      	bne.n	8010584 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	68b9      	ldr	r1, [r7, #8]
 8010534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010536:	f000 fc80 	bl	8010e3a <prvCopyDataToQueue>
 801053a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010540:	2b00      	cmp	r3, #0
 8010542:	d010      	beq.n	8010566 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010546:	3324      	adds	r3, #36	; 0x24
 8010548:	4618      	mov	r0, r3
 801054a:	f001 faf5 	bl	8011b38 <xTaskRemoveFromEventList>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d013      	beq.n	801057c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010554:	4b3f      	ldr	r3, [pc, #252]	; (8010654 <xQueueGenericSend+0x1f0>)
 8010556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	f3bf 8f4f 	dsb	sy
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	e00a      	b.n	801057c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	2b00      	cmp	r3, #0
 801056a:	d007      	beq.n	801057c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801056c:	4b39      	ldr	r3, [pc, #228]	; (8010654 <xQueueGenericSend+0x1f0>)
 801056e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801057c:	f7ff fc54 	bl	800fe28 <vPortExitCritical>
				return pdPASS;
 8010580:	2301      	movs	r3, #1
 8010582:	e063      	b.n	801064c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d103      	bne.n	8010592 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801058a:	f7ff fc4d 	bl	800fe28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801058e:	2300      	movs	r3, #0
 8010590:	e05c      	b.n	801064c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010598:	f107 0314 	add.w	r3, r7, #20
 801059c:	4618      	mov	r0, r3
 801059e:	f001 fb2f 	bl	8011c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105a2:	2301      	movs	r3, #1
 80105a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105a6:	f7ff fc3f 	bl	800fe28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105aa:	f001 f811 	bl	80115d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105ae:	f7ff fc0d 	bl	800fdcc <vPortEnterCritical>
 80105b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105b8:	b25b      	sxtb	r3, r3
 80105ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105be:	d103      	bne.n	80105c8 <xQueueGenericSend+0x164>
 80105c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c2:	2200      	movs	r2, #0
 80105c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105ce:	b25b      	sxtb	r3, r3
 80105d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d4:	d103      	bne.n	80105de <xQueueGenericSend+0x17a>
 80105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105de:	f7ff fc23 	bl	800fe28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105e2:	1d3a      	adds	r2, r7, #4
 80105e4:	f107 0314 	add.w	r3, r7, #20
 80105e8:	4611      	mov	r1, r2
 80105ea:	4618      	mov	r0, r3
 80105ec:	f001 fb1e 	bl	8011c2c <xTaskCheckForTimeOut>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d124      	bne.n	8010640 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80105f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105f8:	f000 fd17 	bl	801102a <prvIsQueueFull>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d018      	beq.n	8010634 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	3310      	adds	r3, #16
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f001 fa46 	bl	8011a9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010612:	f000 fca2 	bl	8010f5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010616:	f001 f821 	bl	801165c <xTaskResumeAll>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	f47f af7c 	bne.w	801051a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010622:	4b0c      	ldr	r3, [pc, #48]	; (8010654 <xQueueGenericSend+0x1f0>)
 8010624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	e772      	b.n	801051a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010636:	f000 fc90 	bl	8010f5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801063a:	f001 f80f 	bl	801165c <xTaskResumeAll>
 801063e:	e76c      	b.n	801051a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010642:	f000 fc8a 	bl	8010f5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010646:	f001 f809 	bl	801165c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801064a:	2300      	movs	r3, #0
		}
	}
}
 801064c:	4618      	mov	r0, r3
 801064e:	3738      	adds	r7, #56	; 0x38
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08e      	sub	sp, #56	; 0x38
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066c:	2b00      	cmp	r3, #0
 801066e:	d109      	bne.n	8010684 <xQueueGenericSendFromISR+0x2c>
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	627b      	str	r3, [r7, #36]	; 0x24
 8010682:	e7fe      	b.n	8010682 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d103      	bne.n	8010692 <xQueueGenericSendFromISR+0x3a>
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801068e:	2b00      	cmp	r3, #0
 8010690:	d101      	bne.n	8010696 <xQueueGenericSendFromISR+0x3e>
 8010692:	2301      	movs	r3, #1
 8010694:	e000      	b.n	8010698 <xQueueGenericSendFromISR+0x40>
 8010696:	2300      	movs	r3, #0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <xQueueGenericSendFromISR+0x58>
 801069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	623b      	str	r3, [r7, #32]
 80106ae:	e7fe      	b.n	80106ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d103      	bne.n	80106be <xQueueGenericSendFromISR+0x66>
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d101      	bne.n	80106c2 <xQueueGenericSendFromISR+0x6a>
 80106be:	2301      	movs	r3, #1
 80106c0:	e000      	b.n	80106c4 <xQueueGenericSendFromISR+0x6c>
 80106c2:	2300      	movs	r3, #0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d109      	bne.n	80106dc <xQueueGenericSendFromISR+0x84>
 80106c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106cc:	f383 8811 	msr	BASEPRI, r3
 80106d0:	f3bf 8f6f 	isb	sy
 80106d4:	f3bf 8f4f 	dsb	sy
 80106d8:	61fb      	str	r3, [r7, #28]
 80106da:	e7fe      	b.n	80106da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106dc:	f7ff fc2e 	bl	800ff3c <vPortValidateInterruptPriority>
	__asm volatile
 80106e0:	f3ef 8211 	mrs	r2, BASEPRI
 80106e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e8:	f383 8811 	msr	BASEPRI, r3
 80106ec:	f3bf 8f6f 	isb	sy
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	61ba      	str	r2, [r7, #24]
 80106f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80106f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010704:	429a      	cmp	r2, r3
 8010706:	d302      	bcc.n	801070e <xQueueGenericSendFromISR+0xb6>
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d12c      	bne.n	8010768 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	68b9      	ldr	r1, [r7, #8]
 801071c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801071e:	f000 fb8c 	bl	8010e3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010722:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072a:	d112      	bne.n	8010752 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010730:	2b00      	cmp	r3, #0
 8010732:	d016      	beq.n	8010762 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010736:	3324      	adds	r3, #36	; 0x24
 8010738:	4618      	mov	r0, r3
 801073a:	f001 f9fd 	bl	8011b38 <xTaskRemoveFromEventList>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00e      	beq.n	8010762 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00b      	beq.n	8010762 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2201      	movs	r2, #1
 801074e:	601a      	str	r2, [r3, #0]
 8010750:	e007      	b.n	8010762 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010756:	3301      	adds	r3, #1
 8010758:	b2db      	uxtb	r3, r3
 801075a:	b25a      	sxtb	r2, r3
 801075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010762:	2301      	movs	r3, #1
 8010764:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010766:	e001      	b.n	801076c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010768:	2300      	movs	r3, #0
 801076a:	637b      	str	r3, [r7, #52]	; 0x34
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010778:	4618      	mov	r0, r3
 801077a:	3738      	adds	r7, #56	; 0x38
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b08e      	sub	sp, #56	; 0x38
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010798:	f383 8811 	msr	BASEPRI, r3
 801079c:	f3bf 8f6f 	isb	sy
 80107a0:	f3bf 8f4f 	dsb	sy
 80107a4:	623b      	str	r3, [r7, #32]
 80107a6:	e7fe      	b.n	80107a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d009      	beq.n	80107c4 <xQueueGiveFromISR+0x44>
 80107b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b4:	f383 8811 	msr	BASEPRI, r3
 80107b8:	f3bf 8f6f 	isb	sy
 80107bc:	f3bf 8f4f 	dsb	sy
 80107c0:	61fb      	str	r3, [r7, #28]
 80107c2:	e7fe      	b.n	80107c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d103      	bne.n	80107d4 <xQueueGiveFromISR+0x54>
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d101      	bne.n	80107d8 <xQueueGiveFromISR+0x58>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e000      	b.n	80107da <xQueueGiveFromISR+0x5a>
 80107d8:	2300      	movs	r3, #0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d109      	bne.n	80107f2 <xQueueGiveFromISR+0x72>
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	61bb      	str	r3, [r7, #24]
 80107f0:	e7fe      	b.n	80107f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107f2:	f7ff fba3 	bl	800ff3c <vPortValidateInterruptPriority>
	__asm volatile
 80107f6:	f3ef 8211 	mrs	r2, BASEPRI
 80107fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	617a      	str	r2, [r7, #20]
 801080c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801080e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801081c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801081e:	429a      	cmp	r2, r3
 8010820:	d22b      	bcs.n	801087a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083c:	d112      	bne.n	8010864 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010842:	2b00      	cmp	r3, #0
 8010844:	d016      	beq.n	8010874 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	3324      	adds	r3, #36	; 0x24
 801084a:	4618      	mov	r0, r3
 801084c:	f001 f974 	bl	8011b38 <xTaskRemoveFromEventList>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00e      	beq.n	8010874 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00b      	beq.n	8010874 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2201      	movs	r2, #1
 8010860:	601a      	str	r2, [r3, #0]
 8010862:	e007      	b.n	8010874 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010868:	3301      	adds	r3, #1
 801086a:	b2db      	uxtb	r3, r3
 801086c:	b25a      	sxtb	r2, r3
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010874:	2301      	movs	r3, #1
 8010876:	637b      	str	r3, [r7, #52]	; 0x34
 8010878:	e001      	b.n	801087e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801087a:	2300      	movs	r3, #0
 801087c:	637b      	str	r3, [r7, #52]	; 0x34
 801087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010880:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801088a:	4618      	mov	r0, r3
 801088c:	3738      	adds	r7, #56	; 0x38
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
	...

08010894 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b08c      	sub	sp, #48	; 0x30
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80108a0:	2300      	movs	r3, #0
 80108a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80108a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d109      	bne.n	80108c2 <xQueueReceive+0x2e>
	__asm volatile
 80108ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	623b      	str	r3, [r7, #32]
 80108c0:	e7fe      	b.n	80108c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d103      	bne.n	80108d0 <xQueueReceive+0x3c>
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <xQueueReceive+0x40>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <xQueueReceive+0x42>
 80108d4:	2300      	movs	r3, #0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d109      	bne.n	80108ee <xQueueReceive+0x5a>
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	61fb      	str	r3, [r7, #28]
 80108ec:	e7fe      	b.n	80108ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108ee:	f001 fb45 	bl	8011f7c <xTaskGetSchedulerState>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <xQueueReceive+0x6a>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <xQueueReceive+0x6e>
 80108fe:	2301      	movs	r3, #1
 8010900:	e000      	b.n	8010904 <xQueueReceive+0x70>
 8010902:	2300      	movs	r3, #0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d109      	bne.n	801091c <xQueueReceive+0x88>
 8010908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090c:	f383 8811 	msr	BASEPRI, r3
 8010910:	f3bf 8f6f 	isb	sy
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	61bb      	str	r3, [r7, #24]
 801091a:	e7fe      	b.n	801091a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801091c:	f7ff fa56 	bl	800fdcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010924:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	2b00      	cmp	r3, #0
 801092a:	d01f      	beq.n	801096c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801092c:	68b9      	ldr	r1, [r7, #8]
 801092e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010930:	f000 faed 	bl	8010f0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	1e5a      	subs	r2, r3, #1
 8010938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	691b      	ldr	r3, [r3, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00f      	beq.n	8010964 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	3310      	adds	r3, #16
 8010948:	4618      	mov	r0, r3
 801094a:	f001 f8f5 	bl	8011b38 <xTaskRemoveFromEventList>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d007      	beq.n	8010964 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010954:	4b3c      	ldr	r3, [pc, #240]	; (8010a48 <xQueueReceive+0x1b4>)
 8010956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010964:	f7ff fa60 	bl	800fe28 <vPortExitCritical>
				return pdPASS;
 8010968:	2301      	movs	r3, #1
 801096a:	e069      	b.n	8010a40 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d103      	bne.n	801097a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010972:	f7ff fa59 	bl	800fe28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010976:	2300      	movs	r3, #0
 8010978:	e062      	b.n	8010a40 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097c:	2b00      	cmp	r3, #0
 801097e:	d106      	bne.n	801098e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010980:	f107 0310 	add.w	r3, r7, #16
 8010984:	4618      	mov	r0, r3
 8010986:	f001 f93b 	bl	8011c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801098a:	2301      	movs	r3, #1
 801098c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801098e:	f7ff fa4b 	bl	800fe28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010992:	f000 fe1d 	bl	80115d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010996:	f7ff fa19 	bl	800fdcc <vPortEnterCritical>
 801099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109a0:	b25b      	sxtb	r3, r3
 80109a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a6:	d103      	bne.n	80109b0 <xQueueReceive+0x11c>
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109b6:	b25b      	sxtb	r3, r3
 80109b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109bc:	d103      	bne.n	80109c6 <xQueueReceive+0x132>
 80109be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c0:	2200      	movs	r2, #0
 80109c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109c6:	f7ff fa2f 	bl	800fe28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109ca:	1d3a      	adds	r2, r7, #4
 80109cc:	f107 0310 	add.w	r3, r7, #16
 80109d0:	4611      	mov	r1, r2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f001 f92a 	bl	8011c2c <xTaskCheckForTimeOut>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d123      	bne.n	8010a26 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109e0:	f000 fb0d 	bl	8010ffe <prvIsQueueEmpty>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d017      	beq.n	8010a1a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80109ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ec:	3324      	adds	r3, #36	; 0x24
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f001 f852 	bl	8011a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80109f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109fa:	f000 faae 	bl	8010f5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80109fe:	f000 fe2d 	bl	801165c <xTaskResumeAll>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d189      	bne.n	801091c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010a08:	4b0f      	ldr	r3, [pc, #60]	; (8010a48 <xQueueReceive+0x1b4>)
 8010a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	e780      	b.n	801091c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a1c:	f000 fa9d 	bl	8010f5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a20:	f000 fe1c 	bl	801165c <xTaskResumeAll>
 8010a24:	e77a      	b.n	801091c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a28:	f000 fa97 	bl	8010f5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a2c:	f000 fe16 	bl	801165c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a32:	f000 fae4 	bl	8010ffe <prvIsQueueEmpty>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f43f af6f 	beq.w	801091c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3730      	adds	r7, #48	; 0x30
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	e000ed04 	.word	0xe000ed04

08010a4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b08e      	sub	sp, #56	; 0x38
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a56:	2300      	movs	r3, #0
 8010a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d109      	bne.n	8010a7c <xQueueSemaphoreTake+0x30>
 8010a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a6c:	f383 8811 	msr	BASEPRI, r3
 8010a70:	f3bf 8f6f 	isb	sy
 8010a74:	f3bf 8f4f 	dsb	sy
 8010a78:	623b      	str	r3, [r7, #32]
 8010a7a:	e7fe      	b.n	8010a7a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <xQueueSemaphoreTake+0x4c>
 8010a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a88:	f383 8811 	msr	BASEPRI, r3
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	61fb      	str	r3, [r7, #28]
 8010a96:	e7fe      	b.n	8010a96 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a98:	f001 fa70 	bl	8011f7c <xTaskGetSchedulerState>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <xQueueSemaphoreTake+0x5c>
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d101      	bne.n	8010aac <xQueueSemaphoreTake+0x60>
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e000      	b.n	8010aae <xQueueSemaphoreTake+0x62>
 8010aac:	2300      	movs	r3, #0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d109      	bne.n	8010ac6 <xQueueSemaphoreTake+0x7a>
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	61bb      	str	r3, [r7, #24]
 8010ac4:	e7fe      	b.n	8010ac4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ac6:	f7ff f981 	bl	800fdcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ace:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d024      	beq.n	8010b20 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad8:	1e5a      	subs	r2, r3, #1
 8010ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010adc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d104      	bne.n	8010af0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010ae6:	f001 fbc5 	bl	8012274 <pvTaskIncrementMutexHeldCount>
 8010aea:	4602      	mov	r2, r0
 8010aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00f      	beq.n	8010b18 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afa:	3310      	adds	r3, #16
 8010afc:	4618      	mov	r0, r3
 8010afe:	f001 f81b 	bl	8011b38 <xTaskRemoveFromEventList>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d007      	beq.n	8010b18 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b08:	4b53      	ldr	r3, [pc, #332]	; (8010c58 <xQueueSemaphoreTake+0x20c>)
 8010b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b18:	f7ff f986 	bl	800fe28 <vPortExitCritical>
				return pdPASS;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e096      	b.n	8010c4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d110      	bne.n	8010b48 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d009      	beq.n	8010b40 <xQueueSemaphoreTake+0xf4>
 8010b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	617b      	str	r3, [r7, #20]
 8010b3e:	e7fe      	b.n	8010b3e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010b40:	f7ff f972 	bl	800fe28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b44:	2300      	movs	r3, #0
 8010b46:	e082      	b.n	8010c4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d106      	bne.n	8010b5c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	4618      	mov	r0, r3
 8010b54:	f001 f854 	bl	8011c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b5c:	f7ff f964 	bl	800fe28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b60:	f000 fd36 	bl	80115d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b64:	f7ff f932 	bl	800fdcc <vPortEnterCritical>
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b6e:	b25b      	sxtb	r3, r3
 8010b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b74:	d103      	bne.n	8010b7e <xQueueSemaphoreTake+0x132>
 8010b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b84:	b25b      	sxtb	r3, r3
 8010b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b8a:	d103      	bne.n	8010b94 <xQueueSemaphoreTake+0x148>
 8010b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b94:	f7ff f948 	bl	800fe28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b98:	463a      	mov	r2, r7
 8010b9a:	f107 030c 	add.w	r3, r7, #12
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 f843 	bl	8011c2c <xTaskCheckForTimeOut>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d132      	bne.n	8010c12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bae:	f000 fa26 	bl	8010ffe <prvIsQueueEmpty>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d026      	beq.n	8010c06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d109      	bne.n	8010bd4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010bc0:	f7ff f904 	bl	800fdcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f001 f9f5 	bl	8011fb8 <xTaskPriorityInherit>
 8010bce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010bd0:	f7ff f92a 	bl	800fe28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd6:	3324      	adds	r3, #36	; 0x24
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	4611      	mov	r1, r2
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 ff5d 	bl	8011a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010be4:	f000 f9b9 	bl	8010f5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010be8:	f000 fd38 	bl	801165c <xTaskResumeAll>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f47f af69 	bne.w	8010ac6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010bf4:	4b18      	ldr	r3, [pc, #96]	; (8010c58 <xQueueSemaphoreTake+0x20c>)
 8010bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bfa:	601a      	str	r2, [r3, #0]
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	e75f      	b.n	8010ac6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c08:	f000 f9a7 	bl	8010f5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c0c:	f000 fd26 	bl	801165c <xTaskResumeAll>
 8010c10:	e759      	b.n	8010ac6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c14:	f000 f9a1 	bl	8010f5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c18:	f000 fd20 	bl	801165c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c1e:	f000 f9ee 	bl	8010ffe <prvIsQueueEmpty>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f43f af4e 	beq.w	8010ac6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00d      	beq.n	8010c4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010c30:	f7ff f8cc 	bl	800fdcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c36:	f000 f8e8 	bl	8010e0a <prvGetDisinheritPriorityAfterTimeout>
 8010c3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c42:	4618      	mov	r0, r3
 8010c44:	f001 fa92 	bl	801216c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010c48:	f7ff f8ee 	bl	800fe28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3738      	adds	r7, #56	; 0x38
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	e000ed04 	.word	0xe000ed04

08010c5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b08e      	sub	sp, #56	; 0x38
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d109      	bne.n	8010c86 <xQueueReceiveFromISR+0x2a>
 8010c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c76:	f383 8811 	msr	BASEPRI, r3
 8010c7a:	f3bf 8f6f 	isb	sy
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	623b      	str	r3, [r7, #32]
 8010c84:	e7fe      	b.n	8010c84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d103      	bne.n	8010c94 <xQueueReceiveFromISR+0x38>
 8010c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d101      	bne.n	8010c98 <xQueueReceiveFromISR+0x3c>
 8010c94:	2301      	movs	r3, #1
 8010c96:	e000      	b.n	8010c9a <xQueueReceiveFromISR+0x3e>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d109      	bne.n	8010cb2 <xQueueReceiveFromISR+0x56>
 8010c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	61fb      	str	r3, [r7, #28]
 8010cb0:	e7fe      	b.n	8010cb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cb2:	f7ff f943 	bl	800ff3c <vPortValidateInterruptPriority>
	__asm volatile
 8010cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8010cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	61ba      	str	r2, [r7, #24]
 8010ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d02f      	beq.n	8010d3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ce8:	68b9      	ldr	r1, [r7, #8]
 8010cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cec:	f000 f90f 	bl	8010f0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	1e5a      	subs	r2, r3, #1
 8010cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d00:	d112      	bne.n	8010d28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d016      	beq.n	8010d38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	3310      	adds	r3, #16
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 ff12 	bl	8011b38 <xTaskRemoveFromEventList>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00e      	beq.n	8010d38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00b      	beq.n	8010d38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	601a      	str	r2, [r3, #0]
 8010d26:	e007      	b.n	8010d38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	b25a      	sxtb	r2, r3
 8010d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d3c:	e001      	b.n	8010d42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	637b      	str	r3, [r7, #52]	; 0x34
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3738      	adds	r7, #56	; 0x38
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b084      	sub	sp, #16
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d109      	bne.n	8010d78 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8010d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	60bb      	str	r3, [r7, #8]
 8010d76:	e7fe      	b.n	8010d76 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8010d78:	f7ff f828 	bl	800fdcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d80:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010d82:	f7ff f851 	bl	800fe28 <vPortExitCritical>

	return uxReturn;
 8010d86:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3710      	adds	r7, #16
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d109      	bne.n	8010db2 <uxQueueMessagesWaitingFromISR+0x22>
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	60bb      	str	r3, [r7, #8]
 8010db0:	e7fe      	b.n	8010db0 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db6:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8010db8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3714      	adds	r7, #20
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b084      	sub	sp, #16
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <vQueueDelete+0x26>
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	60bb      	str	r3, [r7, #8]
 8010dea:	e7fe      	b.n	8010dea <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f000 f95d 	bl	80110ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f7fe fcf1 	bl	800f7e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010e02:	bf00      	nop
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010e0a:	b480      	push	{r7}
 8010e0c:	b085      	sub	sp, #20
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d006      	beq.n	8010e28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010e24:	60fb      	str	r3, [r7, #12]
 8010e26:	e001      	b.n	8010e2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
	}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b086      	sub	sp, #24
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	60f8      	str	r0, [r7, #12]
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e46:	2300      	movs	r3, #0
 8010e48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d10d      	bne.n	8010e74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d14d      	bne.n	8010efc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f001 f915 	bl	8012094 <xTaskPriorityDisinherit>
 8010e6a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	605a      	str	r2, [r3, #4]
 8010e72:	e043      	b.n	8010efc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d119      	bne.n	8010eae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	6898      	ldr	r0, [r3, #8]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e82:	461a      	mov	r2, r3
 8010e84:	68b9      	ldr	r1, [r7, #8]
 8010e86:	f005 f927 	bl	80160d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	689a      	ldr	r2, [r3, #8]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e92:	441a      	add	r2, r3
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	689a      	ldr	r2, [r3, #8]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d32b      	bcc.n	8010efc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	609a      	str	r2, [r3, #8]
 8010eac:	e026      	b.n	8010efc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	68d8      	ldr	r0, [r3, #12]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	68b9      	ldr	r1, [r7, #8]
 8010eba:	f005 f90d 	bl	80160d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	68da      	ldr	r2, [r3, #12]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec6:	425b      	negs	r3, r3
 8010ec8:	441a      	add	r2, r3
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	68da      	ldr	r2, [r3, #12]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d207      	bcs.n	8010eea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	425b      	negs	r3, r3
 8010ee4:	441a      	add	r2, r3
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b02      	cmp	r3, #2
 8010eee:	d105      	bne.n	8010efc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d002      	beq.n	8010efc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	3b01      	subs	r3, #1
 8010efa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	1c5a      	adds	r2, r3, #1
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010f04:	697b      	ldr	r3, [r7, #20]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3718      	adds	r7, #24
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b082      	sub	sp, #8
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d018      	beq.n	8010f52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	68da      	ldr	r2, [r3, #12]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f28:	441a      	add	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d303      	bcc.n	8010f42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	68d9      	ldr	r1, [r3, #12]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	6838      	ldr	r0, [r7, #0]
 8010f4e:	f005 f8c3 	bl	80160d8 <memcpy>
	}
}
 8010f52:	bf00      	nop
 8010f54:	3708      	adds	r7, #8
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b084      	sub	sp, #16
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f62:	f7fe ff33 	bl	800fdcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f6e:	e011      	b.n	8010f94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d012      	beq.n	8010f9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	3324      	adds	r3, #36	; 0x24
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f000 fddb 	bl	8011b38 <xTaskRemoveFromEventList>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f88:	f000 feb0 	bl	8011cec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	3b01      	subs	r3, #1
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	dce9      	bgt.n	8010f70 <prvUnlockQueue+0x16>
 8010f9c:	e000      	b.n	8010fa0 <prvUnlockQueue+0x46>
					break;
 8010f9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	22ff      	movs	r2, #255	; 0xff
 8010fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010fa8:	f7fe ff3e 	bl	800fe28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010fac:	f7fe ff0e 	bl	800fdcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fb8:	e011      	b.n	8010fde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d012      	beq.n	8010fe8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3310      	adds	r3, #16
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f000 fdb6 	bl	8011b38 <xTaskRemoveFromEventList>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010fd2:	f000 fe8b 	bl	8011cec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010fd6:	7bbb      	ldrb	r3, [r7, #14]
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	dce9      	bgt.n	8010fba <prvUnlockQueue+0x60>
 8010fe6:	e000      	b.n	8010fea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010fe8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	22ff      	movs	r2, #255	; 0xff
 8010fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ff2:	f7fe ff19 	bl	800fe28 <vPortExitCritical>
}
 8010ff6:	bf00      	nop
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b084      	sub	sp, #16
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011006:	f7fe fee1 	bl	800fdcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801100e:	2b00      	cmp	r3, #0
 8011010:	d102      	bne.n	8011018 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011012:	2301      	movs	r3, #1
 8011014:	60fb      	str	r3, [r7, #12]
 8011016:	e001      	b.n	801101c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011018:	2300      	movs	r3, #0
 801101a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801101c:	f7fe ff04 	bl	800fe28 <vPortExitCritical>

	return xReturn;
 8011020:	68fb      	ldr	r3, [r7, #12]
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b084      	sub	sp, #16
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011032:	f7fe fecb 	bl	800fdcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801103e:	429a      	cmp	r2, r3
 8011040:	d102      	bne.n	8011048 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011042:	2301      	movs	r3, #1
 8011044:	60fb      	str	r3, [r7, #12]
 8011046:	e001      	b.n	801104c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011048:	2300      	movs	r3, #0
 801104a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801104c:	f7fe feec 	bl	800fe28 <vPortExitCritical>

	return xReturn;
 8011050:	68fb      	ldr	r3, [r7, #12]
}
 8011052:	4618      	mov	r0, r3
 8011054:	3710      	adds	r7, #16
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
	...

0801105c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801105c:	b480      	push	{r7}
 801105e:	b085      	sub	sp, #20
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011066:	2300      	movs	r3, #0
 8011068:	60fb      	str	r3, [r7, #12]
 801106a:	e014      	b.n	8011096 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801106c:	4a0e      	ldr	r2, [pc, #56]	; (80110a8 <vQueueAddToRegistry+0x4c>)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10b      	bne.n	8011090 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011078:	490b      	ldr	r1, [pc, #44]	; (80110a8 <vQueueAddToRegistry+0x4c>)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	683a      	ldr	r2, [r7, #0]
 801107e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011082:	4a09      	ldr	r2, [pc, #36]	; (80110a8 <vQueueAddToRegistry+0x4c>)
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	4413      	add	r3, r2
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801108e:	e005      	b.n	801109c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	3301      	adds	r3, #1
 8011094:	60fb      	str	r3, [r7, #12]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2b0b      	cmp	r3, #11
 801109a:	d9e7      	bls.n	801106c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801109c:	bf00      	nop
 801109e:	3714      	adds	r7, #20
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	20028640 	.word	0x20028640

080110ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110b4:	2300      	movs	r3, #0
 80110b6:	60fb      	str	r3, [r7, #12]
 80110b8:	e016      	b.n	80110e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80110ba:	4a10      	ldr	r2, [pc, #64]	; (80110fc <vQueueUnregisterQueue+0x50>)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	4413      	add	r3, r2
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d10b      	bne.n	80110e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80110ca:	4a0c      	ldr	r2, [pc, #48]	; (80110fc <vQueueUnregisterQueue+0x50>)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2100      	movs	r1, #0
 80110d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80110d4:	4a09      	ldr	r2, [pc, #36]	; (80110fc <vQueueUnregisterQueue+0x50>)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	4413      	add	r3, r2
 80110dc:	2200      	movs	r2, #0
 80110de:	605a      	str	r2, [r3, #4]
				break;
 80110e0:	e005      	b.n	80110ee <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3301      	adds	r3, #1
 80110e6:	60fb      	str	r3, [r7, #12]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b0b      	cmp	r3, #11
 80110ec:	d9e5      	bls.n	80110ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80110ee:	bf00      	nop
 80110f0:	3714      	adds	r7, #20
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	20028640 	.word	0x20028640

08011100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011110:	f7fe fe5c 	bl	800fdcc <vPortEnterCritical>
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801111a:	b25b      	sxtb	r3, r3
 801111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011120:	d103      	bne.n	801112a <vQueueWaitForMessageRestricted+0x2a>
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2200      	movs	r2, #0
 8011126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011130:	b25b      	sxtb	r3, r3
 8011132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011136:	d103      	bne.n	8011140 <vQueueWaitForMessageRestricted+0x40>
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011140:	f7fe fe72 	bl	800fe28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011148:	2b00      	cmp	r3, #0
 801114a:	d106      	bne.n	801115a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	3324      	adds	r3, #36	; 0x24
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	68b9      	ldr	r1, [r7, #8]
 8011154:	4618      	mov	r0, r3
 8011156:	f000 fcc5 	bl	8011ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801115a:	6978      	ldr	r0, [r7, #20]
 801115c:	f7ff fefd 	bl	8010f5a <prvUnlockQueue>
	}
 8011160:	bf00      	nop
 8011162:	3718      	adds	r7, #24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011168:	b580      	push	{r7, lr}
 801116a:	b08e      	sub	sp, #56	; 0x38
 801116c:	af04      	add	r7, sp, #16
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011178:	2b00      	cmp	r3, #0
 801117a:	d109      	bne.n	8011190 <xTaskCreateStatic+0x28>
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	623b      	str	r3, [r7, #32]
 801118e:	e7fe      	b.n	801118e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011192:	2b00      	cmp	r3, #0
 8011194:	d109      	bne.n	80111aa <xTaskCreateStatic+0x42>
 8011196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119a:	f383 8811 	msr	BASEPRI, r3
 801119e:	f3bf 8f6f 	isb	sy
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	61fb      	str	r3, [r7, #28]
 80111a8:	e7fe      	b.n	80111a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80111aa:	2364      	movs	r3, #100	; 0x64
 80111ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	2b64      	cmp	r3, #100	; 0x64
 80111b2:	d009      	beq.n	80111c8 <xTaskCreateStatic+0x60>
 80111b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b8:	f383 8811 	msr	BASEPRI, r3
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	61bb      	str	r3, [r7, #24]
 80111c6:	e7fe      	b.n	80111c6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d01e      	beq.n	801120c <xTaskCreateStatic+0xa4>
 80111ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d01b      	beq.n	801120c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80111de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e0:	2202      	movs	r2, #2
 80111e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80111e6:	2300      	movs	r3, #0
 80111e8:	9303      	str	r3, [sp, #12]
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	9302      	str	r3, [sp, #8]
 80111ee:	f107 0314 	add.w	r3, r7, #20
 80111f2:	9301      	str	r3, [sp, #4]
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	68b9      	ldr	r1, [r7, #8]
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f000 f850 	bl	80112a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011206:	f000 f8d9 	bl	80113bc <prvAddNewTaskToReadyList>
 801120a:	e001      	b.n	8011210 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801120c:	2300      	movs	r3, #0
 801120e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011210:	697b      	ldr	r3, [r7, #20]
	}
 8011212:	4618      	mov	r0, r3
 8011214:	3728      	adds	r7, #40	; 0x28
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801121a:	b580      	push	{r7, lr}
 801121c:	b08c      	sub	sp, #48	; 0x30
 801121e:	af04      	add	r7, sp, #16
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	603b      	str	r3, [r7, #0]
 8011226:	4613      	mov	r3, r2
 8011228:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801122a:	88fb      	ldrh	r3, [r7, #6]
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4618      	mov	r0, r3
 8011230:	f7fe fa12 	bl	800f658 <pvPortMalloc>
 8011234:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00e      	beq.n	801125a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801123c:	2064      	movs	r0, #100	; 0x64
 801123e:	f7fe fa0b 	bl	800f658 <pvPortMalloc>
 8011242:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d003      	beq.n	8011252 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	631a      	str	r2, [r3, #48]	; 0x30
 8011250:	e005      	b.n	801125e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011252:	6978      	ldr	r0, [r7, #20]
 8011254:	f7fe fac6 	bl	800f7e4 <vPortFree>
 8011258:	e001      	b.n	801125e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801125a:	2300      	movs	r3, #0
 801125c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d017      	beq.n	8011294 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801126c:	88fa      	ldrh	r2, [r7, #6]
 801126e:	2300      	movs	r3, #0
 8011270:	9303      	str	r3, [sp, #12]
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	9302      	str	r3, [sp, #8]
 8011276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011278:	9301      	str	r3, [sp, #4]
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	9300      	str	r3, [sp, #0]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	68b9      	ldr	r1, [r7, #8]
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f000 f80e 	bl	80112a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011288:	69f8      	ldr	r0, [r7, #28]
 801128a:	f000 f897 	bl	80113bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801128e:	2301      	movs	r3, #1
 8011290:	61bb      	str	r3, [r7, #24]
 8011292:	e002      	b.n	801129a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011294:	f04f 33ff 	mov.w	r3, #4294967295
 8011298:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801129a:	69bb      	ldr	r3, [r7, #24]
	}
 801129c:	4618      	mov	r0, r3
 801129e:	3720      	adds	r7, #32
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b088      	sub	sp, #32
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
 80112b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	461a      	mov	r2, r3
 80112bc:	21a5      	movs	r1, #165	; 0xa5
 80112be:	f004 ff16 	bl	80160ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80112c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80112cc:	3b01      	subs	r3, #1
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4413      	add	r3, r2
 80112d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	f023 0307 	bic.w	r3, r3, #7
 80112da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	f003 0307 	and.w	r3, r3, #7
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d009      	beq.n	80112fa <prvInitialiseNewTask+0x56>
 80112e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ea:	f383 8811 	msr	BASEPRI, r3
 80112ee:	f3bf 8f6f 	isb	sy
 80112f2:	f3bf 8f4f 	dsb	sy
 80112f6:	617b      	str	r3, [r7, #20]
 80112f8:	e7fe      	b.n	80112f8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	69ba      	ldr	r2, [r7, #24]
 80112fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011300:	2300      	movs	r3, #0
 8011302:	61fb      	str	r3, [r7, #28]
 8011304:	e012      	b.n	801132c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011306:	68ba      	ldr	r2, [r7, #8]
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	4413      	add	r3, r2
 801130c:	7819      	ldrb	r1, [r3, #0]
 801130e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	4413      	add	r3, r2
 8011314:	3334      	adds	r3, #52	; 0x34
 8011316:	460a      	mov	r2, r1
 8011318:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	4413      	add	r3, r2
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d006      	beq.n	8011334 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	3301      	adds	r3, #1
 801132a:	61fb      	str	r3, [r7, #28]
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	2b0f      	cmp	r3, #15
 8011330:	d9e9      	bls.n	8011306 <prvInitialiseNewTask+0x62>
 8011332:	e000      	b.n	8011336 <prvInitialiseNewTask+0x92>
		{
			break;
 8011334:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011340:	2b37      	cmp	r3, #55	; 0x37
 8011342:	d901      	bls.n	8011348 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011344:	2337      	movs	r3, #55	; 0x37
 8011346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801134c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011352:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8011354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011356:	2200      	movs	r2, #0
 8011358:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	3304      	adds	r3, #4
 801135e:	4618      	mov	r0, r3
 8011360:	f7fe fb76 	bl	800fa50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011366:	3318      	adds	r3, #24
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe fb71 	bl	800fa50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8011384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011386:	2200      	movs	r2, #0
 8011388:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	2200      	movs	r2, #0
 801138e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011392:	2200      	movs	r2, #0
 8011394:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011398:	683a      	ldr	r2, [r7, #0]
 801139a:	68f9      	ldr	r1, [r7, #12]
 801139c:	69b8      	ldr	r0, [r7, #24]
 801139e:	f7fe fbeb 	bl	800fb78 <pxPortInitialiseStack>
 80113a2:	4602      	mov	r2, r0
 80113a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d002      	beq.n	80113b4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113b4:	bf00      	nop
 80113b6:	3720      	adds	r7, #32
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80113c4:	f7fe fd02 	bl	800fdcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80113c8:	4b2d      	ldr	r3, [pc, #180]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	3301      	adds	r3, #1
 80113ce:	4a2c      	ldr	r2, [pc, #176]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113d2:	4b2c      	ldr	r3, [pc, #176]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d109      	bne.n	80113ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80113da:	4a2a      	ldr	r2, [pc, #168]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80113e0:	4b27      	ldr	r3, [pc, #156]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d110      	bne.n	801140a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80113e8:	f000 fcf8 	bl	8011ddc <prvInitialiseTaskLists>
 80113ec:	e00d      	b.n	801140a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80113ee:	4b26      	ldr	r3, [pc, #152]	; (8011488 <prvAddNewTaskToReadyList+0xcc>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d109      	bne.n	801140a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80113f6:	4b23      	ldr	r3, [pc, #140]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	429a      	cmp	r2, r3
 8011402:	d802      	bhi.n	801140a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011404:	4a1f      	ldr	r2, [pc, #124]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801140a:	4b20      	ldr	r3, [pc, #128]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3301      	adds	r3, #1
 8011410:	4a1e      	ldr	r2, [pc, #120]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 8011412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011414:	4b1d      	ldr	r3, [pc, #116]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011420:	4b1b      	ldr	r3, [pc, #108]	; (8011490 <prvAddNewTaskToReadyList+0xd4>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	429a      	cmp	r2, r3
 8011426:	d903      	bls.n	8011430 <prvAddNewTaskToReadyList+0x74>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	4a18      	ldr	r2, [pc, #96]	; (8011490 <prvAddNewTaskToReadyList+0xd4>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011434:	4613      	mov	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4a15      	ldr	r2, [pc, #84]	; (8011494 <prvAddNewTaskToReadyList+0xd8>)
 801143e:	441a      	add	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3304      	adds	r3, #4
 8011444:	4619      	mov	r1, r3
 8011446:	4610      	mov	r0, r2
 8011448:	f7fe fb0f 	bl	800fa6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801144c:	f7fe fcec 	bl	800fe28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011450:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <prvAddNewTaskToReadyList+0xcc>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011458:	4b0a      	ldr	r3, [pc, #40]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011462:	429a      	cmp	r2, r3
 8011464:	d207      	bcs.n	8011476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011466:	4b0c      	ldr	r3, [pc, #48]	; (8011498 <prvAddNewTaskToReadyList+0xdc>)
 8011468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011476:	bf00      	nop
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	20027288 	.word	0x20027288
 8011484:	20026db4 	.word	0x20026db4
 8011488:	20027294 	.word	0x20027294
 801148c:	200272a4 	.word	0x200272a4
 8011490:	20027290 	.word	0x20027290
 8011494:	20026db8 	.word	0x20026db8
 8011498:	e000ed04 	.word	0xe000ed04

0801149c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80114a4:	2300      	movs	r3, #0
 80114a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d016      	beq.n	80114dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80114ae:	4b13      	ldr	r3, [pc, #76]	; (80114fc <vTaskDelay+0x60>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d009      	beq.n	80114ca <vTaskDelay+0x2e>
 80114b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ba:	f383 8811 	msr	BASEPRI, r3
 80114be:	f3bf 8f6f 	isb	sy
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	60bb      	str	r3, [r7, #8]
 80114c8:	e7fe      	b.n	80114c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80114ca:	f000 f881 	bl	80115d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80114ce:	2100      	movs	r1, #0
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f001 f8a9 	bl	8012628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80114d6:	f000 f8c1 	bl	801165c <xTaskResumeAll>
 80114da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d107      	bne.n	80114f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80114e2:	4b07      	ldr	r3, [pc, #28]	; (8011500 <vTaskDelay+0x64>)
 80114e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114f2:	bf00      	nop
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	200272b0 	.word	0x200272b0
 8011500:	e000ed04 	.word	0xe000ed04

08011504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08a      	sub	sp, #40	; 0x28
 8011508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801150a:	2300      	movs	r3, #0
 801150c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801150e:	2300      	movs	r3, #0
 8011510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011512:	463a      	mov	r2, r7
 8011514:	1d39      	adds	r1, r7, #4
 8011516:	f107 0308 	add.w	r3, r7, #8
 801151a:	4618      	mov	r0, r3
 801151c:	f7fe f868 	bl	800f5f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011520:	6839      	ldr	r1, [r7, #0]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	9202      	str	r2, [sp, #8]
 8011528:	9301      	str	r3, [sp, #4]
 801152a:	2300      	movs	r3, #0
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	2300      	movs	r3, #0
 8011530:	460a      	mov	r2, r1
 8011532:	4921      	ldr	r1, [pc, #132]	; (80115b8 <vTaskStartScheduler+0xb4>)
 8011534:	4821      	ldr	r0, [pc, #132]	; (80115bc <vTaskStartScheduler+0xb8>)
 8011536:	f7ff fe17 	bl	8011168 <xTaskCreateStatic>
 801153a:	4602      	mov	r2, r0
 801153c:	4b20      	ldr	r3, [pc, #128]	; (80115c0 <vTaskStartScheduler+0xbc>)
 801153e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011540:	4b1f      	ldr	r3, [pc, #124]	; (80115c0 <vTaskStartScheduler+0xbc>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011548:	2301      	movs	r3, #1
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	e001      	b.n	8011552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d102      	bne.n	801155e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011558:	f001 f8ba 	bl	80126d0 <xTimerCreateTimerTask>
 801155c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	2b01      	cmp	r3, #1
 8011562:	d117      	bne.n	8011594 <vTaskStartScheduler+0x90>
 8011564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011568:	f383 8811 	msr	BASEPRI, r3
 801156c:	f3bf 8f6f 	isb	sy
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011576:	4b13      	ldr	r3, [pc, #76]	; (80115c4 <vTaskStartScheduler+0xc0>)
 8011578:	f04f 32ff 	mov.w	r2, #4294967295
 801157c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801157e:	4b12      	ldr	r3, [pc, #72]	; (80115c8 <vTaskStartScheduler+0xc4>)
 8011580:	2201      	movs	r2, #1
 8011582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011584:	4b11      	ldr	r3, [pc, #68]	; (80115cc <vTaskStartScheduler+0xc8>)
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801158a:	f7ef fe50 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801158e:	f7fe fb7f 	bl	800fc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011592:	e00d      	b.n	80115b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159a:	d109      	bne.n	80115b0 <vTaskStartScheduler+0xac>
 801159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	60fb      	str	r3, [r7, #12]
 80115ae:	e7fe      	b.n	80115ae <vTaskStartScheduler+0xaa>
}
 80115b0:	bf00      	nop
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	08017434 	.word	0x08017434
 80115bc:	08011d05 	.word	0x08011d05
 80115c0:	200272ac 	.word	0x200272ac
 80115c4:	200272a8 	.word	0x200272a8
 80115c8:	20027294 	.word	0x20027294
 80115cc:	2002728c 	.word	0x2002728c

080115d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80115d0:	b480      	push	{r7}
 80115d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80115d4:	4b04      	ldr	r3, [pc, #16]	; (80115e8 <vTaskSuspendAll+0x18>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	3301      	adds	r3, #1
 80115da:	4a03      	ldr	r2, [pc, #12]	; (80115e8 <vTaskSuspendAll+0x18>)
 80115dc:	6013      	str	r3, [r2, #0]
}
 80115de:	bf00      	nop
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr
 80115e8:	200272b0 	.word	0x200272b0

080115ec <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80115f2:	2300      	movs	r3, #0
 80115f4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <prvGetExpectedIdleTime+0x5c>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d001      	beq.n	8011602 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80115fe:	2301      	movs	r3, #1
 8011600:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011602:	4b12      	ldr	r3, [pc, #72]	; (801164c <prvGetExpectedIdleTime+0x60>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011608:	2b00      	cmp	r3, #0
 801160a:	d002      	beq.n	8011612 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	607b      	str	r3, [r7, #4]
 8011610:	e012      	b.n	8011638 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011612:	4b0f      	ldr	r3, [pc, #60]	; (8011650 <prvGetExpectedIdleTime+0x64>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d902      	bls.n	8011620 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	607b      	str	r3, [r7, #4]
 801161e:	e00b      	b.n	8011638 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d002      	beq.n	801162c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	607b      	str	r3, [r7, #4]
 801162a:	e005      	b.n	8011638 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 801162c:	4b09      	ldr	r3, [pc, #36]	; (8011654 <prvGetExpectedIdleTime+0x68>)
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	4b09      	ldr	r3, [pc, #36]	; (8011658 <prvGetExpectedIdleTime+0x6c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011638:	687b      	ldr	r3, [r7, #4]
	}
 801163a:	4618      	mov	r0, r3
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop
 8011648:	20027290 	.word	0x20027290
 801164c:	20026db4 	.word	0x20026db4
 8011650:	20026db8 	.word	0x20026db8
 8011654:	200272a8 	.word	0x200272a8
 8011658:	2002728c 	.word	0x2002728c

0801165c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011662:	2300      	movs	r3, #0
 8011664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011666:	2300      	movs	r3, #0
 8011668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801166a:	4b41      	ldr	r3, [pc, #260]	; (8011770 <xTaskResumeAll+0x114>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d109      	bne.n	8011686 <xTaskResumeAll+0x2a>
 8011672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011676:	f383 8811 	msr	BASEPRI, r3
 801167a:	f3bf 8f6f 	isb	sy
 801167e:	f3bf 8f4f 	dsb	sy
 8011682:	603b      	str	r3, [r7, #0]
 8011684:	e7fe      	b.n	8011684 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011686:	f7fe fba1 	bl	800fdcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801168a:	4b39      	ldr	r3, [pc, #228]	; (8011770 <xTaskResumeAll+0x114>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	3b01      	subs	r3, #1
 8011690:	4a37      	ldr	r2, [pc, #220]	; (8011770 <xTaskResumeAll+0x114>)
 8011692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011694:	4b36      	ldr	r3, [pc, #216]	; (8011770 <xTaskResumeAll+0x114>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d162      	bne.n	8011762 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801169c:	4b35      	ldr	r3, [pc, #212]	; (8011774 <xTaskResumeAll+0x118>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d05e      	beq.n	8011762 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116a4:	e02f      	b.n	8011706 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80116a6:	4b34      	ldr	r3, [pc, #208]	; (8011778 <xTaskResumeAll+0x11c>)
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3318      	adds	r3, #24
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe fa36 	bl	800fb24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	3304      	adds	r3, #4
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe fa31 	bl	800fb24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c6:	4b2d      	ldr	r3, [pc, #180]	; (801177c <xTaskResumeAll+0x120>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d903      	bls.n	80116d6 <xTaskResumeAll+0x7a>
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d2:	4a2a      	ldr	r2, [pc, #168]	; (801177c <xTaskResumeAll+0x120>)
 80116d4:	6013      	str	r3, [r2, #0]
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116da:	4613      	mov	r3, r2
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	4413      	add	r3, r2
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	4a27      	ldr	r2, [pc, #156]	; (8011780 <xTaskResumeAll+0x124>)
 80116e4:	441a      	add	r2, r3
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	3304      	adds	r3, #4
 80116ea:	4619      	mov	r1, r3
 80116ec:	4610      	mov	r0, r2
 80116ee:	f7fe f9bc 	bl	800fa6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f6:	4b23      	ldr	r3, [pc, #140]	; (8011784 <xTaskResumeAll+0x128>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d302      	bcc.n	8011706 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011700:	4b21      	ldr	r3, [pc, #132]	; (8011788 <xTaskResumeAll+0x12c>)
 8011702:	2201      	movs	r2, #1
 8011704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011706:	4b1c      	ldr	r3, [pc, #112]	; (8011778 <xTaskResumeAll+0x11c>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1cb      	bne.n	80116a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011714:	f000 fbfc 	bl	8011f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011718:	4b1c      	ldr	r3, [pc, #112]	; (801178c <xTaskResumeAll+0x130>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d010      	beq.n	8011746 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011724:	f000 f86c 	bl	8011800 <xTaskIncrementTick>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d002      	beq.n	8011734 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801172e:	4b16      	ldr	r3, [pc, #88]	; (8011788 <xTaskResumeAll+0x12c>)
 8011730:	2201      	movs	r2, #1
 8011732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	3b01      	subs	r3, #1
 8011738:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1f1      	bne.n	8011724 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011740:	4b12      	ldr	r3, [pc, #72]	; (801178c <xTaskResumeAll+0x130>)
 8011742:	2200      	movs	r2, #0
 8011744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011746:	4b10      	ldr	r3, [pc, #64]	; (8011788 <xTaskResumeAll+0x12c>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d009      	beq.n	8011762 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801174e:	2301      	movs	r3, #1
 8011750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011752:	4b0f      	ldr	r3, [pc, #60]	; (8011790 <xTaskResumeAll+0x134>)
 8011754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011762:	f7fe fb61 	bl	800fe28 <vPortExitCritical>

	return xAlreadyYielded;
 8011766:	68bb      	ldr	r3, [r7, #8]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	200272b0 	.word	0x200272b0
 8011774:	20027288 	.word	0x20027288
 8011778:	20027248 	.word	0x20027248
 801177c:	20027290 	.word	0x20027290
 8011780:	20026db8 	.word	0x20026db8
 8011784:	20026db4 	.word	0x20026db4
 8011788:	2002729c 	.word	0x2002729c
 801178c:	20027298 	.word	0x20027298
 8011790:	e000ed04 	.word	0xe000ed04

08011794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801179a:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <xTaskGetTickCount+0x1c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80117a0:	687b      	ldr	r3, [r7, #4]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	370c      	adds	r7, #12
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	2002728c 	.word	0x2002728c

080117b4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80117b4:	b480      	push	{r7}
 80117b6:	b085      	sub	sp, #20
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80117bc:	4b0e      	ldr	r3, [pc, #56]	; (80117f8 <vTaskStepTick+0x44>)
 80117be:	681a      	ldr	r2, [r3, #0]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	441a      	add	r2, r3
 80117c4:	4b0d      	ldr	r3, [pc, #52]	; (80117fc <vTaskStepTick+0x48>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d909      	bls.n	80117e0 <vTaskStepTick+0x2c>
 80117cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d0:	f383 8811 	msr	BASEPRI, r3
 80117d4:	f3bf 8f6f 	isb	sy
 80117d8:	f3bf 8f4f 	dsb	sy
 80117dc:	60fb      	str	r3, [r7, #12]
 80117de:	e7fe      	b.n	80117de <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80117e0:	4b05      	ldr	r3, [pc, #20]	; (80117f8 <vTaskStepTick+0x44>)
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4413      	add	r3, r2
 80117e8:	4a03      	ldr	r2, [pc, #12]	; (80117f8 <vTaskStepTick+0x44>)
 80117ea:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80117ec:	bf00      	nop
 80117ee:	3714      	adds	r7, #20
 80117f0:	46bd      	mov	sp, r7
 80117f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f6:	4770      	bx	lr
 80117f8:	2002728c 	.word	0x2002728c
 80117fc:	200272a8 	.word	0x200272a8

08011800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b086      	sub	sp, #24
 8011804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011806:	2300      	movs	r3, #0
 8011808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801180a:	4b55      	ldr	r3, [pc, #340]	; (8011960 <xTaskIncrementTick+0x160>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	f040 8093 	bne.w	801193a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011814:	4b53      	ldr	r3, [pc, #332]	; (8011964 <xTaskIncrementTick+0x164>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	3301      	adds	r3, #1
 801181a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801181c:	4a51      	ldr	r2, [pc, #324]	; (8011964 <xTaskIncrementTick+0x164>)
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d11f      	bne.n	8011868 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011828:	4b4f      	ldr	r3, [pc, #316]	; (8011968 <xTaskIncrementTick+0x168>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d009      	beq.n	8011846 <xTaskIncrementTick+0x46>
 8011832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011836:	f383 8811 	msr	BASEPRI, r3
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	f3bf 8f4f 	dsb	sy
 8011842:	603b      	str	r3, [r7, #0]
 8011844:	e7fe      	b.n	8011844 <xTaskIncrementTick+0x44>
 8011846:	4b48      	ldr	r3, [pc, #288]	; (8011968 <xTaskIncrementTick+0x168>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	4b47      	ldr	r3, [pc, #284]	; (801196c <xTaskIncrementTick+0x16c>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a45      	ldr	r2, [pc, #276]	; (8011968 <xTaskIncrementTick+0x168>)
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	4a45      	ldr	r2, [pc, #276]	; (801196c <xTaskIncrementTick+0x16c>)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6013      	str	r3, [r2, #0]
 801185a:	4b45      	ldr	r3, [pc, #276]	; (8011970 <xTaskIncrementTick+0x170>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	3301      	adds	r3, #1
 8011860:	4a43      	ldr	r2, [pc, #268]	; (8011970 <xTaskIncrementTick+0x170>)
 8011862:	6013      	str	r3, [r2, #0]
 8011864:	f000 fb54 	bl	8011f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011868:	4b42      	ldr	r3, [pc, #264]	; (8011974 <xTaskIncrementTick+0x174>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	693a      	ldr	r2, [r7, #16]
 801186e:	429a      	cmp	r2, r3
 8011870:	d34e      	bcc.n	8011910 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011872:	4b3d      	ldr	r3, [pc, #244]	; (8011968 <xTaskIncrementTick+0x168>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <xTaskIncrementTick+0x80>
 801187c:	2301      	movs	r3, #1
 801187e:	e000      	b.n	8011882 <xTaskIncrementTick+0x82>
 8011880:	2300      	movs	r3, #0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d004      	beq.n	8011890 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011886:	4b3b      	ldr	r3, [pc, #236]	; (8011974 <xTaskIncrementTick+0x174>)
 8011888:	f04f 32ff 	mov.w	r2, #4294967295
 801188c:	601a      	str	r2, [r3, #0]
					break;
 801188e:	e03f      	b.n	8011910 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011890:	4b35      	ldr	r3, [pc, #212]	; (8011968 <xTaskIncrementTick+0x168>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80118a0:	693a      	ldr	r2, [r7, #16]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d203      	bcs.n	80118b0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80118a8:	4a32      	ldr	r2, [pc, #200]	; (8011974 <xTaskIncrementTick+0x174>)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6013      	str	r3, [r2, #0]
						break;
 80118ae:	e02f      	b.n	8011910 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3304      	adds	r3, #4
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fe f935 	bl	800fb24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d004      	beq.n	80118cc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	3318      	adds	r3, #24
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fe f92c 	bl	800fb24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d0:	4b29      	ldr	r3, [pc, #164]	; (8011978 <xTaskIncrementTick+0x178>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d903      	bls.n	80118e0 <xTaskIncrementTick+0xe0>
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118dc:	4a26      	ldr	r2, [pc, #152]	; (8011978 <xTaskIncrementTick+0x178>)
 80118de:	6013      	str	r3, [r2, #0]
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e4:	4613      	mov	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	4413      	add	r3, r2
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	4a23      	ldr	r2, [pc, #140]	; (801197c <xTaskIncrementTick+0x17c>)
 80118ee:	441a      	add	r2, r3
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	3304      	adds	r3, #4
 80118f4:	4619      	mov	r1, r3
 80118f6:	4610      	mov	r0, r2
 80118f8:	f7fe f8b7 	bl	800fa6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011900:	4b1f      	ldr	r3, [pc, #124]	; (8011980 <xTaskIncrementTick+0x180>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011906:	429a      	cmp	r2, r3
 8011908:	d3b3      	bcc.n	8011872 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801190a:	2301      	movs	r3, #1
 801190c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801190e:	e7b0      	b.n	8011872 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011910:	4b1b      	ldr	r3, [pc, #108]	; (8011980 <xTaskIncrementTick+0x180>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011916:	4919      	ldr	r1, [pc, #100]	; (801197c <xTaskIncrementTick+0x17c>)
 8011918:	4613      	mov	r3, r2
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	440b      	add	r3, r1
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b01      	cmp	r3, #1
 8011926:	d901      	bls.n	801192c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8011928:	2301      	movs	r3, #1
 801192a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801192c:	4b15      	ldr	r3, [pc, #84]	; (8011984 <xTaskIncrementTick+0x184>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d109      	bne.n	8011948 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011934:	f7ef fc89 	bl	800124a <vApplicationTickHook>
 8011938:	e006      	b.n	8011948 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801193a:	4b12      	ldr	r3, [pc, #72]	; (8011984 <xTaskIncrementTick+0x184>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3301      	adds	r3, #1
 8011940:	4a10      	ldr	r2, [pc, #64]	; (8011984 <xTaskIncrementTick+0x184>)
 8011942:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011944:	f7ef fc81 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011948:	4b0f      	ldr	r3, [pc, #60]	; (8011988 <xTaskIncrementTick+0x188>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011950:	2301      	movs	r3, #1
 8011952:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011954:	697b      	ldr	r3, [r7, #20]
}
 8011956:	4618      	mov	r0, r3
 8011958:	3718      	adds	r7, #24
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	200272b0 	.word	0x200272b0
 8011964:	2002728c 	.word	0x2002728c
 8011968:	20027240 	.word	0x20027240
 801196c:	20027244 	.word	0x20027244
 8011970:	200272a0 	.word	0x200272a0
 8011974:	200272a8 	.word	0x200272a8
 8011978:	20027290 	.word	0x20027290
 801197c:	20026db8 	.word	0x20026db8
 8011980:	20026db4 	.word	0x20026db4
 8011984:	20027298 	.word	0x20027298
 8011988:	2002729c 	.word	0x2002729c

0801198c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011992:	4b3b      	ldr	r3, [pc, #236]	; (8011a80 <vTaskSwitchContext+0xf4>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801199a:	4b3a      	ldr	r3, [pc, #232]	; (8011a84 <vTaskSwitchContext+0xf8>)
 801199c:	2201      	movs	r2, #1
 801199e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80119a0:	e06a      	b.n	8011a78 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80119a2:	4b38      	ldr	r3, [pc, #224]	; (8011a84 <vTaskSwitchContext+0xf8>)
 80119a4:	2200      	movs	r2, #0
 80119a6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80119a8:	f7ef fc48 	bl	800123c <getRunTimeCounterValue>
 80119ac:	4602      	mov	r2, r0
 80119ae:	4b36      	ldr	r3, [pc, #216]	; (8011a88 <vTaskSwitchContext+0xfc>)
 80119b0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80119b2:	4b35      	ldr	r3, [pc, #212]	; (8011a88 <vTaskSwitchContext+0xfc>)
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	4b35      	ldr	r3, [pc, #212]	; (8011a8c <vTaskSwitchContext+0x100>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d909      	bls.n	80119d2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80119be:	4b34      	ldr	r3, [pc, #208]	; (8011a90 <vTaskSwitchContext+0x104>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80119c4:	4a30      	ldr	r2, [pc, #192]	; (8011a88 <vTaskSwitchContext+0xfc>)
 80119c6:	6810      	ldr	r0, [r2, #0]
 80119c8:	4a30      	ldr	r2, [pc, #192]	; (8011a8c <vTaskSwitchContext+0x100>)
 80119ca:	6812      	ldr	r2, [r2, #0]
 80119cc:	1a82      	subs	r2, r0, r2
 80119ce:	440a      	add	r2, r1
 80119d0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80119d2:	4b2d      	ldr	r3, [pc, #180]	; (8011a88 <vTaskSwitchContext+0xfc>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	4a2d      	ldr	r2, [pc, #180]	; (8011a8c <vTaskSwitchContext+0x100>)
 80119d8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80119da:	4b2d      	ldr	r3, [pc, #180]	; (8011a90 <vTaskSwitchContext+0x104>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	4b2b      	ldr	r3, [pc, #172]	; (8011a90 <vTaskSwitchContext+0x104>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d808      	bhi.n	80119fc <vTaskSwitchContext+0x70>
 80119ea:	4b29      	ldr	r3, [pc, #164]	; (8011a90 <vTaskSwitchContext+0x104>)
 80119ec:	681a      	ldr	r2, [r3, #0]
 80119ee:	4b28      	ldr	r3, [pc, #160]	; (8011a90 <vTaskSwitchContext+0x104>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	3334      	adds	r3, #52	; 0x34
 80119f4:	4619      	mov	r1, r3
 80119f6:	4610      	mov	r0, r2
 80119f8:	f7ef fc2e 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80119fc:	4b25      	ldr	r3, [pc, #148]	; (8011a94 <vTaskSwitchContext+0x108>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	60fb      	str	r3, [r7, #12]
 8011a02:	e00f      	b.n	8011a24 <vTaskSwitchContext+0x98>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d109      	bne.n	8011a1e <vTaskSwitchContext+0x92>
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	607b      	str	r3, [r7, #4]
 8011a1c:	e7fe      	b.n	8011a1c <vTaskSwitchContext+0x90>
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	491c      	ldr	r1, [pc, #112]	; (8011a98 <vTaskSwitchContext+0x10c>)
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	4613      	mov	r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	4413      	add	r3, r2
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	440b      	add	r3, r1
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d0e5      	beq.n	8011a04 <vTaskSwitchContext+0x78>
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4413      	add	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4a15      	ldr	r2, [pc, #84]	; (8011a98 <vTaskSwitchContext+0x10c>)
 8011a44:	4413      	add	r3, r2
 8011a46:	60bb      	str	r3, [r7, #8]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	605a      	str	r2, [r3, #4]
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	685a      	ldr	r2, [r3, #4]
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	3308      	adds	r3, #8
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d104      	bne.n	8011a68 <vTaskSwitchContext+0xdc>
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	685a      	ldr	r2, [r3, #4]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	605a      	str	r2, [r3, #4]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	4a08      	ldr	r2, [pc, #32]	; (8011a90 <vTaskSwitchContext+0x104>)
 8011a70:	6013      	str	r3, [r2, #0]
 8011a72:	4a08      	ldr	r2, [pc, #32]	; (8011a94 <vTaskSwitchContext+0x108>)
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	6013      	str	r3, [r2, #0]
}
 8011a78:	bf00      	nop
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	200272b0 	.word	0x200272b0
 8011a84:	2002729c 	.word	0x2002729c
 8011a88:	200272b8 	.word	0x200272b8
 8011a8c:	200272b4 	.word	0x200272b4
 8011a90:	20026db4 	.word	0x20026db4
 8011a94:	20027290 	.word	0x20027290
 8011a98:	20026db8 	.word	0x20026db8

08011a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d109      	bne.n	8011ac0 <vTaskPlaceOnEventList+0x24>
 8011aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab0:	f383 8811 	msr	BASEPRI, r3
 8011ab4:	f3bf 8f6f 	isb	sy
 8011ab8:	f3bf 8f4f 	dsb	sy
 8011abc:	60fb      	str	r3, [r7, #12]
 8011abe:	e7fe      	b.n	8011abe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ac0:	4b07      	ldr	r3, [pc, #28]	; (8011ae0 <vTaskPlaceOnEventList+0x44>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	3318      	adds	r3, #24
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7fd fff2 	bl	800fab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ace:	2101      	movs	r1, #1
 8011ad0:	6838      	ldr	r0, [r7, #0]
 8011ad2:	f000 fda9 	bl	8012628 <prvAddCurrentTaskToDelayedList>
}
 8011ad6:	bf00      	nop
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	20026db4 	.word	0x20026db4

08011ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <vTaskPlaceOnEventListRestricted+0x26>
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e7fe      	b.n	8011b08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b0a:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <vTaskPlaceOnEventListRestricted+0x50>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	3318      	adds	r3, #24
 8011b10:	4619      	mov	r1, r3
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f7fd ffa9 	bl	800fa6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011b24:	6879      	ldr	r1, [r7, #4]
 8011b26:	68b8      	ldr	r0, [r7, #8]
 8011b28:	f000 fd7e 	bl	8012628 <prvAddCurrentTaskToDelayedList>
	}
 8011b2c:	bf00      	nop
 8011b2e:	3718      	adds	r7, #24
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	20026db4 	.word	0x20026db4

08011b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d109      	bne.n	8011b62 <xTaskRemoveFromEventList+0x2a>
 8011b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	e7fe      	b.n	8011b60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	3318      	adds	r3, #24
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fd ffdc 	bl	800fb24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b6c:	4b1e      	ldr	r3, [pc, #120]	; (8011be8 <xTaskRemoveFromEventList+0xb0>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d11d      	bne.n	8011bb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	3304      	adds	r3, #4
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fd ffd3 	bl	800fb24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b82:	4b1a      	ldr	r3, [pc, #104]	; (8011bec <xTaskRemoveFromEventList+0xb4>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d903      	bls.n	8011b92 <xTaskRemoveFromEventList+0x5a>
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8e:	4a17      	ldr	r2, [pc, #92]	; (8011bec <xTaskRemoveFromEventList+0xb4>)
 8011b90:	6013      	str	r3, [r2, #0]
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b96:	4613      	mov	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	4413      	add	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4a14      	ldr	r2, [pc, #80]	; (8011bf0 <xTaskRemoveFromEventList+0xb8>)
 8011ba0:	441a      	add	r2, r3
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	4610      	mov	r0, r2
 8011baa:	f7fd ff5e 	bl	800fa6a <vListInsertEnd>
 8011bae:	e005      	b.n	8011bbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	3318      	adds	r3, #24
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	480f      	ldr	r0, [pc, #60]	; (8011bf4 <xTaskRemoveFromEventList+0xbc>)
 8011bb8:	f7fd ff57 	bl	800fa6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc0:	4b0d      	ldr	r3, [pc, #52]	; (8011bf8 <xTaskRemoveFromEventList+0xc0>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d905      	bls.n	8011bd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011bce:	4b0b      	ldr	r3, [pc, #44]	; (8011bfc <xTaskRemoveFromEventList+0xc4>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	601a      	str	r2, [r3, #0]
 8011bd4:	e001      	b.n	8011bda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8011bda:	f000 f999 	bl	8011f10 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 8011bde:	697b      	ldr	r3, [r7, #20]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3718      	adds	r7, #24
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	200272b0 	.word	0x200272b0
 8011bec:	20027290 	.word	0x20027290
 8011bf0:	20026db8 	.word	0x20026db8
 8011bf4:	20027248 	.word	0x20027248
 8011bf8:	20026db4 	.word	0x20026db4
 8011bfc:	2002729c 	.word	0x2002729c

08011c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c08:	4b06      	ldr	r3, [pc, #24]	; (8011c24 <vTaskInternalSetTimeOutState+0x24>)
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c10:	4b05      	ldr	r3, [pc, #20]	; (8011c28 <vTaskInternalSetTimeOutState+0x28>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	605a      	str	r2, [r3, #4]
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	200272a0 	.word	0x200272a0
 8011c28:	2002728c 	.word	0x2002728c

08011c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b088      	sub	sp, #32
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d109      	bne.n	8011c50 <xTaskCheckForTimeOut+0x24>
 8011c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	613b      	str	r3, [r7, #16]
 8011c4e:	e7fe      	b.n	8011c4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d109      	bne.n	8011c6a <xTaskCheckForTimeOut+0x3e>
 8011c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5a:	f383 8811 	msr	BASEPRI, r3
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	f3bf 8f4f 	dsb	sy
 8011c66:	60fb      	str	r3, [r7, #12]
 8011c68:	e7fe      	b.n	8011c68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011c6a:	f7fe f8af 	bl	800fdcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011c6e:	4b1d      	ldr	r3, [pc, #116]	; (8011ce4 <xTaskCheckForTimeOut+0xb8>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	69ba      	ldr	r2, [r7, #24]
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c86:	d102      	bne.n	8011c8e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	61fb      	str	r3, [r7, #28]
 8011c8c:	e023      	b.n	8011cd6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <xTaskCheckForTimeOut+0xbc>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d007      	beq.n	8011caa <xTaskCheckForTimeOut+0x7e>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	69ba      	ldr	r2, [r7, #24]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d302      	bcc.n	8011caa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	61fb      	str	r3, [r7, #28]
 8011ca8:	e015      	b.n	8011cd6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d20b      	bcs.n	8011ccc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	1ad2      	subs	r2, r2, r3
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff ff9d 	bl	8011c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	61fb      	str	r3, [r7, #28]
 8011cca:	e004      	b.n	8011cd6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011cd6:	f7fe f8a7 	bl	800fe28 <vPortExitCritical>

	return xReturn;
 8011cda:	69fb      	ldr	r3, [r7, #28]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3720      	adds	r7, #32
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	2002728c 	.word	0x2002728c
 8011ce8:	200272a0 	.word	0x200272a0

08011cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011cec:	b480      	push	{r7}
 8011cee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011cf0:	4b03      	ldr	r3, [pc, #12]	; (8011d00 <vTaskMissedYield+0x14>)
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	601a      	str	r2, [r3, #0]
}
 8011cf6:	bf00      	nop
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr
 8011d00:	2002729c 	.word	0x2002729c

08011d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011d0c:	f000 f8a6 	bl	8011e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011d10:	4b17      	ldr	r3, [pc, #92]	; (8011d70 <prvIdleTask+0x6c>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d907      	bls.n	8011d28 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011d18:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <prvIdleTask+0x70>)
 8011d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1e:	601a      	str	r2, [r3, #0]
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011d28:	f7ff fc60 	bl	80115ec <prvGetExpectedIdleTime>
 8011d2c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d9eb      	bls.n	8011d0c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011d34:	f7ff fc4c 	bl	80115d0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011d38:	4b0f      	ldr	r3, [pc, #60]	; (8011d78 <prvIdleTask+0x74>)
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	4b0f      	ldr	r3, [pc, #60]	; (8011d7c <prvIdleTask+0x78>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d209      	bcs.n	8011d58 <prvIdleTask+0x54>
 8011d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d48:	f383 8811 	msr	BASEPRI, r3
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	60bb      	str	r3, [r7, #8]
 8011d56:	e7fe      	b.n	8011d56 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011d58:	f7ff fc48 	bl	80115ec <prvGetExpectedIdleTime>
 8011d5c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d902      	bls.n	8011d6a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f7f0 fa43 	bl	80021f0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8011d6a:	f7ff fc77 	bl	801165c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8011d6e:	e7cd      	b.n	8011d0c <prvIdleTask+0x8>
 8011d70:	20026db8 	.word	0x20026db8
 8011d74:	e000ed04 	.word	0xe000ed04
 8011d78:	200272a8 	.word	0x200272a8
 8011d7c:	2002728c 	.word	0x2002728c

08011d80 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8011d86:	2301      	movs	r3, #1
 8011d88:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8011d8e:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <eTaskConfirmSleepModeStatus+0x4c>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8011d96:	2300      	movs	r3, #0
 8011d98:	71fb      	strb	r3, [r7, #7]
 8011d9a:	e010      	b.n	8011dbe <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8011d9c:	4b0c      	ldr	r3, [pc, #48]	; (8011dd0 <eTaskConfirmSleepModeStatus+0x50>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d002      	beq.n	8011daa <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8011da4:	2300      	movs	r3, #0
 8011da6:	71fb      	strb	r3, [r7, #7]
 8011da8:	e009      	b.n	8011dbe <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8011daa:	4b0a      	ldr	r3, [pc, #40]	; (8011dd4 <eTaskConfirmSleepModeStatus+0x54>)
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	4b0a      	ldr	r3, [pc, #40]	; (8011dd8 <eTaskConfirmSleepModeStatus+0x58>)
 8011db0:	6819      	ldr	r1, [r3, #0]
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	1acb      	subs	r3, r1, r3
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d101      	bne.n	8011dbe <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8011dba:	2302      	movs	r3, #2
 8011dbc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8011dbe:	79fb      	ldrb	r3, [r7, #7]
	}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	20027248 	.word	0x20027248
 8011dd0:	2002729c 	.word	0x2002729c
 8011dd4:	20027274 	.word	0x20027274
 8011dd8:	20027288 	.word	0x20027288

08011ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011de2:	2300      	movs	r3, #0
 8011de4:	607b      	str	r3, [r7, #4]
 8011de6:	e00c      	b.n	8011e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	4613      	mov	r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	4413      	add	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4a12      	ldr	r2, [pc, #72]	; (8011e3c <prvInitialiseTaskLists+0x60>)
 8011df4:	4413      	add	r3, r2
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fd fe0a 	bl	800fa10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	607b      	str	r3, [r7, #4]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b37      	cmp	r3, #55	; 0x37
 8011e06:	d9ef      	bls.n	8011de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e08:	480d      	ldr	r0, [pc, #52]	; (8011e40 <prvInitialiseTaskLists+0x64>)
 8011e0a:	f7fd fe01 	bl	800fa10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e0e:	480d      	ldr	r0, [pc, #52]	; (8011e44 <prvInitialiseTaskLists+0x68>)
 8011e10:	f7fd fdfe 	bl	800fa10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e14:	480c      	ldr	r0, [pc, #48]	; (8011e48 <prvInitialiseTaskLists+0x6c>)
 8011e16:	f7fd fdfb 	bl	800fa10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e1a:	480c      	ldr	r0, [pc, #48]	; (8011e4c <prvInitialiseTaskLists+0x70>)
 8011e1c:	f7fd fdf8 	bl	800fa10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e20:	480b      	ldr	r0, [pc, #44]	; (8011e50 <prvInitialiseTaskLists+0x74>)
 8011e22:	f7fd fdf5 	bl	800fa10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e26:	4b0b      	ldr	r3, [pc, #44]	; (8011e54 <prvInitialiseTaskLists+0x78>)
 8011e28:	4a05      	ldr	r2, [pc, #20]	; (8011e40 <prvInitialiseTaskLists+0x64>)
 8011e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e2c:	4b0a      	ldr	r3, [pc, #40]	; (8011e58 <prvInitialiseTaskLists+0x7c>)
 8011e2e:	4a05      	ldr	r2, [pc, #20]	; (8011e44 <prvInitialiseTaskLists+0x68>)
 8011e30:	601a      	str	r2, [r3, #0]
}
 8011e32:	bf00      	nop
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	20026db8 	.word	0x20026db8
 8011e40:	20027218 	.word	0x20027218
 8011e44:	2002722c 	.word	0x2002722c
 8011e48:	20027248 	.word	0x20027248
 8011e4c:	2002725c 	.word	0x2002725c
 8011e50:	20027274 	.word	0x20027274
 8011e54:	20027240 	.word	0x20027240
 8011e58:	20027244 	.word	0x20027244

08011e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e62:	e019      	b.n	8011e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e64:	f7fd ffb2 	bl	800fdcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011e68:	4b0f      	ldr	r3, [pc, #60]	; (8011ea8 <prvCheckTasksWaitingTermination+0x4c>)
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	3304      	adds	r3, #4
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fd fe55 	bl	800fb24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e7a:	4b0c      	ldr	r3, [pc, #48]	; (8011eac <prvCheckTasksWaitingTermination+0x50>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	4a0a      	ldr	r2, [pc, #40]	; (8011eac <prvCheckTasksWaitingTermination+0x50>)
 8011e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e84:	4b0a      	ldr	r3, [pc, #40]	; (8011eb0 <prvCheckTasksWaitingTermination+0x54>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	4a09      	ldr	r2, [pc, #36]	; (8011eb0 <prvCheckTasksWaitingTermination+0x54>)
 8011e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e8e:	f7fd ffcb 	bl	800fe28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f80e 	bl	8011eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e98:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <prvCheckTasksWaitingTermination+0x54>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d1e1      	bne.n	8011e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ea0:	bf00      	nop
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	2002725c 	.word	0x2002725c
 8011eac:	20027288 	.word	0x20027288
 8011eb0:	20027270 	.word	0x20027270

08011eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d108      	bne.n	8011ed8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fd fc8a 	bl	800f7e4 <vPortFree>
				vPortFree( pxTCB );
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7fd fc87 	bl	800f7e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011ed6:	e017      	b.n	8011f08 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d103      	bne.n	8011eea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7fd fc7e 	bl	800f7e4 <vPortFree>
	}
 8011ee8:	e00e      	b.n	8011f08 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011ef0:	2b02      	cmp	r3, #2
 8011ef2:	d009      	beq.n	8011f08 <prvDeleteTCB+0x54>
 8011ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef8:	f383 8811 	msr	BASEPRI, r3
 8011efc:	f3bf 8f6f 	isb	sy
 8011f00:	f3bf 8f4f 	dsb	sy
 8011f04:	60fb      	str	r3, [r7, #12]
 8011f06:	e7fe      	b.n	8011f06 <prvDeleteTCB+0x52>
	}
 8011f08:	bf00      	nop
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f16:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <prvResetNextTaskUnblockTime+0x44>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d101      	bne.n	8011f24 <prvResetNextTaskUnblockTime+0x14>
 8011f20:	2301      	movs	r3, #1
 8011f22:	e000      	b.n	8011f26 <prvResetNextTaskUnblockTime+0x16>
 8011f24:	2300      	movs	r3, #0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d004      	beq.n	8011f34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f2a:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <prvResetNextTaskUnblockTime+0x48>)
 8011f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f32:	e008      	b.n	8011f46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011f34:	4b07      	ldr	r3, [pc, #28]	; (8011f54 <prvResetNextTaskUnblockTime+0x44>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	4a05      	ldr	r2, [pc, #20]	; (8011f58 <prvResetNextTaskUnblockTime+0x48>)
 8011f44:	6013      	str	r3, [r2, #0]
}
 8011f46:	bf00      	nop
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	20027240 	.word	0x20027240
 8011f58:	200272a8 	.word	0x200272a8

08011f5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011f62:	4b05      	ldr	r3, [pc, #20]	; (8011f78 <xTaskGetCurrentTaskHandle+0x1c>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011f68:	687b      	ldr	r3, [r7, #4]
	}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	370c      	adds	r7, #12
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	20026db4 	.word	0x20026db4

08011f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011f82:	4b0b      	ldr	r3, [pc, #44]	; (8011fb0 <xTaskGetSchedulerState+0x34>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d102      	bne.n	8011f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	607b      	str	r3, [r7, #4]
 8011f8e:	e008      	b.n	8011fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f90:	4b08      	ldr	r3, [pc, #32]	; (8011fb4 <xTaskGetSchedulerState+0x38>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d102      	bne.n	8011f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f98:	2302      	movs	r3, #2
 8011f9a:	607b      	str	r3, [r7, #4]
 8011f9c:	e001      	b.n	8011fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011fa2:	687b      	ldr	r3, [r7, #4]
	}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr
 8011fb0:	20027294 	.word	0x20027294
 8011fb4:	200272b0 	.word	0x200272b0

08011fb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d056      	beq.n	801207c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fd2:	4b2d      	ldr	r3, [pc, #180]	; (8012088 <xTaskPriorityInherit+0xd0>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d246      	bcs.n	801206a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	699b      	ldr	r3, [r3, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	db06      	blt.n	8011ff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fe4:	4b28      	ldr	r3, [pc, #160]	; (8012088 <xTaskPriorityInherit+0xd0>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	6959      	ldr	r1, [r3, #20]
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	009b      	lsls	r3, r3, #2
 8011ffe:	4413      	add	r3, r2
 8012000:	009b      	lsls	r3, r3, #2
 8012002:	4a22      	ldr	r2, [pc, #136]	; (801208c <xTaskPriorityInherit+0xd4>)
 8012004:	4413      	add	r3, r2
 8012006:	4299      	cmp	r1, r3
 8012008:	d101      	bne.n	801200e <xTaskPriorityInherit+0x56>
 801200a:	2301      	movs	r3, #1
 801200c:	e000      	b.n	8012010 <xTaskPriorityInherit+0x58>
 801200e:	2300      	movs	r3, #0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d022      	beq.n	801205a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	3304      	adds	r3, #4
 8012018:	4618      	mov	r0, r3
 801201a:	f7fd fd83 	bl	800fb24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801201e:	4b1a      	ldr	r3, [pc, #104]	; (8012088 <xTaskPriorityInherit+0xd0>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801202c:	4b18      	ldr	r3, [pc, #96]	; (8012090 <xTaskPriorityInherit+0xd8>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	429a      	cmp	r2, r3
 8012032:	d903      	bls.n	801203c <xTaskPriorityInherit+0x84>
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012038:	4a15      	ldr	r2, [pc, #84]	; (8012090 <xTaskPriorityInherit+0xd8>)
 801203a:	6013      	str	r3, [r2, #0]
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012040:	4613      	mov	r3, r2
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	4a10      	ldr	r2, [pc, #64]	; (801208c <xTaskPriorityInherit+0xd4>)
 801204a:	441a      	add	r2, r3
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	3304      	adds	r3, #4
 8012050:	4619      	mov	r1, r3
 8012052:	4610      	mov	r0, r2
 8012054:	f7fd fd09 	bl	800fa6a <vListInsertEnd>
 8012058:	e004      	b.n	8012064 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801205a:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <xTaskPriorityInherit+0xd0>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012064:	2301      	movs	r3, #1
 8012066:	60fb      	str	r3, [r7, #12]
 8012068:	e008      	b.n	801207c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801206e:	4b06      	ldr	r3, [pc, #24]	; (8012088 <xTaskPriorityInherit+0xd0>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012074:	429a      	cmp	r2, r3
 8012076:	d201      	bcs.n	801207c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012078:	2301      	movs	r3, #1
 801207a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801207c:	68fb      	ldr	r3, [r7, #12]
	}
 801207e:	4618      	mov	r0, r3
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	20026db4 	.word	0x20026db4
 801208c:	20026db8 	.word	0x20026db8
 8012090:	20027290 	.word	0x20027290

08012094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012094:	b580      	push	{r7, lr}
 8012096:	b086      	sub	sp, #24
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120a0:	2300      	movs	r3, #0
 80120a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d054      	beq.n	8012154 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120aa:	4b2d      	ldr	r3, [pc, #180]	; (8012160 <xTaskPriorityDisinherit+0xcc>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	693a      	ldr	r2, [r7, #16]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d009      	beq.n	80120c8 <xTaskPriorityDisinherit+0x34>
 80120b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b8:	f383 8811 	msr	BASEPRI, r3
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	f3bf 8f4f 	dsb	sy
 80120c4:	60fb      	str	r3, [r7, #12]
 80120c6:	e7fe      	b.n	80120c6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d109      	bne.n	80120e4 <xTaskPriorityDisinherit+0x50>
 80120d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	60bb      	str	r3, [r7, #8]
 80120e2:	e7fe      	b.n	80120e2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120e8:	1e5a      	subs	r2, r3, #1
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d02c      	beq.n	8012154 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d128      	bne.n	8012154 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	3304      	adds	r3, #4
 8012106:	4618      	mov	r0, r3
 8012108:	f7fd fd0c 	bl	800fb24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012124:	4b0f      	ldr	r3, [pc, #60]	; (8012164 <xTaskPriorityDisinherit+0xd0>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	429a      	cmp	r2, r3
 801212a:	d903      	bls.n	8012134 <xTaskPriorityDisinherit+0xa0>
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012130:	4a0c      	ldr	r2, [pc, #48]	; (8012164 <xTaskPriorityDisinherit+0xd0>)
 8012132:	6013      	str	r3, [r2, #0]
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012138:	4613      	mov	r3, r2
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	4413      	add	r3, r2
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4a09      	ldr	r2, [pc, #36]	; (8012168 <xTaskPriorityDisinherit+0xd4>)
 8012142:	441a      	add	r2, r3
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	3304      	adds	r3, #4
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f7fd fc8d 	bl	800fa6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012150:	2301      	movs	r3, #1
 8012152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012154:	697b      	ldr	r3, [r7, #20]
	}
 8012156:	4618      	mov	r0, r3
 8012158:	3718      	adds	r7, #24
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	20026db4 	.word	0x20026db4
 8012164:	20027290 	.word	0x20027290
 8012168:	20026db8 	.word	0x20026db8

0801216c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801216c:	b580      	push	{r7, lr}
 801216e:	b088      	sub	sp, #32
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801217a:	2301      	movs	r3, #1
 801217c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d06d      	beq.n	8012260 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012188:	2b00      	cmp	r3, #0
 801218a:	d109      	bne.n	80121a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012190:	f383 8811 	msr	BASEPRI, r3
 8012194:	f3bf 8f6f 	isb	sy
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	e7fe      	b.n	801219e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d902      	bls.n	80121b0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	61fb      	str	r3, [r7, #28]
 80121ae:	e002      	b.n	80121b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d04f      	beq.n	8012260 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121c4:	697a      	ldr	r2, [r7, #20]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d14a      	bne.n	8012260 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80121ca:	4b27      	ldr	r3, [pc, #156]	; (8012268 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	69ba      	ldr	r2, [r7, #24]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d109      	bne.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	60bb      	str	r3, [r7, #8]
 80121e6:	e7fe      	b.n	80121e6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	69fa      	ldr	r2, [r7, #28]
 80121f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	699b      	ldr	r3, [r3, #24]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	db04      	blt.n	8012206 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	6959      	ldr	r1, [r3, #20]
 801220a:	693a      	ldr	r2, [r7, #16]
 801220c:	4613      	mov	r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	4413      	add	r3, r2
 8012212:	009b      	lsls	r3, r3, #2
 8012214:	4a15      	ldr	r2, [pc, #84]	; (801226c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012216:	4413      	add	r3, r2
 8012218:	4299      	cmp	r1, r3
 801221a:	d101      	bne.n	8012220 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 801221c:	2301      	movs	r3, #1
 801221e:	e000      	b.n	8012222 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8012220:	2300      	movs	r3, #0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d01c      	beq.n	8012260 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	3304      	adds	r3, #4
 801222a:	4618      	mov	r0, r3
 801222c:	f7fd fc7a 	bl	800fb24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012234:	4b0e      	ldr	r3, [pc, #56]	; (8012270 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	429a      	cmp	r2, r3
 801223a:	d903      	bls.n	8012244 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012240:	4a0b      	ldr	r2, [pc, #44]	; (8012270 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012242:	6013      	str	r3, [r2, #0]
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012248:	4613      	mov	r3, r2
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	4413      	add	r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	4a06      	ldr	r2, [pc, #24]	; (801226c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012252:	441a      	add	r2, r3
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	3304      	adds	r3, #4
 8012258:	4619      	mov	r1, r3
 801225a:	4610      	mov	r0, r2
 801225c:	f7fd fc05 	bl	800fa6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012260:	bf00      	nop
 8012262:	3720      	adds	r7, #32
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	20026db4 	.word	0x20026db4
 801226c:	20026db8 	.word	0x20026db8
 8012270:	20027290 	.word	0x20027290

08012274 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012274:	b480      	push	{r7}
 8012276:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012278:	4b07      	ldr	r3, [pc, #28]	; (8012298 <pvTaskIncrementMutexHeldCount+0x24>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d004      	beq.n	801228a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012280:	4b05      	ldr	r3, [pc, #20]	; (8012298 <pvTaskIncrementMutexHeldCount+0x24>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012286:	3201      	adds	r2, #1
 8012288:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801228a:	4b03      	ldr	r3, [pc, #12]	; (8012298 <pvTaskIncrementMutexHeldCount+0x24>)
 801228c:	681b      	ldr	r3, [r3, #0]
	}
 801228e:	4618      	mov	r0, r3
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr
 8012298:	20026db4 	.word	0x20026db4

0801229c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801229c:	b580      	push	{r7, lr}
 801229e:	b086      	sub	sp, #24
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80122aa:	f7fd fd8f 	bl	800fdcc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80122ae:	4b26      	ldr	r3, [pc, #152]	; (8012348 <xTaskNotifyWait+0xac>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	d01a      	beq.n	80122f2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80122bc:	4b22      	ldr	r3, [pc, #136]	; (8012348 <xTaskNotifyWait+0xac>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	43d2      	mvns	r2, r2
 80122c6:	400a      	ands	r2, r1
 80122c8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80122ca:	4b1f      	ldr	r3, [pc, #124]	; (8012348 <xTaskNotifyWait+0xac>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00b      	beq.n	80122f2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80122da:	2101      	movs	r1, #1
 80122dc:	6838      	ldr	r0, [r7, #0]
 80122de:	f000 f9a3 	bl	8012628 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80122e2:	4b1a      	ldr	r3, [pc, #104]	; (801234c <xTaskNotifyWait+0xb0>)
 80122e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80122f2:	f7fd fd99 	bl	800fe28 <vPortExitCritical>

		taskENTER_CRITICAL();
 80122f6:	f7fd fd69 	bl	800fdcc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d004      	beq.n	801230a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012300:	4b11      	ldr	r3, [pc, #68]	; (8012348 <xTaskNotifyWait+0xac>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801230a:	4b0f      	ldr	r3, [pc, #60]	; (8012348 <xTaskNotifyWait+0xac>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012312:	b2db      	uxtb	r3, r3
 8012314:	2b02      	cmp	r3, #2
 8012316:	d002      	beq.n	801231e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012318:	2300      	movs	r3, #0
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	e008      	b.n	8012330 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801231e:	4b0a      	ldr	r3, [pc, #40]	; (8012348 <xTaskNotifyWait+0xac>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	43d2      	mvns	r2, r2
 8012328:	400a      	ands	r2, r1
 801232a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 801232c:	2301      	movs	r3, #1
 801232e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012330:	4b05      	ldr	r3, [pc, #20]	; (8012348 <xTaskNotifyWait+0xac>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2200      	movs	r2, #0
 8012336:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 801233a:	f7fd fd75 	bl	800fe28 <vPortExitCritical>

		return xReturn;
 801233e:	697b      	ldr	r3, [r7, #20]
	}
 8012340:	4618      	mov	r0, r3
 8012342:	3718      	adds	r7, #24
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	20026db4 	.word	0x20026db4
 801234c:	e000ed04 	.word	0xe000ed04

08012350 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012350:	b580      	push	{r7, lr}
 8012352:	b08a      	sub	sp, #40	; 0x28
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	603b      	str	r3, [r7, #0]
 801235c:	4613      	mov	r3, r2
 801235e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012360:	2301      	movs	r3, #1
 8012362:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d109      	bne.n	801237e <xTaskGenericNotify+0x2e>
 801236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236e:	f383 8811 	msr	BASEPRI, r3
 8012372:	f3bf 8f6f 	isb	sy
 8012376:	f3bf 8f4f 	dsb	sy
 801237a:	61bb      	str	r3, [r7, #24]
 801237c:	e7fe      	b.n	801237c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012382:	f7fd fd23 	bl	800fdcc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d003      	beq.n	8012394 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012394:	6a3b      	ldr	r3, [r7, #32]
 8012396:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801239a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801239c:	6a3b      	ldr	r3, [r7, #32]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	2b04      	cmp	r3, #4
 80123a8:	d827      	bhi.n	80123fa <xTaskGenericNotify+0xaa>
 80123aa:	a201      	add	r2, pc, #4	; (adr r2, 80123b0 <xTaskGenericNotify+0x60>)
 80123ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b0:	080123fb 	.word	0x080123fb
 80123b4:	080123c5 	.word	0x080123c5
 80123b8:	080123d3 	.word	0x080123d3
 80123bc:	080123df 	.word	0x080123df
 80123c0:	080123e7 	.word	0x080123e7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80123c4:	6a3b      	ldr	r3, [r7, #32]
 80123c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	431a      	orrs	r2, r3
 80123cc:	6a3b      	ldr	r3, [r7, #32]
 80123ce:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80123d0:	e013      	b.n	80123fa <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80123d2:	6a3b      	ldr	r3, [r7, #32]
 80123d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123d6:	1c5a      	adds	r2, r3, #1
 80123d8:	6a3b      	ldr	r3, [r7, #32]
 80123da:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80123dc:	e00d      	b.n	80123fa <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80123de:	6a3b      	ldr	r3, [r7, #32]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 80123e4:	e009      	b.n	80123fa <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80123e6:	7ffb      	ldrb	r3, [r7, #31]
 80123e8:	2b02      	cmp	r3, #2
 80123ea:	d003      	beq.n	80123f4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80123f2:	e001      	b.n	80123f8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80123f4:	2300      	movs	r3, #0
 80123f6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80123f8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80123fa:	7ffb      	ldrb	r3, [r7, #31]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d13b      	bne.n	8012478 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012400:	6a3b      	ldr	r3, [r7, #32]
 8012402:	3304      	adds	r3, #4
 8012404:	4618      	mov	r0, r3
 8012406:	f7fd fb8d 	bl	800fb24 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801240e:	4b1e      	ldr	r3, [pc, #120]	; (8012488 <xTaskGenericNotify+0x138>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d903      	bls.n	801241e <xTaskGenericNotify+0xce>
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801241a:	4a1b      	ldr	r2, [pc, #108]	; (8012488 <xTaskGenericNotify+0x138>)
 801241c:	6013      	str	r3, [r2, #0]
 801241e:	6a3b      	ldr	r3, [r7, #32]
 8012420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012422:	4613      	mov	r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	4413      	add	r3, r2
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	4a18      	ldr	r2, [pc, #96]	; (801248c <xTaskGenericNotify+0x13c>)
 801242c:	441a      	add	r2, r3
 801242e:	6a3b      	ldr	r3, [r7, #32]
 8012430:	3304      	adds	r3, #4
 8012432:	4619      	mov	r1, r3
 8012434:	4610      	mov	r0, r2
 8012436:	f7fd fb18 	bl	800fa6a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801243e:	2b00      	cmp	r3, #0
 8012440:	d009      	beq.n	8012456 <xTaskGenericNotify+0x106>
 8012442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	617b      	str	r3, [r7, #20]
 8012454:	e7fe      	b.n	8012454 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012456:	f7ff fd5b 	bl	8011f10 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801245a:	6a3b      	ldr	r3, [r7, #32]
 801245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801245e:	4b0c      	ldr	r3, [pc, #48]	; (8012490 <xTaskGenericNotify+0x140>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012464:	429a      	cmp	r2, r3
 8012466:	d907      	bls.n	8012478 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012468:	4b0a      	ldr	r3, [pc, #40]	; (8012494 <xTaskGenericNotify+0x144>)
 801246a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801246e:	601a      	str	r2, [r3, #0]
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012478:	f7fd fcd6 	bl	800fe28 <vPortExitCritical>

		return xReturn;
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801247e:	4618      	mov	r0, r3
 8012480:	3728      	adds	r7, #40	; 0x28
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20027290 	.word	0x20027290
 801248c:	20026db8 	.word	0x20026db8
 8012490:	20026db4 	.word	0x20026db4
 8012494:	e000ed04 	.word	0xe000ed04

08012498 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08e      	sub	sp, #56	; 0x38
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	603b      	str	r3, [r7, #0]
 80124a4:	4613      	mov	r3, r2
 80124a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80124a8:	2301      	movs	r3, #1
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d109      	bne.n	80124c6 <xTaskGenericNotifyFromISR+0x2e>
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
 80124c4:	e7fe      	b.n	80124c4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124c6:	f7fd fd39 	bl	800ff3c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80124ce:	f3ef 8211 	mrs	r2, BASEPRI
 80124d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d6:	f383 8811 	msr	BASEPRI, r3
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	623a      	str	r2, [r7, #32]
 80124e4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80124e6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d003      	beq.n	80124f8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80124f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80124f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80124fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012504:	2202      	movs	r2, #2
 8012506:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 801250a:	79fb      	ldrb	r3, [r7, #7]
 801250c:	2b04      	cmp	r3, #4
 801250e:	d829      	bhi.n	8012564 <xTaskGenericNotifyFromISR+0xcc>
 8012510:	a201      	add	r2, pc, #4	; (adr r2, 8012518 <xTaskGenericNotifyFromISR+0x80>)
 8012512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012516:	bf00      	nop
 8012518:	08012565 	.word	0x08012565
 801251c:	0801252d 	.word	0x0801252d
 8012520:	0801253b 	.word	0x0801253b
 8012524:	08012547 	.word	0x08012547
 8012528:	0801254f 	.word	0x0801254f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	431a      	orrs	r2, r3
 8012534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012536:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012538:	e014      	b.n	8012564 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012542:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8012544:	e00e      	b.n	8012564 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012548:	68ba      	ldr	r2, [r7, #8]
 801254a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801254c:	e00a      	b.n	8012564 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801254e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012552:	2b02      	cmp	r3, #2
 8012554:	d003      	beq.n	801255e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801255c:	e001      	b.n	8012562 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801255e:	2300      	movs	r3, #0
 8012560:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012562:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012568:	2b01      	cmp	r3, #1
 801256a:	d146      	bne.n	80125fa <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012570:	2b00      	cmp	r3, #0
 8012572:	d009      	beq.n	8012588 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	61bb      	str	r3, [r7, #24]
 8012586:	e7fe      	b.n	8012586 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012588:	4b21      	ldr	r3, [pc, #132]	; (8012610 <xTaskGenericNotifyFromISR+0x178>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d11d      	bne.n	80125cc <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012592:	3304      	adds	r3, #4
 8012594:	4618      	mov	r0, r3
 8012596:	f7fd fac5 	bl	800fb24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801259e:	4b1d      	ldr	r3, [pc, #116]	; (8012614 <xTaskGenericNotifyFromISR+0x17c>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d903      	bls.n	80125ae <xTaskGenericNotifyFromISR+0x116>
 80125a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125aa:	4a1a      	ldr	r2, [pc, #104]	; (8012614 <xTaskGenericNotifyFromISR+0x17c>)
 80125ac:	6013      	str	r3, [r2, #0]
 80125ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b2:	4613      	mov	r3, r2
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	4413      	add	r3, r2
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4a17      	ldr	r2, [pc, #92]	; (8012618 <xTaskGenericNotifyFromISR+0x180>)
 80125bc:	441a      	add	r2, r3
 80125be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c0:	3304      	adds	r3, #4
 80125c2:	4619      	mov	r1, r3
 80125c4:	4610      	mov	r0, r2
 80125c6:	f7fd fa50 	bl	800fa6a <vListInsertEnd>
 80125ca:	e005      	b.n	80125d8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80125cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ce:	3318      	adds	r3, #24
 80125d0:	4619      	mov	r1, r3
 80125d2:	4812      	ldr	r0, [pc, #72]	; (801261c <xTaskGenericNotifyFromISR+0x184>)
 80125d4:	f7fd fa49 	bl	800fa6a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125dc:	4b10      	ldr	r3, [pc, #64]	; (8012620 <xTaskGenericNotifyFromISR+0x188>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d909      	bls.n	80125fa <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80125e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d003      	beq.n	80125f4 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80125ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ee:	2201      	movs	r2, #1
 80125f0:	601a      	str	r2, [r3, #0]
 80125f2:	e002      	b.n	80125fa <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80125f4:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <xTaskGenericNotifyFromISR+0x18c>)
 80125f6:	2201      	movs	r2, #1
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012606:	4618      	mov	r0, r3
 8012608:	3738      	adds	r7, #56	; 0x38
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	200272b0 	.word	0x200272b0
 8012614:	20027290 	.word	0x20027290
 8012618:	20026db8 	.word	0x20026db8
 801261c:	20027248 	.word	0x20027248
 8012620:	20026db4 	.word	0x20026db4
 8012624:	2002729c 	.word	0x2002729c

08012628 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012632:	4b21      	ldr	r3, [pc, #132]	; (80126b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012638:	4b20      	ldr	r3, [pc, #128]	; (80126bc <prvAddCurrentTaskToDelayedList+0x94>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	3304      	adds	r3, #4
 801263e:	4618      	mov	r0, r3
 8012640:	f7fd fa70 	bl	800fb24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264a:	d10a      	bne.n	8012662 <prvAddCurrentTaskToDelayedList+0x3a>
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d007      	beq.n	8012662 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012652:	4b1a      	ldr	r3, [pc, #104]	; (80126bc <prvAddCurrentTaskToDelayedList+0x94>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	3304      	adds	r3, #4
 8012658:	4619      	mov	r1, r3
 801265a:	4819      	ldr	r0, [pc, #100]	; (80126c0 <prvAddCurrentTaskToDelayedList+0x98>)
 801265c:	f7fd fa05 	bl	800fa6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012660:	e026      	b.n	80126b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4413      	add	r3, r2
 8012668:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801266a:	4b14      	ldr	r3, [pc, #80]	; (80126bc <prvAddCurrentTaskToDelayedList+0x94>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012672:	68ba      	ldr	r2, [r7, #8]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	429a      	cmp	r2, r3
 8012678:	d209      	bcs.n	801268e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801267a:	4b12      	ldr	r3, [pc, #72]	; (80126c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <prvAddCurrentTaskToDelayedList+0x94>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	3304      	adds	r3, #4
 8012684:	4619      	mov	r1, r3
 8012686:	4610      	mov	r0, r2
 8012688:	f7fd fa13 	bl	800fab2 <vListInsert>
}
 801268c:	e010      	b.n	80126b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801268e:	4b0e      	ldr	r3, [pc, #56]	; (80126c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	4b0a      	ldr	r3, [pc, #40]	; (80126bc <prvAddCurrentTaskToDelayedList+0x94>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	3304      	adds	r3, #4
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f7fd fa09 	bl	800fab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80126a0:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68ba      	ldr	r2, [r7, #8]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d202      	bcs.n	80126b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80126aa:	4a08      	ldr	r2, [pc, #32]	; (80126cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	6013      	str	r3, [r2, #0]
}
 80126b0:	bf00      	nop
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	2002728c 	.word	0x2002728c
 80126bc:	20026db4 	.word	0x20026db4
 80126c0:	20027274 	.word	0x20027274
 80126c4:	20027244 	.word	0x20027244
 80126c8:	20027240 	.word	0x20027240
 80126cc:	200272a8 	.word	0x200272a8

080126d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b08a      	sub	sp, #40	; 0x28
 80126d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80126d6:	2300      	movs	r3, #0
 80126d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80126da:	f000 fac3 	bl	8012c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80126de:	4b1c      	ldr	r3, [pc, #112]	; (8012750 <xTimerCreateTimerTask+0x80>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d021      	beq.n	801272a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80126e6:	2300      	movs	r3, #0
 80126e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80126ea:	2300      	movs	r3, #0
 80126ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80126ee:	1d3a      	adds	r2, r7, #4
 80126f0:	f107 0108 	add.w	r1, r7, #8
 80126f4:	f107 030c 	add.w	r3, r7, #12
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fc ff93 	bl	800f624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80126fe:	6879      	ldr	r1, [r7, #4]
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	68fa      	ldr	r2, [r7, #12]
 8012704:	9202      	str	r2, [sp, #8]
 8012706:	9301      	str	r3, [sp, #4]
 8012708:	2302      	movs	r3, #2
 801270a:	9300      	str	r3, [sp, #0]
 801270c:	2300      	movs	r3, #0
 801270e:	460a      	mov	r2, r1
 8012710:	4910      	ldr	r1, [pc, #64]	; (8012754 <xTimerCreateTimerTask+0x84>)
 8012712:	4811      	ldr	r0, [pc, #68]	; (8012758 <xTimerCreateTimerTask+0x88>)
 8012714:	f7fe fd28 	bl	8011168 <xTaskCreateStatic>
 8012718:	4602      	mov	r2, r0
 801271a:	4b10      	ldr	r3, [pc, #64]	; (801275c <xTimerCreateTimerTask+0x8c>)
 801271c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801271e:	4b0f      	ldr	r3, [pc, #60]	; (801275c <xTimerCreateTimerTask+0x8c>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d001      	beq.n	801272a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012726:	2301      	movs	r3, #1
 8012728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d109      	bne.n	8012744 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012734:	f383 8811 	msr	BASEPRI, r3
 8012738:	f3bf 8f6f 	isb	sy
 801273c:	f3bf 8f4f 	dsb	sy
 8012740:	613b      	str	r3, [r7, #16]
 8012742:	e7fe      	b.n	8012742 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012744:	697b      	ldr	r3, [r7, #20]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3718      	adds	r7, #24
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	200272ec 	.word	0x200272ec
 8012754:	0801743c 	.word	0x0801743c
 8012758:	08012879 	.word	0x08012879
 801275c:	200272f0 	.word	0x200272f0

08012760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	; 0x28
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	607a      	str	r2, [r7, #4]
 801276c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801276e:	2300      	movs	r3, #0
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d109      	bne.n	801278c <xTimerGenericCommand+0x2c>
 8012778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277c:	f383 8811 	msr	BASEPRI, r3
 8012780:	f3bf 8f6f 	isb	sy
 8012784:	f3bf 8f4f 	dsb	sy
 8012788:	623b      	str	r3, [r7, #32]
 801278a:	e7fe      	b.n	801278a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801278c:	4b19      	ldr	r3, [pc, #100]	; (80127f4 <xTimerGenericCommand+0x94>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d02a      	beq.n	80127ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	2b05      	cmp	r3, #5
 80127a4:	dc18      	bgt.n	80127d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80127a6:	f7ff fbe9 	bl	8011f7c <xTaskGetSchedulerState>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	d109      	bne.n	80127c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80127b0:	4b10      	ldr	r3, [pc, #64]	; (80127f4 <xTimerGenericCommand+0x94>)
 80127b2:	6818      	ldr	r0, [r3, #0]
 80127b4:	f107 0110 	add.w	r1, r7, #16
 80127b8:	2300      	movs	r3, #0
 80127ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127bc:	f7fd fe52 	bl	8010464 <xQueueGenericSend>
 80127c0:	6278      	str	r0, [r7, #36]	; 0x24
 80127c2:	e012      	b.n	80127ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80127c4:	4b0b      	ldr	r3, [pc, #44]	; (80127f4 <xTimerGenericCommand+0x94>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	f107 0110 	add.w	r1, r7, #16
 80127cc:	2300      	movs	r3, #0
 80127ce:	2200      	movs	r2, #0
 80127d0:	f7fd fe48 	bl	8010464 <xQueueGenericSend>
 80127d4:	6278      	str	r0, [r7, #36]	; 0x24
 80127d6:	e008      	b.n	80127ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80127d8:	4b06      	ldr	r3, [pc, #24]	; (80127f4 <xTimerGenericCommand+0x94>)
 80127da:	6818      	ldr	r0, [r3, #0]
 80127dc:	f107 0110 	add.w	r1, r7, #16
 80127e0:	2300      	movs	r3, #0
 80127e2:	683a      	ldr	r2, [r7, #0]
 80127e4:	f7fd ff38 	bl	8010658 <xQueueGenericSendFromISR>
 80127e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3728      	adds	r7, #40	; 0x28
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	200272ec 	.word	0x200272ec

080127f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af02      	add	r7, sp, #8
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012802:	4b1c      	ldr	r3, [pc, #112]	; (8012874 <prvProcessExpiredTimer+0x7c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	68db      	ldr	r3, [r3, #12]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	3304      	adds	r3, #4
 8012810:	4618      	mov	r0, r3
 8012812:	f7fd f987 	bl	800fb24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	69db      	ldr	r3, [r3, #28]
 801281a:	2b01      	cmp	r3, #1
 801281c:	d121      	bne.n	8012862 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	699a      	ldr	r2, [r3, #24]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	18d1      	adds	r1, r2, r3
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	6978      	ldr	r0, [r7, #20]
 801282c:	f000 f8c8 	bl	80129c0 <prvInsertTimerInActiveList>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d015      	beq.n	8012862 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012836:	2300      	movs	r3, #0
 8012838:	9300      	str	r3, [sp, #0]
 801283a:	2300      	movs	r3, #0
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	2100      	movs	r1, #0
 8012840:	6978      	ldr	r0, [r7, #20]
 8012842:	f7ff ff8d 	bl	8012760 <xTimerGenericCommand>
 8012846:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d109      	bne.n	8012862 <prvProcessExpiredTimer+0x6a>
 801284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012852:	f383 8811 	msr	BASEPRI, r3
 8012856:	f3bf 8f6f 	isb	sy
 801285a:	f3bf 8f4f 	dsb	sy
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	e7fe      	b.n	8012860 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012866:	6978      	ldr	r0, [r7, #20]
 8012868:	4798      	blx	r3
}
 801286a:	bf00      	nop
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	200272e4 	.word	0x200272e4

08012878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012880:	f107 0308 	add.w	r3, r7, #8
 8012884:	4618      	mov	r0, r3
 8012886:	f000 f857 	bl	8012938 <prvGetNextExpireTime>
 801288a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	4619      	mov	r1, r3
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 f803 	bl	801289c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012896:	f000 f8d5 	bl	8012a44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801289a:	e7f1      	b.n	8012880 <prvTimerTask+0x8>

0801289c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80128a6:	f7fe fe93 	bl	80115d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80128aa:	f107 0308 	add.w	r3, r7, #8
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 f866 	bl	8012980 <prvSampleTimeNow>
 80128b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d130      	bne.n	801291e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10a      	bne.n	80128d8 <prvProcessTimerOrBlockTask+0x3c>
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d806      	bhi.n	80128d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80128ca:	f7fe fec7 	bl	801165c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80128ce:	68f9      	ldr	r1, [r7, #12]
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7ff ff91 	bl	80127f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80128d6:	e024      	b.n	8012922 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d008      	beq.n	80128f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80128de:	4b13      	ldr	r3, [pc, #76]	; (801292c <prvProcessTimerOrBlockTask+0x90>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	bf0c      	ite	eq
 80128e8:	2301      	moveq	r3, #1
 80128ea:	2300      	movne	r3, #0
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80128f0:	4b0f      	ldr	r3, [pc, #60]	; (8012930 <prvProcessTimerOrBlockTask+0x94>)
 80128f2:	6818      	ldr	r0, [r3, #0]
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	1ad3      	subs	r3, r2, r3
 80128fa:	683a      	ldr	r2, [r7, #0]
 80128fc:	4619      	mov	r1, r3
 80128fe:	f7fe fbff 	bl	8011100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012902:	f7fe feab 	bl	801165c <xTaskResumeAll>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d10a      	bne.n	8012922 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801290c:	4b09      	ldr	r3, [pc, #36]	; (8012934 <prvProcessTimerOrBlockTask+0x98>)
 801290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012912:	601a      	str	r2, [r3, #0]
 8012914:	f3bf 8f4f 	dsb	sy
 8012918:	f3bf 8f6f 	isb	sy
}
 801291c:	e001      	b.n	8012922 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801291e:	f7fe fe9d 	bl	801165c <xTaskResumeAll>
}
 8012922:	bf00      	nop
 8012924:	3710      	adds	r7, #16
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	200272e8 	.word	0x200272e8
 8012930:	200272ec 	.word	0x200272ec
 8012934:	e000ed04 	.word	0xe000ed04

08012938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012940:	4b0e      	ldr	r3, [pc, #56]	; (801297c <prvGetNextExpireTime+0x44>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	bf0c      	ite	eq
 801294a:	2301      	moveq	r3, #1
 801294c:	2300      	movne	r3, #0
 801294e:	b2db      	uxtb	r3, r3
 8012950:	461a      	mov	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d105      	bne.n	801296a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801295e:	4b07      	ldr	r3, [pc, #28]	; (801297c <prvGetNextExpireTime+0x44>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	60fb      	str	r3, [r7, #12]
 8012968:	e001      	b.n	801296e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801296a:	2300      	movs	r3, #0
 801296c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801296e:	68fb      	ldr	r3, [r7, #12]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	200272e4 	.word	0x200272e4

08012980 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012988:	f7fe ff04 	bl	8011794 <xTaskGetTickCount>
 801298c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801298e:	4b0b      	ldr	r3, [pc, #44]	; (80129bc <prvSampleTimeNow+0x3c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	429a      	cmp	r2, r3
 8012996:	d205      	bcs.n	80129a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012998:	f000 f904 	bl	8012ba4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2201      	movs	r2, #1
 80129a0:	601a      	str	r2, [r3, #0]
 80129a2:	e002      	b.n	80129aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2200      	movs	r2, #0
 80129a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80129aa:	4a04      	ldr	r2, [pc, #16]	; (80129bc <prvSampleTimeNow+0x3c>)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80129b0:	68fb      	ldr	r3, [r7, #12]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	200272f4 	.word	0x200272f4

080129c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	607a      	str	r2, [r7, #4]
 80129cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80129ce:	2300      	movs	r3, #0
 80129d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	68ba      	ldr	r2, [r7, #8]
 80129d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80129de:	68ba      	ldr	r2, [r7, #8]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d812      	bhi.n	8012a0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	1ad2      	subs	r2, r2, r3
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	699b      	ldr	r3, [r3, #24]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d302      	bcc.n	80129fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80129f4:	2301      	movs	r3, #1
 80129f6:	617b      	str	r3, [r7, #20]
 80129f8:	e01b      	b.n	8012a32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80129fa:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <prvInsertTimerInActiveList+0x7c>)
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	3304      	adds	r3, #4
 8012a02:	4619      	mov	r1, r3
 8012a04:	4610      	mov	r0, r2
 8012a06:	f7fd f854 	bl	800fab2 <vListInsert>
 8012a0a:	e012      	b.n	8012a32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d206      	bcs.n	8012a22 <prvInsertTimerInActiveList+0x62>
 8012a14:	68ba      	ldr	r2, [r7, #8]
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d302      	bcc.n	8012a22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	617b      	str	r3, [r7, #20]
 8012a20:	e007      	b.n	8012a32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a22:	4b07      	ldr	r3, [pc, #28]	; (8012a40 <prvInsertTimerInActiveList+0x80>)
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	3304      	adds	r3, #4
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	f7fd f840 	bl	800fab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012a32:	697b      	ldr	r3, [r7, #20]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3718      	adds	r7, #24
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	200272e8 	.word	0x200272e8
 8012a40:	200272e4 	.word	0x200272e4

08012a44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08e      	sub	sp, #56	; 0x38
 8012a48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a4a:	e099      	b.n	8012b80 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	da17      	bge.n	8012a82 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012a52:	1d3b      	adds	r3, r7, #4
 8012a54:	3304      	adds	r3, #4
 8012a56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d109      	bne.n	8012a72 <prvProcessReceivedCommands+0x2e>
 8012a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	61fb      	str	r3, [r7, #28]
 8012a70:	e7fe      	b.n	8012a70 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a78:	6850      	ldr	r0, [r2, #4]
 8012a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a7c:	6892      	ldr	r2, [r2, #8]
 8012a7e:	4611      	mov	r1, r2
 8012a80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	db7a      	blt.n	8012b7e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	695b      	ldr	r3, [r3, #20]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d004      	beq.n	8012a9e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a96:	3304      	adds	r3, #4
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fd f843 	bl	800fb24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a9e:	463b      	mov	r3, r7
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ff ff6d 	bl	8012980 <prvSampleTimeNow>
 8012aa6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b09      	cmp	r3, #9
 8012aac:	d868      	bhi.n	8012b80 <prvProcessReceivedCommands+0x13c>
 8012aae:	a201      	add	r2, pc, #4	; (adr r2, 8012ab4 <prvProcessReceivedCommands+0x70>)
 8012ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab4:	08012add 	.word	0x08012add
 8012ab8:	08012add 	.word	0x08012add
 8012abc:	08012add 	.word	0x08012add
 8012ac0:	08012b81 	.word	0x08012b81
 8012ac4:	08012b37 	.word	0x08012b37
 8012ac8:	08012b6d 	.word	0x08012b6d
 8012acc:	08012add 	.word	0x08012add
 8012ad0:	08012add 	.word	0x08012add
 8012ad4:	08012b81 	.word	0x08012b81
 8012ad8:	08012b37 	.word	0x08012b37
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	699b      	ldr	r3, [r3, #24]
 8012ae2:	18d1      	adds	r1, r2, r3
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aea:	f7ff ff69 	bl	80129c0 <prvInsertTimerInActiveList>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d045      	beq.n	8012b80 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012afa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afe:	69db      	ldr	r3, [r3, #28]
 8012b00:	2b01      	cmp	r3, #1
 8012b02:	d13d      	bne.n	8012b80 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b08:	699b      	ldr	r3, [r3, #24]
 8012b0a:	441a      	add	r2, r3
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	9300      	str	r3, [sp, #0]
 8012b10:	2300      	movs	r3, #0
 8012b12:	2100      	movs	r1, #0
 8012b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b16:	f7ff fe23 	bl	8012760 <xTimerGenericCommand>
 8012b1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d12e      	bne.n	8012b80 <prvProcessReceivedCommands+0x13c>
 8012b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	61bb      	str	r3, [r7, #24]
 8012b34:	e7fe      	b.n	8012b34 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	699b      	ldr	r3, [r3, #24]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d109      	bne.n	8012b58 <prvProcessReceivedCommands+0x114>
 8012b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	617b      	str	r3, [r7, #20]
 8012b56:	e7fe      	b.n	8012b56 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5a:	699a      	ldr	r2, [r3, #24]
 8012b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5e:	18d1      	adds	r1, r2, r3
 8012b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b66:	f7ff ff2b 	bl	80129c0 <prvInsertTimerInActiveList>
					break;
 8012b6a:	e009      	b.n	8012b80 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d104      	bne.n	8012b80 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8012b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b78:	f7fc fe34 	bl	800f7e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012b7c:	e000      	b.n	8012b80 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012b7e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012b80:	4b07      	ldr	r3, [pc, #28]	; (8012ba0 <prvProcessReceivedCommands+0x15c>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	1d39      	adds	r1, r7, #4
 8012b86:	2200      	movs	r2, #0
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fd fe83 	bl	8010894 <xQueueReceive>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f47f af5b 	bne.w	8012a4c <prvProcessReceivedCommands+0x8>
	}
}
 8012b96:	bf00      	nop
 8012b98:	3730      	adds	r7, #48	; 0x30
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	200272ec 	.word	0x200272ec

08012ba4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b088      	sub	sp, #32
 8012ba8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012baa:	e044      	b.n	8012c36 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012bac:	4b2b      	ldr	r3, [pc, #172]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012bb6:	4b29      	ldr	r3, [pc, #164]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3304      	adds	r3, #4
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fc ffad 	bl	800fb24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	69db      	ldr	r3, [r3, #28]
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d12d      	bne.n	8012c36 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	699b      	ldr	r3, [r3, #24]
 8012bde:	693a      	ldr	r2, [r7, #16]
 8012be0:	4413      	add	r3, r2
 8012be2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d90e      	bls.n	8012c0a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012bf8:	4b18      	ldr	r3, [pc, #96]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	3304      	adds	r3, #4
 8012c00:	4619      	mov	r1, r3
 8012c02:	4610      	mov	r0, r2
 8012c04:	f7fc ff55 	bl	800fab2 <vListInsert>
 8012c08:	e015      	b.n	8012c36 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	2300      	movs	r3, #0
 8012c10:	693a      	ldr	r2, [r7, #16]
 8012c12:	2100      	movs	r1, #0
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f7ff fda3 	bl	8012760 <xTimerGenericCommand>
 8012c1a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d109      	bne.n	8012c36 <prvSwitchTimerLists+0x92>
 8012c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c26:	f383 8811 	msr	BASEPRI, r3
 8012c2a:	f3bf 8f6f 	isb	sy
 8012c2e:	f3bf 8f4f 	dsb	sy
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	e7fe      	b.n	8012c34 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c36:	4b09      	ldr	r3, [pc, #36]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d1b5      	bne.n	8012bac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012c40:	4b06      	ldr	r3, [pc, #24]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012c46:	4b06      	ldr	r3, [pc, #24]	; (8012c60 <prvSwitchTimerLists+0xbc>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4a04      	ldr	r2, [pc, #16]	; (8012c5c <prvSwitchTimerLists+0xb8>)
 8012c4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012c4e:	4a04      	ldr	r2, [pc, #16]	; (8012c60 <prvSwitchTimerLists+0xbc>)
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	6013      	str	r3, [r2, #0]
}
 8012c54:	bf00      	nop
 8012c56:	3718      	adds	r7, #24
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	200272e4 	.word	0x200272e4
 8012c60:	200272e8 	.word	0x200272e8

08012c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012c6a:	f7fd f8af 	bl	800fdcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012c6e:	4b15      	ldr	r3, [pc, #84]	; (8012cc4 <prvCheckForValidListAndQueue+0x60>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d120      	bne.n	8012cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012c76:	4814      	ldr	r0, [pc, #80]	; (8012cc8 <prvCheckForValidListAndQueue+0x64>)
 8012c78:	f7fc feca 	bl	800fa10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012c7c:	4813      	ldr	r0, [pc, #76]	; (8012ccc <prvCheckForValidListAndQueue+0x68>)
 8012c7e:	f7fc fec7 	bl	800fa10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012c82:	4b13      	ldr	r3, [pc, #76]	; (8012cd0 <prvCheckForValidListAndQueue+0x6c>)
 8012c84:	4a10      	ldr	r2, [pc, #64]	; (8012cc8 <prvCheckForValidListAndQueue+0x64>)
 8012c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012c88:	4b12      	ldr	r3, [pc, #72]	; (8012cd4 <prvCheckForValidListAndQueue+0x70>)
 8012c8a:	4a10      	ldr	r2, [pc, #64]	; (8012ccc <prvCheckForValidListAndQueue+0x68>)
 8012c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012c8e:	2300      	movs	r3, #0
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <prvCheckForValidListAndQueue+0x74>)
 8012c94:	4a11      	ldr	r2, [pc, #68]	; (8012cdc <prvCheckForValidListAndQueue+0x78>)
 8012c96:	2110      	movs	r1, #16
 8012c98:	200a      	movs	r0, #10
 8012c9a:	f7fd f9f5 	bl	8010088 <xQueueGenericCreateStatic>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	4b08      	ldr	r3, [pc, #32]	; (8012cc4 <prvCheckForValidListAndQueue+0x60>)
 8012ca2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012ca4:	4b07      	ldr	r3, [pc, #28]	; (8012cc4 <prvCheckForValidListAndQueue+0x60>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d005      	beq.n	8012cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012cac:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <prvCheckForValidListAndQueue+0x60>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	490b      	ldr	r1, [pc, #44]	; (8012ce0 <prvCheckForValidListAndQueue+0x7c>)
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fe f9d2 	bl	801105c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012cb8:	f7fd f8b6 	bl	800fe28 <vPortExitCritical>
}
 8012cbc:	bf00      	nop
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	bf00      	nop
 8012cc4:	200272ec 	.word	0x200272ec
 8012cc8:	200272bc 	.word	0x200272bc
 8012ccc:	200272d0 	.word	0x200272d0
 8012cd0:	200272e4 	.word	0x200272e4
 8012cd4:	200272e8 	.word	0x200272e8
 8012cd8:	20027398 	.word	0x20027398
 8012cdc:	200272f8 	.word	0x200272f8
 8012ce0:	08017444 	.word	0x08017444

08012ce4 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	460b      	mov	r3, r1
 8012cee:	70fb      	strb	r3, [r7, #3]
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012cf4:	f002 faca 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012cf8:	f002 fa66 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012cfc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f062 0260 	orn	r2, r2, #96	; 0x60
 8012d06:	701a      	strb	r2, [r3, #0]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	705a      	strb	r2, [r3, #1]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	709a      	strb	r2, [r3, #2]
 8012d10:	2200      	movs	r2, #0
 8012d12:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2200      	movs	r2, #0
 8012d18:	f042 0203 	orr.w	r2, r2, #3
 8012d1c:	711a      	strb	r2, [r3, #4]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	715a      	strb	r2, [r3, #5]
 8012d22:	2200      	movs	r2, #0
 8012d24:	719a      	strb	r2, [r3, #6]
 8012d26:	2200      	movs	r2, #0
 8012d28:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8012d30:	78fa      	ldrb	r2, [r7, #3]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8012d36:	78ba      	ldrb	r2, [r7, #2]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8012d3c:	f002 fa68 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d40:	f002 fa4e 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d44:	60f8      	str	r0, [r7, #12]
}
 8012d46:	bf00      	nop
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b086      	sub	sp, #24
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	60f8      	str	r0, [r7, #12]
 8012d56:	60b9      	str	r1, [r7, #8]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8012d5c:	f002 fa96 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d60:	f002 fa32 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012d64:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8012d6e:	701a      	strb	r2, [r3, #0]
 8012d70:	2200      	movs	r2, #0
 8012d72:	705a      	strb	r2, [r3, #1]
 8012d74:	2200      	movs	r2, #0
 8012d76:	709a      	strb	r2, [r3, #2]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f042 0203 	orr.w	r2, r2, #3
 8012d84:	711a      	strb	r2, [r3, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	715a      	strb	r2, [r3, #5]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	719a      	strb	r2, [r3, #6]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012d92:	68fa      	ldr	r2, [r7, #12]
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8012d9e:	79fa      	ldrb	r2, [r7, #7]
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8012da4:	f002 fa34 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012da8:	f002 fa1a 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012dac:	6178      	str	r0, [r7, #20]
}
 8012dae:	bf00      	nop
 8012db0:	3718      	adds	r7, #24
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b084      	sub	sp, #16
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012dc2:	f002 fa63 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012dc6:	f002 f9ff 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012dca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8012dd4:	701a      	strb	r2, [r3, #0]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	705a      	strb	r2, [r3, #1]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	709a      	strb	r2, [r3, #2]
 8012dde:	2200      	movs	r2, #0
 8012de0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f042 0202 	orr.w	r2, r2, #2
 8012dea:	711a      	strb	r2, [r3, #4]
 8012dec:	2200      	movs	r2, #0
 8012dee:	715a      	strb	r2, [r3, #5]
 8012df0:	2200      	movs	r2, #0
 8012df2:	719a      	strb	r2, [r3, #6]
 8012df4:	2200      	movs	r2, #0
 8012df6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8012dfe:	78fa      	ldrb	r2, [r7, #3]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012e04:	f002 fa04 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e08:	f002 f9ea 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e0c:	60f8      	str	r0, [r7, #12]
}
 8012e0e:	bf00      	nop
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b084      	sub	sp, #16
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	460b      	mov	r3, r1
 8012e20:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012e22:	f002 fa33 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e26:	f002 f9cf 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012e2a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8012e34:	701a      	strb	r2, [r3, #0]
 8012e36:	2200      	movs	r2, #0
 8012e38:	705a      	strb	r2, [r3, #1]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	709a      	strb	r2, [r3, #2]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2200      	movs	r2, #0
 8012e46:	f042 0202 	orr.w	r2, r2, #2
 8012e4a:	711a      	strb	r2, [r3, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	715a      	strb	r2, [r3, #5]
 8012e50:	2200      	movs	r2, #0
 8012e52:	719a      	strb	r2, [r3, #6]
 8012e54:	2200      	movs	r2, #0
 8012e56:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8012e5e:	78fa      	ldrb	r2, [r7, #3]
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012e64:	f002 f9d4 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e68:	f002 f9ba 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e6c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	b2db      	uxtb	r3, r3
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3710      	adds	r7, #16
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012e86:	f002 fa01 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e8a:	f002 f99d 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012e8e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2200      	movs	r2, #0
 8012e94:	f062 0250 	orn	r2, r2, #80	; 0x50
 8012e98:	701a      	strb	r2, [r3, #0]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	705a      	strb	r2, [r3, #1]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	709a      	strb	r2, [r3, #2]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f042 0202 	orr.w	r2, r2, #2
 8012eae:	711a      	strb	r2, [r3, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	715a      	strb	r2, [r3, #5]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	719a      	strb	r2, [r3, #6]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012ec8:	f002 f9a2 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012ecc:	f002 f988 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012ed0:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	689b      	ldr	r3, [r3, #8]
 8012ed6:	b2db      	uxtb	r3, r3
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3710      	adds	r7, #16
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012ee8:	f002 f9d0 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012eec:	f002 f96c 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012ef0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8012efa:	701a      	strb	r2, [r3, #0]
 8012efc:	2200      	movs	r2, #0
 8012efe:	705a      	strb	r2, [r3, #1]
 8012f00:	2200      	movs	r2, #0
 8012f02:	709a      	strb	r2, [r3, #2]
 8012f04:	2200      	movs	r2, #0
 8012f06:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f042 0201 	orr.w	r2, r2, #1
 8012f10:	711a      	strb	r2, [r3, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	715a      	strb	r2, [r3, #5]
 8012f16:	2200      	movs	r2, #0
 8012f18:	719a      	strb	r2, [r3, #6]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012f24:	f002 f974 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f28:	f002 f95a 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f2c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	b2db      	uxtb	r3, r3
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3710      	adds	r7, #16
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	460b      	mov	r3, r1
 8012f46:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012f48:	f002 f9a0 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f4c:	f002 f93c 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012f50:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2200      	movs	r2, #0
 8012f56:	f062 0256 	orn	r2, r2, #86	; 0x56
 8012f5a:	701a      	strb	r2, [r3, #0]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	705a      	strb	r2, [r3, #1]
 8012f60:	2200      	movs	r2, #0
 8012f62:	709a      	strb	r2, [r3, #2]
 8012f64:	2200      	movs	r2, #0
 8012f66:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f042 0202 	orr.w	r2, r2, #2
 8012f70:	711a      	strb	r2, [r3, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	715a      	strb	r2, [r3, #5]
 8012f76:	2200      	movs	r2, #0
 8012f78:	719a      	strb	r2, [r3, #6]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8012f84:	887a      	ldrh	r2, [r7, #2]
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012f8a:	f002 f941 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f8e:	f002 f927 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f92:	60f8      	str	r0, [r7, #12]
}
 8012f94:	bf00      	nop
 8012f96:	3710      	adds	r7, #16
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012fa4:	f002 f972 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012fa8:	f002 f90e 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8012fac:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f062 0261 	orn	r2, r2, #97	; 0x61
 8012fb6:	701a      	strb	r2, [r3, #0]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	705a      	strb	r2, [r3, #1]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	709a      	strb	r2, [r3, #2]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	f042 0201 	orr.w	r2, r2, #1
 8012fcc:	711a      	strb	r2, [r3, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	715a      	strb	r2, [r3, #5]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	719a      	strb	r2, [r3, #6]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012fe0:	f002 f916 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fe4:	f002 f8fc 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fe8:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	b2db      	uxtb	r3, r3
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3710      	adds	r7, #16
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013000:	f002 f944 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013004:	f002 f8e0 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013008:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8013012:	701a      	strb	r2, [r3, #0]
 8013014:	2200      	movs	r2, #0
 8013016:	705a      	strb	r2, [r3, #1]
 8013018:	2200      	movs	r2, #0
 801301a:	709a      	strb	r2, [r3, #2]
 801301c:	2200      	movs	r2, #0
 801301e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2200      	movs	r2, #0
 8013024:	f042 0201 	orr.w	r2, r2, #1
 8013028:	711a      	strb	r2, [r3, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	715a      	strb	r2, [r3, #5]
 801302e:	2200      	movs	r2, #0
 8013030:	719a      	strb	r2, [r3, #6]
 8013032:	2200      	movs	r2, #0
 8013034:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801303c:	f002 f8e8 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013040:	f002 f8ce 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013044:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	b2db      	uxtb	r3, r3
}
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801305c:	f002 f916 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013060:	f002 f8b2 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013064:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2200      	movs	r2, #0
 801306a:	f062 0255 	orn	r2, r2, #85	; 0x55
 801306e:	701a      	strb	r2, [r3, #0]
 8013070:	2200      	movs	r2, #0
 8013072:	705a      	strb	r2, [r3, #1]
 8013074:	2200      	movs	r2, #0
 8013076:	709a      	strb	r2, [r3, #2]
 8013078:	2200      	movs	r2, #0
 801307a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	f042 0201 	orr.w	r2, r2, #1
 8013084:	711a      	strb	r2, [r3, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	715a      	strb	r2, [r3, #5]
 801308a:	2200      	movs	r2, #0
 801308c:	719a      	strb	r2, [r3, #6]
 801308e:	2200      	movs	r2, #0
 8013090:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013098:	f002 f8ba 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801309c:	f002 f8a0 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130a0:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	689b      	ldr	r3, [r3, #8]
 80130a6:	b29b      	uxth	r3, r3
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80130b8:	f002 f8e8 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80130bc:	f002 f884 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80130c0:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f062 0254 	orn	r2, r2, #84	; 0x54
 80130ca:	701a      	strb	r2, [r3, #0]
 80130cc:	2200      	movs	r2, #0
 80130ce:	705a      	strb	r2, [r3, #1]
 80130d0:	2200      	movs	r2, #0
 80130d2:	709a      	strb	r2, [r3, #2]
 80130d4:	2200      	movs	r2, #0
 80130d6:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	f042 0201 	orr.w	r2, r2, #1
 80130e0:	711a      	strb	r2, [r3, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	715a      	strb	r2, [r3, #5]
 80130e6:	2200      	movs	r2, #0
 80130e8:	719a      	strb	r2, [r3, #6]
 80130ea:	2200      	movs	r2, #0
 80130ec:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80130f4:	f002 f88c 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80130f8:	f002 f872 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130fc:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	b2db      	uxtb	r3, r3
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013114:	f002 f8ba 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013118:	f002 f856 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801311c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2200      	movs	r2, #0
 8013122:	f062 0253 	orn	r2, r2, #83	; 0x53
 8013126:	701a      	strb	r2, [r3, #0]
 8013128:	2200      	movs	r2, #0
 801312a:	705a      	strb	r2, [r3, #1]
 801312c:	2200      	movs	r2, #0
 801312e:	709a      	strb	r2, [r3, #2]
 8013130:	2200      	movs	r2, #0
 8013132:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2200      	movs	r2, #0
 8013138:	f042 0201 	orr.w	r2, r2, #1
 801313c:	711a      	strb	r2, [r3, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	715a      	strb	r2, [r3, #5]
 8013142:	2200      	movs	r2, #0
 8013144:	719a      	strb	r2, [r3, #6]
 8013146:	2200      	movs	r2, #0
 8013148:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013150:	f002 f85e 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013154:	f002 f844 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013158:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	689b      	ldr	r3, [r3, #8]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8013170:	f002 f88c 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013174:	f002 f828 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013178:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2200      	movs	r2, #0
 801317e:	f062 0259 	orn	r2, r2, #89	; 0x59
 8013182:	701a      	strb	r2, [r3, #0]
 8013184:	2200      	movs	r2, #0
 8013186:	705a      	strb	r2, [r3, #1]
 8013188:	2200      	movs	r2, #0
 801318a:	709a      	strb	r2, [r3, #2]
 801318c:	2200      	movs	r2, #0
 801318e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	f042 0201 	orr.w	r2, r2, #1
 8013198:	711a      	strb	r2, [r3, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	715a      	strb	r2, [r3, #5]
 801319e:	2200      	movs	r2, #0
 80131a0:	719a      	strb	r2, [r3, #6]
 80131a2:	2200      	movs	r2, #0
 80131a4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80131ac:	f002 f830 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80131b0:	f002 f816 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80131b4:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	689b      	ldr	r3, [r3, #8]

}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3710      	adds	r7, #16
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	b086      	sub	sp, #24
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	60f8      	str	r0, [r7, #12]
 80131ca:	60b9      	str	r1, [r7, #8]
 80131cc:	607a      	str	r2, [r7, #4]
 80131ce:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 80131d0:	f002 f85c 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80131d4:	f001 fff8 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80131d8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2200      	movs	r2, #0
 80131de:	f062 0258 	orn	r2, r2, #88	; 0x58
 80131e2:	701a      	strb	r2, [r3, #0]
 80131e4:	2200      	movs	r2, #0
 80131e6:	705a      	strb	r2, [r3, #1]
 80131e8:	2200      	movs	r2, #0
 80131ea:	709a      	strb	r2, [r3, #2]
 80131ec:	2200      	movs	r2, #0
 80131ee:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f042 0203 	orr.w	r2, r2, #3
 80131f8:	711a      	strb	r2, [r3, #4]
 80131fa:	2200      	movs	r2, #0
 80131fc:	715a      	strb	r2, [r3, #5]
 80131fe:	2200      	movs	r2, #0
 8013200:	719a      	strb	r2, [r3, #6]
 8013202:	2200      	movs	r2, #0
 8013204:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013206:	68ba      	ldr	r2, [r7, #8]
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8013218:	6a3a      	ldr	r2, [r7, #32]
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 801321e:	f001 fff7 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013222:	f001 ffdd 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013226:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	689b      	ldr	r3, [r3, #8]
 801322c:	b2db      	uxtb	r3, r3
}
 801322e:	4618      	mov	r0, r3
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b084      	sub	sp, #16
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
 801323e:	460b      	mov	r3, r1
 8013240:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8013242:	f002 f823 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013246:	f001 ffbf 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801324a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2200      	movs	r2, #0
 8013250:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8013254:	701a      	strb	r2, [r3, #0]
 8013256:	2200      	movs	r2, #0
 8013258:	705a      	strb	r2, [r3, #1]
 801325a:	2200      	movs	r2, #0
 801325c:	709a      	strb	r2, [r3, #2]
 801325e:	2200      	movs	r2, #0
 8013260:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2200      	movs	r2, #0
 8013266:	f042 0201 	orr.w	r2, r2, #1
 801326a:	711a      	strb	r2, [r3, #4]
 801326c:	2200      	movs	r2, #0
 801326e:	715a      	strb	r2, [r3, #5]
 8013270:	2200      	movs	r2, #0
 8013272:	719a      	strb	r2, [r3, #6]
 8013274:	2200      	movs	r2, #0
 8013276:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8013278:	887a      	ldrh	r2, [r7, #2]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801327e:	f001 ffc7 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013282:	f001 ffad 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013286:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	689b      	ldr	r3, [r3, #8]
 801328c:	b2db      	uxtb	r3, r3
}
 801328e:	4618      	mov	r0, r3
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}

08013296 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b084      	sub	sp, #16
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
 801329e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80132a0:	f001 fff4 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80132a4:	f001 ff90 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80132a8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	f062 0249 	orn	r2, r2, #73	; 0x49
 80132b2:	701a      	strb	r2, [r3, #0]
 80132b4:	2200      	movs	r2, #0
 80132b6:	705a      	strb	r2, [r3, #1]
 80132b8:	2200      	movs	r2, #0
 80132ba:	709a      	strb	r2, [r3, #2]
 80132bc:	2200      	movs	r2, #0
 80132be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2200      	movs	r2, #0
 80132c4:	f042 0201 	orr.w	r2, r2, #1
 80132c8:	711a      	strb	r2, [r3, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	715a      	strb	r2, [r3, #5]
 80132ce:	2200      	movs	r2, #0
 80132d0:	719a      	strb	r2, [r3, #6]
 80132d2:	2200      	movs	r2, #0
 80132d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 80132d6:	683a      	ldr	r2, [r7, #0]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80132dc:	f001 ff98 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132e0:	f001 ff7e 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132e4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	b2db      	uxtb	r3, r3
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013300:	f001 ffc4 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013304:	f001 ff60 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013308:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	2200      	movs	r2, #0
 801330e:	f062 0257 	orn	r2, r2, #87	; 0x57
 8013312:	701a      	strb	r2, [r3, #0]
 8013314:	2200      	movs	r2, #0
 8013316:	705a      	strb	r2, [r3, #1]
 8013318:	2200      	movs	r2, #0
 801331a:	709a      	strb	r2, [r3, #2]
 801331c:	2200      	movs	r2, #0
 801331e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	2200      	movs	r2, #0
 8013324:	f042 0202 	orr.w	r2, r2, #2
 8013328:	711a      	strb	r2, [r3, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	715a      	strb	r2, [r3, #5]
 801332e:	2200      	movs	r2, #0
 8013330:	719a      	strb	r2, [r3, #6]
 8013332:	2200      	movs	r2, #0
 8013334:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8013342:	f001 ff65 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013346:	f001 ff4b 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801334a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	b2db      	uxtb	r3, r3
}
 8013352:	4618      	mov	r0, r3
 8013354:	3718      	adds	r7, #24
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b082      	sub	sp, #8
 801335e:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8013360:	f001 ff94 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013364:	f001 ff30 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013368:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8013372:	701a      	strb	r2, [r3, #0]
 8013374:	2200      	movs	r2, #0
 8013376:	705a      	strb	r2, [r3, #1]
 8013378:	2200      	movs	r2, #0
 801337a:	709a      	strb	r2, [r3, #2]
 801337c:	2200      	movs	r2, #0
 801337e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	711a      	strb	r2, [r3, #4]
 8013386:	2200      	movs	r2, #0
 8013388:	715a      	strb	r2, [r3, #5]
 801338a:	2200      	movs	r2, #0
 801338c:	719a      	strb	r2, [r3, #6]
 801338e:	2200      	movs	r2, #0
 8013390:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8013392:	f001 ff3d 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013396:	f001 ff23 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801339a:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	689b      	ldr	r3, [r3, #8]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80133b0:	f001 ff6c 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80133b4:	f001 ff08 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80133b8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2200      	movs	r2, #0
 80133be:	f062 0269 	orn	r2, r2, #105	; 0x69
 80133c2:	701a      	strb	r2, [r3, #0]
 80133c4:	2200      	movs	r2, #0
 80133c6:	705a      	strb	r2, [r3, #1]
 80133c8:	2200      	movs	r2, #0
 80133ca:	709a      	strb	r2, [r3, #2]
 80133cc:	2200      	movs	r2, #0
 80133ce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2200      	movs	r2, #0
 80133d4:	711a      	strb	r2, [r3, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	715a      	strb	r2, [r3, #5]
 80133da:	2200      	movs	r2, #0
 80133dc:	719a      	strb	r2, [r3, #6]
 80133de:	2200      	movs	r2, #0
 80133e0:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80133e2:	f001 ff15 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80133e6:	f001 fefb 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80133ea:	60f8      	str	r0, [r7, #12]
}
 80133ec:	bf00      	nop
 80133ee:	3710      	adds	r7, #16
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}

080133f4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b086      	sub	sp, #24
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	60b9      	str	r1, [r7, #8]
 80133fe:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8013400:	f001 ff44 	bl	801528c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8013404:	4a15      	ldr	r2, [pc, #84]	; (801345c <otSetStateChangedCallback+0x68>)
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801340a:	f001 fedd 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801340e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2200      	movs	r2, #0
 8013414:	f062 0268 	orn	r2, r2, #104	; 0x68
 8013418:	701a      	strb	r2, [r3, #0]
 801341a:	2200      	movs	r2, #0
 801341c:	705a      	strb	r2, [r3, #1]
 801341e:	2200      	movs	r2, #0
 8013420:	709a      	strb	r2, [r3, #2]
 8013422:	2200      	movs	r2, #0
 8013424:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	2200      	movs	r2, #0
 801342a:	f042 0201 	orr.w	r2, r2, #1
 801342e:	711a      	strb	r2, [r3, #4]
 8013430:	2200      	movs	r2, #0
 8013432:	715a      	strb	r2, [r3, #5]
 8013434:	2200      	movs	r2, #0
 8013436:	719a      	strb	r2, [r3, #6]
 8013438:	2200      	movs	r2, #0
 801343a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013442:	f001 fee5 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013446:	f001 fecb 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801344a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	b2db      	uxtb	r3, r3
}
 8013452:	4618      	mov	r0, r3
 8013454:	3718      	adds	r7, #24
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	200273e8 	.word	0x200273e8

08013460 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013468:	f001 ff10 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801346c:	f001 feac 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013470:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2200      	movs	r2, #0
 8013476:	f062 0264 	orn	r2, r2, #100	; 0x64
 801347a:	701a      	strb	r2, [r3, #0]
 801347c:	2200      	movs	r2, #0
 801347e:	705a      	strb	r2, [r3, #1]
 8013480:	2200      	movs	r2, #0
 8013482:	709a      	strb	r2, [r3, #2]
 8013484:	2200      	movs	r2, #0
 8013486:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	711a      	strb	r2, [r3, #4]
 801348e:	2200      	movs	r2, #0
 8013490:	715a      	strb	r2, [r3, #5]
 8013492:	2200      	movs	r2, #0
 8013494:	719a      	strb	r2, [r3, #6]
 8013496:	2200      	movs	r2, #0
 8013498:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801349a:	f001 feb9 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801349e:	f001 fe9f 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80134a2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	b2db      	uxtb	r3, r3
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3710      	adds	r7, #16
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b084      	sub	sp, #16
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
 80134ba:	460b      	mov	r3, r1
 80134bc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80134be:	f001 fee5 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80134c2:	f001 fe81 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80134c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80134d0:	701a      	strb	r2, [r3, #0]
 80134d2:	2200      	movs	r2, #0
 80134d4:	705a      	strb	r2, [r3, #1]
 80134d6:	2200      	movs	r2, #0
 80134d8:	709a      	strb	r2, [r3, #2]
 80134da:	2200      	movs	r2, #0
 80134dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2200      	movs	r2, #0
 80134e2:	f042 0201 	orr.w	r2, r2, #1
 80134e6:	711a      	strb	r2, [r3, #4]
 80134e8:	2200      	movs	r2, #0
 80134ea:	715a      	strb	r2, [r3, #5]
 80134ec:	2200      	movs	r2, #0
 80134ee:	719a      	strb	r2, [r3, #6]
 80134f0:	2200      	movs	r2, #0
 80134f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80134f4:	78fa      	ldrb	r2, [r7, #3]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80134fa:	f001 fe89 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80134fe:	f001 fe6f 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013502:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	689b      	ldr	r3, [r3, #8]
 8013508:	b2db      	uxtb	r3, r3
}
 801350a:	4618      	mov	r0, r3
 801350c:	3710      	adds	r7, #16
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b084      	sub	sp, #16
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801351a:	f001 feb7 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801351e:	f001 fe53 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013522:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 801352c:	701a      	strb	r2, [r3, #0]
 801352e:	2200      	movs	r2, #0
 8013530:	705a      	strb	r2, [r3, #1]
 8013532:	2200      	movs	r2, #0
 8013534:	709a      	strb	r2, [r3, #2]
 8013536:	2200      	movs	r2, #0
 8013538:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2200      	movs	r2, #0
 801353e:	711a      	strb	r2, [r3, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	715a      	strb	r2, [r3, #5]
 8013544:	2200      	movs	r2, #0
 8013546:	719a      	strb	r2, [r3, #6]
 8013548:	2200      	movs	r2, #0
 801354a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 801354c:	f001 fe60 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013550:	f001 fe46 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013554:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	bf14      	ite	ne
 801355e:	2301      	movne	r3, #1
 8013560:	2300      	moveq	r3, #0
 8013562:	b2db      	uxtb	r3, r3
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013574:	f001 fe8a 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013578:	f001 fe26 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801357c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2200      	movs	r2, #0
 8013582:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8013586:	701a      	strb	r2, [r3, #0]
 8013588:	2200      	movs	r2, #0
 801358a:	705a      	strb	r2, [r3, #1]
 801358c:	2200      	movs	r2, #0
 801358e:	709a      	strb	r2, [r3, #2]
 8013590:	2200      	movs	r2, #0
 8013592:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2200      	movs	r2, #0
 8013598:	711a      	strb	r2, [r3, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	715a      	strb	r2, [r3, #5]
 801359e:	2200      	movs	r2, #0
 80135a0:	719a      	strb	r2, [r3, #6]
 80135a2:	2200      	movs	r2, #0
 80135a4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80135a6:	f001 fe33 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80135aa:	f001 fe19 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80135ae:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	689b      	ldr	r3, [r3, #8]
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3710      	adds	r7, #16
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80135c6:	f001 fe61 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80135ca:	f001 fdfd 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80135ce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2200      	movs	r2, #0
 80135d4:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80135d8:	701a      	strb	r2, [r3, #0]
 80135da:	2200      	movs	r2, #0
 80135dc:	705a      	strb	r2, [r3, #1]
 80135de:	2200      	movs	r2, #0
 80135e0:	709a      	strb	r2, [r3, #2]
 80135e2:	2200      	movs	r2, #0
 80135e4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2200      	movs	r2, #0
 80135ea:	f042 0202 	orr.w	r2, r2, #2
 80135ee:	711a      	strb	r2, [r3, #4]
 80135f0:	2200      	movs	r2, #0
 80135f2:	715a      	strb	r2, [r3, #5]
 80135f4:	2200      	movs	r2, #0
 80135f6:	719a      	strb	r2, [r3, #6]
 80135f8:	2200      	movs	r2, #0
 80135fa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8013602:	683a      	ldr	r2, [r7, #0]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8013608:	f001 fe02 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801360c:	f001 fde8 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013610:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	b2db      	uxtb	r3, r3
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801362c:	f001 fe2e 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013630:	f001 fdca 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013634:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2200      	movs	r2, #0
 801363a:	f042 0208 	orr.w	r2, r2, #8
 801363e:	701a      	strb	r2, [r3, #0]
 8013640:	2200      	movs	r2, #0
 8013642:	705a      	strb	r2, [r3, #1]
 8013644:	2200      	movs	r2, #0
 8013646:	709a      	strb	r2, [r3, #2]
 8013648:	2200      	movs	r2, #0
 801364a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2200      	movs	r2, #0
 8013650:	f042 0201 	orr.w	r2, r2, #1
 8013654:	711a      	strb	r2, [r3, #4]
 8013656:	2200      	movs	r2, #0
 8013658:	715a      	strb	r2, [r3, #5]
 801365a:	2200      	movs	r2, #0
 801365c:	719a      	strb	r2, [r3, #6]
 801365e:	2200      	movs	r2, #0
 8013660:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8013662:	78fa      	ldrb	r2, [r7, #3]
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013668:	f001 fdd2 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801366c:	f001 fdb8 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013670:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	689b      	ldr	r3, [r3, #8]
 8013676:	b2db      	uxtb	r3, r3
}
 8013678:	4618      	mov	r0, r3
 801367a:	3710      	adds	r7, #16
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	460b      	mov	r3, r1
 801368a:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 801368c:	f001 fdfe 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013690:	f001 fd9a 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013694:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2200      	movs	r2, #0
 801369a:	f042 020f 	orr.w	r2, r2, #15
 801369e:	701a      	strb	r2, [r3, #0]
 80136a0:	2200      	movs	r2, #0
 80136a2:	705a      	strb	r2, [r3, #1]
 80136a4:	2200      	movs	r2, #0
 80136a6:	709a      	strb	r2, [r3, #2]
 80136a8:	2200      	movs	r2, #0
 80136aa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2200      	movs	r2, #0
 80136b0:	f042 0201 	orr.w	r2, r2, #1
 80136b4:	711a      	strb	r2, [r3, #4]
 80136b6:	2200      	movs	r2, #0
 80136b8:	715a      	strb	r2, [r3, #5]
 80136ba:	2200      	movs	r2, #0
 80136bc:	719a      	strb	r2, [r3, #6]
 80136be:	2200      	movs	r2, #0
 80136c0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80136c2:	887a      	ldrh	r2, [r7, #2]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80136c8:	f001 fda2 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80136cc:	f001 fd88 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80136d0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	b2db      	uxtb	r3, r3
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3710      	adds	r7, #16
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80136e8:	f001 fdd0 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80136ec:	f001 fd6c 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80136f0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	2200      	movs	r2, #0
 80136f6:	f062 0246 	orn	r2, r2, #70	; 0x46
 80136fa:	701a      	strb	r2, [r3, #0]
 80136fc:	2200      	movs	r2, #0
 80136fe:	705a      	strb	r2, [r3, #1]
 8013700:	2200      	movs	r2, #0
 8013702:	709a      	strb	r2, [r3, #2]
 8013704:	2200      	movs	r2, #0
 8013706:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2200      	movs	r2, #0
 801370c:	f042 0201 	orr.w	r2, r2, #1
 8013710:	711a      	strb	r2, [r3, #4]
 8013712:	2200      	movs	r2, #0
 8013714:	715a      	strb	r2, [r3, #5]
 8013716:	2200      	movs	r2, #0
 8013718:	719a      	strb	r2, [r3, #6]
 801371a:	2200      	movs	r2, #0
 801371c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013724:	f001 fd74 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013728:	f001 fd5a 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801372c:	60f8      	str	r0, [r7, #12]
}
 801372e:	bf00      	nop
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013736:	b580      	push	{r7, lr}
 8013738:	b084      	sub	sp, #16
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801373e:	f001 fda5 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013742:	f001 fd41 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8013746:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2200      	movs	r2, #0
 801374c:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013750:	701a      	strb	r2, [r3, #0]
 8013752:	2200      	movs	r2, #0
 8013754:	705a      	strb	r2, [r3, #1]
 8013756:	2200      	movs	r2, #0
 8013758:	709a      	strb	r2, [r3, #2]
 801375a:	2200      	movs	r2, #0
 801375c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2200      	movs	r2, #0
 8013762:	f042 0201 	orr.w	r2, r2, #1
 8013766:	711a      	strb	r2, [r3, #4]
 8013768:	2200      	movs	r2, #0
 801376a:	715a      	strb	r2, [r3, #5]
 801376c:	2200      	movs	r2, #0
 801376e:	719a      	strb	r2, [r3, #6]
 8013770:	2200      	movs	r2, #0
 8013772:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801377a:	f001 fd49 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801377e:	f001 fd2f 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013782:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	b29b      	uxth	r3, r3
}
 801378a:	4618      	mov	r0, r3
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b086      	sub	sp, #24
 8013796:	af00      	add	r7, sp, #0
 8013798:	60f8      	str	r0, [r7, #12]
 801379a:	60b9      	str	r1, [r7, #8]
 801379c:	4613      	mov	r3, r2
 801379e:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 80137a0:	f001 fd74 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80137a4:	f001 fd10 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80137a8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	2200      	movs	r2, #0
 80137ae:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80137b2:	701a      	strb	r2, [r3, #0]
 80137b4:	2200      	movs	r2, #0
 80137b6:	705a      	strb	r2, [r3, #1]
 80137b8:	2200      	movs	r2, #0
 80137ba:	709a      	strb	r2, [r3, #2]
 80137bc:	2200      	movs	r2, #0
 80137be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f042 0203 	orr.w	r2, r2, #3
 80137c8:	711a      	strb	r2, [r3, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	715a      	strb	r2, [r3, #5]
 80137ce:	2200      	movs	r2, #0
 80137d0:	719a      	strb	r2, [r3, #6]
 80137d2:	2200      	movs	r2, #0
 80137d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 80137dc:	68ba      	ldr	r2, [r7, #8]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 80137e2:	88fa      	ldrh	r2, [r7, #6]
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80137e8:	f001 fd12 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137ec:	f001 fcf8 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137f0:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	689b      	ldr	r3, [r3, #8]
 80137f6:	b2db      	uxtb	r3, r3
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3718      	adds	r7, #24
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b086      	sub	sp, #24
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	607a      	str	r2, [r7, #4]
 801380a:	461a      	mov	r2, r3
 801380c:	460b      	mov	r3, r1
 801380e:	817b      	strh	r3, [r7, #10]
 8013810:	4613      	mov	r3, r2
 8013812:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013814:	f001 fd3a 	bl	801528c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013818:	f001 fcd6 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801381c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	2200      	movs	r2, #0
 8013822:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013826:	701a      	strb	r2, [r3, #0]
 8013828:	2200      	movs	r2, #0
 801382a:	705a      	strb	r2, [r3, #1]
 801382c:	2200      	movs	r2, #0
 801382e:	709a      	strb	r2, [r3, #2]
 8013830:	2200      	movs	r2, #0
 8013832:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	2200      	movs	r2, #0
 8013838:	f042 0204 	orr.w	r2, r2, #4
 801383c:	711a      	strb	r2, [r3, #4]
 801383e:	2200      	movs	r2, #0
 8013840:	715a      	strb	r2, [r3, #5]
 8013842:	2200      	movs	r2, #0
 8013844:	719a      	strb	r2, [r3, #6]
 8013846:	2200      	movs	r2, #0
 8013848:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013850:	897a      	ldrh	r2, [r7, #10]
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801385c:	893a      	ldrh	r2, [r7, #8]
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013862:	f001 fcd5 	bl	8015210 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013866:	f001 fcbb 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801386a:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	689b      	ldr	r3, [r3, #8]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3718      	adds	r7, #24
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8013878:	b5b0      	push	{r4, r5, r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 801387e:	2300      	movs	r3, #0
 8013880:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8013882:	f001 fcb9 	bl	80151f8 <THREAD_Get_NotificationPayloadBuffer>
 8013886:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	3b01      	subs	r3, #1
 801388e:	2b14      	cmp	r3, #20
 8013890:	f200 8172 	bhi.w	8013b78 <OpenThread_CallBack_Processing+0x300>
 8013894:	a201      	add	r2, pc, #4	; (adr r2, 801389c <OpenThread_CallBack_Processing+0x24>)
 8013896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801389a:	bf00      	nop
 801389c:	080138f1 	.word	0x080138f1
 80138a0:	0801390d 	.word	0x0801390d
 80138a4:	08013939 	.word	0x08013939
 80138a8:	0801396d 	.word	0x0801396d
 80138ac:	08013979 	.word	0x08013979
 80138b0:	08013997 	.word	0x08013997
 80138b4:	080139b5 	.word	0x080139b5
 80138b8:	080139d3 	.word	0x080139d3
 80138bc:	080139f1 	.word	0x080139f1
 80138c0:	08013a0f 	.word	0x08013a0f
 80138c4:	08013a31 	.word	0x08013a31
 80138c8:	08013a4f 	.word	0x08013a4f
 80138cc:	08013b79 	.word	0x08013b79
 80138d0:	08013a75 	.word	0x08013a75
 80138d4:	08013aa9 	.word	0x08013aa9
 80138d8:	08013ad1 	.word	0x08013ad1
 80138dc:	08013aef 	.word	0x08013aef
 80138e0:	08013b13 	.word	0x08013b13
 80138e4:	08013b3b 	.word	0x08013b3b
 80138e8:	08013b79 	.word	0x08013b79
 80138ec:	08013b59 	.word	0x08013b59
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 80138f0:	4ba3      	ldr	r3, [pc, #652]	; (8013b80 <OpenThread_CallBack_Processing+0x308>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 8167 	beq.w	8013bc8 <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 80138fa:	4ba1      	ldr	r3, [pc, #644]	; (8013b80 <OpenThread_CallBack_Processing+0x308>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	683a      	ldr	r2, [r7, #0]
 8013900:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013902:	683a      	ldr	r2, [r7, #0]
 8013904:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8013906:	4611      	mov	r1, r2
 8013908:	4798      	blx	r3
        }
        break;
 801390a:	e15d      	b.n	8013bc8 <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	689b      	ldr	r3, [r3, #8]
 8013910:	461a      	mov	r2, r3
 8013912:	4b9c      	ldr	r3, [pc, #624]	; (8013b84 <OpenThread_CallBack_Processing+0x30c>)
 8013914:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 8013916:	4b9b      	ldr	r3, [pc, #620]	; (8013b84 <OpenThread_CallBack_Processing+0x30c>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	f000 8156 	beq.w	8013bcc <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013920:	4b98      	ldr	r3, [pc, #608]	; (8013b84 <OpenThread_CallBack_Processing+0x30c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	68d2      	ldr	r2, [r2, #12]
 8013928:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801392a:	683a      	ldr	r2, [r7, #0]
 801392c:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801392e:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013930:	683a      	ldr	r2, [r7, #0]
 8013932:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013934:	4798      	blx	r3
        }
        break;
 8013936:	e149      	b.n	8013bcc <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	461a      	mov	r2, r3
 801393e:	4b92      	ldr	r3, [pc, #584]	; (8013b88 <OpenThread_CallBack_Processing+0x310>)
 8013940:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8013942:	4b91      	ldr	r3, [pc, #580]	; (8013b88 <OpenThread_CallBack_Processing+0x310>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	f000 8142 	beq.w	8013bd0 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801394c:	4b8e      	ldr	r3, [pc, #568]	; (8013b88 <OpenThread_CallBack_Processing+0x310>)
 801394e:	681c      	ldr	r4, [r3, #0]
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801395a:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013960:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013966:	b2db      	uxtb	r3, r3
 8013968:	47a0      	blx	r4
        }
        break;
 801396a:	e131      	b.n	8013bd0 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 801396c:	2001      	movs	r0, #1
 801396e:	f000 f968 	bl	8013c42 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8013972:	f7f3 fb70 	bl	8007056 <HAL_NVIC_SystemReset>
        break;
 8013976:	e14a      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8013978:	4b84      	ldr	r3, [pc, #528]	; (8013b8c <OpenThread_CallBack_Processing+0x314>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	f000 8129 	beq.w	8013bd4 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013982:	4b82      	ldr	r3, [pc, #520]	; (8013b8c <OpenThread_CallBack_Processing+0x314>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	683a      	ldr	r2, [r7, #0]
 8013988:	6892      	ldr	r2, [r2, #8]
 801398a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801398c:	683a      	ldr	r2, [r7, #0]
 801398e:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8013990:	4611      	mov	r1, r2
 8013992:	4798      	blx	r3
        }
        break;
 8013994:	e11e      	b.n	8013bd4 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8013996:	4b7e      	ldr	r3, [pc, #504]	; (8013b90 <OpenThread_CallBack_Processing+0x318>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 811c 	beq.w	8013bd8 <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80139a0:	4b7b      	ldr	r3, [pc, #492]	; (8013b90 <OpenThread_CallBack_Processing+0x318>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	683a      	ldr	r2, [r7, #0]
 80139a6:	6892      	ldr	r2, [r2, #8]
 80139a8:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80139aa:	683a      	ldr	r2, [r7, #0]
 80139ac:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80139ae:	2000      	movs	r0, #0
 80139b0:	4798      	blx	r3
        }
        break;
 80139b2:	e111      	b.n	8013bd8 <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80139b4:	4b77      	ldr	r3, [pc, #476]	; (8013b94 <OpenThread_CallBack_Processing+0x31c>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f000 810f 	beq.w	8013bdc <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80139be:	4b75      	ldr	r3, [pc, #468]	; (8013b94 <OpenThread_CallBack_Processing+0x31c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	6892      	ldr	r2, [r2, #8]
 80139c6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80139c8:	683a      	ldr	r2, [r7, #0]
 80139ca:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80139cc:	4611      	mov	r1, r2
 80139ce:	4798      	blx	r3
        }
        break;
 80139d0:	e104      	b.n	8013bdc <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80139d2:	4b71      	ldr	r3, [pc, #452]	; (8013b98 <OpenThread_CallBack_Processing+0x320>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	f000 8102 	beq.w	8013be0 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80139dc:	4b6e      	ldr	r3, [pc, #440]	; (8013b98 <OpenThread_CallBack_Processing+0x320>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	6892      	ldr	r2, [r2, #8]
 80139e4:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80139e6:	683a      	ldr	r2, [r7, #0]
 80139e8:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80139ea:	4611      	mov	r1, r2
 80139ec:	4798      	blx	r3
        }
        break;
 80139ee:	e0f7      	b.n	8013be0 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 80139f0:	4b6a      	ldr	r3, [pc, #424]	; (8013b9c <OpenThread_CallBack_Processing+0x324>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f000 80f5 	beq.w	8013be4 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 80139fa:	4b68      	ldr	r3, [pc, #416]	; (8013b9c <OpenThread_CallBack_Processing+0x324>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	683a      	ldr	r2, [r7, #0]
 8013a00:	6892      	ldr	r2, [r2, #8]
 8013a02:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8013a08:	4611      	mov	r1, r2
 8013a0a:	4798      	blx	r3
        }
        break;
 8013a0c:	e0ea      	b.n	8013be4 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8013a0e:	4b64      	ldr	r3, [pc, #400]	; (8013ba0 <OpenThread_CallBack_Processing+0x328>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f000 80e8 	beq.w	8013be8 <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013a18:	4b61      	ldr	r3, [pc, #388]	; (8013ba0 <OpenThread_CallBack_Processing+0x328>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	6892      	ldr	r2, [r2, #8]
 8013a20:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8013a22:	683a      	ldr	r2, [r7, #0]
 8013a24:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013a26:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013a2c:	4798      	blx	r3
        }
        break;
 8013a2e:	e0db      	b.n	8013be8 <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8013a30:	4b5c      	ldr	r3, [pc, #368]	; (8013ba4 <OpenThread_CallBack_Processing+0x32c>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	f000 80d9 	beq.w	8013bec <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8013a3a:	4b5a      	ldr	r3, [pc, #360]	; (8013ba4 <OpenThread_CallBack_Processing+0x32c>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	683a      	ldr	r2, [r7, #0]
 8013a40:	6892      	ldr	r2, [r2, #8]
 8013a42:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8013a44:	683a      	ldr	r2, [r7, #0]
 8013a46:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4798      	blx	r3
        }
        break;
 8013a4c:	e0ce      	b.n	8013bec <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8013a4e:	4b56      	ldr	r3, [pc, #344]	; (8013ba8 <OpenThread_CallBack_Processing+0x330>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f000 80cc 	beq.w	8013bf0 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013a58:	4b53      	ldr	r3, [pc, #332]	; (8013ba8 <OpenThread_CallBack_Processing+0x330>)
 8013a5a:	681c      	ldr	r4, [r3, #0]
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013a64:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013a6a:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013a70:	47a0      	blx	r4
        }
        break;
 8013a72:	e0bd      	b.n	8013bf0 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8013a74:	4b4d      	ldr	r3, [pc, #308]	; (8013bac <OpenThread_CallBack_Processing+0x334>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f000 80bb 	beq.w	8013bf4 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013a7e:	4b4b      	ldr	r3, [pc, #300]	; (8013bac <OpenThread_CallBack_Processing+0x334>)
 8013a80:	681c      	ldr	r4, [r3, #0]
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	689b      	ldr	r3, [r3, #8]
 8013a86:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013a8c:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013a92:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	462a      	mov	r2, r5
 8013aa4:	47a0      	blx	r4
        }
        break;
 8013aa6:	e0a5      	b.n	8013bf4 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8013aa8:	4b41      	ldr	r3, [pc, #260]	; (8013bb0 <OpenThread_CallBack_Processing+0x338>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	f000 80a3 	beq.w	8013bf8 <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013ab2:	4b3f      	ldr	r3, [pc, #252]	; (8013bb0 <OpenThread_CallBack_Processing+0x338>)
 8013ab4:	681c      	ldr	r4, [r3, #0]
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	689b      	ldr	r3, [r3, #8]
 8013aba:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013ac0:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013ac6:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013acc:	47a0      	blx	r4
        }
        break;
 8013ace:	e093      	b.n	8013bf8 <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8013ad0:	4b38      	ldr	r3, [pc, #224]	; (8013bb4 <OpenThread_CallBack_Processing+0x33c>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	f000 8091 	beq.w	8013bfc <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8013ada:	4b36      	ldr	r3, [pc, #216]	; (8013bb4 <OpenThread_CallBack_Processing+0x33c>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	683a      	ldr	r2, [r7, #0]
 8013ae0:	6892      	ldr	r2, [r2, #8]
 8013ae2:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8013ae4:	683a      	ldr	r2, [r7, #0]
 8013ae6:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8013ae8:	4611      	mov	r1, r2
 8013aea:	4798      	blx	r3
        }
        break;
 8013aec:	e086      	b.n	8013bfc <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8013aee:	4b32      	ldr	r3, [pc, #200]	; (8013bb8 <OpenThread_CallBack_Processing+0x340>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	f000 8084 	beq.w	8013c00 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013af8:	4b2f      	ldr	r3, [pc, #188]	; (8013bb8 <OpenThread_CallBack_Processing+0x340>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	6892      	ldr	r2, [r2, #8]
 8013b00:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013b06:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8013b08:	683a      	ldr	r2, [r7, #0]
 8013b0a:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013b0c:	b2d2      	uxtb	r2, r2
 8013b0e:	4798      	blx	r3
        }
        break;
 8013b10:	e076      	b.n	8013c00 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8013b12:	4b2a      	ldr	r3, [pc, #168]	; (8013bbc <OpenThread_CallBack_Processing+0x344>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d074      	beq.n	8013c04 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013b1a:	4b28      	ldr	r3, [pc, #160]	; (8013bbc <OpenThread_CallBack_Processing+0x344>)
 8013b1c:	681c      	ldr	r4, [r3, #0]
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	689b      	ldr	r3, [r3, #8]
 8013b22:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013b28:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013b2e:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013b34:	b2db      	uxtb	r3, r3
 8013b36:	47a0      	blx	r4
        }
        break;
 8013b38:	e064      	b.n	8013c04 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8013b3a:	4b21      	ldr	r3, [pc, #132]	; (8013bc0 <OpenThread_CallBack_Processing+0x348>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d062      	beq.n	8013c08 <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013b42:	4b1f      	ldr	r3, [pc, #124]	; (8013bc0 <OpenThread_CallBack_Processing+0x348>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	683a      	ldr	r2, [r7, #0]
 8013b48:	6892      	ldr	r2, [r2, #8]
 8013b4a:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8013b4c:	683a      	ldr	r2, [r7, #0]
 8013b4e:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013b50:	b252      	sxtb	r2, r2
 8013b52:	4611      	mov	r1, r2
 8013b54:	4798      	blx	r3
        }
        break;
 8013b56:	e057      	b.n	8013c08 <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8013b58:	4b1a      	ldr	r3, [pc, #104]	; (8013bc4 <OpenThread_CallBack_Processing+0x34c>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d055      	beq.n	8013c0c <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013b60:	4b18      	ldr	r3, [pc, #96]	; (8013bc4 <OpenThread_CallBack_Processing+0x34c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	683a      	ldr	r2, [r7, #0]
 8013b66:	6892      	ldr	r2, [r2, #8]
 8013b68:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 8013b6a:	683a      	ldr	r2, [r7, #0]
 8013b6c:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013b6e:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8013b70:	683a      	ldr	r2, [r7, #0]
 8013b72:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013b74:	4798      	blx	r3
        }
        break;
 8013b76:	e049      	b.n	8013c0c <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 8013b78:	2301      	movs	r3, #1
 8013b7a:	71fb      	strb	r3, [r7, #7]
        break;
 8013b7c:	e047      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
 8013b7e:	bf00      	nop
 8013b80:	200273e8 	.word	0x200273e8
 8013b84:	20027428 	.word	0x20027428
 8013b88:	2002742c 	.word	0x2002742c
 8013b8c:	200273f0 	.word	0x200273f0
 8013b90:	200273ec 	.word	0x200273ec
 8013b94:	200273f4 	.word	0x200273f4
 8013b98:	200273f8 	.word	0x200273f8
 8013b9c:	200273fc 	.word	0x200273fc
 8013ba0:	20027400 	.word	0x20027400
 8013ba4:	20027404 	.word	0x20027404
 8013ba8:	20027408 	.word	0x20027408
 8013bac:	2002740c 	.word	0x2002740c
 8013bb0:	20027410 	.word	0x20027410
 8013bb4:	20027414 	.word	0x20027414
 8013bb8:	20027418 	.word	0x20027418
 8013bbc:	2002741c 	.word	0x2002741c
 8013bc0:	20027420 	.word	0x20027420
 8013bc4:	20027424 	.word	0x20027424
        break;
 8013bc8:	bf00      	nop
 8013bca:	e020      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bcc:	bf00      	nop
 8013bce:	e01e      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bd0:	bf00      	nop
 8013bd2:	e01c      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bd4:	bf00      	nop
 8013bd6:	e01a      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bd8:	bf00      	nop
 8013bda:	e018      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bdc:	bf00      	nop
 8013bde:	e016      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013be0:	bf00      	nop
 8013be2:	e014      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013be4:	bf00      	nop
 8013be6:	e012      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013be8:	bf00      	nop
 8013bea:	e010      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bec:	bf00      	nop
 8013bee:	e00e      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bf0:	bf00      	nop
 8013bf2:	e00c      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bf4:	bf00      	nop
 8013bf6:	e00a      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bf8:	bf00      	nop
 8013bfa:	e008      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013bfc:	bf00      	nop
 8013bfe:	e006      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013c00:	bf00      	nop
 8013c02:	e004      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013c04:	bf00      	nop
 8013c06:	e002      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013c08:	bf00      	nop
 8013c0a:	e000      	b.n	8013c0e <OpenThread_CallBack_Processing+0x396>
        break;
 8013c0c:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8013c0e:	f000 fcdf 	bl	80145d0 <TL_THREAD_SendAck>
    return status;
 8013c12:	79fb      	ldrb	r3, [r7, #7]

}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bdb0      	pop	{r4, r5, r7, pc}

08013c1c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b086      	sub	sp, #24
 8013c20:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013c22:	1d3b      	adds	r3, r7, #4
 8013c24:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8013c30:	f000 f914 	bl	8013e5c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	330b      	adds	r3, #11
 8013c38:	78db      	ldrb	r3, [r3, #3]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b088      	sub	sp, #32
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	4603      	mov	r3, r0
 8013c4a:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013c4c:	f107 030c 	add.w	r3, r7, #12
 8013c50:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8013c56:	f107 020c 	add.w	r2, r7, #12
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8013c62:	f000 f8fb 	bl	8013e5c <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	330b      	adds	r3, #11
 8013c6a:	78db      	ldrb	r3, [r3, #3]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3720      	adds	r7, #32
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8013c74:	b480      	push	{r7}
 8013c76:	b089      	sub	sp, #36	; 0x24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8013c80:	2300      	movs	r3, #0
 8013c82:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8013c84:	2300      	movs	r3, #0
 8013c86:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8013c90:	4b3c      	ldr	r3, [pc, #240]	; (8013d84 <SHCI_GetWirelessFwInfo+0x110>)
 8013c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c98:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8013ca2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013ca6:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	691b      	ldr	r3, [r3, #16]
 8013cae:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	0e1b      	lsrs	r3, r3, #24
 8013cb4:	b2da      	uxtb	r2, r3
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	0c1b      	lsrs	r3, r3, #16
 8013cbe:	b2da      	uxtb	r2, r3
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	0a1b      	lsrs	r3, r3, #8
 8013cc8:	b2da      	uxtb	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	091b      	lsrs	r3, r3, #4
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	f003 030f 	and.w	r3, r3, #15
 8013cd8:	b2da      	uxtb	r2, r3
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	f003 030f 	and.w	r3, r3, #15
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8013cec:	69bb      	ldr	r3, [r7, #24]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	695b      	ldr	r3, [r3, #20]
 8013cf2:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	0e1b      	lsrs	r3, r3, #24
 8013cf8:	b2da      	uxtb	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	0c1b      	lsrs	r3, r3, #16
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	0a1b      	lsrs	r3, r3, #8
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	b2da      	uxtb	r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	699b      	ldr	r3, [r3, #24]
 8013d20:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	b2da      	uxtb	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	0e1b      	lsrs	r3, r3, #24
 8013d36:	b2da      	uxtb	r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	0c1b      	lsrs	r3, r3, #16
 8013d40:	b2da      	uxtb	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	0a1b      	lsrs	r3, r3, #8
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	689b      	ldr	r3, [r3, #8]
 8013d56:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	0e1b      	lsrs	r3, r3, #24
 8013d5c:	b2da      	uxtb	r2, r3
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	0c1b      	lsrs	r3, r3, #16
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013d74:	2300      	movs	r3, #0
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3724      	adds	r7, #36	; 0x24
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop
 8013d84:	58004000 	.word	0x58004000

08013d88 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	4a08      	ldr	r2, [pc, #32]	; (8013db8 <shci_init+0x30>)
 8013d98:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8013d9a:	4a08      	ldr	r2, [pc, #32]	; (8013dbc <shci_init+0x34>)
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8013da0:	4806      	ldr	r0, [pc, #24]	; (8013dbc <shci_init+0x34>)
 8013da2:	f000 f911 	bl	8013fc8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f000 f894 	bl	8013ed8 <TlInit>

  return;
 8013db0:	bf00      	nop
}
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	20027450 	.word	0x20027450
 8013dbc:	20027430 	.word	0x20027430

08013dc0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013dc6:	4822      	ldr	r0, [pc, #136]	; (8013e50 <shci_user_evt_proc+0x90>)
 8013dc8:	f000 f922 	bl	8014010 <LST_is_empty>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d12b      	bne.n	8013e2a <shci_user_evt_proc+0x6a>
 8013dd2:	4b20      	ldr	r3, [pc, #128]	; (8013e54 <shci_user_evt_proc+0x94>)
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d027      	beq.n	8013e2a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013dda:	f107 030c 	add.w	r3, r7, #12
 8013dde:	4619      	mov	r1, r3
 8013de0:	481b      	ldr	r0, [pc, #108]	; (8013e50 <shci_user_evt_proc+0x90>)
 8013de2:	f000 f99c 	bl	801411e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8013de6:	4b1c      	ldr	r3, [pc, #112]	; (8013e58 <shci_user_evt_proc+0x98>)
 8013de8:	69db      	ldr	r3, [r3, #28]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d00c      	beq.n	8013e08 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8013df2:	2301      	movs	r3, #1
 8013df4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013df6:	4b18      	ldr	r3, [pc, #96]	; (8013e58 <shci_user_evt_proc+0x98>)
 8013df8:	69db      	ldr	r3, [r3, #28]
 8013dfa:	1d3a      	adds	r2, r7, #4
 8013dfc:	4610      	mov	r0, r2
 8013dfe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8013e00:	793a      	ldrb	r2, [r7, #4]
 8013e02:	4b14      	ldr	r3, [pc, #80]	; (8013e54 <shci_user_evt_proc+0x94>)
 8013e04:	701a      	strb	r2, [r3, #0]
 8013e06:	e002      	b.n	8013e0e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013e08:	4b12      	ldr	r3, [pc, #72]	; (8013e54 <shci_user_evt_proc+0x94>)
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8013e0e:	4b11      	ldr	r3, [pc, #68]	; (8013e54 <shci_user_evt_proc+0x94>)
 8013e10:	781b      	ldrb	r3, [r3, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d004      	beq.n	8013e20 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f000 fc55 	bl	80146c8 <TL_MM_EvtDone>
 8013e1e:	e004      	b.n	8013e2a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	4619      	mov	r1, r3
 8013e24:	480a      	ldr	r0, [pc, #40]	; (8013e50 <shci_user_evt_proc+0x90>)
 8013e26:	f000 f913 	bl	8014050 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013e2a:	4809      	ldr	r0, [pc, #36]	; (8013e50 <shci_user_evt_proc+0x90>)
 8013e2c:	f000 f8f0 	bl	8014010 <LST_is_empty>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d107      	bne.n	8013e46 <shci_user_evt_proc+0x86>
 8013e36:	4b07      	ldr	r3, [pc, #28]	; (8013e54 <shci_user_evt_proc+0x94>)
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d003      	beq.n	8013e46 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8013e3e:	4804      	ldr	r0, [pc, #16]	; (8013e50 <shci_user_evt_proc+0x90>)
 8013e40:	f7ed f9b8 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8013e44:	bf00      	nop
 8013e46:	bf00      	nop
}
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	200001d4 	.word	0x200001d4
 8013e54:	200001e4 	.word	0x200001e4
 8013e58:	20027430 	.word	0x20027430

08013e5c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60ba      	str	r2, [r7, #8]
 8013e64:	607b      	str	r3, [r7, #4]
 8013e66:	4603      	mov	r3, r0
 8013e68:	81fb      	strh	r3, [r7, #14]
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013e6e:	2000      	movs	r0, #0
 8013e70:	f000 f864 	bl	8013f3c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013e74:	4b16      	ldr	r3, [pc, #88]	; (8013ed0 <shci_send+0x74>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	89fa      	ldrh	r2, [r7, #14]
 8013e7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013e7e:	4b14      	ldr	r3, [pc, #80]	; (8013ed0 <shci_send+0x74>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	7b7a      	ldrb	r2, [r7, #13]
 8013e84:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013e86:	4b12      	ldr	r3, [pc, #72]	; (8013ed0 <shci_send+0x74>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	330c      	adds	r3, #12
 8013e8c:	7b7a      	ldrb	r2, [r7, #13]
 8013e8e:	68b9      	ldr	r1, [r7, #8]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f002 f921 	bl	80160d8 <memcpy>

  shciContext.io.Send(0,0);
 8013e96:	4b0f      	ldr	r3, [pc, #60]	; (8013ed4 <shci_send+0x78>)
 8013e98:	691b      	ldr	r3, [r3, #16]
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	2000      	movs	r0, #0
 8013e9e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013ea0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8013ea4:	f7ed f9a6 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f103 0008 	add.w	r0, r3, #8
 8013eae:	4b08      	ldr	r3, [pc, #32]	; (8013ed0 <shci_send+0x74>)
 8013eb0:	6819      	ldr	r1, [r3, #0]
 8013eb2:	4b07      	ldr	r3, [pc, #28]	; (8013ed0 <shci_send+0x74>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	789b      	ldrb	r3, [r3, #2]
 8013eb8:	3303      	adds	r3, #3
 8013eba:	461a      	mov	r2, r3
 8013ebc:	f002 f90c 	bl	80160d8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013ec0:	2001      	movs	r0, #1
 8013ec2:	f000 f83b 	bl	8013f3c <Cmd_SetStatus>

  return;
 8013ec6:	bf00      	nop
}
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	200001e0 	.word	0x200001e0
 8013ed4:	20027430 	.word	0x20027430

08013ed8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b086      	sub	sp, #24
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013ee0:	4a10      	ldr	r2, [pc, #64]	; (8013f24 <TlInit+0x4c>)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013ee6:	4810      	ldr	r0, [pc, #64]	; (8013f28 <TlInit+0x50>)
 8013ee8:	f000 f882 	bl	8013ff0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013eec:	2001      	movs	r0, #1
 8013eee:	f000 f825 	bl	8013f3c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013ef2:	4b0e      	ldr	r3, [pc, #56]	; (8013f2c <TlInit+0x54>)
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013ef8:	4b0d      	ldr	r3, [pc, #52]	; (8013f30 <TlInit+0x58>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d00c      	beq.n	8013f1a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013f04:	4b0b      	ldr	r3, [pc, #44]	; (8013f34 <TlInit+0x5c>)
 8013f06:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013f08:	4b0b      	ldr	r3, [pc, #44]	; (8013f38 <TlInit+0x60>)
 8013f0a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013f0c:	4b08      	ldr	r3, [pc, #32]	; (8013f30 <TlInit+0x58>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f107 020c 	add.w	r2, r7, #12
 8013f14:	4610      	mov	r0, r2
 8013f16:	4798      	blx	r3
  }

  return;
 8013f18:	bf00      	nop
 8013f1a:	bf00      	nop
}
 8013f1c:	3718      	adds	r7, #24
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	200001e0 	.word	0x200001e0
 8013f28:	200001d4 	.word	0x200001d4
 8013f2c:	200001e4 	.word	0x200001e4
 8013f30:	20027430 	.word	0x20027430
 8013f34:	08013f8d 	.word	0x08013f8d
 8013f38:	08013fa5 	.word	0x08013fa5

08013f3c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	4603      	mov	r3, r0
 8013f44:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013f46:	79fb      	ldrb	r3, [r7, #7]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10b      	bne.n	8013f64 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013f4c:	4b0d      	ldr	r3, [pc, #52]	; (8013f84 <Cmd_SetStatus+0x48>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d003      	beq.n	8013f5c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013f54:	4b0b      	ldr	r3, [pc, #44]	; (8013f84 <Cmd_SetStatus+0x48>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2000      	movs	r0, #0
 8013f5a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013f5c:	4b0a      	ldr	r3, [pc, #40]	; (8013f88 <Cmd_SetStatus+0x4c>)
 8013f5e:	2200      	movs	r2, #0
 8013f60:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013f62:	e00b      	b.n	8013f7c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013f64:	4b08      	ldr	r3, [pc, #32]	; (8013f88 <Cmd_SetStatus+0x4c>)
 8013f66:	2201      	movs	r2, #1
 8013f68:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013f6a:	4b06      	ldr	r3, [pc, #24]	; (8013f84 <Cmd_SetStatus+0x48>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d004      	beq.n	8013f7c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013f72:	4b04      	ldr	r3, [pc, #16]	; (8013f84 <Cmd_SetStatus+0x48>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	2001      	movs	r0, #1
 8013f78:	4798      	blx	r3
  return;
 8013f7a:	bf00      	nop
 8013f7c:	bf00      	nop
}
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	20027450 	.word	0x20027450
 8013f88:	200001dc 	.word	0x200001dc

08013f8c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013f94:	2000      	movs	r0, #0
 8013f96:	f7ed f91d 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8013f9a:	bf00      	nop
}
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
	...

08013fa4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	4805      	ldr	r0, [pc, #20]	; (8013fc4 <TlUserEvtReceived+0x20>)
 8013fb0:	f000 f872 	bl	8014098 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013fb4:	4803      	ldr	r0, [pc, #12]	; (8013fc4 <TlUserEvtReceived+0x20>)
 8013fb6:	f7ed f8fd 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8013fba:	bf00      	nop
}
 8013fbc:	3708      	adds	r7, #8
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	200001d4 	.word	0x200001d4

08013fc8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	4a05      	ldr	r2, [pc, #20]	; (8013fe8 <shci_register_io_bus+0x20>)
 8013fd4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	4a04      	ldr	r2, [pc, #16]	; (8013fec <shci_register_io_bus+0x24>)
 8013fda:	611a      	str	r2, [r3, #16]

  return;
 8013fdc:	bf00      	nop
}
 8013fde:	370c      	adds	r7, #12
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr
 8013fe8:	0801448d 	.word	0x0801448d
 8013fec:	080144e1 	.word	0x080144e1

08013ff0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	605a      	str	r2, [r3, #4]
}
 8014004:	bf00      	nop
 8014006:	370c      	adds	r7, #12
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014010:	b480      	push	{r7}
 8014012:	b087      	sub	sp, #28
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014018:	f3ef 8310 	mrs	r3, PRIMASK
 801401c:	60fb      	str	r3, [r7, #12]
  return(result);
 801401e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014022:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	429a      	cmp	r2, r3
 801402c:	d102      	bne.n	8014034 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 801402e:	2301      	movs	r3, #1
 8014030:	75fb      	strb	r3, [r7, #23]
 8014032:	e001      	b.n	8014038 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8014034:	2300      	movs	r3, #0
 8014036:	75fb      	strb	r3, [r7, #23]
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014042:	7dfb      	ldrb	r3, [r7, #23]
}
 8014044:	4618      	mov	r0, r3
 8014046:	371c      	adds	r7, #28
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr

08014050 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801405a:	f3ef 8310 	mrs	r3, PRIMASK
 801405e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014060:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014064:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	683a      	ldr	r2, [r7, #0]
 8014080:	605a      	str	r2, [r3, #4]
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801408c:	bf00      	nop
 801408e:	371c      	adds	r7, #28
 8014090:	46bd      	mov	sp, r7
 8014092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014096:	4770      	bx	lr

08014098 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8014098:	b480      	push	{r7}
 801409a:	b087      	sub	sp, #28
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140a2:	f3ef 8310 	mrs	r3, PRIMASK
 80140a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80140a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80140aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140ac:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	685a      	ldr	r2, [r3, #4]
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	601a      	str	r2, [r3, #0]
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80140d4:	bf00      	nop
 80140d6:	371c      	adds	r7, #28
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140e8:	f3ef 8310 	mrs	r3, PRIMASK
 80140ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80140ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80140f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140f2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	6812      	ldr	r2, [r2, #0]
 80140fc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	6852      	ldr	r2, [r2, #4]
 8014106:	605a      	str	r2, [r3, #4]
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014112:	bf00      	nop
 8014114:	371c      	adds	r7, #28
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr

0801411e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801411e:	b580      	push	{r7, lr}
 8014120:	b086      	sub	sp, #24
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014128:	f3ef 8310 	mrs	r3, PRIMASK
 801412c:	60fb      	str	r3, [r7, #12]
  return(result);
 801412e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014132:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4618      	mov	r0, r3
 8014142:	f7ff ffcd 	bl	80140e0 <LST_remove_node>
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014150:	bf00      	nop
 8014152:	3718      	adds	r7, #24
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	460b      	mov	r3, r1
 8014162:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8014164:	f001 f892 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014168:	f001 f82e 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 801416c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2200      	movs	r2, #0
 8014172:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8014176:	701a      	strb	r2, [r3, #0]
 8014178:	2200      	movs	r2, #0
 801417a:	705a      	strb	r2, [r3, #1]
 801417c:	2200      	movs	r2, #0
 801417e:	709a      	strb	r2, [r3, #2]
 8014180:	2200      	movs	r2, #0
 8014182:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2200      	movs	r2, #0
 8014188:	f042 0201 	orr.w	r2, r2, #1
 801418c:	711a      	strb	r2, [r3, #4]
 801418e:	2200      	movs	r2, #0
 8014190:	715a      	strb	r2, [r3, #5]
 8014192:	2200      	movs	r2, #0
 8014194:	719a      	strb	r2, [r3, #6]
 8014196:	2200      	movs	r2, #0
 8014198:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 801419a:	78fa      	ldrb	r2, [r7, #3]
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80141a0:	f001 f836 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80141a4:	f001 f81c 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80141a8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	689b      	ldr	r3, [r3, #8]
 80141ae:	b2db      	uxtb	r3, r3
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3710      	adds	r7, #16
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b084      	sub	sp, #16
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80141c2:	f001 f863 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80141c6:	f000 ffff 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80141ca:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2200      	movs	r2, #0
 80141d0:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80141d4:	701a      	strb	r2, [r3, #0]
 80141d6:	2200      	movs	r2, #0
 80141d8:	705a      	strb	r2, [r3, #1]
 80141da:	2200      	movs	r2, #0
 80141dc:	709a      	strb	r2, [r3, #2]
 80141de:	2200      	movs	r2, #0
 80141e0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	f042 0201 	orr.w	r2, r2, #1
 80141ea:	711a      	strb	r2, [r3, #4]
 80141ec:	2200      	movs	r2, #0
 80141ee:	715a      	strb	r2, [r3, #5]
 80141f0:	2200      	movs	r2, #0
 80141f2:	719a      	strb	r2, [r3, #6]
 80141f4:	2200      	movs	r2, #0
 80141f6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 80141f8:	683a      	ldr	r2, [r7, #0]
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80141fe:	f001 f807 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014202:	f000 ffed 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014206:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	689b      	ldr	r3, [r3, #8]
 801420c:	b2db      	uxtb	r3, r3
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b084      	sub	sp, #16
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
 801421e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8014220:	f001 f834 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014224:	f000 ffd0 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8014228:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2200      	movs	r2, #0
 801422e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8014232:	701a      	strb	r2, [r3, #0]
 8014234:	2200      	movs	r2, #0
 8014236:	705a      	strb	r2, [r3, #1]
 8014238:	2200      	movs	r2, #0
 801423a:	709a      	strb	r2, [r3, #2]
 801423c:	2200      	movs	r2, #0
 801423e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2200      	movs	r2, #0
 8014244:	f042 0201 	orr.w	r2, r2, #1
 8014248:	711a      	strb	r2, [r3, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	715a      	strb	r2, [r3, #5]
 801424e:	2200      	movs	r2, #0
 8014250:	719a      	strb	r2, [r3, #6]
 8014252:	2200      	movs	r2, #0
 8014254:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801425c:	f000 ffd8 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014260:	f000 ffbe 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014264:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	689b      	ldr	r3, [r3, #8]
 801426a:	b2db      	uxtb	r3, r3
}
 801426c:	4618      	mov	r0, r3
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <otThreadGetMeshLocalEid>:

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b084      	sub	sp, #16
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801427c:	f001 f806 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014280:	f000 ffa2 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8014284:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2200      	movs	r2, #0
 801428a:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 801428e:	701a      	strb	r2, [r3, #0]
 8014290:	2200      	movs	r2, #0
 8014292:	705a      	strb	r2, [r3, #1]
 8014294:	2200      	movs	r2, #0
 8014296:	709a      	strb	r2, [r3, #2]
 8014298:	2200      	movs	r2, #0
 801429a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2200      	movs	r2, #0
 80142a0:	711a      	strb	r2, [r3, #4]
 80142a2:	2200      	movs	r2, #0
 80142a4:	715a      	strb	r2, [r3, #5]
 80142a6:	2200      	movs	r2, #0
 80142a8:	719a      	strb	r2, [r3, #6]
 80142aa:	2200      	movs	r2, #0
 80142ac:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80142ae:	f000 ffaf 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80142b2:	f000 ff95 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80142b6:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	689b      	ldr	r3, [r3, #8]
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3710      	adds	r7, #16
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80142ce:	f000 ffdd 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80142d2:	f000 ff79 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 80142d6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2200      	movs	r2, #0
 80142dc:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 80142e0:	701a      	strb	r2, [r3, #0]
 80142e2:	2200      	movs	r2, #0
 80142e4:	705a      	strb	r2, [r3, #1]
 80142e6:	2200      	movs	r2, #0
 80142e8:	709a      	strb	r2, [r3, #2]
 80142ea:	2200      	movs	r2, #0
 80142ec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f042 0201 	orr.w	r2, r2, #1
 80142f6:	711a      	strb	r2, [r3, #4]
 80142f8:	2200      	movs	r2, #0
 80142fa:	715a      	strb	r2, [r3, #5]
 80142fc:	2200      	movs	r2, #0
 80142fe:	719a      	strb	r2, [r3, #6]
 8014300:	2200      	movs	r2, #0
 8014302:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8014304:	683a      	ldr	r2, [r7, #0]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801430a:	f000 ff81 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801430e:	f000 ff67 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014312:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	b2db      	uxtb	r3, r3
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}

08014322 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8014322:	b580      	push	{r7, lr}
 8014324:	b084      	sub	sp, #16
 8014326:	af00      	add	r7, sp, #0
 8014328:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801432a:	f000 ffaf 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801432e:	f000 ff4b 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8014332:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2200      	movs	r2, #0
 8014338:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 801433c:	701a      	strb	r2, [r3, #0]
 801433e:	2200      	movs	r2, #0
 8014340:	705a      	strb	r2, [r3, #1]
 8014342:	2200      	movs	r2, #0
 8014344:	709a      	strb	r2, [r3, #2]
 8014346:	2200      	movs	r2, #0
 8014348:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2200      	movs	r2, #0
 801434e:	711a      	strb	r2, [r3, #4]
 8014350:	2200      	movs	r2, #0
 8014352:	715a      	strb	r2, [r3, #5]
 8014354:	2200      	movs	r2, #0
 8014356:	719a      	strb	r2, [r3, #6]
 8014358:	2200      	movs	r2, #0
 801435a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 801435c:	f000 ff58 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014360:	f000 ff3e 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014364:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	689b      	ldr	r3, [r3, #8]
 801436a:	b2db      	uxtb	r3, r3
}
 801436c:	4618      	mov	r0, r3
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 801437c:	f000 ff86 	bl	801528c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014380:	f000 ff22 	bl	80151c8 <THREAD_Get_OTCmdPayloadBuffer>
 8014384:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2200      	movs	r2, #0
 801438a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801438e:	701a      	strb	r2, [r3, #0]
 8014390:	2200      	movs	r2, #0
 8014392:	705a      	strb	r2, [r3, #1]
 8014394:	2200      	movs	r2, #0
 8014396:	709a      	strb	r2, [r3, #2]
 8014398:	2200      	movs	r2, #0
 801439a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	711a      	strb	r2, [r3, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	715a      	strb	r2, [r3, #5]
 80143a6:	2200      	movs	r2, #0
 80143a8:	719a      	strb	r2, [r3, #6]
 80143aa:	2200      	movs	r2, #0
 80143ac:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80143ae:	f000 ff2f 	bl	8015210 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80143b2:	f000 ff15 	bl	80151e0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80143b6:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	689b      	ldr	r3, [r3, #8]
 80143bc:	b29b      	uxth	r3, r3
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80143ca:	f001 fa35 	bl	8015838 <HW_IPCC_Enable>

  return;
 80143ce:	bf00      	nop
}
 80143d0:	bd80      	pop	{r7, pc}
	...

080143d4 <TL_Init>:


void TL_Init( void )
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80143d8:	4b0f      	ldr	r3, [pc, #60]	; (8014418 <TL_Init+0x44>)
 80143da:	4a10      	ldr	r2, [pc, #64]	; (801441c <TL_Init+0x48>)
 80143dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80143de:	4b0e      	ldr	r3, [pc, #56]	; (8014418 <TL_Init+0x44>)
 80143e0:	4a0f      	ldr	r2, [pc, #60]	; (8014420 <TL_Init+0x4c>)
 80143e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80143e4:	4b0c      	ldr	r3, [pc, #48]	; (8014418 <TL_Init+0x44>)
 80143e6:	4a0f      	ldr	r2, [pc, #60]	; (8014424 <TL_Init+0x50>)
 80143e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80143ea:	4b0b      	ldr	r3, [pc, #44]	; (8014418 <TL_Init+0x44>)
 80143ec:	4a0e      	ldr	r2, [pc, #56]	; (8014428 <TL_Init+0x54>)
 80143ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80143f0:	4b09      	ldr	r3, [pc, #36]	; (8014418 <TL_Init+0x44>)
 80143f2:	4a0e      	ldr	r2, [pc, #56]	; (801442c <TL_Init+0x58>)
 80143f4:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80143f6:	4b08      	ldr	r3, [pc, #32]	; (8014418 <TL_Init+0x44>)
 80143f8:	4a0d      	ldr	r2, [pc, #52]	; (8014430 <TL_Init+0x5c>)
 80143fa:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80143fc:	4b06      	ldr	r3, [pc, #24]	; (8014418 <TL_Init+0x44>)
 80143fe:	4a0d      	ldr	r2, [pc, #52]	; (8014434 <TL_Init+0x60>)
 8014400:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8014402:	4b05      	ldr	r3, [pc, #20]	; (8014418 <TL_Init+0x44>)
 8014404:	4a0c      	ldr	r2, [pc, #48]	; (8014438 <TL_Init+0x64>)
 8014406:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8014408:	4b03      	ldr	r3, [pc, #12]	; (8014418 <TL_Init+0x44>)
 801440a:	4a0c      	ldr	r2, [pc, #48]	; (801443c <TL_Init+0x68>)
 801440c:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801440e:	f001 fa23 	bl	8015858 <HW_IPCC_Init>

  return;
 8014412:	bf00      	nop
}
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20030000 	.word	0x20030000
 801441c:	20030024 	.word	0x20030024
 8014420:	20030044 	.word	0x20030044
 8014424:	20030054 	.word	0x20030054
 8014428:	20030060 	.word	0x20030060
 801442c:	20030068 	.word	0x20030068
 8014430:	20030070 	.word	0x20030070
 8014434:	2003008c 	.word	0x2003008c
 8014438:	20030090 	.word	0x20030090
 801443c:	2003009c 	.word	0x2003009c

08014440 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8014446:	e009      	b.n	801445c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8014448:	1d3b      	adds	r3, r7, #4
 801444a:	4619      	mov	r1, r3
 801444c:	4808      	ldr	r0, [pc, #32]	; (8014470 <HW_IPCC_BLE_RxEvtNot+0x30>)
 801444e:	f7ff fe66 	bl	801411e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8014452:	4b08      	ldr	r3, [pc, #32]	; (8014474 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	4610      	mov	r0, r2
 801445a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801445c:	4804      	ldr	r0, [pc, #16]	; (8014470 <HW_IPCC_BLE_RxEvtNot+0x30>)
 801445e:	f7ff fdd7 	bl	8014010 <LST_is_empty>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d0ef      	beq.n	8014448 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8014468:	bf00      	nop
}
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	20030828 	.word	0x20030828
 8014474:	2002745c 	.word	0x2002745c

08014478 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801447c:	4b02      	ldr	r3, [pc, #8]	; (8014488 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	4798      	blx	r3

  return;
 8014482:	bf00      	nop
}
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	20027460 	.word	0x20027460

0801448c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8014498:	480d      	ldr	r0, [pc, #52]	; (80144d0 <TL_SYS_Init+0x44>)
 801449a:	f7ff fda9 	bl	8013ff0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801449e:	4b0d      	ldr	r3, [pc, #52]	; (80144d4 <TL_SYS_Init+0x48>)
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	689a      	ldr	r2, [r3, #8]
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	4a08      	ldr	r2, [pc, #32]	; (80144d0 <TL_SYS_Init+0x44>)
 80144b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80144b2:	f001 f9ff 	bl	80158b4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	4a07      	ldr	r2, [pc, #28]	; (80144d8 <TL_SYS_Init+0x4c>)
 80144bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	4a06      	ldr	r2, [pc, #24]	; (80144dc <TL_SYS_Init+0x50>)
 80144c4:	6013      	str	r3, [r2, #0]

  return 0;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	20030830 	.word	0x20030830
 80144d4:	20030000 	.word	0x20030000
 80144d8:	20027464 	.word	0x20027464
 80144dc:	20027468 	.word	0x20027468

080144e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80144ec:	4b05      	ldr	r3, [pc, #20]	; (8014504 <TL_SYS_SendCmd+0x24>)
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2210      	movs	r2, #16
 80144f4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80144f6:	f001 f9e7 	bl	80158c8 <HW_IPCC_SYS_SendCmd>

  return 0;
 80144fa:	2300      	movs	r3, #0
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3708      	adds	r7, #8
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	20030000 	.word	0x20030000

08014508 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801450c:	4b04      	ldr	r3, [pc, #16]	; (8014520 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4a04      	ldr	r2, [pc, #16]	; (8014524 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8014512:	68d2      	ldr	r2, [r2, #12]
 8014514:	6812      	ldr	r2, [r2, #0]
 8014516:	4610      	mov	r0, r2
 8014518:	4798      	blx	r3

  return;
 801451a:	bf00      	nop
}
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	20027464 	.word	0x20027464
 8014524:	20030000 	.word	0x20030000

08014528 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801452e:	e009      	b.n	8014544 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014530:	1d3b      	adds	r3, r7, #4
 8014532:	4619      	mov	r1, r3
 8014534:	4808      	ldr	r0, [pc, #32]	; (8014558 <HW_IPCC_SYS_EvtNot+0x30>)
 8014536:	f7ff fdf2 	bl	801411e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 801453a:	4b08      	ldr	r3, [pc, #32]	; (801455c <HW_IPCC_SYS_EvtNot+0x34>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	4610      	mov	r0, r2
 8014542:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014544:	4804      	ldr	r0, [pc, #16]	; (8014558 <HW_IPCC_SYS_EvtNot+0x30>)
 8014546:	f7ff fd63 	bl	8014010 <LST_is_empty>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d0ef      	beq.n	8014530 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014550:	bf00      	nop
}
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	20030830 	.word	0x20030830
 801455c:	20027468 	.word	0x20027468

08014560 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <TL_THREAD_Init+0x34>)
 801456a:	689b      	ldr	r3, [r3, #8]
 801456c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	685a      	ldr	r2, [r3, #4]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	689a      	ldr	r2, [r3, #8]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 8014586:	f001 f9c5 	bl	8015914 <HW_IPCC_THREAD_Init>

  return;
 801458a:	bf00      	nop
}
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20030000 	.word	0x20030000

08014598 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 801459c:	4b04      	ldr	r3, [pc, #16]	; (80145b0 <TL_OT_SendCmd+0x18>)
 801459e:	689b      	ldr	r3, [r3, #8]
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	2208      	movs	r2, #8
 80145a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80145a6:	f001 f9c3 	bl	8015930 <HW_IPCC_OT_SendCmd>

  return;
 80145aa:	bf00      	nop
}
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20030000 	.word	0x20030000

080145b4 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80145b8:	4b04      	ldr	r3, [pc, #16]	; (80145cc <TL_CLI_SendCmd+0x18>)
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	220a      	movs	r2, #10
 80145c0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80145c2:	f001 f9c3 	bl	801594c <HW_IPCC_CLI_SendCmd>

  return;
 80145c6:	bf00      	nop
}
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	20030000 	.word	0x20030000

080145d0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80145d4:	4b04      	ldr	r3, [pc, #16]	; (80145e8 <TL_THREAD_SendAck+0x18>)
 80145d6:	689b      	ldr	r3, [r3, #8]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	220d      	movs	r2, #13
 80145dc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80145de:	f001 f9bf 	bl	8015960 <HW_IPCC_THREAD_SendAck>

  return;
 80145e2:	bf00      	nop
}
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20030000 	.word	0x20030000

080145ec <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80145f0:	4b04      	ldr	r3, [pc, #16]	; (8014604 <TL_THREAD_CliSendAck+0x18>)
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	220d      	movs	r2, #13
 80145f8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80145fa:	f001 f9bf 	bl	801597c <HW_IPCC_THREAD_CliSendAck>

  return;
 80145fe:	bf00      	nop
}
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	20030000 	.word	0x20030000

08014608 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 801460c:	4b03      	ldr	r3, [pc, #12]	; (801461c <HW_IPCC_OT_CmdEvtNot+0x14>)
 801460e:	689b      	ldr	r3, [r3, #8]
 8014610:	689b      	ldr	r3, [r3, #8]
 8014612:	4618      	mov	r0, r3
 8014614:	f000 fe20 	bl	8015258 <TL_OT_CmdEvtReceived>

  return;
 8014618:	bf00      	nop
}
 801461a:	bd80      	pop	{r7, pc}
 801461c:	20030000 	.word	0x20030000

08014620 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8014620:	b580      	push	{r7, lr}
 8014622:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8014624:	4b03      	ldr	r3, [pc, #12]	; (8014634 <HW_IPCC_THREAD_EvtNot+0x14>)
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	4618      	mov	r0, r3
 801462c:	f000 fe1e 	bl	801526c <TL_THREAD_NotReceived>

  return;
 8014630:	bf00      	nop
}
 8014632:	bd80      	pop	{r7, pc}
 8014634:	20030000 	.word	0x20030000

08014638 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 801463c:	4b03      	ldr	r3, [pc, #12]	; (801464c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	4618      	mov	r0, r3
 8014644:	f000 ff00 	bl	8015448 <TL_THREAD_CliNotReceived>

  return;
 8014648:	bf00      	nop
}
 801464a:	bd80      	pop	{r7, pc}
 801464c:	20030000 	.word	0x20030000

08014650 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014658:	4817      	ldr	r0, [pc, #92]	; (80146b8 <TL_MM_Init+0x68>)
 801465a:	f7ff fcc9 	bl	8013ff0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801465e:	4817      	ldr	r0, [pc, #92]	; (80146bc <TL_MM_Init+0x6c>)
 8014660:	f7ff fcc6 	bl	8013ff0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8014664:	4b16      	ldr	r3, [pc, #88]	; (80146c0 <TL_MM_Init+0x70>)
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	4a16      	ldr	r2, [pc, #88]	; (80146c4 <TL_MM_Init+0x74>)
 801466a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801466c:	4b15      	ldr	r3, [pc, #84]	; (80146c4 <TL_MM_Init+0x74>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	6892      	ldr	r2, [r2, #8]
 8014674:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8014676:	4b13      	ldr	r3, [pc, #76]	; (80146c4 <TL_MM_Init+0x74>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	68d2      	ldr	r2, [r2, #12]
 801467e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014680:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <TL_MM_Init+0x74>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	4a0c      	ldr	r2, [pc, #48]	; (80146b8 <TL_MM_Init+0x68>)
 8014686:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014688:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <TL_MM_Init+0x74>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	6812      	ldr	r2, [r2, #0]
 8014690:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8014692:	4b0c      	ldr	r3, [pc, #48]	; (80146c4 <TL_MM_Init+0x74>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	6852      	ldr	r2, [r2, #4]
 801469a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801469c:	4b09      	ldr	r3, [pc, #36]	; (80146c4 <TL_MM_Init+0x74>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	6912      	ldr	r2, [r2, #16]
 80146a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80146a6:	4b07      	ldr	r3, [pc, #28]	; (80146c4 <TL_MM_Init+0x74>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	6952      	ldr	r2, [r2, #20]
 80146ae:	619a      	str	r2, [r3, #24]

  return;
 80146b0:	bf00      	nop
}
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	200300a8 	.word	0x200300a8
 80146bc:	20027454 	.word	0x20027454
 80146c0:	20030000 	.word	0x20030000
 80146c4:	2002746c 	.word	0x2002746c

080146c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80146d0:	6879      	ldr	r1, [r7, #4]
 80146d2:	4805      	ldr	r0, [pc, #20]	; (80146e8 <TL_MM_EvtDone+0x20>)
 80146d4:	f7ff fce0 	bl	8014098 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80146d8:	4804      	ldr	r0, [pc, #16]	; (80146ec <TL_MM_EvtDone+0x24>)
 80146da:	f001 f981 	bl	80159e0 <HW_IPCC_MM_SendFreeBuf>

  return;
 80146de:	bf00      	nop
}
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20027454 	.word	0x20027454
 80146ec:	080146f1 	.word	0x080146f1

080146f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80146f6:	e00c      	b.n	8014712 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80146f8:	1d3b      	adds	r3, r7, #4
 80146fa:	4619      	mov	r1, r3
 80146fc:	480a      	ldr	r0, [pc, #40]	; (8014728 <SendFreeBuf+0x38>)
 80146fe:	f7ff fd0e 	bl	801411e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8014702:	4b0a      	ldr	r3, [pc, #40]	; (801472c <SendFreeBuf+0x3c>)
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	4611      	mov	r1, r2
 801470c:	4618      	mov	r0, r3
 801470e:	f7ff fcc3 	bl	8014098 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014712:	4805      	ldr	r0, [pc, #20]	; (8014728 <SendFreeBuf+0x38>)
 8014714:	f7ff fc7c 	bl	8014010 <LST_is_empty>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	d0ec      	beq.n	80146f8 <SendFreeBuf+0x8>
  }

  return;
 801471e:	bf00      	nop
}
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	20027454 	.word	0x20027454
 801472c:	20030000 	.word	0x20030000

08014730 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8014734:	4805      	ldr	r0, [pc, #20]	; (801474c <TL_TRACES_Init+0x1c>)
 8014736:	f7ff fc5b 	bl	8013ff0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801473a:	4b05      	ldr	r3, [pc, #20]	; (8014750 <TL_TRACES_Init+0x20>)
 801473c:	695b      	ldr	r3, [r3, #20]
 801473e:	4a03      	ldr	r2, [pc, #12]	; (801474c <TL_TRACES_Init+0x1c>)
 8014740:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8014742:	f001 f983 	bl	8015a4c <HW_IPCC_TRACES_Init>

  return;
 8014746:	bf00      	nop
}
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	200300b0 	.word	0x200300b0
 8014750:	20030000 	.word	0x20030000

08014754 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801475a:	e008      	b.n	801476e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801475c:	1d3b      	adds	r3, r7, #4
 801475e:	4619      	mov	r1, r3
 8014760:	4808      	ldr	r0, [pc, #32]	; (8014784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014762:	f7ff fcdc 	bl	801411e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4618      	mov	r0, r3
 801476a:	f7ec fd55 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801476e:	4805      	ldr	r0, [pc, #20]	; (8014784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014770:	f7ff fc4e 	bl	8014010 <LST_is_empty>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d0f0      	beq.n	801475c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801477a:	bf00      	nop
}
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	200300b0 	.word	0x200300b0

08014788 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 801478e:	f000 f9a3 	bl	8014ad8 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8014792:	480e      	ldr	r0, [pc, #56]	; (80147cc <APP_THREAD_Init+0x44>)
 8014794:	f000 fd08 	bl	80151a8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8014798:	2101      	movs	r1, #1
 801479a:	2002      	movs	r0, #2
 801479c:	f001 f97e 	bl	8015a9c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 80147a0:	f000 fe3a 	bl	8015418 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 80147a4:	f000 fe1a 	bl	80153dc <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80147a8:	f7ff fa38 	bl	8013c1c <SHCI_C2_THREAD_Init>
 80147ac:	4603      	mov	r3, r0
 80147ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80147b0:	4a07      	ldr	r2, [pc, #28]	; (80147d0 <APP_THREAD_Init+0x48>)
 80147b2:	2100      	movs	r1, #0
 80147b4:	4807      	ldr	r0, [pc, #28]	; (80147d4 <APP_THREAD_Init+0x4c>)
 80147b6:	f7fa f885 	bl	800e8c4 <osThreadNew>
 80147ba:	4602      	mov	r2, r0
 80147bc:	4b06      	ldr	r3, [pc, #24]	; (80147d8 <APP_THREAD_Init+0x50>)
 80147be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80147c0:	f000 f86c 	bl	801489c <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80147c4:	bf00      	nop
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	20030838 	.word	0x20030838
 80147d0:	08017a50 	.word	0x08017a50
 80147d4:	08014b95 	.word	0x08014b95
 80147d8:	20027684 	.word	0x20027684

080147dc <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2b07      	cmp	r3, #7
 80147ea:	d83b      	bhi.n	8014864 <APP_THREAD_Error+0x88>
 80147ec:	a201      	add	r2, pc, #4	; (adr r2, 80147f4 <APP_THREAD_Error+0x18>)
 80147ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f2:	bf00      	nop
 80147f4:	08014815 	.word	0x08014815
 80147f8:	0801481f 	.word	0x0801481f
 80147fc:	08014829 	.word	0x08014829
 8014800:	08014833 	.word	0x08014833
 8014804:	0801483d 	.word	0x0801483d
 8014808:	08014847 	.word	0x08014847
 801480c:	08014851 	.word	0x08014851
 8014810:	0801485b 	.word	0x0801485b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	4818      	ldr	r0, [pc, #96]	; (8014878 <APP_THREAD_Error+0x9c>)
 8014818:	f000 f952 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 801481c:	e027      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 801481e:	6839      	ldr	r1, [r7, #0]
 8014820:	4816      	ldr	r0, [pc, #88]	; (801487c <APP_THREAD_Error+0xa0>)
 8014822:	f000 f94d 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 8014826:	e022      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	4815      	ldr	r0, [pc, #84]	; (8014880 <APP_THREAD_Error+0xa4>)
 801482c:	f000 f948 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 8014830:	e01d      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014832:	6839      	ldr	r1, [r7, #0]
 8014834:	4813      	ldr	r0, [pc, #76]	; (8014884 <APP_THREAD_Error+0xa8>)
 8014836:	f000 f943 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 801483a:	e018      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	4812      	ldr	r0, [pc, #72]	; (8014888 <APP_THREAD_Error+0xac>)
 8014840:	f000 f93e 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 8014844:	e013      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8014846:	6839      	ldr	r1, [r7, #0]
 8014848:	4810      	ldr	r0, [pc, #64]	; (801488c <APP_THREAD_Error+0xb0>)
 801484a:	f000 f939 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 801484e:	e00e      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	480f      	ldr	r0, [pc, #60]	; (8014890 <APP_THREAD_Error+0xb4>)
 8014854:	f000 f934 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 8014858:	e009      	b.n	801486e <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	480d      	ldr	r0, [pc, #52]	; (8014894 <APP_THREAD_Error+0xb8>)
 801485e:	f000 f92f 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 8014862:	e004      	b.n	801486e <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8014864:	2100      	movs	r1, #0
 8014866:	480c      	ldr	r0, [pc, #48]	; (8014898 <APP_THREAD_Error+0xbc>)
 8014868:	f000 f92a 	bl	8014ac0 <APP_THREAD_TraceError>
    break;
 801486c:	bf00      	nop
  }
}
 801486e:	bf00      	nop
 8014870:	3708      	adds	r7, #8
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	080174a0 	.word	0x080174a0
 801487c:	080174c4 	.word	0x080174c4
 8014880:	080174e8 	.word	0x080174e8
 8014884:	08017508 	.word	0x08017508
 8014888:	08017528 	.word	0x08017528
 801488c:	08017548 	.word	0x08017548
 8014890:	08017564 	.word	0x08017564
 8014894:	08017590 	.word	0x08017590
 8014898:	080175b4 	.word	0x080175b4

0801489c <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80148a2:	2000      	movs	r0, #0
 80148a4:	f7fe fddc 	bl	8013460 <otInstanceErasePersistentInfo>
 80148a8:	4603      	mov	r3, r0
 80148aa:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80148ac:	79fb      	ldrb	r3, [r7, #7]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d004      	beq.n	80148bc <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80148b2:	79fb      	ldrb	r3, [r7, #7]
 80148b4:	4619      	mov	r1, r3
 80148b6:	2006      	movs	r0, #6
 80148b8:	f7ff ff90 	bl	80147dc <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 80148bc:	2000      	movs	r0, #0
 80148be:	f7fe fd73 	bl	80133a8 <otInstanceFinalize>
  otInstanceInitSingle();
 80148c2:	f7fe fd4a 	bl	801335a <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80148c6:	2200      	movs	r2, #0
 80148c8:	4957      	ldr	r1, [pc, #348]	; (8014a28 <APP_THREAD_DeviceConfig+0x18c>)
 80148ca:	2000      	movs	r0, #0
 80148cc:	f7fe fd92 	bl	80133f4 <otSetStateChangedCallback>
 80148d0:	4603      	mov	r3, r0
 80148d2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80148d4:	79fb      	ldrb	r3, [r7, #7]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80148da:	79fb      	ldrb	r3, [r7, #7]
 80148dc:	4619      	mov	r1, r3
 80148de:	2001      	movs	r0, #1
 80148e0:	f7ff ff7c 	bl	80147dc <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80148e4:	2117      	movs	r1, #23
 80148e6:	2000      	movs	r0, #0
 80148e8:	f7fe fe9a 	bl	8013620 <otLinkSetChannel>
 80148ec:	4603      	mov	r3, r0
 80148ee:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80148f0:	79fb      	ldrb	r3, [r7, #7]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d004      	beq.n	8014900 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80148f6:	79fb      	ldrb	r3, [r7, #7]
 80148f8:	4619      	mov	r1, r3
 80148fa:	2002      	movs	r0, #2
 80148fc:	f7ff ff6e 	bl	80147dc <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014900:	f241 2134 	movw	r1, #4660	; 0x1234
 8014904:	2000      	movs	r0, #0
 8014906:	f7fe febb 	bl	8013680 <otLinkSetPanId>
 801490a:	4603      	mov	r3, r0
 801490c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801490e:	79fb      	ldrb	r3, [r7, #7]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d004      	beq.n	801491e <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014914:	79fb      	ldrb	r3, [r7, #7]
 8014916:	4619      	mov	r1, r3
 8014918:	2003      	movs	r0, #3
 801491a:	f7ff ff5f 	bl	80147dc <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 801491e:	2101      	movs	r1, #1
 8014920:	2000      	movs	r0, #0
 8014922:	f7fe fdc6 	bl	80134b2 <otIp6SetEnabled>
 8014926:	4603      	mov	r3, r0
 8014928:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801492a:	79fb      	ldrb	r3, [r7, #7]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d004      	beq.n	801493a <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014930:	79fb      	ldrb	r3, [r7, #7]
 8014932:	4619      	mov	r1, r3
 8014934:	2004      	movs	r0, #4
 8014936:	f7ff ff51 	bl	80147dc <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801493a:	2101      	movs	r1, #1
 801493c:	2000      	movs	r0, #0
 801493e:	f7ff fc0b 	bl	8014158 <otThreadSetEnabled>
 8014942:	4603      	mov	r3, r0
 8014944:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d004      	beq.n	8014956 <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 801494c:	79fb      	ldrb	r3, [r7, #7]
 801494e:	4619      	mov	r1, r3
 8014950:	2005      	movs	r0, #5
 8014952:	f7ff ff43 	bl	80147dc <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8014956:	2100      	movs	r1, #0
 8014958:	2000      	movs	r0, #0
 801495a:	f7ff fbfd 	bl	8014158 <otThreadSetEnabled>
 801495e:	4603      	mov	r3, r0
 8014960:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014962:	79fb      	ldrb	r3, [r7, #7]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d004      	beq.n	8014972 <APP_THREAD_DeviceConfig+0xd6>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014968:	79fb      	ldrb	r3, [r7, #7]
 801496a:	4619      	mov	r1, r3
 801496c:	2005      	movs	r0, #5
 801496e:	f7ff ff35 	bl	80147dc <APP_THREAD_Error>
  }

    error = otThreadSetMasterKey(NULL, &masterKey);
 8014972:	492e      	ldr	r1, [pc, #184]	; (8014a2c <APP_THREAD_DeviceConfig+0x190>)
 8014974:	2000      	movs	r0, #0
 8014976:	f7ff fc4e 	bl	8014216 <otThreadSetMasterKey>
 801497a:	4603      	mov	r3, r0
 801497c:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 801497e:	79fb      	ldrb	r3, [r7, #7]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d004      	beq.n	801498e <APP_THREAD_DeviceConfig+0xf2>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8014984:	79fb      	ldrb	r3, [r7, #7]
 8014986:	4619      	mov	r1, r3
 8014988:	2002      	movs	r0, #2
 801498a:	f7ff ff27 	bl	80147dc <APP_THREAD_Error>
    }

    error = otThreadSetNetworkName(NULL, networkName);
 801498e:	4928      	ldr	r1, [pc, #160]	; (8014a30 <APP_THREAD_DeviceConfig+0x194>)
 8014990:	2000      	movs	r0, #0
 8014992:	f7ff fc97 	bl	80142c4 <otThreadSetNetworkName>
 8014996:	4603      	mov	r3, r0
 8014998:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 801499a:	79fb      	ldrb	r3, [r7, #7]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d004      	beq.n	80149aa <APP_THREAD_DeviceConfig+0x10e>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80149a0:	79fb      	ldrb	r3, [r7, #7]
 80149a2:	4619      	mov	r1, r3
 80149a4:	2002      	movs	r0, #2
 80149a6:	f7ff ff19 	bl	80147dc <APP_THREAD_Error>
    }
    error = otThreadSetExtendedPanId(NULL , &extendedPanId);
 80149aa:	4922      	ldr	r1, [pc, #136]	; (8014a34 <APP_THREAD_DeviceConfig+0x198>)
 80149ac:	2000      	movs	r0, #0
 80149ae:	f7ff fc03 	bl	80141b8 <otThreadSetExtendedPanId>
 80149b2:	4603      	mov	r3, r0
 80149b4:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80149b6:	79fb      	ldrb	r3, [r7, #7]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d004      	beq.n	80149c6 <APP_THREAD_DeviceConfig+0x12a>
    {
      APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80149bc:	79fb      	ldrb	r3, [r7, #7]
 80149be:	4619      	mov	r1, r3
 80149c0:	2002      	movs	r0, #2
 80149c2:	f7ff ff0b 	bl	80147dc <APP_THREAD_Error>
    }

    error = otThreadSetEnabled(NULL, true);
 80149c6:	2101      	movs	r1, #1
 80149c8:	2000      	movs	r0, #0
 80149ca:	f7ff fbc5 	bl	8014158 <otThreadSetEnabled>
 80149ce:	4603      	mov	r3, r0
 80149d0:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80149d2:	79fb      	ldrb	r3, [r7, #7]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d004      	beq.n	80149e2 <APP_THREAD_DeviceConfig+0x146>
    {
      APP_THREAD_Error(ERR_THREAD_START,error);
 80149d8:	79fb      	ldrb	r3, [r7, #7]
 80149da:	4619      	mov	r1, r3
 80149dc:	2005      	movs	r0, #5
 80149de:	f7ff fefd 	bl	80147dc <APP_THREAD_Error>
    }

    error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80149e2:	f241 6133 	movw	r1, #5683	; 0x1633
 80149e6:	2000      	movs	r0, #0
 80149e8:	f7fe fc25 	bl	8013236 <otCoapStart>
 80149ec:	4603      	mov	r3, r0
 80149ee:	71fb      	strb	r3, [r7, #7]
  //  error = otCoapAddResource(NULL, &OT_Light_Ressource);
    error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 80149f0:	4911      	ldr	r1, [pc, #68]	; (8014a38 <APP_THREAD_DeviceConfig+0x19c>)
 80149f2:	2000      	movs	r0, #0
 80149f4:	f7fe fc4f 	bl	8013296 <otCoapAddResource>
 80149f8:	4603      	mov	r3, r0
 80149fa:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 80149fc:	490f      	ldr	r1, [pc, #60]	; (8014a3c <APP_THREAD_DeviceConfig+0x1a0>)
 80149fe:	2000      	movs	r0, #0
 8014a00:	f7fe fc49 	bl	8013296 <otCoapAddResource>
 8014a04:	4603      	mov	r3, r0
 8014a06:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8014a08:	490d      	ldr	r1, [pc, #52]	; (8014a40 <APP_THREAD_DeviceConfig+0x1a4>)
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	f7fe fc43 	bl	8013296 <otCoapAddResource>
 8014a10:	4603      	mov	r3, r0
 8014a12:	71fb      	strb	r3, [r7, #7]
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 8014a14:	490b      	ldr	r1, [pc, #44]	; (8014a44 <APP_THREAD_DeviceConfig+0x1a8>)
 8014a16:	2000      	movs	r0, #0
 8014a18:	f7fe fc3d 	bl	8013296 <otCoapAddResource>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	71fb      	strb	r3, [r7, #7]

    // start master thread
//    osThreadFlagsSet(masterTaskHandle, 0x00000008U);
//    startSensorThreads();
  /* USER CODE END DEVICECONFIG */
}
 8014a20:	bf00      	nop
 8014a22:	3708      	adds	r7, #8
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	08014a49 	.word	0x08014a49
 8014a2c:	08017ab8 	.word	0x08017ab8
 8014a30:	08017ad0 	.word	0x08017ad0
 8014a34:	08017ac8 	.word	0x08017ac8
 8014a38:	20000088 	.word	0x20000088
 8014a3c:	20000098 	.word	0x20000098
 8014a40:	200000a8 	.word	0x200000a8
 8014a44:	200000b8 	.word	0x200000b8

08014a48 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8014a48:	b590      	push	{r4, r7, lr}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f003 0304 	and.w	r3, r3, #4
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d027      	beq.n	8014aac <APP_THREAD_StateNotif+0x64>
  {
    switch (otThreadGetDeviceRole(NULL))
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	f7ff fc60 	bl	8014322 <otThreadGetDeviceRole>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b04      	cmp	r3, #4
 8014a66:	d81e      	bhi.n	8014aa6 <APP_THREAD_StateNotif+0x5e>
 8014a68:	a201      	add	r2, pc, #4	; (adr r2, 8014a70 <APP_THREAD_StateNotif+0x28>)
 8014a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a6e:	bf00      	nop
 8014a70:	08014ab1 	.word	0x08014ab1
 8014a74:	08014a85 	.word	0x08014a85
 8014a78:	08014a95 	.word	0x08014a95
 8014a7c:	08014a9b 	.word	0x08014a9b
 8014a80:	08014aa1 	.word	0x08014aa1

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	borderRouter.epoch = 0;
 8014a84:	4a0d      	ldr	r2, [pc, #52]	; (8014abc <APP_THREAD_StateNotif+0x74>)
 8014a86:	f04f 0300 	mov.w	r3, #0
 8014a8a:	f04f 0400 	mov.w	r4, #0
 8014a8e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 8014a92:	e00e      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
    	APP_THREAD_SendMyIP();
 8014a94:	f000 f8b0 	bl	8014bf8 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8014a98:	e00b      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
    	APP_THREAD_SendMyIP();
 8014a9a:	f000 f8ad 	bl	8014bf8 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8014a9e:	e008      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
    	APP_THREAD_SendMyIP();
 8014aa0:	f000 f8aa 	bl	8014bf8 <APP_THREAD_SendMyIP>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8014aa4:	e005      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
    default:
      /* USER CODE BEGIN DEFAULT */
    	APP_THREAD_SendMyIP();
 8014aa6:	f000 f8a7 	bl	8014bf8 <APP_THREAD_SendMyIP>
      /* USER CODE END DEFAULT */
      break;
 8014aaa:	e002      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
    }
  }
 8014aac:	bf00      	nop
 8014aae:	e000      	b.n	8014ab2 <APP_THREAD_StateNotif+0x6a>
      break;
 8014ab0:	bf00      	nop
}
 8014ab2:	bf00      	nop
 8014ab4:	370c      	adds	r7, #12
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd90      	pop	{r4, r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20027750 	.word	0x20027750

08014ac0 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8014aca:	bf00      	nop
 8014acc:	370c      	adds	r7, #12
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad4:	4770      	bx	lr
	...

08014ad8 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b088      	sub	sp, #32
 8014adc:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8014ade:	1d3b      	adds	r3, r7, #4
 8014ae0:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8014ae2:	6978      	ldr	r0, [r7, #20]
 8014ae4:	f7ff f8c6 	bl	8013c74 <SHCI_GetWirelessFwInfo>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d004      	beq.n	8014af8 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014aee:	2101      	movs	r1, #1
 8014af0:	2007      	movs	r0, #7
 8014af2:	f7ff fe73 	bl	80147dc <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8014af6:	e03d      	b.n	8014b74 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8014af8:	4a20      	ldr	r2, [pc, #128]	; (8014b7c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014afa:	2101      	movs	r1, #1
 8014afc:	2000      	movs	r0, #0
 8014afe:	f7f0 f9f3 	bl	8004ee8 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8014b02:	4a1f      	ldr	r2, [pc, #124]	; (8014b80 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8014b04:	2101      	movs	r1, #1
 8014b06:	2000      	movs	r0, #0
 8014b08:	f7f0 f9ee 	bl	8004ee8 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	4619      	mov	r1, r3
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	785b      	ldrb	r3, [r3, #1]
 8014b16:	461a      	mov	r2, r3
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	789b      	ldrb	r3, [r3, #2]
 8014b1c:	9301      	str	r3, [sp, #4]
 8014b1e:	9200      	str	r2, [sp, #0]
 8014b20:	460b      	mov	r3, r1
 8014b22:	4a18      	ldr	r2, [pc, #96]	; (8014b84 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8014b24:	2101      	movs	r1, #1
 8014b26:	2000      	movs	r0, #0
 8014b28:	f7f0 f9de 	bl	8004ee8 <logApplication>
    switch(p_wireless_info->StackType)
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	7a5b      	ldrb	r3, [r3, #9]
 8014b30:	2b11      	cmp	r3, #17
 8014b32:	d009      	beq.n	8014b48 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8014b34:	2b50      	cmp	r3, #80	; 0x50
 8014b36:	d00d      	beq.n	8014b54 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8014b38:	2b10      	cmp	r3, #16
 8014b3a:	d111      	bne.n	8014b60 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8014b3c:	4a12      	ldr	r2, [pc, #72]	; (8014b88 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8014b3e:	2101      	movs	r1, #1
 8014b40:	2000      	movs	r0, #0
 8014b42:	f7f0 f9d1 	bl	8004ee8 <logApplication>
      break;
 8014b46:	e010      	b.n	8014b6a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8014b48:	4a10      	ldr	r2, [pc, #64]	; (8014b8c <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	f7f0 f9cb 	bl	8004ee8 <logApplication>
      break;
 8014b52:	e00a      	b.n	8014b6a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8014b54:	4a0e      	ldr	r2, [pc, #56]	; (8014b90 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8014b56:	2101      	movs	r1, #1
 8014b58:	2000      	movs	r0, #0
 8014b5a:	f7f0 f9c5 	bl	8004ee8 <logApplication>
      break;
 8014b5e:	e004      	b.n	8014b6a <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014b60:	2101      	movs	r1, #1
 8014b62:	2007      	movs	r0, #7
 8014b64:	f7ff fe3a 	bl	80147dc <APP_THREAD_Error>
      break;
 8014b68:	bf00      	nop
    APP_DBG("**********************************************************");
 8014b6a:	4a04      	ldr	r2, [pc, #16]	; (8014b7c <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014b6c:	2101      	movs	r1, #1
 8014b6e:	2000      	movs	r0, #0
 8014b70:	f7f0 f9ba 	bl	8004ee8 <logApplication>
}
 8014b74:	bf00      	nop
 8014b76:	3718      	adds	r7, #24
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}
 8014b7c:	080175c4 	.word	0x080175c4
 8014b80:	08017600 	.word	0x08017600
 8014b84:	0801761c 	.word	0x0801761c
 8014b88:	08017634 	.word	0x08017634
 8014b8c:	0801764c 	.word	0x0801764c
 8014b90:	08017664 	.word	0x08017664

08014b94 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	2001      	movs	r0, #1
 8014ba4:	f7f9 ffec 	bl	800eb80 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8014ba8:	f000 fc7a 	bl	80154a0 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014bac:	e7f6      	b.n	8014b9c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08014bae <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8014bba:	2101      	movs	r1, #1
 8014bbc:	2001      	movs	r0, #1
 8014bbe:	f7f9 ffdf 	bl	800eb80 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8014bc2:	f000 fbd1 	bl	8015368 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014bc6:	e7f6      	b.n	8014bb6 <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08014bc8 <APP_THREAD_DummyReqHandler>:
  */
static void APP_THREAD_DummyReqHandler(void            * p_context,
                                   otCoapHeader        * pHeader,
                                   otMessage           * pMessage,
                                   const otMessageInfo * pMessageInfo)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	607a      	str	r2, [r7, #4]
 8014bd4:	603b      	str	r3, [r7, #0]
    tempMessageInfo = pMessageInfo;
 8014bd6:	4a06      	ldr	r2, [pc, #24]	; (8014bf0 <APP_THREAD_DummyReqHandler+0x28>)
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8014bdc:	4a05      	ldr	r2, [pc, #20]	; (8014bf4 <APP_THREAD_DummyReqHandler+0x2c>)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6013      	str	r3, [r2, #0]
}
 8014be2:	bf00      	nop
 8014be4:	3714      	adds	r7, #20
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr
 8014bee:	bf00      	nop
 8014bf0:	200286a0 	.word	0x200286a0
 8014bf4:	200286e4 	.word	0x200286e4

08014bf8 <APP_THREAD_SendMyIP>:
	APP_THREAD_SendCoapUnicastRequest(NULL, NULL, MULICAST_FTD_BORDER_ROUTER, borderSyncResource);
}


char msgSendMyIP[5] = "cal";
void APP_THREAD_SendMyIP(){
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
	APP_THREAD_SendCoapUnicastRequest(msgSendMyIP, sizeof(msgSendMyIP), borderRouter.ipv6, borderSyncResource);
 8014bfc:	4b03      	ldr	r3, [pc, #12]	; (8014c0c <APP_THREAD_SendMyIP+0x14>)
 8014bfe:	4a04      	ldr	r2, [pc, #16]	; (8014c10 <APP_THREAD_SendMyIP+0x18>)
 8014c00:	2105      	movs	r1, #5
 8014c02:	4804      	ldr	r0, [pc, #16]	; (8014c14 <APP_THREAD_SendMyIP+0x1c>)
 8014c04:	f000 f94c 	bl	8014ea0 <APP_THREAD_SendCoapUnicastRequest>
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8014c08:	bf00      	nop
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	08017a98 	.word	0x08017a98
 8014c10:	20027750 	.word	0x20027750
 8014c14:	200000c8 	.word	0x200000c8

08014c18 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket){
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af02      	add	r7, sp, #8
 8014c1e:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapUnicastMsg(sensorPacket, sizeof(struct LogPacket), borderRouter.ipv6  , borderPacket, 1U);
 8014c20:	2301      	movs	r3, #1
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	4b04      	ldr	r3, [pc, #16]	; (8014c38 <APP_THREAD_SendBorderPacket+0x20>)
 8014c26:	4a05      	ldr	r2, [pc, #20]	; (8014c3c <APP_THREAD_SendBorderPacket+0x24>)
 8014c28:	21cc      	movs	r1, #204	; 0xcc
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 f9ea 	bl	8015004 <APP_THREAD_SendCoapUnicastMsg>

}
 8014c30:	bf00      	nop
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	08017aa8 	.word	0x08017aa8
 8014c3c:	20027750 	.word	0x20027750

08014c40 <APP_THREAD_CoapLightsSimpleRequestHandler>:
//}

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b084      	sub	sp, #16
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	607a      	str	r2, [r7, #4]
  do
  {
	lightsSimpleMessage = 0;
 8014c4c:	4b21      	ldr	r3, [pc, #132]	; (8014cd4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8014c4e:	2200      	movs	r2, #0
 8014c50:	601a      	str	r2, [r3, #0]

	//REMOVE THIS!!!!!!!!!
//	APP_THREAD_GetBorderRouterIP(); //REMOVE THIS!!!!!!!!!
	//REMOVE THIS!!!!!!!!!

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage)) == 4U)
 8014c52:	68b8      	ldr	r0, [r7, #8]
 8014c54:	f7fe fd6f 	bl	8013736 <otMessageGetOffset>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	2304      	movs	r3, #4
 8014c5e:	4a1d      	ldr	r2, [pc, #116]	; (8014cd4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8014c60:	68b8      	ldr	r0, [r7, #8]
 8014c62:	f7fe fdcd 	bl	8013800 <otMessageRead>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2b04      	cmp	r3, #4
 8014c6a:	d106      	bne.n	8014c7a <APP_THREAD_CoapLightsSimpleRequestHandler+0x3a>
	{
//    	lightMessage = lightMessage & 0x0F; //remove first 4 bits since they are part of the message overhead (?)

    	osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 8014c6c:	4b1a      	ldr	r3, [pc, #104]	; (8014cd8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x98>)
 8014c6e:	6818      	ldr	r0, [r3, #0]
 8014c70:	2300      	movs	r3, #0
 8014c72:	2200      	movs	r2, #0
 8014c74:	4917      	ldr	r1, [pc, #92]	; (8014cd4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x94>)
 8014c76:	f7fa fb6f 	bl	800f358 <osMessageQueuePut>
    	//char ipv6_multicast[50] = "deryfd11:1111:1122:0:22e2:b871:dc02:ad96";

//    	APP_THREAD_SendCoapUnicastRequest(message, borderRouter.ipv6, borderSyncResource);

	}
    receivedMessage = (otMessageInfo *) pMessage;
 8014c7a:	4a18      	ldr	r2, [pc, #96]	; (8014cdc <APP_THREAD_CoapLightsSimpleRequestHandler+0x9c>)
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8014c80:	68f8      	ldr	r0, [r7, #12]
 8014c82:	f7fe f98b 	bl	8012f9c <otCoapHeaderGetType>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <APP_THREAD_CoapLightsSimpleRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8014c8c:	6879      	ldr	r1, [r7, #4]
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	f000 fa3e 	bl	8015110 <APP_THREAD_SendDataResponse>
	  break;
 8014c94:	e019      	b.n	8014cca <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f7fe f980 	bl	8012f9c <otCoapHeaderGetType>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b10      	cmp	r3, #16
 8014ca0:	d110      	bne.n	8014cc4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f7fe f9a8 	bl	8012ff8 <otCoapHeaderGetCode>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	2b03      	cmp	r3, #3
 8014cac:	d10c      	bne.n	8014cc8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8014cae:	68b8      	ldr	r0, [r7, #8]
 8014cb0:	f7fe fd41 	bl	8013736 <otMessageGetOffset>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	2301      	movs	r3, #1
 8014cba:	4a09      	ldr	r2, [pc, #36]	; (8014ce0 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa0>)
 8014cbc:	68b8      	ldr	r0, [r7, #8]
 8014cbe:	f7fe fd9f 	bl	8013800 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8014cc2:	e002      	b.n	8014cca <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8014cc4:	bf00      	nop
 8014cc6:	e000      	b.n	8014cca <APP_THREAD_CoapLightsSimpleRequestHandler+0x8a>
      break;
 8014cc8:	bf00      	nop
}
 8014cca:	bf00      	nop
 8014ccc:	3710      	adds	r7, #16
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	20027da4 	.word	0x20027da4
 8014cd8:	2002796c 	.word	0x2002796c
 8014cdc:	200286e4 	.word	0x200286e4
 8014ce0:	2002774d 	.word	0x2002774d

08014ce4 <APP_THREAD_CoapToggleLoggingRequestHandler>:

static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage))
 8014cf0:	68b8      	ldr	r0, [r7, #8]
 8014cf2:	f7fe fd20 	bl	8013736 <otMessageGetOffset>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	2306      	movs	r3, #6
 8014cfc:	4a1e      	ldr	r2, [pc, #120]	; (8014d78 <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8014cfe:	68b8      	ldr	r0, [r7, #8]
 8014d00:	f7fe fd7e 	bl	8013800 <otMessageRead>
 8014d04:	4603      	mov	r3, r0
 8014d06:	2b06      	cmp	r3, #6
 8014d08:	d106      	bne.n	8014d18 <APP_THREAD_CoapToggleLoggingRequestHandler+0x34>
	{
    	osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8014d0a:	4b1c      	ldr	r3, [pc, #112]	; (8014d7c <APP_THREAD_CoapToggleLoggingRequestHandler+0x98>)
 8014d0c:	6818      	ldr	r0, [r3, #0]
 8014d0e:	2300      	movs	r3, #0
 8014d10:	2200      	movs	r2, #0
 8014d12:	4919      	ldr	r1, [pc, #100]	; (8014d78 <APP_THREAD_CoapToggleLoggingRequestHandler+0x94>)
 8014d14:	f7fa fb20 	bl	800f358 <osMessageQueuePut>
//    	{
//    		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
//		}
	}

    tempMessageInfo = pMessageInfo;
 8014d18:	4a19      	ldr	r2, [pc, #100]	; (8014d80 <APP_THREAD_CoapToggleLoggingRequestHandler+0x9c>)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8014d1e:	4a19      	ldr	r2, [pc, #100]	; (8014d84 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa0>)
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8014d24:	68f8      	ldr	r0, [r7, #12]
 8014d26:	f7fe f939 	bl	8012f9c <otCoapHeaderGetType>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d104      	bne.n	8014d3a <APP_THREAD_CoapToggleLoggingRequestHandler+0x56>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8014d30:	6879      	ldr	r1, [r7, #4]
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f000 f9ec 	bl	8015110 <APP_THREAD_SendDataResponse>
	  break;
 8014d38:	e019      	b.n	8014d6e <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8014d3a:	68f8      	ldr	r0, [r7, #12]
 8014d3c:	f7fe f92e 	bl	8012f9c <otCoapHeaderGetType>
 8014d40:	4603      	mov	r3, r0
 8014d42:	2b10      	cmp	r3, #16
 8014d44:	d110      	bne.n	8014d68 <APP_THREAD_CoapToggleLoggingRequestHandler+0x84>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8014d46:	68f8      	ldr	r0, [r7, #12]
 8014d48:	f7fe f956 	bl	8012ff8 <otCoapHeaderGetCode>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	2b03      	cmp	r3, #3
 8014d50:	d10c      	bne.n	8014d6c <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8014d52:	68b8      	ldr	r0, [r7, #8]
 8014d54:	f7fe fcef 	bl	8013736 <otMessageGetOffset>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	4a0a      	ldr	r2, [pc, #40]	; (8014d88 <APP_THREAD_CoapToggleLoggingRequestHandler+0xa4>)
 8014d60:	68b8      	ldr	r0, [r7, #8]
 8014d62:	f7fe fd4d 	bl	8013800 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8014d66:	e002      	b.n	8014d6e <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8014d68:	bf00      	nop
 8014d6a:	e000      	b.n	8014d6e <APP_THREAD_CoapToggleLoggingRequestHandler+0x8a>
      break;
 8014d6c:	bf00      	nop
}
 8014d6e:	bf00      	nop
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	200286b8 	.word	0x200286b8
 8014d7c:	20027d94 	.word	0x20027d94
 8014d80:	200286a0 	.word	0x200286a0
 8014d84:	200286e4 	.word	0x200286e4
 8014d88:	2002774d 	.word	0x2002774d

08014d8c <APP_THREAD_CoapBorderTimeRequestHandler>:
volatile char temp_var[100];
volatile uint8_t temp_num = 0;
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
  do
  {

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &borderRouter, sizeof(borderRouter)) == sizeof(borderRouter))
 8014d98:	68b8      	ldr	r0, [r7, #8]
 8014d9a:	f7fe fccc 	bl	8013736 <otMessageGetOffset>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	4619      	mov	r1, r3
 8014da2:	2340      	movs	r3, #64	; 0x40
 8014da4:	4a1a      	ldr	r2, [pc, #104]	; (8014e10 <APP_THREAD_CoapBorderTimeRequestHandler+0x84>)
 8014da6:	68b8      	ldr	r0, [r7, #8]
 8014da8:	f7fe fd2a 	bl	8013800 <otMessageRead>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b40      	cmp	r3, #64	; 0x40
 8014db0:	d101      	bne.n	8014db6 <APP_THREAD_CoapBorderTimeRequestHandler+0x2a>
	{
    	APP_THREAD_SendMyIP();
 8014db2:	f7ff ff21 	bl	8014bf8 <APP_THREAD_SendMyIP>
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
////			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//		}
	}

    receivedMessage = (otMessageInfo *) pMessage;
 8014db6:	4a17      	ldr	r2, [pc, #92]	; (8014e14 <APP_THREAD_CoapBorderTimeRequestHandler+0x88>)
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8014dbc:	68f8      	ldr	r0, [r7, #12]
 8014dbe:	f7fe f8ed 	bl	8012f9c <otCoapHeaderGetType>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d104      	bne.n	8014dd2 <APP_THREAD_CoapBorderTimeRequestHandler+0x46>
	{
      APP_THREAD_SendDataResponse(pHeader, pMessageInfo);
 8014dc8:	6879      	ldr	r1, [r7, #4]
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	f000 f9a0 	bl	8015110 <APP_THREAD_SendDataResponse>
	  break;
 8014dd0:	e019      	b.n	8014e06 <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
	}

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7fe f8e2 	bl	8012f9c <otCoapHeaderGetType>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	2b10      	cmp	r3, #16
 8014ddc:	d110      	bne.n	8014e00 <APP_THREAD_CoapBorderTimeRequestHandler+0x74>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f7fe f90a 	bl	8012ff8 <otCoapHeaderGetCode>
 8014de4:	4603      	mov	r3, r0
 8014de6:	2b03      	cmp	r3, #3
 8014de8:	d10c      	bne.n	8014e04 <APP_THREAD_CoapBorderTimeRequestHandler+0x78>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8014dea:	68b8      	ldr	r0, [r7, #8]
 8014dec:	f7fe fca3 	bl	8013736 <otMessageGetOffset>
 8014df0:	4603      	mov	r3, r0
 8014df2:	4619      	mov	r1, r3
 8014df4:	2301      	movs	r3, #1
 8014df6:	4a08      	ldr	r2, [pc, #32]	; (8014e18 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>)
 8014df8:	68b8      	ldr	r0, [r7, #8]
 8014dfa:	f7fe fd01 	bl	8013800 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8014dfe:	e002      	b.n	8014e06 <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8014e00:	bf00      	nop
 8014e02:	e000      	b.n	8014e06 <APP_THREAD_CoapBorderTimeRequestHandler+0x7a>
      break;
 8014e04:	bf00      	nop
}
 8014e06:	bf00      	nop
 8014e08:	3710      	adds	r7, #16
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	20027750 	.word	0x20027750
 8014e14:	200286e4 	.word	0x200286e4
 8014e18:	2002774d 	.word	0x2002774d

08014e1c <APP_THREAD_CoapLightsComplexRequestHandler>:
//}

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader * pHeader,
                                  otMessage            * pMessage,
                                  const otMessageInfo  * pMessageInfo)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b084      	sub	sp, #16
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
  do
  {
    //APP_THREAD_SendCoapUnicastRequest();

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex)) == sizeof(lightMessageComplex))
 8014e28:	68b8      	ldr	r0, [r7, #8]
 8014e2a:	f7fe fc84 	bl	8013736 <otMessageGetOffset>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	4619      	mov	r1, r3
 8014e32:	2312      	movs	r3, #18
 8014e34:	4a16      	ldr	r2, [pc, #88]	; (8014e90 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014e36:	68b8      	ldr	r0, [r7, #8]
 8014e38:	f7fe fce2 	bl	8013800 <otMessageRead>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2b12      	cmp	r3, #18
 8014e40:	d102      	bne.n	8014e48 <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
	{
    	FrontLightsSet(&lightMessageComplex);
 8014e42:	4813      	ldr	r0, [pc, #76]	; (8014e90 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014e44:	f7ee fffa 	bl	8003e3c <FrontLightsSet>
	}

    tempMessageInfo = pMessageInfo;
 8014e48:	4a12      	ldr	r2, [pc, #72]	; (8014e94 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6013      	str	r3, [r2, #0]
    receivedMessage = (otMessageInfo *) pMessage;
 8014e4e:	4a12      	ldr	r2, [pc, #72]	; (8014e98 <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	6013      	str	r3, [r2, #0]

    if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f7fe f8a1 	bl	8012f9c <otCoapHeaderGetType>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b10      	cmp	r3, #16
 8014e5e:	d110      	bne.n	8014e82 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
    {
      break;
    }

    if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT)
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f7fe f8c9 	bl	8012ff8 <otCoapHeaderGetCode>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b03      	cmp	r3, #3
 8014e6a:	d10c      	bne.n	8014e86 <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8014e6c:	68b8      	ldr	r0, [r7, #8]
 8014e6e:	f7fe fc62 	bl	8013736 <otMessageGetOffset>
 8014e72:	4603      	mov	r3, r0
 8014e74:	4619      	mov	r1, r3
 8014e76:	2301      	movs	r3, #1
 8014e78:	4a08      	ldr	r2, [pc, #32]	; (8014e9c <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8014e7a:	68b8      	ldr	r0, [r7, #8]
 8014e7c:	f7fe fcc0 	bl	8013800 <otMessageRead>
    {
      //BSP_LED_Toggle(LED1);
    }

  } while (false);
}
 8014e80:	e002      	b.n	8014e88 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8014e82:	bf00      	nop
 8014e84:	e000      	b.n	8014e88 <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
      break;
 8014e86:	bf00      	nop
}
 8014e88:	bf00      	nop
 8014e8a:	3710      	adds	r7, #16
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	200286d0 	.word	0x200286d0
 8014e94:	200286a0 	.word	0x200286a0
 8014e98:	200286e4 	.word	0x200286e4
 8014e9c:	2002774d 	.word	0x2002774d

08014ea0 <APP_THREAD_SendCoapUnicastRequest>:
volatile otNetifMulticastAddress multicastAddresses;
volatile otIp6Address  meshLocalEID;
volatile otIp6Address linkLocalIPV6;

static void APP_THREAD_SendCoapUnicastRequest(char* message, uint8_t message_length, char* ipv6_addr  , char* resource)
{
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b087      	sub	sp, #28
 8014ea4:	af02      	add	r7, sp, #8
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	607a      	str	r2, [r7, #4]
 8014eaa:	603b      	str	r3, [r7, #0]
 8014eac:	460b      	mov	r3, r1
 8014eae:	72fb      	strb	r3, [r7, #11]
  // https://openthread.io/reference/struct/ot-message-info.html#structot_message_info



	do{
			  myRloc16 = otThreadGetRloc16(NULL);
 8014eb0:	2000      	movs	r0, #0
 8014eb2:	f7ff fa5f 	bl	8014374 <otThreadGetRloc16>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	461a      	mov	r2, r3
 8014eba:	4b49      	ldr	r3, [pc, #292]	; (8014fe0 <APP_THREAD_SendCoapUnicastRequest+0x140>)
 8014ebc:	801a      	strh	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	f7fe fb27 	bl	8013512 <otIp6IsEnabled>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	4b46      	ldr	r3, [pc, #280]	; (8014fe4 <APP_THREAD_SendCoapUnicastRequest+0x144>)
 8014eca:	701a      	strb	r2, [r3, #0]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
			  memcpy(&meshLocalEID, otThreadGetMeshLocalEid(NULL) ,sizeof(otIp6Address));
 8014ecc:	2000      	movs	r0, #0
 8014ece:	f7ff f9d1 	bl	8014274 <otThreadGetMeshLocalEid>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	4b44      	ldr	r3, [pc, #272]	; (8014fe8 <APP_THREAD_SendCoapUnicastRequest+0x148>)
 8014ed6:	6814      	ldr	r4, [r2, #0]
 8014ed8:	6850      	ldr	r0, [r2, #4]
 8014eda:	6891      	ldr	r1, [r2, #8]
 8014edc:	68d2      	ldr	r2, [r2, #12]
 8014ede:	601c      	str	r4, [r3, #0]
 8014ee0:	6058      	str	r0, [r3, #4]
 8014ee2:	6099      	str	r1, [r3, #8]
 8014ee4:	60da      	str	r2, [r3, #12]

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014ee6:	222c      	movs	r2, #44	; 0x2c
 8014ee8:	2100      	movs	r1, #0
 8014eea:	4840      	ldr	r0, [pc, #256]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014eec:	f001 f8ff 	bl	80160ee <memset>

			  // set border IP address
			   //error = otIp6AddressFromString("ff03::1", &OT_MessageInfo.mPeerAddr);
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 8014ef0:	493f      	ldr	r1, [pc, #252]	; (8014ff0 <APP_THREAD_SendCoapUnicastRequest+0x150>)
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7fe fb62 	bl	80135bc <otIp6AddressFromString>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	461a      	mov	r2, r3
 8014efc:	4b3d      	ldr	r3, [pc, #244]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014efe:	701a      	strb	r2, [r3, #0]


			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014f00:	2000      	movs	r0, #0
 8014f02:	f7ff f9b7 	bl	8014274 <otThreadGetMeshLocalEid>
 8014f06:	4602      	mov	r2, r0
 8014f08:	4b38      	ldr	r3, [pc, #224]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014f0a:	461c      	mov	r4, r3
 8014f0c:	4613      	mov	r3, r2
 8014f0e:	6818      	ldr	r0, [r3, #0]
 8014f10:	6859      	ldr	r1, [r3, #4]
 8014f12:	689a      	ldr	r2, [r3, #8]
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014f18:	4b34      	ldr	r3, [pc, #208]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014f20:	4b32      	ldr	r3, [pc, #200]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014f22:	f241 6233 	movw	r2, #5683	; 0x1633
 8014f26:	845a      	strh	r2, [r3, #34]	; 0x22

			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 8014f28:	2000      	movs	r0, #0
 8014f2a:	f7fe fb1f 	bl	801356c <otIp6GetUnicastAddresses>
 8014f2e:	4602      	mov	r2, r0
 8014f30:	4b31      	ldr	r3, [pc, #196]	; (8014ff8 <APP_THREAD_SendCoapUnicastRequest+0x158>)
 8014f32:	601a      	str	r2, [r3, #0]
			  OT_MessageInfo.mSockAddr = unicastAddresses->mAddress;
 8014f34:	4b30      	ldr	r3, [pc, #192]	; (8014ff8 <APP_THREAD_SendCoapUnicastRequest+0x158>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	4a2c      	ldr	r2, [pc, #176]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014f3a:	4614      	mov	r4, r2
 8014f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014f42:	2203      	movs	r2, #3
 8014f44:	2110      	movs	r1, #16
 8014f46:	482d      	ldr	r0, [pc, #180]	; (8014ffc <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014f48:	f7fd fecc 	bl	8012ce4 <otCoapHeaderInit>
			  //otCoapHeaderSetMessageId(&OT_Header,OT_BufferIdSend); //may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014f4c:	2102      	movs	r1, #2
 8014f4e:	482b      	ldr	r0, [pc, #172]	; (8014ffc <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014f50:	f7fd ff31 	bl	8012db6 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  //error = otCoapHeaderAppendUriPathOptions(&OT_Header,C_RESSOURCE_BASIC);
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014f54:	6839      	ldr	r1, [r7, #0]
 8014f56:	4829      	ldr	r0, [pc, #164]	; (8014ffc <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014f58:	f7fd ff90 	bl	8012e7c <otCoapHeaderAppendUriPathOptions>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	461a      	mov	r2, r3
 8014f60:	4b24      	ldr	r3, [pc, #144]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014f62:	701a      	strb	r2, [r3, #0]

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 8014f64:	4825      	ldr	r0, [pc, #148]	; (8014ffc <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014f66:	f7fd ffbb 	bl	8012ee0 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014f6a:	4924      	ldr	r1, [pc, #144]	; (8014ffc <APP_THREAD_SendCoapUnicastRequest+0x15c>)
 8014f6c:	2000      	movs	r0, #0
 8014f6e:	f7fe f8fa 	bl	8013166 <otCoapNewMessage>
 8014f72:	4602      	mov	r2, r0
 8014f74:	4b22      	ldr	r3, [pc, #136]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014f76:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 8014f78:	4b21      	ldr	r3, [pc, #132]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d100      	bne.n	8014f82 <APP_THREAD_SendCoapUnicastRequest+0xe2>
 8014f80:	e7fe      	b.n	8014f80 <APP_THREAD_SendCoapUnicastRequest+0xe0>
			  // Append bytes to a message (this is where the payload gets added)

			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
//			  error = otMessageAppend(pOT_Message, &OT_MessageInfo, sizeof(OT_MessageInfo));
			  error = otMessageAppend(pOT_Message, message, message_length);
 8014f82:	4b1f      	ldr	r3, [pc, #124]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	7afa      	ldrb	r2, [r7, #11]
 8014f88:	b292      	uxth	r2, r2
 8014f8a:	68f9      	ldr	r1, [r7, #12]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fe fc00 	bl	8013792 <otMessageAppend>
 8014f92:	4603      	mov	r3, r0
 8014f94:	461a      	mov	r2, r3
 8014f96:	4b17      	ldr	r3, [pc, #92]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014f98:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 8014f9a:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d000      	beq.n	8014fa4 <APP_THREAD_SendCoapUnicastRequest+0x104>
 8014fa2:	e7fe      	b.n	8014fa2 <APP_THREAD_SendCoapUnicastRequest+0x102>

			  error = otCoapSendRequest(NULL,
 8014fa4:	4b16      	ldr	r3, [pc, #88]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014fa6:	6819      	ldr	r1, [r3, #0]
 8014fa8:	2300      	movs	r3, #0
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	2300      	movs	r3, #0
 8014fae:	4a0f      	ldr	r2, [pc, #60]	; (8014fec <APP_THREAD_SendCoapUnicastRequest+0x14c>)
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	f7fe f906 	bl	80131c2 <otCoapSendRequest>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	461a      	mov	r2, r3
 8014fba:	4b0e      	ldr	r3, [pc, #56]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014fbc:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8014fbe:	4b0d      	ldr	r3, [pc, #52]	; (8014ff4 <APP_THREAD_SendCoapUnicastRequest+0x154>)
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d008      	beq.n	8014fd8 <APP_THREAD_SendCoapUnicastRequest+0x138>
 8014fc6:	4b0e      	ldr	r3, [pc, #56]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d004      	beq.n	8014fd8 <APP_THREAD_SendCoapUnicastRequest+0x138>
			  {
				otMessageFree(pOT_Message);
 8014fce:	4b0c      	ldr	r3, [pc, #48]	; (8015000 <APP_THREAD_SendCoapUnicastRequest+0x160>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fe fb84 	bl	80136e0 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 8014fd8:	bf00      	nop
 8014fda:	3714      	adds	r7, #20
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd90      	pop	{r4, r7, pc}
 8014fe0:	20028762 	.word	0x20028762
 8014fe4:	200286e2 	.word	0x200286e2
 8014fe8:	20028750 	.word	0x20028750
 8014fec:	2002768c 	.word	0x2002768c
 8014ff0:	2002769c 	.word	0x2002769c
 8014ff4:	2002774c 	.word	0x2002774c
 8014ff8:	20028764 	.word	0x20028764
 8014ffc:	200276b8 	.word	0x200276b8
 8015000:	20027748 	.word	0x20027748

08015004 <APP_THREAD_SendCoapUnicastMsg>:

static void APP_THREAD_SendCoapUnicastMsg(struct LogPacket *message, uint8_t msgSize, char* ipv6_addr  , char* resource, uint8_t msgID)
{
 8015004:	b590      	push	{r4, r7, lr}
 8015006:	b087      	sub	sp, #28
 8015008:	af02      	add	r7, sp, #8
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	607a      	str	r2, [r7, #4]
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	460b      	mov	r3, r1
 8015012:	72fb      	strb	r3, [r7, #11]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

			  // clear info
			  memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8015014:	222c      	movs	r2, #44	; 0x2c
 8015016:	2100      	movs	r1, #0
 8015018:	4838      	ldr	r0, [pc, #224]	; (80150fc <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 801501a:	f001 f868 	bl	80160ee <memset>

			  // set border IP address
			   error = otIp6AddressFromString(ipv6_addr , &OT_MessageInfo.mPeerAddr);
 801501e:	4938      	ldr	r1, [pc, #224]	; (8015100 <APP_THREAD_SendCoapUnicastMsg+0xfc>)
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7fe facb 	bl	80135bc <otIp6AddressFromString>
 8015026:	4603      	mov	r3, r0
 8015028:	461a      	mov	r2, r3
 801502a:	4b36      	ldr	r3, [pc, #216]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 801502c:	701a      	strb	r2, [r3, #0]

			   memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 801502e:	2000      	movs	r0, #0
 8015030:	f7ff f920 	bl	8014274 <otThreadGetMeshLocalEid>
 8015034:	4602      	mov	r2, r0
 8015036:	4b31      	ldr	r3, [pc, #196]	; (80150fc <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015038:	461c      	mov	r4, r3
 801503a:	4613      	mov	r3, r2
 801503c:	6818      	ldr	r0, [r3, #0]
 801503e:	6859      	ldr	r1, [r3, #4]
 8015040:	689a      	ldr	r2, [r3, #8]
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	c40f      	stmia	r4!, {r0, r1, r2, r3}

			   // error = otIp6AddressFromString("fd11:22::994e:6ed7:263d:6187", &OT_MessageInfo.mPeerAddr);
			  //error = otIp6AddressFromString("fdde:ad00:beef:0:0:ff:fe00:3800", &OT_MessageInfo.mPeerAddr);

			  OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8015046:	4b2d      	ldr	r3, [pc, #180]	; (80150fc <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015048:	2201      	movs	r2, #1
 801504a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			  OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 801504e:	4b2b      	ldr	r3, [pc, #172]	; (80150fc <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 8015050:	f241 6233 	movw	r2, #5683	; 0x1633
 8015054:	845a      	strh	r2, [r3, #34]	; 0x22
			  //OT_MessageInfo.mHopLimit = 20;

			  /************** CREATE NEW MESSAGE ********************ifco*/

			  // create header
			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8015056:	2203      	movs	r2, #3
 8015058:	2110      	movs	r1, #16
 801505a:	482b      	ldr	r0, [pc, #172]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 801505c:	f7fd fe42 	bl	8012ce4 <otCoapHeaderInit>
//			  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			  otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8015060:	2102      	movs	r1, #2
 8015062:	4829      	ldr	r0, [pc, #164]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8015064:	f7fd fea7 	bl	8012db6 <otCoapHeaderGenerateToken>

			  // the name of the resource
			  error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8015068:	6839      	ldr	r1, [r7, #0]
 801506a:	4827      	ldr	r0, [pc, #156]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 801506c:	f7fd ff06 	bl	8012e7c <otCoapHeaderAppendUriPathOptions>
 8015070:	4603      	mov	r3, r0
 8015072:	461a      	mov	r2, r3
 8015074:	4b23      	ldr	r3, [pc, #140]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 8015076:	701a      	strb	r2, [r3, #0]

			  // need this so the coap server doesnt try to parse as 'utf-8' and error out
			  otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8015078:	212a      	movs	r1, #42	; 0x2a
 801507a:	4823      	ldr	r0, [pc, #140]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 801507c:	f7fd fecb 	bl	8012e16 <otCoapHeaderAppendContentFormatOption>

			  // This function adds Payload Marker indicating beginning of the payload to the CoAP header
			  otCoapHeaderSetPayloadMarker(&OT_Header);
 8015080:	4821      	ldr	r0, [pc, #132]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8015082:	f7fd ff2d 	bl	8012ee0 <otCoapHeaderSetPayloadMarker>

			  // creates new message with headers but with empty payload
			  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8015086:	4920      	ldr	r1, [pc, #128]	; (8015108 <APP_THREAD_SendCoapUnicastMsg+0x104>)
 8015088:	2000      	movs	r0, #0
 801508a:	f7fe f86c 	bl	8013166 <otCoapNewMessage>
 801508e:	4602      	mov	r2, r0
 8015090:	4b1e      	ldr	r3, [pc, #120]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015092:	601a      	str	r2, [r3, #0]
			  if (pOT_Message == NULL) while(1);
 8015094:	4b1d      	ldr	r3, [pc, #116]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d100      	bne.n	801509e <APP_THREAD_SendCoapUnicastMsg+0x9a>
 801509c:	e7fe      	b.n	801509c <APP_THREAD_SendCoapUnicastMsg+0x98>
			  // Append bytes to a message (this is where the payload gets added)



			  //error = otMessageAppend(pOT_Message, OT_BufferSend, sizeof(OT_BufferSend));
			  error = otMessageAppend(pOT_Message, message, msgSize);
 801509e:	4b1b      	ldr	r3, [pc, #108]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	7afa      	ldrb	r2, [r7, #11]
 80150a4:	b292      	uxth	r2, r2
 80150a6:	68f9      	ldr	r1, [r7, #12]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7fe fb72 	bl	8013792 <otMessageAppend>
 80150ae:	4603      	mov	r3, r0
 80150b0:	461a      	mov	r2, r3
 80150b2:	4b14      	ldr	r3, [pc, #80]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80150b4:	701a      	strb	r2, [r3, #0]

			  if (error != OT_ERROR_NONE) while(1);
 80150b6:	4b13      	ldr	r3, [pc, #76]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d000      	beq.n	80150c0 <APP_THREAD_SendCoapUnicastMsg+0xbc>
 80150be:	e7fe      	b.n	80150be <APP_THREAD_SendCoapUnicastMsg+0xba>

			  error = otCoapSendRequest(NULL,
 80150c0:	4b12      	ldr	r3, [pc, #72]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80150c2:	6819      	ldr	r1, [r3, #0]
 80150c4:	2300      	movs	r3, #0
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	2300      	movs	r3, #0
 80150ca:	4a0c      	ldr	r2, [pc, #48]	; (80150fc <APP_THREAD_SendCoapUnicastMsg+0xf8>)
 80150cc:	2000      	movs	r0, #0
 80150ce:	f7fe f878 	bl	80131c2 <otCoapSendRequest>
 80150d2:	4603      	mov	r3, r0
 80150d4:	461a      	mov	r2, r3
 80150d6:	4b0b      	ldr	r3, [pc, #44]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80150d8:	701a      	strb	r2, [r3, #0]
						&OT_MessageInfo,
						NULL,
						(void*) NULL);

			  // if error: free allocated message buffer if one was allocated
			  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80150da:	4b0a      	ldr	r3, [pc, #40]	; (8015104 <APP_THREAD_SendCoapUnicastMsg+0x100>)
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d008      	beq.n	80150f4 <APP_THREAD_SendCoapUnicastMsg+0xf0>
 80150e2:	4b0a      	ldr	r3, [pc, #40]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d004      	beq.n	80150f4 <APP_THREAD_SendCoapUnicastMsg+0xf0>
			  {
				otMessageFree(pOT_Message);
 80150ea:	4b08      	ldr	r3, [pc, #32]	; (801510c <APP_THREAD_SendCoapUnicastMsg+0x108>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7fe faf6 	bl	80136e0 <otMessageFree>
			  }

			  //HAL_Delay(10000);
			}while(false);

}
 80150f4:	bf00      	nop
 80150f6:	3714      	adds	r7, #20
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd90      	pop	{r4, r7, pc}
 80150fc:	2002768c 	.word	0x2002768c
 8015100:	2002769c 	.word	0x2002769c
 8015104:	2002774c 	.word	0x2002774c
 8015108:	200276b8 	.word	0x200276b8
 801510c:	20027748 	.word	0x20027748

08015110 <APP_THREAD_SendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_SendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b085      	sub	sp, #20
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 801511a:	2300      	movs	r3, #0
 801511c:	73fb      	strb	r3, [r7, #15]

  APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
 801511e:	4a1f      	ldr	r2, [pc, #124]	; (801519c <APP_THREAD_SendDataResponse+0x8c>)
 8015120:	2101      	movs	r1, #1
 8015122:	2000      	movs	r0, #0
 8015124:	f7ef fee0 	bl	8004ee8 <logApplication>
  otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8015128:	2244      	movs	r2, #68	; 0x44
 801512a:	2120      	movs	r1, #32
 801512c:	481c      	ldr	r0, [pc, #112]	; (80151a0 <APP_THREAD_SendDataResponse+0x90>)
 801512e:	f7fd fdd9 	bl	8012ce4 <otCoapHeaderInit>
  otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7fd ff8e 	bl	8013054 <otCoapHeaderGetMessageId>
 8015138:	4603      	mov	r3, r0
 801513a:	4619      	mov	r1, r3
 801513c:	4818      	ldr	r0, [pc, #96]	; (80151a0 <APP_THREAD_SendDataResponse+0x90>)
 801513e:	f7fd fefd 	bl	8012f3c <otCoapHeaderSetMessageId>
  otCoapHeaderSetToken(&OT_Header,
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f7fd ffe2 	bl	801310c <otCoapHeaderGetToken>
 8015148:	4604      	mov	r4, r0
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f7fd ffb0 	bl	80130b0 <otCoapHeaderGetTokenLength>
 8015150:	4603      	mov	r3, r0
 8015152:	461a      	mov	r2, r3
 8015154:	4621      	mov	r1, r4
 8015156:	4812      	ldr	r0, [pc, #72]	; (80151a0 <APP_THREAD_SendDataResponse+0x90>)
 8015158:	f7fd fdf9 	bl	8012d4e <otCoapHeaderSetToken>
      otCoapHeaderGetToken(pRequestHeader),
      otCoapHeaderGetTokenLength(pRequestHeader));

  pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 801515c:	4910      	ldr	r1, [pc, #64]	; (80151a0 <APP_THREAD_SendDataResponse+0x90>)
 801515e:	2000      	movs	r0, #0
 8015160:	f7fe f801 	bl	8013166 <otCoapNewMessage>
 8015164:	4602      	mov	r2, r0
 8015166:	4b0f      	ldr	r3, [pc, #60]	; (80151a4 <APP_THREAD_SendDataResponse+0x94>)
 8015168:	601a      	str	r2, [r3, #0]
  if (pOT_Message == NULL)
  {
    //APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
  }
  error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 801516a:	4b0e      	ldr	r3, [pc, #56]	; (80151a4 <APP_THREAD_SendDataResponse+0x94>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	683a      	ldr	r2, [r7, #0]
 8015170:	4619      	mov	r1, r3
 8015172:	2000      	movs	r0, #0
 8015174:	f7fe f8be 	bl	80132f4 <otCoapSendResponse>
 8015178:	4603      	mov	r3, r0
 801517a:	73fb      	strb	r3, [r7, #15]
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d008      	beq.n	8015194 <APP_THREAD_SendDataResponse+0x84>
 8015182:	4b08      	ldr	r3, [pc, #32]	; (80151a4 <APP_THREAD_SendDataResponse+0x94>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d004      	beq.n	8015194 <APP_THREAD_SendDataResponse+0x84>
  {
    otMessageFree(pOT_Message);
 801518a:	4b06      	ldr	r3, [pc, #24]	; (80151a4 <APP_THREAD_SendDataResponse+0x94>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	4618      	mov	r0, r3
 8015190:	f7fe faa6 	bl	80136e0 <otMessageFree>
    //APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
  }
}
 8015194:	bf00      	nop
 8015196:	3714      	adds	r7, #20
 8015198:	46bd      	mov	sp, r7
 801519a:	bd90      	pop	{r4, r7, pc}
 801519c:	08017698 	.word	0x08017698
 80151a0:	200276b8 	.word	0x200276b8
 80151a4:	20027748 	.word	0x20027748

080151a8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80151b0:	4a04      	ldr	r2, [pc, #16]	; (80151c4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6013      	str	r3, [r2, #0]
}
 80151b6:	bf00      	nop
 80151b8:	370c      	adds	r7, #12
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop
 80151c4:	20027674 	.word	0x20027674

080151c8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80151c8:	b480      	push	{r7}
 80151ca:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80151cc:	4b03      	ldr	r3, [pc, #12]	; (80151dc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	330c      	adds	r3, #12
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr
 80151dc:	20027674 	.word	0x20027674

080151e0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80151e0:	b480      	push	{r7}
 80151e2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80151e4:	4b03      	ldr	r3, [pc, #12]	; (80151f4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	330b      	adds	r3, #11
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr
 80151f4:	20027674 	.word	0x20027674

080151f8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80151f8:	b480      	push	{r7}
 80151fa:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80151fc:	4b03      	ldr	r3, [pc, #12]	; (801520c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	330b      	adds	r3, #11
}
 8015202:	4618      	mov	r0, r3
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr
 801520c:	20027678 	.word	0x20027678

08015210 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8015216:	4b0f      	ldr	r3, [pc, #60]	; (8015254 <Ot_Cmd_Transfer+0x44>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2200      	movs	r2, #0
 801521c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015220:	725a      	strb	r2, [r3, #9]
 8015222:	2200      	movs	r2, #0
 8015224:	f042 0202 	orr.w	r2, r2, #2
 8015228:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801522a:	4b0a      	ldr	r3, [pc, #40]	; (8015254 <Ot_Cmd_Transfer+0x44>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	330c      	adds	r3, #12
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	3302      	adds	r3, #2
 8015234:	009b      	lsls	r3, r3, #2
 8015236:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8015238:	4b06      	ldr	r3, [pc, #24]	; (8015254 <Ot_Cmd_Transfer+0x44>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	b2d2      	uxtb	r2, r2
 8015240:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8015242:	f7ff f9a9 	bl	8014598 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8015246:	f000 f829 	bl	801529c <Wait_Getting_Ack_From_M0>
}
 801524a:	bf00      	nop
 801524c:	3708      	adds	r7, #8
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	20027674 	.word	0x20027674

08015258 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8015260:	f000 f82e 	bl	80152c0 <Receive_Ack_From_M0>
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8015274:	4a04      	ldr	r2, [pc, #16]	; (8015288 <TL_THREAD_NotReceived+0x1c>)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 801527a:	f000 f82d 	bl	80152d8 <Receive_Notification_From_M0>
}
 801527e:	bf00      	nop
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	20027678 	.word	0x20027678

0801528c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 801528c:	b480      	push	{r7}
 801528e:	af00      	add	r7, sp, #0

}
 8015290:	bf00      	nop
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr
	...

0801529c <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 801529c:	b480      	push	{r7}
 801529e:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80152a0:	bf00      	nop
 80152a2:	4b06      	ldr	r3, [pc, #24]	; (80152bc <Wait_Getting_Ack_From_M0+0x20>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d0fb      	beq.n	80152a2 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80152aa:	4b04      	ldr	r3, [pc, #16]	; (80152bc <Wait_Getting_Ack_From_M0+0x20>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	601a      	str	r2, [r3, #0]
}
 80152b0:	bf00      	nop
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	20027680 	.word	0x20027680

080152c0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80152c0:	b480      	push	{r7}
 80152c2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80152c4:	4b03      	ldr	r3, [pc, #12]	; (80152d4 <Receive_Ack_From_M0+0x14>)
 80152c6:	2201      	movs	r2, #1
 80152c8:	601a      	str	r2, [r3, #0]
}
 80152ca:	bf00      	nop
 80152cc:	46bd      	mov	sp, r7
 80152ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d2:	4770      	bx	lr
 80152d4:	20027680 	.word	0x20027680

080152d8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80152dc:	4b06      	ldr	r3, [pc, #24]	; (80152f8 <Receive_Notification_From_M0+0x20>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	3301      	adds	r3, #1
 80152e2:	4a05      	ldr	r2, [pc, #20]	; (80152f8 <Receive_Notification_From_M0+0x20>)
 80152e4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80152e6:	4b05      	ldr	r3, [pc, #20]	; (80152fc <Receive_Notification_From_M0+0x24>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2101      	movs	r1, #1
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f9 fb95 	bl	800ea1c <osThreadFlagsSet>
}
 80152f2:	bf00      	nop
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	2002767c 	.word	0x2002767c
 80152fc:	20027684 	.word	0x20027684

08015300 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8015304:	4b12      	ldr	r3, [pc, #72]	; (8015350 <RxCpltCallback+0x50>)
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	b29b      	uxth	r3, r3
 801530a:	2bff      	cmp	r3, #255	; 0xff
 801530c:	d818      	bhi.n	8015340 <RxCpltCallback+0x40>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 801530e:	4b10      	ldr	r3, [pc, #64]	; (8015350 <RxCpltCallback+0x50>)
 8015310:	881b      	ldrh	r3, [r3, #0]
 8015312:	b29b      	uxth	r3, r3
 8015314:	1c5a      	adds	r2, r3, #1
 8015316:	b291      	uxth	r1, r2
 8015318:	4a0d      	ldr	r2, [pc, #52]	; (8015350 <RxCpltCallback+0x50>)
 801531a:	8011      	strh	r1, [r2, #0]
 801531c:	461a      	mov	r2, r3
 801531e:	4b0d      	ldr	r3, [pc, #52]	; (8015354 <RxCpltCallback+0x54>)
 8015320:	7819      	ldrb	r1, [r3, #0]
 8015322:	4b0d      	ldr	r3, [pc, #52]	; (8015358 <RxCpltCallback+0x58>)
 8015324:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8015326:	4b0b      	ldr	r3, [pc, #44]	; (8015354 <RxCpltCallback+0x54>)
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	2b0d      	cmp	r3, #13
 801532c:	d108      	bne.n	8015340 <RxCpltCallback+0x40>
    {
      CptReceiveCmdFromUser = 1U;
 801532e:	4b0b      	ldr	r3, [pc, #44]	; (801535c <RxCpltCallback+0x5c>)
 8015330:	2201      	movs	r2, #1
 8015332:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      osThreadFlagsSet(OsTaskCliId,1);
 8015334:	4b0a      	ldr	r3, [pc, #40]	; (8015360 <RxCpltCallback+0x60>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2101      	movs	r1, #1
 801533a:	4618      	mov	r0, r3
 801533c:	f7f9 fb6e 	bl	800ea1c <osThreadFlagsSet>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <RxCpltCallback+0x64>)
 8015342:	2201      	movs	r2, #1
 8015344:	4903      	ldr	r1, [pc, #12]	; (8015354 <RxCpltCallback+0x54>)
 8015346:	2000      	movs	r0, #0
 8015348:	f7ee f9ba 	bl	80036c0 <HW_UART_Receive_IT>
}
 801534c:	bf00      	nop
 801534e:	bd80      	pop	{r7, pc}
 8015350:	20027670 	.word	0x20027670
 8015354:	20027470 	.word	0x20027470
 8015358:	20027570 	.word	0x20027570
 801535c:	20027672 	.word	0x20027672
 8015360:	20027688 	.word	0x20027688
 8015364:	08015301 	.word	0x08015301

08015368 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801536c:	22ff      	movs	r2, #255	; 0xff
 801536e:	2100      	movs	r1, #0
 8015370:	4812      	ldr	r0, [pc, #72]	; (80153bc <Send_CLI_To_M0+0x54>)
 8015372:	f000 febc 	bl	80160ee <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8015376:	4b12      	ldr	r3, [pc, #72]	; (80153c0 <Send_CLI_To_M0+0x58>)
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	b29b      	uxth	r3, r3
 801537c:	461a      	mov	r2, r3
 801537e:	4911      	ldr	r1, [pc, #68]	; (80153c4 <Send_CLI_To_M0+0x5c>)
 8015380:	480e      	ldr	r0, [pc, #56]	; (80153bc <Send_CLI_To_M0+0x54>)
 8015382:	f000 fea9 	bl	80160d8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8015386:	4b0e      	ldr	r3, [pc, #56]	; (80153c0 <Send_CLI_To_M0+0x58>)
 8015388:	881b      	ldrh	r3, [r3, #0]
 801538a:	b29b      	uxth	r3, r3
 801538c:	b2da      	uxtb	r2, r3
 801538e:	4b0e      	ldr	r3, [pc, #56]	; (80153c8 <Send_CLI_To_M0+0x60>)
 8015390:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8015392:	4b0d      	ldr	r3, [pc, #52]	; (80153c8 <Send_CLI_To_M0+0x60>)
 8015394:	2200      	movs	r2, #0
 8015396:	725a      	strb	r2, [r3, #9]
 8015398:	2200      	movs	r2, #0
 801539a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801539c:	4b0b      	ldr	r3, [pc, #44]	; (80153cc <Send_CLI_To_M0+0x64>)
 801539e:	2200      	movs	r2, #0
 80153a0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80153a2:	4b07      	ldr	r3, [pc, #28]	; (80153c0 <Send_CLI_To_M0+0x58>)
 80153a4:	2200      	movs	r2, #0
 80153a6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80153a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153ac:	2100      	movs	r1, #0
 80153ae:	4805      	ldr	r0, [pc, #20]	; (80153c4 <Send_CLI_To_M0+0x5c>)
 80153b0:	f000 fe9d 	bl	80160ee <memset>

  TL_CLI_SendCmd();
 80153b4:	f7ff f8fe 	bl	80145b4 <TL_CLI_SendCmd>
}
 80153b8:	bf00      	nop
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	20030a5c 	.word	0x20030a5c
 80153c0:	20027670 	.word	0x20027670
 80153c4:	20027570 	.word	0x20027570
 80153c8:	20030a50 	.word	0x20030a50
 80153cc:	20027672 	.word	0x20027672

080153d0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80153d4:	f7ff f90a 	bl	80145ec <TL_THREAD_CliSendAck>
}
 80153d8:	bf00      	nop
 80153da:	bd80      	pop	{r7, pc}

080153dc <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80153e0:	4a08      	ldr	r2, [pc, #32]	; (8015404 <APP_THREAD_Init_UART_CLI+0x28>)
 80153e2:	2100      	movs	r1, #0
 80153e4:	4808      	ldr	r0, [pc, #32]	; (8015408 <APP_THREAD_Init_UART_CLI+0x2c>)
 80153e6:	f7f9 fa6d 	bl	800e8c4 <osThreadNew>
 80153ea:	4602      	mov	r2, r0
 80153ec:	4b07      	ldr	r3, [pc, #28]	; (801540c <APP_THREAD_Init_UART_CLI+0x30>)
 80153ee:	601a      	str	r2, [r3, #0]
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_USART1_UART_Init();
 80153f0:	f7ef ffea 	bl	80053c8 <MX_USART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 80153f4:	4b06      	ldr	r3, [pc, #24]	; (8015410 <APP_THREAD_Init_UART_CLI+0x34>)
 80153f6:	2201      	movs	r2, #1
 80153f8:	4906      	ldr	r1, [pc, #24]	; (8015414 <APP_THREAD_Init_UART_CLI+0x38>)
 80153fa:	2000      	movs	r0, #0
 80153fc:	f7ee f960 	bl	80036c0 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8015400:	bf00      	nop
 8015402:	bd80      	pop	{r7, pc}
 8015404:	08017a74 	.word	0x08017a74
 8015408:	08014baf 	.word	0x08014baf
 801540c:	20027688 	.word	0x20027688
 8015410:	08015301 	.word	0x08015301
 8015414:	20027470 	.word	0x20027470

08015418 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 801541c:	4b06      	ldr	r3, [pc, #24]	; (8015438 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801541e:	4a07      	ldr	r2, [pc, #28]	; (801543c <APP_THREAD_TL_THREAD_INIT+0x24>)
 8015420:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8015422:	4b05      	ldr	r3, [pc, #20]	; (8015438 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015424:	4a06      	ldr	r2, [pc, #24]	; (8015440 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8015426:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8015428:	4b03      	ldr	r3, [pc, #12]	; (8015438 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801542a:	4a06      	ldr	r2, [pc, #24]	; (8015444 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 801542c:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 801542e:	4802      	ldr	r0, [pc, #8]	; (8015438 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015430:	f7ff f896 	bl	8014560 <TL_THREAD_Init>
}
 8015434:	bf00      	nop
 8015436:	bd80      	pop	{r7, pc}
 8015438:	200300b8 	.word	0x200300b8
 801543c:	20030838 	.word	0x20030838
 8015440:	20030944 	.word	0x20030944
 8015444:	20030a50 	.word	0x20030a50

08015448 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	7adb      	ldrb	r3, [r3, #11]
 8015458:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	330c      	adds	r3, #12
 801545e:	490b      	ldr	r1, [pc, #44]	; (801548c <TL_THREAD_CliNotReceived+0x44>)
 8015460:	4618      	mov	r0, r3
 8015462:	f7ea fe8d 	bl	8000180 <strcmp>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d009      	beq.n	8015480 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f103 010c 	add.w	r1, r3, #12
 8015472:	7afb      	ldrb	r3, [r7, #11]
 8015474:	b29a      	uxth	r2, r3
 8015476:	4b06      	ldr	r3, [pc, #24]	; (8015490 <TL_THREAD_CliNotReceived+0x48>)
 8015478:	2000      	movs	r0, #0
 801547a:	f7ee f945 	bl	8003708 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 801547e:	e001      	b.n	8015484 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8015480:	f7ff ffa6 	bl	80153d0 <Send_CLI_Ack_For_OT>
}
 8015484:	bf00      	nop
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	080176c4 	.word	0x080176c4
 8015490:	08015495 	.word	0x08015495

08015494 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8015498:	f7ff ff9a 	bl	80153d0 <Send_CLI_Ack_For_OT>
}
 801549c:	bf00      	nop
 801549e:	bd80      	pop	{r7, pc}

080154a0 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80154a4:	4b09      	ldr	r3, [pc, #36]	; (80154cc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d00d      	beq.n	80154c8 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80154ac:	4b07      	ldr	r3, [pc, #28]	; (80154cc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d904      	bls.n	80154be <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80154b4:	2100      	movs	r1, #0
 80154b6:	2000      	movs	r0, #0
 80154b8:	f7ff f990 	bl	80147dc <APP_THREAD_Error>
 80154bc:	e001      	b.n	80154c2 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 80154be:	f7fe f9db 	bl	8013878 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 80154c2:	4b02      	ldr	r3, [pc, #8]	; (80154cc <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80154c4:	2200      	movs	r2, #0
 80154c6:	601a      	str	r2, [r3, #0]
  }
}
 80154c8:	bf00      	nop
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	2002767c 	.word	0x2002767c

080154d0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80154d8:	4b06      	ldr	r3, [pc, #24]	; (80154f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80154da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80154de:	4905      	ldr	r1, [pc, #20]	; (80154f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	4313      	orrs	r3, r2
 80154e4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80154e8:	bf00      	nop
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr
 80154f4:	58000800 	.word	0x58000800

080154f8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015500:	4b05      	ldr	r3, [pc, #20]	; (8015518 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015502:	6a1a      	ldr	r2, [r3, #32]
 8015504:	4904      	ldr	r1, [pc, #16]	; (8015518 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	4313      	orrs	r3, r2
 801550a:	620b      	str	r3, [r1, #32]
}
 801550c:	bf00      	nop
 801550e:	370c      	adds	r7, #12
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr
 8015518:	58000800 	.word	0x58000800

0801551c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 801551c:	b480      	push	{r7}
 801551e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015520:	4b05      	ldr	r3, [pc, #20]	; (8015538 <LL_PWR_EnableBootC2+0x1c>)
 8015522:	68db      	ldr	r3, [r3, #12]
 8015524:	4a04      	ldr	r2, [pc, #16]	; (8015538 <LL_PWR_EnableBootC2+0x1c>)
 8015526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801552a:	60d3      	str	r3, [r2, #12]
}
 801552c:	bf00      	nop
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	58000400 	.word	0x58000400

0801553c <LL_AHB3_GRP1_EnableClock>:
{
 801553c:	b480      	push	{r7}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801554a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	4313      	orrs	r3, r2
 8015552:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4013      	ands	r3, r2
 801555e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015560:	68fb      	ldr	r3, [r7, #12]
}
 8015562:	bf00      	nop
 8015564:	3714      	adds	r7, #20
 8015566:	46bd      	mov	sp, r7
 8015568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556c:	4770      	bx	lr

0801556e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801556e:	b480      	push	{r7}
 8015570:	b083      	sub	sp, #12
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	601a      	str	r2, [r3, #0]
}
 8015582:	bf00      	nop
 8015584:	370c      	adds	r7, #12
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr

0801558e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801558e:	b480      	push	{r7}
 8015590:	b083      	sub	sp, #12
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	f043 0201 	orr.w	r2, r3, #1
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	601a      	str	r2, [r3, #0]
}
 80155a2:	bf00      	nop
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr

080155ae <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	685a      	ldr	r2, [r3, #4]
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	041b      	lsls	r3, r3, #16
 80155c0:	43db      	mvns	r3, r3
 80155c2:	401a      	ands	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	605a      	str	r2, [r3, #4]
}
 80155c8:	bf00      	nop
 80155ca:	370c      	adds	r7, #12
 80155cc:	46bd      	mov	sp, r7
 80155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d2:	4770      	bx	lr

080155d4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	685a      	ldr	r2, [r3, #4]
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	041b      	lsls	r3, r3, #16
 80155e6:	431a      	orrs	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	605a      	str	r2, [r3, #4]
}
 80155ec:	bf00      	nop
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	685a      	ldr	r2, [r3, #4]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	43db      	mvns	r3, r3
 801560a:	401a      	ands	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	605a      	str	r2, [r3, #4]
}
 8015610:	bf00      	nop
 8015612:	370c      	adds	r7, #12
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	431a      	orrs	r2, r3
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	605a      	str	r2, [r3, #4]
}
 8015632:	bf00      	nop
 8015634:	370c      	adds	r7, #12
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801563e:	b480      	push	{r7}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	683a      	ldr	r2, [r7, #0]
 801564c:	609a      	str	r2, [r3, #8]
}
 801564e:	bf00      	nop
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr

0801565a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801565a:	b480      	push	{r7}
 801565c:	b083      	sub	sp, #12
 801565e:	af00      	add	r7, sp, #0
 8015660:	6078      	str	r0, [r7, #4]
 8015662:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	041a      	lsls	r2, r3, #16
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	609a      	str	r2, [r3, #8]
}
 801566c:	bf00      	nop
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr

08015678 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015678:	b480      	push	{r7}
 801567a:	b083      	sub	sp, #12
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	68da      	ldr	r2, [r3, #12]
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	4013      	ands	r3, r2
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	429a      	cmp	r2, r3
 801568e:	d101      	bne.n	8015694 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015690:	2301      	movs	r3, #1
 8015692:	e000      	b.n	8015696 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015694:	2300      	movs	r3, #0
}
 8015696:	4618      	mov	r0, r3
 8015698:	370c      	adds	r7, #12
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr

080156a2 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80156a2:	b480      	push	{r7}
 80156a4:	b083      	sub	sp, #12
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	6078      	str	r0, [r7, #4]
 80156aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	69da      	ldr	r2, [r3, #28]
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	4013      	ands	r3, r2
 80156b4:	683a      	ldr	r2, [r7, #0]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d101      	bne.n	80156be <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80156ba:	2301      	movs	r3, #1
 80156bc:	e000      	b.n	80156c0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80156be:	2300      	movs	r3, #0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80156d0:	2102      	movs	r1, #2
 80156d2:	482a      	ldr	r0, [pc, #168]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 80156d4:	f7ff ffe5 	bl	80156a2 <LL_C2_IPCC_IsActiveFlag_CHx>
 80156d8:	4603      	mov	r3, r0
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d009      	beq.n	80156f2 <HW_IPCC_Rx_Handler+0x26>
 80156de:	4b27      	ldr	r3, [pc, #156]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	43db      	mvns	r3, r3
 80156e4:	f003 0302 	and.w	r3, r3, #2
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d002      	beq.n	80156f2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80156ec:	f000 f906 	bl	80158fc <HW_IPCC_SYS_EvtHandler>
 80156f0:	e041      	b.n	8015776 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80156f2:	2104      	movs	r1, #4
 80156f4:	4821      	ldr	r0, [pc, #132]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 80156f6:	f7ff ffd4 	bl	80156a2 <LL_C2_IPCC_IsActiveFlag_CHx>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d009      	beq.n	8015714 <HW_IPCC_Rx_Handler+0x48>
 8015700:	4b1e      	ldr	r3, [pc, #120]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	43db      	mvns	r3, r3
 8015706:	f003 0304 	and.w	r3, r3, #4
 801570a:	2b00      	cmp	r3, #0
 801570c:	d002      	beq.n	8015714 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 801570e:	f000 f94f 	bl	80159b0 <HW_IPCC_THREAD_NotEvtHandler>
 8015712:	e030      	b.n	8015776 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015714:	2110      	movs	r1, #16
 8015716:	4819      	ldr	r0, [pc, #100]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 8015718:	f7ff ffc3 	bl	80156a2 <LL_C2_IPCC_IsActiveFlag_CHx>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	d009      	beq.n	8015736 <HW_IPCC_Rx_Handler+0x6a>
 8015722:	4b16      	ldr	r3, [pc, #88]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	43db      	mvns	r3, r3
 8015728:	f003 0310 	and.w	r3, r3, #16
 801572c:	2b00      	cmp	r3, #0
 801572e:	d002      	beq.n	8015736 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8015730:	f000 f94a 	bl	80159c8 <HW_IPCC_THREAD_CliNotEvtHandler>
 8015734:	e01f      	b.n	8015776 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015736:	2101      	movs	r1, #1
 8015738:	4810      	ldr	r0, [pc, #64]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 801573a:	f7ff ffb2 	bl	80156a2 <LL_C2_IPCC_IsActiveFlag_CHx>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d008      	beq.n	8015756 <HW_IPCC_Rx_Handler+0x8a>
 8015744:	4b0d      	ldr	r3, [pc, #52]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	f003 0301 	and.w	r3, r3, #1
 801574c:	2b00      	cmp	r3, #0
 801574e:	d102      	bne.n	8015756 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8015750:	f000 f898 	bl	8015884 <HW_IPCC_BLE_EvtHandler>
 8015754:	e00f      	b.n	8015776 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015756:	2108      	movs	r1, #8
 8015758:	4808      	ldr	r0, [pc, #32]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 801575a:	f7ff ffa2 	bl	80156a2 <LL_C2_IPCC_IsActiveFlag_CHx>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d009      	beq.n	8015778 <HW_IPCC_Rx_Handler+0xac>
 8015764:	4b05      	ldr	r3, [pc, #20]	; (801577c <HW_IPCC_Rx_Handler+0xb0>)
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	43db      	mvns	r3, r3
 801576a:	f003 0308 	and.w	r3, r3, #8
 801576e:	2b00      	cmp	r3, #0
 8015770:	d002      	beq.n	8015778 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015772:	f000 f975 	bl	8015a60 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015776:	bf00      	nop
 8015778:	bf00      	nop
}
 801577a:	bd80      	pop	{r7, pc}
 801577c:	58000c00 	.word	0x58000c00

08015780 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015780:	b580      	push	{r7, lr}
 8015782:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015784:	2102      	movs	r1, #2
 8015786:	482b      	ldr	r0, [pc, #172]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 8015788:	f7ff ff76 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d109      	bne.n	80157a6 <HW_IPCC_Tx_Handler+0x26>
 8015792:	4b28      	ldr	r3, [pc, #160]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	43db      	mvns	r3, r3
 8015798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801579c:	2b00      	cmp	r3, #0
 801579e:	d002      	beq.n	80157a6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80157a0:	f000 f8a0 	bl	80158e4 <HW_IPCC_SYS_CmdEvtHandler>
 80157a4:	e042      	b.n	801582c <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80157a6:	2104      	movs	r1, #4
 80157a8:	4822      	ldr	r0, [pc, #136]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157aa:	f7ff ff65 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 80157ae:	4603      	mov	r3, r0
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d109      	bne.n	80157c8 <HW_IPCC_Tx_Handler+0x48>
 80157b4:	4b1f      	ldr	r3, [pc, #124]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	43db      	mvns	r3, r3
 80157ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d002      	beq.n	80157c8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 80157c2:	f000 f8e9 	bl	8015998 <HW_IPCC_OT_CmdEvtHandler>
 80157c6:	e031      	b.n	801582c <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80157c8:	2102      	movs	r1, #2
 80157ca:	481a      	ldr	r0, [pc, #104]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157cc:	f7ff ff54 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 80157d0:	4603      	mov	r3, r0
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d109      	bne.n	80157ea <HW_IPCC_Tx_Handler+0x6a>
 80157d6:	4b17      	ldr	r3, [pc, #92]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	43db      	mvns	r3, r3
 80157dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d002      	beq.n	80157ea <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80157e4:	f000 f87e 	bl	80158e4 <HW_IPCC_SYS_CmdEvtHandler>
 80157e8:	e020      	b.n	801582c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80157ea:	2108      	movs	r1, #8
 80157ec:	4811      	ldr	r0, [pc, #68]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157ee:	f7ff ff43 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d109      	bne.n	801580c <HW_IPCC_Tx_Handler+0x8c>
 80157f8:	4b0e      	ldr	r3, [pc, #56]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	43db      	mvns	r3, r3
 80157fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015802:	2b00      	cmp	r3, #0
 8015804:	d002      	beq.n	801580c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015806:	f000 f90d 	bl	8015a24 <HW_IPCC_MM_FreeBufHandler>
 801580a:	e00f      	b.n	801582c <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801580c:	2120      	movs	r1, #32
 801580e:	4809      	ldr	r0, [pc, #36]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 8015810:	f7ff ff32 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015814:	4603      	mov	r3, r0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d109      	bne.n	801582e <HW_IPCC_Tx_Handler+0xae>
 801581a:	4b06      	ldr	r3, [pc, #24]	; (8015834 <HW_IPCC_Tx_Handler+0xb4>)
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	43db      	mvns	r3, r3
 8015820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015824:	2b00      	cmp	r3, #0
 8015826:	d002      	beq.n	801582e <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015828:	f000 f838 	bl	801589c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801582c:	bf00      	nop
 801582e:	bf00      	nop
}
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	58000c00 	.word	0x58000c00

08015838 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015838:	b580      	push	{r7, lr}
 801583a:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801583c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015840:	f7ff fe46 	bl	80154d0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015844:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015848:	f7ff fe56 	bl	80154f8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801584c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801584e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015850:	f7ff fe64 	bl	801551c <LL_PWR_EnableBootC2>

  return;
 8015854:	bf00      	nop
}
 8015856:	bd80      	pop	{r7, pc}

08015858 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801585c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015860:	f7ff fe6c 	bl	801553c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015864:	4806      	ldr	r0, [pc, #24]	; (8015880 <HW_IPCC_Init+0x28>)
 8015866:	f7ff fe92 	bl	801558e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801586a:	4805      	ldr	r0, [pc, #20]	; (8015880 <HW_IPCC_Init+0x28>)
 801586c:	f7ff fe7f 	bl	801556e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8015870:	202c      	movs	r0, #44	; 0x2c
 8015872:	f7f1 fbd4 	bl	800701e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8015876:	202d      	movs	r0, #45	; 0x2d
 8015878:	f7f1 fbd1 	bl	800701e <HAL_NVIC_EnableIRQ>

  return;
 801587c:	bf00      	nop
}
 801587e:	bd80      	pop	{r7, pc}
 8015880:	58000c00 	.word	0x58000c00

08015884 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015884:	b580      	push	{r7, lr}
 8015886:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015888:	f7fe fdda 	bl	8014440 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801588c:	2101      	movs	r1, #1
 801588e:	4802      	ldr	r0, [pc, #8]	; (8015898 <HW_IPCC_BLE_EvtHandler+0x14>)
 8015890:	f7ff fed5 	bl	801563e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015894:	bf00      	nop
}
 8015896:	bd80      	pop	{r7, pc}
 8015898:	58000c00 	.word	0x58000c00

0801589c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801589c:	b580      	push	{r7, lr}
 801589e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80158a0:	2120      	movs	r1, #32
 80158a2:	4803      	ldr	r0, [pc, #12]	; (80158b0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80158a4:	f7ff fe96 	bl	80155d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80158a8:	f7fe fde6 	bl	8014478 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80158ac:	bf00      	nop
}
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	58000c00 	.word	0x58000c00

080158b4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80158b8:	2102      	movs	r1, #2
 80158ba:	4802      	ldr	r0, [pc, #8]	; (80158c4 <HW_IPCC_SYS_Init+0x10>)
 80158bc:	f7ff fe9c 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80158c0:	bf00      	nop
}
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	58000c00 	.word	0x58000c00

080158c8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80158cc:	2102      	movs	r1, #2
 80158ce:	4804      	ldr	r0, [pc, #16]	; (80158e0 <HW_IPCC_SYS_SendCmd+0x18>)
 80158d0:	f7ff fec3 	bl	801565a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80158d4:	2102      	movs	r1, #2
 80158d6:	4802      	ldr	r0, [pc, #8]	; (80158e0 <HW_IPCC_SYS_SendCmd+0x18>)
 80158d8:	f7ff fe69 	bl	80155ae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80158dc:	bf00      	nop
}
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	58000c00 	.word	0x58000c00

080158e4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80158e8:	2102      	movs	r1, #2
 80158ea:	4803      	ldr	r0, [pc, #12]	; (80158f8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80158ec:	f7ff fe72 	bl	80155d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80158f0:	f7fe fe0a 	bl	8014508 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80158f4:	bf00      	nop
}
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	58000c00 	.word	0x58000c00

080158fc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015900:	f7fe fe12 	bl	8014528 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015904:	2102      	movs	r1, #2
 8015906:	4802      	ldr	r0, [pc, #8]	; (8015910 <HW_IPCC_SYS_EvtHandler+0x14>)
 8015908:	f7ff fe99 	bl	801563e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801590c:	bf00      	nop
}
 801590e:	bd80      	pop	{r7, pc}
 8015910:	58000c00 	.word	0x58000c00

08015914 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015918:	2104      	movs	r1, #4
 801591a:	4804      	ldr	r0, [pc, #16]	; (801592c <HW_IPCC_THREAD_Init+0x18>)
 801591c:	f7ff fe6c 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015920:	2110      	movs	r1, #16
 8015922:	4802      	ldr	r0, [pc, #8]	; (801592c <HW_IPCC_THREAD_Init+0x18>)
 8015924:	f7ff fe68 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015928:	bf00      	nop
}
 801592a:	bd80      	pop	{r7, pc}
 801592c:	58000c00 	.word	0x58000c00

08015930 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015934:	2104      	movs	r1, #4
 8015936:	4804      	ldr	r0, [pc, #16]	; (8015948 <HW_IPCC_OT_SendCmd+0x18>)
 8015938:	f7ff fe8f 	bl	801565a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801593c:	2104      	movs	r1, #4
 801593e:	4802      	ldr	r0, [pc, #8]	; (8015948 <HW_IPCC_OT_SendCmd+0x18>)
 8015940:	f7ff fe35 	bl	80155ae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015944:	bf00      	nop
}
 8015946:	bd80      	pop	{r7, pc}
 8015948:	58000c00 	.word	0x58000c00

0801594c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8015950:	2110      	movs	r1, #16
 8015952:	4802      	ldr	r0, [pc, #8]	; (801595c <HW_IPCC_CLI_SendCmd+0x10>)
 8015954:	f7ff fe81 	bl	801565a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015958:	bf00      	nop
}
 801595a:	bd80      	pop	{r7, pc}
 801595c:	58000c00 	.word	0x58000c00

08015960 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8015964:	2104      	movs	r1, #4
 8015966:	4804      	ldr	r0, [pc, #16]	; (8015978 <HW_IPCC_THREAD_SendAck+0x18>)
 8015968:	f7ff fe69 	bl	801563e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801596c:	2104      	movs	r1, #4
 801596e:	4802      	ldr	r0, [pc, #8]	; (8015978 <HW_IPCC_THREAD_SendAck+0x18>)
 8015970:	f7ff fe42 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015974:	bf00      	nop
}
 8015976:	bd80      	pop	{r7, pc}
 8015978:	58000c00 	.word	0x58000c00

0801597c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015980:	2110      	movs	r1, #16
 8015982:	4804      	ldr	r0, [pc, #16]	; (8015994 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8015984:	f7ff fe5b 	bl	801563e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015988:	2110      	movs	r1, #16
 801598a:	4802      	ldr	r0, [pc, #8]	; (8015994 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801598c:	f7ff fe34 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015990:	bf00      	nop
}
 8015992:	bd80      	pop	{r7, pc}
 8015994:	58000c00 	.word	0x58000c00

08015998 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8015998:	b580      	push	{r7, lr}
 801599a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801599c:	2104      	movs	r1, #4
 801599e:	4803      	ldr	r0, [pc, #12]	; (80159ac <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80159a0:	f7ff fe18 	bl	80155d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 80159a4:	f7fe fe30 	bl	8014608 <HW_IPCC_OT_CmdEvtNot>

  return;
 80159a8:	bf00      	nop
}
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	58000c00 	.word	0x58000c00

080159b0 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80159b4:	2104      	movs	r1, #4
 80159b6:	4803      	ldr	r0, [pc, #12]	; (80159c4 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80159b8:	f7ff fe30 	bl	801561c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 80159bc:	f7fe fe30 	bl	8014620 <HW_IPCC_THREAD_EvtNot>

  return;
 80159c0:	bf00      	nop
}
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	58000c00 	.word	0x58000c00

080159c8 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80159cc:	2110      	movs	r1, #16
 80159ce:	4803      	ldr	r0, [pc, #12]	; (80159dc <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80159d0:	f7ff fe24 	bl	801561c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80159d4:	f7fe fe30 	bl	8014638 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80159d8:	bf00      	nop
}
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	58000c00 	.word	0x58000c00

080159e0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80159e8:	2108      	movs	r1, #8
 80159ea:	480c      	ldr	r0, [pc, #48]	; (8015a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80159ec:	f7ff fe44 	bl	8015678 <LL_C1_IPCC_IsActiveFlag_CHx>
 80159f0:	4603      	mov	r3, r0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d007      	beq.n	8015a06 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80159f6:	4a0a      	ldr	r2, [pc, #40]	; (8015a20 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80159fc:	2108      	movs	r1, #8
 80159fe:	4807      	ldr	r0, [pc, #28]	; (8015a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015a00:	f7ff fdd5 	bl	80155ae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015a04:	e006      	b.n	8015a14 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015a0a:	2108      	movs	r1, #8
 8015a0c:	4803      	ldr	r0, [pc, #12]	; (8015a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015a0e:	f7ff fe24 	bl	801565a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015a12:	bf00      	nop
}
 8015a14:	3708      	adds	r7, #8
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	58000c00 	.word	0x58000c00
 8015a20:	20027790 	.word	0x20027790

08015a24 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015a28:	2108      	movs	r1, #8
 8015a2a:	4806      	ldr	r0, [pc, #24]	; (8015a44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015a2c:	f7ff fdd2 	bl	80155d4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015a30:	4b05      	ldr	r3, [pc, #20]	; (8015a48 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015a36:	2108      	movs	r1, #8
 8015a38:	4802      	ldr	r0, [pc, #8]	; (8015a44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015a3a:	f7ff fe0e 	bl	801565a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015a3e:	bf00      	nop
}
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	58000c00 	.word	0x58000c00
 8015a48:	20027790 	.word	0x20027790

08015a4c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015a50:	2108      	movs	r1, #8
 8015a52:	4802      	ldr	r0, [pc, #8]	; (8015a5c <HW_IPCC_TRACES_Init+0x10>)
 8015a54:	f7ff fdd0 	bl	80155f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015a58:	bf00      	nop
}
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	58000c00 	.word	0x58000c00

08015a60 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015a64:	f7fe fe76 	bl	8014754 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015a68:	2108      	movs	r1, #8
 8015a6a:	4802      	ldr	r0, [pc, #8]	; (8015a74 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015a6c:	f7ff fde7 	bl	801563e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015a70:	bf00      	nop
}
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	58000c00 	.word	0x58000c00

08015a78 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8015a78:	b480      	push	{r7}
 8015a7a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015a7c:	4b05      	ldr	r3, [pc, #20]	; (8015a94 <UTIL_LPM_Init+0x1c>)
 8015a7e:	2200      	movs	r2, #0
 8015a80:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015a82:	4b05      	ldr	r3, [pc, #20]	; (8015a98 <UTIL_LPM_Init+0x20>)
 8015a84:	2200      	movs	r2, #0
 8015a86:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015a88:	bf00      	nop
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop
 8015a94:	20027794 	.word	0x20027794
 8015a98:	20027798 	.word	0x20027798

08015a9c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b087      	sub	sp, #28
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8015aac:	613b      	str	r3, [r7, #16]
  return(result);
 8015aae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ab2:	b672      	cpsid	i
  
  switch(state)
 8015ab4:	78fb      	ldrb	r3, [r7, #3]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d009      	beq.n	8015ace <UTIL_LPM_SetOffMode+0x32>
 8015aba:	2b01      	cmp	r3, #1
 8015abc:	d000      	beq.n	8015ac0 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8015abe:	e00e      	b.n	8015ade <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8015ac0:	4b0c      	ldr	r3, [pc, #48]	; (8015af4 <UTIL_LPM_SetOffMode+0x58>)
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	4313      	orrs	r3, r2
 8015ac8:	4a0a      	ldr	r2, [pc, #40]	; (8015af4 <UTIL_LPM_SetOffMode+0x58>)
 8015aca:	6013      	str	r3, [r2, #0]
      break;
 8015acc:	e007      	b.n	8015ade <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	43da      	mvns	r2, r3
 8015ad2:	4b08      	ldr	r3, [pc, #32]	; (8015af4 <UTIL_LPM_SetOffMode+0x58>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	4013      	ands	r3, r2
 8015ad8:	4a06      	ldr	r2, [pc, #24]	; (8015af4 <UTIL_LPM_SetOffMode+0x58>)
 8015ada:	6013      	str	r3, [r2, #0]
      break;
 8015adc:	bf00      	nop
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015ae8:	bf00      	nop
 8015aea:	371c      	adds	r7, #28
 8015aec:	46bd      	mov	sp, r7
 8015aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af2:	4770      	bx	lr
 8015af4:	20027798 	.word	0x20027798

08015af8 <arm_power_f32>:
 8015af8:	b430      	push	{r4, r5}
 8015afa:	088d      	lsrs	r5, r1, #2
 8015afc:	eddf 5a20 	vldr	s11, [pc, #128]	; 8015b80 <arm_power_f32+0x88>
 8015b00:	d020      	beq.n	8015b44 <arm_power_f32+0x4c>
 8015b02:	f100 0310 	add.w	r3, r0, #16
 8015b06:	462c      	mov	r4, r5
 8015b08:	ed53 6a04 	vldr	s13, [r3, #-16]
 8015b0c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8015b10:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015b14:	ed13 6a01 	vldr	s12, [r3, #-4]
 8015b18:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015b1c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015b20:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015b24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015b28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015b2c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b34:	3c01      	subs	r4, #1
 8015b36:	f103 0310 	add.w	r3, r3, #16
 8015b3a:	ee76 5a27 	vadd.f32	s11, s12, s15
 8015b3e:	d1e3      	bne.n	8015b08 <arm_power_f32+0x10>
 8015b40:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8015b44:	f011 0103 	ands.w	r1, r1, #3
 8015b48:	d015      	beq.n	8015b76 <arm_power_f32+0x7e>
 8015b4a:	edd0 7a00 	vldr	s15, [r0]
 8015b4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015b52:	3901      	subs	r1, #1
 8015b54:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015b58:	d00d      	beq.n	8015b76 <arm_power_f32+0x7e>
 8015b5a:	edd0 7a01 	vldr	s15, [r0, #4]
 8015b5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015b62:	2901      	cmp	r1, #1
 8015b64:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015b68:	d005      	beq.n	8015b76 <arm_power_f32+0x7e>
 8015b6a:	edd0 7a02 	vldr	s15, [r0, #8]
 8015b6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015b72:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015b76:	edc2 5a00 	vstr	s11, [r2]
 8015b7a:	bc30      	pop	{r4, r5}
 8015b7c:	4770      	bx	lr
 8015b7e:	bf00      	nop
 8015b80:	00000000 	.word	0x00000000

08015b84 <arm_mat_mult_f32>:
 8015b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	8845      	ldrh	r5, [r0, #2]
 8015b8a:	880b      	ldrh	r3, [r1, #0]
 8015b8c:	8806      	ldrh	r6, [r0, #0]
 8015b8e:	6847      	ldr	r7, [r0, #4]
 8015b90:	6854      	ldr	r4, [r2, #4]
 8015b92:	6848      	ldr	r0, [r1, #4]
 8015b94:	b08b      	sub	sp, #44	; 0x2c
 8015b96:	42ab      	cmp	r3, r5
 8015b98:	9109      	str	r1, [sp, #36]	; 0x24
 8015b9a:	9604      	str	r6, [sp, #16]
 8015b9c:	8849      	ldrh	r1, [r1, #2]
 8015b9e:	f040 808a 	bne.w	8015cb6 <arm_mat_mult_f32+0x132>
 8015ba2:	8815      	ldrh	r5, [r2, #0]
 8015ba4:	42b5      	cmp	r5, r6
 8015ba6:	f040 8086 	bne.w	8015cb6 <arm_mat_mult_f32+0x132>
 8015baa:	8852      	ldrh	r2, [r2, #2]
 8015bac:	428a      	cmp	r2, r1
 8015bae:	f040 8082 	bne.w	8015cb6 <arm_mat_mult_f32+0x132>
 8015bb2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8015bb6:	1d01      	adds	r1, r0, #4
 8015bb8:	0116      	lsls	r6, r2, #4
 8015bba:	9108      	str	r1, [sp, #32]
 8015bbc:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8015bc0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8015bc4:	9101      	str	r1, [sp, #4]
 8015bc6:	fb06 f108 	mul.w	r1, r6, r8
 8015bca:	0095      	lsls	r5, r2, #2
 8015bcc:	9103      	str	r1, [sp, #12]
 8015bce:	00d2      	lsls	r2, r2, #3
 8015bd0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8015bd4:	f003 0903 	and.w	r9, r3, #3
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	f107 0b10 	add.w	fp, r7, #16
 8015bde:	eb04 0a05 	add.w	sl, r4, r5
 8015be2:	9107      	str	r1, [sp, #28]
 8015be4:	9202      	str	r2, [sp, #8]
 8015be6:	9306      	str	r3, [sp, #24]
 8015be8:	f1ab 0310 	sub.w	r3, fp, #16
 8015bec:	9305      	str	r3, [sp, #20]
 8015bee:	9b07      	ldr	r3, [sp, #28]
 8015bf0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015bf4:	eb03 0c0a 	add.w	ip, r3, sl
 8015bf8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015cc0 <arm_mat_mult_f32+0x13c>
 8015bfc:	f1b8 0f00 	cmp.w	r8, #0
 8015c00:	d053      	beq.n	8015caa <arm_mat_mult_f32+0x126>
 8015c02:	9b02      	ldr	r3, [sp, #8]
 8015c04:	4644      	mov	r4, r8
 8015c06:	18c1      	adds	r1, r0, r3
 8015c08:	4602      	mov	r2, r0
 8015c0a:	465b      	mov	r3, fp
 8015c0c:	ed92 6a00 	vldr	s12, [r2]
 8015c10:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015c14:	ed53 4a03 	vldr	s9, [r3, #-12]
 8015c18:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015c1c:	ed91 5a00 	vldr	s10, [r1]
 8015c20:	ed53 5a01 	vldr	s11, [r3, #-4]
 8015c24:	1957      	adds	r7, r2, r5
 8015c26:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015c2a:	ed97 6a00 	vldr	s12, [r7]
 8015c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c32:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015c36:	194f      	adds	r7, r1, r5
 8015c38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015c3c:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015c40:	edd7 7a00 	vldr	s15, [r7]
 8015c44:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015c48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015c4c:	3c01      	subs	r4, #1
 8015c4e:	4432      	add	r2, r6
 8015c50:	4431      	add	r1, r6
 8015c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c56:	f103 0310 	add.w	r3, r3, #16
 8015c5a:	d1d7      	bne.n	8015c0c <arm_mat_mult_f32+0x88>
 8015c5c:	9b03      	ldr	r3, [sp, #12]
 8015c5e:	9a01      	ldr	r2, [sp, #4]
 8015c60:	4418      	add	r0, r3
 8015c62:	f1b9 0f00 	cmp.w	r9, #0
 8015c66:	d00b      	beq.n	8015c80 <arm_mat_mult_f32+0xfc>
 8015c68:	464b      	mov	r3, r9
 8015c6a:	edd0 6a00 	vldr	s13, [r0]
 8015c6e:	ecb2 7a01 	vldmia	r2!, {s14}
 8015c72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015c76:	3b01      	subs	r3, #1
 8015c78:	4428      	add	r0, r5
 8015c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c7e:	d1f4      	bne.n	8015c6a <arm_mat_mult_f32+0xe6>
 8015c80:	ecec 7a01 	vstmia	ip!, {s15}
 8015c84:	45d4      	cmp	ip, sl
 8015c86:	4670      	mov	r0, lr
 8015c88:	f10e 0e04 	add.w	lr, lr, #4
 8015c8c:	d1b4      	bne.n	8015bf8 <arm_mat_mult_f32+0x74>
 8015c8e:	9a01      	ldr	r2, [sp, #4]
 8015c90:	9b06      	ldr	r3, [sp, #24]
 8015c92:	4611      	mov	r1, r2
 8015c94:	4419      	add	r1, r3
 8015c96:	449b      	add	fp, r3
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	9101      	str	r1, [sp, #4]
 8015c9c:	3b01      	subs	r3, #1
 8015c9e:	44aa      	add	sl, r5
 8015ca0:	9304      	str	r3, [sp, #16]
 8015ca2:	d004      	beq.n	8015cae <arm_mat_mult_f32+0x12a>
 8015ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ca6:	6858      	ldr	r0, [r3, #4]
 8015ca8:	e79e      	b.n	8015be8 <arm_mat_mult_f32+0x64>
 8015caa:	9a05      	ldr	r2, [sp, #20]
 8015cac:	e7d9      	b.n	8015c62 <arm_mat_mult_f32+0xde>
 8015cae:	4618      	mov	r0, r3
 8015cb0:	b00b      	add	sp, #44	; 0x2c
 8015cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb6:	f06f 0002 	mvn.w	r0, #2
 8015cba:	b00b      	add	sp, #44	; 0x2c
 8015cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cc0:	00000000 	.word	0x00000000

08015cc4 <arm_sin_f32>:
 8015cc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015d44 <arm_sin_f32+0x80>
 8015cc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015ccc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015cd8:	d504      	bpl.n	8015ce4 <arm_sin_f32+0x20>
 8015cda:	ee17 3a90 	vmov	r3, s15
 8015cde:	3b01      	subs	r3, #1
 8015ce0:	ee07 3a90 	vmov	s15, r3
 8015ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ce8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015d48 <arm_sin_f32+0x84>
 8015cec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015cf0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015cf4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015cf8:	ee17 3a90 	vmov	r3, s15
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d02:	d21a      	bcs.n	8015d3a <arm_sin_f32+0x76>
 8015d04:	ee07 3a90 	vmov	s15, r3
 8015d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d0c:	1c59      	adds	r1, r3, #1
 8015d0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d12:	4a0e      	ldr	r2, [pc, #56]	; (8015d4c <arm_sin_f32+0x88>)
 8015d14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015d20:	ed93 7a00 	vldr	s14, [r3]
 8015d24:	edd2 6a00 	vldr	s13, [r2]
 8015d28:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d2c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d34:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015d38:	4770      	bx	lr
 8015d3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015d3e:	2101      	movs	r1, #1
 8015d40:	2300      	movs	r3, #0
 8015d42:	e7e6      	b.n	8015d12 <arm_sin_f32+0x4e>
 8015d44:	3e22f983 	.word	0x3e22f983
 8015d48:	44000000 	.word	0x44000000
 8015d4c:	08017ae4 	.word	0x08017ae4

08015d50 <arm_cos_f32>:
 8015d50:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015dd8 <arm_cos_f32+0x88>
 8015d54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d58:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015d5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015d6c:	d504      	bpl.n	8015d78 <arm_cos_f32+0x28>
 8015d6e:	ee17 3a90 	vmov	r3, s15
 8015d72:	3b01      	subs	r3, #1
 8015d74:	ee07 3a90 	vmov	s15, r3
 8015d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d7c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015ddc <arm_cos_f32+0x8c>
 8015d80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d84:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015d88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015d8c:	ee17 3a90 	vmov	r3, s15
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d96:	d21a      	bcs.n	8015dce <arm_cos_f32+0x7e>
 8015d98:	ee07 3a90 	vmov	s15, r3
 8015d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015da0:	1c59      	adds	r1, r3, #1
 8015da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015da6:	4a0e      	ldr	r2, [pc, #56]	; (8015de0 <arm_cos_f32+0x90>)
 8015da8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015db0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015db4:	ed93 7a00 	vldr	s14, [r3]
 8015db8:	edd2 6a00 	vldr	s13, [r2]
 8015dbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015dc0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015dc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015dcc:	4770      	bx	lr
 8015dce:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015dd2:	2101      	movs	r1, #1
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	e7e6      	b.n	8015da6 <arm_cos_f32+0x56>
 8015dd8:	3e22f983 	.word	0x3e22f983
 8015ddc:	44000000 	.word	0x44000000
 8015de0:	08017ae4 	.word	0x08017ae4

08015de4 <arm_sub_f32>:
 8015de4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015de8:	b4f0      	push	{r4, r5, r6, r7}
 8015dea:	d033      	beq.n	8015e54 <arm_sub_f32+0x70>
 8015dec:	f100 0610 	add.w	r6, r0, #16
 8015df0:	f101 0510 	add.w	r5, r1, #16
 8015df4:	f102 0410 	add.w	r4, r2, #16
 8015df8:	4667      	mov	r7, ip
 8015dfa:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015dfe:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e06:	3f01      	subs	r7, #1
 8015e08:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015e0c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015e10:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e18:	f106 0610 	add.w	r6, r6, #16
 8015e1c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015e20:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015e24:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e2c:	f105 0510 	add.w	r5, r5, #16
 8015e30:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015e34:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015e38:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015e3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e40:	f104 0410 	add.w	r4, r4, #16
 8015e44:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015e48:	d1d7      	bne.n	8015dfa <arm_sub_f32+0x16>
 8015e4a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015e4e:	4420      	add	r0, r4
 8015e50:	4421      	add	r1, r4
 8015e52:	4422      	add	r2, r4
 8015e54:	f013 0303 	ands.w	r3, r3, #3
 8015e58:	d01b      	beq.n	8015e92 <arm_sub_f32+0xae>
 8015e5a:	edd0 7a00 	vldr	s15, [r0]
 8015e5e:	ed91 7a00 	vldr	s14, [r1]
 8015e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e66:	3b01      	subs	r3, #1
 8015e68:	edc2 7a00 	vstr	s15, [r2]
 8015e6c:	d011      	beq.n	8015e92 <arm_sub_f32+0xae>
 8015e6e:	edd0 7a01 	vldr	s15, [r0, #4]
 8015e72:	ed91 7a01 	vldr	s14, [r1, #4]
 8015e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	edc2 7a01 	vstr	s15, [r2, #4]
 8015e80:	d007      	beq.n	8015e92 <arm_sub_f32+0xae>
 8015e82:	edd0 7a02 	vldr	s15, [r0, #8]
 8015e86:	ed91 7a02 	vldr	s14, [r1, #8]
 8015e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e8e:	edc2 7a02 	vstr	s15, [r2, #8]
 8015e92:	bcf0      	pop	{r4, r5, r6, r7}
 8015e94:	4770      	bx	lr
 8015e96:	bf00      	nop

08015e98 <arm_scale_f32>:
 8015e98:	b470      	push	{r4, r5, r6}
 8015e9a:	0896      	lsrs	r6, r2, #2
 8015e9c:	d025      	beq.n	8015eea <arm_scale_f32+0x52>
 8015e9e:	f100 0410 	add.w	r4, r0, #16
 8015ea2:	f101 0310 	add.w	r3, r1, #16
 8015ea6:	4635      	mov	r5, r6
 8015ea8:	ed54 7a04 	vldr	s15, [r4, #-16]
 8015eac:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015eb0:	3d01      	subs	r5, #1
 8015eb2:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015eb6:	ed54 7a03 	vldr	s15, [r4, #-12]
 8015eba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ebe:	f104 0410 	add.w	r4, r4, #16
 8015ec2:	ed43 7a03 	vstr	s15, [r3, #-12]
 8015ec6:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8015eca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ece:	f103 0310 	add.w	r3, r3, #16
 8015ed2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8015ed6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8015eda:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ede:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8015ee2:	d1e1      	bne.n	8015ea8 <arm_scale_f32+0x10>
 8015ee4:	0136      	lsls	r6, r6, #4
 8015ee6:	4430      	add	r0, r6
 8015ee8:	4431      	add	r1, r6
 8015eea:	f012 0203 	ands.w	r2, r2, #3
 8015eee:	d015      	beq.n	8015f1c <arm_scale_f32+0x84>
 8015ef0:	edd0 7a00 	vldr	s15, [r0]
 8015ef4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ef8:	3a01      	subs	r2, #1
 8015efa:	edc1 7a00 	vstr	s15, [r1]
 8015efe:	d00d      	beq.n	8015f1c <arm_scale_f32+0x84>
 8015f00:	edd0 7a01 	vldr	s15, [r0, #4]
 8015f04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015f08:	2a01      	cmp	r2, #1
 8015f0a:	edc1 7a01 	vstr	s15, [r1, #4]
 8015f0e:	d005      	beq.n	8015f1c <arm_scale_f32+0x84>
 8015f10:	edd0 7a02 	vldr	s15, [r0, #8]
 8015f14:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015f18:	ed81 0a02 	vstr	s0, [r1, #8]
 8015f1c:	bc70      	pop	{r4, r5, r6}
 8015f1e:	4770      	bx	lr

08015f20 <arm_dot_prod_f32>:
 8015f20:	b4f0      	push	{r4, r5, r6, r7}
 8015f22:	0897      	lsrs	r7, r2, #2
 8015f24:	eddf 5a29 	vldr	s11, [pc, #164]	; 8015fcc <arm_dot_prod_f32+0xac>
 8015f28:	d02d      	beq.n	8015f86 <arm_dot_prod_f32+0x66>
 8015f2a:	f100 0510 	add.w	r5, r0, #16
 8015f2e:	f101 0410 	add.w	r4, r1, #16
 8015f32:	463e      	mov	r6, r7
 8015f34:	ed55 6a04 	vldr	s13, [r5, #-16]
 8015f38:	ed54 3a04 	vldr	s7, [r4, #-16]
 8015f3c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015f40:	ed14 4a03 	vldr	s8, [r4, #-12]
 8015f44:	ed55 7a02 	vldr	s15, [r5, #-8]
 8015f48:	ed54 4a02 	vldr	s9, [r4, #-8]
 8015f4c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8015f50:	ed14 5a01 	vldr	s10, [r4, #-4]
 8015f54:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015f58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015f60:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015f64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015f68:	ee66 6a05 	vmul.f32	s13, s12, s10
 8015f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f70:	3e01      	subs	r6, #1
 8015f72:	f105 0510 	add.w	r5, r5, #16
 8015f76:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8015f7a:	f104 0410 	add.w	r4, r4, #16
 8015f7e:	d1d9      	bne.n	8015f34 <arm_dot_prod_f32+0x14>
 8015f80:	013f      	lsls	r7, r7, #4
 8015f82:	4438      	add	r0, r7
 8015f84:	4439      	add	r1, r7
 8015f86:	f012 0203 	ands.w	r2, r2, #3
 8015f8a:	d01b      	beq.n	8015fc4 <arm_dot_prod_f32+0xa4>
 8015f8c:	edd1 7a00 	vldr	s15, [r1]
 8015f90:	ed90 7a00 	vldr	s14, [r0]
 8015f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f98:	3a01      	subs	r2, #1
 8015f9a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015f9e:	d011      	beq.n	8015fc4 <arm_dot_prod_f32+0xa4>
 8015fa0:	edd1 7a01 	vldr	s15, [r1, #4]
 8015fa4:	ed90 7a01 	vldr	s14, [r0, #4]
 8015fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015fac:	2a01      	cmp	r2, #1
 8015fae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015fb2:	d007      	beq.n	8015fc4 <arm_dot_prod_f32+0xa4>
 8015fb4:	edd0 7a02 	vldr	s15, [r0, #8]
 8015fb8:	ed91 7a02 	vldr	s14, [r1, #8]
 8015fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015fc0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015fc4:	edc3 5a00 	vstr	s11, [r3]
 8015fc8:	bcf0      	pop	{r4, r5, r6, r7}
 8015fca:	4770      	bx	lr
 8015fcc:	00000000 	.word	0x00000000

08015fd0 <arm_add_f32>:
 8015fd0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015fd4:	b4f0      	push	{r4, r5, r6, r7}
 8015fd6:	d033      	beq.n	8016040 <arm_add_f32+0x70>
 8015fd8:	f100 0610 	add.w	r6, r0, #16
 8015fdc:	f101 0510 	add.w	r5, r1, #16
 8015fe0:	f102 0410 	add.w	r4, r2, #16
 8015fe4:	4667      	mov	r7, ip
 8015fe6:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015fea:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ff2:	3f01      	subs	r7, #1
 8015ff4:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015ff8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015ffc:	ed56 7a03 	vldr	s15, [r6, #-12]
 8016000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016004:	f106 0610 	add.w	r6, r6, #16
 8016008:	ed44 7a03 	vstr	s15, [r4, #-12]
 801600c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016010:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8016014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016018:	f105 0510 	add.w	r5, r5, #16
 801601c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8016020:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8016024:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8016028:	ee77 7a87 	vadd.f32	s15, s15, s14
 801602c:	f104 0410 	add.w	r4, r4, #16
 8016030:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016034:	d1d7      	bne.n	8015fe6 <arm_add_f32+0x16>
 8016036:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801603a:	4420      	add	r0, r4
 801603c:	4421      	add	r1, r4
 801603e:	4422      	add	r2, r4
 8016040:	f013 0303 	ands.w	r3, r3, #3
 8016044:	d01b      	beq.n	801607e <arm_add_f32+0xae>
 8016046:	edd1 7a00 	vldr	s15, [r1]
 801604a:	ed90 7a00 	vldr	s14, [r0]
 801604e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016052:	3b01      	subs	r3, #1
 8016054:	edc2 7a00 	vstr	s15, [r2]
 8016058:	d011      	beq.n	801607e <arm_add_f32+0xae>
 801605a:	edd0 7a01 	vldr	s15, [r0, #4]
 801605e:	ed91 7a01 	vldr	s14, [r1, #4]
 8016062:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016066:	2b01      	cmp	r3, #1
 8016068:	edc2 7a01 	vstr	s15, [r2, #4]
 801606c:	d007      	beq.n	801607e <arm_add_f32+0xae>
 801606e:	edd0 7a02 	vldr	s15, [r0, #8]
 8016072:	ed91 7a02 	vldr	s14, [r1, #8]
 8016076:	ee77 7a87 	vadd.f32	s15, s15, s14
 801607a:	edc2 7a02 	vstr	s15, [r2, #8]
 801607e:	bcf0      	pop	{r4, r5, r6, r7}
 8016080:	4770      	bx	lr
 8016082:	bf00      	nop

08016084 <__errno>:
 8016084:	4b01      	ldr	r3, [pc, #4]	; (801608c <__errno+0x8>)
 8016086:	6818      	ldr	r0, [r3, #0]
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	200000d0 	.word	0x200000d0

08016090 <__libc_init_array>:
 8016090:	b570      	push	{r4, r5, r6, lr}
 8016092:	4e0d      	ldr	r6, [pc, #52]	; (80160c8 <__libc_init_array+0x38>)
 8016094:	4c0d      	ldr	r4, [pc, #52]	; (80160cc <__libc_init_array+0x3c>)
 8016096:	1ba4      	subs	r4, r4, r6
 8016098:	10a4      	asrs	r4, r4, #2
 801609a:	2500      	movs	r5, #0
 801609c:	42a5      	cmp	r5, r4
 801609e:	d109      	bne.n	80160b4 <__libc_init_array+0x24>
 80160a0:	4e0b      	ldr	r6, [pc, #44]	; (80160d0 <__libc_init_array+0x40>)
 80160a2:	4c0c      	ldr	r4, [pc, #48]	; (80160d4 <__libc_init_array+0x44>)
 80160a4:	f001 f8d2 	bl	801724c <_init>
 80160a8:	1ba4      	subs	r4, r4, r6
 80160aa:	10a4      	asrs	r4, r4, #2
 80160ac:	2500      	movs	r5, #0
 80160ae:	42a5      	cmp	r5, r4
 80160b0:	d105      	bne.n	80160be <__libc_init_array+0x2e>
 80160b2:	bd70      	pop	{r4, r5, r6, pc}
 80160b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80160b8:	4798      	blx	r3
 80160ba:	3501      	adds	r5, #1
 80160bc:	e7ee      	b.n	801609c <__libc_init_array+0xc>
 80160be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80160c2:	4798      	blx	r3
 80160c4:	3501      	adds	r5, #1
 80160c6:	e7f2      	b.n	80160ae <__libc_init_array+0x1e>
 80160c8:	080183a0 	.word	0x080183a0
 80160cc:	080183a0 	.word	0x080183a0
 80160d0:	080183a0 	.word	0x080183a0
 80160d4:	080183a4 	.word	0x080183a4

080160d8 <memcpy>:
 80160d8:	b510      	push	{r4, lr}
 80160da:	1e43      	subs	r3, r0, #1
 80160dc:	440a      	add	r2, r1
 80160de:	4291      	cmp	r1, r2
 80160e0:	d100      	bne.n	80160e4 <memcpy+0xc>
 80160e2:	bd10      	pop	{r4, pc}
 80160e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160ec:	e7f7      	b.n	80160de <memcpy+0x6>

080160ee <memset>:
 80160ee:	4402      	add	r2, r0
 80160f0:	4603      	mov	r3, r0
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d100      	bne.n	80160f8 <memset+0xa>
 80160f6:	4770      	bx	lr
 80160f8:	f803 1b01 	strb.w	r1, [r3], #1
 80160fc:	e7f9      	b.n	80160f2 <memset+0x4>
	...

08016100 <pow>:
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	ed2d 8b04 	vpush	{d8-d9}
 8016108:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80163dc <pow+0x2dc>
 801610c:	b08d      	sub	sp, #52	; 0x34
 801610e:	ec57 6b10 	vmov	r6, r7, d0
 8016112:	ec55 4b11 	vmov	r4, r5, d1
 8016116:	f000 f9b3 	bl	8016480 <__ieee754_pow>
 801611a:	f999 3000 	ldrsb.w	r3, [r9]
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	3301      	adds	r3, #1
 8016122:	eeb0 8a40 	vmov.f32	s16, s0
 8016126:	eef0 8a60 	vmov.f32	s17, s1
 801612a:	46c8      	mov	r8, r9
 801612c:	d05f      	beq.n	80161ee <pow+0xee>
 801612e:	4622      	mov	r2, r4
 8016130:	462b      	mov	r3, r5
 8016132:	4620      	mov	r0, r4
 8016134:	4629      	mov	r1, r5
 8016136:	f7ea fc83 	bl	8000a40 <__aeabi_dcmpun>
 801613a:	4683      	mov	fp, r0
 801613c:	2800      	cmp	r0, #0
 801613e:	d156      	bne.n	80161ee <pow+0xee>
 8016140:	4632      	mov	r2, r6
 8016142:	463b      	mov	r3, r7
 8016144:	4630      	mov	r0, r6
 8016146:	4639      	mov	r1, r7
 8016148:	f7ea fc7a 	bl	8000a40 <__aeabi_dcmpun>
 801614c:	9001      	str	r0, [sp, #4]
 801614e:	b1e8      	cbz	r0, 801618c <pow+0x8c>
 8016150:	2200      	movs	r2, #0
 8016152:	2300      	movs	r3, #0
 8016154:	4620      	mov	r0, r4
 8016156:	4629      	mov	r1, r5
 8016158:	f7ea fc40 	bl	80009dc <__aeabi_dcmpeq>
 801615c:	2800      	cmp	r0, #0
 801615e:	d046      	beq.n	80161ee <pow+0xee>
 8016160:	2301      	movs	r3, #1
 8016162:	9302      	str	r3, [sp, #8]
 8016164:	4b96      	ldr	r3, [pc, #600]	; (80163c0 <pow+0x2c0>)
 8016166:	9303      	str	r3, [sp, #12]
 8016168:	4b96      	ldr	r3, [pc, #600]	; (80163c4 <pow+0x2c4>)
 801616a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801616e:	2200      	movs	r2, #0
 8016170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016174:	9b00      	ldr	r3, [sp, #0]
 8016176:	2b02      	cmp	r3, #2
 8016178:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801617c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016180:	d033      	beq.n	80161ea <pow+0xea>
 8016182:	a802      	add	r0, sp, #8
 8016184:	f000 ff4e 	bl	8017024 <matherr>
 8016188:	bb48      	cbnz	r0, 80161de <pow+0xde>
 801618a:	e05d      	b.n	8016248 <pow+0x148>
 801618c:	f04f 0a00 	mov.w	sl, #0
 8016190:	f04f 0b00 	mov.w	fp, #0
 8016194:	4652      	mov	r2, sl
 8016196:	465b      	mov	r3, fp
 8016198:	4630      	mov	r0, r6
 801619a:	4639      	mov	r1, r7
 801619c:	f7ea fc1e 	bl	80009dc <__aeabi_dcmpeq>
 80161a0:	ec4b ab19 	vmov	d9, sl, fp
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d054      	beq.n	8016252 <pow+0x152>
 80161a8:	4652      	mov	r2, sl
 80161aa:	465b      	mov	r3, fp
 80161ac:	4620      	mov	r0, r4
 80161ae:	4629      	mov	r1, r5
 80161b0:	f7ea fc14 	bl	80009dc <__aeabi_dcmpeq>
 80161b4:	4680      	mov	r8, r0
 80161b6:	b318      	cbz	r0, 8016200 <pow+0x100>
 80161b8:	2301      	movs	r3, #1
 80161ba:	9302      	str	r3, [sp, #8]
 80161bc:	4b80      	ldr	r3, [pc, #512]	; (80163c0 <pow+0x2c0>)
 80161be:	9303      	str	r3, [sp, #12]
 80161c0:	9b01      	ldr	r3, [sp, #4]
 80161c2:	930a      	str	r3, [sp, #40]	; 0x28
 80161c4:	9b00      	ldr	r3, [sp, #0]
 80161c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80161ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80161ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d0d5      	beq.n	8016182 <pow+0x82>
 80161d6:	4b7b      	ldr	r3, [pc, #492]	; (80163c4 <pow+0x2c4>)
 80161d8:	2200      	movs	r2, #0
 80161da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80161de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161e0:	b11b      	cbz	r3, 80161ea <pow+0xea>
 80161e2:	f7ff ff4f 	bl	8016084 <__errno>
 80161e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161e8:	6003      	str	r3, [r0, #0]
 80161ea:	ed9d 8b08 	vldr	d8, [sp, #32]
 80161ee:	eeb0 0a48 	vmov.f32	s0, s16
 80161f2:	eef0 0a68 	vmov.f32	s1, s17
 80161f6:	b00d      	add	sp, #52	; 0x34
 80161f8:	ecbd 8b04 	vpop	{d8-d9}
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016200:	ec45 4b10 	vmov	d0, r4, r5
 8016204:	f000 ff06 	bl	8017014 <finite>
 8016208:	2800      	cmp	r0, #0
 801620a:	d0f0      	beq.n	80161ee <pow+0xee>
 801620c:	4652      	mov	r2, sl
 801620e:	465b      	mov	r3, fp
 8016210:	4620      	mov	r0, r4
 8016212:	4629      	mov	r1, r5
 8016214:	f7ea fbec 	bl	80009f0 <__aeabi_dcmplt>
 8016218:	2800      	cmp	r0, #0
 801621a:	d0e8      	beq.n	80161ee <pow+0xee>
 801621c:	2301      	movs	r3, #1
 801621e:	9302      	str	r3, [sp, #8]
 8016220:	4b67      	ldr	r3, [pc, #412]	; (80163c0 <pow+0x2c0>)
 8016222:	9303      	str	r3, [sp, #12]
 8016224:	f999 3000 	ldrsb.w	r3, [r9]
 8016228:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801622c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016230:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016234:	b913      	cbnz	r3, 801623c <pow+0x13c>
 8016236:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801623a:	e7a2      	b.n	8016182 <pow+0x82>
 801623c:	4962      	ldr	r1, [pc, #392]	; (80163c8 <pow+0x2c8>)
 801623e:	2000      	movs	r0, #0
 8016240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016244:	2b02      	cmp	r3, #2
 8016246:	d19c      	bne.n	8016182 <pow+0x82>
 8016248:	f7ff ff1c 	bl	8016084 <__errno>
 801624c:	2321      	movs	r3, #33	; 0x21
 801624e:	6003      	str	r3, [r0, #0]
 8016250:	e7c5      	b.n	80161de <pow+0xde>
 8016252:	eeb0 0a48 	vmov.f32	s0, s16
 8016256:	eef0 0a68 	vmov.f32	s1, s17
 801625a:	f000 fedb 	bl	8017014 <finite>
 801625e:	9000      	str	r0, [sp, #0]
 8016260:	2800      	cmp	r0, #0
 8016262:	f040 8081 	bne.w	8016368 <pow+0x268>
 8016266:	ec47 6b10 	vmov	d0, r6, r7
 801626a:	f000 fed3 	bl	8017014 <finite>
 801626e:	2800      	cmp	r0, #0
 8016270:	d07a      	beq.n	8016368 <pow+0x268>
 8016272:	ec45 4b10 	vmov	d0, r4, r5
 8016276:	f000 fecd 	bl	8017014 <finite>
 801627a:	2800      	cmp	r0, #0
 801627c:	d074      	beq.n	8016368 <pow+0x268>
 801627e:	ec53 2b18 	vmov	r2, r3, d8
 8016282:	ee18 0a10 	vmov	r0, s16
 8016286:	4619      	mov	r1, r3
 8016288:	f7ea fbda 	bl	8000a40 <__aeabi_dcmpun>
 801628c:	f999 9000 	ldrsb.w	r9, [r9]
 8016290:	4b4b      	ldr	r3, [pc, #300]	; (80163c0 <pow+0x2c0>)
 8016292:	b1b0      	cbz	r0, 80162c2 <pow+0x1c2>
 8016294:	2201      	movs	r2, #1
 8016296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801629a:	9b00      	ldr	r3, [sp, #0]
 801629c:	930a      	str	r3, [sp, #40]	; 0x28
 801629e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80162a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80162a6:	f1b9 0f00 	cmp.w	r9, #0
 80162aa:	d0c4      	beq.n	8016236 <pow+0x136>
 80162ac:	4652      	mov	r2, sl
 80162ae:	465b      	mov	r3, fp
 80162b0:	4650      	mov	r0, sl
 80162b2:	4659      	mov	r1, fp
 80162b4:	f7ea fa54 	bl	8000760 <__aeabi_ddiv>
 80162b8:	f1b9 0f02 	cmp.w	r9, #2
 80162bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80162c0:	e7c1      	b.n	8016246 <pow+0x146>
 80162c2:	2203      	movs	r2, #3
 80162c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80162c8:	900a      	str	r0, [sp, #40]	; 0x28
 80162ca:	4629      	mov	r1, r5
 80162cc:	4620      	mov	r0, r4
 80162ce:	2200      	movs	r2, #0
 80162d0:	4b3e      	ldr	r3, [pc, #248]	; (80163cc <pow+0x2cc>)
 80162d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80162d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80162da:	f7ea f917 	bl	800050c <__aeabi_dmul>
 80162de:	4604      	mov	r4, r0
 80162e0:	460d      	mov	r5, r1
 80162e2:	f1b9 0f00 	cmp.w	r9, #0
 80162e6:	d124      	bne.n	8016332 <pow+0x232>
 80162e8:	4b39      	ldr	r3, [pc, #228]	; (80163d0 <pow+0x2d0>)
 80162ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80162ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162f2:	4630      	mov	r0, r6
 80162f4:	4652      	mov	r2, sl
 80162f6:	465b      	mov	r3, fp
 80162f8:	4639      	mov	r1, r7
 80162fa:	f7ea fb79 	bl	80009f0 <__aeabi_dcmplt>
 80162fe:	2800      	cmp	r0, #0
 8016300:	d056      	beq.n	80163b0 <pow+0x2b0>
 8016302:	ec45 4b10 	vmov	d0, r4, r5
 8016306:	f000 fe97 	bl	8017038 <rint>
 801630a:	4622      	mov	r2, r4
 801630c:	462b      	mov	r3, r5
 801630e:	ec51 0b10 	vmov	r0, r1, d0
 8016312:	f7ea fb63 	bl	80009dc <__aeabi_dcmpeq>
 8016316:	b920      	cbnz	r0, 8016322 <pow+0x222>
 8016318:	4b2e      	ldr	r3, [pc, #184]	; (80163d4 <pow+0x2d4>)
 801631a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801631e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016322:	f998 3000 	ldrsb.w	r3, [r8]
 8016326:	2b02      	cmp	r3, #2
 8016328:	d142      	bne.n	80163b0 <pow+0x2b0>
 801632a:	f7ff feab 	bl	8016084 <__errno>
 801632e:	2322      	movs	r3, #34	; 0x22
 8016330:	e78d      	b.n	801624e <pow+0x14e>
 8016332:	4b29      	ldr	r3, [pc, #164]	; (80163d8 <pow+0x2d8>)
 8016334:	2200      	movs	r2, #0
 8016336:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801633a:	4630      	mov	r0, r6
 801633c:	4652      	mov	r2, sl
 801633e:	465b      	mov	r3, fp
 8016340:	4639      	mov	r1, r7
 8016342:	f7ea fb55 	bl	80009f0 <__aeabi_dcmplt>
 8016346:	2800      	cmp	r0, #0
 8016348:	d0eb      	beq.n	8016322 <pow+0x222>
 801634a:	ec45 4b10 	vmov	d0, r4, r5
 801634e:	f000 fe73 	bl	8017038 <rint>
 8016352:	4622      	mov	r2, r4
 8016354:	462b      	mov	r3, r5
 8016356:	ec51 0b10 	vmov	r0, r1, d0
 801635a:	f7ea fb3f 	bl	80009dc <__aeabi_dcmpeq>
 801635e:	2800      	cmp	r0, #0
 8016360:	d1df      	bne.n	8016322 <pow+0x222>
 8016362:	2200      	movs	r2, #0
 8016364:	4b18      	ldr	r3, [pc, #96]	; (80163c8 <pow+0x2c8>)
 8016366:	e7da      	b.n	801631e <pow+0x21e>
 8016368:	2200      	movs	r2, #0
 801636a:	2300      	movs	r3, #0
 801636c:	ec51 0b18 	vmov	r0, r1, d8
 8016370:	f7ea fb34 	bl	80009dc <__aeabi_dcmpeq>
 8016374:	2800      	cmp	r0, #0
 8016376:	f43f af3a 	beq.w	80161ee <pow+0xee>
 801637a:	ec47 6b10 	vmov	d0, r6, r7
 801637e:	f000 fe49 	bl	8017014 <finite>
 8016382:	2800      	cmp	r0, #0
 8016384:	f43f af33 	beq.w	80161ee <pow+0xee>
 8016388:	ec45 4b10 	vmov	d0, r4, r5
 801638c:	f000 fe42 	bl	8017014 <finite>
 8016390:	2800      	cmp	r0, #0
 8016392:	f43f af2c 	beq.w	80161ee <pow+0xee>
 8016396:	2304      	movs	r3, #4
 8016398:	9302      	str	r3, [sp, #8]
 801639a:	4b09      	ldr	r3, [pc, #36]	; (80163c0 <pow+0x2c0>)
 801639c:	9303      	str	r3, [sp, #12]
 801639e:	2300      	movs	r3, #0
 80163a0:	930a      	str	r3, [sp, #40]	; 0x28
 80163a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80163a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80163aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80163ae:	e7b8      	b.n	8016322 <pow+0x222>
 80163b0:	a802      	add	r0, sp, #8
 80163b2:	f000 fe37 	bl	8017024 <matherr>
 80163b6:	2800      	cmp	r0, #0
 80163b8:	f47f af11 	bne.w	80161de <pow+0xde>
 80163bc:	e7b5      	b.n	801632a <pow+0x22a>
 80163be:	bf00      	nop
 80163c0:	08018348 	.word	0x08018348
 80163c4:	3ff00000 	.word	0x3ff00000
 80163c8:	fff00000 	.word	0xfff00000
 80163cc:	3fe00000 	.word	0x3fe00000
 80163d0:	47efffff 	.word	0x47efffff
 80163d4:	c7efffff 	.word	0xc7efffff
 80163d8:	7ff00000 	.word	0x7ff00000
 80163dc:	20000134 	.word	0x20000134

080163e0 <sqrtf>:
 80163e0:	b510      	push	{r4, lr}
 80163e2:	ed2d 8b02 	vpush	{d8}
 80163e6:	b08a      	sub	sp, #40	; 0x28
 80163e8:	eeb0 8a40 	vmov.f32	s16, s0
 80163ec:	f000 fe06 	bl	8016ffc <__ieee754_sqrtf>
 80163f0:	4b21      	ldr	r3, [pc, #132]	; (8016478 <sqrtf+0x98>)
 80163f2:	f993 4000 	ldrsb.w	r4, [r3]
 80163f6:	1c63      	adds	r3, r4, #1
 80163f8:	d02c      	beq.n	8016454 <sqrtf+0x74>
 80163fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80163fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016402:	d627      	bvs.n	8016454 <sqrtf+0x74>
 8016404:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640c:	d522      	bpl.n	8016454 <sqrtf+0x74>
 801640e:	2301      	movs	r3, #1
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	4b1a      	ldr	r3, [pc, #104]	; (801647c <sqrtf+0x9c>)
 8016414:	9301      	str	r3, [sp, #4]
 8016416:	ee18 0a10 	vmov	r0, s16
 801641a:	2300      	movs	r3, #0
 801641c:	9308      	str	r3, [sp, #32]
 801641e:	f7ea f81d 	bl	800045c <__aeabi_f2d>
 8016422:	2200      	movs	r2, #0
 8016424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801642c:	2300      	movs	r3, #0
 801642e:	b9ac      	cbnz	r4, 801645c <sqrtf+0x7c>
 8016430:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016434:	4668      	mov	r0, sp
 8016436:	f000 fdf5 	bl	8017024 <matherr>
 801643a:	b1b8      	cbz	r0, 801646c <sqrtf+0x8c>
 801643c:	9b08      	ldr	r3, [sp, #32]
 801643e:	b11b      	cbz	r3, 8016448 <sqrtf+0x68>
 8016440:	f7ff fe20 	bl	8016084 <__errno>
 8016444:	9b08      	ldr	r3, [sp, #32]
 8016446:	6003      	str	r3, [r0, #0]
 8016448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801644c:	f7ea fb0e 	bl	8000a6c <__aeabi_d2f>
 8016450:	ee00 0a10 	vmov	s0, r0
 8016454:	b00a      	add	sp, #40	; 0x28
 8016456:	ecbd 8b02 	vpop	{d8}
 801645a:	bd10      	pop	{r4, pc}
 801645c:	4610      	mov	r0, r2
 801645e:	4619      	mov	r1, r3
 8016460:	f7ea f97e 	bl	8000760 <__aeabi_ddiv>
 8016464:	2c02      	cmp	r4, #2
 8016466:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801646a:	d1e3      	bne.n	8016434 <sqrtf+0x54>
 801646c:	f7ff fe0a 	bl	8016084 <__errno>
 8016470:	2321      	movs	r3, #33	; 0x21
 8016472:	6003      	str	r3, [r0, #0]
 8016474:	e7e2      	b.n	801643c <sqrtf+0x5c>
 8016476:	bf00      	nop
 8016478:	20000134 	.word	0x20000134
 801647c:	0801834c 	.word	0x0801834c

08016480 <__ieee754_pow>:
 8016480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016484:	b091      	sub	sp, #68	; 0x44
 8016486:	ed8d 1b00 	vstr	d1, [sp]
 801648a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801648e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016492:	ea58 0302 	orrs.w	r3, r8, r2
 8016496:	ec57 6b10 	vmov	r6, r7, d0
 801649a:	f000 84be 	beq.w	8016e1a <__ieee754_pow+0x99a>
 801649e:	4b7a      	ldr	r3, [pc, #488]	; (8016688 <__ieee754_pow+0x208>)
 80164a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80164a4:	429c      	cmp	r4, r3
 80164a6:	463d      	mov	r5, r7
 80164a8:	ee10 aa10 	vmov	sl, s0
 80164ac:	dc09      	bgt.n	80164c2 <__ieee754_pow+0x42>
 80164ae:	d103      	bne.n	80164b8 <__ieee754_pow+0x38>
 80164b0:	b93e      	cbnz	r6, 80164c2 <__ieee754_pow+0x42>
 80164b2:	45a0      	cmp	r8, r4
 80164b4:	dc0d      	bgt.n	80164d2 <__ieee754_pow+0x52>
 80164b6:	e001      	b.n	80164bc <__ieee754_pow+0x3c>
 80164b8:	4598      	cmp	r8, r3
 80164ba:	dc02      	bgt.n	80164c2 <__ieee754_pow+0x42>
 80164bc:	4598      	cmp	r8, r3
 80164be:	d10e      	bne.n	80164de <__ieee754_pow+0x5e>
 80164c0:	b16a      	cbz	r2, 80164de <__ieee754_pow+0x5e>
 80164c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80164c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80164ca:	ea54 030a 	orrs.w	r3, r4, sl
 80164ce:	f000 84a4 	beq.w	8016e1a <__ieee754_pow+0x99a>
 80164d2:	486e      	ldr	r0, [pc, #440]	; (801668c <__ieee754_pow+0x20c>)
 80164d4:	b011      	add	sp, #68	; 0x44
 80164d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164da:	f000 bda5 	b.w	8017028 <nan>
 80164de:	2d00      	cmp	r5, #0
 80164e0:	da53      	bge.n	801658a <__ieee754_pow+0x10a>
 80164e2:	4b6b      	ldr	r3, [pc, #428]	; (8016690 <__ieee754_pow+0x210>)
 80164e4:	4598      	cmp	r8, r3
 80164e6:	dc4d      	bgt.n	8016584 <__ieee754_pow+0x104>
 80164e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80164ec:	4598      	cmp	r8, r3
 80164ee:	dd4c      	ble.n	801658a <__ieee754_pow+0x10a>
 80164f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80164f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80164f8:	2b14      	cmp	r3, #20
 80164fa:	dd26      	ble.n	801654a <__ieee754_pow+0xca>
 80164fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016500:	fa22 f103 	lsr.w	r1, r2, r3
 8016504:	fa01 f303 	lsl.w	r3, r1, r3
 8016508:	4293      	cmp	r3, r2
 801650a:	d13e      	bne.n	801658a <__ieee754_pow+0x10a>
 801650c:	f001 0101 	and.w	r1, r1, #1
 8016510:	f1c1 0b02 	rsb	fp, r1, #2
 8016514:	2a00      	cmp	r2, #0
 8016516:	d15b      	bne.n	80165d0 <__ieee754_pow+0x150>
 8016518:	4b5b      	ldr	r3, [pc, #364]	; (8016688 <__ieee754_pow+0x208>)
 801651a:	4598      	cmp	r8, r3
 801651c:	d124      	bne.n	8016568 <__ieee754_pow+0xe8>
 801651e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016522:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016526:	ea53 030a 	orrs.w	r3, r3, sl
 801652a:	f000 8476 	beq.w	8016e1a <__ieee754_pow+0x99a>
 801652e:	4b59      	ldr	r3, [pc, #356]	; (8016694 <__ieee754_pow+0x214>)
 8016530:	429c      	cmp	r4, r3
 8016532:	dd2d      	ble.n	8016590 <__ieee754_pow+0x110>
 8016534:	f1b9 0f00 	cmp.w	r9, #0
 8016538:	f280 8473 	bge.w	8016e22 <__ieee754_pow+0x9a2>
 801653c:	2000      	movs	r0, #0
 801653e:	2100      	movs	r1, #0
 8016540:	ec41 0b10 	vmov	d0, r0, r1
 8016544:	b011      	add	sp, #68	; 0x44
 8016546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654a:	2a00      	cmp	r2, #0
 801654c:	d13e      	bne.n	80165cc <__ieee754_pow+0x14c>
 801654e:	f1c3 0314 	rsb	r3, r3, #20
 8016552:	fa48 f103 	asr.w	r1, r8, r3
 8016556:	fa01 f303 	lsl.w	r3, r1, r3
 801655a:	4543      	cmp	r3, r8
 801655c:	f040 8469 	bne.w	8016e32 <__ieee754_pow+0x9b2>
 8016560:	f001 0101 	and.w	r1, r1, #1
 8016564:	f1c1 0b02 	rsb	fp, r1, #2
 8016568:	4b4b      	ldr	r3, [pc, #300]	; (8016698 <__ieee754_pow+0x218>)
 801656a:	4598      	cmp	r8, r3
 801656c:	d118      	bne.n	80165a0 <__ieee754_pow+0x120>
 801656e:	f1b9 0f00 	cmp.w	r9, #0
 8016572:	f280 845a 	bge.w	8016e2a <__ieee754_pow+0x9aa>
 8016576:	4948      	ldr	r1, [pc, #288]	; (8016698 <__ieee754_pow+0x218>)
 8016578:	4632      	mov	r2, r6
 801657a:	463b      	mov	r3, r7
 801657c:	2000      	movs	r0, #0
 801657e:	f7ea f8ef 	bl	8000760 <__aeabi_ddiv>
 8016582:	e7dd      	b.n	8016540 <__ieee754_pow+0xc0>
 8016584:	f04f 0b02 	mov.w	fp, #2
 8016588:	e7c4      	b.n	8016514 <__ieee754_pow+0x94>
 801658a:	f04f 0b00 	mov.w	fp, #0
 801658e:	e7c1      	b.n	8016514 <__ieee754_pow+0x94>
 8016590:	f1b9 0f00 	cmp.w	r9, #0
 8016594:	dad2      	bge.n	801653c <__ieee754_pow+0xbc>
 8016596:	e9dd 0300 	ldrd	r0, r3, [sp]
 801659a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801659e:	e7cf      	b.n	8016540 <__ieee754_pow+0xc0>
 80165a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80165a4:	d106      	bne.n	80165b4 <__ieee754_pow+0x134>
 80165a6:	4632      	mov	r2, r6
 80165a8:	463b      	mov	r3, r7
 80165aa:	4610      	mov	r0, r2
 80165ac:	4619      	mov	r1, r3
 80165ae:	f7e9 ffad 	bl	800050c <__aeabi_dmul>
 80165b2:	e7c5      	b.n	8016540 <__ieee754_pow+0xc0>
 80165b4:	4b39      	ldr	r3, [pc, #228]	; (801669c <__ieee754_pow+0x21c>)
 80165b6:	4599      	cmp	r9, r3
 80165b8:	d10a      	bne.n	80165d0 <__ieee754_pow+0x150>
 80165ba:	2d00      	cmp	r5, #0
 80165bc:	db08      	blt.n	80165d0 <__ieee754_pow+0x150>
 80165be:	ec47 6b10 	vmov	d0, r6, r7
 80165c2:	b011      	add	sp, #68	; 0x44
 80165c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c8:	f000 bc68 	b.w	8016e9c <__ieee754_sqrt>
 80165cc:	f04f 0b00 	mov.w	fp, #0
 80165d0:	ec47 6b10 	vmov	d0, r6, r7
 80165d4:	f000 fd15 	bl	8017002 <fabs>
 80165d8:	ec51 0b10 	vmov	r0, r1, d0
 80165dc:	f1ba 0f00 	cmp.w	sl, #0
 80165e0:	d127      	bne.n	8016632 <__ieee754_pow+0x1b2>
 80165e2:	b124      	cbz	r4, 80165ee <__ieee754_pow+0x16e>
 80165e4:	4b2c      	ldr	r3, [pc, #176]	; (8016698 <__ieee754_pow+0x218>)
 80165e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d121      	bne.n	8016632 <__ieee754_pow+0x1b2>
 80165ee:	f1b9 0f00 	cmp.w	r9, #0
 80165f2:	da05      	bge.n	8016600 <__ieee754_pow+0x180>
 80165f4:	4602      	mov	r2, r0
 80165f6:	460b      	mov	r3, r1
 80165f8:	2000      	movs	r0, #0
 80165fa:	4927      	ldr	r1, [pc, #156]	; (8016698 <__ieee754_pow+0x218>)
 80165fc:	f7ea f8b0 	bl	8000760 <__aeabi_ddiv>
 8016600:	2d00      	cmp	r5, #0
 8016602:	da9d      	bge.n	8016540 <__ieee754_pow+0xc0>
 8016604:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016608:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801660c:	ea54 030b 	orrs.w	r3, r4, fp
 8016610:	d108      	bne.n	8016624 <__ieee754_pow+0x1a4>
 8016612:	4602      	mov	r2, r0
 8016614:	460b      	mov	r3, r1
 8016616:	4610      	mov	r0, r2
 8016618:	4619      	mov	r1, r3
 801661a:	f7e9 fdbf 	bl	800019c <__aeabi_dsub>
 801661e:	4602      	mov	r2, r0
 8016620:	460b      	mov	r3, r1
 8016622:	e7ac      	b.n	801657e <__ieee754_pow+0xfe>
 8016624:	f1bb 0f01 	cmp.w	fp, #1
 8016628:	d18a      	bne.n	8016540 <__ieee754_pow+0xc0>
 801662a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801662e:	4619      	mov	r1, r3
 8016630:	e786      	b.n	8016540 <__ieee754_pow+0xc0>
 8016632:	0fed      	lsrs	r5, r5, #31
 8016634:	1e6b      	subs	r3, r5, #1
 8016636:	930d      	str	r3, [sp, #52]	; 0x34
 8016638:	ea5b 0303 	orrs.w	r3, fp, r3
 801663c:	d102      	bne.n	8016644 <__ieee754_pow+0x1c4>
 801663e:	4632      	mov	r2, r6
 8016640:	463b      	mov	r3, r7
 8016642:	e7e8      	b.n	8016616 <__ieee754_pow+0x196>
 8016644:	4b16      	ldr	r3, [pc, #88]	; (80166a0 <__ieee754_pow+0x220>)
 8016646:	4598      	cmp	r8, r3
 8016648:	f340 80fe 	ble.w	8016848 <__ieee754_pow+0x3c8>
 801664c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016650:	4598      	cmp	r8, r3
 8016652:	dd0a      	ble.n	801666a <__ieee754_pow+0x1ea>
 8016654:	4b0f      	ldr	r3, [pc, #60]	; (8016694 <__ieee754_pow+0x214>)
 8016656:	429c      	cmp	r4, r3
 8016658:	dc0d      	bgt.n	8016676 <__ieee754_pow+0x1f6>
 801665a:	f1b9 0f00 	cmp.w	r9, #0
 801665e:	f6bf af6d 	bge.w	801653c <__ieee754_pow+0xbc>
 8016662:	a307      	add	r3, pc, #28	; (adr r3, 8016680 <__ieee754_pow+0x200>)
 8016664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016668:	e79f      	b.n	80165aa <__ieee754_pow+0x12a>
 801666a:	4b0e      	ldr	r3, [pc, #56]	; (80166a4 <__ieee754_pow+0x224>)
 801666c:	429c      	cmp	r4, r3
 801666e:	ddf4      	ble.n	801665a <__ieee754_pow+0x1da>
 8016670:	4b09      	ldr	r3, [pc, #36]	; (8016698 <__ieee754_pow+0x218>)
 8016672:	429c      	cmp	r4, r3
 8016674:	dd18      	ble.n	80166a8 <__ieee754_pow+0x228>
 8016676:	f1b9 0f00 	cmp.w	r9, #0
 801667a:	dcf2      	bgt.n	8016662 <__ieee754_pow+0x1e2>
 801667c:	e75e      	b.n	801653c <__ieee754_pow+0xbc>
 801667e:	bf00      	nop
 8016680:	8800759c 	.word	0x8800759c
 8016684:	7e37e43c 	.word	0x7e37e43c
 8016688:	7ff00000 	.word	0x7ff00000
 801668c:	08018351 	.word	0x08018351
 8016690:	433fffff 	.word	0x433fffff
 8016694:	3fefffff 	.word	0x3fefffff
 8016698:	3ff00000 	.word	0x3ff00000
 801669c:	3fe00000 	.word	0x3fe00000
 80166a0:	41e00000 	.word	0x41e00000
 80166a4:	3feffffe 	.word	0x3feffffe
 80166a8:	2200      	movs	r2, #0
 80166aa:	4b63      	ldr	r3, [pc, #396]	; (8016838 <__ieee754_pow+0x3b8>)
 80166ac:	f7e9 fd76 	bl	800019c <__aeabi_dsub>
 80166b0:	a355      	add	r3, pc, #340	; (adr r3, 8016808 <__ieee754_pow+0x388>)
 80166b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b6:	4604      	mov	r4, r0
 80166b8:	460d      	mov	r5, r1
 80166ba:	f7e9 ff27 	bl	800050c <__aeabi_dmul>
 80166be:	a354      	add	r3, pc, #336	; (adr r3, 8016810 <__ieee754_pow+0x390>)
 80166c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c4:	4606      	mov	r6, r0
 80166c6:	460f      	mov	r7, r1
 80166c8:	4620      	mov	r0, r4
 80166ca:	4629      	mov	r1, r5
 80166cc:	f7e9 ff1e 	bl	800050c <__aeabi_dmul>
 80166d0:	2200      	movs	r2, #0
 80166d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166d6:	4b59      	ldr	r3, [pc, #356]	; (801683c <__ieee754_pow+0x3bc>)
 80166d8:	4620      	mov	r0, r4
 80166da:	4629      	mov	r1, r5
 80166dc:	f7e9 ff16 	bl	800050c <__aeabi_dmul>
 80166e0:	4602      	mov	r2, r0
 80166e2:	460b      	mov	r3, r1
 80166e4:	a14c      	add	r1, pc, #304	; (adr r1, 8016818 <__ieee754_pow+0x398>)
 80166e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166ea:	f7e9 fd57 	bl	800019c <__aeabi_dsub>
 80166ee:	4622      	mov	r2, r4
 80166f0:	462b      	mov	r3, r5
 80166f2:	f7e9 ff0b 	bl	800050c <__aeabi_dmul>
 80166f6:	4602      	mov	r2, r0
 80166f8:	460b      	mov	r3, r1
 80166fa:	2000      	movs	r0, #0
 80166fc:	4950      	ldr	r1, [pc, #320]	; (8016840 <__ieee754_pow+0x3c0>)
 80166fe:	f7e9 fd4d 	bl	800019c <__aeabi_dsub>
 8016702:	4622      	mov	r2, r4
 8016704:	462b      	mov	r3, r5
 8016706:	4680      	mov	r8, r0
 8016708:	4689      	mov	r9, r1
 801670a:	4620      	mov	r0, r4
 801670c:	4629      	mov	r1, r5
 801670e:	f7e9 fefd 	bl	800050c <__aeabi_dmul>
 8016712:	4602      	mov	r2, r0
 8016714:	460b      	mov	r3, r1
 8016716:	4640      	mov	r0, r8
 8016718:	4649      	mov	r1, r9
 801671a:	f7e9 fef7 	bl	800050c <__aeabi_dmul>
 801671e:	a340      	add	r3, pc, #256	; (adr r3, 8016820 <__ieee754_pow+0x3a0>)
 8016720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016724:	f7e9 fef2 	bl	800050c <__aeabi_dmul>
 8016728:	4602      	mov	r2, r0
 801672a:	460b      	mov	r3, r1
 801672c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016730:	f7e9 fd34 	bl	800019c <__aeabi_dsub>
 8016734:	4602      	mov	r2, r0
 8016736:	460b      	mov	r3, r1
 8016738:	4604      	mov	r4, r0
 801673a:	460d      	mov	r5, r1
 801673c:	4630      	mov	r0, r6
 801673e:	4639      	mov	r1, r7
 8016740:	f7e9 fd2e 	bl	80001a0 <__adddf3>
 8016744:	2000      	movs	r0, #0
 8016746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801674a:	4632      	mov	r2, r6
 801674c:	463b      	mov	r3, r7
 801674e:	f7e9 fd25 	bl	800019c <__aeabi_dsub>
 8016752:	4602      	mov	r2, r0
 8016754:	460b      	mov	r3, r1
 8016756:	4620      	mov	r0, r4
 8016758:	4629      	mov	r1, r5
 801675a:	f7e9 fd1f 	bl	800019c <__aeabi_dsub>
 801675e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016760:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016764:	4313      	orrs	r3, r2
 8016766:	4606      	mov	r6, r0
 8016768:	460f      	mov	r7, r1
 801676a:	f040 81eb 	bne.w	8016b44 <__ieee754_pow+0x6c4>
 801676e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016828 <__ieee754_pow+0x3a8>
 8016772:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016776:	2400      	movs	r4, #0
 8016778:	4622      	mov	r2, r4
 801677a:	462b      	mov	r3, r5
 801677c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016780:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016784:	f7e9 fd0a 	bl	800019c <__aeabi_dsub>
 8016788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801678c:	f7e9 febe 	bl	800050c <__aeabi_dmul>
 8016790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016794:	4680      	mov	r8, r0
 8016796:	4689      	mov	r9, r1
 8016798:	4630      	mov	r0, r6
 801679a:	4639      	mov	r1, r7
 801679c:	f7e9 feb6 	bl	800050c <__aeabi_dmul>
 80167a0:	4602      	mov	r2, r0
 80167a2:	460b      	mov	r3, r1
 80167a4:	4640      	mov	r0, r8
 80167a6:	4649      	mov	r1, r9
 80167a8:	f7e9 fcfa 	bl	80001a0 <__adddf3>
 80167ac:	4622      	mov	r2, r4
 80167ae:	462b      	mov	r3, r5
 80167b0:	4680      	mov	r8, r0
 80167b2:	4689      	mov	r9, r1
 80167b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80167b8:	f7e9 fea8 	bl	800050c <__aeabi_dmul>
 80167bc:	460b      	mov	r3, r1
 80167be:	4604      	mov	r4, r0
 80167c0:	460d      	mov	r5, r1
 80167c2:	4602      	mov	r2, r0
 80167c4:	4649      	mov	r1, r9
 80167c6:	4640      	mov	r0, r8
 80167c8:	e9cd 4500 	strd	r4, r5, [sp]
 80167cc:	f7e9 fce8 	bl	80001a0 <__adddf3>
 80167d0:	4b1c      	ldr	r3, [pc, #112]	; (8016844 <__ieee754_pow+0x3c4>)
 80167d2:	4299      	cmp	r1, r3
 80167d4:	4606      	mov	r6, r0
 80167d6:	460f      	mov	r7, r1
 80167d8:	468b      	mov	fp, r1
 80167da:	f340 82f7 	ble.w	8016dcc <__ieee754_pow+0x94c>
 80167de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80167e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80167e6:	4303      	orrs	r3, r0
 80167e8:	f000 81ea 	beq.w	8016bc0 <__ieee754_pow+0x740>
 80167ec:	a310      	add	r3, pc, #64	; (adr r3, 8016830 <__ieee754_pow+0x3b0>)
 80167ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167f6:	f7e9 fe89 	bl	800050c <__aeabi_dmul>
 80167fa:	a30d      	add	r3, pc, #52	; (adr r3, 8016830 <__ieee754_pow+0x3b0>)
 80167fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016800:	e6d5      	b.n	80165ae <__ieee754_pow+0x12e>
 8016802:	bf00      	nop
 8016804:	f3af 8000 	nop.w
 8016808:	60000000 	.word	0x60000000
 801680c:	3ff71547 	.word	0x3ff71547
 8016810:	f85ddf44 	.word	0xf85ddf44
 8016814:	3e54ae0b 	.word	0x3e54ae0b
 8016818:	55555555 	.word	0x55555555
 801681c:	3fd55555 	.word	0x3fd55555
 8016820:	652b82fe 	.word	0x652b82fe
 8016824:	3ff71547 	.word	0x3ff71547
 8016828:	00000000 	.word	0x00000000
 801682c:	bff00000 	.word	0xbff00000
 8016830:	8800759c 	.word	0x8800759c
 8016834:	7e37e43c 	.word	0x7e37e43c
 8016838:	3ff00000 	.word	0x3ff00000
 801683c:	3fd00000 	.word	0x3fd00000
 8016840:	3fe00000 	.word	0x3fe00000
 8016844:	408fffff 	.word	0x408fffff
 8016848:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801684c:	f04f 0200 	mov.w	r2, #0
 8016850:	da05      	bge.n	801685e <__ieee754_pow+0x3de>
 8016852:	4bd3      	ldr	r3, [pc, #844]	; (8016ba0 <__ieee754_pow+0x720>)
 8016854:	f7e9 fe5a 	bl	800050c <__aeabi_dmul>
 8016858:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801685c:	460c      	mov	r4, r1
 801685e:	1523      	asrs	r3, r4, #20
 8016860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016864:	4413      	add	r3, r2
 8016866:	9309      	str	r3, [sp, #36]	; 0x24
 8016868:	4bce      	ldr	r3, [pc, #824]	; (8016ba4 <__ieee754_pow+0x724>)
 801686a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801686e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016872:	429c      	cmp	r4, r3
 8016874:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016878:	dd08      	ble.n	801688c <__ieee754_pow+0x40c>
 801687a:	4bcb      	ldr	r3, [pc, #812]	; (8016ba8 <__ieee754_pow+0x728>)
 801687c:	429c      	cmp	r4, r3
 801687e:	f340 815e 	ble.w	8016b3e <__ieee754_pow+0x6be>
 8016882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016884:	3301      	adds	r3, #1
 8016886:	9309      	str	r3, [sp, #36]	; 0x24
 8016888:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801688c:	f04f 0a00 	mov.w	sl, #0
 8016890:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016894:	930c      	str	r3, [sp, #48]	; 0x30
 8016896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016898:	4bc4      	ldr	r3, [pc, #784]	; (8016bac <__ieee754_pow+0x72c>)
 801689a:	4413      	add	r3, r2
 801689c:	ed93 7b00 	vldr	d7, [r3]
 80168a0:	4629      	mov	r1, r5
 80168a2:	ec53 2b17 	vmov	r2, r3, d7
 80168a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80168aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80168ae:	f7e9 fc75 	bl	800019c <__aeabi_dsub>
 80168b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80168b6:	4606      	mov	r6, r0
 80168b8:	460f      	mov	r7, r1
 80168ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168be:	f7e9 fc6f 	bl	80001a0 <__adddf3>
 80168c2:	4602      	mov	r2, r0
 80168c4:	460b      	mov	r3, r1
 80168c6:	2000      	movs	r0, #0
 80168c8:	49b9      	ldr	r1, [pc, #740]	; (8016bb0 <__ieee754_pow+0x730>)
 80168ca:	f7e9 ff49 	bl	8000760 <__aeabi_ddiv>
 80168ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80168d2:	4602      	mov	r2, r0
 80168d4:	460b      	mov	r3, r1
 80168d6:	4630      	mov	r0, r6
 80168d8:	4639      	mov	r1, r7
 80168da:	f7e9 fe17 	bl	800050c <__aeabi_dmul>
 80168de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80168e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80168e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80168ea:	2300      	movs	r3, #0
 80168ec:	9302      	str	r3, [sp, #8]
 80168ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80168f2:	106d      	asrs	r5, r5, #1
 80168f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80168f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80168fc:	2200      	movs	r2, #0
 80168fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016902:	4640      	mov	r0, r8
 8016904:	4649      	mov	r1, r9
 8016906:	4614      	mov	r4, r2
 8016908:	461d      	mov	r5, r3
 801690a:	f7e9 fdff 	bl	800050c <__aeabi_dmul>
 801690e:	4602      	mov	r2, r0
 8016910:	460b      	mov	r3, r1
 8016912:	4630      	mov	r0, r6
 8016914:	4639      	mov	r1, r7
 8016916:	f7e9 fc41 	bl	800019c <__aeabi_dsub>
 801691a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801691e:	4606      	mov	r6, r0
 8016920:	460f      	mov	r7, r1
 8016922:	4620      	mov	r0, r4
 8016924:	4629      	mov	r1, r5
 8016926:	f7e9 fc39 	bl	800019c <__aeabi_dsub>
 801692a:	4602      	mov	r2, r0
 801692c:	460b      	mov	r3, r1
 801692e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016932:	f7e9 fc33 	bl	800019c <__aeabi_dsub>
 8016936:	4642      	mov	r2, r8
 8016938:	464b      	mov	r3, r9
 801693a:	f7e9 fde7 	bl	800050c <__aeabi_dmul>
 801693e:	4602      	mov	r2, r0
 8016940:	460b      	mov	r3, r1
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7e9 fc29 	bl	800019c <__aeabi_dsub>
 801694a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801694e:	f7e9 fddd 	bl	800050c <__aeabi_dmul>
 8016952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801695a:	4610      	mov	r0, r2
 801695c:	4619      	mov	r1, r3
 801695e:	f7e9 fdd5 	bl	800050c <__aeabi_dmul>
 8016962:	a37b      	add	r3, pc, #492	; (adr r3, 8016b50 <__ieee754_pow+0x6d0>)
 8016964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016968:	4604      	mov	r4, r0
 801696a:	460d      	mov	r5, r1
 801696c:	f7e9 fdce 	bl	800050c <__aeabi_dmul>
 8016970:	a379      	add	r3, pc, #484	; (adr r3, 8016b58 <__ieee754_pow+0x6d8>)
 8016972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016976:	f7e9 fc13 	bl	80001a0 <__adddf3>
 801697a:	4622      	mov	r2, r4
 801697c:	462b      	mov	r3, r5
 801697e:	f7e9 fdc5 	bl	800050c <__aeabi_dmul>
 8016982:	a377      	add	r3, pc, #476	; (adr r3, 8016b60 <__ieee754_pow+0x6e0>)
 8016984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016988:	f7e9 fc0a 	bl	80001a0 <__adddf3>
 801698c:	4622      	mov	r2, r4
 801698e:	462b      	mov	r3, r5
 8016990:	f7e9 fdbc 	bl	800050c <__aeabi_dmul>
 8016994:	a374      	add	r3, pc, #464	; (adr r3, 8016b68 <__ieee754_pow+0x6e8>)
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	f7e9 fc01 	bl	80001a0 <__adddf3>
 801699e:	4622      	mov	r2, r4
 80169a0:	462b      	mov	r3, r5
 80169a2:	f7e9 fdb3 	bl	800050c <__aeabi_dmul>
 80169a6:	a372      	add	r3, pc, #456	; (adr r3, 8016b70 <__ieee754_pow+0x6f0>)
 80169a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ac:	f7e9 fbf8 	bl	80001a0 <__adddf3>
 80169b0:	4622      	mov	r2, r4
 80169b2:	462b      	mov	r3, r5
 80169b4:	f7e9 fdaa 	bl	800050c <__aeabi_dmul>
 80169b8:	a36f      	add	r3, pc, #444	; (adr r3, 8016b78 <__ieee754_pow+0x6f8>)
 80169ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169be:	f7e9 fbef 	bl	80001a0 <__adddf3>
 80169c2:	4622      	mov	r2, r4
 80169c4:	4606      	mov	r6, r0
 80169c6:	460f      	mov	r7, r1
 80169c8:	462b      	mov	r3, r5
 80169ca:	4620      	mov	r0, r4
 80169cc:	4629      	mov	r1, r5
 80169ce:	f7e9 fd9d 	bl	800050c <__aeabi_dmul>
 80169d2:	4602      	mov	r2, r0
 80169d4:	460b      	mov	r3, r1
 80169d6:	4630      	mov	r0, r6
 80169d8:	4639      	mov	r1, r7
 80169da:	f7e9 fd97 	bl	800050c <__aeabi_dmul>
 80169de:	4642      	mov	r2, r8
 80169e0:	4604      	mov	r4, r0
 80169e2:	460d      	mov	r5, r1
 80169e4:	464b      	mov	r3, r9
 80169e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80169ea:	f7e9 fbd9 	bl	80001a0 <__adddf3>
 80169ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80169f2:	f7e9 fd8b 	bl	800050c <__aeabi_dmul>
 80169f6:	4622      	mov	r2, r4
 80169f8:	462b      	mov	r3, r5
 80169fa:	f7e9 fbd1 	bl	80001a0 <__adddf3>
 80169fe:	4642      	mov	r2, r8
 8016a00:	4606      	mov	r6, r0
 8016a02:	460f      	mov	r7, r1
 8016a04:	464b      	mov	r3, r9
 8016a06:	4640      	mov	r0, r8
 8016a08:	4649      	mov	r1, r9
 8016a0a:	f7e9 fd7f 	bl	800050c <__aeabi_dmul>
 8016a0e:	2200      	movs	r2, #0
 8016a10:	4b68      	ldr	r3, [pc, #416]	; (8016bb4 <__ieee754_pow+0x734>)
 8016a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a16:	f7e9 fbc3 	bl	80001a0 <__adddf3>
 8016a1a:	4632      	mov	r2, r6
 8016a1c:	463b      	mov	r3, r7
 8016a1e:	f7e9 fbbf 	bl	80001a0 <__adddf3>
 8016a22:	9802      	ldr	r0, [sp, #8]
 8016a24:	460d      	mov	r5, r1
 8016a26:	4604      	mov	r4, r0
 8016a28:	4602      	mov	r2, r0
 8016a2a:	460b      	mov	r3, r1
 8016a2c:	4640      	mov	r0, r8
 8016a2e:	4649      	mov	r1, r9
 8016a30:	f7e9 fd6c 	bl	800050c <__aeabi_dmul>
 8016a34:	2200      	movs	r2, #0
 8016a36:	4680      	mov	r8, r0
 8016a38:	4689      	mov	r9, r1
 8016a3a:	4b5e      	ldr	r3, [pc, #376]	; (8016bb4 <__ieee754_pow+0x734>)
 8016a3c:	4620      	mov	r0, r4
 8016a3e:	4629      	mov	r1, r5
 8016a40:	f7e9 fbac 	bl	800019c <__aeabi_dsub>
 8016a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a48:	f7e9 fba8 	bl	800019c <__aeabi_dsub>
 8016a4c:	4602      	mov	r2, r0
 8016a4e:	460b      	mov	r3, r1
 8016a50:	4630      	mov	r0, r6
 8016a52:	4639      	mov	r1, r7
 8016a54:	f7e9 fba2 	bl	800019c <__aeabi_dsub>
 8016a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a5c:	f7e9 fd56 	bl	800050c <__aeabi_dmul>
 8016a60:	4622      	mov	r2, r4
 8016a62:	4606      	mov	r6, r0
 8016a64:	460f      	mov	r7, r1
 8016a66:	462b      	mov	r3, r5
 8016a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a6c:	f7e9 fd4e 	bl	800050c <__aeabi_dmul>
 8016a70:	4602      	mov	r2, r0
 8016a72:	460b      	mov	r3, r1
 8016a74:	4630      	mov	r0, r6
 8016a76:	4639      	mov	r1, r7
 8016a78:	f7e9 fb92 	bl	80001a0 <__adddf3>
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	460f      	mov	r7, r1
 8016a80:	4602      	mov	r2, r0
 8016a82:	460b      	mov	r3, r1
 8016a84:	4640      	mov	r0, r8
 8016a86:	4649      	mov	r1, r9
 8016a88:	f7e9 fb8a 	bl	80001a0 <__adddf3>
 8016a8c:	9802      	ldr	r0, [sp, #8]
 8016a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8016b80 <__ieee754_pow+0x700>)
 8016a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a94:	4604      	mov	r4, r0
 8016a96:	460d      	mov	r5, r1
 8016a98:	f7e9 fd38 	bl	800050c <__aeabi_dmul>
 8016a9c:	4642      	mov	r2, r8
 8016a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016aa2:	464b      	mov	r3, r9
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	4629      	mov	r1, r5
 8016aa8:	f7e9 fb78 	bl	800019c <__aeabi_dsub>
 8016aac:	4602      	mov	r2, r0
 8016aae:	460b      	mov	r3, r1
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	4639      	mov	r1, r7
 8016ab4:	f7e9 fb72 	bl	800019c <__aeabi_dsub>
 8016ab8:	a333      	add	r3, pc, #204	; (adr r3, 8016b88 <__ieee754_pow+0x708>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	f7e9 fd25 	bl	800050c <__aeabi_dmul>
 8016ac2:	a333      	add	r3, pc, #204	; (adr r3, 8016b90 <__ieee754_pow+0x710>)
 8016ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac8:	4606      	mov	r6, r0
 8016aca:	460f      	mov	r7, r1
 8016acc:	4620      	mov	r0, r4
 8016ace:	4629      	mov	r1, r5
 8016ad0:	f7e9 fd1c 	bl	800050c <__aeabi_dmul>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	4630      	mov	r0, r6
 8016ada:	4639      	mov	r1, r7
 8016adc:	f7e9 fb60 	bl	80001a0 <__adddf3>
 8016ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ae2:	4b35      	ldr	r3, [pc, #212]	; (8016bb8 <__ieee754_pow+0x738>)
 8016ae4:	4413      	add	r3, r2
 8016ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aea:	f7e9 fb59 	bl	80001a0 <__adddf3>
 8016aee:	4604      	mov	r4, r0
 8016af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016af2:	460d      	mov	r5, r1
 8016af4:	f7e9 fca0 	bl	8000438 <__aeabi_i2d>
 8016af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016afa:	4b30      	ldr	r3, [pc, #192]	; (8016bbc <__ieee754_pow+0x73c>)
 8016afc:	4413      	add	r3, r2
 8016afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b02:	4606      	mov	r6, r0
 8016b04:	460f      	mov	r7, r1
 8016b06:	4622      	mov	r2, r4
 8016b08:	462b      	mov	r3, r5
 8016b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b0e:	f7e9 fb47 	bl	80001a0 <__adddf3>
 8016b12:	4642      	mov	r2, r8
 8016b14:	464b      	mov	r3, r9
 8016b16:	f7e9 fb43 	bl	80001a0 <__adddf3>
 8016b1a:	4632      	mov	r2, r6
 8016b1c:	463b      	mov	r3, r7
 8016b1e:	f7e9 fb3f 	bl	80001a0 <__adddf3>
 8016b22:	9802      	ldr	r0, [sp, #8]
 8016b24:	4632      	mov	r2, r6
 8016b26:	463b      	mov	r3, r7
 8016b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b2c:	f7e9 fb36 	bl	800019c <__aeabi_dsub>
 8016b30:	4642      	mov	r2, r8
 8016b32:	464b      	mov	r3, r9
 8016b34:	f7e9 fb32 	bl	800019c <__aeabi_dsub>
 8016b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016b3c:	e607      	b.n	801674e <__ieee754_pow+0x2ce>
 8016b3e:	f04f 0a01 	mov.w	sl, #1
 8016b42:	e6a5      	b.n	8016890 <__ieee754_pow+0x410>
 8016b44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016b98 <__ieee754_pow+0x718>
 8016b48:	e613      	b.n	8016772 <__ieee754_pow+0x2f2>
 8016b4a:	bf00      	nop
 8016b4c:	f3af 8000 	nop.w
 8016b50:	4a454eef 	.word	0x4a454eef
 8016b54:	3fca7e28 	.word	0x3fca7e28
 8016b58:	93c9db65 	.word	0x93c9db65
 8016b5c:	3fcd864a 	.word	0x3fcd864a
 8016b60:	a91d4101 	.word	0xa91d4101
 8016b64:	3fd17460 	.word	0x3fd17460
 8016b68:	518f264d 	.word	0x518f264d
 8016b6c:	3fd55555 	.word	0x3fd55555
 8016b70:	db6fabff 	.word	0xdb6fabff
 8016b74:	3fdb6db6 	.word	0x3fdb6db6
 8016b78:	33333303 	.word	0x33333303
 8016b7c:	3fe33333 	.word	0x3fe33333
 8016b80:	e0000000 	.word	0xe0000000
 8016b84:	3feec709 	.word	0x3feec709
 8016b88:	dc3a03fd 	.word	0xdc3a03fd
 8016b8c:	3feec709 	.word	0x3feec709
 8016b90:	145b01f5 	.word	0x145b01f5
 8016b94:	be3e2fe0 	.word	0xbe3e2fe0
 8016b98:	00000000 	.word	0x00000000
 8016b9c:	3ff00000 	.word	0x3ff00000
 8016ba0:	43400000 	.word	0x43400000
 8016ba4:	0003988e 	.word	0x0003988e
 8016ba8:	000bb679 	.word	0x000bb679
 8016bac:	08018358 	.word	0x08018358
 8016bb0:	3ff00000 	.word	0x3ff00000
 8016bb4:	40080000 	.word	0x40080000
 8016bb8:	08018378 	.word	0x08018378
 8016bbc:	08018368 	.word	0x08018368
 8016bc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8016e94 <__ieee754_pow+0xa14>)
 8016bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc6:	4640      	mov	r0, r8
 8016bc8:	4649      	mov	r1, r9
 8016bca:	f7e9 fae9 	bl	80001a0 <__adddf3>
 8016bce:	4622      	mov	r2, r4
 8016bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016bd4:	462b      	mov	r3, r5
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	4639      	mov	r1, r7
 8016bda:	f7e9 fadf 	bl	800019c <__aeabi_dsub>
 8016bde:	4602      	mov	r2, r0
 8016be0:	460b      	mov	r3, r1
 8016be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016be6:	f7e9 ff21 	bl	8000a2c <__aeabi_dcmpgt>
 8016bea:	2800      	cmp	r0, #0
 8016bec:	f47f adfe 	bne.w	80167ec <__ieee754_pow+0x36c>
 8016bf0:	4aa3      	ldr	r2, [pc, #652]	; (8016e80 <__ieee754_pow+0xa00>)
 8016bf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	f340 810a 	ble.w	8016e10 <__ieee754_pow+0x990>
 8016bfc:	151b      	asrs	r3, r3, #20
 8016bfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016c02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016c06:	fa4a f303 	asr.w	r3, sl, r3
 8016c0a:	445b      	add	r3, fp
 8016c0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016c10:	4e9c      	ldr	r6, [pc, #624]	; (8016e84 <__ieee754_pow+0xa04>)
 8016c12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016c16:	4116      	asrs	r6, r2
 8016c18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	ea23 0106 	bic.w	r1, r3, r6
 8016c22:	f1c2 0214 	rsb	r2, r2, #20
 8016c26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016c2a:	fa4a fa02 	asr.w	sl, sl, r2
 8016c2e:	f1bb 0f00 	cmp.w	fp, #0
 8016c32:	4602      	mov	r2, r0
 8016c34:	460b      	mov	r3, r1
 8016c36:	4620      	mov	r0, r4
 8016c38:	4629      	mov	r1, r5
 8016c3a:	bfb8      	it	lt
 8016c3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016c40:	f7e9 faac 	bl	800019c <__aeabi_dsub>
 8016c44:	e9cd 0100 	strd	r0, r1, [sp]
 8016c48:	4642      	mov	r2, r8
 8016c4a:	464b      	mov	r3, r9
 8016c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c50:	f7e9 faa6 	bl	80001a0 <__adddf3>
 8016c54:	2000      	movs	r0, #0
 8016c56:	a378      	add	r3, pc, #480	; (adr r3, 8016e38 <__ieee754_pow+0x9b8>)
 8016c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	460d      	mov	r5, r1
 8016c60:	f7e9 fc54 	bl	800050c <__aeabi_dmul>
 8016c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c68:	4606      	mov	r6, r0
 8016c6a:	460f      	mov	r7, r1
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	4629      	mov	r1, r5
 8016c70:	f7e9 fa94 	bl	800019c <__aeabi_dsub>
 8016c74:	4602      	mov	r2, r0
 8016c76:	460b      	mov	r3, r1
 8016c78:	4640      	mov	r0, r8
 8016c7a:	4649      	mov	r1, r9
 8016c7c:	f7e9 fa8e 	bl	800019c <__aeabi_dsub>
 8016c80:	a36f      	add	r3, pc, #444	; (adr r3, 8016e40 <__ieee754_pow+0x9c0>)
 8016c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c86:	f7e9 fc41 	bl	800050c <__aeabi_dmul>
 8016c8a:	a36f      	add	r3, pc, #444	; (adr r3, 8016e48 <__ieee754_pow+0x9c8>)
 8016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c90:	4680      	mov	r8, r0
 8016c92:	4689      	mov	r9, r1
 8016c94:	4620      	mov	r0, r4
 8016c96:	4629      	mov	r1, r5
 8016c98:	f7e9 fc38 	bl	800050c <__aeabi_dmul>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	4640      	mov	r0, r8
 8016ca2:	4649      	mov	r1, r9
 8016ca4:	f7e9 fa7c 	bl	80001a0 <__adddf3>
 8016ca8:	4604      	mov	r4, r0
 8016caa:	460d      	mov	r5, r1
 8016cac:	4602      	mov	r2, r0
 8016cae:	460b      	mov	r3, r1
 8016cb0:	4630      	mov	r0, r6
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	f7e9 fa74 	bl	80001a0 <__adddf3>
 8016cb8:	4632      	mov	r2, r6
 8016cba:	463b      	mov	r3, r7
 8016cbc:	4680      	mov	r8, r0
 8016cbe:	4689      	mov	r9, r1
 8016cc0:	f7e9 fa6c 	bl	800019c <__aeabi_dsub>
 8016cc4:	4602      	mov	r2, r0
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	4629      	mov	r1, r5
 8016ccc:	f7e9 fa66 	bl	800019c <__aeabi_dsub>
 8016cd0:	4642      	mov	r2, r8
 8016cd2:	4606      	mov	r6, r0
 8016cd4:	460f      	mov	r7, r1
 8016cd6:	464b      	mov	r3, r9
 8016cd8:	4640      	mov	r0, r8
 8016cda:	4649      	mov	r1, r9
 8016cdc:	f7e9 fc16 	bl	800050c <__aeabi_dmul>
 8016ce0:	a35b      	add	r3, pc, #364	; (adr r3, 8016e50 <__ieee754_pow+0x9d0>)
 8016ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	460d      	mov	r5, r1
 8016cea:	f7e9 fc0f 	bl	800050c <__aeabi_dmul>
 8016cee:	a35a      	add	r3, pc, #360	; (adr r3, 8016e58 <__ieee754_pow+0x9d8>)
 8016cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf4:	f7e9 fa52 	bl	800019c <__aeabi_dsub>
 8016cf8:	4622      	mov	r2, r4
 8016cfa:	462b      	mov	r3, r5
 8016cfc:	f7e9 fc06 	bl	800050c <__aeabi_dmul>
 8016d00:	a357      	add	r3, pc, #348	; (adr r3, 8016e60 <__ieee754_pow+0x9e0>)
 8016d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d06:	f7e9 fa4b 	bl	80001a0 <__adddf3>
 8016d0a:	4622      	mov	r2, r4
 8016d0c:	462b      	mov	r3, r5
 8016d0e:	f7e9 fbfd 	bl	800050c <__aeabi_dmul>
 8016d12:	a355      	add	r3, pc, #340	; (adr r3, 8016e68 <__ieee754_pow+0x9e8>)
 8016d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d18:	f7e9 fa40 	bl	800019c <__aeabi_dsub>
 8016d1c:	4622      	mov	r2, r4
 8016d1e:	462b      	mov	r3, r5
 8016d20:	f7e9 fbf4 	bl	800050c <__aeabi_dmul>
 8016d24:	a352      	add	r3, pc, #328	; (adr r3, 8016e70 <__ieee754_pow+0x9f0>)
 8016d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2a:	f7e9 fa39 	bl	80001a0 <__adddf3>
 8016d2e:	4622      	mov	r2, r4
 8016d30:	462b      	mov	r3, r5
 8016d32:	f7e9 fbeb 	bl	800050c <__aeabi_dmul>
 8016d36:	4602      	mov	r2, r0
 8016d38:	460b      	mov	r3, r1
 8016d3a:	4640      	mov	r0, r8
 8016d3c:	4649      	mov	r1, r9
 8016d3e:	f7e9 fa2d 	bl	800019c <__aeabi_dsub>
 8016d42:	4604      	mov	r4, r0
 8016d44:	460d      	mov	r5, r1
 8016d46:	4602      	mov	r2, r0
 8016d48:	460b      	mov	r3, r1
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4649      	mov	r1, r9
 8016d4e:	f7e9 fbdd 	bl	800050c <__aeabi_dmul>
 8016d52:	2200      	movs	r2, #0
 8016d54:	e9cd 0100 	strd	r0, r1, [sp]
 8016d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	4629      	mov	r1, r5
 8016d60:	f7e9 fa1c 	bl	800019c <__aeabi_dsub>
 8016d64:	4602      	mov	r2, r0
 8016d66:	460b      	mov	r3, r1
 8016d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d6c:	f7e9 fcf8 	bl	8000760 <__aeabi_ddiv>
 8016d70:	4632      	mov	r2, r6
 8016d72:	4604      	mov	r4, r0
 8016d74:	460d      	mov	r5, r1
 8016d76:	463b      	mov	r3, r7
 8016d78:	4640      	mov	r0, r8
 8016d7a:	4649      	mov	r1, r9
 8016d7c:	f7e9 fbc6 	bl	800050c <__aeabi_dmul>
 8016d80:	4632      	mov	r2, r6
 8016d82:	463b      	mov	r3, r7
 8016d84:	f7e9 fa0c 	bl	80001a0 <__adddf3>
 8016d88:	4602      	mov	r2, r0
 8016d8a:	460b      	mov	r3, r1
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	4629      	mov	r1, r5
 8016d90:	f7e9 fa04 	bl	800019c <__aeabi_dsub>
 8016d94:	4642      	mov	r2, r8
 8016d96:	464b      	mov	r3, r9
 8016d98:	f7e9 fa00 	bl	800019c <__aeabi_dsub>
 8016d9c:	4602      	mov	r2, r0
 8016d9e:	460b      	mov	r3, r1
 8016da0:	2000      	movs	r0, #0
 8016da2:	4939      	ldr	r1, [pc, #228]	; (8016e88 <__ieee754_pow+0xa08>)
 8016da4:	f7e9 f9fa 	bl	800019c <__aeabi_dsub>
 8016da8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016dac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016db0:	4602      	mov	r2, r0
 8016db2:	460b      	mov	r3, r1
 8016db4:	da2f      	bge.n	8016e16 <__ieee754_pow+0x996>
 8016db6:	4650      	mov	r0, sl
 8016db8:	ec43 2b10 	vmov	d0, r2, r3
 8016dbc:	f000 f9c0 	bl	8017140 <scalbn>
 8016dc0:	ec51 0b10 	vmov	r0, r1, d0
 8016dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016dc8:	f7ff bbf1 	b.w	80165ae <__ieee754_pow+0x12e>
 8016dcc:	4b2f      	ldr	r3, [pc, #188]	; (8016e8c <__ieee754_pow+0xa0c>)
 8016dce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016dd2:	429e      	cmp	r6, r3
 8016dd4:	f77f af0c 	ble.w	8016bf0 <__ieee754_pow+0x770>
 8016dd8:	4b2d      	ldr	r3, [pc, #180]	; (8016e90 <__ieee754_pow+0xa10>)
 8016dda:	440b      	add	r3, r1
 8016ddc:	4303      	orrs	r3, r0
 8016dde:	d00b      	beq.n	8016df8 <__ieee754_pow+0x978>
 8016de0:	a325      	add	r3, pc, #148	; (adr r3, 8016e78 <__ieee754_pow+0x9f8>)
 8016de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016dea:	f7e9 fb8f 	bl	800050c <__aeabi_dmul>
 8016dee:	a322      	add	r3, pc, #136	; (adr r3, 8016e78 <__ieee754_pow+0x9f8>)
 8016df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df4:	f7ff bbdb 	b.w	80165ae <__ieee754_pow+0x12e>
 8016df8:	4622      	mov	r2, r4
 8016dfa:	462b      	mov	r3, r5
 8016dfc:	f7e9 f9ce 	bl	800019c <__aeabi_dsub>
 8016e00:	4642      	mov	r2, r8
 8016e02:	464b      	mov	r3, r9
 8016e04:	f7e9 fe08 	bl	8000a18 <__aeabi_dcmpge>
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	f43f aef1 	beq.w	8016bf0 <__ieee754_pow+0x770>
 8016e0e:	e7e7      	b.n	8016de0 <__ieee754_pow+0x960>
 8016e10:	f04f 0a00 	mov.w	sl, #0
 8016e14:	e718      	b.n	8016c48 <__ieee754_pow+0x7c8>
 8016e16:	4621      	mov	r1, r4
 8016e18:	e7d4      	b.n	8016dc4 <__ieee754_pow+0x944>
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	491a      	ldr	r1, [pc, #104]	; (8016e88 <__ieee754_pow+0xa08>)
 8016e1e:	f7ff bb8f 	b.w	8016540 <__ieee754_pow+0xc0>
 8016e22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e26:	f7ff bb8b 	b.w	8016540 <__ieee754_pow+0xc0>
 8016e2a:	4630      	mov	r0, r6
 8016e2c:	4639      	mov	r1, r7
 8016e2e:	f7ff bb87 	b.w	8016540 <__ieee754_pow+0xc0>
 8016e32:	4693      	mov	fp, r2
 8016e34:	f7ff bb98 	b.w	8016568 <__ieee754_pow+0xe8>
 8016e38:	00000000 	.word	0x00000000
 8016e3c:	3fe62e43 	.word	0x3fe62e43
 8016e40:	fefa39ef 	.word	0xfefa39ef
 8016e44:	3fe62e42 	.word	0x3fe62e42
 8016e48:	0ca86c39 	.word	0x0ca86c39
 8016e4c:	be205c61 	.word	0xbe205c61
 8016e50:	72bea4d0 	.word	0x72bea4d0
 8016e54:	3e663769 	.word	0x3e663769
 8016e58:	c5d26bf1 	.word	0xc5d26bf1
 8016e5c:	3ebbbd41 	.word	0x3ebbbd41
 8016e60:	af25de2c 	.word	0xaf25de2c
 8016e64:	3f11566a 	.word	0x3f11566a
 8016e68:	16bebd93 	.word	0x16bebd93
 8016e6c:	3f66c16c 	.word	0x3f66c16c
 8016e70:	5555553e 	.word	0x5555553e
 8016e74:	3fc55555 	.word	0x3fc55555
 8016e78:	c2f8f359 	.word	0xc2f8f359
 8016e7c:	01a56e1f 	.word	0x01a56e1f
 8016e80:	3fe00000 	.word	0x3fe00000
 8016e84:	000fffff 	.word	0x000fffff
 8016e88:	3ff00000 	.word	0x3ff00000
 8016e8c:	4090cbff 	.word	0x4090cbff
 8016e90:	3f6f3400 	.word	0x3f6f3400
 8016e94:	652b82fe 	.word	0x652b82fe
 8016e98:	3c971547 	.word	0x3c971547

08016e9c <__ieee754_sqrt>:
 8016e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea0:	4955      	ldr	r1, [pc, #340]	; (8016ff8 <__ieee754_sqrt+0x15c>)
 8016ea2:	ec55 4b10 	vmov	r4, r5, d0
 8016ea6:	43a9      	bics	r1, r5
 8016ea8:	462b      	mov	r3, r5
 8016eaa:	462a      	mov	r2, r5
 8016eac:	d112      	bne.n	8016ed4 <__ieee754_sqrt+0x38>
 8016eae:	ee10 2a10 	vmov	r2, s0
 8016eb2:	ee10 0a10 	vmov	r0, s0
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	f7e9 fb28 	bl	800050c <__aeabi_dmul>
 8016ebc:	4602      	mov	r2, r0
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	4629      	mov	r1, r5
 8016ec4:	f7e9 f96c 	bl	80001a0 <__adddf3>
 8016ec8:	4604      	mov	r4, r0
 8016eca:	460d      	mov	r5, r1
 8016ecc:	ec45 4b10 	vmov	d0, r4, r5
 8016ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed4:	2d00      	cmp	r5, #0
 8016ed6:	ee10 0a10 	vmov	r0, s0
 8016eda:	4621      	mov	r1, r4
 8016edc:	dc0f      	bgt.n	8016efe <__ieee754_sqrt+0x62>
 8016ede:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016ee2:	4330      	orrs	r0, r6
 8016ee4:	d0f2      	beq.n	8016ecc <__ieee754_sqrt+0x30>
 8016ee6:	b155      	cbz	r5, 8016efe <__ieee754_sqrt+0x62>
 8016ee8:	ee10 2a10 	vmov	r2, s0
 8016eec:	4620      	mov	r0, r4
 8016eee:	4629      	mov	r1, r5
 8016ef0:	f7e9 f954 	bl	800019c <__aeabi_dsub>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	f7e9 fc32 	bl	8000760 <__aeabi_ddiv>
 8016efc:	e7e4      	b.n	8016ec8 <__ieee754_sqrt+0x2c>
 8016efe:	151b      	asrs	r3, r3, #20
 8016f00:	d073      	beq.n	8016fea <__ieee754_sqrt+0x14e>
 8016f02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016f06:	07dd      	lsls	r5, r3, #31
 8016f08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016f0c:	bf48      	it	mi
 8016f0e:	0fc8      	lsrmi	r0, r1, #31
 8016f10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016f14:	bf44      	itt	mi
 8016f16:	0049      	lslmi	r1, r1, #1
 8016f18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016f1c:	2500      	movs	r5, #0
 8016f1e:	1058      	asrs	r0, r3, #1
 8016f20:	0fcb      	lsrs	r3, r1, #31
 8016f22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016f26:	0049      	lsls	r1, r1, #1
 8016f28:	2316      	movs	r3, #22
 8016f2a:	462c      	mov	r4, r5
 8016f2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016f30:	19a7      	adds	r7, r4, r6
 8016f32:	4297      	cmp	r7, r2
 8016f34:	bfde      	ittt	le
 8016f36:	19bc      	addle	r4, r7, r6
 8016f38:	1bd2      	suble	r2, r2, r7
 8016f3a:	19ad      	addle	r5, r5, r6
 8016f3c:	0fcf      	lsrs	r7, r1, #31
 8016f3e:	3b01      	subs	r3, #1
 8016f40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016f44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016f4c:	d1f0      	bne.n	8016f30 <__ieee754_sqrt+0x94>
 8016f4e:	f04f 0c20 	mov.w	ip, #32
 8016f52:	469e      	mov	lr, r3
 8016f54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016f58:	42a2      	cmp	r2, r4
 8016f5a:	eb06 070e 	add.w	r7, r6, lr
 8016f5e:	dc02      	bgt.n	8016f66 <__ieee754_sqrt+0xca>
 8016f60:	d112      	bne.n	8016f88 <__ieee754_sqrt+0xec>
 8016f62:	428f      	cmp	r7, r1
 8016f64:	d810      	bhi.n	8016f88 <__ieee754_sqrt+0xec>
 8016f66:	2f00      	cmp	r7, #0
 8016f68:	eb07 0e06 	add.w	lr, r7, r6
 8016f6c:	da42      	bge.n	8016ff4 <__ieee754_sqrt+0x158>
 8016f6e:	f1be 0f00 	cmp.w	lr, #0
 8016f72:	db3f      	blt.n	8016ff4 <__ieee754_sqrt+0x158>
 8016f74:	f104 0801 	add.w	r8, r4, #1
 8016f78:	1b12      	subs	r2, r2, r4
 8016f7a:	428f      	cmp	r7, r1
 8016f7c:	bf88      	it	hi
 8016f7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016f82:	1bc9      	subs	r1, r1, r7
 8016f84:	4433      	add	r3, r6
 8016f86:	4644      	mov	r4, r8
 8016f88:	0052      	lsls	r2, r2, #1
 8016f8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016f8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016f92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016f96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016f9a:	d1dd      	bne.n	8016f58 <__ieee754_sqrt+0xbc>
 8016f9c:	430a      	orrs	r2, r1
 8016f9e:	d006      	beq.n	8016fae <__ieee754_sqrt+0x112>
 8016fa0:	1c5c      	adds	r4, r3, #1
 8016fa2:	bf13      	iteet	ne
 8016fa4:	3301      	addne	r3, #1
 8016fa6:	3501      	addeq	r5, #1
 8016fa8:	4663      	moveq	r3, ip
 8016faa:	f023 0301 	bicne.w	r3, r3, #1
 8016fae:	106a      	asrs	r2, r5, #1
 8016fb0:	085b      	lsrs	r3, r3, #1
 8016fb2:	07e9      	lsls	r1, r5, #31
 8016fb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016fb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016fbc:	bf48      	it	mi
 8016fbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016fc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016fc6:	461c      	mov	r4, r3
 8016fc8:	e780      	b.n	8016ecc <__ieee754_sqrt+0x30>
 8016fca:	0aca      	lsrs	r2, r1, #11
 8016fcc:	3815      	subs	r0, #21
 8016fce:	0549      	lsls	r1, r1, #21
 8016fd0:	2a00      	cmp	r2, #0
 8016fd2:	d0fa      	beq.n	8016fca <__ieee754_sqrt+0x12e>
 8016fd4:	02d6      	lsls	r6, r2, #11
 8016fd6:	d50a      	bpl.n	8016fee <__ieee754_sqrt+0x152>
 8016fd8:	f1c3 0420 	rsb	r4, r3, #32
 8016fdc:	fa21 f404 	lsr.w	r4, r1, r4
 8016fe0:	1e5d      	subs	r5, r3, #1
 8016fe2:	4099      	lsls	r1, r3
 8016fe4:	4322      	orrs	r2, r4
 8016fe6:	1b43      	subs	r3, r0, r5
 8016fe8:	e78b      	b.n	8016f02 <__ieee754_sqrt+0x66>
 8016fea:	4618      	mov	r0, r3
 8016fec:	e7f0      	b.n	8016fd0 <__ieee754_sqrt+0x134>
 8016fee:	0052      	lsls	r2, r2, #1
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	e7ef      	b.n	8016fd4 <__ieee754_sqrt+0x138>
 8016ff4:	46a0      	mov	r8, r4
 8016ff6:	e7bf      	b.n	8016f78 <__ieee754_sqrt+0xdc>
 8016ff8:	7ff00000 	.word	0x7ff00000

08016ffc <__ieee754_sqrtf>:
 8016ffc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017000:	4770      	bx	lr

08017002 <fabs>:
 8017002:	ec51 0b10 	vmov	r0, r1, d0
 8017006:	ee10 2a10 	vmov	r2, s0
 801700a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801700e:	ec43 2b10 	vmov	d0, r2, r3
 8017012:	4770      	bx	lr

08017014 <finite>:
 8017014:	ee10 3a90 	vmov	r3, s1
 8017018:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801701c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017020:	0fc0      	lsrs	r0, r0, #31
 8017022:	4770      	bx	lr

08017024 <matherr>:
 8017024:	2000      	movs	r0, #0
 8017026:	4770      	bx	lr

08017028 <nan>:
 8017028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017030 <nan+0x8>
 801702c:	4770      	bx	lr
 801702e:	bf00      	nop
 8017030:	00000000 	.word	0x00000000
 8017034:	7ff80000 	.word	0x7ff80000

08017038 <rint>:
 8017038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801703a:	ec51 0b10 	vmov	r0, r1, d0
 801703e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017042:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8017046:	2e13      	cmp	r6, #19
 8017048:	460b      	mov	r3, r1
 801704a:	ee10 4a10 	vmov	r4, s0
 801704e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017052:	dc56      	bgt.n	8017102 <rint+0xca>
 8017054:	2e00      	cmp	r6, #0
 8017056:	da2b      	bge.n	80170b0 <rint+0x78>
 8017058:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801705c:	4302      	orrs	r2, r0
 801705e:	d023      	beq.n	80170a8 <rint+0x70>
 8017060:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017064:	4302      	orrs	r2, r0
 8017066:	4254      	negs	r4, r2
 8017068:	4314      	orrs	r4, r2
 801706a:	0c4b      	lsrs	r3, r1, #17
 801706c:	0b24      	lsrs	r4, r4, #12
 801706e:	045b      	lsls	r3, r3, #17
 8017070:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8017074:	ea44 0103 	orr.w	r1, r4, r3
 8017078:	460b      	mov	r3, r1
 801707a:	492f      	ldr	r1, [pc, #188]	; (8017138 <rint+0x100>)
 801707c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017080:	e9d1 6700 	ldrd	r6, r7, [r1]
 8017084:	4602      	mov	r2, r0
 8017086:	4639      	mov	r1, r7
 8017088:	4630      	mov	r0, r6
 801708a:	f7e9 f889 	bl	80001a0 <__adddf3>
 801708e:	e9cd 0100 	strd	r0, r1, [sp]
 8017092:	463b      	mov	r3, r7
 8017094:	4632      	mov	r2, r6
 8017096:	e9dd 0100 	ldrd	r0, r1, [sp]
 801709a:	f7e9 f87f 	bl	800019c <__aeabi_dsub>
 801709e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80170a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80170a6:	4639      	mov	r1, r7
 80170a8:	ec41 0b10 	vmov	d0, r0, r1
 80170ac:	b003      	add	sp, #12
 80170ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b0:	4a22      	ldr	r2, [pc, #136]	; (801713c <rint+0x104>)
 80170b2:	4132      	asrs	r2, r6
 80170b4:	ea01 0702 	and.w	r7, r1, r2
 80170b8:	4307      	orrs	r7, r0
 80170ba:	d0f5      	beq.n	80170a8 <rint+0x70>
 80170bc:	0852      	lsrs	r2, r2, #1
 80170be:	4011      	ands	r1, r2
 80170c0:	430c      	orrs	r4, r1
 80170c2:	d00b      	beq.n	80170dc <rint+0xa4>
 80170c4:	ea23 0202 	bic.w	r2, r3, r2
 80170c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80170cc:	2e13      	cmp	r6, #19
 80170ce:	fa43 f306 	asr.w	r3, r3, r6
 80170d2:	bf0c      	ite	eq
 80170d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80170d8:	2400      	movne	r4, #0
 80170da:	4313      	orrs	r3, r2
 80170dc:	4916      	ldr	r1, [pc, #88]	; (8017138 <rint+0x100>)
 80170de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80170e2:	4622      	mov	r2, r4
 80170e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80170e8:	4620      	mov	r0, r4
 80170ea:	4629      	mov	r1, r5
 80170ec:	f7e9 f858 	bl	80001a0 <__adddf3>
 80170f0:	e9cd 0100 	strd	r0, r1, [sp]
 80170f4:	4622      	mov	r2, r4
 80170f6:	462b      	mov	r3, r5
 80170f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170fc:	f7e9 f84e 	bl	800019c <__aeabi_dsub>
 8017100:	e7d2      	b.n	80170a8 <rint+0x70>
 8017102:	2e33      	cmp	r6, #51	; 0x33
 8017104:	dd07      	ble.n	8017116 <rint+0xde>
 8017106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801710a:	d1cd      	bne.n	80170a8 <rint+0x70>
 801710c:	ee10 2a10 	vmov	r2, s0
 8017110:	f7e9 f846 	bl	80001a0 <__adddf3>
 8017114:	e7c8      	b.n	80170a8 <rint+0x70>
 8017116:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801711a:	f04f 32ff 	mov.w	r2, #4294967295
 801711e:	40f2      	lsrs	r2, r6
 8017120:	4210      	tst	r0, r2
 8017122:	d0c1      	beq.n	80170a8 <rint+0x70>
 8017124:	0852      	lsrs	r2, r2, #1
 8017126:	4210      	tst	r0, r2
 8017128:	bf1f      	itttt	ne
 801712a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801712e:	ea20 0202 	bicne.w	r2, r0, r2
 8017132:	4134      	asrne	r4, r6
 8017134:	4314      	orrne	r4, r2
 8017136:	e7d1      	b.n	80170dc <rint+0xa4>
 8017138:	08018388 	.word	0x08018388
 801713c:	000fffff 	.word	0x000fffff

08017140 <scalbn>:
 8017140:	b570      	push	{r4, r5, r6, lr}
 8017142:	ec55 4b10 	vmov	r4, r5, d0
 8017146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801714a:	4606      	mov	r6, r0
 801714c:	462b      	mov	r3, r5
 801714e:	b9aa      	cbnz	r2, 801717c <scalbn+0x3c>
 8017150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017154:	4323      	orrs	r3, r4
 8017156:	d03b      	beq.n	80171d0 <scalbn+0x90>
 8017158:	4b31      	ldr	r3, [pc, #196]	; (8017220 <scalbn+0xe0>)
 801715a:	4629      	mov	r1, r5
 801715c:	2200      	movs	r2, #0
 801715e:	ee10 0a10 	vmov	r0, s0
 8017162:	f7e9 f9d3 	bl	800050c <__aeabi_dmul>
 8017166:	4b2f      	ldr	r3, [pc, #188]	; (8017224 <scalbn+0xe4>)
 8017168:	429e      	cmp	r6, r3
 801716a:	4604      	mov	r4, r0
 801716c:	460d      	mov	r5, r1
 801716e:	da12      	bge.n	8017196 <scalbn+0x56>
 8017170:	a327      	add	r3, pc, #156	; (adr r3, 8017210 <scalbn+0xd0>)
 8017172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017176:	f7e9 f9c9 	bl	800050c <__aeabi_dmul>
 801717a:	e009      	b.n	8017190 <scalbn+0x50>
 801717c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017180:	428a      	cmp	r2, r1
 8017182:	d10c      	bne.n	801719e <scalbn+0x5e>
 8017184:	ee10 2a10 	vmov	r2, s0
 8017188:	4620      	mov	r0, r4
 801718a:	4629      	mov	r1, r5
 801718c:	f7e9 f808 	bl	80001a0 <__adddf3>
 8017190:	4604      	mov	r4, r0
 8017192:	460d      	mov	r5, r1
 8017194:	e01c      	b.n	80171d0 <scalbn+0x90>
 8017196:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801719a:	460b      	mov	r3, r1
 801719c:	3a36      	subs	r2, #54	; 0x36
 801719e:	4432      	add	r2, r6
 80171a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80171a4:	428a      	cmp	r2, r1
 80171a6:	dd0b      	ble.n	80171c0 <scalbn+0x80>
 80171a8:	ec45 4b11 	vmov	d1, r4, r5
 80171ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017218 <scalbn+0xd8>
 80171b0:	f000 f83c 	bl	801722c <copysign>
 80171b4:	a318      	add	r3, pc, #96	; (adr r3, 8017218 <scalbn+0xd8>)
 80171b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ba:	ec51 0b10 	vmov	r0, r1, d0
 80171be:	e7da      	b.n	8017176 <scalbn+0x36>
 80171c0:	2a00      	cmp	r2, #0
 80171c2:	dd08      	ble.n	80171d6 <scalbn+0x96>
 80171c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80171cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80171d0:	ec45 4b10 	vmov	d0, r4, r5
 80171d4:	bd70      	pop	{r4, r5, r6, pc}
 80171d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80171da:	da0d      	bge.n	80171f8 <scalbn+0xb8>
 80171dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80171e0:	429e      	cmp	r6, r3
 80171e2:	ec45 4b11 	vmov	d1, r4, r5
 80171e6:	dce1      	bgt.n	80171ac <scalbn+0x6c>
 80171e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017210 <scalbn+0xd0>
 80171ec:	f000 f81e 	bl	801722c <copysign>
 80171f0:	a307      	add	r3, pc, #28	; (adr r3, 8017210 <scalbn+0xd0>)
 80171f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f6:	e7e0      	b.n	80171ba <scalbn+0x7a>
 80171f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171fc:	3236      	adds	r2, #54	; 0x36
 80171fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017206:	4620      	mov	r0, r4
 8017208:	4629      	mov	r1, r5
 801720a:	2200      	movs	r2, #0
 801720c:	4b06      	ldr	r3, [pc, #24]	; (8017228 <scalbn+0xe8>)
 801720e:	e7b2      	b.n	8017176 <scalbn+0x36>
 8017210:	c2f8f359 	.word	0xc2f8f359
 8017214:	01a56e1f 	.word	0x01a56e1f
 8017218:	8800759c 	.word	0x8800759c
 801721c:	7e37e43c 	.word	0x7e37e43c
 8017220:	43500000 	.word	0x43500000
 8017224:	ffff3cb0 	.word	0xffff3cb0
 8017228:	3c900000 	.word	0x3c900000

0801722c <copysign>:
 801722c:	ec51 0b10 	vmov	r0, r1, d0
 8017230:	ee11 0a90 	vmov	r0, s3
 8017234:	ee10 2a10 	vmov	r2, s0
 8017238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801723c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017240:	ea41 0300 	orr.w	r3, r1, r0
 8017244:	ec43 2b10 	vmov	d0, r2, r3
 8017248:	4770      	bx	lr
	...

0801724c <_init>:
 801724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724e:	bf00      	nop
 8017250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017252:	bc08      	pop	{r3}
 8017254:	469e      	mov	lr, r3
 8017256:	4770      	bx	lr

08017258 <_fini>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	bf00      	nop
 801725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801725e:	bc08      	pop	{r3}
 8017260:	469e      	mov	lr, r3
 8017262:	4770      	bx	lr
