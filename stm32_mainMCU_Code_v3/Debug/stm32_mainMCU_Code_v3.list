
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b46c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0801b5b0  0801b5b0  0002b5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c868  0801c868  0002c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c870  0801c870  0002c870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c874  0801c874  0002c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d0  20000004  0801c878  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200002d4  0801cb48  000302d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000370  0801cbe1  00030370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00029f04  20000388  0801cbf2  00030388  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002a28c  0801cbf2  0003a28c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   000736d7  00000000  00000000  000303b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000cb86  00000000  00000000  000a3a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004218  00000000  00000000  000b0610  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003c70  00000000  00000000  000b4828  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002c21b  00000000  00000000  000b8498  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0001a1fc  00000000  00000000  000e46b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000fe8af  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0001101c  00000000  00000000  000fe9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  0010f9bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000388 	.word	0x20000388
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b594 	.word	0x0801b594

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000038c 	.word	0x2000038c
 800017c:	0801b594 	.word	0x0801b594

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 ff76 	bl	8006db0 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fb0b 	bl	80044e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f006 f996 	bl	800721c <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 faf5 	bl	80044e4 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20027a74 	.word	0x20027a74
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 fdab 	bl	8008ab0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f007 fa5d 	bl	8008450 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 faa2 	bl	80044e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027ad8 	.word	0x20027ad8
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f9ec 	bl	80033d0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2002876c 	.word	0x2002876c

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f018 fed6 	bl	8019dc0 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f015 f8c5 	bl	80161ac <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00f fcd6 	bl	80109d4 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00f fe16 	bl	8010c64 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00f f982 	bl	801034c <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f014 fdd2 	bl	8015c04 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f015 f9d6 	bl	8016428 <TL_MM_Init>

  TL_Enable();
 800107c:	f015 f890 	bl	80161a0 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20027b38 	.word	0x20027b38
 800108c:	20027b50 	.word	0x20027b50
 8001090:	0801bae0 	.word	0x0801bae0
 8001094:	08001199 	.word	0x08001199
 8001098:	20027b3c 	.word	0x20027b3c
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00f fd1a 	bl	8010b08 <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00f fd72 	bl	8010bc4 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20027b38 	.word	0x20027b38

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 fd1a 	bl	8005b84 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 fd14 	bl	8005b84 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 fd0d 	bl	8005b84 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0801b5c8 	.word	0x0801b5c8
 8001178:	0801b5ec 	.word	0x0801b5ec
 800117c:	0801b60c 	.word	0x0801b60c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f015 f9c0 	bl	8016508 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f016 fd7a 	bl	8017c80 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f018 fe28 	bl	8019de4 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00f fa2e 	bl	8010608 <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f014 fd46 	bl	8015c3c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00f f96e 	bl	80104a4 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20027b3c 	.word	0x20027b3c

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00f fe43 	bl	8010e6c <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20027b50 	.word	0x20027b50

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00f fdcb 	bl	8010da0 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20027b50 	.word	0x20027b50

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f015 f93d 	bl	80164a0 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f005 fb7c 	bl	800693c <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	200003a4 	.word	0x200003a4

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	200003a4 	.word	0x200003a4

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a70      	ldr	r2, [pc, #448]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00f fcdb 	bl	8010c64 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b6e      	ldr	r3, [pc, #440]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00f fcd3 	bl	8010c64 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b6c      	ldr	r3, [pc, #432]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00f fccb 	bl	8010c64 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f00f fcc3 	bl	8010c64 <osSemaphoreNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 80012e2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	4869      	ldr	r0, [pc, #420]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 80012ec:	f00f fa64 	bl	80107b8 <osTimerNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	4867      	ldr	r0, [pc, #412]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 80012fe:	f00f fa5b 	bl	80107b8 <osTimerNew>
 8001302:	4602      	mov	r2, r0
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 8001306:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001308:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001310:	4618      	mov	r0, r3
 8001312:	f00f fad5 	bl	80108c0 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 8001318:	216c      	movs	r1, #108	; 0x6c
 800131a:	200a      	movs	r0, #10
 800131c:	f00f fdfe 	bl	8010f1c <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001326:	4a61      	ldr	r2, [pc, #388]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 8001328:	2104      	movs	r1, #4
 800132a:	2003      	movs	r0, #3
 800132c:	f00f fdf6 	bl	8010f1c <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001336:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 8001338:	2106      	movs	r1, #6
 800133a:	2004      	movs	r0, #4
 800133c:	f00f fdee 	bl	8010f1c <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001346:	4a5d      	ldr	r2, [pc, #372]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 8001348:	2118      	movs	r1, #24
 800134a:	200a      	movs	r0, #10
 800134c:	f00f fde6 	bl	8010f1c <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 8001358:	2128      	movs	r1, #40	; 0x28
 800135a:	200a      	movs	r0, #10
 800135c:	f00f fdde 	bl	8010f1c <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001366:	4a59      	ldr	r2, [pc, #356]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 8001368:	2110      	movs	r1, #16
 800136a:	200a      	movs	r0, #10
 800136c:	f00f fdd6 	bl	8010f1c <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001376:	4a57      	ldr	r2, [pc, #348]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 8001378:	2118      	movs	r1, #24
 800137a:	2003      	movs	r0, #3
 800137c:	f00f fdce 	bl	8010f1c <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 8001388:	2106      	movs	r1, #6
 800138a:	200a      	movs	r0, #10
 800138c:	f00f fdc6 	bl	8010f1c <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <MX_FREERTOS_Init+0x240>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <MX_FREERTOS_Init+0x244>)
 8001398:	2118      	movs	r1, #24
 800139a:	200a      	movs	r0, #10
 800139c:	f00f fdbe 	bl	8010f1c <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <MX_FREERTOS_Init+0x248>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <MX_FREERTOS_Init+0x24c>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	2001      	movs	r0, #1
 80013ac:	f00f fdb6 	bl	8010f1c <osMessageQueueNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <MX_FREERTOS_Init+0x250>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of msgPasssingUSB_Queue */
  msgPasssingUSB_QueueHandle = osMessageQueueNew (5, 11, &msgPasssingUSB_Queue_attributes);
 80013b6:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <MX_FREERTOS_Init+0x254>)
 80013b8:	210b      	movs	r1, #11
 80013ba:	2005      	movs	r0, #5
 80013bc:	f00f fdae 	bl	8010f1c <osMessageQueueNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <MX_FREERTOS_Init+0x258>)
 80013c4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <MX_FREERTOS_Init+0x25c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	484d      	ldr	r0, [pc, #308]	; (8001500 <MX_FREERTOS_Init+0x260>)
 80013cc:	f00e ffbe 	bl	801034c <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <MX_FREERTOS_Init+0x264>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013d6:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <MX_FREERTOS_Init+0x268>)
 80013d8:	2100      	movs	r1, #0
 80013da:	484c      	ldr	r0, [pc, #304]	; (800150c <MX_FREERTOS_Init+0x26c>)
 80013dc:	f00e ffb6 	bl	801034c <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <MX_FREERTOS_Init+0x270>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <MX_FREERTOS_Init+0x274>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	484b      	ldr	r0, [pc, #300]	; (8001518 <MX_FREERTOS_Init+0x278>)
 80013ec:	f00e ffae 	bl	801034c <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_FREERTOS_Init+0x27c>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <MX_FREERTOS_Init+0x280>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	484a      	ldr	r0, [pc, #296]	; (8001524 <MX_FREERTOS_Init+0x284>)
 80013fc:	f00e ffa6 	bl	801034c <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <MX_FREERTOS_Init+0x288>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 8001406:	4a49      	ldr	r2, [pc, #292]	; (800152c <MX_FREERTOS_Init+0x28c>)
 8001408:	2100      	movs	r1, #0
 800140a:	4849      	ldr	r0, [pc, #292]	; (8001530 <MX_FREERTOS_Init+0x290>)
 800140c:	f00e ff9e 	bl	801034c <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <MX_FREERTOS_Init+0x294>)
 8001414:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <MX_FREERTOS_Init+0x298>)
 8001418:	2100      	movs	r1, #0
 800141a:	4848      	ldr	r0, [pc, #288]	; (800153c <MX_FREERTOS_Init+0x29c>)
 800141c:	f00e ff96 	bl	801034c <osThreadNew>
 8001420:	4602      	mov	r2, r0
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <MX_FREERTOS_Init+0x2a0>)
 8001424:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <MX_FREERTOS_Init+0x2a4>)
 8001428:	2100      	movs	r1, #0
 800142a:	4847      	ldr	r0, [pc, #284]	; (8001548 <MX_FREERTOS_Init+0x2a8>)
 800142c:	f00e ff8e 	bl	801034c <osThreadNew>
 8001430:	4602      	mov	r2, r0
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <MX_FREERTOS_Init+0x2ac>)
 8001434:	601a      	str	r2, [r3, #0]

  /* creation of msgPassingUSB_T */
  msgPassingUSB_THandle = osThreadNew(msgPassingUSB, NULL, &msgPassingUSB_T_attributes);
 8001436:	4a46      	ldr	r2, [pc, #280]	; (8001550 <MX_FREERTOS_Init+0x2b0>)
 8001438:	2100      	movs	r1, #0
 800143a:	4846      	ldr	r0, [pc, #280]	; (8001554 <MX_FREERTOS_Init+0x2b4>)
 800143c:	f00e ff86 	bl	801034c <osThreadNew>
 8001440:	4602      	mov	r2, r0
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <MX_FREERTOS_Init+0x2b8>)
 8001444:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00f fca7 	bl	8010da0 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00f fca1 	bl	8010da0 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800145e:	f7ff fdc3 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0801bd4c 	.word	0x0801bd4c
 800146c:	20027c48 	.word	0x20027c48
 8001470:	0801bd5c 	.word	0x0801bd5c
 8001474:	20028090 	.word	0x20028090
 8001478:	0801bd6c 	.word	0x0801bd6c
 800147c:	20028088 	.word	0x20028088
 8001480:	0801bd7c 	.word	0x0801bd7c
 8001484:	20027c54 	.word	0x20027c54
 8001488:	0801bd2c 	.word	0x0801bd2c
 800148c:	20000c60 	.word	0x20000c60
 8001490:	08003c51 	.word	0x08003c51
 8001494:	20027c34 	.word	0x20027c34
 8001498:	0801bd3c 	.word	0x0801bd3c
 800149c:	080015e1 	.word	0x080015e1
 80014a0:	200280a0 	.word	0x200280a0
 80014a4:	0801bc24 	.word	0x0801bc24
 80014a8:	2002809c 	.word	0x2002809c
 80014ac:	0801bc3c 	.word	0x0801bc3c
 80014b0:	20027c50 	.word	0x20027c50
 80014b4:	0801bc54 	.word	0x0801bc54
 80014b8:	20028080 	.word	0x20028080
 80014bc:	0801bc6c 	.word	0x0801bc6c
 80014c0:	20027c58 	.word	0x20027c58
 80014c4:	0801bc84 	.word	0x0801bc84
 80014c8:	20027c4c 	.word	0x20027c4c
 80014cc:	0801bc9c 	.word	0x0801bc9c
 80014d0:	20027c3c 	.word	0x20027c3c
 80014d4:	0801bcb4 	.word	0x0801bcb4
 80014d8:	20027c60 	.word	0x20027c60
 80014dc:	0801bccc 	.word	0x0801bccc
 80014e0:	20027b40 	.word	0x20027b40
 80014e4:	0801bce4 	.word	0x0801bce4
 80014e8:	20027b44 	.word	0x20027b44
 80014ec:	0801bcfc 	.word	0x0801bcfc
 80014f0:	20027c5c 	.word	0x20027c5c
 80014f4:	0801bd14 	.word	0x0801bd14
 80014f8:	20027c44 	.word	0x20027c44
 80014fc:	0801bb04 	.word	0x0801bb04
 8001500:	0800155d 	.word	0x0800155d
 8001504:	20027c28 	.word	0x20027c28
 8001508:	0801bb28 	.word	0x0801bb28
 800150c:	080040e5 	.word	0x080040e5
 8001510:	20027c38 	.word	0x20027c38
 8001514:	0801bb4c 	.word	0x0801bb4c
 8001518:	080044f5 	.word	0x080044f5
 800151c:	20028084 	.word	0x20028084
 8001520:	0801bb70 	.word	0x0801bb70
 8001524:	08003a55 	.word	0x08003a55
 8001528:	200280a4 	.word	0x200280a4
 800152c:	0801bb94 	.word	0x0801bb94
 8001530:	08003bc1 	.word	0x08003bc1
 8001534:	20028094 	.word	0x20028094
 8001538:	0801bbb8 	.word	0x0801bbb8
 800153c:	08003dc9 	.word	0x08003dc9
 8001540:	2002808c 	.word	0x2002808c
 8001544:	0801bbdc 	.word	0x0801bbdc
 8001548:	080015f5 	.word	0x080015f5
 800154c:	20027c2c 	.word	0x20027c2c
 8001550:	0801bc00 	.word	0x0801bc00
 8001554:	0800156d 	.word	0x0800156d
 8001558:	20027c30 	.word	0x20027c30

0800155c <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f00f f8e3 	bl	8010730 <osDelay>
 800156a:	e7fb      	b.n	8001564 <DefaultTask+0x8>

0800156c <msgPassingUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_msgPassingUSB */
__weak void msgPassingUSB(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af04      	add	r7, sp, #16
 8001572:	6078      	str	r0, [r7, #4]
	struct USB_msgPass receivedPacket;
  /* Infinite loop */
  for(;;)
  {
    while(1){
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <msgPassingUSB+0x64>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f107 010c 	add.w	r1, r7, #12
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	2200      	movs	r2, #0
 8001582:	f00f fdc5 	bl	8011110 <osMessageQueueGet>

    	if(receivedPacket.len == 6){
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d10e      	bne.n	80015aa <msgPassingUSB+0x3e>
//    		  logReceivedMessage.blinkEnabled = Buf[2] - '0';
//    		  logReceivedMessage.tempEnabled = Buf[3] - '0';
//    		  logReceivedMessage.intertialEnabled = Buf[4] - '0';
//    		  logReceivedMessage.positionEnabled  = Buf[5] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 6, &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	2301      	movs	r3, #1
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2303      	movs	r3, #3
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <msgPassingUSB+0x68>)
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <msgPassingUSB+0x6c>)
 80015a2:	2106      	movs	r1, #6
 80015a4:	f017 f896 	bl	80186d4 <APP_THREAD_SendCoapMsg>
 80015a8:	e7e4      	b.n	8001574 <msgPassingUSB+0x8>
    	  }
    	  else if(receivedPacket.len == 1){
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d1e1      	bne.n	8001574 <msgPassingUSB+0x8>
//    		  lightsSimpleReceivedMessage = Buf[0] - '0';

    		  APP_THREAD_SendCoapMsg(receivedPacket.buf, 4, &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	1c58      	adds	r0, r3, #1
 80015b6:	2301      	movs	r3, #1
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2303      	movs	r3, #3
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <msgPassingUSB+0x70>)
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <msgPassingUSB+0x6c>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	f017 f884 	bl	80186d4 <APP_THREAD_SendCoapMsg>
    	osMessageQueueGet(msgPasssingUSB_QueueHandle, &receivedPacket, 0U, osWaitForever);
 80015cc:	e7d2      	b.n	8001574 <msgPassingUSB+0x8>
 80015ce:	bf00      	nop
 80015d0:	20027c44 	.word	0x20027c44
 80015d4:	0801b7bc 	.word	0x0801b7bc
 80015d8:	20028a3c 	.word	0x20028a3c
 80015dc:	0801b7c4 	.word	0x0801b7c4

080015e0 <watchDogReset>:
  /* USER CODE END msgPassingUSB */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END watchDogReset */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	f00f f800 	bl	8010608 <osThreadFlagsWait>
 8001608:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f3      	beq.n	80015fc <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8001614:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <BlinkTask+0x1b0>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2200      	movs	r2, #0
 800161e:	4962      	ldr	r1, [pc, #392]	; (80017a8 <BlinkTask+0x1b4>)
 8001620:	f00f fd76 	bl	8011110 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <BlinkTask+0x1b4>)
 8001626:	2201      	movs	r2, #1
 8001628:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800162a:	4b5e      	ldr	r3, [pc, #376]	; (80017a4 <BlinkTask+0x1b0>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	2200      	movs	r2, #0
 8001632:	495d      	ldr	r1, [pc, #372]	; (80017a8 <BlinkTask+0x1b4>)
 8001634:	f00f fcf8 	bl	8011028 <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001638:	485c      	ldr	r0, [pc, #368]	; (80017ac <BlinkTask+0x1b8>)
 800163a:	f00c fc53 	bl	800dee4 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800163e:	2104      	movs	r1, #4
 8001640:	485a      	ldr	r0, [pc, #360]	; (80017ac <BlinkTask+0x1b8>)
 8001642:	f00c fd05 	bl	800e050 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 8001646:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800164a:	4959      	ldr	r1, [pc, #356]	; (80017b0 <BlinkTask+0x1bc>)
 800164c:	4859      	ldr	r0, [pc, #356]	; (80017b4 <BlinkTask+0x1c0>)
 800164e:	f005 fcf5 	bl	800703c <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 8001652:	f04f 32ff 	mov.w	r2, #4294967295
 8001656:	2100      	movs	r1, #0
 8001658:	2006      	movs	r0, #6
 800165a:	f00e ffd5 	bl	8010608 <osThreadFlagsWait>
 800165e:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d064      	beq.n	8001734 <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <BlinkTask+0x1c4>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d108      	bne.n	800168c <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 800167a:	f005 f95f 	bl	800693c <HAL_GetTick>
 800167e:	ee07 0a90 	vmov	s15, r0
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <BlinkTask+0x1c4>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 800168c:	f005 f956 	bl	800693c <HAL_GetTick>
 8001690:	ee07 0a90 	vmov	s15, r0
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <BlinkTask+0x1c4>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <BlinkTask+0x1c8>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <BlinkTask+0x1cc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e039      	b.n	800172c <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <BlinkTask+0x1cc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2264      	movs	r2, #100	; 0x64
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <BlinkTask+0x1bc>)
 80016c4:	4413      	add	r3, r2
 80016c6:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <BlinkTask+0x1d0>)
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	461a      	mov	r2, r3
 80016d0:	f018 fea6 	bl	801a420 <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <BlinkTask+0x1c4>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <BlinkTask+0x1c8>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 2a90 	vmov	r2, s15
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <BlinkTask+0x1d0>)
 80016ee:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <BlinkTask+0x1d4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <BlinkTask+0x1d0>)
 80016f6:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <BlinkTask+0x1d0>)
 80016fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <BlinkTask+0x1c4>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <BlinkTask+0x1d4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <BlinkTask+0x1d4>)
 8001712:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <BlinkTask+0x1d8>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2200      	movs	r2, #0
 800171c:	4929      	ldr	r1, [pc, #164]	; (80017c4 <BlinkTask+0x1d0>)
 800171e:	f00f fc83 	bl	8011028 <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <BlinkTask+0x1cc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <BlinkTask+0x1cc>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <BlinkTask+0x1cc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d9c1      	bls.n	80016b8 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d089      	beq.n	8001652 <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <BlinkTask+0x1c0>)
 8001740:	f005 fd00 	bl	8007144 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001744:	2104      	movs	r1, #4
 8001746:	4819      	ldr	r0, [pc, #100]	; (80017ac <BlinkTask+0x1b8>)
 8001748:	f00c fccc 	bl	800e0e4 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 800174c:	4817      	ldr	r0, [pc, #92]	; (80017ac <BlinkTask+0x1b8>)
 800174e:	f00c fbf3 	bl	800df38 <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <BlinkTask+0x1c4>)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <BlinkTask+0x1b0>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2200      	movs	r2, #0
 8001764:	4910      	ldr	r1, [pc, #64]	; (80017a8 <BlinkTask+0x1b4>)
 8001766:	f00f fcd3 	bl	8011110 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <BlinkTask+0x1b4>)
 800176c:	2200      	movs	r2, #0
 800176e:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <BlinkTask+0x1b4>)
 8001772:	795b      	ldrb	r3, [r3, #5]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d104      	bne.n	8001782 <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <BlinkTask+0x1dc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f00f fb75 	bl	8010e6c <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <BlinkTask+0x1b0>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	2200      	movs	r2, #0
 800178a:	4907      	ldr	r1, [pc, #28]	; (80017a8 <BlinkTask+0x1b4>)
 800178c:	f00f fc4c 	bl	8011028 <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <BlinkTask+0x1d8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f00f fd2d 	bl	80111f4 <osMessageQueueReset>

					// clear any flags
					osThreadFlagsClear(0x0000000EU);
 800179a:	200e      	movs	r0, #14
 800179c:	f00e fee4 	bl	8010568 <osThreadFlagsClear>

					break;
 80017a0:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80017a2:	e72b      	b.n	80015fc <BlinkTask+0x8>
 80017a4:	20027c5c 	.word	0x20027c5c
 80017a8:	200280ac 	.word	0x200280ac
 80017ac:	200287d0 	.word	0x200287d0
 80017b0:	20000414 	.word	0x20000414
 80017b4:	20027a74 	.word	0x20027a74
 80017b8:	20000bec 	.word	0x20000bec
 80017bc:	20000bf0 	.word	0x20000bf0
 80017c0:	20000be8 	.word	0x20000be8
 80017c4:	200003a8 	.word	0x200003a8
 80017c8:	20000be4 	.word	0x20000be4
 80017cc:	2002809c 	.word	0x2002809c
 80017d0:	20028090 	.word	0x20028090

080017d4 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_ADC_ConvCpltCallback+0x24>)
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_ADC_ConvCpltCallback+0x28>)
 80017e0:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2104      	movs	r1, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00e fe5b 	bl	80104a4 <osThreadFlagsSet>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200280a8 	.word	0x200280a8
 80017fc:	200007fc 	.word	0x200007fc
 8001800:	20027c2c 	.word	0x20027c2c

08001804 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001810:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2104      	movs	r1, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f00e fe43 	bl	80104a4 <osThreadFlagsSet>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200280a8 	.word	0x200280a8
 800182c:	20000414 	.word	0x20000414
 8001830:	20027c2c 	.word	0x20027c2c

08001834 <LL_AHB2_GRP1_EnableClock>:
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_COMP1_Init+0x50>)
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MX_COMP1_Init+0x54>)
 8001870:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_COMP1_Init+0x58>)
 8001876:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_COMP1_Init+0x50>)
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_COMP1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_COMP1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_COMP1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_COMP1_Init+0x50>)
 80018a0:	2231      	movs	r2, #49	; 0x31
 80018a2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_COMP1_Init+0x50>)
 80018a6:	f006 fab3 	bl	8007e10 <HAL_COMP_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f002 fe18 	bl	80044e4 <Error_Handler>
  }

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200280b4 	.word	0x200280b4
 80018bc:	40010200 	.word	0x40010200
 80018c0:	00c00010 	.word	0x00c00010

080018c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_COMP_MspInit+0x5c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d117      	bne.n	8001916 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ffa4 	bl	8001834 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f007 f8d5 	bl	8008ab0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2016      	movs	r0, #22
 800190c:	f006 fd49 	bl	80083a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001910:	2016      	movs	r0, #22
 8001912:	f006 fd60 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010200 	.word	0x40010200

08001924 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02a      	beq.n	8001994 <process_pulse_lengths+0x70>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d025      	beq.n	8001994 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3302      	adds	r3, #2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	bf8c      	ite	hi
 8001956:	2301      	movhi	r3, #1
 8001958:	2300      	movls	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d10e      	bne.n	8001988 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	005a      	lsls	r2, r3, #1
 8001970:	7efb      	ldrb	r3, [r7, #27]
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <process_pulse_lengths+0xd0>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e002      	b.n	800198e <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 8001988:	7efa      	ldrb	r2, [r7, #27]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db26      	blt.n	80019e8 <process_pulse_lengths+0xc4>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	dc22      	bgt.n	80019e8 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 80019be:	e013      	b.n	80019e8 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	69f9      	ldr	r1, [r7, #28]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4291      	cmp	r1, r2
 80019d8:	d101      	bne.n	80019de <process_pulse_lengths+0xba>
 80019da:	2201      	movs	r2, #1
 80019dc:	e001      	b.n	80019e2 <process_pulse_lengths+0xbe>
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	441a      	add	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	609a      	str	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	0801bd8c 	.word	0x0801bd8c

080019f8 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	dd06      	ble.n	8001a18 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	e001      	b.n	8001a1c <get_phase+0x24>
    } else {
        return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <reset>:

void reset(CyclePhaseClassifier * self) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <reset+0x30>)
 8001a42:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	427a0000 	.word	0x427a0000

08001a5c <LL_AHB1_GRP1_EnableClock>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a92:	2004      	movs	r0, #4
 8001a94:	f7ff ffe2 	bl	8001a5c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ffdf 	bl	8001a5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	200b      	movs	r0, #11
 8001aa4:	f006 fc7d 	bl	80083a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa8:	200b      	movs	r0, #11
 8001aaa:	f006 fc94 	bl	80083d6 <HAL_NVIC_EnableIRQ>

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <IMU_dataAvailable+0x64>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2bff      	cmp	r3, #255	; 0xff
 8001abe:	d00d      	beq.n	8001adc <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <IMU_dataAvailable+0x68>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <IMU_dataAvailable+0x64>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f007 f95f 	bl	8008d90 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <IMU_dataAvailable+0x28>
			return (false);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e01b      	b.n	8001b14 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001adc:	f000 fba8 	bl	8002230 <IMU_receivePacket>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d015      	beq.n	8001b12 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <IMU_dataAvailable+0x6c>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	2203      	movs	r2, #3
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d107      	bne.n	8001b00 <IMU_dataAvailable+0x4c>
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <IMU_dataAvailable+0x70>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2bfb      	cmp	r3, #251	; 0xfb
 8001af6:	d103      	bne.n	8001b00 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001af8:	f000 f832 	bl	8001b60 <IMU_parseInputReport>
			return (true);
 8001afc:	2301      	movs	r3, #1
 8001afe:	e009      	b.n	8001b14 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <IMU_dataAvailable+0x6c>)
 8001b02:	789b      	ldrb	r3, [r3, #2]
 8001b04:	2202      	movs	r2, #2
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d103      	bne.n	8001b12 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001b0a:	f000 f80d 	bl	8001b28 <IMU_parseCommandReport>
			return (true);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20028136 	.word	0x20028136
 8001b1c:	200281fc 	.word	0x200281fc
 8001b20:	200280e4 	.word	0x200280e4
 8001b24:	20028174 	.word	0x20028174

08001b28 <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <IMU_parseCommandReport+0x30>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2bf1      	cmp	r3, #241	; 0xf1
 8001b34:	d109      	bne.n	8001b4a <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <IMU_parseCommandReport+0x30>)
 8001b38:	789b      	ldrb	r3, [r3, #2]
 8001b3a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d103      	bne.n	8001b4a <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <IMU_parseCommandReport+0x30>)
 8001b44:	795a      	ldrb	r2, [r3, #5]
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <IMU_parseCommandReport+0x34>)
 8001b48:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20028174 	.word	0x20028174
 8001b5c:	20028227 	.word	0x20028227

08001b60 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001b66:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <IMU_parseInputReport+0x260>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b94      	ldr	r3, [pc, #592]	; (8001dc0 <IMU_parseInputReport+0x260>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b78:	8a3b      	ldrh	r3, [r7, #16]
 8001b7a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b7e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b80:	8a3b      	ldrh	r3, [r7, #16]
 8001b82:	3b04      	subs	r3, #4
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b88:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	061a      	lsls	r2, r3, #24
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001b90:	78db      	ldrb	r3, [r3, #3]
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	4a89      	ldr	r2, [pc, #548]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001ba0:	7852      	ldrb	r2, [r2, #1]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	4a88      	ldr	r2, [pc, #544]	; (8001dc8 <IMU_parseInputReport+0x268>)
 8001ba6:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001ba8:	4b86      	ldr	r3, [pc, #536]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001baa:	79db      	ldrb	r3, [r3, #7]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001bb2:	4b84      	ldr	r3, [pc, #528]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001bb4:	7a9b      	ldrb	r3, [r3, #10]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001bbc:	7a5b      	ldrb	r3, [r3, #9]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001bc8:	7b1b      	ldrb	r3, [r3, #12]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001bd0:	7adb      	ldrb	r3, [r3, #11]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001bdc:	7b9b      	ldrb	r3, [r3, #14]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001be4:	7b5b      	ldrb	r3, [r3, #13]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001bf6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bfa:	3b05      	subs	r3, #5
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	dd09      	ble.n	8001c14 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001c00:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c02:	7c1b      	ldrb	r3, [r3, #16]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c0a:	7bdb      	ldrb	r3, [r3, #15]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001c14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c18:	3b05      	subs	r3, #5
 8001c1a:	2b0b      	cmp	r3, #11
 8001c1c:	dd09      	ble.n	8001c32 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c20:	7c9b      	ldrb	r3, [r3, #18]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c28:	7c5b      	ldrb	r3, [r3, #17]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001c32:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10d      	bne.n	8001c56 <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <IMU_parseInputReport+0x26c>)
 8001c40:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001c42:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <IMU_parseInputReport+0x270>)
 8001c44:	89bb      	ldrh	r3, [r7, #12]
 8001c46:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001c48:	4a62      	ldr	r2, [pc, #392]	; (8001dd4 <IMU_parseInputReport+0x274>)
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001c4e:	4a62      	ldr	r2, [pc, #392]	; (8001dd8 <IMU_parseInputReport+0x278>)
 8001c50:	893b      	ldrh	r3, [r7, #8]
 8001c52:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c54:	e16a      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c58:	795b      	ldrb	r3, [r3, #5]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d10d      	bne.n	8001c7a <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <IMU_parseInputReport+0x27c>)
 8001c64:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001c66:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <IMU_parseInputReport+0x280>)
 8001c68:	89bb      	ldrh	r3, [r7, #12]
 8001c6a:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001c6c:	4a5d      	ldr	r2, [pc, #372]	; (8001de4 <IMU_parseInputReport+0x284>)
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001c72:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <IMU_parseInputReport+0x288>)
 8001c74:	893b      	ldrh	r3, [r7, #8]
 8001c76:	8013      	strh	r3, [r2, #0]
}
 8001c78:	e158      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c7a:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d10d      	bne.n	8001c9e <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b59      	ldr	r3, [pc, #356]	; (8001dec <IMU_parseInputReport+0x28c>)
 8001c88:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c8a:	4a59      	ldr	r2, [pc, #356]	; (8001df0 <IMU_parseInputReport+0x290>)
 8001c8c:	89bb      	ldrh	r3, [r7, #12]
 8001c8e:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <IMU_parseInputReport+0x294>)
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <IMU_parseInputReport+0x298>)
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	8013      	strh	r3, [r2, #0]
}
 8001c9c:	e146      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001ca0:	795b      	ldrb	r3, [r3, #5]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d10d      	bne.n	8001cc2 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <IMU_parseInputReport+0x29c>)
 8001cac:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001cae:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <IMU_parseInputReport+0x2a0>)
 8001cb0:	89bb      	ldrh	r3, [r7, #12]
 8001cb2:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001cb4:	4a53      	ldr	r2, [pc, #332]	; (8001e04 <IMU_parseInputReport+0x2a4>)
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <IMU_parseInputReport+0x2a8>)
 8001cbc:	893b      	ldrh	r3, [r7, #8]
 8001cbe:	8013      	strh	r3, [r2, #0]
}
 8001cc0:	e134      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001cc4:	795b      	ldrb	r3, [r3, #5]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d003      	beq.n	8001cd2 <IMU_parseInputReport+0x172>
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d166      	bne.n	8001da0 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001cd2:	f004 fe33 	bl	800693c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001cda:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001cdc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <IMU_parseInputReport+0x2b0>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f964 	bl	8001fb8 <IMU_qToFloat>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001cfa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <IMU_parseInputReport+0x2b0>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f000 f955 	bl	8001fb8 <IMU_qToFloat>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001d14:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001d18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <IMU_parseInputReport+0x2b0>)
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f000 f946 	bl	8001fb8 <IMU_qToFloat>
 8001d2c:	eef0 7a40 	vmov.f32	s15, s0
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001d32:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001d36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <IMU_parseInputReport+0x2b0>)
 8001d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 f937 	bl	8001fb8 <IMU_qToFloat>
 8001d4a:	eef0 7a40 	vmov.f32	s15, s0
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001d50:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001d54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d58:	210c      	movs	r1, #12
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f92c 	bl	8001fb8 <IMU_qToFloat>
 8001d60:	eef0 7a40 	vmov.f32	s15, s0
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001d66:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <IMU_parseInputReport+0x2b4>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	4926      	ldr	r1, [pc, #152]	; (8001e0c <IMU_parseInputReport+0x2ac>)
 8001d74:	f00f f958 	bl	8011028 <osMessageQueuePut>
		quatAccuracy = status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <IMU_parseInputReport+0x2b8>)
 8001d7e:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <IMU_parseInputReport+0x2bc>)
 8001d82:	89bb      	ldrh	r3, [r7, #12]
 8001d84:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <IMU_parseInputReport+0x2c0>)
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <IMU_parseInputReport+0x2c4>)
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <IMU_parseInputReport+0x2c8>)
 8001d94:	8afb      	ldrh	r3, [r7, #22]
 8001d96:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <IMU_parseInputReport+0x2cc>)
 8001d9a:	8abb      	ldrh	r3, [r7, #20]
 8001d9c:	8013      	strh	r3, [r2, #0]
}
 8001d9e:	e0c5      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <IMU_parseInputReport+0x264>)
 8001da2:	795b      	ldrb	r3, [r3, #5]
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d147      	bne.n	8001e38 <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001da8:	f004 fdc8 	bl	800693c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <IMU_parseInputReport+0x2d0>)
 8001db0:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <IMU_parseInputReport+0x2d0>)
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <IMU_parseInputReport+0x2d4>)
 8001dba:	893b      	ldrh	r3, [r7, #8]
 8001dbc:	8013      	strh	r3, [r2, #0]
}
 8001dbe:	e0b5      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
 8001dc0:	200280e4 	.word	0x200280e4
 8001dc4:	20028174 	.word	0x20028174
 8001dc8:	20028100 	.word	0x20028100
 8001dcc:	2002823c 	.word	0x2002823c
 8001dd0:	20028224 	.word	0x20028224
 8001dd4:	20028240 	.word	0x20028240
 8001dd8:	2002813c 	.word	0x2002813c
 8001ddc:	20028138 	.word	0x20028138
 8001de0:	2002810a 	.word	0x2002810a
 8001de4:	20028228 	.word	0x20028228
 8001de8:	20028166 	.word	0x20028166
 8001dec:	20028168 	.word	0x20028168
 8001df0:	2002816a 	.word	0x2002816a
 8001df4:	20028132 	.word	0x20028132
 8001df8:	20028130 	.word	0x20028130
 8001dfc:	200280e8 	.word	0x200280e8
 8001e00:	20028134 	.word	0x20028134
 8001e04:	2002822a 	.word	0x2002822a
 8001e08:	2002813a 	.word	0x2002813a
 8001e0c:	2002814c 	.word	0x2002814c
 8001e10:	20000004 	.word	0x20000004
 8001e14:	20027c60 	.word	0x20027c60
 8001e18:	20028106 	.word	0x20028106
 8001e1c:	2002823e 	.word	0x2002823e
 8001e20:	20028164 	.word	0x20028164
 8001e24:	200280e0 	.word	0x200280e0
 8001e28:	200280fc 	.word	0x200280fc
 8001e2c:	2002813e 	.word	0x2002813e
 8001e30:	200280ec 	.word	0x200280ec
 8001e34:	20028242 	.word	0x20028242
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001e38:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e3a:	795b      	ldrb	r3, [r3, #5]
 8001e3c:	2b13      	cmp	r3, #19
 8001e3e:	d10d      	bne.n	8001e5c <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001e40:	f004 fd7c 	bl	800693c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <IMU_parseInputReport+0x3d8>)
 8001e48:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e4c:	7a5a      	ldrb	r2, [r3, #9]
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <IMU_parseInputReport+0x3d8>)
 8001e50:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e54:	7a5a      	ldrb	r2, [r3, #9]
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <IMU_parseInputReport+0x3dc>)
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	e067      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e5e:	795b      	ldrb	r3, [r3, #5]
 8001e60:	2b1e      	cmp	r3, #30
 8001e62:	d12b      	bne.n	8001ebc <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001e64:	f004 fd6a 	bl	800693c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <IMU_parseInputReport+0x3e0>)
 8001e6c:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e6e:	2300      	movs	r3, #0
 8001e70:	74fb      	strb	r3, [r7, #19]
 8001e72:	e00c      	b.n	8001e8e <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	f103 020b 	add.w	r2, r3, #11
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <IMU_parseInputReport+0x3e4>)
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	440b      	add	r3, r1
 8001e82:	492c      	ldr	r1, [pc, #176]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e84:	5c8a      	ldrb	r2, [r1, r2]
 8001e86:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	74fb      	strb	r3, [r7, #19]
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d9ef      	bls.n	8001e74 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001e96:	7a9a      	ldrb	r2, [r3, #10]
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <IMU_parseInputReport+0x3e8>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <IMU_parseInputReport+0x3e4>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <IMU_parseInputReport+0x3e0>)
 8001ea2:	6810      	ldr	r0, [r2, #0]
 8001ea4:	6851      	ldr	r1, [r2, #4]
 8001ea6:	c303      	stmia	r3!, {r0, r1}
 8001ea8:	7a12      	ldrb	r2, [r2, #8]
 8001eaa:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <IMU_parseInputReport+0x3ec>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4922      	ldr	r1, [pc, #136]	; (8001f40 <IMU_parseInputReport+0x3e0>)
 8001eb6:	f00f f8b7 	bl	8011028 <osMessageQueuePut>
}
 8001eba:	e037      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	2b14      	cmp	r3, #20
 8001ec2:	d109      	bne.n	8001ed8 <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <IMU_parseInputReport+0x3f0>)
 8001ec6:	89bb      	ldrh	r3, [r7, #12]
 8001ec8:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001eca:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <IMU_parseInputReport+0x3f4>)
 8001ecc:	897b      	ldrh	r3, [r7, #10]
 8001ece:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <IMU_parseInputReport+0x3f8>)
 8001ed2:	893b      	ldrh	r3, [r7, #8]
 8001ed4:	8013      	strh	r3, [r2, #0]
}
 8001ed6:	e029      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001eda:	795b      	ldrb	r3, [r3, #5]
 8001edc:	2b15      	cmp	r3, #21
 8001ede:	d109      	bne.n	8001ef4 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <IMU_parseInputReport+0x3fc>)
 8001ee2:	89bb      	ldrh	r3, [r7, #12]
 8001ee4:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <IMU_parseInputReport+0x400>)
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <IMU_parseInputReport+0x404>)
 8001eee:	893b      	ldrh	r3, [r7, #8]
 8001ef0:	8013      	strh	r3, [r2, #0]
}
 8001ef2:	e01b      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001ef6:	795b      	ldrb	r3, [r3, #5]
 8001ef8:	2b16      	cmp	r3, #22
 8001efa:	d109      	bne.n	8001f10 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <IMU_parseInputReport+0x408>)
 8001efe:	89bb      	ldrh	r3, [r7, #12]
 8001f00:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001f02:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <IMU_parseInputReport+0x40c>)
 8001f04:	897b      	ldrh	r3, [r7, #10]
 8001f06:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <IMU_parseInputReport+0x410>)
 8001f0a:	893b      	ldrh	r3, [r7, #8]
 8001f0c:	8013      	strh	r3, [r2, #0]
}
 8001f0e:	e00d      	b.n	8001f2c <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001f12:	795b      	ldrb	r3, [r3, #5]
 8001f14:	2bf1      	cmp	r3, #241	; 0xf1
 8001f16:	d109      	bne.n	8001f2c <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001f1a:	79db      	ldrb	r3, [r3, #7]
 8001f1c:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b07      	cmp	r3, #7
 8001f22:	d103      	bne.n	8001f2c <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <IMU_parseInputReport+0x3d4>)
 8001f26:	7a9a      	ldrb	r2, [r3, #10]
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <IMU_parseInputReport+0x414>)
 8001f2a:	701a      	strb	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20028174 	.word	0x20028174
 8001f38:	200280f4 	.word	0x200280f4
 8001f3c:	2002816e 	.word	0x2002816e
 8001f40:	2002822c 	.word	0x2002822c
 8001f44:	20028148 	.word	0x20028148
 8001f48:	20028226 	.word	0x20028226
 8001f4c:	20027c3c 	.word	0x20027c3c
 8001f50:	2002816c 	.word	0x2002816c
 8001f54:	20028146 	.word	0x20028146
 8001f58:	200281f6 	.word	0x200281f6
 8001f5c:	200280ea 	.word	0x200280ea
 8001f60:	20028170 	.word	0x20028170
 8001f64:	20028140 	.word	0x20028140
 8001f68:	20028144 	.word	0x20028144
 8001f6c:	20028142 	.word	0x20028142
 8001f70:	20028108 	.word	0x20028108
 8001f74:	20028227 	.word	0x20028227

08001f78 <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <IMU_softReset+0x3c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f82:	2301      	movs	r3, #1
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f9fa 	bl	8002380 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f8c:	20c8      	movs	r0, #200	; 0xc8
 8001f8e:	f004 fced 	bl	800696c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f92:	bf00      	nop
 8001f94:	f000 f94c 	bl	8002230 <IMU_receivePacket>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1fa      	bne.n	8001f94 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f9e:	20c8      	movs	r0, #200	; 0xc8
 8001fa0:	f004 fce4 	bl	800696c <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001fa4:	bf00      	nop
 8001fa6:	f000 f943 	bl	8002230 <IMU_receivePacket>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1fa      	bne.n	8001fa6 <IMU_softReset+0x2e>
		;
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20028174 	.word	0x20028174

08001fb8 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	425b      	negs	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa2b 	bl	8000438 <__aeabi_i2d>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	ec44 3b11 	vmov	d1, r3, r4
 8001fea:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002030 <IMU_qToFloat+0x78>
 8001fee:	f018 fa2b 	bl	801a448 <pow>
 8001ff2:	ec56 5b10 	vmov	r5, r6, d0
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7fe fa30 	bl	800045c <__aeabi_f2d>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	4628      	mov	r0, r5
 8002006:	4631      	mov	r1, r6
 8002008:	f7fe fa80 	bl	800050c <__aeabi_dmul>
 800200c:	4603      	mov	r3, r0
 800200e:	460c      	mov	r4, r1
 8002010:	4618      	mov	r0, r3
 8002012:	4621      	mov	r1, r4
 8002014:	f7fe fd2a 	bl	8000a6c <__aeabi_d2f>
 8002018:	4603      	mov	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	ee07 3a90 	vmov	s15, r3
}
 8002022:	eeb0 0a67 	vmov.f32	s0, s15
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202c:	f3af 8000 	nop.w
 8002030:	00000000 	.word	0x00000000
 8002034:	40000000 	.word	0x40000000

08002038 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4619      	mov	r1, r3
 8002046:	2005      	movs	r0, #5
 8002048:	f000 f81a 	bl	8002080 <IMU_setFeatureCommand_2>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <IMU_enableActivityClassifier+0x28>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4619      	mov	r1, r3
 800206e:	201e      	movs	r0, #30
 8002070:	f000 f818 	bl	80020a4 <IMU_setFeatureCommand_3>
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20028148 	.word	0x20028148

08002080 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002090:	88b9      	ldrh	r1, [r7, #4]
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2200      	movs	r2, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f804 	bl	80020a4 <IMU_setFeatureCommand_3>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	603a      	str	r2, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	460b      	mov	r3, r1
 80020b2:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020c2:	22fd      	movs	r2, #253	; 0xfd
 80020c4:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020e4:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	121b      	asrs	r3, r3, #8
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020ee:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	141b      	asrs	r3, r3, #16
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 80020f8:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0e1b      	lsrs	r3, r3, #24
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002102:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002106:	2200      	movs	r2, #0
 8002108:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 800210c:	2200      	movs	r2, #0
 800210e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002112:	2200      	movs	r2, #0
 8002114:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002118:	2200      	movs	r2, #0
 800211a:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002122:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 800212c:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002136:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	0e1b      	lsrs	r3, r3, #24
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <IMU_setFeatureCommand_3+0xb0>)
 8002140:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 8002142:	2302      	movs	r3, #2
 8002144:	2111      	movs	r1, #17
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f91a 	bl	8002380 <IMU_sendPacket>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20028174 	.word	0x20028174

08002158 <IMU_sendTareNow>:
	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
}

void IMU_sendTareNow(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <IMU_sendTareNow+0x64>)
 800215e:	22f2      	movs	r2, #242	; 0xf2
 8002160:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <IMU_sendTareNow+0x68>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	b2d1      	uxtb	r1, r2
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <IMU_sendTareNow+0x68>)
 800216c:	7011      	strb	r1, [r2, #0]
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <IMU_sendTareNow+0x64>)
 8002170:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <IMU_sendTareNow+0x64>)
 8002174:	2203      	movs	r2, #3
 8002176:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0; // Tare Now
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <IMU_sendTareNow+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0x07; // All 3 axes
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <IMU_sendTareNow+0x64>)
 8002180:	2207      	movs	r2, #7
 8002182:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0; // Rotation Vector
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <IMU_sendTareNow+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	715a      	strb	r2, [r3, #5]


	// RESERVED
	shtpData[6] = 0;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <IMU_sendTareNow+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <IMU_sendTareNow+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <IMU_sendTareNow+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <IMU_sendTareNow+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <IMU_sendTareNow+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <IMU_sendTareNow+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 80021ae:	2302      	movs	r3, #2
 80021b0:	210c      	movs	r1, #12
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f8e4 	bl	8002380 <IMU_sendPacket>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20028174 	.word	0x20028174
 80021c0:	20000bfa 	.word	0x20000bfa

080021c4 <IMU_sendPersistTare>:

void IMU_sendPersistTare(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021ca:	22f2      	movs	r2, #242	; 0xf2
 80021cc:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <IMU_sendPersistTare+0x68>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	b2d1      	uxtb	r1, r2
 80021d6:	4a15      	ldr	r2, [pc, #84]	; (800222c <IMU_sendPersistTare+0x68>)
 80021d8:	7011      	strb	r1, [r2, #0]
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021dc:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0x03;					   // TareCommand
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0x01; // Persist Tare
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	70da      	strb	r2, [r3, #3]


	// RESERVED
	shtpData[4] = 0;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	711a      	strb	r2, [r3, #4]
	shtpData[5] = 0;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	715a      	strb	r2, [r3, #5]
	shtpData[6] = 0;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	719a      	strb	r2, [r3, #6]
	shtpData[7] = 0;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <IMU_sendPersistTare+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	71da      	strb	r2, [r3, #7]
	shtpData[8] = 0;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <IMU_sendPersistTare+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <IMU_sendPersistTare+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <IMU_sendPersistTare+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <IMU_sendPersistTare+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	72da      	strb	r2, [r3, #11]

	//Transmit packet on channel 2, 12 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 12);
 800221a:	2302      	movs	r3, #2
 800221c:	210c      	movs	r1, #12
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f8ae 	bl	8002380 <IMU_sendPacket>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20028174 	.word	0x20028174
 800222c:	20000bfa 	.word	0x20000bfa

08002230 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <IMU_receivePacket+0x90>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <IMU_receivePacket+0x94>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f006 fda4 	bl	8008d90 <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <IMU_receivePacket+0x22>
		return (false);
 800224e:	2300      	movs	r3, #0
 8002250:	e031      	b.n	80022b6 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <IMU_receivePacket+0x98>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f04f 31ff 	mov.w	r1, #4294967295
 800225a:	4618      	mov	r0, r3
 800225c:	f00e fda0 	bl	8010da0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <IMU_receivePacket+0x9c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b299      	uxth	r1, r3
 8002266:	2364      	movs	r3, #100	; 0x64
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2304      	movs	r3, #4
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <IMU_receivePacket+0xa0>)
 800226e:	4819      	ldr	r0, [pc, #100]	; (80022d4 <IMU_receivePacket+0xa4>)
 8002270:	f006 ff74 	bl	800915c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <IMU_receivePacket+0x98>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f00e fdf7 	bl	8010e6c <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <IMU_receivePacket+0xa0>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b21a      	sxth	r2, r3
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <IMU_receivePacket+0xa0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002296:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 80022a0:	2300      	movs	r3, #0
 80022a2:	e008      	b.n	80022b6 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	3b04      	subs	r3, #4
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f812 	bl	80022d8 <IMU_getData>


	return (true); //We're done!
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200281fc 	.word	0x200281fc
 80022c4:	20028136 	.word	0x20028136
 80022c8:	20027c48 	.word	0x20027c48
 80022cc:	20000006 	.word	0x20000006
 80022d0:	200280e4 	.word	0x200280e4
 80022d4:	20028244 	.word	0x20028244

080022d8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80022e2:	2300      	movs	r3, #0
 80022e4:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80022e6:	e036      	b.n	8002356 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80022ec:	89bb      	ldrh	r3, [r7, #12]
 80022ee:	2b1c      	cmp	r3, #28
 80022f0:	d901      	bls.n	80022f6 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80022f2:	231c      	movs	r3, #28
 80022f4:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <IMU_getData+0x90>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f04f 31ff 	mov.w	r1, #4294967295
 80022fe:	4618      	mov	r0, r3
 8002300:	f00e fd4e 	bl	8010da0 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <IMU_getData+0x94>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b299      	uxth	r1, r3
 800230a:	89bb      	ldrh	r3, [r7, #12]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3304      	adds	r3, #4
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b29a      	uxth	r2, r3
 8002314:	2364      	movs	r3, #100	; 0x64
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	4a15      	ldr	r2, [pc, #84]	; (8002370 <IMU_getData+0x98>)
 800231c:	4815      	ldr	r0, [pc, #84]	; (8002374 <IMU_getData+0x9c>)
 800231e:	f006 ff1d 	bl	800915c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <IMU_getData+0x90>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f00e fda0 	bl	8010e6c <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800232c:	89fa      	ldrh	r2, [r7, #14]
 800232e:	89bb      	ldrh	r3, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	2b7f      	cmp	r3, #127	; 0x7f
 8002334:	dc07      	bgt.n	8002346 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <IMU_getData+0xa0>)
 800233a:	4413      	add	r3, r2
 800233c:	89ba      	ldrh	r2, [r7, #12]
 800233e:	490f      	ldr	r1, [pc, #60]	; (800237c <IMU_getData+0xa4>)
 8002340:	4618      	mov	r0, r3
 8002342:	f018 f86d 	bl	801a420 <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8002346:	89fa      	ldrh	r2, [r7, #14]
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	89bb      	ldrh	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1c5      	bne.n	80022e8 <IMU_getData+0x10>
	}
	return (true); //Done!
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20027c48 	.word	0x20027c48
 800236c:	20000006 	.word	0x20000006
 8002370:	20000bfc 	.word	0x20000bfc
 8002374:	20028244 	.word	0x20028244
 8002378:	20028174 	.word	0x20028174
 800237c:	20000c00 	.word	0x20000c00

08002380 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	460a      	mov	r2, r1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002390:	79bb      	ldrb	r3, [r7, #6]
 8002392:	3304      	adds	r3, #4
 8002394:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <IMU_sendPacket+0x84>)
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	121b      	asrs	r3, r3, #8
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <IMU_sendPacket+0x84>)
 80023a4:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <IMU_sendPacket+0x84>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <IMU_sendPacket+0x88>)
 80023b0:	5cd2      	ldrb	r2, [r2, r3]
 80023b2:	1c51      	adds	r1, r2, #1
 80023b4:	b2c8      	uxtb	r0, r1
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <IMU_sendPacket+0x88>)
 80023b8:	54c8      	strb	r0, [r1, r3]
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <IMU_sendPacket+0x84>)
 80023bc:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4912      	ldr	r1, [pc, #72]	; (800240c <IMU_sendPacket+0x8c>)
 80023c4:	4812      	ldr	r0, [pc, #72]	; (8002410 <IMU_sendPacket+0x90>)
 80023c6:	f018 f82b 	bl	801a420 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <IMU_sendPacket+0x94>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f04f 31ff 	mov.w	r1, #4294967295
 80023d2:	4618      	mov	r0, r3
 80023d4:	f00e fce4 	bl	8010da0 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <IMU_sendPacket+0x98>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b299      	uxth	r1, r3
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <IMU_sendPacket+0x84>)
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <IMU_sendPacket+0x9c>)
 80023ec:	f006 fdc2 	bl	8008f74 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <IMU_sendPacket+0x94>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00e fd39 	bl	8010e6c <osSemaphoreRelease>

	return (true);
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20028200 	.word	0x20028200
 8002408:	20000bf4 	.word	0x20000bf4
 800240c:	20028174 	.word	0x20028174
 8002410:	20028204 	.word	0x20028204
 8002414:	20027c48 	.word	0x20027c48
 8002418:	20000006 	.word	0x20000006
 800241c:	20028244 	.word	0x20028244

08002420 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800243a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800243e:	f011 fa97 	bl	8013970 <eTaskConfirmSleepModeStatus>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002454:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8002456:	e021      	b.n	800249c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d002      	beq.n	8002466 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f869 	bl	8002538 <LpTimerStart>
    LpEnter( );
 8002466:	f000 f8cb 	bl	8002600 <LpEnter>
    if (xExpectedIdleTime != (~0))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d005      	beq.n	800247e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002472:	f000 f8cd 	bl	8002610 <LpGetElapsedTime>
 8002476:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f010 ff93 	bl	80133a4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <vPortSuppressTicksAndSleep+0x88>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <vPortSuppressTicksAndSleep+0x84>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <vPortSuppressTicksAndSleep+0x8c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <vPortSuppressTicksAndSleep+0x90>)
 8002496:	3b01      	subs	r3, #1
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	b662      	cpsie	i
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	e000e010 	.word	0xe000e010
 80024a8:	e000e018 	.word	0xe000e018
 80024ac:	20000c1c 	.word	0x20000c1c
 80024b0:	e000e014 	.word	0xe000e014

080024b4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80024b8:	f000 f828 	bl	800250c <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <vPortSetupTimerInterrupt+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <vPortSetupTimerInterrupt+0x44>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <vPortSetupTimerInterrupt+0x48>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <vPortSetupTimerInterrupt+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <vPortSetupTimerInterrupt+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <vPortSetupTimerInterrupt+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <vPortSetupTimerInterrupt+0x44>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	4a08      	ldr	r2, [pc, #32]	; (8002508 <vPortSetupTimerInterrupt+0x54>)
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <vPortSetupTimerInterrupt+0x4c>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000078 	.word	0x20000078
 80024f8:	10624dd3 	.word	0x10624dd3
 80024fc:	20000c1c 	.word	0x20000c1c
 8002500:	e000e010 	.word	0xe000e010
 8002504:	e000e018 	.word	0xe000e018
 8002508:	e000e014 	.word	0xe000e014

0800250c <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <LpTimerInit+0x14>)
 8002512:	2200      	movs	r2, #0
 8002514:	4903      	ldr	r1, [pc, #12]	; (8002524 <LpTimerInit+0x18>)
 8002516:	2000      	movs	r0, #0
 8002518:	f001 f83a 	bl	8003590 <HW_TS_Create>

  return;
 800251c:	bf00      	nop
}
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08002529 	.word	0x08002529
 8002524:	20000c24 	.word	0x20000c24

08002528 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800252c:	bf00      	nop
}
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002546:	4293      	cmp	r3, r2
 8002548:	d80c      	bhi.n	8002564 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <LpTimerStart+0xb8>)
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <LpTimerStart+0xbc>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	e034      	b.n	80025ce <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <LpTimerStart+0xc0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d81b      	bhi.n	80025a4 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <LpTimerStart+0xbc>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <LpTimerStart+0xc0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d806      	bhi.n	800259c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	e018      	b.n	80025ce <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	e014      	b.n	80025ce <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <LpTimerStart+0xbc>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d805      	bhi.n	80025c8 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <LpTimerStart+0xb8>)
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	e002      	b.n	80025ce <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <LpTimerStart+0xc4>)
 80025d0:	791b      	ldrb	r3, [r3, #4]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f8db 	bl	8003790 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80025da:	f001 f95f 	bl	800389c <HW_TS_RTC_ReadLeftTicksToCount>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <LpTimerStart+0xc4>)
 80025e4:	601a      	str	r2, [r3, #0]

  return;
 80025e6:	bf00      	nop
}
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	000f4240 	.word	0x000f4240
 80025f4:	0113094d 	.word	0x0113094d
 80025f8:	00418937 	.word	0x00418937
 80025fc:	20000c20 	.word	0x20000c20

08002600 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 8002604:	bf00      	nop
}
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <LpGetElapsedTime+0x60>)
 8002618:	681c      	ldr	r4, [r3, #0]
 800261a:	f001 f93f 	bl	800389c <HW_TS_RTC_ReadLeftTicksToCount>
 800261e:	4603      	mov	r3, r0
 8002620:	1ae3      	subs	r3, r4, r3
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <LpGetElapsedTime+0x64>)
 8002628:	fb02 f104 	mul.w	r1, r2, r4
 800262c:	2200      	movs	r2, #0
 800262e:	fb02 f203 	mul.w	r2, r2, r3
 8002632:	440a      	add	r2, r1
 8002634:	490f      	ldr	r1, [pc, #60]	; (8002674 <LpGetElapsedTime+0x64>)
 8002636:	fba3 3401 	umull	r3, r4, r3, r1
 800263a:	4422      	add	r2, r4
 800263c:	4614      	mov	r4, r2
 800263e:	e9c7 3400 	strd	r3, r4, [r7]
 8002642:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8002646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264a:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <LpGetElapsedTime+0x68>)
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	f7fe fa5c 	bl	8000b0c <__aeabi_uldivmod>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <LpGetElapsedTime+0x60>)
 800265e:	791b      	ldrb	r3, [r3, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f80b 	bl	800367c <HW_TS_Stop>

  return (uint32_t)return_value;
 8002666:	683b      	ldr	r3, [r7, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	20000c20 	.word	0x20000c20
 8002674:	00077240 	.word	0x00077240
 8002678:	000f4240 	.word	0x000f4240

0800267c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800267c:	b4b0      	push	{r4, r5, r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <_GeometryBuilder+0x54>)
 8002688:	461c      	mov	r4, r3
 800268a:	4615      	mov	r5, r2
 800268c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002694:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <_GeometryBuilder+0x58>)
 80026a0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80026a4:	4615      	mov	r5, r2
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <_GeometryBuilder+0x5c>)
 80026ba:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80026be:	4613      	mov	r3, r2
 80026c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bcb0      	pop	{r4, r5, r7}
 80026ce:	4770      	bx	lr
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000038 	.word	0x20000038
 80026d8:	20000c28 	.word	0x20000c28

080026dc <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b096      	sub	sp, #88	; 0x58
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2bc7      	cmp	r3, #199	; 0xc7
 80026ec:	f340 8093 	ble.w	8002816 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3360      	adds	r3, #96	; 0x60
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	015b      	lsls	r3, r3, #5
 80026fc:	3310      	adds	r3, #16
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
 800270c:	e011      	b.n	8002732 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002714:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002716:	3104      	adds	r1, #4
 8002718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002724:	4293      	cmp	r3, r2
 8002726:	bf38      	it	cc
 8002728:	4613      	movcc	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800272c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272e:	3301      	adds	r3, #1
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
 8002732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002734:	2b03      	cmp	r3, #3
 8002736:	ddea      	ble.n	800270e <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	2b0b      	cmp	r3, #11
 800273c:	d86b      	bhi.n	8002816 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	ed93 7a01 	vldr	s14, [r3, #4]
 800274c:	f107 0214 	add.w	r2, r7, #20
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	eef0 0a47 	vmov.f32	s1, s14
 800275a:	eeb0 0a67 	vmov.f32	s0, s15
 800275e:	f000 f8e5 	bl	800292c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276a:	edd3 7a02 	vldr	s15, [r3, #8]
 800276e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002770:	ed93 7a03 	vldr	s14, [r3, #12]
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	4619      	mov	r1, r3
 800277e:	eef0 0a47 	vmov.f32	s1, s14
 8002782:	eeb0 0a67 	vmov.f32	s0, s15
 8002786:	f000 f8d1 	bl	800292c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3370      	adds	r3, #112	; 0x70
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	327c      	adds	r2, #124	; 0x7c
 8002792:	f107 0520 	add.w	r5, r7, #32
 8002796:	f107 0408 	add.w	r4, r7, #8
 800279a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800279e:	f107 0014 	add.w	r0, r7, #20
 80027a2:	9201      	str	r2, [sp, #4]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	462b      	mov	r3, r5
 80027a8:	4622      	mov	r2, r4
 80027aa:	f000 f945 	bl	8002a38 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 80027ae:	2300      	movs	r3, #0
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
 80027b2:	e019      	b.n	80027e8 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b8:	331c      	adds	r3, #28
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	ed93 7a00 	vldr	s14, [r3]
 80027c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d8:	331c      	adds	r3, #28
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	3301      	adds	r3, #1
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	dde2      	ble.n	80027b4 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80027ee:	f004 f8a5 	bl	800693c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <consume_angles+0x144>)
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8002804:	2300      	movs	r3, #0
 8002806:	2200      	movs	r2, #0
 8002808:	f00e fc0e 	bl	8011028 <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <consume_angles+0x148>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f00e fb2b 	bl	8010e6c <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002816:	bf00      	nop
 8002818:	3750      	adds	r7, #80	; 0x50
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	20027b44 	.word	0x20027b44
 8002824:	20028088 	.word	0x20028088

08002828 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3304      	adds	r3, #4
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3308      	adds	r3, #8
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3308      	adds	r3, #8
 800284c:	edd3 6a00 	vldr	s13, [r3]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	3304      	adds	r3, #4
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3308      	adds	r3, #8
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	edd3 6a00 	vldr	s13, [r3]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3308      	adds	r3, #8
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002892:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3304      	adds	r3, #4
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3304      	adds	r3, #4
 80028ac:	edd3 6a00 	vldr	s13, [r3]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3308      	adds	r3, #8
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c2:	edc3 7a00 	vstr	s15, [r3]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <vec_length>:

float vec_length(float *vec) {
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	461a      	mov	r2, r3
 80028e0:	2103      	movs	r1, #3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f017 faac 	bl	8019e40 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80028f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	db09      	blt.n	8002914 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002900:	ed97 0a05 	vldr	s0, [r7, #20]
 8002904:	f017 ff10 	bl	801a728 <sqrtf>
 8002908:	eef0 7a40 	vmov.f32	s15, s0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	edc3 7a00 	vstr	s15, [r3]
 8002912:	e003      	b.n	800291c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

    return res;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	ee07 3a90 	vmov	s15, r3
}
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b09a      	sub	sp, #104	; 0x68
 8002930:	af00      	add	r7, sp, #0
 8002932:	6178      	str	r0, [r7, #20]
 8002934:	ed87 0a04 	vstr	s0, [r7, #16]
 8002938:	edc7 0a03 	vstr	s1, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002940:	ed97 0a04 	vldr	s0, [r7, #16]
 8002944:	f017 fba8 	bl	801a098 <arm_cos_f32>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002956:	ed97 0a04 	vldr	s0, [r7, #16]
 800295a:	f017 fb57 	bl	801a00c <arm_sin_f32>
 800295e:	eef0 7a40 	vmov.f32	s15, s0
 8002962:	eef1 7a67 	vneg.f32	s15, s15
 8002966:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	ed97 0a03 	vldr	s0, [r7, #12]
 8002974:	f017 fb90 	bl	801a098 <arm_cos_f32>
 8002978:	eef0 7a40 	vmov.f32	s15, s0
 800297c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002980:	ed97 0a03 	vldr	s0, [r7, #12]
 8002984:	f017 fb42 	bl	801a00c <arm_sin_f32>
 8002988:	eef0 7a40 	vmov.f32	s15, s0
 800298c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800299c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80029a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80029a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff3d 	bl	8002828 <vec_cross_product>
    float len = vec_length(ray);
 80029ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff8d 	bl	80028d2 <vec_length>
 80029b8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 80029bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029c0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80029c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80029cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029d0:	2203      	movs	r2, #3
 80029d2:	eeb0 0a66 	vmov.f32	s0, s13
 80029d6:	4618      	mov	r0, r3
 80029d8:	f017 fc02 	bl	801a1e0 <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80029dc:	2303      	movs	r3, #3
 80029de:	873b      	strh	r3, [r7, #56]	; 0x38
 80029e0:	2303      	movs	r3, #3
 80029e2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	330c      	adds	r3, #12
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80029ea:	2303      	movs	r3, #3
 80029ec:	863b      	strh	r3, [r7, #48]	; 0x30
 80029ee:	2301      	movs	r3, #1
 80029f0:	867b      	strh	r3, [r7, #50]	; 0x32
 80029f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80029f8:	2303      	movs	r3, #3
 80029fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80029fc:	2301      	movs	r3, #1
 80029fe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8002a04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a08:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a10:	4618      	mov	r0, r3
 8002a12:	f017 fa5b 	bl	8019ecc <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f107 011c 	add.w	r1, r7, #28
 8002a28:	2303      	movs	r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	f017 fc74 	bl	801a318 <arm_add_f32>
}
 8002a30:	bf00      	nop
 8002a32:	3768      	adds	r7, #104	; 0x68
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b098      	sub	sp, #96	; 0x60
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002a52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a56:	2303      	movs	r3, #3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f017 fb66 	bl	801a12c <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a64:	2203      	movs	r2, #3
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f017 fbfd 	bl	801a268 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8002a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a72:	2203      	movs	r2, #3
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f017 fbf6 	bl	801a268 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8002a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a80:	2203      	movs	r2, #3
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	6838      	ldr	r0, [r7, #0]
 8002a86:	f017 fbef 	bl	801a268 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8002a8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a8e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a92:	2203      	movs	r2, #3
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	f017 fbe7 	bl	801a268 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8002a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f017 fbdf 	bl	801a268 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8002aaa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002aae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002aba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8002aca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ace:	eef0 7ae7 	vabs.f32	s15, s15
 8002ad2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002bf0 <intersect_lines+0x1b8>
 8002ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d501      	bpl.n	8002ae4 <intersect_lines+0xac>
        return 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e081      	b.n	8002be8 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8002ae4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ae8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002af4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b08:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8002b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	f017 fb5b 	bl	801a1e0 <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002b2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002b32:	2303      	movs	r3, #3
 8002b34:	68f9      	ldr	r1, [r7, #12]
 8002b36:	f017 fbef 	bl	801a318 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002b3a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002b3e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b46:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002b4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b5e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	2203      	movs	r2, #3
 8002b74:	4619      	mov	r1, r3
 8002b76:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002b7a:	6838      	ldr	r0, [r7, #0]
 8002b7c:	f017 fb30 	bl	801a1e0 <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002b80:	f107 021c 	add.w	r2, r7, #28
 8002b84:	f107 001c 	add.w	r0, r7, #28
 8002b88:	2303      	movs	r3, #3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f017 fbc4 	bl	801a318 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	f107 011c 	add.w	r1, r7, #28
 8002ba4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f017 fbb5 	bl	801a318 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bb6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f017 fb10 	bl	801a1e0 <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002bc0:	f107 0210 	add.w	r2, r7, #16
 8002bc4:	f107 011c 	add.w	r1, r7, #28
 8002bc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f017 faad 	bl	801a12c <arm_sub_f32>
    *dist = vec_length(tmp);
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe7b 	bl	80028d2 <vec_length>
 8002bdc:	eef0 7a40 	vmov.f32	s15, s0
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3760      	adds	r7, #96	; 0x60
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	3727c5ac 	.word	0x3727c5ac

08002bf4 <LL_AHB2_GRP1_EnableClock>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c18:	68fb      	ldr	r3, [r7, #12]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3c:	2004      	movs	r0, #4
 8002c3e:	f7ff ffd9 	bl	8002bf4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c42:	2080      	movs	r0, #128	; 0x80
 8002c44:	f7ff ffd6 	bl	8002bf4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7ff ffd3 	bl	8002bf4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7ff ffd0 	bl	8002bf4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c54:	2010      	movs	r0, #16
 8002c56:	f7ff ffcd 	bl	8002bf4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4829      	ldr	r0, [pc, #164]	; (8002d10 <MX_GPIO_Init+0xe8>)
 8002c6c:	f005 ff20 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002c70:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002c74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c76:	2303      	movs	r3, #3
 8002c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4824      	ldr	r0, [pc, #144]	; (8002d14 <MX_GPIO_Init+0xec>)
 8002c84:	f005 ff14 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002c88:	f248 13dc 	movw	r3, #33244	; 0x81dc
 8002c8c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f005 ff07 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <MX_GPIO_Init+0xf0>)
 8002ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb6:	f005 fefb 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002cba:	2304      	movs	r3, #4
 8002cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MX_GPIO_Init+0xf4>)
 8002cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4812      	ldr	r0, [pc, #72]	; (8002d14 <MX_GPIO_Init+0xec>)
 8002ccc:	f005 fef0 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <MX_GPIO_Init+0xf8>)
 8002ce2:	f005 fee5 	bl	8008ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2105      	movs	r1, #5
 8002cea:	2008      	movs	r0, #8
 8002cec:	f005 fb59 	bl	80083a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002cf0:	2008      	movs	r0, #8
 8002cf2:	f005 fb70 	bl	80083d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2105      	movs	r1, #5
 8002cfa:	2017      	movs	r0, #23
 8002cfc:	f005 fb51 	bl	80083a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d00:	2017      	movs	r0, #23
 8002d02:	f005 fb68 	bl	80083d6 <HAL_NVIC_EnableIRQ>

}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	48001c00 	.word	0x48001c00
 8002d14:	48000400 	.word	0x48000400
 8002d18:	10210000 	.word	0x10210000
 8002d1c:	10110000 	.word	0x10110000
 8002d20:	48001000 	.word	0x48001000

08002d24 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d32:	4905      	ldr	r1, [pc, #20]	; (8002d48 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	58000800 	.word	0x58000800

08002d4c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4904      	ldr	r1, [pc, #16]	; (8002d6c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	58000800 	.word	0x58000800

08002d70 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <ReadRtcSsrValue+0x3c>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <ReadRtcSsrValue+0x3c>)
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002d86:	e005      	b.n	8002d94 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <ReadRtcSsrValue+0x3c>)
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1f5      	bne.n	8002d88 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002d9c:	683b      	ldr	r3, [r7, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40002800 	.word	0x40002800

08002db0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	460a      	mov	r2, r1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002dc0:	79ba      	ldrb	r2, [r7, #6]
 8002dc2:	491d      	ldr	r1, [pc, #116]	; (8002e38 <LinkTimerAfter+0x88>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3315      	adds	r3, #21
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d009      	beq.n	8002dee <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <LinkTimerAfter+0x88>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	3314      	adds	r3, #20
 8002dea:	79fa      	ldrb	r2, [r7, #7]
 8002dec:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4911      	ldr	r1, [pc, #68]	; (8002e38 <LinkTimerAfter+0x88>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3315      	adds	r3, #21
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <LinkTimerAfter+0x88>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	3314      	adds	r3, #20
 8002e12:	79ba      	ldrb	r2, [r7, #6]
 8002e14:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002e16:	79ba      	ldrb	r2, [r7, #6]
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <LinkTimerAfter+0x88>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	3315      	adds	r3, #21
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	701a      	strb	r2, [r3, #0]

  return;
 8002e2a:	bf00      	nop
}
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	200002d4 	.word	0x200002d4

08002e3c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	460a      	mov	r2, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <LinkTimerBefore+0xb8>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	79ba      	ldrb	r2, [r7, #6]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d032      	beq.n	8002ebe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002e58:	79ba      	ldrb	r2, [r7, #6]
 8002e5a:	4927      	ldr	r1, [pc, #156]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3314      	adds	r3, #20
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3315      	adds	r3, #21
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	491d      	ldr	r1, [pc, #116]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3315      	adds	r3, #21
 8002e90:	79ba      	ldrb	r2, [r7, #6]
 8002e92:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002e94:	79fa      	ldrb	r2, [r7, #7]
 8002e96:	4918      	ldr	r1, [pc, #96]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002ea8:	79ba      	ldrb	r2, [r7, #6]
 8002eaa:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002ebc:	e014      	b.n	8002ee8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	490d      	ldr	r1, [pc, #52]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3315      	adds	r3, #21
 8002ece:	79ba      	ldrb	r2, [r7, #6]
 8002ed0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002ed2:	79ba      	ldrb	r2, [r7, #6]
 8002ed4:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <LinkTimerBefore+0xbc>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	701a      	strb	r2, [r3, #0]
  return;
 8002ee6:	bf00      	nop
}
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000364 	.word	0x20000364
 8002ef8:	200002d4 	.word	0x200002d4

08002efc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <linkTimer+0x144>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d118      	bne.n	8002f42 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f10:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <linkTimer+0x144>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <linkTimer+0x148>)
 8002f18:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002f1a:	4a49      	ldr	r2, [pc, #292]	; (8003040 <linkTimer+0x144>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	4949      	ldr	r1, [pc, #292]	; (8003048 <linkTimer+0x14c>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3315      	adds	r3, #21
 8002f30:	2206      	movs	r2, #6
 8002f32:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <linkTimer+0x150>)
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	81fb      	strh	r3, [r7, #14]
 8002f40:	e078      	b.n	8003034 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002f42:	f000 f909 	bl	8003158 <ReturnTimeElapsed>
 8002f46:	4603      	mov	r3, r0
 8002f48:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	493e      	ldr	r1, [pc, #248]	; (8003048 <linkTimer+0x14c>)
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3308      	adds	r3, #8
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	79fa      	ldrb	r2, [r7, #7]
 8002f60:	4419      	add	r1, r3
 8002f62:	4839      	ldr	r0, [pc, #228]	; (8003048 <linkTimer+0x14c>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4403      	add	r3, r0
 8002f6e:	3308      	adds	r3, #8
 8002f70:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	4934      	ldr	r1, [pc, #208]	; (8003048 <linkTimer+0x14c>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <linkTimer+0x144>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <linkTimer+0x14c>)
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d337      	bcc.n	8003014 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <linkTimer+0x144>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002faa:	7b7a      	ldrb	r2, [r7, #13]
 8002fac:	4926      	ldr	r1, [pc, #152]	; (8003048 <linkTimer+0x14c>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3315      	adds	r3, #21
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002fbe:	e013      	b.n	8002fe8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002fc0:	7b7a      	ldrb	r2, [r7, #13]
 8002fc2:	4921      	ldr	r1, [pc, #132]	; (8003048 <linkTimer+0x14c>)
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3315      	adds	r3, #21
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002fd4:	7b7a      	ldrb	r2, [r7, #13]
 8002fd6:	491c      	ldr	r1, [pc, #112]	; (8003048 <linkTimer+0x14c>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3315      	adds	r3, #21
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002fe8:	7b3b      	ldrb	r3, [r7, #12]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d00b      	beq.n	8003006 <linkTimer+0x10a>
 8002fee:	7b3a      	ldrb	r2, [r7, #12]
 8002ff0:	4915      	ldr	r1, [pc, #84]	; (8003048 <linkTimer+0x14c>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d2dc      	bcs.n	8002fc0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003006:	7b7a      	ldrb	r2, [r7, #13]
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fecf 	bl	8002db0 <LinkTimerAfter>
 8003012:	e00f      	b.n	8003034 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <linkTimer+0x144>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff0c 	bl	8002e3c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <linkTimer+0x144>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <linkTimer+0x148>)
 800302c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <linkTimer+0x144>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003034:	89fb      	ldrh	r3, [r7, #14]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000364 	.word	0x20000364
 8003044:	20000365 	.word	0x20000365
 8003048:	200002d4 	.word	0x200002d4
 800304c:	20000368 	.word	0x20000368

08003050 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	460a      	mov	r2, r1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <UnlinkTimer+0xf8>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	79fa      	ldrb	r2, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d111      	bne.n	8003090 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <UnlinkTimer+0xf8>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <UnlinkTimer+0xfc>)
 8003074:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003076:	79fa      	ldrb	r2, [r7, #7]
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <UnlinkTimer+0x100>)
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	3315      	adds	r3, #21
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <UnlinkTimer+0xf8>)
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e03e      	b.n	800310e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	492f      	ldr	r1, [pc, #188]	; (8003150 <UnlinkTimer+0x100>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3314      	adds	r3, #20
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80030a4:	79fa      	ldrb	r2, [r7, #7]
 80030a6:	492a      	ldr	r1, [pc, #168]	; (8003150 <UnlinkTimer+0x100>)
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3315      	adds	r3, #21
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80030b8:	79f9      	ldrb	r1, [r7, #7]
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	4824      	ldr	r0, [pc, #144]	; (8003150 <UnlinkTimer+0x100>)
 80030be:	460b      	mov	r3, r1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4403      	add	r3, r0
 80030c8:	3315      	adds	r3, #21
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2d8      	uxtb	r0, r3
 80030ce:	4920      	ldr	r1, [pc, #128]	; (8003150 <UnlinkTimer+0x100>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	3315      	adds	r3, #21
 80030dc:	4602      	mov	r2, r0
 80030de:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d013      	beq.n	800310e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80030e6:	79f9      	ldrb	r1, [r7, #7]
 80030e8:	7bba      	ldrb	r2, [r7, #14]
 80030ea:	4819      	ldr	r0, [pc, #100]	; (8003150 <UnlinkTimer+0x100>)
 80030ec:	460b      	mov	r3, r1
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	440b      	add	r3, r1
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4403      	add	r3, r0
 80030f6:	3314      	adds	r3, #20
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b2d8      	uxtb	r0, r3
 80030fc:	4914      	ldr	r1, [pc, #80]	; (8003150 <UnlinkTimer+0x100>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	440b      	add	r3, r1
 8003108:	3314      	adds	r3, #20
 800310a:	4602      	mov	r2, r0
 800310c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800310e:	79fa      	ldrb	r2, [r7, #7]
 8003110:	490f      	ldr	r1, [pc, #60]	; (8003150 <UnlinkTimer+0x100>)
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	330c      	adds	r3, #12
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <UnlinkTimer+0xf8>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b06      	cmp	r3, #6
 800312a:	d107      	bne.n	800313c <UnlinkTimer+0xec>
 800312c:	79bb      	ldrb	r3, [r7, #6]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <UnlinkTimer+0x104>)
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	601a      	str	r2, [r3, #0]
  }

  return;
 800313a:	bf00      	nop
 800313c:	bf00      	nop
}
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000364 	.word	0x20000364
 800314c:	20000365 	.word	0x20000365
 8003150:	200002d4 	.word	0x200002d4
 8003154:	20000368 	.word	0x20000368

08003158 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <ReturnTimeElapsed+0x70>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d026      	beq.n	80031b6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003168:	f7ff fe02 	bl	8002d70 <ReadRtcSsrValue>
 800316c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <ReturnTimeElapsed+0x70>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d805      	bhi.n	8003184 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <ReturnTimeElapsed+0x70>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e00a      	b.n	800319a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <ReturnTimeElapsed+0x74>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <ReturnTimeElapsed+0x70>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4413      	add	r3, r2
 8003198:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <ReturnTimeElapsed+0x78>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <ReturnTimeElapsed+0x7c>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	40d3      	lsrs	r3, r2
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	e001      	b.n	80031ba <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b29b      	uxth	r3, r3
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000368 	.word	0x20000368
 80031cc:	20000c3e 	.word	0x20000c3e
 80031d0:	20000c3d 	.word	0x20000c3d
 80031d4:	20000c3c 	.word	0x20000c3c

080031d8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d108      	bne.n	80031fa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80031e8:	f7ff fdc2 	bl	8002d70 <ReadRtcSsrValue>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <RestartWakeupCounter+0xa8>)
 80031f0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80031f2:	2003      	movs	r0, #3
 80031f4:	f005 f90f 	bl	8008416 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80031f8:	e03e      	b.n	8003278 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d803      	bhi.n	8003208 <RestartWakeupCounter+0x30>
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <RestartWakeupCounter+0xac>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d002      	beq.n	800320e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	3b01      	subs	r3, #1
 800320c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800320e:	bf00      	nop
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <RestartWakeupCounter+0xb0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f7      	beq.n	8003210 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <RestartWakeupCounter+0xb0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <RestartWakeupCounter+0xb0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003234:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <RestartWakeupCounter+0xb4>)
 8003238:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800323c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800323e:	2003      	movs	r0, #3
 8003240:	f005 f8f7 	bl	8008432 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <RestartWakeupCounter+0xb8>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <RestartWakeupCounter+0xb8>)
 8003250:	4313      	orrs	r3, r2
 8003252:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003254:	f7ff fd8c 	bl	8002d70 <ReadRtcSsrValue>
 8003258:	4602      	mov	r2, r0
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <RestartWakeupCounter+0xa8>)
 800325c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <RestartWakeupCounter+0xb0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <RestartWakeupCounter+0xb0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003270:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003272:	f3af 8000 	nop.w
  return ;
 8003276:	bf00      	nop
}
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000368 	.word	0x20000368
 8003284:	20000c3c 	.word	0x20000c3c
 8003288:	20000c38 	.word	0x20000c38
 800328c:	58000800 	.word	0x58000800
 8003290:	40002800 	.word	0x40002800

08003294 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <RescheduleTimerList+0x124>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d108      	bne.n	80032ba <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80032a8:	bf00      	nop
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <RescheduleTimerList+0x128>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f7      	bne.n	80032aa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <RescheduleTimerList+0x128>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <RescheduleTimerList+0x128>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032cc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <RescheduleTimerList+0x12c>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	493b      	ldr	r1, [pc, #236]	; (80033c4 <RescheduleTimerList+0x130>)
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	3308      	adds	r3, #8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80032e8:	f7ff ff36 	bl	8003158 <ReturnTimeElapsed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d205      	bcs.n	8003304 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <RescheduleTimerList+0x134>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e04d      	b.n	80033a0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	4a31      	ldr	r2, [pc, #196]	; (80033cc <RescheduleTimerList+0x138>)
 8003308:	8812      	ldrh	r2, [r2, #0]
 800330a:	b292      	uxth	r2, r2
 800330c:	4413      	add	r3, r2
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4293      	cmp	r3, r2
 8003314:	d906      	bls.n	8003324 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <RescheduleTimerList+0x138>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <RescheduleTimerList+0x134>)
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e03d      	b.n	80033a0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	b29a      	uxth	r2, r3
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <RescheduleTimerList+0x134>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003334:	e034      	b.n	80033a0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	4922      	ldr	r1, [pc, #136]	; (80033c4 <RescheduleTimerList+0x130>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	3308      	adds	r3, #8
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20a      	bcs.n	8003364 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	491c      	ldr	r1, [pc, #112]	; (80033c4 <RescheduleTimerList+0x130>)
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	3308      	adds	r3, #8
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e013      	b.n	800338c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	4917      	ldr	r1, [pc, #92]	; (80033c4 <RescheduleTimerList+0x130>)
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3308      	adds	r3, #8
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	1ac9      	subs	r1, r1, r3
 800337c:	4811      	ldr	r0, [pc, #68]	; (80033c4 <RescheduleTimerList+0x130>)
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4403      	add	r3, r0
 8003388:	3308      	adds	r3, #8
 800338a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	490d      	ldr	r1, [pc, #52]	; (80033c4 <RescheduleTimerList+0x130>)
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	3315      	adds	r3, #21
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d1c7      	bne.n	8003336 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80033a6:	89bb      	ldrh	r3, [r7, #12]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff15 	bl	80031d8 <RestartWakeupCounter>

  return ;
 80033ae:	bf00      	nop
}
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40002800 	.word	0x40002800
 80033bc:	20000c38 	.word	0x20000c38
 80033c0:	20000364 	.word	0x20000364
 80033c4:	200002d4 	.word	0x200002d4
 80033c8:	2000036c 	.word	0x2000036c
 80033cc:	20000c40 	.word	0x20000c40

080033d0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80033dc:	4a61      	ldr	r2, [pc, #388]	; (8003564 <HW_TS_Init+0x194>)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80033e2:	4b60      	ldr	r3, [pc, #384]	; (8003564 <HW_TS_Init+0x194>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22ca      	movs	r2, #202	; 0xca
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HW_TS_Init+0x194>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2253      	movs	r2, #83	; 0x53
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HW_TS_Init+0x198>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a5b      	ldr	r2, [pc, #364]	; (8003568 <HW_TS_Init+0x198>)
 80033fc:	f043 0320 	orr.w	r3, r3, #32
 8003400:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003402:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HW_TS_Init+0x198>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f1c3 0304 	rsb	r3, r3, #4
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HW_TS_Init+0x19c>)
 8003416:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HW_TS_Init+0x198>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003420:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003424:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3301      	adds	r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HW_TS_Init+0x1a0>)
 8003440:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HW_TS_Init+0x198>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800344c:	b29b      	uxth	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	4b48      	ldr	r3, [pc, #288]	; (8003574 <HW_TS_Init+0x1a4>)
 8003454:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HW_TS_Init+0x1a4>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	3b01      	subs	r3, #1
 800345c:	4a44      	ldr	r2, [pc, #272]	; (8003570 <HW_TS_Init+0x1a0>)
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003468:	4a40      	ldr	r2, [pc, #256]	; (800356c <HW_TS_Init+0x19c>)
 800346a:	7812      	ldrb	r2, [r2, #0]
 800346c:	40d3      	lsrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003476:	4293      	cmp	r3, r2
 8003478:	d904      	bls.n	8003484 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HW_TS_Init+0x1a8>)
 800347c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e003      	b.n	800348c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HW_TS_Init+0x1a8>)
 800348a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800348c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003490:	f7ff fc5c 	bl	8002d4c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003494:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003498:	f7ff fc44 	bl	8002d24 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d143      	bne.n	800352a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HW_TS_Init+0x1ac>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HW_TS_Init+0x1b0>)
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
 80034b4:	e00c      	b.n	80034d0 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80034b6:	7dfa      	ldrb	r2, [r7, #23]
 80034b8:	4932      	ldr	r1, [pc, #200]	; (8003584 <HW_TS_Init+0x1b4>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	330c      	adds	r3, #12
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	3301      	adds	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d9ef      	bls.n	80034b6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HW_TS_Init+0x1b8>)
 80034d8:	2206      	movs	r2, #6
 80034da:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <HW_TS_Init+0x194>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <HW_TS_Init+0x194>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HW_TS_Init+0x194>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HW_TS_Init+0x194>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003504:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <HW_TS_Init+0x1bc>)
 8003508:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800350c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800350e:	2003      	movs	r0, #3
 8003510:	f004 ff8f 	bl	8008432 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HW_TS_Init+0x194>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HW_TS_Init+0x194>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00a      	b.n	8003540 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HW_TS_Init+0x194>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800353a:	2003      	movs	r0, #3
 800353c:	f004 ff6b 	bl	8008416 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HW_TS_Init+0x194>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	22ff      	movs	r2, #255	; 0xff
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800354a:	2200      	movs	r2, #0
 800354c:	2106      	movs	r1, #6
 800354e:	2003      	movs	r0, #3
 8003550:	f004 ff27 	bl	80083a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003554:	2003      	movs	r0, #3
 8003556:	f004 ff3e 	bl	80083d6 <HAL_NVIC_EnableIRQ>

  return;
 800355a:	bf00      	nop
}
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000c38 	.word	0x20000c38
 8003568:	40002800 	.word	0x40002800
 800356c:	20000c3c 	.word	0x20000c3c
 8003570:	20000c3d 	.word	0x20000c3d
 8003574:	20000c3e 	.word	0x20000c3e
 8003578:	20000c40 	.word	0x20000c40
 800357c:	2000036c 	.word	0x2000036c
 8003580:	20000368 	.word	0x20000368
 8003584:	200002d4 	.word	0x200002d4
 8003588:	20000364 	.word	0x20000364
 800358c:	58000800 	.word	0x58000800

08003590 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003590:	b480      	push	{r7}
 8003592:	b08b      	sub	sp, #44	; 0x2c
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80035ac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80035ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80035b2:	e004      	b.n	80035be <HW_TS_Create+0x2e>
  {
    loop++;
 80035b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035b8:	3301      	adds	r3, #1
 80035ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80035be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d80c      	bhi.n	80035e0 <HW_TS_Create+0x50>
 80035c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035ca:	492b      	ldr	r1, [pc, #172]	; (8003678 <HW_TS_Create+0xe8>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	330c      	adds	r3, #12
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e9      	bne.n	80035b4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d037      	beq.n	8003658 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80035e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035ec:	4922      	ldr	r1, [pc, #136]	; (8003678 <HW_TS_Create+0xe8>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	330c      	adds	r3, #12
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003608:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800360c:	491a      	ldr	r1, [pc, #104]	; (8003678 <HW_TS_Create+0xe8>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3310      	adds	r3, #16
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800361e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003622:	4915      	ldr	r1, [pc, #84]	; (8003678 <HW_TS_Create+0xe8>)
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	330d      	adds	r3, #13
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003634:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003638:	490f      	ldr	r1, [pc, #60]	; (8003678 <HW_TS_Create+0xe8>)
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800364e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003656:	e007      	b.n	8003668 <HW_TS_Create+0xd8>
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800366c:	4618      	mov	r0, r3
 800366e:	372c      	adds	r7, #44	; 0x2c
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	200002d4 	.word	0x200002d4

0800367c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	60fb      	str	r3, [r7, #12]
  return(result);
 800368c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800368e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003690:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003692:	2003      	movs	r0, #3
 8003694:	f004 fead 	bl	80083f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003698:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HW_TS_Stop+0xfc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ca      	movs	r2, #202	; 0xca
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
 80036a2:	4b35      	ldr	r3, [pc, #212]	; (8003778 <HW_TS_Stop+0xfc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2253      	movs	r2, #83	; 0x53
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80036ac:	79fa      	ldrb	r2, [r7, #7]
 80036ae:	4933      	ldr	r1, [pc, #204]	; (800377c <HW_TS_Stop+0x100>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	330c      	adds	r3, #12
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d148      	bne.n	8003756 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fcc1 	bl	8003050 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <HW_TS_Stop+0x104>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d135      	bne.n	8003746 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HW_TS_Stop+0x108>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d108      	bne.n	80036fa <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80036e8:	bf00      	nop
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HW_TS_Stop+0xfc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f7      	bne.n	80036ea <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HW_TS_Stop+0xfc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HW_TS_Stop+0xfc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800370e:	bf00      	nop
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HW_TS_Stop+0xfc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f7      	beq.n	8003710 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HW_TS_Stop+0xfc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HW_TS_Stop+0xfc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003734:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HW_TS_Stop+0x10c>)
 8003738:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800373c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800373e:	2003      	movs	r0, #3
 8003740:	f004 fe77 	bl	8008432 <HAL_NVIC_ClearPendingIRQ>
 8003744:	e007      	b.n	8003756 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <HW_TS_Stop+0x110>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	7cfa      	ldrb	r2, [r7, #19]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003752:	f7ff fd9f 	bl	8003294 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HW_TS_Stop+0xfc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003760:	2003      	movs	r0, #3
 8003762:	f004 fe38 	bl	80083d6 <HAL_NVIC_EnableIRQ>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003770:	bf00      	nop
}
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000c38 	.word	0x20000c38
 800377c:	200002d4 	.word	0x200002d4
 8003780:	20000364 	.word	0x20000364
 8003784:	40002800 	.word	0x40002800
 8003788:	58000800 	.word	0x58000800
 800378c:	20000365 	.word	0x20000365

08003790 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800379c:	79fa      	ldrb	r2, [r7, #7]
 800379e:	493b      	ldr	r1, [pc, #236]	; (800388c <HW_TS_Start+0xfc>)
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	330c      	adds	r3, #12
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d103      	bne.n	80037bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff60 	bl	800367c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80037c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80037c8:	2003      	movs	r0, #3
 80037ca:	f004 fe12 	bl	80083f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HW_TS_Start+0x100>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	22ca      	movs	r2, #202	; 0xca
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HW_TS_Start+0x100>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2253      	movs	r2, #83	; 0x53
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80037e2:	79fa      	ldrb	r2, [r7, #7]
 80037e4:	4929      	ldr	r1, [pc, #164]	; (800388c <HW_TS_Start+0xfc>)
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	330c      	adds	r3, #12
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80037f6:	79fa      	ldrb	r2, [r7, #7]
 80037f8:	4924      	ldr	r1, [pc, #144]	; (800388c <HW_TS_Start+0xfc>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	3308      	adds	r3, #8
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800380a:	79fa      	ldrb	r2, [r7, #7]
 800380c:	491f      	ldr	r1, [pc, #124]	; (800388c <HW_TS_Start+0xfc>)
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	3304      	adds	r3, #4
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fb6b 	bl	8002efc <linkTimer>
 8003826:	4603      	mov	r3, r0
 8003828:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HW_TS_Start+0x104>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HW_TS_Start+0x108>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	7c7a      	ldrb	r2, [r7, #17]
 8003838:	429a      	cmp	r2, r3
 800383a:	d002      	beq.n	8003842 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800383c:	f7ff fd2a 	bl	8003294 <RescheduleTimerList>
 8003840:	e013      	b.n	800386a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003842:	79fa      	ldrb	r2, [r7, #7]
 8003844:	4911      	ldr	r1, [pc, #68]	; (800388c <HW_TS_Start+0xfc>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	3308      	adds	r3, #8
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	8a7b      	ldrh	r3, [r7, #18]
 8003856:	79fa      	ldrb	r2, [r7, #7]
 8003858:	1ac9      	subs	r1, r1, r3
 800385a:	480c      	ldr	r0, [pc, #48]	; (800388c <HW_TS_Start+0xfc>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4403      	add	r3, r0
 8003866:	3308      	adds	r3, #8
 8003868:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HW_TS_Start+0x100>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003874:	2003      	movs	r0, #3
 8003876:	f004 fdae 	bl	80083d6 <HAL_NVIC_EnableIRQ>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003884:	bf00      	nop
}
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200002d4 	.word	0x200002d4
 8003890:	20000c38 	.word	0x20000c38
 8003894:	20000364 	.word	0x20000364
 8003898:	20000365 	.word	0x20000365

0800389c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a2:	f3ef 8310 	mrs	r3, PRIMASK
 80038a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80038ac:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d112      	bne.n	80038e2 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80038c2:	f7ff fc49 	bl	8003158 <ReturnTimeElapsed>
 80038c6:	4603      	mov	r3, r0
 80038c8:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80038ca:	89fa      	ldrh	r2, [r7, #14]
 80038cc:	89bb      	ldrh	r3, [r7, #12]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d904      	bls.n	80038dc <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80038d2:	89fa      	ldrh	r2, [r7, #14]
 80038d4:	89bb      	ldrh	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	82fb      	strh	r3, [r7, #22]
 80038da:	e005      	b.n	80038e8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	82fb      	strh	r3, [r7, #22]
 80038e0:	e002      	b.n	80038e8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80038e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038e6:	82fb      	strh	r3, [r7, #22]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80038f2:	8afb      	ldrh	r3, [r7, #22]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40002800 	.word	0x40002800

08003900 <LL_AHB2_GRP1_EnableClock>:
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800390e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4313      	orrs	r3, r2
 8003916:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4313      	orrs	r3, r2
 8003948:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <MX_I2C1_Init+0x74>)
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <MX_I2C1_Init+0x78>)
 800396c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <MX_I2C1_Init+0x74>)
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <MX_I2C1_Init+0x7c>)
 8003972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <MX_I2C1_Init+0x74>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <MX_I2C1_Init+0x74>)
 800397c:	2201      	movs	r2, #1
 800397e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <MX_I2C1_Init+0x74>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_I2C1_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <MX_I2C1_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_I2C1_Init+0x74>)
 8003994:	2200      	movs	r2, #0
 8003996:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_I2C1_Init+0x74>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800399e:	480e      	ldr	r0, [pc, #56]	; (80039d8 <MX_I2C1_Init+0x74>)
 80039a0:	f005 fa58 	bl	8008e54 <HAL_I2C_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039aa:	f000 fd9b 	bl	80044e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039ae:	2100      	movs	r1, #0
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <MX_I2C1_Init+0x74>)
 80039b2:	f007 f950 	bl	800ac56 <HAL_I2CEx_ConfigAnalogFilter>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039bc:	f000 fd92 	bl	80044e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039c0:	2100      	movs	r1, #0
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <MX_I2C1_Init+0x74>)
 80039c4:	f007 f992 	bl	800acec <HAL_I2CEx_ConfigDigitalFilter>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039ce:	f000 fd89 	bl	80044e4 <Error_Handler>
  }

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20028244 	.word	0x20028244
 80039dc:	40005400 	.word	0x40005400
 80039e0:	00e27cae 	.word	0x00e27cae

080039e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_I2C_MspInit+0x6c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d120      	bne.n	8003a48 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7ff ff7a 	bl	8003900 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a12:	2312      	movs	r3, #18
 8003a14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a1e:	2304      	movs	r3, #4
 8003a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	4619      	mov	r1, r3
 8003a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2c:	f005 f840 	bl	8008ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a30:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a34:	f7ff ff7d 	bl	8003932 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	201e      	movs	r0, #30
 8003a3e:	f004 fcb0 	bl	80083a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a42:	201e      	movs	r0, #30
 8003a44:	f004 fcc7 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40005400 	.word	0x40005400

08003a54 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 8003a5c:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <InertialSensingTask+0xe0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
#endif

	uint32_t evt = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a66:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f00c fdcb 	bl	8010608 <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 8003a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a76:	f00c fe5b 	bl	8010730 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003a7a:	2064      	movs	r0, #100	; 0x64
 8003a7c:	f7fe fadc 	bl	8002038 <IMU_enableRotationVector>
		osDelay(100);
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	f00c fe55 	bl	8010730 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003a86:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <InertialSensingTask+0xe4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <InertialSensingTask+0xe8>)
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a92:	f7fe fadf 	bl	8002054 <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003a96:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003a9a:	f00c fe49 	bl	8010730 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 8003a9e:	2064      	movs	r0, #100	; 0x64
 8003aa0:	f00c fe46 	bl	8010730 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <InertialSensingTask+0xec>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4925      	ldr	r1, [pc, #148]	; (8003b44 <InertialSensingTask+0xf0>)
 8003aae:	f00d fb2f 	bl	8011110 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <InertialSensingTask+0xf4>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4924      	ldr	r1, [pc, #144]	; (8003b4c <InertialSensingTask+0xf8>)
 8003abc:	f00d fb28 	bl	8011110 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <InertialSensingTask+0xfc>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	491e      	ldr	r1, [pc, #120]	; (8003b44 <InertialSensingTask+0xf0>)
 8003aca:	f00d faad 	bl	8011028 <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 8003ace:	2120      	movs	r1, #32
 8003ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad4:	f005 f95c 	bl	8008d90 <HAL_GPIO_ReadPin>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <InertialSensingTask+0x8e>
 8003ade:	f7fd ffe9 	bl	8001ab4 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f00c fd8e 	bl	8010608 <osThreadFlagsWait>
 8003aec:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0d2      	beq.n	8003a9e <InertialSensingTask+0x4a>

				// reset IMU
				IMU_softReset();
 8003af8:	f7fe fa3e 	bl	8001f78 <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 8003afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b00:	f00c fe16 	bl	8010730 <osDelay>

				inertialEnabled = 0;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <InertialSensingTask+0xe0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <InertialSensingTask+0xfc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f00d fb70 	bl	80111f4 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <InertialSensingTask+0xf4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00d fb6b 	bl	80111f4 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <InertialSensingTask+0xec>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f00d fb66 	bl	80111f4 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003b28:	200e      	movs	r0, #14
 8003b2a:	f00c fd1d 	bl	8010568 <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003b2e:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b30:	e799      	b.n	8003a66 <InertialSensingTask+0x12>
 8003b32:	bf00      	nop
 8003b34:	20000c42 	.word	0x20000c42
 8003b38:	20000068 	.word	0x20000068
 8003b3c:	200282d4 	.word	0x200282d4
 8003b40:	20027c60 	.word	0x20027c60
 8003b44:	20028298 	.word	0x20028298
 8003b48:	20027c3c 	.word	0x20027c3c
 8003b4c:	200282b0 	.word	0x200282b0
 8003b50:	20027c4c 	.word	0x20027c4c

08003b54 <HAL_GPIO_EXTI_Callback>:
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d105      	bne.n	8003b70 <HAL_GPIO_EXTI_Callback+0x1c>
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x24>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003b6c:	f7fd ffa2 	bl	8001ab4 <IMU_dataAvailable>
	}
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000c42 	.word	0x20000c42

08003b7c <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <_Input+0x3c>)
 8003b8a:	f7fe fd77 	bl	800267c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003b8e:	2101      	movs	r1, #1
 8003b90:	480a      	ldr	r0, [pc, #40]	; (8003bbc <_Input+0x40>)
 8003b92:	f000 ffab 	bl	8004aec <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <_Input+0x40>)
 8003b98:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <_Input+0x3c>)
 8003b9a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <_Input+0x40>)
 8003ba2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20028300 	.word	0x20028300
 8003bbc:	20028388 	.word	0x20028388

08003bc0 <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f00c fd18 	bl	8010608 <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003bd8:	4818      	ldr	r0, [pc, #96]	; (8003c3c <PulseHandlerTask+0x7c>)
 8003bda:	f00a f983 	bl	800dee4 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003bde:	4818      	ldr	r0, [pc, #96]	; (8003c40 <PulseHandlerTask+0x80>)
 8003be0:	f004 f9f8 	bl	8007fd4 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003be4:	2100      	movs	r1, #0
 8003be6:	4817      	ldr	r0, [pc, #92]	; (8003c44 <PulseHandlerTask+0x84>)
 8003be8:	f7ff ffc8 	bl	8003b7c <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <PulseHandlerTask+0x88>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4915      	ldr	r1, [pc, #84]	; (8003c4c <PulseHandlerTask+0x8c>)
 8003bf8:	f00d fa8a 	bl	8011110 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <PulseHandlerTask+0x84>)
 8003bfe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003c02:	4912      	ldr	r1, [pc, #72]	; (8003c4c <PulseHandlerTask+0x8c>)
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 ffa5 	bl	8004b54 <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f00c fcfa 	bl	8010608 <osThreadFlagsWait>
 8003c14:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0e5      	beq.n	8003bec <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003c20:	4807      	ldr	r0, [pc, #28]	; (8003c40 <PulseHandlerTask+0x80>)
 8003c22:	f004 fa21 	bl	8008068 <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <PulseHandlerTask+0x7c>)
 8003c28:	f00a f986 	bl	800df38 <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <PulseHandlerTask+0x88>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00d fadf 	bl	80111f4 <osMessageQueueReset>
				break;
 8003c36:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003c38:	e7c8      	b.n	8003bcc <PulseHandlerTask+0xc>
 8003c3a:	bf00      	nop
 8003c3c:	20028810 	.word	0x20028810
 8003c40:	200280b4 	.word	0x200280b4
 8003c44:	20027c64 	.word	0x20027c64
 8003c48:	20027b40 	.word	0x20027b40
 8003c4c:	200282e0 	.word	0x200282e0

08003c50 <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003c62:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <get3D_location+0x110>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00d f899 	bl	8010da0 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <get3D_location+0x114>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f00d f893 	bl	8010da0 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <get3D_location+0x118>)
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	2200      	movs	r2, #0
 8003c84:	4939      	ldr	r1, [pc, #228]	; (8003d6c <get3D_location+0x11c>)
 8003c86:	f00d fa43 	bl	8011110 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <get3D_location+0x11c>)
 8003c8c:	789b      	ldrb	r3, [r3, #2]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d116      	bne.n	8003cc0 <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <get3D_location+0x118>)
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4934      	ldr	r1, [pc, #208]	; (8003d6c <get3D_location+0x11c>)
 8003c9c:	f00d f9c4 	bl	8011028 <osMessageQueuePut>

		blinkActive = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <get3D_location+0x120>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00c fbfa 	bl	80104a4 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <get3D_location+0x114>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00d f871 	bl	8010da0 <osSemaphoreAcquire>
 8003cbe:	e006      	b.n	8003cce <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <get3D_location+0x118>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4928      	ldr	r1, [pc, #160]	; (8003d6c <get3D_location+0x11c>)
 8003cca:	f00d f9ad 	bl	8011028 <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <get3D_location+0x124>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f00d f862 	bl	8010da0 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <get3D_location+0x128>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00c fbde 	bl	80104a4 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <get3D_location+0x110>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00d f855 	bl	8010da0 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d119      	bne.n	8003d30 <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003cfc:	e00f      	b.n	8003d1e <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <get3D_location+0x12c>)
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d06:	2200      	movs	r2, #0
 8003d08:	491d      	ldr	r1, [pc, #116]	; (8003d80 <get3D_location+0x130>)
 8003d0a:	f00d fa01 	bl	8011110 <osMessageQueueGet>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <get3D_location+0x134>)
 8003d16:	2118      	movs	r1, #24
 8003d18:	4819      	ldr	r0, [pc, #100]	; (8003d80 <get3D_location+0x130>)
 8003d1a:	f014 fb1f 	bl	801835c <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <get3D_location+0x138>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00d f83b 	bl	8010da0 <osSemaphoreAcquire>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <get3D_location+0x124>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f00d f899 	bl	8010e6c <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <get3D_location+0x128>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f00c fbaf 	bl	80104a4 <osThreadFlagsSet>

	if(blinkActive){
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <get3D_location+0x120>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f00c fba6 	bl	80104a4 <osThreadFlagsSet>
	}

}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20028088 	.word	0x20028088
 8003d64:	20028090 	.word	0x20028090
 8003d68:	20027c5c 	.word	0x20027c5c
 8003d6c:	200280ac 	.word	0x200280ac
 8003d70:	20027c2c 	.word	0x20027c2c
 8003d74:	20027c48 	.word	0x20027c48
 8003d78:	20028094 	.word	0x20028094
 8003d7c:	20027b44 	.word	0x20027b44
 8003d80:	20028658 	.word	0x20028658
 8003d84:	0801b7cc 	.word	0x0801b7cc
 8003d88:	20027c54 	.word	0x20027c54

08003d8c <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003da2:	723b      	strb	r3, [r7, #8]
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	817b      	strh	r3, [r7, #10]
 8003da8:	883b      	ldrh	r3, [r7, #0]
 8003daa:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <enqueue_pulse+0x38>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	f107 0108 	add.w	r1, r7, #8
 8003db4:	2300      	movs	r3, #0
 8003db6:	2200      	movs	r2, #0
 8003db8:	f00d f936 	bl	8011028 <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20027b40 	.word	0x20027b40

08003dc8 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f00c fc14 	bl	8010608 <osThreadFlagsWait>
 8003de0:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f3      	beq.n	8003dd4 <InterProcessorTask+0xc>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003dec:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <InterProcessorTask+0x1b8>)
 8003dee:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <InterProcessorTask+0x1bc>)
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	6019      	str	r1, [r3, #0]
 8003df4:	8892      	ldrh	r2, [r2, #4]
 8003df6:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003df8:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	4618      	mov	r0, r3
 8003e02:	f00c ffcd 	bl	8010da0 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100);
 8003e06:	2364      	movs	r3, #100	; 0x64
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <InterProcessorTask+0x1b8>)
 8003e0e:	21e6      	movs	r1, #230	; 0xe6
 8003e10:	485e      	ldr	r0, [pc, #376]	; (8003f8c <InterProcessorTask+0x1c4>)
 8003e12:	f005 f8af 	bl	8008f74 <HAL_I2C_Master_Transmit>

			osDelay(100);
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f00c fc8a 	bl	8010730 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003e1c:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f00d f823 	bl	8010e6c <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003e26:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2006      	movs	r0, #6
 8003e2e:	f00c fbeb 	bl	8010608 <osThreadFlagsWait>
 8003e32:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d079      	beq.n	8003f32 <InterProcessorTask+0x16a>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f04f 31ff 	mov.w	r1, #4294967295
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00c ffaa 	bl	8010da0 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003e4c:	e00e      	b.n	8003e6c <InterProcessorTask+0xa4>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003e4e:	4b4e      	ldr	r3, [pc, #312]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f00d f80a 	bl	8010e6c <osSemaphoreRelease>
 						osDelay(100);
 8003e58:	2064      	movs	r0, #100	; 0x64
 8003e5a:	f00c fc69 	bl	8010730 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f04f 31ff 	mov.w	r1, #4294967295
 8003e66:	4618      	mov	r0, r3
 8003e68:	f00c ff9a 	bl	8010da0 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003e6c:	2364      	movs	r3, #100	; 0x64
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2306      	movs	r3, #6
 8003e72:	4a43      	ldr	r2, [pc, #268]	; (8003f80 <InterProcessorTask+0x1b8>)
 8003e74:	21e6      	movs	r1, #230	; 0xe6
 8003e76:	4845      	ldr	r0, [pc, #276]	; (8003f8c <InterProcessorTask+0x1c4>)
 8003e78:	f005 f87c 	bl	8008f74 <HAL_I2C_Master_Transmit>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <InterProcessorTask+0x86>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003e82:	2008      	movs	r0, #8
 8003e84:	f00c fb70 	bl	8010568 <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003e88:	e00e      	b.n	8003ea8 <InterProcessorTask+0xe0>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00c ffec 	bl	8010e6c <osSemaphoreRelease>
 						osDelay(100);
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	f00c fc4b 	bl	8010730 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00c ff7c 	bl	8010da0 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003ea8:	2358      	movs	r3, #88	; 0x58
 8003eaa:	4a39      	ldr	r2, [pc, #228]	; (8003f90 <InterProcessorTask+0x1c8>)
 8003eac:	21e6      	movs	r1, #230	; 0xe6
 8003eae:	4837      	ldr	r0, [pc, #220]	; (8003f8c <InterProcessorTask+0x1c4>)
 8003eb0:	f005 fa4a 	bl	8009348 <HAL_I2C_Master_Receive_IT>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e7      	bne.n	8003e8a <InterProcessorTask+0xc2>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	f00c fba1 	bl	8010608 <osThreadFlagsWait>
 8003ec6:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f00c ffcd 	bl	8010e6c <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d14e      	bne.n	8003f7a <InterProcessorTask+0x1b2>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <InterProcessorTask+0x1c8>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <InterProcessorTask+0x1cc>)
 8003ee2:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <InterProcessorTask+0x1c8>)
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <InterProcessorTask+0x1cc>)
 8003eea:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	e01c      	b.n	8003f2c <InterProcessorTask+0x164>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <InterProcessorTask+0x1c8>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	2208      	movs	r2, #8
 8003efc:	4619      	mov	r1, r3
 8003efe:	4825      	ldr	r0, [pc, #148]	; (8003f94 <InterProcessorTask+0x1cc>)
 8003f00:	f016 fa8e 	bl	801a420 <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3305      	adds	r3, #5
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <InterProcessorTask+0x1c8>)
 8003f0c:	4413      	add	r3, r2
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4619      	mov	r1, r3
 8003f12:	4821      	ldr	r0, [pc, #132]	; (8003f98 <InterProcessorTask+0x1d0>)
 8003f14:	f016 fa84 	bl	801a420 <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <InterProcessorTask+0x1d4>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2200      	movs	r2, #0
 8003f20:	491c      	ldr	r1, [pc, #112]	; (8003f94 <InterProcessorTask+0x1cc>)
 8003f22:	f00d f881 	bl	8011028 <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	dddf      	ble.n	8003ef2 <InterProcessorTask+0x12a>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f43f af74 	beq.w	8003e26 <InterProcessorTask+0x5e>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 31ff 	mov.w	r1, #4294967295
 8003f46:	4618      	mov	r0, r3
 8003f48:	f00c ff2a 	bl	8010da0 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003f4c:	bf00      	nop
 8003f4e:	2364      	movs	r3, #100	; 0x64
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2306      	movs	r3, #6
 8003f54:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <InterProcessorTask+0x1d8>)
 8003f56:	21e6      	movs	r1, #230	; 0xe6
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <InterProcessorTask+0x1c4>)
 8003f5a:	f005 f80b 	bl	8008f74 <HAL_I2C_Master_Transmit>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f4      	bne.n	8003f4e <InterProcessorTask+0x186>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <InterProcessorTask+0x1c0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00c ff7f 	bl	8010e6c <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <InterProcessorTask+0x1d4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f00d f93e 	bl	80111f4 <osMessageQueueReset>

					break;
 8003f78:	e000      	b.n	8003f7c <InterProcessorTask+0x1b4>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003f7a:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003f7c:	e72a      	b.n	8003dd4 <InterProcessorTask+0xc>
 8003f7e:	bf00      	nop
 8003f80:	20028670 	.word	0x20028670
 8003f84:	20027b48 	.word	0x20027b48
 8003f88:	20027c48 	.word	0x20027c48
 8003f8c:	20028244 	.word	0x20028244
 8003f90:	2002892c 	.word	0x2002892c
 8003f94:	20028678 	.word	0x20028678
 8003f98:	20028680 	.word	0x20028680
 8003f9c:	20027c58 	.word	0x20027c58
 8003fa0:	0801bd90 	.word	0x0801bd90

08003fa4 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f00c fa76 	bl	80104a4 <osThreadFlagsSet>
	test_1 = 1;
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2002808c 	.word	0x2002808c
 8003fcc:	20000c43 	.word	0x20000c43

08003fd0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00c fa60 	bl	80104a4 <osThreadFlagsSet>
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2002808c 	.word	0x2002808c

08003ff0 <LL_AHB2_GRP1_EnableClock>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4313      	orrs	r3, r2
 8004006:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	4603      	mov	r3, r0
 800402a:	71fb      	strb	r3, [r7, #7]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C_LockHandle);
#else
	BSP_LED_Init(LED_BLUE);
 800402c:	2000      	movs	r0, #0
 800402e:	f000 f8d1 	bl	80041d4 <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
 8004032:	2001      	movs	r0, #1
 8004034:	f000 f8ce 	bl	80041d4 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8004038:	2002      	movs	r0, #2
 800403a:	f000 f8cb 	bl	80041d4 <BSP_LED_Init>
#endif
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <FrontLightsSet+0x90>)
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6810      	ldr	r0, [r2, #0]
 8004056:	6851      	ldr	r1, [r2, #4]
 8004058:	c303      	stmia	r3!, {r0, r1}
 800405a:	7a12      	ldrb	r2, [r2, #8]
 800405c:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f103 0209 	add.w	r2, r3, #9
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <FrontLightsSet+0x94>)
 8004066:	6810      	ldr	r0, [r2, #0]
 8004068:	6851      	ldr	r1, [r2, #4]
 800406a:	c303      	stmia	r3!, {r0, r1}
 800406c:	7a12      	ldrb	r2, [r2, #8]
 800406e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
	osSemaphoreRelease(messageI2C_LockHandle);
#endif

#ifdef DONGLE_CODE
	    	if(led_left_PWM[LED_LEFT_TOP_R] > 0)
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <FrontLightsSet+0x90>)
 8004072:	79db      	ldrb	r3, [r3, #7]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <FrontLightsSet+0x3c>
	    	{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8004078:	2201      	movs	r2, #1
 800407a:	2102      	movs	r1, #2
 800407c:	4818      	ldr	r0, [pc, #96]	; (80040e0 <FrontLightsSet+0x98>)
 800407e:	f004 fe9f 	bl	8008dc0 <HAL_GPIO_WritePin>
 8004082:	e004      	b.n	800408e <FrontLightsSet+0x46>

	    	}
	    	else
			{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8004084:	2200      	movs	r2, #0
 8004086:	2102      	movs	r1, #2
 8004088:	4815      	ldr	r0, [pc, #84]	; (80040e0 <FrontLightsSet+0x98>)
 800408a:	f004 fe99 	bl	8008dc0 <HAL_GPIO_WritePin>
			}

	    	// if 1
	    	if (led_left_PWM[LED_LEFT_TOP_B] > 0)
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <FrontLightsSet+0x90>)
 8004090:	789b      	ldrb	r3, [r3, #2]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <FrontLightsSet+0x5c>
	    	{
	    		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8004096:	2201      	movs	r2, #1
 8004098:	2110      	movs	r1, #16
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409e:	f004 fe8f 	bl	8008dc0 <HAL_GPIO_WritePin>
 80040a2:	e005      	b.n	80040b0 <FrontLightsSet+0x68>
			}
	    	else
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2110      	movs	r1, #16
 80040a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ac:	f004 fe88 	bl	8008dc0 <HAL_GPIO_WritePin>
			}

	    	//if 2
	    	if (led_left_PWM[LED_LEFT_TOP_G] > 0)
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <FrontLightsSet+0x90>)
 80040b2:	78db      	ldrb	r3, [r3, #3]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <FrontLightsSet+0x7c>
	    	{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80040b8:	2201      	movs	r2, #1
 80040ba:	2101      	movs	r1, #1
 80040bc:	4808      	ldr	r0, [pc, #32]	; (80040e0 <FrontLightsSet+0x98>)
 80040be:	f004 fe7f 	bl	8008dc0 <HAL_GPIO_WritePin>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 80040c2:	e004      	b.n	80040ce <FrontLightsSet+0x86>
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2102      	movs	r1, #2
 80040c8:	4805      	ldr	r0, [pc, #20]	; (80040e0 <FrontLightsSet+0x98>)
 80040ca:	f004 fe79 	bl	8008dc0 <HAL_GPIO_WritePin>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000c44 	.word	0x20000c44
 80040dc:	20000c50 	.word	0x20000c50
 80040e0:	48000400 	.word	0x48000400

080040e4 <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af04      	add	r7, sp, #16
 80040ea:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80040ec:	2034      	movs	r0, #52	; 0x34
 80040ee:	f7ff ff98 	bl	8004022 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80040f2:	2035      	movs	r0, #53	; 0x35
 80040f4:	f7ff ff95 	bl	8004022 <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80040fc:	2001      	movs	r0, #1
 80040fe:	f00c fb17 	bl	8010730 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 8004102:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <ThreadFrontLightsTask+0xdc>)
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f107 010c 	add.w	r1, r7, #12
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	2200      	movs	r2, #0
 8004110:	f00c fffe 	bl	8011110 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e011      	b.n	800413e <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	425b      	negs	r3, r3
 8004126:	b2d9      	uxtb	r1, r3
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <ThreadFrontLightsTask+0xe0>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	460a      	mov	r2, r1
 8004130:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b08      	cmp	r3, #8
 8004142:	ddea      	ble.n	800411a <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e011      	b.n	800416e <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	425b      	negs	r3, r3
 8004156:	b2d9      	uxtb	r1, r3
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <ThreadFrontLightsTask+0xe4>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	460a      	mov	r2, r1
 8004160:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3301      	adds	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b08      	cmp	r3, #8
 8004172:	ddea      	ble.n	800414a <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <ThreadFrontLightsTask+0xe8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	4618      	mov	r0, r3
 800417e:	f00c fe0f 	bl	8010da0 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 8004182:	2364      	movs	r3, #100	; 0x64
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	2309      	movs	r3, #9
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <ThreadFrontLightsTask+0xe0>)
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2301      	movs	r3, #1
 8004190:	2216      	movs	r2, #22
 8004192:	2168      	movs	r1, #104	; 0x68
 8004194:	480e      	ldr	r0, [pc, #56]	; (80041d0 <ThreadFrontLightsTask+0xec>)
 8004196:	f005 f947 	bl	8009428 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 800419a:	2364      	movs	r3, #100	; 0x64
 800419c:	9302      	str	r3, [sp, #8]
 800419e:	2309      	movs	r3, #9
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <ThreadFrontLightsTask+0xe4>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2301      	movs	r3, #1
 80041a8:	2216      	movs	r2, #22
 80041aa:	216a      	movs	r1, #106	; 0x6a
 80041ac:	4808      	ldr	r0, [pc, #32]	; (80041d0 <ThreadFrontLightsTask+0xec>)
 80041ae:	f005 f93b 	bl	8009428 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <ThreadFrontLightsTask+0xe8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f00c fe58 	bl	8010e6c <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 80041bc:	e79c      	b.n	80040f8 <ThreadFrontLightsTask+0x14>
 80041be:	bf00      	nop
 80041c0:	20027c50 	.word	0x20027c50
 80041c4:	20000c44 	.word	0x20000c44
 80041c8:	20000c50 	.word	0x20000c50
 80041cc:	20027c48 	.word	0x20027c48
 80041d0:	20028244 	.word	0x20028244

080041d4 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <BSP_LED_Init+0x28>
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7ff fefb 	bl	8003ff0 <LL_AHB2_GRP1_EnableClock>
 80041fa:	e00c      	b.n	8004216 <BSP_LED_Init+0x42>
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d103      	bne.n	800420a <BSP_LED_Init+0x36>
 8004202:	2002      	movs	r0, #2
 8004204:	f7ff fef4 	bl	8003ff0 <LL_AHB2_GRP1_EnableClock>
 8004208:	e005      	b.n	8004216 <BSP_LED_Init+0x42>
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d102      	bne.n	8004216 <BSP_LED_Init+0x42>
 8004210:	2002      	movs	r0, #2
 8004212:	f7ff feed 	bl	8003ff0 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN_DONGLE[Led];
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <BSP_LED_Init+0x8c>)
 800421a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800421e:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004220:	2301      	movs	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004228:	2302      	movs	r3, #2
 800422a:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT_DONGLE[Led], &gpioinitstruct);
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <BSP_LED_Init+0x90>)
 8004230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004234:	f107 020c 	add.w	r2, r7, #12
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f004 fc38 	bl	8008ab0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <BSP_LED_Init+0x90>)
 8004244:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <BSP_LED_Init+0x8c>)
 800424c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004250:	2200      	movs	r2, #0
 8004252:	4619      	mov	r1, r3
 8004254:	f004 fdb4 	bl	8008dc0 <HAL_GPIO_WritePin>
}
 8004258:	bf00      	nop
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	0801bd98 	.word	0x0801bd98
 8004264:	2000006c 	.word	0x2000006c

08004268 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_SET);
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <BSP_LED_On+0x2c>)
 8004276:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	4a06      	ldr	r2, [pc, #24]	; (8004298 <BSP_LED_On+0x30>)
 800427e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004282:	2201      	movs	r2, #1
 8004284:	4619      	mov	r1, r3
 8004286:	f004 fd9b 	bl	8008dc0 <HAL_GPIO_WritePin>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	2000006c 	.word	0x2000006c
 8004298:	0801bd98 	.word	0x0801bd98

0800429c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led], GPIO_PIN_RESET);
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <BSP_LED_Off+0x2c>)
 80042aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	4a06      	ldr	r2, [pc, #24]	; (80042cc <BSP_LED_Off+0x30>)
 80042b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042b6:	2200      	movs	r2, #0
 80042b8:	4619      	mov	r1, r3
 80042ba:	f004 fd81 	bl	8008dc0 <HAL_GPIO_WritePin>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2000006c 	.word	0x2000006c
 80042cc:	0801bd98 	.word	0x0801bd98

080042d0 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <BSP_LED_Toggle+0x28>)
 80042de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <BSP_LED_Toggle+0x2c>)
 80042e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ea:	4619      	mov	r1, r3
 80042ec:	f004 fd80 	bl	8008df0 <HAL_GPIO_TogglePin>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	2000006c 	.word	0x2000006c
 80042fc:	0801bd98 	.word	0x0801bd98

08004300 <LL_RCC_LSE_SetDriveCapability>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f023 0218 	bic.w	r2, r3, #24
 8004314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004330:	f002 fad2 	bl	80068d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004334:	f000 f81e 	bl	8004374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004338:	f7fe fc76 	bl	8002c28 <MX_GPIO_Init>
  MX_DMA_Init();
 800433c:	f7fd fba7 	bl	8001a8e <MX_DMA_Init>
  MX_ADC1_Init();
 8004340:	f7fc fd7e 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 8004344:	f000 ff28 	bl	8005198 <MX_RTC_Init>
  MX_TIM2_Init();
 8004348:	f001 fd70 	bl	8005e2c <MX_TIM2_Init>
  MX_RF_Init();
 800434c:	f000 ff0c 	bl	8005168 <MX_RF_Init>
  MX_I2C1_Init();
 8004350:	f7ff fb08 	bl	8003964 <MX_I2C1_Init>
  MX_COMP1_Init();
 8004354:	f7fd fa88 	bl	8001868 <MX_COMP1_Init>
  MX_TIM16_Init();
 8004358:	f001 fdde 	bl	8005f18 <MX_TIM16_Init>
//  MX_IWDG_Init();
  MX_USB_Device_Init();
 800435c:	f014 ffc2 	bl	80192e4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 8004360:	f002 f9f8 	bl	8006754 <MX_TSC_Init>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8004364:	f00b ff8a 	bl	801027c <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004368:	f7fc ff9a 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 800436c:	f00b ffba 	bl	80102e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004370:	e7fe      	b.n	8004370 <main+0x44>
	...

08004374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b0ae      	sub	sp, #184	; 0xb8
 8004378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800437a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800437e:	2248      	movs	r2, #72	; 0x48
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f016 f857 	bl	801a436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004388:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
 8004398:	615a      	str	r2, [r3, #20]
 800439a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	2250      	movs	r2, #80	; 0x50
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f016 f847 	bl	801a436 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b6:	f043 0310 	orr.w	r3, r3, #16
 80043ba:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c6:	f043 0303 	orr.w	r3, r3, #3
 80043ca:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7ff ff97 	bl	8004300 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d2:	4b3a      	ldr	r3, [pc, #232]	; (80044bc <SystemClock_Config+0x148>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043da:	4a38      	ldr	r2, [pc, #224]	; (80044bc <SystemClock_Config+0x148>)
 80043dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b36      	ldr	r3, [pc, #216]	; (80044bc <SystemClock_Config+0x148>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80043ee:	230f      	movs	r3, #15
 80043f0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043f6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043f8:	2301      	movs	r3, #1
 80043fa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004400:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004408:	2305      	movs	r3, #5
 800440a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800440e:	2300      	movs	r3, #0
 8004410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004414:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004418:	4618      	mov	r0, r3
 800441a:	f007 ff9f 	bl	800c35c <HAL_RCC_OscConfig>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004424:	f000 f85e 	bl	80044e4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004428:	236f      	movs	r3, #111	; 0x6f
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800442c:	2302      	movs	r3, #2
 800442e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004430:	2300      	movs	r3, #0
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004434:	2300      	movs	r3, #0
 8004436:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004438:	2300      	movs	r3, #0
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800443c:	2300      	movs	r3, #0
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004440:	2300      	movs	r3, #0
 8004442:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004448:	2101      	movs	r1, #1
 800444a:	4618      	mov	r0, r3
 800444c:	f008 fae4 	bl	800ca18 <HAL_RCC_ClockConfig>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8004456:	f000 f845 	bl	80044e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800445a:	f643 5304 	movw	r3, #15620	; 0x3d04
 800445e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004460:	2306      	movs	r3, #6
 8004462:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004468:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800446a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800446e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004470:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004474:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004476:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800447a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800447c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004482:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800448e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004492:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800449a:	2302      	movs	r3, #2
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800449e:	2300      	movs	r3, #0
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f008 ff0e 	bl	800d2c6 <HAL_RCCEx_PeriphCLKConfig>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <SystemClock_Config+0x140>
  {
    Error_Handler();
 80044b0:	f000 f818 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80044b4:	bf00      	nop
 80044b6:	37b8      	adds	r7, #184	; 0xb8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	58000400 	.word	0x58000400

080044c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044d2:	f002 fa21 	bl	8006918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00

080044e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <MasterThreadTask>:
uint32_t startTime = 0;
uint32_t viveStateVar = 0;
uint64_t waitTime = 0;
uint32_t lightsSimpleMessageAck = 0;

void MasterThreadTask(void *argument) {
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	6078      	str	r0, [r7, #4]
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80044fc:	4b81      	ldr	r3, [pc, #516]	; (8004704 <MasterThreadTask+0x210>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	2200      	movs	r2, #0
 8004506:	4980      	ldr	r1, [pc, #512]	; (8004708 <MasterThreadTask+0x214>)
 8004508:	f00c fe02 	bl	8011110 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 800450c:	4b7f      	ldr	r3, [pc, #508]	; (800470c <MasterThreadTask+0x218>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f00c fe6f 	bl	80111f4 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 8004516:	4b7d      	ldr	r3, [pc, #500]	; (800470c <MasterThreadTask+0x218>)
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	2200      	movs	r2, #0
 800451e:	497c      	ldr	r1, [pc, #496]	; (8004710 <MasterThreadTask+0x21c>)
 8004520:	f00c fd82 	bl	8011028 <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004524:	4b7b      	ldr	r3, [pc, #492]	; (8004714 <MasterThreadTask+0x220>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f040 8083 	bne.w	8004634 <MasterThreadTask+0x140>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <MasterThreadTask+0x214>)
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d17e      	bne.n	8004634 <MasterThreadTask+0x140>
			logEnabled = 1;
 8004536:	4b77      	ldr	r3, [pc, #476]	; (8004714 <MasterThreadTask+0x220>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 800453c:	4b76      	ldr	r3, [pc, #472]	; (8004718 <MasterThreadTask+0x224>)
 800453e:	4a72      	ldr	r2, [pc, #456]	; (8004708 <MasterThreadTask+0x214>)
 8004540:	6811      	ldr	r1, [r2, #0]
 8004542:	6019      	str	r1, [r3, #0]
 8004544:	8892      	ldrh	r2, [r2, #4]
 8004546:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 8004548:	f000 f97e 	bl	8004848 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 800454c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004550:	f00c f8ee 	bl	8010730 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 8004554:	f002 f9f2 	bl	800693c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	4b70      	ldr	r3, [pc, #448]	; (800471c <MasterThreadTask+0x228>)
 800455c:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 800455e:	f000 f8f5 	bl	800474c <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 8004562:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <MasterThreadTask+0x22c>)
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <MasterThreadTask+0x230>)
 8004568:	4a6f      	ldr	r2, [pc, #444]	; (8004728 <MasterThreadTask+0x234>)
 800456a:	4970      	ldr	r1, [pc, #448]	; (800472c <MasterThreadTask+0x238>)
 800456c:	4870      	ldr	r0, [pc, #448]	; (8004730 <MasterThreadTask+0x23c>)
 800456e:	f000 f9f3 	bl	8004958 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 8004572:	486f      	ldr	r0, [pc, #444]	; (8004730 <MasterThreadTask+0x23c>)
 8004574:	f013 ff0c 	bl	8018390 <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 8004578:	4b62      	ldr	r3, [pc, #392]	; (8004704 <MasterThreadTask+0x210>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	2200      	movs	r2, #0
 8004580:	4961      	ldr	r1, [pc, #388]	; (8004708 <MasterThreadTask+0x214>)
 8004582:	f00c fdc5 	bl	8011110 <osMessageQueueGet>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d12c      	bne.n	80045e6 <MasterThreadTask+0xf2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 800458c:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <MasterThreadTask+0x214>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <MasterThreadTask+0xae>

						masterExitRoutine();
 8004594:	f000 f9a6 	bl	80048e4 <masterExitRoutine>
						logEnabled = 0;
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <MasterThreadTask+0x220>)
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 800459e:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 80045a0:	e0ae      	b.n	8004700 <MasterThreadTask+0x20c>
					}

					else if (togLogMessageReceived.status == TARE_NOW){
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <MasterThreadTask+0x214>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d11d      	bne.n	80045e6 <MasterThreadTask+0xf2>
						lightsSimpleMessageAck = 0x03; // cyan (green + blue)
 80045aa:	4b62      	ldr	r3, [pc, #392]	; (8004734 <MasterThreadTask+0x240>)
 80045ac:	2203      	movs	r2, #3
 80045ae:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045b0:	4b61      	ldr	r3, [pc, #388]	; (8004738 <MasterThreadTask+0x244>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	2200      	movs	r2, #0
 80045b8:	495e      	ldr	r1, [pc, #376]	; (8004734 <MasterThreadTask+0x240>)
 80045ba:	f00c fd35 	bl	8011028 <osMessageQueuePut>

						IMU_sendTareNow();
 80045be:	f7fd fdcb 	bl	8002158 <IMU_sendTareNow>

						osDelay(100);
 80045c2:	2064      	movs	r0, #100	; 0x64
 80045c4:	f00c f8b4 	bl	8010730 <osDelay>

						IMU_sendPersistTare();
 80045c8:	f7fd fdfc 	bl	80021c4 <IMU_sendPersistTare>

						osDelay(100);
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	f00c f8af 	bl	8010730 <osDelay>

						lightsSimpleMessageAck = 0;
 80045d2:	4b58      	ldr	r3, [pc, #352]	; (8004734 <MasterThreadTask+0x240>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
						osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageAck, 0U, 0);
 80045d8:	4b57      	ldr	r3, [pc, #348]	; (8004738 <MasterThreadTask+0x244>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	2300      	movs	r3, #0
 80045de:	2200      	movs	r2, #0
 80045e0:	4954      	ldr	r1, [pc, #336]	; (8004734 <MasterThreadTask+0x240>)
 80045e2:	f00c fd21 	bl	8011028 <osMessageQueuePut>
					}
				}

				// add delay to wait for next transmission period
				waitTime = PACKET_SEND_PERIOD - (HAL_GetTick() - startTime);
 80045e6:	4b4d      	ldr	r3, [pc, #308]	; (800471c <MasterThreadTask+0x228>)
 80045e8:	681c      	ldr	r4, [r3, #0]
 80045ea:	f002 f9a7 	bl	800693c <HAL_GetTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	1ae3      	subs	r3, r4, r3
 80045f2:	3364      	adds	r3, #100	; 0x64
 80045f4:	f04f 0400 	mov.w	r4, #0
 80045f8:	4a50      	ldr	r2, [pc, #320]	; (800473c <MasterThreadTask+0x248>)
 80045fa:	e9c2 3400 	strd	r3, r4, [r2]
				// if wait time is less than zero (i.e. the border packet send took longer than PACKET_SEND_PERIOD)
				// or greater than the allotted PACKET_SEND_PERIOD
				if( (waitTime <= 0) || (waitTime > PACKET_SEND_PERIOD)){
 80045fe:	4b4f      	ldr	r3, [pc, #316]	; (800473c <MasterThreadTask+0x248>)
 8004600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004604:	4323      	orrs	r3, r4
 8004606:	d006      	beq.n	8004616 <MasterThreadTask+0x122>
 8004608:	4b4c      	ldr	r3, [pc, #304]	; (800473c <MasterThreadTask+0x248>)
 800460a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800460e:	2c00      	cmp	r4, #0
 8004610:	bf08      	it	eq
 8004612:	2b65      	cmpeq	r3, #101	; 0x65
 8004614:	d307      	bcc.n	8004626 <MasterThreadTask+0x132>
					waitTime = 0; //set to zero (i.e. dont wait)
 8004616:	4a49      	ldr	r2, [pc, #292]	; (800473c <MasterThreadTask+0x248>)
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	f04f 0400 	mov.w	r4, #0
 8004620:	e9c2 3400 	strd	r3, r4, [r2]
 8004624:	e005      	b.n	8004632 <MasterThreadTask+0x13e>
				}
				else{
					osDelay(waitTime);
 8004626:	4b45      	ldr	r3, [pc, #276]	; (800473c <MasterThreadTask+0x248>)
 8004628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800462c:	4618      	mov	r0, r3
 800462e:	f00c f87f 	bl	8010730 <osDelay>
				startTime = HAL_GetTick();
 8004632:	e78f      	b.n	8004554 <MasterThreadTask+0x60>
				}

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <MasterThreadTask+0x220>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d109      	bne.n	8004650 <MasterThreadTask+0x15c>
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <MasterThreadTask+0x214>)
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <MasterThreadTask+0x15c>
			logEnabled = 0;
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <MasterThreadTask+0x220>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800464a:	f000 f94b 	bl	80048e4 <masterExitRoutine>
 800464e:	e057      	b.n	8004700 <MasterThreadTask+0x20c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <MasterThreadTask+0x24c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d141      	bne.n	80046dc <MasterThreadTask+0x1e8>
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <MasterThreadTask+0x214>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d13d      	bne.n	80046dc <MasterThreadTask+0x1e8>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <MasterThreadTask+0x224>)
 8004662:	4a29      	ldr	r2, [pc, #164]	; (8004708 <MasterThreadTask+0x214>)
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	8892      	ldrh	r2, [r2, #4]
 800466a:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <MasterThreadTask+0x220>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d104      	bne.n	800467e <MasterThreadTask+0x18a>
				logEnabled = 0;
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <MasterThreadTask+0x220>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 800467a:	f000 f933 	bl	80048e4 <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <MasterThreadTask+0x24c>)
 8004680:	2202      	movs	r2, #2
 8004682:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <MasterThreadTask+0x250>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f00c fb88 	bl	8010da0 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <MasterThreadTask+0x24c>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <MasterThreadTask+0x254>)
 8004698:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 800469a:	f000 f8d5 	bl	8004848 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 800469e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046a2:	f00c f845 	bl	8010730 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 80046a6:	4b17      	ldr	r3, [pc, #92]	; (8004704 <MasterThreadTask+0x210>)
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	2200      	movs	r2, #0
 80046b0:	4915      	ldr	r1, [pc, #84]	; (8004708 <MasterThreadTask+0x214>)
 80046b2:	f00c fd2d 	bl	8011110 <osMessageQueueGet>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f4      	bne.n	80046a6 <MasterThreadTask+0x1b2>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <MasterThreadTask+0x214>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <MasterThreadTask+0x1b2>

						osSemaphoreRelease(lightingLabDemoEndHandle);
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <MasterThreadTask+0x250>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f00c fbcf 	bl	8010e6c <osSemaphoreRelease>
						masterExitRoutine();
 80046ce:	f000 f909 	bl	80048e4 <masterExitRoutine>
						lightLabDemoEnabled = 0;
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <MasterThreadTask+0x24c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
						// break out of first while loop and wait until told to start logging again
						break;
 80046d8:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80046da:	e011      	b.n	8004700 <MasterThreadTask+0x20c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 80046dc:	4b18      	ldr	r3, [pc, #96]	; (8004740 <MasterThreadTask+0x24c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f47f af0b 	bne.w	80044fc <MasterThreadTask+0x8>
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <MasterThreadTask+0x214>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47f af06 	bne.w	80044fc <MasterThreadTask+0x8>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 80046f0:	4b14      	ldr	r3, [pc, #80]	; (8004744 <MasterThreadTask+0x250>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f00c fbb9 	bl	8010e6c <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <MasterThreadTask+0x24c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004700:	e6fc      	b.n	80044fc <MasterThreadTask+0x8>
 8004702:	bf00      	nop
 8004704:	20028080 	.word	0x20028080
 8004708:	20027b48 	.word	0x20027b48
 800470c:	20027c5c 	.word	0x20027c5c
 8004710:	0801bda0 	.word	0x0801bda0
 8004714:	20000c59 	.word	0x20000c59
 8004718:	20027c20 	.word	0x20027c20
 800471c:	20000c5c 	.word	0x20000c5c
 8004720:	200286fc 	.word	0x200286fc
 8004724:	20028714 	.word	0x20028714
 8004728:	20028750 	.word	0x20028750
 800472c:	20028690 	.word	0x20028690
 8004730:	20027b54 	.word	0x20027b54
 8004734:	20000c70 	.word	0x20000c70
 8004738:	20027c50 	.word	0x20027c50
 800473c:	20000c68 	.word	0x20000c68
 8004740:	20000c5a 	.word	0x20000c5a
 8004744:	20027c54 	.word	0x20027c54
 8004748:	20000c60 	.word	0x20000c60

0800474c <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 800474c:	b5b0      	push	{r4, r5, r7, lr}
 800474e:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <grabSensorData+0xc8>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d111      	bne.n	800477c <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004758:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <grabSensorData+0xcc>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	2200      	movs	r2, #0
 8004760:	492e      	ldr	r1, [pc, #184]	; (800481c <grabSensorData+0xd0>)
 8004762:	f00c fcd5 	bl	8011110 <osMessageQueueGet>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <grabSensorData+0xd0>)
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <grabSensorData+0xd4>)
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	236c      	movs	r3, #108	; 0x6c
 8004776:	461a      	mov	r2, r3
 8004778:	f015 fe52 	bl	801a420 <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <grabSensorData+0xc8>)
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d113      	bne.n	80047ac <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <grabSensorData+0xd8>)
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	2200      	movs	r2, #0
 800478c:	4926      	ldr	r1, [pc, #152]	; (8004828 <grabSensorData+0xdc>)
 800478e:	f00c fcbf 	bl	8011110 <osMessageQueueGet>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004798:	4a23      	ldr	r2, [pc, #140]	; (8004828 <grabSensorData+0xdc>)
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <grabSensorData+0xe0>)
 800479c:	4614      	mov	r4, r2
 800479e:	461d      	mov	r5, r3
 80047a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047a8:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <grabSensorData+0xc8>)
 80047ae:	795b      	ldrb	r3, [r3, #5]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d113      	bne.n	80047dc <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <grabSensorData+0xe4>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	2200      	movs	r2, #0
 80047bc:	491d      	ldr	r1, [pc, #116]	; (8004834 <grabSensorData+0xe8>)
 80047be:	f00c fca7 	bl	8011110 <osMessageQueueGet>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <grabSensorData+0xe8>)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <grabSensorData+0xec>)
 80047cc:	4614      	mov	r4, r2
 80047ce:	461d      	mov	r5, r3
 80047d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047d8:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <grabSensorData+0xc8>)
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d115      	bne.n	8004810 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80047e4:	4b15      	ldr	r3, [pc, #84]	; (800483c <grabSensorData+0xf0>)
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	2200      	movs	r2, #0
 80047ec:	4914      	ldr	r1, [pc, #80]	; (8004840 <grabSensorData+0xf4>)
 80047ee:	f00c fc8f 	bl	8011110 <osMessageQueueGet>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <grabSensorData+0xf4>)
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <grabSensorData+0xf8>)
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	e895 0003 	ldmia.w	r5, {r0, r1}
 800480c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 8004810:	bf00      	nop
 8004812:	bdb0      	pop	{r4, r5, r7, pc}
 8004814:	20027c20 	.word	0x20027c20
 8004818:	2002809c 	.word	0x2002809c
 800481c:	20028690 	.word	0x20028690
 8004820:	0801bda8 	.word	0x0801bda8
 8004824:	20027c58 	.word	0x20027c58
 8004828:	20028750 	.word	0x20028750
 800482c:	0801be14 	.word	0x0801be14
 8004830:	20027b44 	.word	0x20027b44
 8004834:	200286fc 	.word	0x200286fc
 8004838:	0801be54 	.word	0x0801be54
 800483c:	20027c4c 	.word	0x20027c4c
 8004840:	20028714 	.word	0x20028714
 8004844:	0801be2c 	.word	0x0801be2c

08004848 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <masterEnterRoutine+0x80>)
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <masterEnterRoutine+0x84>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f00b fe22 	bl	80104a4 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <masterEnterRoutine+0x80>)
 8004862:	795b      	ldrb	r3, [r3, #5]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d118      	bne.n	800489a <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <masterEnterRoutine+0x88>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	2200      	movs	r2, #0
 8004872:	4918      	ldr	r1, [pc, #96]	; (80048d4 <masterEnterRoutine+0x8c>)
 8004874:	f00c fc4c 	bl	8011110 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004878:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <masterEnterRoutine+0x8c>)
 800487a:	2201      	movs	r2, #1
 800487c:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <masterEnterRoutine+0x88>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	2300      	movs	r3, #0
 8004884:	2200      	movs	r2, #0
 8004886:	4913      	ldr	r1, [pc, #76]	; (80048d4 <masterEnterRoutine+0x8c>)
 8004888:	f00c fbce 	bl	8011028 <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <masterEnterRoutine+0x90>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004894:	4618      	mov	r0, r3
 8004896:	f00c f813 	bl	80108c0 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <masterEnterRoutine+0x80>)
 800489c:	78db      	ldrb	r3, [r3, #3]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <masterEnterRoutine+0x94>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	f00b fdfb 	bl	80104a4 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <masterEnterRoutine+0x80>)
 80048b0:	791b      	ldrb	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <masterEnterRoutine+0x98>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f00b fdf1 	bl	80104a4 <osThreadFlagsSet>
	}
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20027c20 	.word	0x20027c20
 80048cc:	20027c2c 	.word	0x20027c2c
 80048d0:	20027c5c 	.word	0x20027c5c
 80048d4:	200280ac 	.word	0x200280ac
 80048d8:	20027c34 	.word	0x20027c34
 80048dc:	2002808c 	.word	0x2002808c
 80048e0:	200280a4 	.word	0x200280a4

080048e4 <masterExitRoutine>:

void masterExitRoutine(void) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <masterExitRoutine+0x5c>)
 80048ea:	789b      	ldrb	r3, [r3, #2]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <masterExitRoutine+0x60>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f00b fdd4 	bl	80104a4 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <masterExitRoutine+0x5c>)
 80048fe:	795b      	ldrb	r3, [r3, #5]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <masterExitRoutine+0x64>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f00c f819 	bl	8010940 <osTimerStop>
		viveStateVar = 0;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <masterExitRoutine+0x68>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <masterExitRoutine+0x5c>)
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d105      	bne.n	8004928 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <masterExitRoutine+0x6c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f00b fdbe 	bl	80104a4 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <masterExitRoutine+0x5c>)
 800492a:	791b      	ldrb	r3, [r3, #4]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8004930:	4b08      	ldr	r3, [pc, #32]	; (8004954 <masterExitRoutine+0x70>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f00b fdb4 	bl	80104a4 <osThreadFlagsSet>
	}

}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20027c20 	.word	0x20027c20
 8004944:	20027c2c 	.word	0x20027c2c
 8004948:	20027c34 	.word	0x20027c34
 800494c:	20000c60 	.word	0x20000c60
 8004950:	2002808c 	.word	0x2002808c
 8004954:	200280a4 	.word	0x200280a4

08004958 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 8004966:	f001 ffe9 	bl	800693c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8004972:	2200      	movs	r2, #0
 8004974:	4917      	ldr	r1, [pc, #92]	; (80049d4 <packetizeData+0x7c>)
 8004976:	4818      	ldr	r0, [pc, #96]	; (80049d8 <packetizeData+0x80>)
 8004978:	f009 f88d 	bl	800da96 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 800497c:	2200      	movs	r2, #0
 800497e:	4917      	ldr	r1, [pc, #92]	; (80049dc <packetizeData+0x84>)
 8004980:	4815      	ldr	r0, [pc, #84]	; (80049d8 <packetizeData+0x80>)
 8004982:	f009 f992 	bl	800dcaa <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8004986:	4915      	ldr	r1, [pc, #84]	; (80049dc <packetizeData+0x84>)
 8004988:	4812      	ldr	r0, [pc, #72]	; (80049d4 <packetizeData+0x7c>)
 800498a:	f000 fc35 	bl	80051f8 <RTC_ToEpoch>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	226c      	movs	r2, #108	; 0x6c
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	f015 fd3f 	bl	801a420 <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	336c      	adds	r3, #108	; 0x6c
 80049a6:	2218      	movs	r2, #24
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f015 fd38 	bl	801a420 <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3384      	adds	r3, #132	; 0x84
 80049b4:	2228      	movs	r2, #40	; 0x28
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f015 fd31 	bl	801a420 <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	33ac      	adds	r3, #172	; 0xac
 80049c2:	2218      	movs	r2, #24
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f015 fd2a 	bl	801a420 <memcpy>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	2002873c 	.word	0x2002873c
 80049d8:	2002876c 	.word	0x2002876c
 80049dc:	20028768 	.word	0x20028768

080049e0 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	d80f      	bhi.n	8004a12 <vector_push+0x32>
    	self->items[self->count++] = *item;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049f6:	1c51      	adds	r1, r2, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6619      	str	r1, [r3, #96]	; 0x60
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	6811      	ldr	r1, [r2, #0]
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	8892      	ldrh	r2, [r2, #4]
 8004a10:	809a      	strh	r2, [r3, #4]
    }
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <vector_pop>:

Pulse vector_pop(vector *self){
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01c      	beq.n	8004a6a <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	18ca      	adds	r2, r1, r3
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	6810      	ldr	r0, [r2, #0]
 8004a48:	6018      	str	r0, [r3, #0]
 8004a4a:	8892      	ldrh	r2, [r2, #4]
 8004a4c:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	6010      	str	r0, [r2, #0]
 8004a64:	889b      	ldrh	r3, [r3, #4]
 8004a66:	8093      	strh	r3, [r2, #4]
 8004a68:	e005      	b.n	8004a76 <vector_pop+0x58>
	}
	return self->items[0];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	6810      	ldr	r0, [r2, #0]
 8004a70:	6018      	str	r0, [r3, #0]
 8004a72:	8892      	ldrh	r2, [r2, #4]
 8004a74:	809a      	strh	r2, [r3, #4]
}
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <vector_get>:

Pulse vector_get(vector *self, int index)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db12      	blt.n	8004aba <vector_get+0x38>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d90d      	bls.n	8004aba <vector_get+0x38>
    	return self->items[index];
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	18ca      	adds	r2, r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6811      	ldr	r1, [r2, #0]
 8004ab2:	6019      	str	r1, [r3, #0]
 8004ab4:	8892      	ldrh	r2, [r2, #4]
 8004ab6:	809a      	strh	r2, [r3, #4]
 8004ab8:	e005      	b.n	8004ac6 <vector_get+0x44>
    }
    return self->items[0];
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	6810      	ldr	r0, [r2, #0]
 8004ac0:	6018      	str	r0, [r3, #0]
 8004ac2:	8892      	ldrh	r2, [r2, #4]
 8004ac4:	809a      	strh	r2, [r3, #4]
}
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <vector_clear>:

void vector_clear(vector *self){
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
	self->count = 0;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e00c      	b.n	8004b28 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2264      	movs	r2, #100	; 0x64
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	3310      	adds	r3, #16
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ffd8 	bl	8004ad2 <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	ddef      	ble.n	8004b0e <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	33d8      	adds	r3, #216	; 0xd8
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ffcd 	bl	8004ad2 <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ffc7 	bl	8004ad2 <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	889b      	ldrh	r3, [r3, #4]
 8004b62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004b66:	d303      	bcc.n	8004b70 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <consume_pulse+0x54>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004b6e:	e016      	b.n	8004b9e <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	889b      	ldrh	r3, [r3, #4]
 8004b74:	2b27      	cmp	r3, #39	; 0x27
 8004b76:	d907      	bls.n	8004b88 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <consume_pulse+0x54>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f813 	bl	8004bac <process_long_pulse>
}
 8004b86:	e00a      	b.n	8004b9e <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <consume_pulse+0x54>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d006      	beq.n	8004b9e <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f89c 	bl	8004cd0 <process_short_pulse>
			prev_pulse_short = 1;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <consume_pulse+0x54>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000c74 	.word	0x20000c74

08004bac <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d144      	bne.n	8004c48 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d03f      	beq.n	8004c48 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff22 	bl	8004a1e <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	885a      	ldrh	r2, [r3, #2]
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8004bf6:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 8004bfa:	330d      	adds	r3, #13
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f113 0f1e 	cmn.w	r3, #30
 8004c06:	db1c      	blt.n	8004c42 <process_long_pulse+0x96>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b1d      	cmp	r3, #29
 8004c0c:	dc19      	bgt.n	8004c42 <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	885a      	ldrh	r2, [r3, #2]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc fefd 	bl	8001a28 <reset>

                reset_cycle_long_pulses(self);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa64 	bl	80050fc <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa7c 	bl	8005132 <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa87 	bl	800514e <reset_cycle_short_pulses>
 8004c40:	e002      	b.n	8004c48 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa75 	bl	8005132 <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d02d      	beq.n	8004cb0 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	885a      	ldrh	r2, [r3, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	891b      	ldrh	r3, [r3, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e021      	b.n	8004caa <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004c66:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <process_long_pulse+0x120>)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c6e:	8a7a      	ldrh	r2, [r7, #18]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004c76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c7a:	f113 0f1e 	cmn.w	r3, #30
 8004c7e:	db11      	blt.n	8004ca4 <process_long_pulse+0xf8>
 8004c80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c84:	2b1d      	cmp	r3, #29
 8004c86:	dc0d      	bgt.n	8004ca4 <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2264      	movs	r2, #100	; 0x64
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	3310      	adds	r3, #16
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fea1 	bl	80049e0 <vector_push>
                pulse_classified = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	77fb      	strb	r3, [r7, #31]
                break;
 8004ca2:	e005      	b.n	8004cb0 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	ddda      	ble.n	8004c66 <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe8e 	bl	80049e0 <vector_push>
    }
}
 8004cc4:	bf00      	nop
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	0801be6c 	.word	0x0801be6c

08004cd0 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00f      	beq.n	8004d02 <process_short_pulse+0x32>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d208      	bcs.n	8004d02 <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	33d8      	adds	r3, #216	; 0xd8
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fe72 	bl	80049e0 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f805 	bl	8004d0c <process_cycle_fix>
	}
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b0a2      	sub	sp, #136	; 0x88
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004d14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004d1e:	2300      	movs	r3, #0
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <process_cycle_fix+0x2a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80b7 	beq.w	8004ea4 <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d80d      	bhi.n	8004d5a <process_cycle_fix+0x4e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <process_cycle_fix+0x4e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d60:	e090      	b.n	8004e84 <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d68:	2164      	movs	r1, #100	; 0x64
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3370      	adds	r3, #112	; 0x70
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d07e      	beq.n	8004e7a <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	891a      	ldrh	r2, [r3, #8]
 8004d80:	49c0      	ldr	r1, [pc, #768]	; (8005084 <process_cycle_fix+0x378>)
 8004d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d96:	e03e      	b.n	8004e16 <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9c:	2264      	movs	r2, #100	; 0x64
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	3310      	adds	r3, #16
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	18d1      	adds	r1, r2, r3
 8004da8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fe66 	bl	8004a82 <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004dc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004dd0:	1acb      	subs	r3, r1, r3
 8004dd2:	441a      	add	r2, r3
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004dde:	440b      	add	r3, r1
 8004de0:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dee:	4413      	add	r3, r2
 8004df0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004df4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004df8:	4413      	add	r3, r2
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e06:	440b      	add	r3, r1
 8004e08:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e10:	3301      	adds	r3, #1
 8004e12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3bb      	bcc.n	8004d98 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d929      	bls.n	8004e7a <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e30:	4413      	add	r3, r2
 8004e32:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e74:	440b      	add	r3, r1
 8004e76:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f77f af6a 	ble.w	8004d62 <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7fc fd41 	bl	8001924 <process_pulse_lengths>
 8004ea2:	e008      	b.n	8004eb6 <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	1e5a      	subs	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fc fd98 	bl	80019f8 <get_phase>
 8004ec8:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f2c0 80b5 	blt.w	800503c <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f015 faab 	bl	801a436 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef0:	105b      	asrs	r3, r3, #1
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	891a      	ldrh	r2, [r3, #8]
 8004ef8:	4962      	ldr	r1, [pc, #392]	; (8005084 <process_cycle_fix+0x378>)
 8004efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004efc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f00:	4413      	add	r3, r2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f1e:	e04a      	b.n	8004fb6 <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004f26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fda8 	bl	8004a82 <vector_get>
            uint32_t input_idx = p.input_idx;
 8004f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f36:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004f38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004f4e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f52:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004f56:	d32b      	bcc.n	8004fb0 <process_cycle_fix+0x2a4>
 8004f58:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f5c:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d825      	bhi.n	8004fb0 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <process_cycle_fix+0x280>
 8004f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f7e:	4413      	add	r3, r2
 8004f80:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004f84:	889a      	ldrh	r2, [r3, #4]
 8004f86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d211      	bcs.n	8004fb0 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f94:	4413      	add	r3, r2
 8004f96:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f9a:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004fac:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d3ae      	bcc.n	8004f20 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc6:	e034      	b.n	8005032 <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d028      	beq.n	800502c <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004ff6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005002:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005088 <process_cycle_fix+0x37c>
 8005006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800500a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800508c <process_cycle_fix+0x380>
 800500e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005026:	3204      	adds	r2, #4
 8005028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 800502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502e:	3301      	adds	r3, #1
 8005030:	67bb      	str	r3, [r7, #120]	; 0x78
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005038:	429a      	cmp	r2, r3
 800503a:	d3c5      	bcc.n	8004fc8 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	2b00      	cmp	r3, #0
 8005040:	db06      	blt.n	8005050 <process_cycle_fix+0x344>
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	2b03      	cmp	r3, #3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e008      	b.n	8005062 <process_cycle_fix+0x356>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02b      	beq.n	80050be <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	891a      	ldrh	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	2b00      	cmp	r3, #0
 8005074:	db0c      	blt.n	8005090 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b04      	cmp	r3, #4
 800507c:	d908      	bls.n	8005090 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 800507e:	22c8      	movs	r2, #200	; 0xc8
 8005080:	e007      	b.n	8005092 <process_cycle_fix+0x386>
 8005082:	bf00      	nop
 8005084:	0801be6c 	.word	0x0801be6c
 8005088:	40490fdb 	.word	0x40490fdb
 800508c:	46023400 	.word	0x46023400
 8005090:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050a6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fd fb0f 	bl	80026dc <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f81c 	bl	80050fc <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f834 	bl	8005132 <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f83f 	bl	800514e <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	891a      	ldrh	r2, [r3, #8]
 80050d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	4413      	add	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050e0:	330d      	adds	r3, #13
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]
}
 80050f2:	bf00      	nop
 80050f4:	3788      	adds	r7, #136	; 0x88
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop

080050fc <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e00c      	b.n	8005124 <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2264      	movs	r2, #100	; 0x64
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	3310      	adds	r3, #16
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fcda 	bl	8004ad2 <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	ddef      	ble.n	800510a <reset_cycle_long_pulses+0xe>
	}
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fcc6 	bl	8004ad2 <vector_clear>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	33d8      	adds	r3, #216	; 0xd8
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fcb9 	bl	8004ad2 <vector_clear>
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0

}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800518e:	bf00      	nop
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <MX_RTC_Init+0x34>)
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <MX_RTC_Init+0x38>)
 80051a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <MX_RTC_Init+0x34>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <MX_RTC_Init+0x34>)
 80051aa:	220f      	movs	r2, #15
 80051ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <MX_RTC_Init+0x34>)
 80051b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80051b4:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051b6:	4805      	ldr	r0, [pc, #20]	; (80051cc <MX_RTC_Init+0x34>)
 80051b8:	f008 fb0b 	bl	800d7d2 <HAL_RTC_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80051c2:	f7ff f98f 	bl	80044e4 <Error_Handler>
  }

}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2002876c 	.word	0x2002876c
 80051d0:	40002800 	.word	0x40002800

080051d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <HAL_RTC_MspInit+0x20>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051e6:	f7ff ffc6 	bl	8005176 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40002800 	.word	0x40002800

080051f8 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	f1c3 030e 	rsb	r3, r3, #14
 800520a:	4a44      	ldr	r2, [pc, #272]	; (800531c <RTC_ToEpoch+0x124>)
 800520c:	fb82 1203 	smull	r1, r2, r2, r3
 8005210:	1052      	asrs	r2, r2, #1
 8005212:	17db      	asrs	r3, r3, #31
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	b29a      	uxth	r2, r3
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	b29b      	uxth	r3, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	b29b      	uxth	r3, r3
 8005226:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800522a:	3310      	adds	r3, #16
 800522c:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	785a      	ldrb	r2, [r3, #1]
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	4619      	mov	r1, r3
 8005236:	0049      	lsls	r1, r1, #1
 8005238:	440b      	add	r3, r1
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4413      	add	r3, r2
 8005240:	b2db      	uxtb	r3, r3
 8005242:	3b03      	subs	r3, #3
 8005244:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	789b      	ldrb	r3, [r3, #2]
 800524a:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 800524c:	7cfa      	ldrb	r2, [r7, #19]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	4413      	add	r3, r2
 8005258:	3302      	adds	r3, #2
 800525a:	4a31      	ldr	r2, [pc, #196]	; (8005320 <RTC_ToEpoch+0x128>)
 800525c:	fb82 1203 	smull	r1, r2, r2, r3
 8005260:	1052      	asrs	r2, r2, #1
 8005262:	17db      	asrs	r3, r3, #31
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 800526e:	8abb      	ldrh	r3, [r7, #20]
 8005270:	f240 126d 	movw	r2, #365	; 0x16d
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	461a      	mov	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8005280:	8abb      	ldrh	r3, [r7, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 800528e:	8abb      	ldrh	r3, [r7, #20]
 8005290:	425b      	negs	r3, r3
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <RTC_ToEpoch+0x12c>)
 8005294:	fb82 1203 	smull	r1, r2, r2, r3
 8005298:	1152      	asrs	r2, r2, #5
 800529a:	17db      	asrs	r3, r3, #31
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 80052a6:	8abb      	ldrh	r3, [r7, #20]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <RTC_ToEpoch+0x12c>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 80052c0:	3b2d      	subs	r3, #45	; 0x2d
 80052c2:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4b18      	ldr	r3, [pc, #96]	; (8005328 <RTC_ToEpoch+0x130>)
 80052c8:	4413      	add	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a17      	ldr	r2, [pc, #92]	; (800532c <RTC_ToEpoch+0x134>)
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80052e0:	fb03 f302 	mul.w	r3, r3, r2
 80052e4:	461a      	mov	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	461a      	mov	r2, r3
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	461a      	mov	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	789b      	ldrb	r3, [r3, #2]
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

	return JDN;
 800530e:	68fb      	ldr	r3, [r7, #12]
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	2aaaaaab 	.word	0x2aaaaaab
 8005320:	66666667 	.word	0x66666667
 8005324:	51eb851f 	.word	0x51eb851f
 8005328:	ffdac274 	.word	0xffdac274
 800532c:	00015180 	.word	0x00015180

08005330 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b095      	sub	sp, #84	; 0x54
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005384:	33c0      	adds	r3, #192	; 0xc0
 8005386:	4a7c      	ldr	r2, [pc, #496]	; (8005578 <RTC_FromEpoch+0x248>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	0bda      	lsrs	r2, r3, #15
 800538e:	4b7b      	ldr	r3, [pc, #492]	; (800557c <RTC_FromEpoch+0x24c>)
 8005390:	4413      	add	r3, r2
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 800539a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800539e:	0864      	lsrs	r4, r4, #1
 80053a0:	ea4f 0333 	mov.w	r3, r3, rrx
 80053a4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	4a74      	ldr	r2, [pc, #464]	; (8005580 <RTC_FromEpoch+0x250>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4619      	mov	r1, r3
 80053c2:	0109      	lsls	r1, r1, #4
 80053c4:	1acb      	subs	r3, r1, r3
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	4a69      	ldr	r2, [pc, #420]	; (8005580 <RTC_FromEpoch+0x250>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	0109      	lsls	r1, r1, #4
 80053ee:	1acb      	subs	r3, r1, r3
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	4a60      	ldr	r2, [pc, #384]	; (8005584 <RTC_FromEpoch+0x254>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	b29a      	uxth	r2, r3
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	b29b      	uxth	r3, r3
 8005414:	4619      	mov	r1, r3
 8005416:	0049      	lsls	r1, r1, #1
 8005418:	440b      	add	r3, r1
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b29b      	uxth	r3, r3
 8005422:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 8005426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800542a:	f04f 0207 	mov.w	r2, #7
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	f7fb fb6b 	bl	8000b0c <__aeabi_uldivmod>
 8005436:	461c      	mov	r4, r3
 8005438:	4613      	mov	r3, r2
 800543a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8005444:	332c      	adds	r3, #44	; 0x2c
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3303      	adds	r3, #3
 800544e:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <RTC_FromEpoch+0x258>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	0bdb      	lsrs	r3, r3, #15
 8005456:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	4a4c      	ldr	r2, [pc, #304]	; (800558c <RTC_FromEpoch+0x25c>)
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	3303      	adds	r3, #3
 800546e:	4a48      	ldr	r2, [pc, #288]	; (8005590 <RTC_FromEpoch+0x260>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	09db      	lsrs	r3, r3, #7
 8005476:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f240 52b5 	movw	r2, #1461	; 0x5b5
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	3302      	adds	r3, #2
 8005494:	4a3f      	ldr	r2, [pc, #252]	; (8005594 <RTC_FromEpoch+0x264>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	b299      	uxth	r1, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	011a      	lsls	r2, r3, #4
 80054ac:	4413      	add	r3, r2
 80054ae:	3302      	adds	r3, #2
 80054b0:	4a39      	ldr	r2, [pc, #228]	; (8005598 <RTC_FromEpoch+0x268>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	1acb      	subs	r3, r1, r3
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4932      	ldr	r1, [pc, #200]	; (8005598 <RTC_FromEpoch+0x268>)
 80054ce:	fba1 1303 	umull	r1, r3, r1, r3
 80054d2:	08db      	lsrs	r3, r3, #3
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	0049      	lsls	r1, r1, #1
 80054da:	440b      	add	r3, r1
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3303      	adds	r3, #3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	0092      	lsls	r2, r2, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	461a      	mov	r2, r3
 80054f8:	0091      	lsls	r1, r2, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	460b      	mov	r3, r1
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	b29a      	uxth	r2, r3
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4922      	ldr	r1, [pc, #136]	; (8005598 <RTC_FromEpoch+0x268>)
 8005510:	fba1 1303 	umull	r1, r3, r1, r3
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	b29b      	uxth	r3, r3
 8005518:	4413      	add	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8005520:	b29b      	uxth	r3, r3
 8005522:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 8005526:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3330      	adds	r3, #48	; 0x30
 800552e:	b2da      	uxtb	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 8005534:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005538:	b2da      	uxtb	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 800553e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005542:	b2da      	uxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8005548:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800554c:	b2da      	uxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 8005552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005556:	b2da      	uxtb	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 800555c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 8005566:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	709a      	strb	r2, [r3, #2]
}
 8005570:	bf00      	nop
 8005572:	3754      	adds	r7, #84	; 0x54
 8005574:	46bd      	mov	sp, r7
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	c22e4507 	.word	0xc22e4507
 800557c:	004a7b17 	.word	0x004a7b17
 8005580:	88888889 	.word	0x88888889
 8005584:	aaaaaaab 	.word	0xaaaaaaab
 8005588:	396b06bd 	.word	0x396b06bd
 800558c:	00023ab1 	.word	0x00023ab1
 8005590:	166db073 	.word	0x166db073
 8005594:	d62b80d7 	.word	0xd62b80d7
 8005598:	cccccccd 	.word	0xcccccccd

0800559c <LL_AHB3_GRP1_EnableClock>:
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80055a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80055b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80055d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055d6:	f7ff ffe1 	bl	800559c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80055da:	2200      	movs	r2, #0
 80055dc:	210f      	movs	r1, #15
 80055de:	f06f 0001 	mvn.w	r0, #1
 80055e2:	f002 fede 	bl	80083a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80055e6:	2200      	movs	r2, #0
 80055e8:	210f      	movs	r1, #15
 80055ea:	202c      	movs	r0, #44	; 0x2c
 80055ec:	f002 fed9 	bl	80083a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80055f0:	2200      	movs	r2, #0
 80055f2:	210f      	movs	r1, #15
 80055f4:	202d      	movs	r0, #45	; 0x2d
 80055f6:	f002 fed4 	bl	80083a2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}

080055fe <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800560c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4313      	orrs	r3, r2
 8005614:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4013      	ands	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005640:	2200      	movs	r2, #0
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	2019      	movs	r0, #25
 8005646:	f002 feac 	bl	80083a2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800564a:	2019      	movs	r0, #25
 800564c:	f002 fec3 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005650:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005654:	f7ff ffd3 	bl	80055fe <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005658:	f107 0208 	add.w	r2, r7, #8
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f007 fba8 	bl	800cdb8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005668:	f007 fb90 	bl	800cd8c <HAL_RCC_GetPCLK2Freq>
 800566c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_InitTick+0x8c>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0c9b      	lsrs	r3, r3, #18
 8005678:	3b01      	subs	r3, #1
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800567c:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_InitTick+0x90>)
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <HAL_InitTick+0x94>)
 8005680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_InitTick+0x90>)
 8005684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005688:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <HAL_InitTick+0x90>)
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_InitTick+0x90>)
 8005692:	2200      	movs	r2, #0
 8005694:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_InitTick+0x90>)
 8005698:	2200      	movs	r2, #0
 800569a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800569c:	4808      	ldr	r0, [pc, #32]	; (80056c0 <HAL_InitTick+0x90>)
 800569e:	f008 fbf5 	bl	800de8c <HAL_TIM_Base_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80056a8:	4805      	ldr	r0, [pc, #20]	; (80056c0 <HAL_InitTick+0x90>)
 80056aa:	f008 fc71 	bl	800df90 <HAL_TIM_Base_Start_IT>
 80056ae:	4603      	mov	r3, r0
 80056b0:	e000      	b.n	80056b4 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3730      	adds	r7, #48	; 0x30
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	431bde83 	.word	0x431bde83
 80056c0:	20028790 	.word	0x20028790
 80056c4:	40012c00 	.word	0x40012c00

080056c8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e072      	b.n	80057c0 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 f872 	bl	80067d8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005712:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800571a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8005720:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8005726:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800572c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8005732:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8005738:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7b1b      	ldrb	r3, [r3, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d107      	bne.n	800575a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	43d2      	mvns	r2, r2
 8005770:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800578a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681c      	ldr	r4, [r3, #0]
 8005794:	4610      	mov	r0, r2
 8005796:	f000 f952 	bl	8005a3e <TSC_extract_groups>
 800579a:	4603      	mov	r3, r0
 800579c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0203 	bic.w	r2, r2, #3
 80057ac:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2203      	movs	r2, #3
 80057b4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd90      	pop	{r4, r7, pc}

080057c8 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_TSC_Start_IT+0x16>
 80057da:	2302      	movs	r3, #2
 80057dc:	e04b      	b.n	8005876 <HAL_TSC_Start_IT+0xae>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d108      	bne.n	800581a <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0202 	orr.w	r2, r2, #2
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	e007      	b.n	800582a <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0202 	bic.w	r2, r2, #2
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2203      	movs	r2, #3
 8005830:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0210 	bic.w	r2, r2, #16
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e007      	b.n	800585c <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0210 	orr.w	r2, r2, #16
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0202 	orr.w	r2, r2, #2
 800586a:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	3310      	adds	r3, #16
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	401a      	ands	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	3310      	adds	r3, #16
 80058aa:	2101      	movs	r1, #1
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	429a      	cmp	r2, r3
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 80058ea:	b590      	push	{r4, r7, lr}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TSC_IOConfig+0x18>
 80058fe:	2302      	movs	r3, #2
 8005900:	e032      	b.n	8005968 <HAL_TSC_IOConfig+0x7e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0202 	bic.w	r2, r2, #2
 8005918:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	431a      	orrs	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	43d2      	mvns	r2, r2
 8005930:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	6892      	ldr	r2, [r2, #8]
 800594a:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681c      	ldr	r4, [r3, #0]
 8005954:	4610      	mov	r0, r2
 8005956:	f000 f872 	bl	8005a3e <TSC_extract_groups>
 800595a:	4603      	mov	r3, r0
 800595c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}

08005970 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_TSC_IODischarge+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e01c      	b.n	80059c4 <HAL_TSC_IODischarge+0x54>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d108      	bne.n	80059aa <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0210 	bic.w	r2, r2, #16
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e007      	b.n	80059ba <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0210 	orr.w	r2, r2, #16
 80059b8:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d103      	bne.n	80059ee <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d10b      	bne.n	8005a14 <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2202      	movs	r2, #2
 8005a02:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2203      	movs	r2, #3
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f80c 	bl	8005a2a <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 8005a12:	e006      	b.n	8005a22 <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb2f 	bl	8006080 <HAL_TSC_ConvCpltCallback>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	e011      	b.n	8005a74 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	220f      	movs	r2, #15
 8005a56:	409a      	lsls	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d006      	beq.n	8005a6e <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005a60:	2201      	movs	r2, #1
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d9ea      	bls.n	8005a50 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a9a:	e7fe      	b.n	8005a9a <HardFault_Handler+0x4>

08005a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aa0:	e7fe      	b.n	8005aa0 <MemManage_Handler+0x4>

08005aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aa6:	e7fe      	b.n	8005aa6 <BusFault_Handler+0x4>

08005aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aac:	e7fe      	b.n	8005aac <UsageFault_Handler+0x4>

08005aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005ac0:	2004      	movs	r0, #4
 8005ac2:	f003 f9af 	bl	8008e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <EXTI2_IRQHandler+0x1c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2104      	movs	r1, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f00a fce9 	bl	80104a4 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	2002808c 	.word	0x2002808c

08005adc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ae0:	4802      	ldr	r0, [pc, #8]	; (8005aec <DMA1_Channel1_IRQHandler+0x10>)
 8005ae2:	f002 fe96 	bl	8008812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20027ad8 	.word	0x20027ad8

08005af0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <USB_LP_IRQHandler+0x10>)
 8005af6:	f005 fa22 	bl	800af3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2002a018 	.word	0x2002a018

08005b04 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8005b08:	4802      	ldr	r0, [pc, #8]	; (8005b14 <COMP_IRQHandler+0x10>)
 8005b0a:	f002 fae1 	bl	80080d0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200280b4 	.word	0x200280b4

08005b18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005b1c:	2020      	movs	r0, #32
 8005b1e:	f003 f981 	bl	8008e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005b2e:	f008 fb39 	bl	800e1a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005b32:	4803      	ldr	r0, [pc, #12]	; (8005b40 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005b34:	f008 fb36 	bl	800e1a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20028790 	.word	0x20028790
 8005b40:	20028810 	.word	0x20028810

08005b44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005b48:	4802      	ldr	r0, [pc, #8]	; (8005b54 <I2C1_EV_IRQHandler+0x10>)
 8005b4a:	f003 fd81 	bl	8009650 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20028244 	.word	0x20028244

08005b58 <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005b5c:	f013 fa46 	bl	8018fec <HW_IPCC_Tx_Handler>

  return;
 8005b60:	bf00      	nop
}
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005b68:	f013 f9e6 	bl	8018f38 <HW_IPCC_Rx_Handler>
  return;
 8005b6c:	bf00      	nop
}
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005b74:	4802      	ldr	r0, [pc, #8]	; (8005b80 <TSC_IRQHandler+0x10>)
 8005b76:	f7ff ff2b 	bl	80059d0 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20028884 	.word	0x20028884

08005b84 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005b84:	b40c      	push	{r2, r3}
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	460a      	mov	r2, r1
 8005b90:	71fb      	strb	r3, [r7, #7]
 8005b92:	4613      	mov	r3, r2
 8005b94:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	b002      	add	sp, #8
 8005ba2:	4770      	bx	lr

08005ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005ba8:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <SystemInit+0xa0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005bae:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <SystemInit+0xa0>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	4a23      	ldr	r2, [pc, #140]	; (8005c44 <SystemInit+0xa0>)
 8005bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005bd6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <SystemInit+0xa4>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf4:	f023 0305 	bic.w	r3, r3, #5
 8005bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <SystemInit+0xa8>)
 8005c16:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <SystemInit+0xa8>)
 8005c1e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c34:	2200      	movs	r2, #0
 8005c36:	619a      	str	r2, [r3, #24]
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	faf6fefb 	.word	0xfaf6fefb
 8005c4c:	22041000 	.word	0x22041000

08005c50 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	4a47      	ldr	r2, [pc, #284]	; (8005d80 <SystemCoreClockUpdate+0x130>)
 8005c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d867      	bhi.n	8005d48 <SystemCoreClockUpdate+0xf8>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <SystemCoreClockUpdate+0x30>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005d49 	.word	0x08005d49
 8005c88:	08005d49 	.word	0x08005d49
 8005c8c:	08005d49 	.word	0x08005d49
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005d49 	.word	0x08005d49
 8005c98:	08005d49 	.word	0x08005d49
 8005c9c:	08005d49 	.word	0x08005d49
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005d49 	.word	0x08005d49
 8005ca8:	08005d49 	.word	0x08005d49
 8005cac:	08005d49 	.word	0x08005d49
 8005cb0:	08005ccd 	.word	0x08005ccd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005cb4:	4a33      	ldr	r2, [pc, #204]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6013      	str	r3, [r2, #0]
      break;
 8005cba:	e049      	b.n	8005d50 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005cbe:	4a32      	ldr	r2, [pc, #200]	; (8005d88 <SystemCoreClockUpdate+0x138>)
 8005cc0:	601a      	str	r2, [r3, #0]
      break;
 8005cc2:	e045      	b.n	8005d50 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005cc4:	4b2f      	ldr	r3, [pc, #188]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005cc6:	4a31      	ldr	r2, [pc, #196]	; (8005d8c <SystemCoreClockUpdate+0x13c>)
 8005cc8:	601a      	str	r2, [r3, #0]
      break;
 8005cca:	e041      	b.n	8005d50 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d105      	bne.n	8005cfa <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005cee:	4a26      	ldr	r2, [pc, #152]	; (8005d88 <SystemCoreClockUpdate+0x138>)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e00d      	b.n	8005d16 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d105      	bne.n	8005d0c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <SystemCoreClockUpdate+0x13c>)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e004      	b.n	8005d16 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0f5b      	lsrs	r3, r3, #29
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	3301      	adds	r3, #1
 8005d38:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	4a10      	ldr	r2, [pc, #64]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005d44:	6013      	str	r3, [r2, #0]
      break;
 8005d46:	e003      	b.n	8005d50 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005d48:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6013      	str	r3, [r2, #0]
      break;
 8005d4e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	; (8005d90 <SystemCoreClockUpdate+0x140>)
 8005d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d62:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <SystemCoreClockUpdate+0x134>)
 8005d70:	6013      	str	r3, [r2, #0]

}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	0801bed0 	.word	0x0801bed0
 8005d84:	20000078 	.word	0x20000078
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	01e84800 	.word	0x01e84800
 8005d90:	0801be70 	.word	0x0801be70

08005d94 <LL_AHB2_GRP1_EnableClock>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005db8:	68fb      	ldr	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_APB1_GRP1_EnableClock>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4013      	ands	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_APB2_GRP1_EnableClock>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08e      	sub	sp, #56	; 0x38
 8005e30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
 8005e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e40:	f107 031c 	add.w	r3, r7, #28
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	605a      	str	r2, [r3, #4]
 8005e54:	609a      	str	r2, [r3, #8]
 8005e56:	60da      	str	r2, [r3, #12]
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	615a      	str	r2, [r3, #20]
 8005e5c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005e5e:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e68:	f240 227f 	movw	r2, #639	; 0x27f
 8005e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e76:	2209      	movs	r2, #9
 8005e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e7a:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e86:	4823      	ldr	r0, [pc, #140]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005e88:	f008 f800 	bl	800de8c <HAL_TIM_Base_Init>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005e92:	f7fe fb27 	bl	80044e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	481c      	ldr	r0, [pc, #112]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005ea4:	f008 fbb6 	bl	800e614 <HAL_TIM_ConfigClockSource>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005eae:	f7fe fb19 	bl	80044e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005eb2:	4818      	ldr	r0, [pc, #96]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005eb4:	f008 f896 	bl	800dfe4 <HAL_TIM_PWM_Init>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005ebe:	f7fe fb11 	bl	80044e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005eca:	f107 031c 	add.w	r3, r7, #28
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4810      	ldr	r0, [pc, #64]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005ed2:	f009 f825 	bl	800ef20 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005edc:	f7fe fb02 	bl	80044e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee0:	2360      	movs	r3, #96	; 0x60
 8005ee2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005ee4:	2309      	movs	r3, #9
 8005ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4807      	ldr	r0, [pc, #28]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005ef8:	f008 fa74 	bl	800e3e4 <HAL_TIM_PWM_ConfigChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005f02:	f7fe faef 	bl	80044e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005f06:	4803      	ldr	r0, [pc, #12]	; (8005f14 <MX_TIM2_Init+0xe8>)
 8005f08:	f000 f850 	bl	8005fac <HAL_TIM_MspPostInit>

}
 8005f0c:	bf00      	nop
 8005f0e:	3738      	adds	r7, #56	; 0x38
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200287d0 	.word	0x200287d0

08005f18 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f1e:	4a10      	ldr	r2, [pc, #64]	; (8005f60 <MX_TIM16_Init+0x48>)
 8005f20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f24:	221f      	movs	r2, #31
 8005f26:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f28:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f34:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005f3c:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005f48:	4804      	ldr	r0, [pc, #16]	; (8005f5c <MX_TIM16_Init+0x44>)
 8005f4a:	f007 ff9f 	bl	800de8c <HAL_TIM_Base_Init>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005f54:	f7fe fac6 	bl	80044e4 <Error_Handler>
  }

}
 8005f58:	bf00      	nop
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20028810 	.word	0x20028810
 8005f60:	40014400 	.word	0x40014400

08005f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f74:	d103      	bne.n	8005f7e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f76:	2001      	movs	r0, #1
 8005f78:	f7ff ff25 	bl	8005dc6 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005f7c:	e010      	b.n	8005fa0 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <HAL_TIM_Base_MspInit+0x44>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10b      	bne.n	8005fa0 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005f8c:	f7ff ff34 	bl	8005df8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005f90:	2200      	movs	r2, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	2019      	movs	r0, #25
 8005f96:	f002 fa04 	bl	80083a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005f9a:	2019      	movs	r0, #25
 8005f9c:	f002 fa1b 	bl	80083d6 <HAL_NVIC_EnableIRQ>
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40014400 	.word	0x40014400

08005fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	f107 030c 	add.w	r3, r7, #12
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d112      	bne.n	8005ff4 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fce:	2002      	movs	r0, #2
 8005fd0:	f7ff fee0 	bl	8005d94 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4619      	mov	r1, r3
 8005fee:	4803      	ldr	r0, [pc, #12]	; (8005ffc <HAL_TIM_MspPostInit+0x50>)
 8005ff0:	f002 fd5e 	bl	8008ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005ff4:	bf00      	nop
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	48000400 	.word	0x48000400

08006000 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_COMP_TriggerCallback+0x74>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	b29a      	uxth	r2, r3
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_COMP_TriggerCallback+0x78>)
 8006012:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f002 f889 	bl	800812c <HAL_COMP_GetOutputLevel>
 800601a:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d109      	bne.n	8006036 <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_COMP_TriggerCallback+0x78>)
 8006024:	881a      	ldrh	r2, [r3, #0]
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 8006028:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 800602c:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 800602e:	2201      	movs	r2, #1
 8006030:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8006034:	e019      	b.n	800606a <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8006036:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 8006038:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_COMP_TriggerCallback+0x6a>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d111      	bne.n	800606a <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8006046:	4b0d      	ldr	r3, [pc, #52]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 8006048:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <HAL_COMP_TriggerCallback+0x78>)
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 8006052:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	b29b      	uxth	r3, r3
 800605a:	461a      	mov	r2, r3
 800605c:	4807      	ldr	r0, [pc, #28]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 800605e:	f7fd fe95 	bl	8003d8c <enqueue_pulse>
		input0.rise_valid_ = 0;
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_COMP_TriggerCallback+0x7c>)
 8006064:	2200      	movs	r2, #0
 8006066:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20028810 	.word	0x20028810
 8006078:	20000c76 	.word	0x20000c76
 800607c:	20027c64 	.word	0x20027c64

08006080 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8006088:	2101      	movs	r1, #1
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fc70 	bl	8005970 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fbf5 	bl	8005882 <HAL_TSC_GroupGetStatus>
 8006098:	4603      	mov	r3, r0
 800609a:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 800609c:	7dbb      	ldrb	r3, [r7, #22]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 8115 	bne.w	80062ce <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 80060a4:	2101      	movs	r1, #1
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fc0d 	bl	80058c6 <HAL_TSC_GroupGetValue>
 80060ac:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 80060ae:	4ba0      	ldr	r3, [pc, #640]	; (8006330 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d17d      	bne.n	80061b2 <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 80060b6:	4b9f      	ldr	r3, [pc, #636]	; (8006334 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d83a      	bhi.n	8006134 <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 80060c2:	4b9c      	ldr	r3, [pc, #624]	; (8006334 <HAL_TSC_ConvCpltCallback+0x2b4>)
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d4:	4b98      	ldr	r3, [pc, #608]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060d6:	edc3 7a00 	vstr	s15, [r3]
 80060da:	e024      	b.n	8006126 <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 80060dc:	6938      	ldr	r0, [r7, #16]
 80060de:	f7fa f99b 	bl	8000418 <__aeabi_ui2d>
 80060e2:	a38f      	add	r3, pc, #572	; (adr r3, 8006320 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa fa10 	bl	800050c <__aeabi_dmul>
 80060ec:	4603      	mov	r3, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4625      	mov	r5, r4
 80060f2:	461c      	mov	r4, r3
 80060f4:	4b90      	ldr	r3, [pc, #576]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fa f9af 	bl	800045c <__aeabi_f2d>
 80060fe:	a38a      	add	r3, pc, #552	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa fa02 	bl	800050c <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa f846 	bl	80001a0 <__adddf3>
 8006114:	4603      	mov	r3, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4618      	mov	r0, r3
 800611a:	4621      	mov	r1, r4
 800611c:	f7fa fca6 	bl	8000a6c <__aeabi_d2f>
 8006120:	4602      	mov	r2, r0
 8006122:	4b85      	ldr	r3, [pc, #532]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006124:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8006126:	4b83      	ldr	r3, [pc, #524]	; (8006334 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	4b81      	ldr	r3, [pc, #516]	; (8006334 <HAL_TSC_ConvCpltCallback+0x2b4>)
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	e0ba      	b.n	80062aa <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800613e:	4b7e      	ldr	r3, [pc, #504]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006140:	edd3 7a00 	vldr	s15, [r3]
 8006144:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800633c <HAL_TSC_ConvCpltCallback+0x2bc>
 8006148:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800614c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006154:	bf94      	ite	ls
 8006156:	2301      	movls	r3, #1
 8006158:	2300      	movhi	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 80a2 	bne.w	80062aa <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8006166:	6938      	ldr	r0, [r7, #16]
 8006168:	f7fa f956 	bl	8000418 <__aeabi_ui2d>
 800616c:	a36c      	add	r3, pc, #432	; (adr r3, 8006320 <HAL_TSC_ConvCpltCallback+0x2a0>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa f9cb 	bl	800050c <__aeabi_dmul>
 8006176:	4603      	mov	r3, r0
 8006178:	460c      	mov	r4, r1
 800617a:	4625      	mov	r5, r4
 800617c:	461c      	mov	r4, r3
 800617e:	4b6e      	ldr	r3, [pc, #440]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa f96a 	bl	800045c <__aeabi_f2d>
 8006188:	a367      	add	r3, pc, #412	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f7fa f9bd 	bl	800050c <__aeabi_dmul>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4620      	mov	r0, r4
 8006198:	4629      	mov	r1, r5
 800619a:	f7fa f801 	bl	80001a0 <__adddf3>
 800619e:	4603      	mov	r3, r0
 80061a0:	460c      	mov	r4, r1
 80061a2:	4618      	mov	r0, r3
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7fa fc61 	bl	8000a6c <__aeabi_d2f>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b62      	ldr	r3, [pc, #392]	; (8006338 <HAL_TSC_ConvCpltCallback+0x2b8>)
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e07b      	b.n	80062aa <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d83a      	bhi.n	8006230 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 80061be:	4b60      	ldr	r3, [pc, #384]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2c0>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d0:	4b5c      	ldr	r3, [pc, #368]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061d2:	edc3 7a00 	vstr	s15, [r3]
 80061d6:	e024      	b.n	8006222 <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 80061d8:	6938      	ldr	r0, [r7, #16]
 80061da:	f7fa f91d 	bl	8000418 <__aeabi_ui2d>
 80061de:	a350      	add	r3, pc, #320	; (adr r3, 8006320 <HAL_TSC_ConvCpltCallback+0x2a0>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa f992 	bl	800050c <__aeabi_dmul>
 80061e8:	4603      	mov	r3, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4625      	mov	r5, r4
 80061ee:	461c      	mov	r4, r3
 80061f0:	4b54      	ldr	r3, [pc, #336]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fa f931 	bl	800045c <__aeabi_f2d>
 80061fa:	a34b      	add	r3, pc, #300	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a8>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7fa f984 	bl	800050c <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7f9 ffc8 	bl	80001a0 <__adddf3>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4618      	mov	r0, r3
 8006216:	4621      	mov	r1, r4
 8006218:	f7fa fc28 	bl	8000a6c <__aeabi_d2f>
 800621c:	4602      	mov	r2, r0
 800621e:	4b49      	ldr	r3, [pc, #292]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006220:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8006222:	4b47      	ldr	r3, [pc, #284]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	4b45      	ldr	r3, [pc, #276]	; (8006340 <HAL_TSC_ConvCpltCallback+0x2c0>)
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e03c      	b.n	80062aa <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800623a:	4b42      	ldr	r3, [pc, #264]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800623c:	edd3 7a00 	vldr	s15, [r3]
 8006240:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800633c <HAL_TSC_ConvCpltCallback+0x2bc>
 8006244:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006250:	bf94      	ite	ls
 8006252:	2301      	movls	r3, #1
 8006254:	2300      	movhi	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d124      	bne.n	80062aa <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006260:	6938      	ldr	r0, [r7, #16]
 8006262:	f7fa f8d9 	bl	8000418 <__aeabi_ui2d>
 8006266:	a32e      	add	r3, pc, #184	; (adr r3, 8006320 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f7fa f94e 	bl	800050c <__aeabi_dmul>
 8006270:	4603      	mov	r3, r0
 8006272:	460c      	mov	r4, r1
 8006274:	4625      	mov	r5, r4
 8006276:	461c      	mov	r4, r3
 8006278:	4b32      	ldr	r3, [pc, #200]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa f8ed 	bl	800045c <__aeabi_f2d>
 8006282:	a329      	add	r3, pc, #164	; (adr r3, 8006328 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa f940 	bl	800050c <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7f9 ff84 	bl	80001a0 <__adddf3>
 8006298:	4603      	mov	r3, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4618      	mov	r0, r3
 800629e:	4621      	mov	r1, r4
 80062a0:	f7fa fbe4 	bl	8000a6c <__aeabi_d2f>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <HAL_TSC_ConvCpltCallback+0x2c4>)
 80062a8:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 80062aa:	f000 fb47 	bl	800693c <HAL_GetTick>
 80062ae:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 80062b0:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80062b8:	4413      	add	r3, r2
 80062ba:	7df9      	ldrb	r1, [r7, #23]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f9f2 	bl	80066a8 <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4920      	ldr	r1, [pc, #128]	; (8006348 <HAL_TSC_ConvCpltCallback+0x2c8>)
 80062c8:	4820      	ldr	r0, [pc, #128]	; (800634c <HAL_TSC_ConvCpltCallback+0x2cc>)
 80062ca:	f000 f843 	bl	8006354 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 80062ce:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 80062d6:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80062dc:	4b14      	ldr	r3, [pc, #80]	; (8006330 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062de:	2201      	movs	r2, #1
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	e005      	b.n	80062f0 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80062f0:	4917      	ldr	r1, [pc, #92]	; (8006350 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff faf9 	bl	80058ea <HAL_TSC_IOConfig>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 80062fe:	f7fe f8f1 	bl	80044e4 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fa60 	bl	80057c8 <HAL_TSC_Start_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 800630e:	f7fe f8e9 	bl	80044e4 <Error_Handler>
	}

}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bdb0      	pop	{r4, r5, r7, pc}
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w
 8006320:	47ae147b 	.word	0x47ae147b
 8006324:	3f847ae1 	.word	0x3f847ae1
 8006328:	7ae147ae 	.word	0x7ae147ae
 800632c:	3fefae14 	.word	0x3fefae14
 8006330:	20000c78 	.word	0x20000c78
 8006334:	20000c8c 	.word	0x20000c8c
 8006338:	2002885c 	.word	0x2002885c
 800633c:	42700000 	.word	0x42700000
 8006340:	20000c8e 	.word	0x20000c8e
 8006344:	20028880 	.word	0x20028880
 8006348:	20000c7c 	.word	0x20000c7c
 800634c:	20028864 	.word	0x20028864
 8006350:	20028850 	.word	0x20028850

08006354 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b08c      	sub	sp, #48	; 0x30
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	7e1b      	ldrb	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d123      	bne.n	80063b0 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	795b      	ldrb	r3, [r3, #5]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 8006382:	4b99      	ldr	r3, [pc, #612]	; (80065e8 <process_touches+0x294>)
 8006384:	2205      	movs	r2, #5
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e126      	b.n	80065d8 <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3308      	adds	r3, #8
 800638e:	795b      	ldrb	r3, [r3, #5]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8121 	beq.w	80065d8 <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]
			action = BackHold;
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <process_touches+0x294>)
 80063aa:	2206      	movs	r2, #6
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e113      	b.n	80065d8 <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	7e1b      	ldrb	r3, [r3, #24]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d12d      	bne.n	8006414 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f1c3 0301 	rsb	r3, r3, #1
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	4413      	add	r3, r2
 80063c6:	795b      	ldrb	r3, [r3, #5]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <process_touches+0x9a>
			self->touch_state = TwoPressed;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2202      	movs	r2, #2
 80063d0:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f1c3 0301 	rsb	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	611a      	str	r2, [r3, #16]
			action = BothHold;
 80063e6:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <process_touches+0x294>)
 80063e8:	2207      	movs	r2, #7
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e0f4      	b.n	80065d8 <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	4413      	add	r3, r2
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 80ec 	bne.w	80065d8 <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2203      	movs	r2, #3
 8006404:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 800640c:	4b76      	ldr	r3, [pc, #472]	; (80065e8 <process_touches+0x294>)
 800640e:	2208      	movs	r2, #8
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e0e1      	b.n	80065d8 <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	7e1b      	ldrb	r3, [r3, #24]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d11e      	bne.n	800645a <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4413      	add	r3, r2
 8006426:	795b      	ldrb	r3, [r3, #5]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2204      	movs	r2, #4
 8006430:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	609a      	str	r2, [r3, #8]
 8006438:	e0ce      	b.n	80065d8 <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	7b1b      	ldrb	r3, [r3, #12]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4413      	add	r3, r2
 8006444:	795b      	ldrb	r3, [r3, #5]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f040 80c6 	bne.w	80065d8 <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2205      	movs	r2, #5
 8006450:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	615a      	str	r2, [r3, #20]
 8006458:	e0be      	b.n	80065d8 <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	7e1b      	ldrb	r3, [r3, #24]
 800645e:	2b03      	cmp	r3, #3
 8006460:	d134      	bne.n	80064cc <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f1c3 0301 	rsb	r3, r3, #1
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	4413      	add	r3, r2
 8006470:	795b      	ldrb	r3, [r3, #5]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2204      	movs	r2, #4
 800647a:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f1c3 0301 	rsb	r3, r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	611a      	str	r2, [r3, #16]
 8006490:	e0a2      	b.n	80065d8 <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b0a      	cmp	r3, #10
 800649c:	f240 809c 	bls.w	80065d8 <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2b28      	cmp	r3, #40	; 0x28
 80064b0:	d905      	bls.n	80064be <process_touches+0x16a>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2bc7      	cmp	r3, #199	; 0xc7
 80064b6:	d802      	bhi.n	80064be <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <process_touches+0x294>)
 80064ba:	2208      	movs	r2, #8
 80064bc:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80064be:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <process_touches+0x298>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	761a      	strb	r2, [r3, #24]
 80064ca:	e085      	b.n	80065d8 <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	7e1b      	ldrb	r3, [r3, #24]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d148      	bne.n	8006566 <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	795b      	ldrb	r3, [r3, #5]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d179      	bne.n	80065d8 <process_touches+0x284>
			self->touch_state = Idle;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	615a      	str	r2, [r3, #20]
			action = None;
 80064f0:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <process_touches+0x294>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b28      	cmp	r3, #40	; 0x28
 800651e:	d80c      	bhi.n	800653a <process_touches+0x1e6>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b28      	cmp	r3, #40	; 0x28
 8006524:	d809      	bhi.n	800653a <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b28      	cmp	r3, #40	; 0x28
 800652a:	d906      	bls.n	800653a <process_touches+0x1e6>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2bc7      	cmp	r3, #199	; 0xc7
 8006530:	d803      	bhi.n	800653a <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8006532:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <process_touches+0x294>)
 8006534:	2208      	movs	r2, #8
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e011      	b.n	800655e <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b28      	cmp	r3, #40	; 0x28
 800653e:	d90e      	bls.n	800655e <process_touches+0x20a>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b28      	cmp	r3, #40	; 0x28
 8006544:	d90b      	bls.n	800655e <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	b25a      	sxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	7b1b      	ldrb	r3, [r3, #12]
 8006552:	b25b      	sxtb	r3, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	b25b      	sxtb	r3, r3
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <process_touches+0x294>)
 800655c:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	761a      	strb	r2, [r3, #24]
 8006564:	e038      	b.n	80065d8 <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	7e1b      	ldrb	r3, [r3, #24]
 800656a:	2b05      	cmp	r3, #5
 800656c:	d134      	bne.n	80065d8 <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	4413      	add	r3, r2
 8006578:	795b      	ldrb	r3, [r3, #5]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d12c      	bne.n	80065d8 <process_touches+0x284>
			self->touch_state = Idle;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	2b28      	cmp	r3, #40	; 0x28
 80065b2:	d80b      	bhi.n	80065cc <process_touches+0x278>
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	2b28      	cmp	r3, #40	; 0x28
 80065b8:	d808      	bhi.n	80065cc <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2b28      	cmp	r3, #40	; 0x28
 80065be:	d905      	bls.n	80065cc <process_touches+0x278>
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	2bc7      	cmp	r3, #199	; 0xc7
 80065c4:	d802      	bhi.n	80065cc <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <process_touches+0x294>)
 80065c8:	2208      	movs	r2, #8
 80065ca:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <process_touches+0x298>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 80065d8:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <process_touches+0x294>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 80065e0:	4b02      	ldr	r3, [pc, #8]	; (80065ec <process_touches+0x298>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e042      	b.n	800666e <process_touches+0x31a>
 80065e8:	20000c94 	.word	0x20000c94
 80065ec:	20028860 	.word	0x20028860

	}else if(action == SwipeForward){
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <process_touches+0x344>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d103      	bne.n	8006600 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 80065f8:	4b28      	ldr	r3, [pc, #160]	; (800669c <process_touches+0x348>)
 80065fa:	2203      	movs	r2, #3
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e036      	b.n	800666e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <process_touches+0x344>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d103      	bne.n	8006610 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 8006608:	4b24      	ldr	r3, [pc, #144]	; (800669c <process_touches+0x348>)
 800660a:	2241      	movs	r2, #65	; 0x41
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e02e      	b.n	800666e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8006610:	4b21      	ldr	r3, [pc, #132]	; (8006698 <process_touches+0x344>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d103      	bne.n	8006620 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006618:	4b20      	ldr	r3, [pc, #128]	; (800669c <process_touches+0x348>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e026      	b.n	800666e <process_touches+0x31a>
	}else if(action == BackRelease){
 8006620:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <process_touches+0x344>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d103      	bne.n	8006630 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006628:	4b1c      	ldr	r3, [pc, #112]	; (800669c <process_touches+0x348>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e01e      	b.n	800666e <process_touches+0x31a>
	}else if(action == FrontHold){
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <process_touches+0x344>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b05      	cmp	r3, #5
 8006636:	d103      	bne.n	8006640 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <process_touches+0x348>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e016      	b.n	800666e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8006640:	4b15      	ldr	r3, [pc, #84]	; (8006698 <process_touches+0x344>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b06      	cmp	r3, #6
 8006646:	d103      	bne.n	8006650 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 8006648:	4b14      	ldr	r3, [pc, #80]	; (800669c <process_touches+0x348>)
 800664a:	2202      	movs	r2, #2
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e00e      	b.n	800666e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <process_touches+0x344>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b07      	cmp	r3, #7
 8006656:	d103      	bne.n	8006660 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <process_touches+0x348>)
 800665a:	2240      	movs	r2, #64	; 0x40
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e006      	b.n	800666e <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8006660:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <process_touches+0x344>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d102      	bne.n	800666e <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <process_touches+0x348>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <process_touches+0x34c>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <process_touches+0x348>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d00a      	beq.n	8006690 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <process_touches+0x348>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <process_touches+0x34c>)
 8006680:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <process_touches+0x350>)
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	4904      	ldr	r1, [pc, #16]	; (800669c <process_touches+0x348>)
 800668c:	f00a fccc 	bl	8011028 <osMessageQueuePut>

	}

}
 8006690:	bf00      	nop
 8006692:	3730      	adds	r7, #48	; 0x30
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000c94 	.word	0x20000c94
 800669c:	20028860 	.word	0x20028860
 80066a0:	20000c90 	.word	0x20000c90
 80066a4:	20027c50 	.word	0x20027c50

080066a8 <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	7afa      	ldrb	r2, [r7, #11]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d006      	beq.n	80066ce <debounce+0x26>
		self->input = noisy_in;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	7afa      	ldrb	r2, [r7, #11]
 80066c4:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 80066cc:	e009      	b.n	80066e2 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b1e      	cmp	r3, #30
 80066d8:	d903      	bls.n	80066e2 <debounce+0x3a>
		self->clean_out = self->input;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	791a      	ldrb	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	715a      	strb	r2, [r3, #5]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <LL_AHB1_GRP1_EnableClock>:
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4313      	orrs	r3, r2
 8006704:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4013      	ands	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006712:	68fb      	ldr	r3, [r7, #12]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <LL_AHB2_GRP1_EnableClock>:
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800672e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4013      	ands	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006744:	68fb      	ldr	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <MX_TSC_Init+0x7c>)
 800675a:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <MX_TSC_Init+0x80>)
 800675c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 800675e:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006760:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006764:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006768:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800676c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 800676e:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006770:	2200      	movs	r2, #0
 8006772:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8006774:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006776:	2201      	movs	r2, #1
 8006778:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <MX_TSC_Init+0x7c>)
 800677c:	2200      	movs	r2, #0
 800677e:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8006780:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006786:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <MX_TSC_Init+0x7c>)
 800678a:	22c0      	movs	r2, #192	; 0xc0
 800678c:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006790:	2200      	movs	r2, #0
 8006792:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <MX_TSC_Init+0x7c>)
 8006796:	2200      	movs	r2, #0
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <MX_TSC_Init+0x7c>)
 800679c:	2200      	movs	r2, #0
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <MX_TSC_Init+0x7c>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <MX_TSC_Init+0x7c>)
 80067aa:	22c0      	movs	r2, #192	; 0xc0
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <MX_TSC_Init+0x7c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <MX_TSC_Init+0x7c>)
 80067b6:	2210      	movs	r2, #16
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80067ba:	4805      	ldr	r0, [pc, #20]	; (80067d0 <MX_TSC_Init+0x7c>)
 80067bc:	f7fe ff84 	bl	80056c8 <HAL_TSC_Init>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80067c6:	f7fd fe8d 	bl	80044e4 <Error_Handler>
  }

}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20028884 	.word	0x20028884
 80067d4:	40024000 	.word	0x40024000

080067d8 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1a      	ldr	r2, [pc, #104]	; (8006860 <HAL_TSC_MspInit+0x88>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d12e      	bne.n	8006858 <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80067fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067fe:	f7ff ff76 	bl	80066ee <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006802:	2002      	movs	r0, #2
 8006804:	f7ff ff8c 	bl	8006720 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006808:	2310      	movs	r3, #16
 800680a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800680c:	2312      	movs	r3, #18
 800680e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006818:	2309      	movs	r3, #9
 800681a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4619      	mov	r1, r3
 8006822:	4810      	ldr	r0, [pc, #64]	; (8006864 <HAL_TSC_MspInit+0x8c>)
 8006824:	f002 f944 	bl	8008ab0 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006828:	23c0      	movs	r3, #192	; 0xc0
 800682a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8006838:	2309      	movs	r3, #9
 800683a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	4619      	mov	r1, r3
 8006842:	4808      	ldr	r0, [pc, #32]	; (8006864 <HAL_TSC_MspInit+0x8c>)
 8006844:	f002 f934 	bl	8008ab0 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 8006848:	2200      	movs	r2, #0
 800684a:	2105      	movs	r1, #5
 800684c:	2027      	movs	r0, #39	; 0x27
 800684e:	f001 fda8 	bl	80083a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8006852:	2027      	movs	r0, #39	; 0x27
 8006854:	f001 fdbf 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8006858:	bf00      	nop
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40024000 	.word	0x40024000
 8006864:	48000400 	.word	0x48000400

08006868 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006868:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800686a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800686c:	3304      	adds	r3, #4

0800686e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800686e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006870:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006872:	d3f9      	bcc.n	8006868 <CopyDataInit>
  bx lr
 8006874:	4770      	bx	lr

08006876 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006876:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006878:	3004      	adds	r0, #4

0800687a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800687a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800687c:	d3fb      	bcc.n	8006876 <FillZerobss>
  bx lr
 800687e:	4770      	bx	lr

08006880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8006880:	480c      	ldr	r0, [pc, #48]	; (80068b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8006882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006884:	480c      	ldr	r0, [pc, #48]	; (80068b8 <LoopForever+0x8>)
 8006886:	490d      	ldr	r1, [pc, #52]	; (80068bc <LoopForever+0xc>)
 8006888:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <LoopForever+0x10>)
 800688a:	2300      	movs	r3, #0
 800688c:	f7ff ffef 	bl	800686e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006890:	480c      	ldr	r0, [pc, #48]	; (80068c4 <LoopForever+0x14>)
 8006892:	490d      	ldr	r1, [pc, #52]	; (80068c8 <LoopForever+0x18>)
 8006894:	2300      	movs	r3, #0
 8006896:	f7ff fff0 	bl	800687a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800689a:	480c      	ldr	r0, [pc, #48]	; (80068cc <LoopForever+0x1c>)
 800689c:	490c      	ldr	r1, [pc, #48]	; (80068d0 <LoopForever+0x20>)
 800689e:	2300      	movs	r3, #0
 80068a0:	f7ff ffeb 	bl	800687a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80068a4:	f7ff f97e 	bl	8005ba4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80068a8:	f013 fd96 	bl	801a3d8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80068ac:	f7fd fd3e 	bl	800432c <main>

080068b0 <LoopForever>:

LoopForever:
  b LoopForever
 80068b0:	e7fe      	b.n	80068b0 <LoopForever>
 80068b2:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 80068b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80068b8:	20000004 	.word	0x20000004
 80068bc:	200002d4 	.word	0x200002d4
 80068c0:	0801c878 	.word	0x0801c878
  INIT_BSS _sbss, _ebss
 80068c4:	20000388 	.word	0x20000388
 80068c8:	2002a28c 	.word	0x2002a28c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80068cc:	200300c4 	.word	0x200300c4
 80068d0:	20030b5b 	.word	0x20030b5b

080068d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068d4:	e7fe      	b.n	80068d4 <ADC1_IRQHandler>
	...

080068d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <HAL_Init+0x3c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a0b      	ldr	r2, [pc, #44]	; (8006914 <HAL_Init+0x3c>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068ee:	2003      	movs	r0, #3
 80068f0:	f001 fd4c 	bl	800838c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068f4:	2000      	movs	r0, #0
 80068f6:	f7fe fe9b 	bl	8005630 <HAL_InitTick>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	71fb      	strb	r3, [r7, #7]
 8006904:	e001      	b.n	800690a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006906:	f7fe fe62 	bl	80055ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800690a:	79fb      	ldrb	r3, [r7, #7]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	58004000 	.word	0x58004000

08006918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_IncTick+0x1c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <HAL_IncTick+0x20>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4413      	add	r3, r2
 8006926:	4a03      	ldr	r2, [pc, #12]	; (8006934 <HAL_IncTick+0x1c>)
 8006928:	6013      	str	r3, [r2, #0]
}
 800692a:	bf00      	nop
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	200288c8 	.word	0x200288c8
 8006938:	20000080 	.word	0x20000080

0800693c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  return uwTick;
 8006940:	4b03      	ldr	r3, [pc, #12]	; (8006950 <HAL_GetTick+0x14>)
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	200288c8 	.word	0x200288c8

08006954 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006958:	4b03      	ldr	r3, [pc, #12]	; (8006968 <HAL_GetTickPrio+0x14>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	2000007c 	.word	0x2000007c

0800696c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8006974:	f7ff ffe2 	bl	800693c <HAL_GetTick>
 8006978:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d004      	beq.n	8006990 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_Delay+0x40>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8006990:	bf00      	nop
 8006992:	f7ff ffd3 	bl	800693c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d8f7      	bhi.n	8006992 <HAL_Delay+0x26>
    {
    }
  }
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000080 	.word	0x20000080

080069b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a08:	b490      	push	{r4, r7}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3360      	adds	r3, #96	; 0x60
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <LL_ADC_SetOffset+0x40>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc90      	pop	{r4, r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	03fff000 	.word	0x03fff000

08006a4c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a4c:	b490      	push	{r4, r7}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3360      	adds	r3, #96	; 0x60
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc90      	pop	{r4, r7}
 8006a72:	4770      	bx	lr

08006a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a74:	b490      	push	{r4, r7}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3360      	adds	r3, #96	; 0x60
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc90      	pop	{r4, r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006aca:	b490      	push	{r4, r7}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3330      	adds	r3, #48	; 0x30
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	4413      	add	r3, r2
 8006ae8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	211f      	movs	r1, #31
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	401a      	ands	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0e9b      	lsrs	r3, r3, #26
 8006b00:	f003 011f 	and.w	r1, r3, #31
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc90      	pop	{r4, r7}
 8006b1a:	4770      	bx	lr

08006b1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b1c:	b490      	push	{r4, r7}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	0e5b      	lsrs	r3, r3, #25
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	0d1b      	lsrs	r3, r3, #20
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2107      	movs	r1, #7
 8006b48:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	401a      	ands	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	0d1b      	lsrs	r3, r3, #20
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc90      	pop	{r4, r7}
 8006b6a:	4770      	bx	lr

08006b6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b84:	43db      	mvns	r3, r3
 8006b86:	401a      	ands	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f003 0318 	and.w	r3, r3, #24
 8006b8e:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006b90:	40d9      	lsrs	r1, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	400b      	ands	r3, r1
 8006b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	0007ffff 	.word	0x0007ffff

08006bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6093      	str	r3, [r2, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bec:	d101      	bne.n	8006bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c3c:	d101      	bne.n	8006c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c8c:	f043 0202 	orr.w	r2, r3, #2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <LL_ADC_IsEnabled+0x18>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <LL_ADC_IsEnabled+0x1a>
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d101      	bne.n	8006cde <LL_ADC_IsDisableOngoing+0x18>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <LL_ADC_IsDisableOngoing+0x1a>
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d00:	f043 0204 	orr.w	r2, r3, #4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d28:	f043 0210 	orr.w	r2, r3, #16
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d101      	bne.n	8006d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d101      	bne.n	8006da2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e12a      	b.n	8007020 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fa f899 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fef1 	bl	8006bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fed7 	bl	8006bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff ff0c 	bl	8006c28 <LL_ADC_IsInternalRegulatorEnabled>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fef0 	bl	8006c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006e20:	4b81      	ldr	r3, [pc, #516]	; (8007028 <HAL_ADC_Init+0x278>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	099b      	lsrs	r3, r3, #6
 8006e26:	4a81      	ldr	r2, [pc, #516]	; (800702c <HAL_ADC_Init+0x27c>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e30:	e002      	b.n	8006e38 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f9      	bne.n	8006e32 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fef0 	bl	8006c28 <LL_ADC_IsInternalRegulatorEnabled>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	f043 0210 	orr.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff64 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 8006e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	f003 0310 	and.w	r3, r3, #16
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 80c5 	bne.w	800700e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 80c1 	bne.w	800700e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006e94:	f043 0202 	orr.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fefd 	bl	8006ca0 <LL_ADC_IsEnabled>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eac:	4860      	ldr	r0, [pc, #384]	; (8007030 <HAL_ADC_Init+0x280>)
 8006eae:	f7ff fef7 	bl	8006ca0 <LL_ADC_IsEnabled>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	485d      	ldr	r0, [pc, #372]	; (8007034 <HAL_ADC_Init+0x284>)
 8006ec0:	f7ff fd76 	bl	80069b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7e5b      	ldrb	r3, [r3, #25]
 8006ec8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ece:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006ed4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006eda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ee2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d106      	bne.n	8006f00 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	045b      	lsls	r3, r3, #17
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	4b45      	ldr	r3, [pc, #276]	; (8007038 <HAL_ADC_Init+0x288>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff01 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 8006f3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff ff22 	bl	8006d8a <LL_ADC_INJ_IsConversionOngoing>
 8006f46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d13d      	bne.n	8006fca <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d13a      	bne.n	8006fca <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f70:	f023 0302 	bic.w	r3, r3, #2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d118      	bne.n	8006fba <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f92:	f023 0304 	bic.w	r3, r3, #4
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f9e:	4311      	orrs	r1, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fa4:	4311      	orrs	r1, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006faa:	430a      	orrs	r2, r1
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	611a      	str	r2, [r3, #16]
 8006fb8:	e007      	b.n	8006fca <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
 8006fc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10c      	bne.n	8006fec <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	f023 010f 	bic.w	r1, r3, #15
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	1e5a      	subs	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8006fea:	e007      	b.n	8006ffc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 020f 	bic.w	r2, r2, #15
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
 800700c:	e007      	b.n	800701e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	f043 0210 	orr.w	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800701e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000078 	.word	0x20000078
 800702c:	053e2d63 	.word	0x053e2d63
 8007030:	50040000 	.word	0x50040000
 8007034:	50040300 	.word	0x50040300
 8007038:	fff0c007 	.word	0xfff0c007

0800703c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fe75 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d167      	bne.n	8007128 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_ADC_Start_DMA+0x2a>
 8007062:	2302      	movs	r3, #2
 8007064:	e063      	b.n	800712e <HAL_ADC_Start_DMA+0xf2>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fcc2 	bl	80079f8 <ADC_Enable>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d14f      	bne.n	800711e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d006      	beq.n	80070ac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	f023 0206 	bic.w	r2, r3, #6
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	659a      	str	r2, [r3, #88]	; 0x58
 80070aa:	e002      	b.n	80070b2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b6:	4a20      	ldr	r2, [pc, #128]	; (8007138 <HAL_ADC_Start_DMA+0xfc>)
 80070b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	4a1f      	ldr	r2, [pc, #124]	; (800713c <HAL_ADC_Start_DMA+0x100>)
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <HAL_ADC_Start_DMA+0x104>)
 80070c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	221c      	movs	r2, #28
 80070d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0210 	orr.w	r2, r2, #16
 80070e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0201 	orr.w	r2, r2, #1
 80070f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3340      	adds	r3, #64	; 0x40
 8007104:	4619      	mov	r1, r3
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f001 fa49 	bl	80085a0 <HAL_DMA_Start_IT>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fde8 	bl	8006cec <LL_ADC_REG_StartConversion>
 800711c:	e006      	b.n	800712c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007126:	e001      	b.n	800712c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007128:	2302      	movs	r3, #2
 800712a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08007b5d 	.word	0x08007b5d
 800713c:	08007c35 	.word	0x08007c35
 8007140:	08007c51 	.word	0x08007c51

08007144 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_ADC_Stop_DMA+0x16>
 8007156:	2302      	movs	r3, #2
 8007158:	e051      	b.n	80071fe <HAL_ADC_Stop_DMA+0xba>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007162:	2103      	movs	r1, #3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb93 	bl	8007890 <ADC_ConversionStop>
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d13f      	bne.n	80071f4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007188:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d10f      	bne.n	80071b2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fa7d 	bl	8008696 <HAL_DMA_Abort>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0210 	bic.w	r2, r2, #16
 80071c0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc6f 	bl	8007aac <ADC_Disable>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
 80071d2:	e002      	b.n	80071da <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc69 	bl	8007aac <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	f043 0201 	orr.w	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b0a6      	sub	sp, #152	; 0x98
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_ADC_ConfigChannel+0x22>
 800723a:	2302      	movs	r3, #2
 800723c:	e31e      	b.n	800787c <HAL_ADC_ConfigChannel+0x660>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fd76 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 8303 	bne.w	800785e <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	6859      	ldr	r1, [r3, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	f7ff fc30 	bl	8006aca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fd64 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 8007274:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fd84 	bl	8006d8a <LL_ADC_INJ_IsConversionOngoing>
 8007282:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800728a:	2b00      	cmp	r3, #0
 800728c:	f040 8148 	bne.w	8007520 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 8143 	bne.w	8007520 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7ff fc38 	bl	8006b1c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	08db      	lsrs	r3, r3, #3
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d00a      	beq.n	80072e4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6919      	ldr	r1, [r3, #16]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072de:	f7ff fb93 	bl	8006a08 <LL_ADC_SetOffset>
 80072e2:	e11d      	b.n	8007520 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fbae 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <HAL_ADC_ConfigChannel+0xf4>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fba3 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 8007306:	4603      	mov	r3, r0
 8007308:	0e9b      	lsrs	r3, r3, #26
 800730a:	f003 021f 	and.w	r2, r3, #31
 800730e:	e012      	b.n	8007336 <HAL_ADC_ConfigChannel+0x11a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fb98 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 800731c:	4603      	mov	r3, r0
 800731e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007326:	fa93 f3a3 	rbit	r3, r3
 800732a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800732c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733e:	2b00      	cmp	r3, #0
 8007340:	d105      	bne.n	800734e <HAL_ADC_ConfigChannel+0x132>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	0e9b      	lsrs	r3, r3, #26
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	e00a      	b.n	8007364 <HAL_ADC_ConfigChannel+0x148>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007356:	fa93 f3a3 	rbit	r3, r3
 800735a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800735c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735e:	fab3 f383 	clz	r3, r3
 8007362:	b2db      	uxtb	r3, r3
 8007364:	429a      	cmp	r2, r3
 8007366:	d106      	bne.n	8007376 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fb7f 	bl	8006a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2101      	movs	r1, #1
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fb65 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 8007382:	4603      	mov	r3, r0
 8007384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_ADC_ConfigChannel+0x186>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2101      	movs	r1, #1
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fb5a 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 8007398:	4603      	mov	r3, r0
 800739a:	0e9b      	lsrs	r3, r3, #26
 800739c:	f003 021f 	and.w	r2, r3, #31
 80073a0:	e010      	b.n	80073c4 <HAL_ADC_ConfigChannel+0x1a8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2101      	movs	r1, #1
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fb4f 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 80073ae:	4603      	mov	r3, r0
 80073b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b4:	fa93 f3a3 	rbit	r3, r3
 80073b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x1c0>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	0e9b      	lsrs	r3, r3, #26
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	e00a      	b.n	80073f2 <HAL_ADC_ConfigChannel+0x1d6>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80073ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ec:	fab3 f383 	clz	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d106      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fb38 	bl	8006a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2102      	movs	r1, #2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fb1e 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 8007410:	4603      	mov	r3, r0
 8007412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x214>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fb13 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 8007426:	4603      	mov	r3, r0
 8007428:	0e9b      	lsrs	r3, r3, #26
 800742a:	f003 021f 	and.w	r2, r3, #31
 800742e:	e010      	b.n	8007452 <HAL_ADC_ConfigChannel+0x236>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fb08 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 800743c:	4603      	mov	r3, r0
 800743e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007442:	fa93 f3a3 	rbit	r3, r3
 8007446:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8007448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744a:	fab3 f383 	clz	r3, r3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <HAL_ADC_ConfigChannel+0x24e>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	0e9b      	lsrs	r3, r3, #26
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	e00a      	b.n	8007480 <HAL_ADC_ConfigChannel+0x264>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007472:	fa93 f3a3 	rbit	r3, r3
 8007476:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747a:	fab3 f383 	clz	r3, r3
 800747e:	b2db      	uxtb	r3, r3
 8007480:	429a      	cmp	r2, r3
 8007482:	d106      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2200      	movs	r2, #0
 800748a:	2102      	movs	r1, #2
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff faf1 	bl	8006a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2103      	movs	r1, #3
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fad7 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 800749e:	4603      	mov	r3, r0
 80074a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_ADC_ConfigChannel+0x2a2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2103      	movs	r1, #3
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff facc 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 80074b4:	4603      	mov	r3, r0
 80074b6:	0e9b      	lsrs	r3, r3, #26
 80074b8:	f003 021f 	and.w	r2, r3, #31
 80074bc:	e010      	b.n	80074e0 <HAL_ADC_ConfigChannel+0x2c4>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2103      	movs	r1, #3
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fac1 	bl	8006a4c <LL_ADC_GetOffsetChannel>
 80074ca:	4603      	mov	r3, r0
 80074cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d0:	fa93 f3a3 	rbit	r3, r3
 80074d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80074d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d8:	fab3 f383 	clz	r3, r3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_ADC_ConfigChannel+0x2dc>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	0e9b      	lsrs	r3, r3, #26
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	e00a      	b.n	800750e <HAL_ADC_ConfigChannel+0x2f2>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007500:	fa93 f3a3 	rbit	r3, r3
 8007504:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8007506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007508:	fab3 f383 	clz	r3, r3
 800750c:	b2db      	uxtb	r3, r3
 800750e:	429a      	cmp	r2, r3
 8007510:	d106      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	2103      	movs	r1, #3
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff faaa 	bl	8006a74 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fbbb 	bl	8006ca0 <LL_ADC_IsEnabled>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 819f 	bne.w	8007870 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6819      	ldr	r1, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	461a      	mov	r2, r3
 8007540:	f7ff fb14 	bl	8006b6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4aab      	ldr	r2, [pc, #684]	; (80077f8 <HAL_ADC_ConfigChannel+0x5dc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f040 80fd 	bne.w	800774a <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <HAL_ADC_ConfigChannel+0x35c>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	0e9b      	lsrs	r3, r3, #26
 8007566:	3301      	adds	r3, #1
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2b09      	cmp	r3, #9
 800756e:	bf94      	ite	ls
 8007570:	2301      	movls	r3, #1
 8007572:	2300      	movhi	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e012      	b.n	800759e <HAL_ADC_ConfigChannel+0x382>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007580:	fa93 f3a3 	rbit	r3, r3
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007588:	fab3 f383 	clz	r3, r3
 800758c:	b2db      	uxtb	r3, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2b09      	cmp	r3, #9
 8007596:	bf94      	ite	ls
 8007598:	2301      	movls	r3, #1
 800759a:	2300      	movhi	r3, #0
 800759c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d064      	beq.n	800766c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <HAL_ADC_ConfigChannel+0x3a2>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0e9b      	lsrs	r3, r3, #26
 80075b4:	3301      	adds	r3, #1
 80075b6:	069b      	lsls	r3, r3, #26
 80075b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075bc:	e00e      	b.n	80075dc <HAL_ADC_ConfigChannel+0x3c0>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	fa93 f3a3 	rbit	r3, r3
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	fab3 f383 	clz	r3, r3
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	3301      	adds	r3, #1
 80075d6:	069b      	lsls	r3, r3, #26
 80075d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <HAL_ADC_ConfigChannel+0x3e0>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	0e9b      	lsrs	r3, r3, #26
 80075ee:	3301      	adds	r3, #1
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	e010      	b.n	800761e <HAL_ADC_ConfigChannel+0x402>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	fa93 f3a3 	rbit	r3, r3
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	fab3 f383 	clz	r3, r3
 8007610:	b2db      	uxtb	r3, r3
 8007612:	3301      	adds	r3, #1
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f303 	lsl.w	r3, r1, r3
 800761e:	ea42 0103 	orr.w	r1, r2, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <HAL_ADC_ConfigChannel+0x428>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	0e9b      	lsrs	r3, r3, #26
 8007634:	3301      	adds	r3, #1
 8007636:	f003 021f 	and.w	r2, r3, #31
 800763a:	4613      	mov	r3, r2
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	4413      	add	r3, r2
 8007640:	051b      	lsls	r3, r3, #20
 8007642:	e011      	b.n	8007668 <HAL_ADC_ConfigChannel+0x44c>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	fa93 f3a3 	rbit	r3, r3
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	fab3 f383 	clz	r3, r3
 8007658:	b2db      	uxtb	r3, r3
 800765a:	3301      	adds	r3, #1
 800765c:	f003 021f 	and.w	r2, r3, #31
 8007660:	4613      	mov	r3, r2
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	4413      	add	r3, r2
 8007666:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007668:	430b      	orrs	r3, r1
 800766a:	e069      	b.n	8007740 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x46c>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	0e9b      	lsrs	r3, r3, #26
 800767e:	3301      	adds	r3, #1
 8007680:	069b      	lsls	r3, r3, #26
 8007682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007686:	e00e      	b.n	80076a6 <HAL_ADC_ConfigChannel+0x48a>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	fa93 f3a3 	rbit	r3, r3
 8007694:	61fb      	str	r3, [r7, #28]
  return result;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	fab3 f383 	clz	r3, r3
 800769c:	b2db      	uxtb	r3, r3
 800769e:	3301      	adds	r3, #1
 80076a0:	069b      	lsls	r3, r3, #26
 80076a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <HAL_ADC_ConfigChannel+0x4aa>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	0e9b      	lsrs	r3, r3, #26
 80076b8:	3301      	adds	r3, #1
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	2101      	movs	r1, #1
 80076c0:	fa01 f303 	lsl.w	r3, r1, r3
 80076c4:	e010      	b.n	80076e8 <HAL_ADC_ConfigChannel+0x4cc>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	fa93 f3a3 	rbit	r3, r3
 80076d2:	617b      	str	r3, [r7, #20]
  return result;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	fab3 f383 	clz	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	3301      	adds	r3, #1
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2101      	movs	r1, #1
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	ea42 0103 	orr.w	r1, r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10d      	bne.n	8007714 <HAL_ADC_ConfigChannel+0x4f8>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0e9b      	lsrs	r3, r3, #26
 80076fe:	3301      	adds	r3, #1
 8007700:	f003 021f 	and.w	r2, r3, #31
 8007704:	4613      	mov	r3, r2
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	4413      	add	r3, r2
 800770a:	3b1e      	subs	r3, #30
 800770c:	051b      	lsls	r3, r3, #20
 800770e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007712:	e014      	b.n	800773e <HAL_ADC_ConfigChannel+0x522>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	fa93 f3a3 	rbit	r3, r3
 8007720:	60fb      	str	r3, [r7, #12]
  return result;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	fab3 f383 	clz	r3, r3
 8007728:	b2db      	uxtb	r3, r3
 800772a:	3301      	adds	r3, #1
 800772c:	f003 021f 	and.w	r2, r3, #31
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	3b1e      	subs	r3, #30
 8007738:	051b      	lsls	r3, r3, #20
 800773a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800773e:	430b      	orrs	r3, r1
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	6892      	ldr	r2, [r2, #8]
 8007744:	4619      	mov	r1, r3
 8007746:	f7ff f9e9 	bl	8006b1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <HAL_ADC_ConfigChannel+0x5e0>)
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 808c 	beq.w	8007870 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007758:	4829      	ldr	r0, [pc, #164]	; (8007800 <HAL_ADC_ConfigChannel+0x5e4>)
 800775a:	f7ff f947 	bl	80069ec <LL_ADC_GetCommonPathInternalCh>
 800775e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007762:	4828      	ldr	r0, [pc, #160]	; (8007804 <HAL_ADC_ConfigChannel+0x5e8>)
 8007764:	f7ff fa9c 	bl	8006ca0 <LL_ADC_IsEnabled>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d16d      	bne.n	800784a <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a25      	ldr	r2, [pc, #148]	; (8007808 <HAL_ADC_ConfigChannel+0x5ec>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d126      	bne.n	80077c6 <HAL_ADC_ConfigChannel+0x5aa>
 8007778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800777c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d120      	bne.n	80077c6 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <HAL_ADC_ConfigChannel+0x5e8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d170      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800778e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007792:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007796:	4619      	mov	r1, r3
 8007798:	4819      	ldr	r0, [pc, #100]	; (8007800 <HAL_ADC_ConfigChannel+0x5e4>)
 800779a:	f7ff f914 	bl	80069c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800779e:	4b1b      	ldr	r3, [pc, #108]	; (800780c <HAL_ADC_ConfigChannel+0x5f0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	099b      	lsrs	r3, r3, #6
 80077a4:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_ADC_ConfigChannel+0x5f4>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	099a      	lsrs	r2, r3, #6
 80077ac:	4613      	mov	r3, r2
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80077b6:	e002      	b.n	80077be <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f9      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077c4:	e054      	b.n	8007870 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <HAL_ADC_ConfigChannel+0x5f8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d123      	bne.n	8007818 <HAL_ADC_ConfigChannel+0x5fc>
 80077d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11d      	bne.n	8007818 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a08      	ldr	r2, [pc, #32]	; (8007804 <HAL_ADC_ConfigChannel+0x5e8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d144      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80077e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ee:	4619      	mov	r1, r3
 80077f0:	4803      	ldr	r0, [pc, #12]	; (8007800 <HAL_ADC_ConfigChannel+0x5e4>)
 80077f2:	f7ff f8e8 	bl	80069c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077f6:	e03b      	b.n	8007870 <HAL_ADC_ConfigChannel+0x654>
 80077f8:	407f0000 	.word	0x407f0000
 80077fc:	80080000 	.word	0x80080000
 8007800:	50040300 	.word	0x50040300
 8007804:	50040000 	.word	0x50040000
 8007808:	c7520000 	.word	0xc7520000
 800780c:	20000078 	.word	0x20000078
 8007810:	053e2d63 	.word	0x053e2d63
 8007814:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a19      	ldr	r2, [pc, #100]	; (8007884 <HAL_ADC_ConfigChannel+0x668>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d126      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x654>
 8007822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d120      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <HAL_ADC_ConfigChannel+0x66c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d11b      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007840:	4619      	mov	r1, r3
 8007842:	4812      	ldr	r0, [pc, #72]	; (800788c <HAL_ADC_ConfigChannel+0x670>)
 8007844:	f7ff f8bf 	bl	80069c6 <LL_ADC_SetCommonPathInternalCh>
 8007848:	e012      	b.n	8007870 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	f043 0220 	orr.w	r2, r3, #32
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800785c:	e008      	b.n	8007870 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007878:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800787c:	4618      	mov	r0, r3
 800787e:	3798      	adds	r7, #152	; 0x98
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	80000001 	.word	0x80000001
 8007888:	50040000 	.word	0x50040000
 800788c:	50040300 	.word	0x50040300

08007890 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fa48 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 80078ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fa69 	bl	8006d8a <LL_ADC_INJ_IsConversionOngoing>
 80078b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 8090 	beq.w	80079e8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02a      	beq.n	800792c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7e5b      	ldrb	r3, [r3, #25]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d126      	bne.n	800792c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7e1b      	ldrb	r3, [r3, #24]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d122      	bne.n	800792c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80078ea:	e014      	b.n	8007916 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4a41      	ldr	r2, [pc, #260]	; (80079f4 <ADC_ConversionStop+0x164>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d90d      	bls.n	8007910 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f8:	f043 0210 	orr.w	r2, r3, #16
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007904:	f043 0201 	orr.w	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e06c      	b.n	80079ea <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	3301      	adds	r3, #1
 8007914:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d1e3      	bne.n	80078ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2240      	movs	r2, #64	; 0x40
 800792a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d014      	beq.n	800795c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fa00 	bl	8006d3c <LL_ADC_REG_IsConversionOngoing>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff f9bd 	bl	8006cc6 <LL_ADC_IsDisableOngoing>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f9dc 	bl	8006d14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d014      	beq.n	800798c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fa0f 	bl	8006d8a <LL_ADC_INJ_IsConversionOngoing>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff f9a5 	bl	8006cc6 <LL_ADC_IsDisableOngoing>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff f9eb 	bl	8006d62 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d004      	beq.n	800799c <ADC_ConversionStop+0x10c>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d105      	bne.n	80079a2 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007996:	230c      	movs	r3, #12
 8007998:	617b      	str	r3, [r7, #20]
        break;
 800799a:	e005      	b.n	80079a8 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800799c:	2308      	movs	r3, #8
 800799e:	617b      	str	r3, [r7, #20]
        break;
 80079a0:	e002      	b.n	80079a8 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80079a2:	2304      	movs	r3, #4
 80079a4:	617b      	str	r3, [r7, #20]
        break;
 80079a6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80079a8:	f7fe ffc8 	bl	800693c <HAL_GetTick>
 80079ac:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80079ae:	e014      	b.n	80079da <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80079b0:	f7fe ffc4 	bl	800693c <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d90d      	bls.n	80079da <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	f043 0210 	orr.w	r2, r3, #16
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ce:	f043 0201 	orr.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e007      	b.n	80079ea <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	a33fffff 	.word	0xa33fffff

080079f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff f94b 	bl	8006ca0 <LL_ADC_IsEnabled>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d146      	bne.n	8007a9e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <ADC_Enable+0xb0>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	f043 0210 	orr.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e032      	b.n	8007aa0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff f906 	bl	8006c50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007a44:	f7fe ff7a 	bl	800693c <HAL_GetTick>
 8007a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a4a:	e021      	b.n	8007a90 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff f925 	bl	8006ca0 <LL_ADC_IsEnabled>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff f8f5 	bl	8006c50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a66:	f7fe ff69 	bl	800693c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d90d      	bls.n	8007a90 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a78:	f043 0210 	orr.w	r2, r3, #16
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	f043 0201 	orr.w	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e007      	b.n	8007aa0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d1d6      	bne.n	8007a4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	8000003f 	.word	0x8000003f

08007aac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff f904 	bl	8006cc6 <LL_ADC_IsDisableOngoing>
 8007abe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff f8eb 	bl	8006ca0 <LL_ADC_IsEnabled>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d040      	beq.n	8007b52 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d13d      	bne.n	8007b52 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 030d 	and.w	r3, r3, #13
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d10c      	bne.n	8007afe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f8c5 	bl	8006c78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2203      	movs	r2, #3
 8007af4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007af6:	f7fe ff21 	bl	800693c <HAL_GetTick>
 8007afa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007afc:	e022      	b.n	8007b44 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	f043 0210 	orr.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	f043 0201 	orr.w	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e01c      	b.n	8007b54 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007b1a:	f7fe ff0f 	bl	800693c <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d90d      	bls.n	8007b44 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2c:	f043 0210 	orr.w	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	f043 0201 	orr.w	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e007      	b.n	8007b54 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d14b      	bne.n	8007c0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d021      	beq.n	8007bd4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe ff85 	bl	8006aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d032      	beq.n	8007c06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d12b      	bne.n	8007c06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11f      	bne.n	8007c06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54
 8007bd2:	e018      	b.n	8007c06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d111      	bne.n	8007c06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	f043 0201 	orr.w	r2, r3, #1
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7f9 fde4 	bl	80017d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c0c:	e00e      	b.n	8007c2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff faf3 	bl	8007206 <HAL_ADC_ErrorCallback>
}
 8007c20:	e004      	b.n	8007c2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7f9 fdde 	bl	8001804 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f043 0204 	orr.w	r2, r3, #4
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fac5 	bl	8007206 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <LL_EXTI_EnableIT_0_31>:
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007c8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007c92:	4905      	ldr	r1, [pc, #20]	; (8007ca8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	58000800 	.word	0x58000800

08007cac <LL_EXTI_DisableIT_0_31>:
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <LL_EXTI_DisableIT_0_31+0x28>)
 8007cb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <LL_EXTI_DisableIT_0_31+0x28>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	58000800 	.word	0x58000800

08007cd8 <LL_EXTI_EnableEvent_0_31>:
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <LL_EXTI_EnableEvent_0_31+0x24>)
 8007ce2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ce6:	4905      	ldr	r1, [pc, #20]	; (8007cfc <LL_EXTI_EnableEvent_0_31+0x24>)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	58000800 	.word	0x58000800

08007d00 <LL_EXTI_DisableEvent_0_31>:
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007d08:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007d0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	4905      	ldr	r1, [pc, #20]	; (8007d28 <LL_EXTI_DisableEvent_0_31+0x28>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	58000800 	.word	0x58000800

08007d2c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4904      	ldr	r1, [pc, #16]	; (8007d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	600b      	str	r3, [r1, #0]
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	58000800 	.word	0x58000800

08007d50 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	4904      	ldr	r1, [pc, #16]	; (8007d74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]

}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	58000800 	.word	0x58000800

08007d78 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	604b      	str	r3, [r1, #4]
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	58000800 	.word	0x58000800

08007d9c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007da4:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	43db      	mvns	r3, r3
 8007dac:	4904      	ldr	r1, [pc, #16]	; (8007dc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	604b      	str	r3, [r1, #4]
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	58000800 	.word	0x58000800

08007dc4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007dcc:	4b07      	ldr	r3, [pc, #28]	; (8007dec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d101      	bne.n	8007dde <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	58000800 	.word	0x58000800

08007df0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007df8:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60d3      	str	r3, [r2, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	58000800 	.word	0x58000800

08007e10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e0c4      	b.n	8007fb6 <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e3a:	d102      	bne.n	8007e42 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e0b9      	b.n	8007fb6 <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7f9 fd31 	bl	80018c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e6c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	4b49      	ldr	r3, [pc, #292]	; (8007fc0 <HAL_COMP_Init+0x1b0>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	6979      	ldr	r1, [r7, #20]
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eae:	d106      	bne.n	8007ebe <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007eb0:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <HAL_COMP_Init+0x1b4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a43      	ldr	r2, [pc, #268]	; (8007fc4 <HAL_COMP_Init+0x1b4>)
 8007eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	e005      	b.n	8007eca <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <HAL_COMP_Init+0x1b4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <HAL_COMP_Init+0x1b4>)
 8007ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ec8:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d015      	beq.n	8007f04 <HAL_COMP_Init+0xf4>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d112      	bne.n	8007f04 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007ede:	4b3a      	ldr	r3, [pc, #232]	; (8007fc8 <HAL_COMP_Init+0x1b8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	099b      	lsrs	r3, r3, #6
 8007ee4:	4a39      	ldr	r2, [pc, #228]	; (8007fcc <HAL_COMP_Init+0x1bc>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	099a      	lsrs	r2, r3, #6
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007ef6:	e002      	b.n	8007efe <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f9      	bne.n	8007ef8 <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a31      	ldr	r2, [pc, #196]	; (8007fd0 <HAL_COMP_Init+0x1c0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d102      	bne.n	8007f14 <HAL_COMP_Init+0x104>
 8007f0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f12:	e001      	b.n	8007f18 <HAL_COMP_Init+0x108>
 8007f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f18:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d037      	beq.n	8007f96 <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007f32:	6938      	ldr	r0, [r7, #16]
 8007f34:	f7ff fefa 	bl	8007d2c <LL_EXTI_EnableRisingTrig_0_31>
 8007f38:	e002      	b.n	8007f40 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f7ff ff08 	bl	8007d50 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007f4c:	6938      	ldr	r0, [r7, #16]
 8007f4e:	f7ff ff13 	bl	8007d78 <LL_EXTI_EnableFallingTrig_0_31>
 8007f52:	e002      	b.n	8007f5a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007f54:	6938      	ldr	r0, [r7, #16]
 8007f56:	f7ff ff21 	bl	8007d9c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f7ff ff48 	bl	8007df0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007f6c:	6938      	ldr	r0, [r7, #16]
 8007f6e:	f7ff feb3 	bl	8007cd8 <LL_EXTI_EnableEvent_0_31>
 8007f72:	e002      	b.n	8007f7a <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007f74:	6938      	ldr	r0, [r7, #16]
 8007f76:	f7ff fec3 	bl	8007d00 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007f86:	6938      	ldr	r0, [r7, #16]
 8007f88:	f7ff fe7c 	bl	8007c84 <LL_EXTI_EnableIT_0_31>
 8007f8c:	e009      	b.n	8007fa2 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007f8e:	6938      	ldr	r0, [r7, #16]
 8007f90:	f7ff fe8c 	bl	8007cac <LL_EXTI_DisableIT_0_31>
 8007f94:	e005      	b.n	8007fa2 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f7ff feb2 	bl	8007d00 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007f9c:	6938      	ldr	r0, [r7, #16]
 8007f9e:	f7ff fe85 	bl	8007cac <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d103      	bne.n	8007fb6 <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	f9207c03 	.word	0xf9207c03
 8007fc4:	40010204 	.word	0x40010204
 8007fc8:	20000078 	.word	0x20000078
 8007fcc:	053e2d63 	.word	0x053e2d63
 8007fd0:	40010200 	.word	0x40010200

08007fd4 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
 8007fee:	e02f      	b.n	8008050 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ffe:	d102      	bne.n	8008006 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	e024      	b.n	8008050 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	d11c      	bne.n	800804c <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0201 	orr.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <HAL_COMP_Start+0x8c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	099b      	lsrs	r3, r3, #6
 8008030:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <HAL_COMP_Start+0x90>)
 8008032:	fba2 2303 	umull	r2, r3, r2, r3
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800803c:	e002      	b.n	8008044 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3b01      	subs	r3, #1
 8008042:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f9      	bne.n	800803e <HAL_COMP_Start+0x6a>
 800804a:	e001      	b.n	8008050 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000078 	.word	0x20000078
 8008064:	053e2d63 	.word	0x053e2d63

08008068 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e01f      	b.n	80080c0 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800808a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808e:	d102      	bne.n	8008096 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e014      	b.n	80080c0 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80080ba:	e001      	b.n	80080c0 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a11      	ldr	r2, [pc, #68]	; (8008124 <HAL_COMP_IRQHandler+0x54>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d102      	bne.n	80080e8 <HAL_COMP_IRQHandler+0x18>
 80080e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080e6:	e001      	b.n	80080ec <HAL_COMP_IRQHandler+0x1c>
 80080e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff fe68 	bl	8007dc4 <LL_EXTI_IsActiveFlag_0_31>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d010      	beq.n	800811c <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 80080fa:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <HAL_COMP_IRQHandler+0x58>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8008106:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800810a:	f7ff fe71 	bl	8007df0 <LL_EXTI_ClearFlag_0_31>
 800810e:	e002      	b.n	8008116 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff fe6d 	bl	8007df0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fd ff72 	bl	8006000 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40010200 	.word	0x40010200
 8008128:	40010204 	.word	0x40010204

0800812c <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	0f9b      	lsrs	r3, r3, #30
 800813c:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <__NVIC_SetPriorityGrouping+0x44>)
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008168:	4013      	ands	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800817c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800817e:	4a04      	ldr	r2, [pc, #16]	; (8008190 <__NVIC_SetPriorityGrouping+0x44>)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	60d3      	str	r3, [r2, #12]
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	e000ed00 	.word	0xe000ed00

08008194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__NVIC_GetPriorityGrouping+0x18>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	f003 0307 	and.w	r3, r3, #7
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	e000ed00 	.word	0xe000ed00

080081b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	db0b      	blt.n	80081da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	f003 021f 	and.w	r2, r3, #31
 80081c8:	4907      	ldr	r1, [pc, #28]	; (80081e8 <__NVIC_EnableIRQ+0x38>)
 80081ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	2001      	movs	r0, #1
 80081d2:	fa00 f202 	lsl.w	r2, r0, r2
 80081d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	e000e100 	.word	0xe000e100

080081ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db10      	blt.n	8008220 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	f003 021f 	and.w	r2, r3, #31
 8008204:	4909      	ldr	r1, [pc, #36]	; (800822c <__NVIC_DisableIRQ+0x40>)
 8008206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	2001      	movs	r0, #1
 800820e:	fa00 f202 	lsl.w	r2, r0, r2
 8008212:	3320      	adds	r3, #32
 8008214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800821c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	e000e100 	.word	0xe000e100

08008230 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800823a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	db0c      	blt.n	800825c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	f003 021f 	and.w	r2, r3, #31
 8008248:	4907      	ldr	r1, [pc, #28]	; (8008268 <__NVIC_SetPendingIRQ+0x38>)
 800824a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	2001      	movs	r0, #1
 8008252:	fa00 f202 	lsl.w	r2, r0, r2
 8008256:	3340      	adds	r3, #64	; 0x40
 8008258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	e000e100 	.word	0xe000e100

0800826c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800827a:	2b00      	cmp	r3, #0
 800827c:	db0c      	blt.n	8008298 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	f003 021f 	and.w	r2, r3, #31
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <__NVIC_ClearPendingIRQ+0x38>)
 8008286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	2001      	movs	r0, #1
 800828e:	fa00 f202 	lsl.w	r2, r0, r2
 8008292:	3360      	adds	r3, #96	; 0x60
 8008294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000e100 	.word	0xe000e100

080082a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db0a      	blt.n	80082d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	490c      	ldr	r1, [pc, #48]	; (80082f4 <__NVIC_SetPriority+0x4c>)
 80082c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c6:	0112      	lsls	r2, r2, #4
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	440b      	add	r3, r1
 80082cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082d0:	e00a      	b.n	80082e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	4908      	ldr	r1, [pc, #32]	; (80082f8 <__NVIC_SetPriority+0x50>)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	3b04      	subs	r3, #4
 80082e0:	0112      	lsls	r2, r2, #4
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	440b      	add	r3, r1
 80082e6:	761a      	strb	r2, [r3, #24]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	e000e100 	.word	0xe000e100
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	; 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f1c3 0307 	rsb	r3, r3, #7
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf28      	it	cs
 800831a:	2304      	movcs	r3, #4
 800831c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3304      	adds	r3, #4
 8008322:	2b06      	cmp	r3, #6
 8008324:	d902      	bls.n	800832c <NVIC_EncodePriority+0x30>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3b03      	subs	r3, #3
 800832a:	e000      	b.n	800832e <NVIC_EncodePriority+0x32>
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43da      	mvns	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	401a      	ands	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	43d9      	mvns	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008354:	4313      	orrs	r3, r2
         );
}
 8008356:	4618      	mov	r0, r3
 8008358:	3724      	adds	r7, #36	; 0x24
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008368:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800836c:	4b05      	ldr	r3, [pc, #20]	; (8008384 <__NVIC_SystemReset+0x20>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008374:	4903      	ldr	r1, [pc, #12]	; (8008384 <__NVIC_SystemReset+0x20>)
 8008376:	4b04      	ldr	r3, [pc, #16]	; (8008388 <__NVIC_SystemReset+0x24>)
 8008378:	4313      	orrs	r3, r2
 800837a:	60cb      	str	r3, [r1, #12]
 800837c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <__NVIC_SystemReset+0x1c>
 8008384:	e000ed00 	.word	0xe000ed00
 8008388:	05fa0004 	.word	0x05fa0004

0800838c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff fed9 	bl	800814c <__NVIC_SetPriorityGrouping>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	4603      	mov	r3, r0
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083b0:	f7ff fef0 	bl	8008194 <__NVIC_GetPriorityGrouping>
 80083b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	f7ff ff9e 	bl	80082fc <NVIC_EncodePriority>
 80083c0:	4602      	mov	r2, r0
 80083c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ff6d 	bl	80082a8 <__NVIC_SetPriority>
}
 80083ce:	bf00      	nop
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	4603      	mov	r3, r0
 80083de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fee3 	bl	80081b0 <__NVIC_EnableIRQ>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	4603      	mov	r3, r0
 80083fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80083fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fef3 	bl	80081ec <__NVIC_DisableIRQ>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008412:	f7ff ffa7 	bl	8008364 <__NVIC_SystemReset>

08008416 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	4603      	mov	r3, r0
 800841e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff ff03 	bl	8008230 <__NVIC_SetPendingIRQ>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800843c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff ff13 	bl	800826c <__NVIC_ClearPendingIRQ>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e08d      	b.n	800857e <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	4b47      	ldr	r3, [pc, #284]	; (8008588 <HAL_DMA_Init+0x138>)
 800846a:	429a      	cmp	r2, r3
 800846c:	d80f      	bhi.n	800848e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	4b45      	ldr	r3, [pc, #276]	; (800858c <HAL_DMA_Init+0x13c>)
 8008476:	4413      	add	r3, r2
 8008478:	4a45      	ldr	r2, [pc, #276]	; (8008590 <HAL_DMA_Init+0x140>)
 800847a:	fba2 2303 	umull	r2, r3, r2, r3
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	009a      	lsls	r2, r3, #2
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a42      	ldr	r2, [pc, #264]	; (8008594 <HAL_DMA_Init+0x144>)
 800848a:	641a      	str	r2, [r3, #64]	; 0x40
 800848c:	e00e      	b.n	80084ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	4b40      	ldr	r3, [pc, #256]	; (8008598 <HAL_DMA_Init+0x148>)
 8008496:	4413      	add	r3, r2
 8008498:	4a3d      	ldr	r2, [pc, #244]	; (8008590 <HAL_DMA_Init+0x140>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	091b      	lsrs	r3, r3, #4
 80084a0:	009a      	lsls	r2, r3, #2
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a3c      	ldr	r2, [pc, #240]	; (800859c <HAL_DMA_Init+0x14c>)
 80084aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa74 	bl	80089ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800850c:	d102      	bne.n	8008514 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008528:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d010      	beq.n	8008554 <HAL_DMA_Init+0x104>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b04      	cmp	r3, #4
 8008538:	d80c      	bhi.n	8008554 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa94 	bl	8008a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	e008      	b.n	8008566 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40020407 	.word	0x40020407
 800858c:	bffdfff8 	.word	0xbffdfff8
 8008590:	cccccccd 	.word	0xcccccccd
 8008594:	40020000 	.word	0x40020000
 8008598:	bffdfbf8 	.word	0xbffdfbf8
 800859c:	40020400 	.word	0x40020400

080085a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_DMA_Start_IT+0x20>
 80085bc:	2302      	movs	r3, #2
 80085be:	e066      	b.n	800868e <HAL_DMA_Start_IT+0xee>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d155      	bne.n	8008680 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0201 	bic.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f9b9 	bl	8008970 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 020e 	orr.w	r2, r2, #14
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e00f      	b.n	8008638 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0204 	bic.w	r2, r2, #4
 8008626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 020a 	orr.w	r2, r2, #10
 8008636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008654:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800866c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e005      	b.n	800868c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008688:	2302      	movs	r3, #2
 800868a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e04f      	b.n	8008748 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d008      	beq.n	80086c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2204      	movs	r2, #4
 80086b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e040      	b.n	8008748 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 020e 	bic.w	r2, r2, #14
 80086d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0201 	bic.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fa:	f003 021c 	and.w	r2, r3, #28
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	2101      	movs	r1, #1
 8008704:	fa01 f202 	lsl.w	r2, r1, r2
 8008708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00c      	beq.n	8008736 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800872a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008734:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d005      	beq.n	8008778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2204      	movs	r2, #4
 8008770:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	e047      	b.n	8008808 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 020e 	bic.w	r2, r2, #14
 8008786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0201 	bic.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ac:	f003 021c 	and.w	r2, r3, #28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	2101      	movs	r1, #1
 80087b6:	fa01 f202 	lsl.w	r2, r1, r2
 80087ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00c      	beq.n	80087e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
    }
  }
  return status;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882e:	f003 031c 	and.w	r3, r3, #28
 8008832:	2204      	movs	r2, #4
 8008834:	409a      	lsls	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d026      	beq.n	800888c <HAL_DMA_IRQHandler+0x7a>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d021      	beq.n	800888c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0204 	bic.w	r2, r2, #4
 8008864:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	f003 021c 	and.w	r2, r3, #28
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	2104      	movs	r1, #4
 8008874:	fa01 f202 	lsl.w	r2, r1, r2
 8008878:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	2b00      	cmp	r3, #0
 8008880:	d071      	beq.n	8008966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800888a:	e06c      	b.n	8008966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008890:	f003 031c 	and.w	r3, r3, #28
 8008894:	2202      	movs	r2, #2
 8008896:	409a      	lsls	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4013      	ands	r3, r2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d02e      	beq.n	80088fe <HAL_DMA_IRQHandler+0xec>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d029      	beq.n	80088fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 020a 	bic.w	r2, r2, #10
 80088c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	f003 021c 	and.w	r2, r3, #28
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	2102      	movs	r1, #2
 80088de:	fa01 f202 	lsl.w	r2, r1, r2
 80088e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d038      	beq.n	8008966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80088fc:	e033      	b.n	8008966 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	f003 031c 	and.w	r3, r3, #28
 8008906:	2208      	movs	r2, #8
 8008908:	409a      	lsls	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4013      	ands	r3, r2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02a      	beq.n	8008968 <HAL_DMA_IRQHandler+0x156>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d025      	beq.n	8008968 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 020e 	bic.w	r2, r2, #14
 800892a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008930:	f003 021c 	and.w	r2, r3, #28
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	2101      	movs	r1, #1
 800893a:	fa01 f202 	lsl.w	r2, r1, r2
 800893e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008966:	bf00      	nop
 8008968:	bf00      	nop
}
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008986:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008998:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	f003 021c 	and.w	r2, r3, #28
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2101      	movs	r1, #1
 80089a8:	fa01 f202 	lsl.w	r2, r1, r2
 80089ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d108      	bne.n	80089d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80089ce:	e007      	b.n	80089e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
}
 80089e0:	bf00      	nop
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d80a      	bhi.n	8008a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	089b      	lsrs	r3, r3, #2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6493      	str	r3, [r2, #72]	; 0x48
 8008a14:	e007      	b.n	8008a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	009a      	lsls	r2, r3, #2
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008a20:	4413      	add	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	3b08      	subs	r3, #8
 8008a2e:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	091b      	lsrs	r3, r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 031c 	and.w	r3, r3, #28
 8008a44:	2201      	movs	r2, #1
 8008a46:	409a      	lsls	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	40020407 	.word	0x40020407
 8008a5c:	4002081c 	.word	0x4002081c
 8008a60:	cccccccd 	.word	0xcccccccd
 8008a64:	40020880 	.word	0x40020880

08008a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	461a      	mov	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a08      	ldr	r2, [pc, #32]	; (8008aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008a8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	2201      	movs	r2, #1
 8008a96:	409a      	lsls	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	1000823f 	.word	0x1000823f
 8008aac:	40020940 	.word	0x40020940

08008ab0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008abe:	e14c      	b.n	8008d5a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8008acc:	4013      	ands	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 813e 	beq.w	8008d54 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d003      	beq.n	8008ae8 <HAL_GPIO_Init+0x38>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b12      	cmp	r3, #18
 8008ae6:	d123      	bne.n	8008b30 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	08da      	lsrs	r2, r3, #3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3208      	adds	r2, #8
 8008af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	220f      	movs	r2, #15
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	43db      	mvns	r3, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	08da      	lsrs	r2, r3, #3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3208      	adds	r2, #8
 8008b2a:	6939      	ldr	r1, [r7, #16]
 8008b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	43db      	mvns	r3, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4013      	ands	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f003 0203 	and.w	r2, r3, #3
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d00b      	beq.n	8008b84 <HAL_GPIO_Init+0xd4>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d007      	beq.n	8008b84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b78:	2b11      	cmp	r3, #17
 8008b7a:	d003      	beq.n	8008b84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2b12      	cmp	r3, #18
 8008b82:	d130      	bne.n	8008be6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	2203      	movs	r2, #3
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bba:	2201      	movs	r2, #1
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 0201 	and.w	r2, r3, #1
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	43db      	mvns	r3, r3
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8098 	beq.w	8008d54 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008c24:	4a54      	ldr	r2, [pc, #336]	; (8008d78 <HAL_GPIO_Init+0x2c8>)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	089b      	lsrs	r3, r3, #2
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	220f      	movs	r2, #15
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	43db      	mvns	r3, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c4e:	d019      	beq.n	8008c84 <HAL_GPIO_Init+0x1d4>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a4a      	ldr	r2, [pc, #296]	; (8008d7c <HAL_GPIO_Init+0x2cc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d013      	beq.n	8008c80 <HAL_GPIO_Init+0x1d0>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a49      	ldr	r2, [pc, #292]	; (8008d80 <HAL_GPIO_Init+0x2d0>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00d      	beq.n	8008c7c <HAL_GPIO_Init+0x1cc>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a48      	ldr	r2, [pc, #288]	; (8008d84 <HAL_GPIO_Init+0x2d4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <HAL_GPIO_Init+0x1c8>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a47      	ldr	r2, [pc, #284]	; (8008d88 <HAL_GPIO_Init+0x2d8>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d101      	bne.n	8008c74 <HAL_GPIO_Init+0x1c4>
 8008c70:	2304      	movs	r3, #4
 8008c72:	e008      	b.n	8008c86 <HAL_GPIO_Init+0x1d6>
 8008c74:	2307      	movs	r3, #7
 8008c76:	e006      	b.n	8008c86 <HAL_GPIO_Init+0x1d6>
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e004      	b.n	8008c86 <HAL_GPIO_Init+0x1d6>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e002      	b.n	8008c86 <HAL_GPIO_Init+0x1d6>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <HAL_GPIO_Init+0x1d6>
 8008c84:	2300      	movs	r3, #0
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	f002 0203 	and.w	r2, r2, #3
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	4093      	lsls	r3, r2
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c96:	4938      	ldr	r1, [pc, #224]	; (8008d78 <HAL_GPIO_Init+0x2c8>)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	089b      	lsrs	r3, r3, #2
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ca4:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008cca:	4a30      	ldr	r2, [pc, #192]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008cd2:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008cf8:	4a24      	ldr	r2, [pc, #144]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d24:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d2a:	4b18      	ldr	r3, [pc, #96]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	43db      	mvns	r3, r3
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	4013      	ands	r3, r2
 8008d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d4e:	4a0f      	ldr	r2, [pc, #60]	; (8008d8c <HAL_GPIO_Init+0x2dc>)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	3301      	adds	r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f47f aeab 	bne.w	8008ac0 <HAL_GPIO_Init+0x10>
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	48000400 	.word	0x48000400
 8008d80:	48000800 	.word	0x48000800
 8008d84:	48000c00 	.word	0x48000c00
 8008d88:	48001000 	.word	0x48001000
 8008d8c:	58000800 	.word	0x58000800

08008d90 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	887b      	ldrh	r3, [r7, #2]
 8008da2:	4013      	ands	r3, r2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
 8008dac:	e001      	b.n	8008db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	807b      	strh	r3, [r7, #2]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008dd0:	787b      	ldrb	r3, [r7, #1]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008dd6:	887a      	ldrh	r2, [r7, #2]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ddc:	e002      	b.n	8008de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695a      	ldr	r2, [r3, #20]
 8008e00:	887b      	ldrh	r3, [r7, #2]
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e08:	887a      	ldrh	r2, [r7, #2]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008e0e:	e002      	b.n	8008e16 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e10:	887a      	ldrh	r2, [r7, #2]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	619a      	str	r2, [r3, #24]
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	88fb      	ldrh	r3, [r7, #6]
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e3a:	4a05      	ldr	r2, [pc, #20]	; (8008e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fa fe86 	bl	8003b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	58000800 	.word	0x58000800

08008e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e081      	b.n	8008f6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7fa fdb2 	bl	80039e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2224      	movs	r2, #36	; 0x24
 8008e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d107      	bne.n	8008ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eca:	609a      	str	r2, [r3, #8]
 8008ecc:	e006      	b.n	8008edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d104      	bne.n	8008eee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691a      	ldr	r2, [r3, #16]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	ea42 0103 	orr.w	r1, r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	021a      	lsls	r2, r3, #8
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69d9      	ldr	r1, [r3, #28]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0201 	orr.w	r2, r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	460b      	mov	r3, r1
 8008f82:	817b      	strh	r3, [r7, #10]
 8008f84:	4613      	mov	r3, r2
 8008f86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	f040 80da 	bne.w	800914a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_I2C_Master_Transmit+0x30>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e0d3      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fac:	f7fd fcc6 	bl	800693c <HAL_GetTick>
 8008fb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	2319      	movs	r3, #25
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f001 fbba 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e0be      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2221      	movs	r2, #33	; 0x21
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2210      	movs	r2, #16
 8008fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	893a      	ldrh	r2, [r7, #8]
 8008fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2bff      	cmp	r3, #255	; 0xff
 8008ffe:	d90e      	bls.n	800901e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	22ff      	movs	r2, #255	; 0xff
 8009004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900a:	b2da      	uxtb	r2, r3
 800900c:	8979      	ldrh	r1, [r7, #10]
 800900e:	4b51      	ldr	r3, [pc, #324]	; (8009154 <HAL_I2C_Master_Transmit+0x1e0>)
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fd1c 	bl	800aa54 <I2C_TransferConfig>
 800901c:	e06c      	b.n	80090f8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902c:	b2da      	uxtb	r2, r3
 800902e:	8979      	ldrh	r1, [r7, #10]
 8009030:	4b48      	ldr	r3, [pc, #288]	; (8009154 <HAL_I2C_Master_Transmit+0x1e0>)
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f001 fd0b 	bl	800aa54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800903e:	e05b      	b.n	80090f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	6a39      	ldr	r1, [r7, #32]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f001 fbb7 	bl	800a7b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e07b      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009088:	b29b      	uxth	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d034      	beq.n	80090f8 <HAL_I2C_Master_Transmit+0x184>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d130      	bne.n	80090f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	2200      	movs	r2, #0
 800909e:	2180      	movs	r1, #128	; 0x80
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fb49 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e04d      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2bff      	cmp	r3, #255	; 0xff
 80090b8:	d90e      	bls.n	80090d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	22ff      	movs	r2, #255	; 0xff
 80090be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	8979      	ldrh	r1, [r7, #10]
 80090c8:	2300      	movs	r3, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f001 fcbf 	bl	800aa54 <I2C_TransferConfig>
 80090d6:	e00f      	b.n	80090f8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090dc:	b29a      	uxth	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	8979      	ldrh	r1, [r7, #10]
 80090ea:	2300      	movs	r3, #0
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 fcae 	bl	800aa54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d19e      	bne.n	8009040 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	6a39      	ldr	r1, [r7, #32]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f001 fb96 	bl	800a838 <I2C_WaitOnSTOPFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e01a      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2220      	movs	r2, #32
 800911c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <HAL_I2C_Master_Transmit+0x1e4>)
 800912a:	400b      	ands	r3, r1
 800912c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2220      	movs	r2, #32
 8009132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	e000      	b.n	800914c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800914a:	2302      	movs	r3, #2
  }
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	80002000 	.word	0x80002000
 8009158:	fe00e800 	.word	0xfe00e800

0800915c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	461a      	mov	r2, r3
 8009168:	460b      	mov	r3, r1
 800916a:	817b      	strh	r3, [r7, #10]
 800916c:	4613      	mov	r3, r2
 800916e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b20      	cmp	r3, #32
 800917a:	f040 80db 	bne.w	8009334 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_I2C_Master_Receive+0x30>
 8009188:	2302      	movs	r3, #2
 800918a:	e0d4      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009194:	f7fd fbd2 	bl	800693c <HAL_GetTick>
 8009198:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	2319      	movs	r3, #25
 80091a0:	2201      	movs	r2, #1
 80091a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f001 fac6 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e0bf      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2222      	movs	r2, #34	; 0x22
 80091ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2210      	movs	r2, #16
 80091c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	893a      	ldrh	r2, [r7, #8]
 80091d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2bff      	cmp	r3, #255	; 0xff
 80091e6:	d90e      	bls.n	8009206 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	22ff      	movs	r2, #255	; 0xff
 80091ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	8979      	ldrh	r1, [r7, #10]
 80091f6:	4b52      	ldr	r3, [pc, #328]	; (8009340 <HAL_I2C_Master_Receive+0x1e4>)
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f001 fc28 	bl	800aa54 <I2C_TransferConfig>
 8009204:	e06d      	b.n	80092e2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009214:	b2da      	uxtb	r2, r3
 8009216:	8979      	ldrh	r1, [r7, #10]
 8009218:	4b49      	ldr	r3, [pc, #292]	; (8009340 <HAL_I2C_Master_Receive+0x1e4>)
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f001 fc17 	bl	800aa54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009226:	e05c      	b.n	80092e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	6a39      	ldr	r1, [r7, #32]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f001 fb3f 	bl	800a8b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e07c      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009258:	3b01      	subs	r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009264:	b29b      	uxth	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009272:	b29b      	uxth	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d034      	beq.n	80092e2 <HAL_I2C_Master_Receive+0x186>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800927c:	2b00      	cmp	r3, #0
 800927e:	d130      	bne.n	80092e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	2200      	movs	r2, #0
 8009288:	2180      	movs	r1, #128	; 0x80
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f001 fa54 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e04d      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2bff      	cmp	r3, #255	; 0xff
 80092a2:	d90e      	bls.n	80092c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	8979      	ldrh	r1, [r7, #10]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f001 fbca 	bl	800aa54 <I2C_TransferConfig>
 80092c0:	e00f      	b.n	80092e2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	8979      	ldrh	r1, [r7, #10]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f001 fbb9 	bl	800aa54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d19d      	bne.n	8009228 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	6a39      	ldr	r1, [r7, #32]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f001 faa1 	bl	800a838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e01a      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2220      	movs	r2, #32
 8009306:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <HAL_I2C_Master_Receive+0x1e8>)
 8009314:	400b      	ands	r3, r1
 8009316:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	e000      	b.n	8009336 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009334:	2302      	movs	r3, #2
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	80002400 	.word	0x80002400
 8009344:	fe00e800 	.word	0xfe00e800

08009348 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	460b      	mov	r3, r1
 8009356:	817b      	strh	r3, [r7, #10]
 8009358:	4613      	mov	r3, r2
 800935a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b20      	cmp	r3, #32
 8009366:	d153      	bne.n	8009410 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009376:	d101      	bne.n	800937c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8009378:	2302      	movs	r3, #2
 800937a:	e04a      	b.n	8009412 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009382:	2b01      	cmp	r3, #1
 8009384:	d101      	bne.n	800938a <HAL_I2C_Master_Receive_IT+0x42>
 8009386:	2302      	movs	r3, #2
 8009388:	e043      	b.n	8009412 <HAL_I2C_Master_Receive_IT+0xca>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2222      	movs	r2, #34	; 0x22
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2210      	movs	r2, #16
 800939e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	893a      	ldrh	r2, [r7, #8]
 80093b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4a19      	ldr	r2, [pc, #100]	; (800941c <HAL_I2C_Master_Receive_IT+0xd4>)
 80093b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4a18      	ldr	r2, [pc, #96]	; (8009420 <HAL_I2C_Master_Receive_IT+0xd8>)
 80093be:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2bff      	cmp	r3, #255	; 0xff
 80093c8:	d906      	bls.n	80093d8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80093d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	e007      	b.n	80093e8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093dc:	b29a      	uxth	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80093e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	8979      	ldrh	r1, [r7, #10]
 80093f0:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <HAL_I2C_Master_Receive_IT+0xdc>)
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f001 fb2c 	bl	800aa54 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009404:	2102      	movs	r1, #2
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f001 fb52 	bl	800aab0 <I2C_Enable_IRQ>

    return HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	e000      	b.n	8009412 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009410:	2302      	movs	r3, #2
  }
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	ffff0000 	.word	0xffff0000
 8009420:	0800972d 	.word	0x0800972d
 8009424:	80002400 	.word	0x80002400

08009428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	461a      	mov	r2, r3
 8009436:	4603      	mov	r3, r0
 8009438:	817b      	strh	r3, [r7, #10]
 800943a:	460b      	mov	r3, r1
 800943c:	813b      	strh	r3, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b20      	cmp	r3, #32
 800944c:	f040 80f9 	bne.w	8009642 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <HAL_I2C_Mem_Write+0x34>
 8009456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d105      	bne.n	8009468 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009462:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0ed      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_I2C_Mem_Write+0x4e>
 8009472:	2302      	movs	r3, #2
 8009474:	e0e6      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800947e:	f7fd fa5d 	bl	800693c <HAL_GetTick>
 8009482:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2319      	movs	r3, #25
 800948a:	2201      	movs	r2, #1
 800948c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f001 f951 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0d1      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2221      	movs	r2, #33	; 0x21
 80094a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2240      	movs	r2, #64	; 0x40
 80094ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a3a      	ldr	r2, [r7, #32]
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80094c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094c8:	88f8      	ldrh	r0, [r7, #6]
 80094ca:	893a      	ldrh	r2, [r7, #8]
 80094cc:	8979      	ldrh	r1, [r7, #10]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	4603      	mov	r3, r0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fd0f 	bl	8009efc <I2C_RequestMemoryWrite>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0a9      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	2bff      	cmp	r3, #255	; 0xff
 80094f8:	d90e      	bls.n	8009518 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	b2da      	uxtb	r2, r3
 8009506:	8979      	ldrh	r1, [r7, #10]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 fa9f 	bl	800aa54 <I2C_TransferConfig>
 8009516:	e00f      	b.n	8009538 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009526:	b2da      	uxtb	r2, r3
 8009528:	8979      	ldrh	r1, [r7, #10]
 800952a:	2300      	movs	r3, #0
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f001 fa8e 	bl	800aa54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f001 f93b 	bl	800a7b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e07b      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	781a      	ldrb	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009566:	b29b      	uxth	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d034      	beq.n	80095f0 <HAL_I2C_Mem_Write+0x1c8>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d130      	bne.n	80095f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	2200      	movs	r2, #0
 8009596:	2180      	movs	r1, #128	; 0x80
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f001 f8cd 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e04d      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2bff      	cmp	r3, #255	; 0xff
 80095b0:	d90e      	bls.n	80095d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	22ff      	movs	r2, #255	; 0xff
 80095b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	8979      	ldrh	r1, [r7, #10]
 80095c0:	2300      	movs	r3, #0
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f001 fa43 	bl	800aa54 <I2C_TransferConfig>
 80095ce:	e00f      	b.n	80095f0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	8979      	ldrh	r1, [r7, #10]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f001 fa32 	bl	800aa54 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d19e      	bne.n	8009538 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f001 f91a 	bl	800a838 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e01a      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2220      	movs	r2, #32
 8009614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <HAL_I2C_Mem_Write+0x224>)
 8009622:	400b      	ands	r3, r1
 8009624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	e000      	b.n	8009644 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009642:	2302      	movs	r3, #2
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	fe00e800 	.word	0xfe00e800

08009650 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
  }
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
 80096b8:	4613      	mov	r3, r2
 80096ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af02      	add	r7, sp, #8
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <I2C_Master_ISR_IT+0x1e>
 8009746:	2302      	movs	r3, #2
 8009748:	e115      	b.n	8009976 <I2C_Master_ISR_IT+0x24a>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	091b      	lsrs	r3, r3, #4
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d013      	beq.n	8009786 <I2C_Master_ISR_IT+0x5a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	091b      	lsrs	r3, r3, #4
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00d      	beq.n	8009786 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2210      	movs	r2, #16
 8009770:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009776:	f043 0204 	orr.w	r2, r3, #4
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 ff92 	bl	800a6a8 <I2C_Flush_TXDR>
 8009784:	e0e2      	b.n	800994c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	089b      	lsrs	r3, r3, #2
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d023      	beq.n	80097da <I2C_Master_ISR_IT+0xae>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	089b      	lsrs	r3, r3, #2
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01d      	beq.n	80097da <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f023 0304 	bic.w	r3, r3, #4
 80097a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097d8:	e0b8      	b.n	800994c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	085b      	lsrs	r3, r3, #1
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01e      	beq.n	8009824 <I2C_Master_ISR_IT+0xf8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	085b      	lsrs	r3, r3, #1
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980c:	3b01      	subs	r3, #1
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009822:	e093      	b.n	800994c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	09db      	lsrs	r3, r3, #7
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d05e      	beq.n	80098ee <I2C_Master_ISR_IT+0x1c2>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	099b      	lsrs	r3, r3, #6
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d058      	beq.n	80098ee <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d041      	beq.n	80098ca <I2C_Master_ISR_IT+0x19e>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d13d      	bne.n	80098ca <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800985a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	2bff      	cmp	r3, #255	; 0xff
 8009864:	d90e      	bls.n	8009884 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	22ff      	movs	r2, #255	; 0xff
 800986a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009870:	b2da      	uxtb	r2, r3
 8009872:	8a79      	ldrh	r1, [r7, #18]
 8009874:	2300      	movs	r3, #0
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f001 f8e9 	bl	800aa54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009882:	e033      	b.n	80098ec <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009888:	b29a      	uxth	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009896:	d00c      	beq.n	80098b2 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80098a2:	8a79      	ldrh	r1, [r7, #18]
 80098a4:	2300      	movs	r3, #0
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4603      	mov	r3, r0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f001 f8d2 	bl	800aa54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098b0:	e01c      	b.n	80098ec <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	8a79      	ldrh	r1, [r7, #18]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f001 f8c6 	bl	800aa54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098c8:	e010      	b.n	80098ec <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098d8:	d003      	beq.n	80098e2 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fbe4 	bl	800a0a8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80098e0:	e034      	b.n	800994c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80098e2:	2140      	movs	r1, #64	; 0x40
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fe1f 	bl	800a528 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80098ea:	e02f      	b.n	800994c <I2C_Master_ISR_IT+0x220>
 80098ec:	e02e      	b.n	800994c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d028      	beq.n	800994c <I2C_Master_ISR_IT+0x220>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	099b      	lsrs	r3, r3, #6
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b00      	cmp	r3, #0
 8009904:	d022      	beq.n	800994c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990a:	b29b      	uxth	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d119      	bne.n	8009944 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800991e:	d015      	beq.n	800994c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009928:	d108      	bne.n	800993c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	e007      	b.n	800994c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fbb3 	bl	800a0a8 <I2C_ITMasterSeqCplt>
 8009942:	e003      	b.n	800994c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009944:	2140      	movs	r1, #64	; 0x40
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fdee 	bl	800a528 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	095b      	lsrs	r3, r3, #5
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d009      	beq.n	800996c <I2C_Master_ISR_IT+0x240>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009964:	6979      	ldr	r1, [r7, #20]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fc18 	bl	800a19c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <I2C_Slave_ISR_IT+0x24>
 800999e:	2302      	movs	r3, #2
 80099a0:	e0ec      	b.n	8009b7c <I2C_Slave_ISR_IT+0x1fe>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <I2C_Slave_ISR_IT+0x4c>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	095b      	lsrs	r3, r3, #5
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80099c2:	6939      	ldr	r1, [r7, #16]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 fc85 	bl	800a2d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	091b      	lsrs	r3, r3, #4
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d04d      	beq.n	8009a72 <I2C_Slave_ISR_IT+0xf4>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	091b      	lsrs	r3, r3, #4
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d047      	beq.n	8009a72 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d128      	bne.n	8009a3e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b28      	cmp	r3, #40	; 0x28
 80099f6:	d108      	bne.n	8009a0a <I2C_Slave_ISR_IT+0x8c>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099fe:	d104      	bne.n	8009a0a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009a00:	6939      	ldr	r1, [r7, #16]
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fd3c 	bl	800a480 <I2C_ITListenCplt>
 8009a08:	e032      	b.n	8009a70 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b29      	cmp	r3, #41	; 0x29
 8009a14:	d10e      	bne.n	8009a34 <I2C_Slave_ISR_IT+0xb6>
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a1c:	d00a      	beq.n	8009a34 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2210      	movs	r2, #16
 8009a24:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 fe3e 	bl	800a6a8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fb78 	bl	800a122 <I2C_ITSlaveSeqCplt>
 8009a32:	e01d      	b.n	8009a70 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2210      	movs	r2, #16
 8009a3a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009a3c:	e096      	b.n	8009b6c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2210      	movs	r2, #16
 8009a44:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	f043 0204 	orr.w	r2, r3, #4
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d004      	beq.n	8009a62 <I2C_Slave_ISR_IT+0xe4>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a5e:	f040 8085 	bne.w	8009b6c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a66:	4619      	mov	r1, r3
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 fd5d 	bl	800a528 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009a6e:	e07d      	b.n	8009b6c <I2C_Slave_ISR_IT+0x1ee>
 8009a70:	e07c      	b.n	8009b6c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	089b      	lsrs	r3, r3, #2
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d030      	beq.n	8009ae0 <I2C_Slave_ISR_IT+0x162>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	089b      	lsrs	r3, r3, #2
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d02a      	beq.n	8009ae0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d018      	beq.n	8009ac6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d14f      	bne.n	8009b70 <I2C_Slave_ISR_IT+0x1f2>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ad6:	d04b      	beq.n	8009b70 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fb22 	bl	800a122 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009ade:	e047      	b.n	8009b70 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	08db      	lsrs	r3, r3, #3
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <I2C_Slave_ISR_IT+0x184>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	08db      	lsrs	r3, r3, #3
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009af8:	6939      	ldr	r1, [r7, #16]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fa52 	bl	8009fa4 <I2C_ITAddrCplt>
 8009b00:	e037      	b.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d031      	beq.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d02b      	beq.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d018      	beq.n	8009b56 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	851a      	strh	r2, [r3, #40]	; 0x28
 8009b54:	e00d      	b.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b5c:	d002      	beq.n	8009b64 <I2C_Slave_ISR_IT+0x1e6>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fadc 	bl	800a122 <I2C_ITSlaveSeqCplt>
 8009b6a:	e002      	b.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009b6c:	bf00      	nop
 8009b6e:	e000      	b.n	8009b72 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009b70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <I2C_Master_ISR_DMA+0x1a>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e0e1      	b.n	8009d62 <I2C_Master_ISR_DMA+0x1de>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	091b      	lsrs	r3, r3, #4
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d017      	beq.n	8009be2 <I2C_Master_ISR_DMA+0x5e>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	091b      	lsrs	r3, r3, #4
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2210      	movs	r2, #16
 8009bc4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bca:	f043 0204 	orr.w	r2, r3, #4
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009bd2:	2112      	movs	r1, #18
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 ff6b 	bl	800aab0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 fd64 	bl	800a6a8 <I2C_Flush_TXDR>
 8009be0:	e0ba      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	09db      	lsrs	r3, r3, #7
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d072      	beq.n	8009cd4 <I2C_Master_ISR_DMA+0x150>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	099b      	lsrs	r3, r3, #6
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d06c      	beq.n	8009cd4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c08:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d04e      	beq.n	8009cb2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c20:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2bff      	cmp	r3, #255	; 0xff
 8009c2a:	d906      	bls.n	8009c3a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	22ff      	movs	r2, #255	; 0xff
 8009c30:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	e010      	b.n	8009c5c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c4c:	d003      	beq.n	8009c56 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	e002      	b.n	8009c5c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c5a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	8a79      	ldrh	r1, [r7, #18]
 8009c64:	2300      	movs	r3, #0
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 fef2 	bl	800aa54 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b22      	cmp	r3, #34	; 0x22
 8009c8c:	d108      	bne.n	8009ca0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009c9e:	e05b      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009cb0:	e052      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cc0:	d003      	beq.n	8009cca <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f9f0 	bl	800a0a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009cc8:	e046      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009cca:	2140      	movs	r1, #64	; 0x40
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 fc2b 	bl	800a528 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009cd2:	e041      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	099b      	lsrs	r3, r3, #6
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d029      	beq.n	8009d34 <I2C_Master_ISR_DMA+0x1b0>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	099b      	lsrs	r3, r3, #6
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d023      	beq.n	8009d34 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d119      	bne.n	8009d2a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d04:	d027      	beq.n	8009d56 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d0e:	d108      	bne.n	8009d22 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d1e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009d20:	e019      	b.n	8009d56 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f9c0 	bl	800a0a8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009d28:	e015      	b.n	8009d56 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009d2a:	2140      	movs	r1, #64	; 0x40
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fbfb 	bl	800a528 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009d32:	e010      	b.n	8009d56 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	095b      	lsrs	r3, r3, #5
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 fa24 	bl	800a19c <I2C_ITMasterCplt>
 8009d54:	e000      	b.n	8009d58 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009d56:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b086      	sub	sp, #24
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <I2C_Slave_ISR_DMA+0x24>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e0b1      	b.n	8009ef2 <I2C_Slave_ISR_DMA+0x188>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <I2C_Slave_ISR_DMA+0x4c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fa8f 	bl	800a2d4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	091b      	lsrs	r3, r3, #4
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8082 	beq.w	8009ec8 <I2C_Slave_ISR_DMA+0x15e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d07b      	beq.n	8009ec8 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	0b9b      	lsrs	r3, r3, #14
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d105      	bne.n	8009de8 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	0bdb      	lsrs	r3, r3, #15
 8009de0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d068      	beq.n	8009eba <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00d      	beq.n	8009e0c <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	0bdb      	lsrs	r3, r3, #15
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00d      	beq.n	8009e30 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	0b9b      	lsrs	r3, r3, #14
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d007      	beq.n	8009e30 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d128      	bne.n	8009e88 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b28      	cmp	r3, #40	; 0x28
 8009e40:	d108      	bne.n	8009e54 <I2C_Slave_ISR_DMA+0xea>
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e48:	d104      	bne.n	8009e54 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 fb17 	bl	800a480 <I2C_ITListenCplt>
 8009e52:	e031      	b.n	8009eb8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b29      	cmp	r3, #41	; 0x29
 8009e5e:	d10e      	bne.n	8009e7e <I2C_Slave_ISR_DMA+0x114>
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e66:	d00a      	beq.n	8009e7e <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2210      	movs	r2, #16
 8009e6e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fc19 	bl	800a6a8 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f953 	bl	800a122 <I2C_ITSlaveSeqCplt>
 8009e7c:	e01c      	b.n	8009eb8 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2210      	movs	r2, #16
 8009e84:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009e86:	e01d      	b.n	8009ec4 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2210      	movs	r2, #16
 8009e8e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e94:	f043 0204 	orr.w	r2, r3, #4
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <I2C_Slave_ISR_DMA+0x140>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ea8:	d10c      	bne.n	8009ec4 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fb39 	bl	800a528 <I2C_ITError>
      if (treatdmanack == 1U)
 8009eb6:	e005      	b.n	8009ec4 <I2C_Slave_ISR_DMA+0x15a>
 8009eb8:	e004      	b.n	8009ec4 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009ec2:	e011      	b.n	8009ee8 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009ec4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009ec6:	e00f      	b.n	8009ee8 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	08db      	lsrs	r3, r3, #3
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d009      	beq.n	8009ee8 <I2C_Slave_ISR_DMA+0x17e>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	08db      	lsrs	r3, r3, #3
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 f85e 	bl	8009fa4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	4608      	mov	r0, r1
 8009f06:	4611      	mov	r1, r2
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	817b      	strh	r3, [r7, #10]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	813b      	strh	r3, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	8979      	ldrh	r1, [r7, #10]
 8009f1c:	4b20      	ldr	r3, [pc, #128]	; (8009fa0 <I2C_RequestMemoryWrite+0xa4>)
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fd95 	bl	800aa54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fc42 	bl	800a7b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e02c      	b.n	8009f98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d105      	bne.n	8009f50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f44:	893b      	ldrh	r3, [r7, #8]
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8009f4e:	e015      	b.n	8009f7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009f50:	893b      	ldrh	r3, [r7, #8]
 8009f52:	0a1b      	lsrs	r3, r3, #8
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	69b9      	ldr	r1, [r7, #24]
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fc28 	bl	800a7b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e012      	b.n	8009f98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f72:	893b      	ldrh	r3, [r7, #8]
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2200      	movs	r2, #0
 8009f84:	2180      	movs	r1, #128	; 0x80
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fbd6 	bl	800a738 <I2C_WaitOnFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	80002000 	.word	0x80002000

08009fa4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009fba:	2b28      	cmp	r3, #40	; 0x28
 8009fbc:	d168      	bne.n	800a090 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	0c1b      	lsrs	r3, r3, #16
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	0c1b      	lsrs	r3, r3, #16
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009fdc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009ff8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d137      	bne.n	800a072 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a002:	897b      	ldrh	r3, [r7, #10]
 800a004:	09db      	lsrs	r3, r3, #7
 800a006:	b29a      	uxth	r2, r3
 800a008:	89bb      	ldrh	r3, [r7, #12]
 800a00a:	4053      	eors	r3, r2
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f003 0306 	and.w	r3, r3, #6
 800a012:	2b00      	cmp	r3, #0
 800a014:	d11c      	bne.n	800a050 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d139      	bne.n	800a0a0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2208      	movs	r2, #8
 800a038:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a042:	89ba      	ldrh	r2, [r7, #12]
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fb2f 	bl	80096ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a04e:	e027      	b.n	800a0a0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800a050:	893b      	ldrh	r3, [r7, #8]
 800a052:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a054:	2104      	movs	r1, #4
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fd98 	bl	800ab8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a064:	89ba      	ldrh	r2, [r7, #12]
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fb1e 	bl	80096ac <HAL_I2C_AddrCallback>
}
 800a070:	e016      	b.n	800a0a0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a072:	2104      	movs	r1, #4
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fd89 	bl	800ab8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a082:	89ba      	ldrh	r2, [r7, #12]
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fb0f 	bl	80096ac <HAL_I2C_AddrCallback>
}
 800a08e:	e007      	b.n	800a0a0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2208      	movs	r2, #8
 800a096:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b21      	cmp	r3, #33	; 0x21
 800a0c2:	d115      	bne.n	800a0f0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2211      	movs	r2, #17
 800a0d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a0d8:	2101      	movs	r1, #1
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fd56 	bl	800ab8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f9 ff5b 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a0ee:	e014      	b.n	800a11a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2212      	movs	r2, #18
 800a0fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a104:	2102      	movs	r1, #2
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fd40 	bl	800ab8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7f9 ff5b 	bl	8003fd0 <HAL_I2C_MasterRxCpltCallback>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b29      	cmp	r3, #41	; 0x29
 800a13c:	d112      	bne.n	800a164 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2228      	movs	r2, #40	; 0x28
 800a142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2221      	movs	r2, #33	; 0x21
 800a14a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fd1c 	bl	800ab8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fa91 	bl	8009684 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a162:	e017      	b.n	800a194 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b2a      	cmp	r3, #42	; 0x2a
 800a16e:	d111      	bne.n	800a194 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2228      	movs	r2, #40	; 0x28
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2222      	movs	r2, #34	; 0x22
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a17e:	2102      	movs	r1, #2
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fd03 	bl	800ab8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fa82 	bl	8009698 <HAL_I2C_SlaveRxCpltCallback>
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6859      	ldr	r1, [r3, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b44      	ldr	r3, [pc, #272]	; (800a2cc <I2C_ITMasterCplt+0x130>)
 800a1ba:	400b      	ands	r3, r1
 800a1bc:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a40      	ldr	r2, [pc, #256]	; (800a2d0 <I2C_ITMasterCplt+0x134>)
 800a1ce:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	091b      	lsrs	r3, r3, #4
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e8:	f043 0204 	orr.w	r2, r3, #4
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fa59 	bl	800a6a8 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a1f6:	2103      	movs	r1, #3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fcc7 	bl	800ab8c <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a202:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b60      	cmp	r3, #96	; 0x60
 800a20e:	d002      	beq.n	800a216 <I2C_ITMasterCplt+0x7a>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d006      	beq.n	800a224 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f983 	bl	800a528 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a222:	e04e      	b.n	800a2c2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b21      	cmp	r3, #33	; 0x21
 800a22e:	d121      	bne.n	800a274 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d10b      	bne.n	800a25c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff fa41 	bl	80096dc <HAL_I2C_MemTxCpltCallback>
}
 800a25a:	e032      	b.n	800a2c2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7f9 fe99 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
}
 800a272:	e026      	b.n	800a2c2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b22      	cmp	r3, #34	; 0x22
 800a27e:	d120      	bne.n	800a2c2 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2220      	movs	r2, #32
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b40      	cmp	r3, #64	; 0x40
 800a292:	d10b      	bne.n	800a2ac <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fa23 	bl	80096f0 <HAL_I2C_MemRxCpltCallback>
}
 800a2aa:	e00a      	b.n	800a2c2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7f9 fe87 	bl	8003fd0 <HAL_I2C_MasterRxCpltCallback>
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	fe00e800 	.word	0xfe00e800
 800a2d0:	ffff0000 	.word	0xffff0000

0800a2d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a2f2:	2107      	movs	r1, #7
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fc49 	bl	800ab8c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a308:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6859      	ldr	r1, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b58      	ldr	r3, [pc, #352]	; (800a478 <I2C_ITSlaveCplt+0x1a4>)
 800a316:	400b      	ands	r3, r1
 800a318:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f9c4 	bl	800a6a8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	0b9b      	lsrs	r3, r3, #14
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d018      	beq.n	800a366 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a342:	e010      	b.n	800a366 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	0bdb      	lsrs	r3, r3, #15
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	b29a      	uxth	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	089b      	lsrs	r3, r3, #2
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d020      	beq.n	800a3b4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f023 0304 	bic.w	r3, r3, #4
 800a378:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00c      	beq.n	800a3b4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c2:	f043 0204 	orr.w	r2, r3, #4
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d010      	beq.n	800a408 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f89b 	bl	800a528 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b28      	cmp	r3, #40	; 0x28
 800a3fc:	d138      	bne.n	800a470 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f83d 	bl	800a480 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a406:	e033      	b.n	800a470 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a410:	d011      	beq.n	800a436 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff fe85 	bl	800a122 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a18      	ldr	r2, [pc, #96]	; (800a47c <I2C_ITSlaveCplt+0x1a8>)
 800a41c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2220      	movs	r2, #32
 800a422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff f94a 	bl	80096c8 <HAL_I2C_ListenCpltCallback>
}
 800a434:	e01c      	b.n	800a470 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b22      	cmp	r3, #34	; 0x22
 800a440:	d10b      	bne.n	800a45a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2220      	movs	r2, #32
 800a446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f920 	bl	8009698 <HAL_I2C_SlaveRxCpltCallback>
}
 800a458:	e00a      	b.n	800a470 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff f90a 	bl	8009684 <HAL_I2C_SlaveTxCpltCallback>
}
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	fe00e800 	.word	0xfe00e800
 800a47c:	ffff0000 	.word	0xffff0000

0800a480 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a25      	ldr	r2, [pc, #148]	; (800a524 <I2C_ITListenCplt+0xa4>)
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2220      	movs	r2, #32
 800a49a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	089b      	lsrs	r3, r3, #2
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d022      	beq.n	800a4fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d012      	beq.n	800a4fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f6:	f043 0204 	orr.w	r2, r3, #4
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a4fe:	2107      	movs	r1, #7
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fb43 	bl	800ab8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2210      	movs	r2, #16
 800a50c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff f8d6 	bl	80096c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	ffff0000 	.word	0xffff0000

0800a528 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a538:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a55      	ldr	r2, [pc, #340]	; (800a69c <I2C_ITError+0x174>)
 800a546:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	2b28      	cmp	r3, #40	; 0x28
 800a55e:	d005      	beq.n	800a56c <I2C_ITError+0x44>
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	2b29      	cmp	r3, #41	; 0x29
 800a564:	d002      	beq.n	800a56c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b2a      	cmp	r3, #42	; 0x2a
 800a56a:	d10e      	bne.n	800a58a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a56c:	2103      	movs	r1, #3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fb0c 	bl	800ab8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2228      	movs	r2, #40	; 0x28
 800a578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a46      	ldr	r2, [pc, #280]	; (800a6a0 <I2C_ITError+0x178>)
 800a586:	635a      	str	r2, [r3, #52]	; 0x34
 800a588:	e013      	b.n	800a5b2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a58a:	2107      	movs	r1, #7
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fafd 	bl	800ab8c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b60      	cmp	r3, #96	; 0x60
 800a59c:	d003      	beq.n	800a5a6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2220      	movs	r2, #32
 800a5a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5c0:	d123      	bne.n	800a60a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a5d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d05c      	beq.n	800a694 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	4a31      	ldr	r2, [pc, #196]	; (800a6a4 <I2C_ITError+0x17c>)
 800a5e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe f8b0 	bl	8008754 <HAL_DMA_Abort_IT>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04c      	beq.n	800a694 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a604:	4610      	mov	r0, r2
 800a606:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a608:	e044      	b.n	800a694 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a618:	d123      	bne.n	800a662 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a628:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d030      	beq.n	800a694 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a636:	4a1b      	ldr	r2, [pc, #108]	; (800a6a4 <I2C_ITError+0x17c>)
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe f884 	bl	8008754 <HAL_DMA_Abort_IT>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d020      	beq.n	800a694 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
}
 800a660:	e018      	b.n	800a694 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b60      	cmp	r3, #96	; 0x60
 800a66c:	d10b      	bne.n	800a686 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff f84a 	bl	8009718 <HAL_I2C_AbortCpltCallback>
}
 800a684:	e006      	b.n	800a694 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff f838 	bl	8009704 <HAL_I2C_ErrorCallback>
}
 800a694:	bf00      	nop
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	ffff0000 	.word	0xffff0000
 800a6a0:	0800997f 	.word	0x0800997f
 800a6a4:	0800a6f1 	.word	0x0800a6f1

0800a6a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d103      	bne.n	800a6c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d007      	beq.n	800a6e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	699a      	ldr	r2, [r3, #24]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f042 0201 	orr.w	r2, r2, #1
 800a6e2:	619a      	str	r2, [r3, #24]
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	2200      	movs	r2, #0
 800a704:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	2200      	movs	r2, #0
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b60      	cmp	r3, #96	; 0x60
 800a718:	d107      	bne.n	800a72a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7fe fff8 	bl	8009718 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a728:	e002      	b.n	800a730 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7fe ffea 	bl	8009704 <HAL_I2C_ErrorCallback>
}
 800a730:	bf00      	nop
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	4613      	mov	r3, r2
 800a746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a748:	e022      	b.n	800a790 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a750:	d01e      	beq.n	800a790 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a752:	f7fc f8f3 	bl	800693c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d302      	bcc.n	800a768 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d113      	bne.n	800a790 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76c:	f043 0220 	orr.w	r2, r3, #32
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e00f      	b.n	800a7b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	4013      	ands	r3, r2
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	bf0c      	ite	eq
 800a7a0:	2301      	moveq	r3, #1
 800a7a2:	2300      	movne	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d0cd      	beq.n	800a74a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7c4:	e02c      	b.n	800a820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f8dc 	bl	800a988 <I2C_IsAcknowledgeFailed>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e02a      	b.n	800a830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e0:	d01e      	beq.n	800a820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7e2:	f7fc f8ab 	bl	800693c <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d302      	bcc.n	800a7f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d113      	bne.n	800a820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fc:	f043 0220 	orr.w	r2, r3, #32
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2220      	movs	r2, #32
 800a808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e007      	b.n	800a830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d1cb      	bne.n	800a7c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a844:	e028      	b.n	800a898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	68b9      	ldr	r1, [r7, #8]
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 f89c 	bl	800a988 <I2C_IsAcknowledgeFailed>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e026      	b.n	800a8a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85a:	f7fc f86f 	bl	800693c <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	d302      	bcc.n	800a870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d113      	bne.n	800a898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a874:	f043 0220 	orr.w	r2, r3, #32
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e007      	b.n	800a8a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d1cf      	bne.n	800a846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8bc:	e055      	b.n	800a96a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f860 	bl	800a988 <I2C_IsAcknowledgeFailed>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e053      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d129      	bne.n	800a934 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d105      	bne.n	800a8fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e03f      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2220      	movs	r2, #32
 800a900:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6859      	ldr	r1, [r3, #4]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	4b1d      	ldr	r3, [pc, #116]	; (800a984 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a90e:	400b      	ands	r3, r1
 800a910:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e022      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a934:	f7fc f802 	bl	800693c <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	d302      	bcc.n	800a94a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10f      	bne.n	800a96a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94e:	f043 0220 	orr.w	r2, r3, #32
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2220      	movs	r2, #32
 800a95a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e007      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b04      	cmp	r3, #4
 800a976:	d1a2      	bne.n	800a8be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	fe00e800 	.word	0xfe00e800

0800a988 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	f003 0310 	and.w	r3, r3, #16
 800a99e:	2b10      	cmp	r3, #16
 800a9a0:	d151      	bne.n	800aa46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9a2:	e022      	b.n	800a9ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9aa:	d01e      	beq.n	800a9ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ac:	f7fb ffc6 	bl	800693c <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d302      	bcc.n	800a9c2 <I2C_IsAcknowledgeFailed+0x3a>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d113      	bne.n	800a9ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	f043 0220 	orr.w	r2, r3, #32
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e02e      	b.n	800aa48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d1d5      	bne.n	800a9a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2210      	movs	r2, #16
 800a9fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2220      	movs	r2, #32
 800aa06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7ff fe4d 	bl	800a6a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6859      	ldr	r1, [r3, #4]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa1a:	400b      	ands	r3, r1
 800aa1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa22:	f043 0204 	orr.w	r2, r3, #4
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e000      	b.n	800aa48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	fe00e800 	.word	0xfe00e800

0800aa54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	607b      	str	r3, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	817b      	strh	r3, [r7, #10]
 800aa62:	4613      	mov	r3, r2
 800aa64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	0d5b      	lsrs	r3, r3, #21
 800aa70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aa74:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <I2C_TransferConfig+0x58>)
 800aa76:	430b      	orrs	r3, r1
 800aa78:	43db      	mvns	r3, r3
 800aa7a:	ea02 0103 	and.w	r1, r2, r3
 800aa7e:	897b      	ldrh	r3, [r7, #10]
 800aa80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa84:	7a7b      	ldrb	r3, [r7, #9]
 800aa86:	041b      	lsls	r3, r3, #16
 800aa88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa8c:	431a      	orrs	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	431a      	orrs	r2, r3
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	03ff63ff 	.word	0x03ff63ff

0800aab0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac4:	4a2f      	ldr	r2, [pc, #188]	; (800ab84 <I2C_Enable_IRQ+0xd4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d004      	beq.n	800aad4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800aace:	4a2e      	ldr	r2, [pc, #184]	; (800ab88 <I2C_Enable_IRQ+0xd8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d124      	bne.n	800ab1e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aad4:	887b      	ldrh	r3, [r7, #2]
 800aad6:	f003 0304 	and.w	r3, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aae4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800aae6:	887b      	ldrh	r3, [r7, #2]
 800aae8:	f003 0311 	and.w	r3, r3, #17
 800aaec:	2b11      	cmp	r3, #17
 800aaee:	d103      	bne.n	800aaf8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aaf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800aaf8:	887b      	ldrh	r3, [r7, #2]
 800aafa:	f003 0312 	and.w	r3, r3, #18
 800aafe:	2b12      	cmp	r3, #18
 800ab00:	d103      	bne.n	800ab0a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f043 0320 	orr.w	r3, r3, #32
 800ab08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800ab0a:	887b      	ldrh	r3, [r7, #2]
 800ab0c:	f003 0312 	and.w	r3, r3, #18
 800ab10:	2b12      	cmp	r3, #18
 800ab12:	d128      	bne.n	800ab66 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800ab1c:	e023      	b.n	800ab66 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ab1e:	887b      	ldrh	r3, [r7, #2]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ab2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ab30:	887b      	ldrh	r3, [r7, #2]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ab40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ab42:	887b      	ldrh	r3, [r7, #2]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ab52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800ab54:	887b      	ldrh	r3, [r7, #2]
 800ab56:	f003 0312 	and.w	r3, r3, #18
 800ab5a:	2b12      	cmp	r3, #18
 800ab5c:	d103      	bne.n	800ab66 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f043 0320 	orr.w	r3, r3, #32
 800ab64:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6819      	ldr	r1, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	601a      	str	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	08009b85 	.word	0x08009b85
 800ab88:	08009d6b 	.word	0x08009d6b

0800ab8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ab9c:	887b      	ldrh	r3, [r7, #2]
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00f      	beq.n	800abc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800abac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800abba:	2b28      	cmp	r3, #40	; 0x28
 800abbc:	d003      	beq.n	800abc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800abc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800abc6:	887b      	ldrh	r3, [r7, #2]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00f      	beq.n	800abf0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800abd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800abe4:	2b28      	cmp	r3, #40	; 0x28
 800abe6:	d003      	beq.n	800abf0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800abee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800abf0:	887b      	ldrh	r3, [r7, #2]
 800abf2:	f003 0304 	and.w	r3, r3, #4
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ac00:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800ac02:	887b      	ldrh	r3, [r7, #2]
 800ac04:	f003 0311 	and.w	r3, r3, #17
 800ac08:	2b11      	cmp	r3, #17
 800ac0a:	d103      	bne.n	800ac14 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ac12:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800ac14:	887b      	ldrh	r3, [r7, #2]
 800ac16:	f003 0312 	and.w	r3, r3, #18
 800ac1a:	2b12      	cmp	r3, #18
 800ac1c:	d103      	bne.n	800ac26 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f043 0320 	orr.w	r3, r3, #32
 800ac24:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800ac26:	887b      	ldrh	r3, [r7, #2]
 800ac28:	f003 0312 	and.w	r3, r3, #18
 800ac2c:	2b12      	cmp	r3, #18
 800ac2e:	d103      	bne.n	800ac38 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac36:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6819      	ldr	r1, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	43da      	mvns	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	400a      	ands	r2, r1
 800ac48:	601a      	str	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b20      	cmp	r3, #32
 800ac6a:	d138      	bne.n	800acde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac76:	2302      	movs	r3, #2
 800ac78:	e032      	b.n	800ace0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2224      	movs	r2, #36	; 0x24
 800ac86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0201 	bic.w	r2, r2, #1
 800ac98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aca8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f042 0201 	orr.w	r2, r2, #1
 800acc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e000      	b.n	800ace0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acde:	2302      	movs	r3, #2
  }
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d139      	bne.n	800ad76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d101      	bne.n	800ad10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e033      	b.n	800ad78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2224      	movs	r2, #36	; 0x24
 800ad1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f022 0201 	bic.w	r2, r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ad3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0201 	orr.w	r2, r2, #1
 800ad60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e000      	b.n	800ad78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad76:	2302      	movs	r3, #2
  }
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad86:	b08b      	sub	sp, #44	; 0x2c
 800ad88:	af06      	add	r7, sp, #24
 800ad8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e0ad      	b.n	800aef2 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d106      	bne.n	800adb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f00e fd0e 	bl	80197cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2203      	movs	r2, #3
 800adb4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f004 f945 	bl	800f04c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
 800adc6:	e035      	b.n	800ae34 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	015b      	lsls	r3, r3, #5
 800adce:	4413      	add	r3, r2
 800add0:	3329      	adds	r3, #41	; 0x29
 800add2:	2201      	movs	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800add6:	7bfb      	ldrb	r3, [r7, #15]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	015b      	lsls	r3, r3, #5
 800addc:	4413      	add	r3, r2
 800adde:	3328      	adds	r3, #40	; 0x28
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	7bfa      	ldrb	r2, [r7, #15]
 800ade8:	b291      	uxth	r1, r2
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	015b      	lsls	r3, r3, #5
 800adee:	4413      	add	r3, r2
 800adf0:	3336      	adds	r3, #54	; 0x36
 800adf2:	460a      	mov	r2, r1
 800adf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	015b      	lsls	r3, r3, #5
 800adfc:	4413      	add	r3, r2
 800adfe:	332b      	adds	r3, #43	; 0x2b
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	015b      	lsls	r3, r3, #5
 800ae0a:	4413      	add	r3, r2
 800ae0c:	3338      	adds	r3, #56	; 0x38
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	015b      	lsls	r3, r3, #5
 800ae18:	4413      	add	r3, r2
 800ae1a:	333c      	adds	r3, #60	; 0x3c
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	3302      	adds	r3, #2
 800ae26:	015b      	lsls	r3, r3, #5
 800ae28:	4413      	add	r3, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	3301      	adds	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
 800ae34:	7bfa      	ldrb	r2, [r7, #15]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d3c4      	bcc.n	800adc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
 800ae42:	e031      	b.n	800aea8 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	015b      	lsls	r3, r3, #5
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f203 1329 	addw	r3, r3, #297	; 0x129
 800ae50:	2200      	movs	r2, #0
 800ae52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	015b      	lsls	r3, r3, #5
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ae60:	7bfa      	ldrb	r2, [r7, #15]
 800ae62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	015b      	lsls	r3, r3, #5
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	015b      	lsls	r3, r3, #5
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	015b      	lsls	r3, r3, #5
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	330a      	adds	r3, #10
 800ae9a:	015b      	lsls	r3, r3, #5
 800ae9c:	4413      	add	r3, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	3301      	adds	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
 800aea8:	7bfa      	ldrb	r2, [r7, #15]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d3c8      	bcc.n	800ae44 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	687e      	ldr	r6, [r7, #4]
 800aeba:	466d      	mov	r5, sp
 800aebc:	f106 0410 	add.w	r4, r6, #16
 800aec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	1d33      	adds	r3, r6, #4
 800aeca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aecc:	6838      	ldr	r0, [r7, #0]
 800aece:	f004 f8da 	bl	800f086 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d102      	bne.n	800aef0 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fe3d 	bl	800bb6a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aefa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d101      	bne.n	800af10 <HAL_PCD_Start+0x16>
 800af0c:	2302      	movs	r3, #2
 800af0e:	e012      	b.n	800af36 <HAL_PCD_Start+0x3c>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f005 f8ed 	bl	80100fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f004 f878 	bl	800f01c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f005 f8ed 	bl	801012a <USB_ReadInterrupts>
 800af50:	4603      	mov	r3, r0
 800af52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af5a:	d102      	bne.n	800af62 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fb3f 	bl	800b5e0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4618      	mov	r0, r3
 800af68:	f005 f8df 	bl	801012a <USB_ReadInterrupts>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af76:	d112      	bne.n	800af9e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af80:	b29a      	uxth	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af8a:	b292      	uxth	r2, r2
 800af8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f00e fca2 	bl	80198da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af96:	2100      	movs	r1, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f929 	bl	800b1f0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f005 f8c1 	bl	801012a <USB_ReadInterrupts>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afb2:	d10b      	bne.n	800afcc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afc6:	b292      	uxth	r2, r2
 800afc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f005 f8aa 	bl	801012a <USB_ReadInterrupts>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afe0:	d10b      	bne.n	800affa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afea:	b29a      	uxth	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aff4:	b292      	uxth	r2, r2
 800aff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4618      	mov	r0, r3
 800b000:	f005 f893 	bl	801012a <USB_ReadInterrupts>
 800b004:	4603      	mov	r3, r0
 800b006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b00e:	d133      	bne.n	800b078 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0204 	bic.w	r2, r2, #4
 800b022:	b292      	uxth	r2, r2
 800b024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0208 	bic.w	r2, r2, #8
 800b03a:	b292      	uxth	r2, r2
 800b03c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b046:	2b01      	cmp	r3, #1
 800b048:	d107      	bne.n	800b05a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b052:	2100      	movs	r1, #0
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f00e fe33 	bl	8019cc0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f00e fc76 	bl	801994c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b072:	b292      	uxth	r2, r2
 800b074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f005 f854 	bl	801012a <USB_ReadInterrupts>
 800b082:	4603      	mov	r3, r0
 800b084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b08c:	d131      	bne.n	800b0f2 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f042 0208 	orr.w	r2, r2, #8
 800b0a0:	b292      	uxth	r2, r2
 800b0a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0204 	orr.w	r2, r2, #4
 800b0d0:	b292      	uxth	r2, r2
 800b0d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f005 f825 	bl	801012a <USB_ReadInterrupts>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ea:	d002      	beq.n	800b0f2 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f00e fc13 	bl	8019918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f005 f817 	bl	801012a <USB_ReadInterrupts>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d13f      	bne.n	800b186 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b118:	b292      	uxth	r2, r2
 800b11a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b124:	2b00      	cmp	r3, #0
 800b126:	d12b      	bne.n	800b180 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0204 	orr.w	r2, r2, #4
 800b13a:	b292      	uxth	r2, r2
 800b13c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0208 	orr.w	r2, r2, #8
 800b152:	b292      	uxth	r2, r2
 800b154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b168:	b29b      	uxth	r3, r3
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b176:	2101      	movs	r1, #1
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f00e fda1 	bl	8019cc0 <HAL_PCDEx_LPM_Callback>
 800b17e:	e002      	b.n	800b186 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f00e fbc9 	bl	8019918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f004 ffcd 	bl	801012a <USB_ReadInterrupts>
 800b190:	4603      	mov	r3, r0
 800b192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b19a:	d10e      	bne.n	800b1ba <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f00e fb82 	bl	80198be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f004 ffb3 	bl	801012a <USB_ReadInterrupts>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ce:	d10b      	bne.n	800b1e8 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1e2:	b292      	uxth	r2, r2
 800b1e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_PCD_SetAddress+0x1a>
 800b206:	2302      	movs	r3, #2
 800b208:	e013      	b.n	800b232 <HAL_PCD_SetAddress+0x42>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	78fa      	ldrb	r2, [r7, #3]
 800b216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	78fa      	ldrb	r2, [r7, #3]
 800b220:	4611      	mov	r1, r2
 800b222:	4618      	mov	r0, r3
 800b224:	f004 ff56 	bl	80100d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	461a      	mov	r2, r3
 800b248:	4603      	mov	r3, r0
 800b24a:	70fb      	strb	r3, [r7, #3]
 800b24c:	460b      	mov	r3, r1
 800b24e:	803b      	strh	r3, [r7, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da0b      	bge.n	800b278 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	015b      	lsls	r3, r3, #5
 800b268:	3328      	adds	r3, #40	; 0x28
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	705a      	strb	r2, [r3, #1]
 800b276:	e00b      	b.n	800b290 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	015b      	lsls	r3, r3, #5
 800b280:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	4413      	add	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b290:	78fb      	ldrb	r3, [r7, #3]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	b2da      	uxtb	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b29c:	883a      	ldrh	r2, [r7, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	78ba      	ldrb	r2, [r7, #2]
 800b2a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	785b      	ldrb	r3, [r3, #1]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d004      	beq.n	800b2ba <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b2ba:	78bb      	ldrb	r3, [r7, #2]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d102      	bne.n	800b2c6 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d101      	bne.n	800b2d4 <HAL_PCD_EP_Open+0x9a>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e00e      	b.n	800b2f2 <HAL_PCD_EP_Open+0xb8>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68f9      	ldr	r1, [r7, #12]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f003 fef4 	bl	800f0d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da0b      	bge.n	800b326 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	015b      	lsls	r3, r3, #5
 800b316:	3328      	adds	r3, #40	; 0x28
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	4413      	add	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	705a      	strb	r2, [r3, #1]
 800b324:	e00b      	b.n	800b33e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	f003 0307 	and.w	r3, r3, #7
 800b32c:	015b      	lsls	r3, r3, #5
 800b32e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	b2da      	uxtb	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b350:	2b01      	cmp	r3, #1
 800b352:	d101      	bne.n	800b358 <HAL_PCD_EP_Close+0x5e>
 800b354:	2302      	movs	r3, #2
 800b356:	e00e      	b.n	800b376 <HAL_PCD_EP_Close+0x7c>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68f9      	ldr	r1, [r7, #12]
 800b366:	4618      	mov	r0, r3
 800b368:	f004 f99c 	bl	800f6a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b086      	sub	sp, #24
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
 800b38a:	460b      	mov	r3, r1
 800b38c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	015b      	lsls	r3, r3, #5
 800b396:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	f003 0307 	and.w	r3, r3, #7
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d106      	bne.n	800b3dc <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6979      	ldr	r1, [r7, #20]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f004 fafb 	bl	800f9d0 <USB_EPStartXfer>
 800b3da:	e005      	b.n	800b3e8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6979      	ldr	r1, [r7, #20]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f004 faf4 	bl	800f9d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	f003 0307 	and.w	r3, r3, #7
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	330a      	adds	r3, #10
 800b408:	015b      	lsls	r3, r3, #5
 800b40a:	4413      	add	r3, r2
 800b40c:	3304      	adds	r3, #4
 800b40e:	681b      	ldr	r3, [r3, #0]
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	607a      	str	r2, [r7, #4]
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	460b      	mov	r3, r1
 800b42a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b42c:	7afb      	ldrb	r3, [r7, #11]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	015b      	lsls	r3, r3, #5
 800b434:	3328      	adds	r3, #40	; 0x28
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2200      	movs	r2, #0
 800b44c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2201      	movs	r2, #1
 800b452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b454:	7afb      	ldrb	r3, [r7, #11]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b460:	7afb      	ldrb	r3, [r7, #11]
 800b462:	f003 0307 	and.w	r3, r3, #7
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6979      	ldr	r1, [r7, #20]
 800b470:	4618      	mov	r0, r3
 800b472:	f004 faad 	bl	800f9d0 <USB_EPStartXfer>
 800b476:	e005      	b.n	800b484 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6979      	ldr	r1, [r7, #20]
 800b47e:	4618      	mov	r0, r3
 800b480:	f004 faa6 	bl	800f9d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	f003 0207 	and.w	r2, r3, #7
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d901      	bls.n	800b4ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e046      	b.n	800b53a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b4ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	da0b      	bge.n	800b4cc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	015b      	lsls	r3, r3, #5
 800b4bc:	3328      	adds	r3, #40	; 0x28
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	705a      	strb	r2, [r3, #1]
 800b4ca:	e009      	b.n	800b4e0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	015b      	lsls	r3, r3, #5
 800b4d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	f003 0307 	and.w	r3, r3, #7
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d101      	bne.n	800b500 <HAL_PCD_EP_SetStall+0x72>
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	e01c      	b.n	800b53a <HAL_PCD_EP_SetStall+0xac>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68f9      	ldr	r1, [r7, #12]
 800b50e:	4618      	mov	r0, r3
 800b510:	f004 fd0a 	bl	800ff28 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d108      	bne.n	800b530 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b528:	4619      	mov	r1, r3
 800b52a:	4610      	mov	r0, r2
 800b52c:	f004 fe0d 	bl	801014a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	f003 020f 	and.w	r2, r3, #15
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d901      	bls.n	800b560 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e03a      	b.n	800b5d6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b564:	2b00      	cmp	r3, #0
 800b566:	da0b      	bge.n	800b580 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b568:	78fb      	ldrb	r3, [r7, #3]
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	015b      	lsls	r3, r3, #5
 800b570:	3328      	adds	r3, #40	; 0x28
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	4413      	add	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	705a      	strb	r2, [r3, #1]
 800b57e:	e00b      	b.n	800b598 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	015b      	lsls	r3, r3, #5
 800b588:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	4413      	add	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <HAL_PCD_EP_ClrStall+0x76>
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e00e      	b.n	800b5d6 <HAL_PCD_EP_ClrStall+0x94>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68f9      	ldr	r1, [r7, #12]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f004 fcf0 	bl	800ffac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b5e0:	b590      	push	{r4, r7, lr}
 800b5e2:	b089      	sub	sp, #36	; 0x24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b5e8:	e26f      	b.n	800baca <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5f2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b5f4:	8afb      	ldrh	r3, [r7, #22]
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f003 030f 	and.w	r3, r3, #15
 800b5fc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800b5fe:	7d7b      	ldrb	r3, [r7, #21]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 8137 	bne.w	800b874 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b606:	8afb      	ldrh	r3, [r7, #22]
 800b608:	f003 0310 	and.w	r3, r3, #16
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d14f      	bne.n	800b6b0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b620:	b29c      	uxth	r4, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800b62a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b62e:	b29b      	uxth	r3, r3
 800b630:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3328      	adds	r3, #40	; 0x28
 800b636:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b640:	b29b      	uxth	r3, r3
 800b642:	461a      	mov	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	4413      	add	r3, r2
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	6812      	ldr	r2, [r2, #0]
 800b650:	4413      	add	r3, r2
 800b652:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	441a      	add	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b66e:	2100      	movs	r1, #0
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f00e f90d 	bl	8019890 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 8223 	beq.w	800baca <PCD_EP_ISR_Handler+0x4ea>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 821e 	bne.w	800baca <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b694:	b2db      	uxtb	r3, r3
 800b696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	b292      	uxth	r2, r2
 800b6a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b6ae:	e20c      	b.n	800baca <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b6b6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b6c0:	8a7b      	ldrh	r3, [r7, #18]
 800b6c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d031      	beq.n	800b72e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	4413      	add	r3, r2
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	6812      	ldr	r2, [r2, #0]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6818      	ldr	r0, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b704:	b29b      	uxth	r3, r3
 800b706:	f004 fd6d 	bl	80101e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	b29a      	uxth	r2, r3
 800b712:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b716:	4013      	ands	r3, r2
 800b718:	b29c      	uxth	r4, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b722:	b292      	uxth	r2, r2
 800b724:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f00e f888 	bl	801983c <HAL_PCD_SetupStageCallback>
 800b72c:	e1cd      	b.n	800baca <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b72e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b732:	2b00      	cmp	r3, #0
 800b734:	f280 81c9 	bge.w	800baca <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b744:	4013      	ands	r3, r2
 800b746:	b29c      	uxth	r4, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b750:	b292      	uxth	r2, r2
 800b752:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	461a      	mov	r2, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	4413      	add	r3, r2
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6812      	ldr	r2, [r2, #0]
 800b76c:	4413      	add	r3, r2
 800b76e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d019      	beq.n	800b7b8 <PCD_EP_ISR_Handler+0x1d8>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d015      	beq.n	800b7b8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6959      	ldr	r1, [r3, #20]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	f004 fd21 	bl	80101e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	695a      	ldr	r2, [r3, #20]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	441a      	add	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f00e f854 	bl	8019860 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461c      	mov	r4, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	441c      	add	r4, r3
 800b7ca:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800b7ce:	60bb      	str	r3, [r7, #8]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d110      	bne.n	800b7fa <PCD_EP_ISR_Handler+0x21a>
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	801a      	strh	r2, [r3, #0]
 800b7f8:	e026      	b.n	800b848 <PCD_EP_ISR_Handler+0x268>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	2b3d      	cmp	r3, #61	; 0x3d
 800b800:	d813      	bhi.n	800b82a <PCD_EP_ISR_Handler+0x24a>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	085b      	lsrs	r3, r3, #1
 800b808:	61bb      	str	r3, [r7, #24]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <PCD_EP_ISR_Handler+0x23c>
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	3301      	adds	r3, #1
 800b81a:	61bb      	str	r3, [r7, #24]
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	029b      	lsls	r3, r3, #10
 800b822:	b29a      	uxth	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	801a      	strh	r2, [r3, #0]
 800b828:	e00e      	b.n	800b848 <PCD_EP_ISR_Handler+0x268>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	095b      	lsrs	r3, r3, #5
 800b830:	61bb      	str	r3, [r7, #24]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	b29b      	uxth	r3, r3
 800b836:	029b      	lsls	r3, r3, #10
 800b838:	b29b      	uxth	r3, r3
 800b83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b842:	b29a      	uxth	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b858:	b29c      	uxth	r4, r3
 800b85a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b85e:	b29c      	uxth	r4, r3
 800b860:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b864:	b29c      	uxth	r4, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b9f      	ldr	r3, [pc, #636]	; (800bae8 <PCD_EP_ISR_Handler+0x508>)
 800b86c:	4323      	orrs	r3, r4
 800b86e:	b29b      	uxth	r3, r3
 800b870:	8013      	strh	r3, [r2, #0]
 800b872:	e12a      	b.n	800baca <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	7d7b      	ldrb	r3, [r7, #21]
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f280 80cb 	bge.w	800ba24 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	7d7b      	ldrb	r3, [r7, #21]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	b29c      	uxth	r4, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	7d7b      	ldrb	r3, [r7, #21]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800b8b6:	b292      	uxth	r2, r2
 800b8b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8ba:	7d7b      	ldrb	r3, [r7, #21]
 800b8bc:	015b      	lsls	r3, r3, #5
 800b8be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	7b1b      	ldrb	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d11f      	bne.n	800b910 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	461a      	mov	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	4413      	add	r3, r2
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	6812      	ldr	r2, [r2, #0]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8f4:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800b8f6:	8bfb      	ldrh	r3, [r7, #30]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d06e      	beq.n	800b9da <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6959      	ldr	r1, [r3, #20]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	88da      	ldrh	r2, [r3, #6]
 800b908:	8bfb      	ldrh	r3, [r7, #30]
 800b90a:	f004 fc6b 	bl	80101e4 <USB_ReadPMA>
 800b90e:	e064      	b.n	800b9da <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	461a      	mov	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	b29b      	uxth	r3, r3
 800b922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d01f      	beq.n	800b96a <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b932:	b29b      	uxth	r3, r3
 800b934:	461a      	mov	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	4413      	add	r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6812      	ldr	r2, [r2, #0]
 800b942:	4413      	add	r3, r2
 800b944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b94e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b950:	8bfb      	ldrh	r3, [r7, #30]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d028      	beq.n	800b9a8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6959      	ldr	r1, [r3, #20]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	891a      	ldrh	r2, [r3, #8]
 800b962:	8bfb      	ldrh	r3, [r7, #30]
 800b964:	f004 fc3e 	bl	80101e4 <USB_ReadPMA>
 800b968:	e01e      	b.n	800b9a8 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b972:	b29b      	uxth	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	4413      	add	r3, r2
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	4413      	add	r3, r2
 800b984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b98e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800b990:	8bfb      	ldrh	r3, [r7, #30]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d008      	beq.n	800b9a8 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6959      	ldr	r1, [r3, #20]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	895a      	ldrh	r2, [r3, #10]
 800b9a2:	8bfb      	ldrh	r3, [r7, #30]
 800b9a4:	f004 fc1e 	bl	80101e4 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c2:	b29c      	uxth	r4, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	441a      	add	r2, r3
 800b9d2:	4b46      	ldr	r3, [pc, #280]	; (800baec <PCD_EP_ISR_Handler+0x50c>)
 800b9d4:	4323      	orrs	r3, r4
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	69da      	ldr	r2, [r3, #28]
 800b9de:	8bfb      	ldrh	r3, [r7, #30]
 800b9e0:	441a      	add	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	695a      	ldr	r2, [r3, #20]
 800b9ea:	8bfb      	ldrh	r3, [r7, #30]
 800b9ec:	441a      	add	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	699b      	ldr	r3, [r3, #24]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <PCD_EP_ISR_Handler+0x424>
 800b9fa:	8bfa      	ldrh	r2, [r7, #30]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d206      	bcs.n	800ba12 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f00d ff28 	bl	8019860 <HAL_PCD_DataOutStageCallback>
 800ba10:	e008      	b.n	800ba24 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	7819      	ldrb	r1, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	695a      	ldr	r2, [r3, #20]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7ff fcad 	bl	800b37e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ba24:	8a7b      	ldrh	r3, [r7, #18]
 800ba26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d04d      	beq.n	800baca <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba2e:	7d7b      	ldrb	r3, [r7, #21]
 800ba30:	015b      	lsls	r3, r3, #5
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	4413      	add	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	7d7b      	ldrb	r3, [r7, #21]
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ba4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba52:	b29c      	uxth	r4, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	7d7b      	ldrb	r3, [r7, #21]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	441a      	add	r2, r3
 800ba60:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800ba64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	461a      	mov	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	4413      	add	r3, r2
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	695a      	ldr	r2, [r3, #20]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	441a      	add	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f00d feed 	bl	8019890 <HAL_PCD_DataInStageCallback>
 800bab6:	e008      	b.n	800baca <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	7819      	ldrb	r1, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	695a      	ldr	r2, [r3, #20]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff fca9 	bl	800b41c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	b21b      	sxth	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f6ff ad87 	blt.w	800b5ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3724      	adds	r7, #36	; 0x24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd90      	pop	{r4, r7, pc}
 800bae6:	bf00      	nop
 800bae8:	ffff8080 	.word	0xffff8080
 800baec:	ffff80c0 	.word	0xffff80c0

0800baf0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	817b      	strh	r3, [r7, #10]
 800bafe:	4613      	mov	r3, r2
 800bb00:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bb02:	897b      	ldrh	r3, [r7, #10]
 800bb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d008      	beq.n	800bb20 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb0e:	897b      	ldrh	r3, [r7, #10]
 800bb10:	f003 0307 	and.w	r3, r3, #7
 800bb14:	015b      	lsls	r3, r3, #5
 800bb16:	3328      	adds	r3, #40	; 0x28
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]
 800bb1e:	e006      	b.n	800bb2e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb20:	897b      	ldrh	r3, [r7, #10]
 800bb22:	015b      	lsls	r3, r3, #5
 800bb24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bb2e:	893b      	ldrh	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d107      	bne.n	800bb44 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2200      	movs	r2, #0
 800bb38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	80da      	strh	r2, [r3, #6]
 800bb42:	e00b      	b.n	800bb5c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2201      	movs	r2, #1
 800bb48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	0c1b      	lsrs	r3, r3, #16
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	371c      	adds	r7, #28
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f043 0301 	orr.w	r3, r3, #1
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
	...

0800bbc0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a04      	ldr	r2, [pc, #16]	; (800bbdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bbca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbce:	6013      	str	r3, [r2, #0]
}
 800bbd0:	bf00      	nop
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	58000400 	.word	0x58000400

0800bbe0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bbe4:	4b04      	ldr	r3, [pc, #16]	; (800bbf8 <HAL_PWREx_GetVoltageRange+0x18>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	58000400 	.word	0x58000400

0800bbfc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	4a04      	ldr	r2, [pc, #16]	; (800bc18 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bc06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc0a:	6053      	str	r3, [r2, #4]
}
 800bc0c:	bf00      	nop
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	58000400 	.word	0x58000400

0800bc1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bc20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc2e:	d101      	bne.n	800bc34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <LL_RCC_HSE_EnableBypass>:
{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bc44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc52:	6013      	str	r3, [r2, #0]
}
 800bc54:	bf00      	nop
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <LL_RCC_HSE_DisableBypass>:
{
 800bc5e:	b480      	push	{r7}
 800bc60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bc62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc70:	6013      	str	r3, [r2, #0]
}
 800bc72:	bf00      	nop
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <LL_RCC_HSE_Enable>:
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bc80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc8e:	6013      	str	r3, [r2, #0]
}
 800bc90:	bf00      	nop
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <LL_RCC_HSE_Disable>:
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bc9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcac:	6013      	str	r3, [r2, #0]
}
 800bcae:	bf00      	nop
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <LL_RCC_HSE_IsReady>:
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bcbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcca:	d101      	bne.n	800bcd0 <LL_RCC_HSE_IsReady+0x18>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e000      	b.n	800bcd2 <LL_RCC_HSE_IsReady+0x1a>
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <LL_RCC_HSI_Enable>:
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bcea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcee:	6013      	str	r3, [r2, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <LL_RCC_HSI_Disable>:
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bcfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd0c:	6013      	str	r3, [r2, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <LL_RCC_HSI_IsReady>:
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bd1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd2a:	d101      	bne.n	800bd30 <LL_RCC_HSI_IsReady+0x18>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <LL_RCC_HSI_IsReady+0x1a>
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <LL_RCC_HSI_SetCalibTrimming>:
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bd44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	061b      	lsls	r3, r3, #24
 800bd52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd56:	4313      	orrs	r3, r2
 800bd58:	604b      	str	r3, [r1, #4]
}
 800bd5a:	bf00      	nop
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <LL_RCC_HSI48_Enable>:
{
 800bd66:	b480      	push	{r7}
 800bd68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd76:	f043 0301 	orr.w	r3, r3, #1
 800bd7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800bd7e:	bf00      	nop
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <LL_RCC_HSI48_Disable>:
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bd8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd98:	f023 0301 	bic.w	r3, r3, #1
 800bd9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800bda0:	bf00      	nop
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <LL_RCC_HSI48_IsReady>:
{
 800bdaa:	b480      	push	{r7}
 800bdac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bdae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d101      	bne.n	800bdc2 <LL_RCC_HSI48_IsReady+0x18>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <LL_RCC_HSI48_IsReady+0x1a>
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <LL_RCC_LSE_Enable>:
{
 800bdce:	b480      	push	{r7}
 800bdd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bdd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdde:	f043 0301 	orr.w	r3, r3, #1
 800bde2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800bde6:	bf00      	nop
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <LL_RCC_LSE_Disable>:
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bdf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be00:	f023 0301 	bic.w	r3, r3, #1
 800be04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be08:	bf00      	nop
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <LL_RCC_LSE_EnableBypass>:
{
 800be12:	b480      	push	{r7}
 800be14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be22:	f043 0304 	orr.w	r3, r3, #4
 800be26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be2a:	bf00      	nop
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <LL_RCC_LSE_DisableBypass>:
{
 800be34:	b480      	push	{r7}
 800be36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800be38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be44:	f023 0304 	bic.w	r3, r3, #4
 800be48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800be4c:	bf00      	nop
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <LL_RCC_LSE_IsReady>:
{
 800be56:	b480      	push	{r7}
 800be58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800be5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be62:	f003 0302 	and.w	r3, r3, #2
 800be66:	2b02      	cmp	r3, #2
 800be68:	d101      	bne.n	800be6e <LL_RCC_LSE_IsReady+0x18>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e000      	b.n	800be70 <LL_RCC_LSE_IsReady+0x1a>
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <LL_RCC_LSI1_Enable>:
{
 800be7a:	b480      	push	{r7}
 800be7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800be7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800be92:	bf00      	nop
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <LL_RCC_LSI1_Disable>:
{
 800be9c:	b480      	push	{r7}
 800be9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800beb4:	bf00      	nop
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <LL_RCC_LSI1_IsReady>:
{
 800bebe:	b480      	push	{r7}
 800bec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beca:	f003 0302 	and.w	r3, r3, #2
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d101      	bne.n	800bed6 <LL_RCC_LSI1_IsReady+0x18>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e000      	b.n	800bed8 <LL_RCC_LSI1_IsReady+0x1a>
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr

0800bee2 <LL_RCC_LSI2_Enable>:
{
 800bee2:	b480      	push	{r7}
 800bee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800beea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800beee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bef2:	f043 0304 	orr.w	r3, r3, #4
 800bef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800befa:	bf00      	nop
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <LL_RCC_LSI2_Disable>:
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bf08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf14:	f023 0304 	bic.w	r3, r3, #4
 800bf18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800bf1c:	bf00      	nop
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <LL_RCC_LSI2_IsReady>:
{
 800bf26:	b480      	push	{r7}
 800bf28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bf2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf32:	f003 0308 	and.w	r3, r3, #8
 800bf36:	2b08      	cmp	r3, #8
 800bf38:	d101      	bne.n	800bf3e <LL_RCC_LSI2_IsReady+0x18>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <LL_RCC_LSI2_IsReady+0x1a>
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <LL_RCC_LSI2_SetTrimming>:
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bf52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	021b      	lsls	r3, r3, #8
 800bf62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <LL_RCC_MSI_Enable>:
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bf7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf86:	f043 0301 	orr.w	r3, r3, #1
 800bf8a:	6013      	str	r3, [r2, #0]
}
 800bf8c:	bf00      	nop
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <LL_RCC_MSI_Disable>:
{
 800bf96:	b480      	push	{r7}
 800bf98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bf9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfa4:	f023 0301 	bic.w	r3, r3, #1
 800bfa8:	6013      	str	r3, [r2, #0]
}
 800bfaa:	bf00      	nop
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <LL_RCC_MSI_IsReady>:
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bfb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d101      	bne.n	800bfca <LL_RCC_MSI_IsReady+0x16>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <LL_RCC_MSI_IsReady+0x18>
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <LL_RCC_MSI_SetRange>:
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b083      	sub	sp, #12
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bfde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	600b      	str	r3, [r1, #0]
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <LL_RCC_MSI_GetRange>:
{
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c00e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2bb0      	cmp	r3, #176	; 0xb0
 800c014:	d901      	bls.n	800c01a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c016:	23b0      	movs	r3, #176	; 0xb0
 800c018:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c01a:	687b      	ldr	r3, [r7, #4]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c042:	4313      	orrs	r3, r2
 800c044:	604b      	str	r3, [r1, #4]
}
 800c046:	bf00      	nop
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <LL_RCC_SetSysClkSource>:
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c05a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f023 0203 	bic.w	r2, r3, #3
 800c064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	608b      	str	r3, [r1, #8]
}
 800c06e:	bf00      	nop
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <LL_RCC_GetSysClkSource>:
{
 800c07a:	b480      	push	{r7}
 800c07c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c07e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f003 030c 	and.w	r3, r3, #12
}
 800c088:	4618      	mov	r0, r3
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <LL_RCC_SetAHBPrescaler>:
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	608b      	str	r3, [r1, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <LL_C2_RCC_SetAHBPrescaler>:
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c0c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c0ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <LL_RCC_SetAHB4Prescaler>:
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c0ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c0f6:	f023 020f 	bic.w	r2, r3, #15
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	091b      	lsrs	r3, r3, #4
 800c0fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c102:	4313      	orrs	r3, r2
 800c104:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <LL_RCC_SetAPB1Prescaler>:
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c11c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	608b      	str	r3, [r1, #8]
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <LL_RCC_SetAPB2Prescaler>:
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c14e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4313      	orrs	r3, r2
 800c156:	608b      	str	r3, [r1, #8]
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <LL_RCC_GetAHBPrescaler>:
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c172:	4618      	mov	r0, r3
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <LL_C2_RCC_GetAHBPrescaler>:
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800c180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c184:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <LL_RCC_GetAHB4Prescaler>:
{
 800c196:	b480      	push	{r7}
 800c198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c19a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c19e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <LL_RCC_GetAPB1Prescaler>:
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <LL_RCC_GetAPB2Prescaler>:
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c1e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1f4:	6013      	str	r3, [r2, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c200:	b480      	push	{r7}
 800c202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c20e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c212:	6013      	str	r3, [r2, #0]
}
 800c214:	bf00      	nop
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c21e:	b480      	push	{r7}
 800c220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c22c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c230:	d101      	bne.n	800c236 <LL_RCC_PLL_IsReady+0x18>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <LL_RCC_PLL_IsReady+0x1a>
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c242:	b480      	push	{r7}
 800c244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	0a1b      	lsrs	r3, r3, #8
 800c24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c252:	4618      	mov	r0, r3
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c282:	4618      	mov	r0, r3
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f003 0303 	and.w	r3, r3, #3
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c2a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b6:	d101      	bne.n	800c2bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e000      	b.n	800c2be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c2cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2dc:	d101      	bne.n	800c2e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e000      	b.n	800c2e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c2f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c2fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c302:	d101      	bne.n	800c308 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c304:	2301      	movs	r3, #1
 800c306:	e000      	b.n	800c30a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c314:	b480      	push	{r7}
 800c316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c326:	d101      	bne.n	800c32c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c328:	2301      	movs	r3, #1
 800c32a:	e000      	b.n	800c32e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c34a:	d101      	bne.n	800c350 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c35c:	b590      	push	{r4, r7, lr}
 800c35e:	b08b      	sub	sp, #44	; 0x2c
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e34b      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0320 	and.w	r3, r3, #32
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 808f 	beq.w	800c49a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c37c:	f7ff fe7d 	bl	800c07a <LL_RCC_GetSysClkSource>
 800c380:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c382:	f7ff ff83 	bl	800c28c <LL_RCC_PLL_GetMainSource>
 800c386:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <HAL_RCC_OscConfig+0x3e>
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	2b0c      	cmp	r3, #12
 800c392:	d149      	bne.n	800c428 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c394:	6a3b      	ldr	r3, [r7, #32]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d146      	bne.n	800c428 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c39a:	f7ff fe0b 	bl	800bfb4 <LL_RCC_MSI_IsReady>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <HAL_RCC_OscConfig+0x54>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	69db      	ldr	r3, [r3, #28]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e32a      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c3b4:	f7ff fe23 	bl	800bffe <LL_RCC_MSI_GetRange>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	429c      	cmp	r4, r3
 800c3bc:	d914      	bls.n	800c3e8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fd2a 	bl	800ce1c <RCC_SetFlashLatencyFromMSIRange>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e319      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fdfd 	bl	800bfd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff fe21 	bl	800c028 <LL_RCC_MSI_SetCalibTrimming>
 800c3e6:	e013      	b.n	800c410 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fdf2 	bl	800bfd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fe16 	bl	800c028 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	4618      	mov	r0, r3
 800c402:	f000 fd0b 	bl	800ce1c <RCC_SetFlashLatencyFromMSIRange>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e2fa      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800c410:	f7f9 fc1e 	bl	8005c50 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c414:	4bb4      	ldr	r3, [pc, #720]	; (800c6e8 <HAL_RCC_OscConfig+0x38c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4618      	mov	r0, r3
 800c41a:	f7f9 f909 	bl	8005630 <HAL_InitTick>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d039      	beq.n	800c498 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e2ee      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d01e      	beq.n	800c46e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c430:	f7ff fda2 	bl	800bf78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c434:	f7fa fa82 	bl	800693c <HAL_GetTick>
 800c438:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c43a:	e008      	b.n	800c44e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c43c:	f7fa fa7e 	bl	800693c <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	2b02      	cmp	r3, #2
 800c448:	d901      	bls.n	800c44e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e2db      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c44e:	f7ff fdb1 	bl	800bfb4 <LL_RCC_MSI_IsReady>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0f1      	beq.n	800c43c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff fdba 	bl	800bfd6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff fdde 	bl	800c028 <LL_RCC_MSI_SetCalibTrimming>
 800c46c:	e015      	b.n	800c49a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c46e:	f7ff fd92 	bl	800bf96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c472:	f7fa fa63 	bl	800693c <HAL_GetTick>
 800c476:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c478:	e008      	b.n	800c48c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c47a:	f7fa fa5f 	bl	800693c <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e2bc      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c48c:	f7ff fd92 	bl	800bfb4 <LL_RCC_MSI_IsReady>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1f1      	bne.n	800c47a <HAL_RCC_OscConfig+0x11e>
 800c496:	e000      	b.n	800c49a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d05a      	beq.n	800c55c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4a6:	f7ff fde8 	bl	800c07a <LL_RCC_GetSysClkSource>
 800c4aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4ac:	f7ff feee 	bl	800c28c <LL_RCC_PLL_GetMainSource>
 800c4b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	d005      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x168>
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	2b0c      	cmp	r3, #12
 800c4bc:	d10d      	bne.n	800c4da <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d10a      	bne.n	800c4da <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4c4:	f7ff fbf8 	bl	800bcb8 <LL_RCC_HSE_IsReady>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d045      	beq.n	800c55a <HAL_RCC_OscConfig+0x1fe>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d141      	bne.n	800c55a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e295      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e2:	d102      	bne.n	800c4ea <HAL_RCC_OscConfig+0x18e>
 800c4e4:	f7ff fbca 	bl	800bc7c <LL_RCC_HSE_Enable>
 800c4e8:	e00d      	b.n	800c506 <HAL_RCC_OscConfig+0x1aa>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4f2:	d104      	bne.n	800c4fe <HAL_RCC_OscConfig+0x1a2>
 800c4f4:	f7ff fba4 	bl	800bc40 <LL_RCC_HSE_EnableBypass>
 800c4f8:	f7ff fbc0 	bl	800bc7c <LL_RCC_HSE_Enable>
 800c4fc:	e003      	b.n	800c506 <HAL_RCC_OscConfig+0x1aa>
 800c4fe:	f7ff fbcc 	bl	800bc9a <LL_RCC_HSE_Disable>
 800c502:	f7ff fbac 	bl	800bc5e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d012      	beq.n	800c534 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c50e:	f7fa fa15 	bl	800693c <HAL_GetTick>
 800c512:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c514:	e008      	b.n	800c528 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c516:	f7fa fa11 	bl	800693c <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b64      	cmp	r3, #100	; 0x64
 800c522:	d901      	bls.n	800c528 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e26e      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c528:	f7ff fbc6 	bl	800bcb8 <LL_RCC_HSE_IsReady>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0f1      	beq.n	800c516 <HAL_RCC_OscConfig+0x1ba>
 800c532:	e013      	b.n	800c55c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c534:	f7fa fa02 	bl	800693c <HAL_GetTick>
 800c538:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c53a:	e008      	b.n	800c54e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c53c:	f7fa f9fe 	bl	800693c <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b64      	cmp	r3, #100	; 0x64
 800c548:	d901      	bls.n	800c54e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e25b      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c54e:	f7ff fbb3 	bl	800bcb8 <LL_RCC_HSE_IsReady>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1f1      	bne.n	800c53c <HAL_RCC_OscConfig+0x1e0>
 800c558:	e000      	b.n	800c55c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c55a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0302 	and.w	r3, r3, #2
 800c564:	2b00      	cmp	r3, #0
 800c566:	d051      	beq.n	800c60c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c568:	f7ff fd87 	bl	800c07a <LL_RCC_GetSysClkSource>
 800c56c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c56e:	f7ff fe8d 	bl	800c28c <LL_RCC_PLL_GetMainSource>
 800c572:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b04      	cmp	r3, #4
 800c578:	d005      	beq.n	800c586 <HAL_RCC_OscConfig+0x22a>
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2b0c      	cmp	r3, #12
 800c57e:	d113      	bne.n	800c5a8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b02      	cmp	r3, #2
 800c584:	d110      	bne.n	800c5a8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c586:	f7ff fbc7 	bl	800bd18 <LL_RCC_HSI_IsReady>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d005      	beq.n	800c59c <HAL_RCC_OscConfig+0x240>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e234      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff fbcb 	bl	800bd3c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c5a6:	e031      	b.n	800c60c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d019      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5b0:	f7ff fb94 	bl	800bcdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b4:	f7fa f9c2 	bl	800693c <HAL_GetTick>
 800c5b8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c5ba:	e008      	b.n	800c5ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5bc:	f7fa f9be 	bl	800693c <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e21b      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c5ce:	f7ff fba3 	bl	800bd18 <LL_RCC_HSI_IsReady>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0f1      	beq.n	800c5bc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff fbad 	bl	800bd3c <LL_RCC_HSI_SetCalibTrimming>
 800c5e2:	e013      	b.n	800c60c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5e4:	f7ff fb89 	bl	800bcfa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e8:	f7fa f9a8 	bl	800693c <HAL_GetTick>
 800c5ec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5f0:	f7fa f9a4 	bl	800693c <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e201      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c602:	f7ff fb89 	bl	800bd18 <LL_RCC_HSI_IsReady>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f1      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0308 	and.w	r3, r3, #8
 800c614:	2b00      	cmp	r3, #0
 800c616:	d106      	bne.n	800c626 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80a2 	beq.w	800c76a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d075      	beq.n	800c71a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f003 0310 	and.w	r3, r3, #16
 800c636:	2b00      	cmp	r3, #0
 800c638:	d046      	beq.n	800c6c8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c63a:	f7ff fc40 	bl	800bebe <LL_RCC_LSI1_IsReady>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d113      	bne.n	800c66c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c644:	f7ff fc19 	bl	800be7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c648:	f7fa f978 	bl	800693c <HAL_GetTick>
 800c64c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c64e:	e008      	b.n	800c662 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c650:	f7fa f974 	bl	800693c <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d901      	bls.n	800c662 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800c65e:	2303      	movs	r3, #3
 800c660:	e1d1      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c662:	f7ff fc2c 	bl	800bebe <LL_RCC_LSI1_IsReady>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0f1      	beq.n	800c650 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c66c:	f7ff fc39 	bl	800bee2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c670:	f7fa f964 	bl	800693c <HAL_GetTick>
 800c674:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c676:	e008      	b.n	800c68a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c678:	f7fa f960 	bl	800693c <HAL_GetTick>
 800c67c:	4602      	mov	r2, r0
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	2b03      	cmp	r3, #3
 800c684:	d901      	bls.n	800c68a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e1bd      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c68a:	f7ff fc4c 	bl	800bf26 <LL_RCC_LSI2_IsReady>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0f1      	beq.n	800c678 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fc56 	bl	800bf4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c69e:	f7ff fbfd 	bl	800be9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a2:	f7fa f94b 	bl	800693c <HAL_GetTick>
 800c6a6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c6a8:	e008      	b.n	800c6bc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c6aa:	f7fa f947 	bl	800693c <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d901      	bls.n	800c6bc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e1a4      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c6bc:	f7ff fbff 	bl	800bebe <LL_RCC_LSI1_IsReady>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f1      	bne.n	800c6aa <HAL_RCC_OscConfig+0x34e>
 800c6c6:	e050      	b.n	800c76a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c6c8:	f7ff fbd7 	bl	800be7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6cc:	f7fa f936 	bl	800693c <HAL_GetTick>
 800c6d0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c6d2:	e00b      	b.n	800c6ec <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c6d4:	f7fa f932 	bl	800693c <HAL_GetTick>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d904      	bls.n	800c6ec <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800c6e2:	2303      	movs	r3, #3
 800c6e4:	e18f      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
 800c6e6:	bf00      	nop
 800c6e8:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c6ec:	f7ff fbe7 	bl	800bebe <LL_RCC_LSI1_IsReady>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0ee      	beq.n	800c6d4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c6f6:	f7ff fc05 	bl	800bf04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c6fa:	e008      	b.n	800c70e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c6fc:	f7fa f91e 	bl	800693c <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b03      	cmp	r3, #3
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e17b      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c70e:	f7ff fc0a 	bl	800bf26 <LL_RCC_LSI2_IsReady>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1f1      	bne.n	800c6fc <HAL_RCC_OscConfig+0x3a0>
 800c718:	e027      	b.n	800c76a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c71a:	f7ff fbf3 	bl	800bf04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71e:	f7fa f90d 	bl	800693c <HAL_GetTick>
 800c722:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c724:	e008      	b.n	800c738 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c726:	f7fa f909 	bl	800693c <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	2b03      	cmp	r3, #3
 800c732:	d901      	bls.n	800c738 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e166      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c738:	f7ff fbf5 	bl	800bf26 <LL_RCC_LSI2_IsReady>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1f1      	bne.n	800c726 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c742:	f7ff fbab 	bl	800be9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c746:	f7fa f8f9 	bl	800693c <HAL_GetTick>
 800c74a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c74c:	e008      	b.n	800c760 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c74e:	f7fa f8f5 	bl	800693c <HAL_GetTick>
 800c752:	4602      	mov	r2, r0
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d901      	bls.n	800c760 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e152      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c760:	f7ff fbad 	bl	800bebe <LL_RCC_LSI1_IsReady>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f1      	bne.n	800c74e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0304 	and.w	r3, r3, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	d05b      	beq.n	800c82e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c776:	4ba6      	ldr	r3, [pc, #664]	; (800ca10 <HAL_RCC_OscConfig+0x6b4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d114      	bne.n	800c7ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c782:	f7ff fa1d 	bl	800bbc0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c786:	f7fa f8d9 	bl	800693c <HAL_GetTick>
 800c78a:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c78c:	e008      	b.n	800c7a0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c78e:	f7fa f8d5 	bl	800693c <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d901      	bls.n	800c7a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e132      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7a0:	4b9b      	ldr	r3, [pc, #620]	; (800ca10 <HAL_RCC_OscConfig+0x6b4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0f0      	beq.n	800c78e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d102      	bne.n	800c7ba <HAL_RCC_OscConfig+0x45e>
 800c7b4:	f7ff fb0b 	bl	800bdce <LL_RCC_LSE_Enable>
 800c7b8:	e00c      	b.n	800c7d4 <HAL_RCC_OscConfig+0x478>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	2b05      	cmp	r3, #5
 800c7c0:	d104      	bne.n	800c7cc <HAL_RCC_OscConfig+0x470>
 800c7c2:	f7ff fb26 	bl	800be12 <LL_RCC_LSE_EnableBypass>
 800c7c6:	f7ff fb02 	bl	800bdce <LL_RCC_LSE_Enable>
 800c7ca:	e003      	b.n	800c7d4 <HAL_RCC_OscConfig+0x478>
 800c7cc:	f7ff fb10 	bl	800bdf0 <LL_RCC_LSE_Disable>
 800c7d0:	f7ff fb30 	bl	800be34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d014      	beq.n	800c806 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7dc:	f7fa f8ae 	bl	800693c <HAL_GetTick>
 800c7e0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c7e2:	e00a      	b.n	800c7fa <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7e4:	f7fa f8aa 	bl	800693c <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d901      	bls.n	800c7fa <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e105      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c7fa:	f7ff fb2c 	bl	800be56 <LL_RCC_LSE_IsReady>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0ef      	beq.n	800c7e4 <HAL_RCC_OscConfig+0x488>
 800c804:	e013      	b.n	800c82e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c806:	f7fa f899 	bl	800693c <HAL_GetTick>
 800c80a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c80c:	e00a      	b.n	800c824 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c80e:	f7fa f895 	bl	800693c <HAL_GetTick>
 800c812:	4602      	mov	r2, r0
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	f241 3288 	movw	r2, #5000	; 0x1388
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d901      	bls.n	800c824 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e0f0      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c824:	f7ff fb17 	bl	800be56 <LL_RCC_LSE_IsReady>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1ef      	bne.n	800c80e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c836:	2b00      	cmp	r3, #0
 800c838:	d02c      	beq.n	800c894 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d014      	beq.n	800c86c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c842:	f7ff fa90 	bl	800bd66 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c846:	f7fa f879 	bl	800693c <HAL_GetTick>
 800c84a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c84c:	e008      	b.n	800c860 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c84e:	f7fa f875 	bl	800693c <HAL_GetTick>
 800c852:	4602      	mov	r2, r0
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d901      	bls.n	800c860 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e0d2      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c860:	f7ff faa3 	bl	800bdaa <LL_RCC_HSI48_IsReady>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0f1      	beq.n	800c84e <HAL_RCC_OscConfig+0x4f2>
 800c86a:	e013      	b.n	800c894 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c86c:	f7ff fa8c 	bl	800bd88 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c870:	f7fa f864 	bl	800693c <HAL_GetTick>
 800c874:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c876:	e008      	b.n	800c88a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c878:	f7fa f860 	bl	800693c <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b02      	cmp	r3, #2
 800c884:	d901      	bls.n	800c88a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e0bd      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c88a:	f7ff fa8e 	bl	800bdaa <LL_RCC_HSI48_IsReady>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1f1      	bne.n	800c878 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80b3 	beq.w	800ca04 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c89e:	f7ff fbec 	bl	800c07a <LL_RCC_GetSysClkSource>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b0c      	cmp	r3, #12
 800c8a6:	d076      	beq.n	800c996 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d14b      	bne.n	800c948 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8b0:	f7ff fca6 	bl	800c200 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b4:	f7fa f842 	bl	800693c <HAL_GetTick>
 800c8b8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800c8ba:	e008      	b.n	800c8ce <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8bc:	f7fa f83e 	bl	800693c <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e09b      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800c8ce:	f7ff fca6 	bl	800c21e <LL_RCC_PLL_IsReady>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1f1      	bne.n	800c8bc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	4b4d      	ldr	r3, [pc, #308]	; (800ca14 <HAL_RCC_OscConfig+0x6b8>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c8ea:	4311      	orrs	r1, r2
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c8f0:	0212      	lsls	r2, r2, #8
 800c8f2:	4311      	orrs	r1, r2
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c8f8:	4311      	orrs	r1, r2
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c8fe:	4311      	orrs	r1, r2
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c904:	430a      	orrs	r2, r1
 800c906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c90a:	4313      	orrs	r3, r2
 800c90c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c90e:	f7ff fc68 	bl	800c1e2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c91c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c920:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c922:	f7fa f80b 	bl	800693c <HAL_GetTick>
 800c926:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800c928:	e008      	b.n	800c93c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c92a:	f7fa f807 	bl	800693c <HAL_GetTick>
 800c92e:	4602      	mov	r2, r0
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	2b02      	cmp	r3, #2
 800c936:	d901      	bls.n	800c93c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e064      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800c93c:	f7ff fc6f 	bl	800c21e <LL_RCC_PLL_IsReady>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0f1      	beq.n	800c92a <HAL_RCC_OscConfig+0x5ce>
 800c946:	e05d      	b.n	800ca04 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c948:	f7ff fc5a 	bl	800c200 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800c94c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c956:	f023 0303 	bic.w	r3, r3, #3
 800c95a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800c95c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c966:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800c96a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c96e:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c970:	f7f9 ffe4 	bl	800693c <HAL_GetTick>
 800c974:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800c976:	e008      	b.n	800c98a <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c978:	f7f9 ffe0 	bl	800693c <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b02      	cmp	r3, #2
 800c984:	d901      	bls.n	800c98a <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e03d      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800c98a:	f7ff fc48 	bl	800c21e <LL_RCC_PLL_IsReady>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1f1      	bne.n	800c978 <HAL_RCC_OscConfig+0x61c>
 800c994:	e036      	b.n	800ca04 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d101      	bne.n	800c9a2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e031      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800c9a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f003 0203 	and.w	r2, r3, #3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d123      	bne.n	800ca00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d11c      	bne.n	800ca00 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	0a1b      	lsrs	r3, r3, #8
 800c9ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d114      	bne.n	800ca00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d10d      	bne.n	800ca00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d106      	bne.n	800ca00 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d001      	beq.n	800ca04 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e000      	b.n	800ca06 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	372c      	adds	r7, #44	; 0x2c
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd90      	pop	{r4, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	58000400 	.word	0x58000400
 800ca14:	11c1808c 	.word	0x11c1808c

0800ca18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e12a      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca2c:	4b97      	ldr	r3, [pc, #604]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d91b      	bls.n	800ca72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca3a:	4b94      	ldr	r3, [pc, #592]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f023 0207 	bic.w	r2, r3, #7
 800ca42:	4992      	ldr	r1, [pc, #584]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca4a:	f7f9 ff77 	bl	800693c <HAL_GetTick>
 800ca4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca50:	e008      	b.n	800ca64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca52:	f7f9 ff73 	bl	800693c <HAL_GetTick>
 800ca56:	4602      	mov	r2, r0
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d901      	bls.n	800ca64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e10e      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca64:	4b89      	ldr	r3, [pc, #548]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d1ef      	bne.n	800ca52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0302 	and.w	r3, r3, #2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d016      	beq.n	800caac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fb05 	bl	800c092 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca88:	f7f9 ff58 	bl	800693c <HAL_GetTick>
 800ca8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ca8e:	e008      	b.n	800caa2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca90:	f7f9 ff54 	bl	800693c <HAL_GetTick>
 800ca94:	4602      	mov	r2, r0
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d901      	bls.n	800caa2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	e0ef      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800caa2:	f7ff fbff 	bl	800c2a4 <LL_RCC_IsActiveFlag_HPRE>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0f1      	beq.n	800ca90 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d016      	beq.n	800cae6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fafc 	bl	800c0ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cac2:	f7f9 ff3b 	bl	800693c <HAL_GetTick>
 800cac6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cac8:	e008      	b.n	800cadc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800caca:	f7f9 ff37 	bl	800693c <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d901      	bls.n	800cadc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e0d2      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800cadc:	f7ff fbf4 	bl	800c2c8 <LL_RCC_IsActiveFlag_C2HPRE>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0f1      	beq.n	800caca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d016      	beq.n	800cb20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff faf5 	bl	800c0e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cafc:	f7f9 ff1e 	bl	800693c <HAL_GetTick>
 800cb00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cb02:	e008      	b.n	800cb16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb04:	f7f9 ff1a 	bl	800693c <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d901      	bls.n	800cb16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e0b5      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800cb16:	f7ff fbea 	bl	800c2ee <LL_RCC_IsActiveFlag_SHDHPRE>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0f1      	beq.n	800cb04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d016      	beq.n	800cb5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7ff faef 	bl	800c114 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb36:	f7f9 ff01 	bl	800693c <HAL_GetTick>
 800cb3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb3c:	e008      	b.n	800cb50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb3e:	f7f9 fefd 	bl	800693c <HAL_GetTick>
 800cb42:	4602      	mov	r2, r0
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d901      	bls.n	800cb50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e098      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800cb50:	f7ff fbe0 	bl	800c314 <LL_RCC_IsActiveFlag_PPRE1>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0f1      	beq.n	800cb3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 0308 	and.w	r3, r3, #8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d017      	beq.n	800cb96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fae5 	bl	800c13c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cb72:	f7f9 fee3 	bl	800693c <HAL_GetTick>
 800cb76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb78:	e008      	b.n	800cb8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cb7a:	f7f9 fedf 	bl	800693c <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d901      	bls.n	800cb8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e07a      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cb8c:	f7ff fbd4 	bl	800c338 <LL_RCC_IsActiveFlag_PPRE2>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d0f1      	beq.n	800cb7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d043      	beq.n	800cc2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d106      	bne.n	800cbb8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cbaa:	f7ff f885 	bl	800bcb8 <LL_RCC_HSE_IsReady>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d11e      	bne.n	800cbf2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e064      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d106      	bne.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cbc0:	f7ff fb2d 	bl	800c21e <LL_RCC_PLL_IsReady>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d113      	bne.n	800cbf2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e059      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d106      	bne.n	800cbe4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cbd6:	f7ff f9ed 	bl	800bfb4 <LL_RCC_MSI_IsReady>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d108      	bne.n	800cbf2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e04e      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cbe4:	f7ff f898 	bl	800bd18 <LL_RCC_HSI_IsReady>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e047      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fa2b 	bl	800c052 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbfc:	f7f9 fe9e 	bl	800693c <HAL_GetTick>
 800cc00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc02:	e00a      	b.n	800cc1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc04:	f7f9 fe9a 	bl	800693c <HAL_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d901      	bls.n	800cc1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cc16:	2303      	movs	r3, #3
 800cc18:	e033      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc1a:	f7ff fa2e 	bl	800c07a <LL_RCC_GetSysClkSource>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d1ec      	bne.n	800cc04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc2a:	4b18      	ldr	r3, [pc, #96]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0307 	and.w	r3, r3, #7
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d21b      	bcs.n	800cc70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc38:	4b14      	ldr	r3, [pc, #80]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f023 0207 	bic.w	r2, r3, #7
 800cc40:	4912      	ldr	r1, [pc, #72]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc48:	f7f9 fe78 	bl	800693c <HAL_GetTick>
 800cc4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cc50:	f7f9 fe74 	bl	800693c <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e00f      	b.n	800cc82 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc62:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <HAL_RCC_ClockConfig+0x274>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d1ef      	bne.n	800cc50 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800cc70:	f7f8 ffee 	bl	8005c50 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cc74:	f7f9 fe6e 	bl	8006954 <HAL_GetTickPrio>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f8 fcd8 	bl	8005630 <HAL_InitTick>
 800cc80:	4603      	mov	r3, r0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	58004000 	.word	0x58004000

0800cc90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc90:	b590      	push	{r4, r7, lr}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc96:	f7ff f9f0 	bl	800c07a <LL_RCC_GetSysClkSource>
 800cc9a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10a      	bne.n	800ccb8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cca2:	f7ff f9ac 	bl	800bffe <LL_RCC_MSI_GetRange>
 800cca6:	4603      	mov	r3, r0
 800cca8:	091b      	lsrs	r3, r3, #4
 800ccaa:	f003 030f 	and.w	r3, r3, #15
 800ccae:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <HAL_RCC_GetSysClockFreq+0xc8>)
 800ccb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e04a      	b.n	800cd4e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b04      	cmp	r3, #4
 800ccbc:	d102      	bne.n	800ccc4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ccbe:	4b27      	ldr	r3, [pc, #156]	; (800cd5c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	e044      	b.n	800cd4e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b08      	cmp	r3, #8
 800ccc8:	d10a      	bne.n	800cce0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ccca:	f7fe ffa7 	bl	800bc1c <LL_RCC_HSE_IsEnabledDiv2>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d102      	bne.n	800ccda <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ccd4:	4b21      	ldr	r3, [pc, #132]	; (800cd5c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e039      	b.n	800cd4e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800ccda:	4b21      	ldr	r3, [pc, #132]	; (800cd60 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	e036      	b.n	800cd4e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cce0:	f7ff fad4 	bl	800c28c <LL_RCC_PLL_GetMainSource>
 800cce4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d002      	beq.n	800ccf2 <HAL_RCC_GetSysClockFreq+0x62>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d003      	beq.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x68>
 800ccf0:	e00d      	b.n	800cd0e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ccf2:	4b1a      	ldr	r3, [pc, #104]	; (800cd5c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ccf4:	60bb      	str	r3, [r7, #8]
        break;
 800ccf6:	e015      	b.n	800cd24 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ccf8:	f7fe ff90 	bl	800bc1c <LL_RCC_HSE_IsEnabledDiv2>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d102      	bne.n	800cd08 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cd02:	4b16      	ldr	r3, [pc, #88]	; (800cd5c <HAL_RCC_GetSysClockFreq+0xcc>)
 800cd04:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cd06:	e00d      	b.n	800cd24 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800cd08:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cd0a:	60bb      	str	r3, [r7, #8]
        break;
 800cd0c:	e00a      	b.n	800cd24 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cd0e:	f7ff f976 	bl	800bffe <LL_RCC_MSI_GetRange>
 800cd12:	4603      	mov	r3, r0
 800cd14:	091b      	lsrs	r3, r3, #4
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	4a0f      	ldr	r2, [pc, #60]	; (800cd58 <HAL_RCC_GetSysClockFreq+0xc8>)
 800cd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd20:	60bb      	str	r3, [r7, #8]
        break;
 800cd22:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800cd24:	f7ff fa8d 	bl	800c242 <LL_RCC_PLL_GetN>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	fb03 f402 	mul.w	r4, r3, r2
 800cd30:	f7ff faa0 	bl	800c274 <LL_RCC_PLL_GetDivider>
 800cd34:	4603      	mov	r3, r0
 800cd36:	091b      	lsrs	r3, r3, #4
 800cd38:	3301      	adds	r3, #1
 800cd3a:	fbb4 f4f3 	udiv	r4, r4, r3
 800cd3e:	f7ff fa8d 	bl	800c25c <LL_RCC_PLL_GetR>
 800cd42:	4603      	mov	r3, r0
 800cd44:	0f5b      	lsrs	r3, r3, #29
 800cd46:	3301      	adds	r3, #1
 800cd48:	fbb4 f3f3 	udiv	r3, r4, r3
 800cd4c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3714      	adds	r7, #20
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd90      	pop	{r4, r7, pc}
 800cd58:	0801bed0 	.word	0x0801bed0
 800cd5c:	00f42400 	.word	0x00f42400
 800cd60:	01e84800 	.word	0x01e84800

0800cd64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd64:	b598      	push	{r3, r4, r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cd68:	f7ff ff92 	bl	800cc90 <HAL_RCC_GetSysClockFreq>
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	f7ff f9f9 	bl	800c164 <LL_RCC_GetAHBPrescaler>
 800cd72:	4603      	mov	r3, r0
 800cd74:	091b      	lsrs	r3, r3, #4
 800cd76:	f003 030f 	and.w	r3, r3, #15
 800cd7a:	4a03      	ldr	r2, [pc, #12]	; (800cd88 <HAL_RCC_GetHCLKFreq+0x24>)
 800cd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	bd98      	pop	{r3, r4, r7, pc}
 800cd88:	0801be70 	.word	0x0801be70

0800cd8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd8c:	b598      	push	{r3, r4, r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cd90:	f7ff ffe8 	bl	800cd64 <HAL_RCC_GetHCLKFreq>
 800cd94:	4604      	mov	r4, r0
 800cd96:	f7ff fa18 	bl	800c1ca <LL_RCC_GetAPB2Prescaler>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	0adb      	lsrs	r3, r3, #11
 800cd9e:	f003 0307 	and.w	r3, r3, #7
 800cda2:	4a04      	ldr	r2, [pc, #16]	; (800cdb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda8:	f003 031f 	and.w	r3, r3, #31
 800cdac:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	bd98      	pop	{r3, r4, r7, pc}
 800cdb4:	0801beb0 	.word	0x0801beb0

0800cdb8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	226f      	movs	r2, #111	; 0x6f
 800cdc6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800cdc8:	f7ff f957 	bl	800c07a <LL_RCC_GetSysClkSource>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800cdd2:	f7ff f9c7 	bl	800c164 <LL_RCC_GetAHBPrescaler>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800cddc:	f7ff f9e9 	bl	800c1b2 <LL_RCC_GetAPB1Prescaler>
 800cde0:	4602      	mov	r2, r0
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800cde6:	f7ff f9f0 	bl	800c1ca <LL_RCC_GetAPB2Prescaler>
 800cdea:	4602      	mov	r2, r0
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800cdf0:	f7ff f9c4 	bl	800c17c <LL_C2_RCC_GetAHBPrescaler>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800cdfa:	f7ff f9cc 	bl	800c196 <LL_RCC_GetAHB4Prescaler>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <HAL_RCC_GetClockConfig+0x60>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0207 	and.w	r2, r3, #7
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	601a      	str	r2, [r3, #0]
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	58004000 	.word	0x58004000

0800ce1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ce1c:	b590      	push	{r4, r7, lr}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2bb0      	cmp	r3, #176	; 0xb0
 800ce28:	d903      	bls.n	800ce32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ce2a:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	e007      	b.n	800ce42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	4a11      	ldr	r2, [pc, #68]	; (800ce80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ce42:	f7ff f9a8 	bl	800c196 <LL_RCC_GetAHB4Prescaler>
 800ce46:	4603      	mov	r3, r0
 800ce48:	091b      	lsrs	r3, r3, #4
 800ce4a:	f003 030f 	and.w	r3, r3, #15
 800ce4e:	4a0d      	ldr	r2, [pc, #52]	; (800ce84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ce60:	fba2 2303 	umull	r2, r3, r2, r3
 800ce64:	0c9c      	lsrs	r4, r3, #18
 800ce66:	f7fe febb 	bl	800bbe0 <HAL_PWREx_GetVoltageRange>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 f80c 	bl	800ce8c <RCC_SetFlashLatency>
 800ce74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd90      	pop	{r4, r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	0801bed0 	.word	0x0801bed0
 800ce84:	0801be70 	.word	0x0801be70
 800ce88:	431bde83 	.word	0x431bde83

0800ce8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b093      	sub	sp, #76	; 0x4c
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <RCC_SetFlashLatency+0xf0>)
 800ce98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ce9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cea2:	4a37      	ldr	r2, [pc, #220]	; (800cf80 <RCC_SetFlashLatency+0xf4>)
 800cea4:	f107 031c 	add.w	r3, r7, #28
 800cea8:	ca07      	ldmia	r2, {r0, r1, r2}
 800ceaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ceae:	4b35      	ldr	r3, [pc, #212]	; (800cf84 <RCC_SetFlashLatency+0xf8>)
 800ceb0:	f107 040c 	add.w	r4, r7, #12
 800ceb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ceba:	2300      	movs	r3, #0
 800cebc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cec4:	d11c      	bne.n	800cf00 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cec6:	2300      	movs	r3, #0
 800cec8:	643b      	str	r3, [r7, #64]	; 0x40
 800ceca:	e015      	b.n	800cef8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ced4:	4413      	add	r3, r2
 800ced6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d808      	bhi.n	800cef2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cee8:	4413      	add	r3, r2
 800ceea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ceee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800cef0:	e022      	b.n	800cf38 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef4:	3301      	adds	r3, #1
 800cef6:	643b      	str	r3, [r7, #64]	; 0x40
 800cef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d9e6      	bls.n	800cecc <RCC_SetFlashLatency+0x40>
 800cefe:	e01b      	b.n	800cf38 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf00:	2300      	movs	r3, #0
 800cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf04:	e015      	b.n	800cf32 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cf06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cf0e:	4413      	add	r3, r2
 800cf10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d808      	bhi.n	800cf2c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cf22:	4413      	add	r3, r2
 800cf24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cf28:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800cf2a:	e005      	b.n	800cf38 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2e:	3301      	adds	r3, #1
 800cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d9e6      	bls.n	800cf06 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800cf38:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <RCC_SetFlashLatency+0xfc>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f023 0207 	bic.w	r2, r3, #7
 800cf40:	4911      	ldr	r1, [pc, #68]	; (800cf88 <RCC_SetFlashLatency+0xfc>)
 800cf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf44:	4313      	orrs	r3, r2
 800cf46:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf48:	f7f9 fcf8 	bl	800693c <HAL_GetTick>
 800cf4c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf4e:	e008      	b.n	800cf62 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cf50:	f7f9 fcf4 	bl	800693c <HAL_GetTick>
 800cf54:	4602      	mov	r2, r0
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d901      	bls.n	800cf62 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e007      	b.n	800cf72 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <RCC_SetFlashLatency+0xfc>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0307 	and.w	r3, r3, #7
 800cf6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d1ef      	bne.n	800cf50 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	374c      	adds	r7, #76	; 0x4c
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd90      	pop	{r4, r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	0801b7d4 	.word	0x0801b7d4
 800cf80:	0801b7e4 	.word	0x0801b7e4
 800cf84:	0801b7f0 	.word	0x0801b7f0
 800cf88:	58004000 	.word	0x58004000

0800cf8c <LL_RCC_LSE_IsEnabled>:
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cf90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf98:	f003 0301 	and.w	r3, r3, #1
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d101      	bne.n	800cfa4 <LL_RCC_LSE_IsEnabled+0x18>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e000      	b.n	800cfa6 <LL_RCC_LSE_IsEnabled+0x1a>
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <LL_RCC_LSE_IsReady>:
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cfb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d101      	bne.n	800cfc8 <LL_RCC_LSE_IsReady+0x18>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e000      	b.n	800cfca <LL_RCC_LSE_IsReady+0x1a>
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <LL_RCC_SetRFWKPClockSource>:
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cfdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfe4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cfe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <LL_RCC_SetSMPSClockSource>:
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	f023 0203 	bic.w	r2, r3, #3
 800d012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4313      	orrs	r3, r2
 800d01a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <LL_RCC_SetSMPSPrescaler>:
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d03a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4313      	orrs	r3, r2
 800d042:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <LL_RCC_SetUSARTClockSource>:
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d060:	f023 0203 	bic.w	r2, r3, #3
 800d064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <LL_RCC_SetLPUARTClockSource>:
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d08c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4313      	orrs	r3, r2
 800d098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <LL_RCC_SetI2CClockSource>:
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	091b      	lsrs	r3, r3, #4
 800d0bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d0c0:	43db      	mvns	r3, r3
 800d0c2:	401a      	ands	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	011b      	lsls	r3, r3, #4
 800d0c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d0cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d0d6:	bf00      	nop
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <LL_RCC_SetLPTIMClockSource>:
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b083      	sub	sp, #12
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	0c1b      	lsrs	r3, r3, #16
 800d0f6:	041b      	lsls	r3, r3, #16
 800d0f8:	43db      	mvns	r3, r3
 800d0fa:	401a      	ands	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	041b      	lsls	r3, r3, #16
 800d100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d104:	4313      	orrs	r3, r2
 800d106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <LL_RCC_SetSAIClockSource>:
{
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d11e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d126:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d12a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4313      	orrs	r3, r2
 800d132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d136:	bf00      	nop
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr

0800d142 <LL_RCC_SetRNGClockSource>:
{
 800d142:	b480      	push	{r7}
 800d144:	b083      	sub	sp, #12
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d14a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d152:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <LL_RCC_SetCLK48ClockSource>:
{
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d17e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4313      	orrs	r3, r2
 800d18a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <LL_RCC_SetUSBClockSource>:
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7ff ffe3 	bl	800d16e <LL_RCC_SetCLK48ClockSource>
}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <LL_RCC_SetADCClockSource>:
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d1c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <LL_RCC_SetRTCClockSource>:
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d1e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <LL_RCC_GetRTCClockSource>:
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d20c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d214:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d218:	4618      	mov	r0, r3
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <LL_RCC_ForceBackupDomainReset>:
{
 800d222:	b480      	push	{r7}
 800d224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d23a:	bf00      	nop
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d25c:	bf00      	nop
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <LL_RCC_PLLSAI1_Enable>:
{
 800d266:	b480      	push	{r7}
 800d268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d26a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d278:	6013      	str	r3, [r2, #0]
}
 800d27a:	bf00      	nop
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <LL_RCC_PLLSAI1_Disable>:
{
 800d284:	b480      	push	{r7}
 800d286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d296:	6013      	str	r3, [r2, #0]
}
 800d298:	bf00      	nop
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <LL_RCC_PLLSAI1_IsReady>:
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d2a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2b4:	d101      	bne.n	800d2ba <LL_RCC_PLLSAI1_IsReady+0x18>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e000      	b.n	800d2bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b088      	sub	sp, #32
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d033      	beq.n	800d34a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2ea:	d00c      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d2ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2f0:	d802      	bhi.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d010      	beq.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d2f6:	e017      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d2f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d2fc:	d017      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800d2fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d302:	d016      	beq.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800d304:	e010      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d314:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d316:	e00d      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3304      	adds	r3, #4
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 f947 	bl	800d5b0 <RCCEx_PLLSAI1_ConfigNP>
 800d322:	4603      	mov	r3, r0
 800d324:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d326:	e005      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	77fb      	strb	r3, [r7, #31]
        break;
 800d32c:	e002      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d32e:	bf00      	nop
 800d330:	e000      	b.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800d332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d334:	7ffb      	ldrb	r3, [r7, #31]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff fee9 	bl	800d116 <LL_RCC_SetSAIClockSource>
 800d344:	e001      	b.n	800d34a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d346:	7ffb      	ldrb	r3, [r7, #31]
 800d348:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d352:	2b00      	cmp	r3, #0
 800d354:	d046      	beq.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d356:	f7ff ff57 	bl	800d208 <LL_RCC_GetRTCClockSource>
 800d35a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	429a      	cmp	r2, r3
 800d364:	d03c      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d366:	f7fe fc2b 	bl	800bbc0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff ff31 	bl	800d1dc <LL_RCC_SetRTCClockSource>
 800d37a:	e02e      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d37c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d384:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d386:	f7ff ff4c 	bl	800d222 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d38a:	f7ff ff5b 	bl	800d244 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d398:	4313      	orrs	r3, r2
 800d39a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d39c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d3a6:	f7ff fdf1 	bl	800cf8c <LL_RCC_LSE_IsEnabled>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d114      	bne.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3b0:	f7f9 fac4 	bl	800693c <HAL_GetTick>
 800d3b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d3b6:	e00b      	b.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3b8:	f7f9 fac0 	bl	800693c <HAL_GetTick>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d902      	bls.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	77fb      	strb	r3, [r7, #31]
              break;
 800d3ce:	e004      	b.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d3d0:	f7ff fdee 	bl	800cfb0 <LL_RCC_LSE_IsReady>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d1ee      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d3da:	7ffb      	ldrb	r3, [r7, #31]
 800d3dc:	77bb      	strb	r3, [r7, #30]
 800d3de:	e001      	b.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e0:	7ffb      	ldrb	r3, [r7, #31]
 800d3e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fe2b 	bl	800d050 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0302 	and.w	r3, r3, #2
 800d402:	2b00      	cmp	r3, #0
 800d404:	d004      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff fe36 	bl	800d07c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 0310 	and.w	r3, r3, #16
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fe5e 	bl	800d0e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 0320 	and.w	r3, r3, #32
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff fe53 	bl	800d0e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0304 	and.w	r3, r3, #4
 800d444:	2b00      	cmp	r3, #0
 800d446:	d004      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff fe2b 	bl	800d0a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f003 0308 	and.w	r3, r3, #8
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d462:	4618      	mov	r0, r3
 800d464:	f7ff fe20 	bl	800d0a8 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d470:	2b00      	cmp	r3, #0
 800d472:	d022      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff fe8e 	bl	800d19a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d486:	d107      	bne.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d496:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4a0:	d10b      	bne.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 f8dd 	bl	800d666 <RCCEx_PLLSAI1_ConfigNQ>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d4b0:	7ffb      	ldrb	r3, [r7, #31]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800d4b6:	7ffb      	ldrb	r3, [r7, #31]
 800d4b8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d02b      	beq.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ce:	d008      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4d8:	d003      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d105      	bne.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff fe2b 	bl	800d142 <LL_RCC_SetRNGClockSource>
 800d4ec:	e00a      	b.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	f7ff fe22 	bl	800d142 <LL_RCC_SetRNGClockSource>
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7ff fe35 	bl	800d16e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800d50c:	d107      	bne.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d50e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d51c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d526:	2b00      	cmp	r3, #0
 800d528:	d022      	beq.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff fe3e 	bl	800d1b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d53c:	d107      	bne.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d53e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d54c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d556:	d10b      	bne.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 f8dd 	bl	800d71c <RCCEx_PLLSAI1_ConfigNR>
 800d562:	4603      	mov	r3, r0
 800d564:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d566:	7ffb      	ldrb	r3, [r7, #31]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800d56c:	7ffb      	ldrb	r3, [r7, #31]
 800d56e:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d004      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d580:	4618      	mov	r0, r3
 800d582:	f7ff fd27 	bl	800cfd4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d009      	beq.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fd46 	bl	800d028 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7ff fd2d 	bl	800d000 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800d5a6:	7fbb      	ldrb	r3, [r7, #30]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3720      	adds	r7, #32
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d5bc:	f7ff fe62 	bl	800d284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5c0:	f7f9 f9bc 	bl	800693c <HAL_GetTick>
 800d5c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5c6:	e009      	b.n	800d5dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5c8:	f7f9 f9b8 	bl	800693c <HAL_GetTick>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d902      	bls.n	800d5dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d5da:	e004      	b.n	800d5e6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5dc:	f7ff fe61 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1f0      	bne.n	800d5c8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d137      	bne.n	800d65c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d5ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	021b      	lsls	r3, r3, #8
 800d5fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d600:	4313      	orrs	r3, r2
 800d602:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d616:	4313      	orrs	r3, r2
 800d618:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d61a:	f7ff fe24 	bl	800d266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d61e:	f7f9 f98d 	bl	800693c <HAL_GetTick>
 800d622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d624:	e009      	b.n	800d63a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d626:	f7f9 f989 	bl	800693c <HAL_GetTick>
 800d62a:	4602      	mov	r2, r0
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	2b02      	cmp	r3, #2
 800d632:	d902      	bls.n	800d63a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	73fb      	strb	r3, [r7, #15]
        break;
 800d638:	e004      	b.n	800d644 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d63a:	f7ff fe32 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b01      	cmp	r3, #1
 800d642:	d1f0      	bne.n	800d626 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d108      	bne.n	800d65c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d64a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d658:	4313      	orrs	r3, r2
 800d65a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d672:	f7ff fe07 	bl	800d284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d676:	f7f9 f961 	bl	800693c <HAL_GetTick>
 800d67a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d67c:	e009      	b.n	800d692 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d67e:	f7f9 f95d 	bl	800693c <HAL_GetTick>
 800d682:	4602      	mov	r2, r0
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d902      	bls.n	800d692 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	73fb      	strb	r3, [r7, #15]
      break;
 800d690:	e004      	b.n	800d69c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d692:	f7ff fe06 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1f0      	bne.n	800d67e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d137      	bne.n	800d712 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d6a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	021b      	lsls	r3, r3, #8
 800d6b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d6ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d6d0:	f7ff fdc9 	bl	800d266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d4:	f7f9 f932 	bl	800693c <HAL_GetTick>
 800d6d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6da:	e009      	b.n	800d6f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d6dc:	f7f9 f92e 	bl	800693c <HAL_GetTick>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d902      	bls.n	800d6f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	73fb      	strb	r3, [r7, #15]
        break;
 800d6ee:	e004      	b.n	800d6fa <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d6f0:	f7ff fdd7 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d1f0      	bne.n	800d6dc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d108      	bne.n	800d712 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d704:	691a      	ldr	r2, [r3, #16]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d70e:	4313      	orrs	r3, r2
 800d710:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d712:	7bfb      	ldrb	r3, [r7, #15]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d728:	f7ff fdac 	bl	800d284 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d72c:	f7f9 f906 	bl	800693c <HAL_GetTick>
 800d730:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d732:	e009      	b.n	800d748 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d734:	f7f9 f902 	bl	800693c <HAL_GetTick>
 800d738:	4602      	mov	r2, r0
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d902      	bls.n	800d748 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	73fb      	strb	r3, [r7, #15]
      break;
 800d746:	e004      	b.n	800d752 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d748:	f7ff fdab 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1f0      	bne.n	800d734 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d752:	7bfb      	ldrb	r3, [r7, #15]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d137      	bne.n	800d7c8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	021b      	lsls	r3, r3, #8
 800d768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d76c:	4313      	orrs	r3, r2
 800d76e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d782:	4313      	orrs	r3, r2
 800d784:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d786:	f7ff fd6e 	bl	800d266 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d78a:	f7f9 f8d7 	bl	800693c <HAL_GetTick>
 800d78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d790:	e009      	b.n	800d7a6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d792:	f7f9 f8d3 	bl	800693c <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d902      	bls.n	800d7a6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	73fb      	strb	r3, [r7, #15]
        break;
 800d7a4:	e004      	b.n	800d7b0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d7a6:	f7ff fd7c 	bl	800d2a2 <LL_RCC_PLLSAI1_IsReady>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d1f0      	bne.n	800d792 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d108      	bne.n	800d7c8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d7b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b082      	sub	sp, #8
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e090      	b.n	800d906 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d106      	bne.n	800d7fe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7f7 fceb 	bl	80051d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2202      	movs	r2, #2
 800d802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	22ca      	movs	r2, #202	; 0xca
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2253      	movs	r2, #83	; 0x53
 800d814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 faba 	bl	800dd90 <RTC_EnterInitMode>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d009      	beq.n	800d836 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	22ff      	movs	r2, #255	; 0xff
 800d828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2204      	movs	r2, #4
 800d82e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e067      	b.n	800d906 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	6812      	ldr	r2, [r2, #0]
 800d840:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d848:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6899      	ldr	r1, [r3, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685a      	ldr	r2, [r3, #4]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	431a      	orrs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	430a      	orrs	r2, r1
 800d866:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	68d2      	ldr	r2, [r2, #12]
 800d870:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6919      	ldr	r1, [r3, #16]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	041a      	lsls	r2, r3, #16
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	430a      	orrs	r2, r1
 800d884:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d894:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0203 	bic.w	r2, r2, #3
 800d8a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	69da      	ldr	r2, [r3, #28]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f003 0320 	and.w	r3, r3, #32
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d113      	bne.n	800d8f4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 fa39 	bl	800dd44 <HAL_RTC_WaitForSynchro>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00d      	beq.n	800d8f4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	22ff      	movs	r2, #255	; 0xff
 800d8de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e008      	b.n	800d906 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	22ff      	movs	r2, #255	; 0xff
 800d8fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800d904:	2300      	movs	r3, #0
  }
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d90e:	b590      	push	{r4, r7, lr}
 800d910:	b087      	sub	sp, #28
 800d912:	af00      	add	r7, sp, #0
 800d914:	60f8      	str	r0, [r7, #12]
 800d916:	60b9      	str	r1, [r7, #8]
 800d918:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d101      	bne.n	800d928 <HAL_RTC_SetTime+0x1a>
 800d924:	2302      	movs	r3, #2
 800d926:	e0b2      	b.n	800da8e <HAL_RTC_SetTime+0x180>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2202      	movs	r2, #2
 800d934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d126      	bne.n	800d98c <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	2200      	movs	r2, #0
 800d950:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 fa44 	bl	800dde4 <RTC_ByteToBcd2>
 800d95c:	4603      	mov	r3, r0
 800d95e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fa3d 	bl	800dde4 <RTC_ByteToBcd2>
 800d96a:	4603      	mov	r3, r0
 800d96c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d96e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	789b      	ldrb	r3, [r3, #2]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 fa35 	bl	800dde4 <RTC_ByteToBcd2>
 800d97a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d97c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	78db      	ldrb	r3, [r3, #3]
 800d984:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d986:	4313      	orrs	r3, r2
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	e018      	b.n	800d9be <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2200      	movs	r2, #0
 800d99e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	785b      	ldrb	r3, [r3, #1]
 800d9aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9ac:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d9b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	78db      	ldrb	r3, [r3, #3]
 800d9b8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	22ca      	movs	r2, #202	; 0xca
 800d9c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2253      	movs	r2, #83	; 0x53
 800d9cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 f9de 	bl	800dd90 <RTC_EnterInitMode>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00d      	beq.n	800d9f6 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	22ff      	movs	r2, #255	; 0xff
 800d9e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e04b      	b.n	800da8e <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800da00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800da04:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6899      	ldr	r1, [r3, #8]
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	431a      	orrs	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	68da      	ldr	r2, [r3, #12]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da3c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f003 0320 	and.w	r3, r3, #32
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d113      	bne.n	800da74 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 f979 	bl	800dd44 <HAL_RTC_WaitForSynchro>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00d      	beq.n	800da74 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	22ff      	movs	r2, #255	; 0xff
 800da5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2204      	movs	r2, #4
 800da64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e00c      	b.n	800da8e <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	22ff      	movs	r2, #255	; 0xff
 800da7a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800da8c:	2300      	movs	r3, #0
  }
}
 800da8e:	4618      	mov	r0, r3
 800da90:	371c      	adds	r7, #28
 800da92:	46bd      	mov	sp, r7
 800da94:	bd90      	pop	{r4, r7, pc}

0800da96 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b086      	sub	sp, #24
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	60f8      	str	r0, [r7, #12]
 800da9e:	60b9      	str	r1, [r7, #8]
 800daa0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800dac4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800dac8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	0c1b      	lsrs	r3, r3, #16
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	0a1b      	lsrs	r3, r3, #8
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	0c1b      	lsrs	r3, r3, #16
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db02:	b2da      	uxtb	r2, r3
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d11a      	bne.n	800db44 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	f000 f986 	bl	800de24 <RTC_Bcd2ToByte>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	785b      	ldrb	r3, [r3, #1]
 800db24:	4618      	mov	r0, r3
 800db26:	f000 f97d 	bl	800de24 <RTC_Bcd2ToByte>
 800db2a:	4603      	mov	r3, r0
 800db2c:	461a      	mov	r2, r3
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	789b      	ldrb	r3, [r3, #2]
 800db36:	4618      	mov	r0, r3
 800db38:	f000 f974 	bl	800de24 <RTC_Bcd2ToByte>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db4e:	b590      	push	{r4, r7, lr}
 800db50:	b087      	sub	sp, #28
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d101      	bne.n	800db68 <HAL_RTC_SetDate+0x1a>
 800db64:	2302      	movs	r3, #2
 800db66:	e09c      	b.n	800dca2 <HAL_RTC_SetDate+0x154>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2202      	movs	r2, #2
 800db74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10e      	bne.n	800db9c <HAL_RTC_SetDate+0x4e>
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	f003 0310 	and.w	r3, r3, #16
 800db86:	2b00      	cmp	r3, #0
 800db88:	d008      	beq.n	800db9c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	785b      	ldrb	r3, [r3, #1]
 800db8e:	f023 0310 	bic.w	r3, r3, #16
 800db92:	b2db      	uxtb	r3, r3
 800db94:	330a      	adds	r3, #10
 800db96:	b2da      	uxtb	r2, r3
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d11c      	bne.n	800dbdc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	78db      	ldrb	r3, [r3, #3]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 f91c 	bl	800dde4 <RTC_ByteToBcd2>
 800dbac:	4603      	mov	r3, r0
 800dbae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f915 	bl	800dde4 <RTC_ByteToBcd2>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dbbe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	789b      	ldrb	r3, [r3, #2]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 f90d 	bl	800dde4 <RTC_ByteToBcd2>
 800dbca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800dbcc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	617b      	str	r3, [r7, #20]
 800dbda:	e00e      	b.n	800dbfa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	78db      	ldrb	r3, [r3, #3]
 800dbe0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	785b      	ldrb	r3, [r3, #1]
 800dbe6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbe8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800dbee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	22ca      	movs	r2, #202	; 0xca
 800dc00:	625a      	str	r2, [r3, #36]	; 0x24
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2253      	movs	r2, #83	; 0x53
 800dc08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f000 f8c0 	bl	800dd90 <RTC_EnterInitMode>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00d      	beq.n	800dc32 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	22ff      	movs	r2, #255	; 0xff
 800dc1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2204      	movs	r2, #4
 800dc22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e037      	b.n	800dca2 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dc3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f003 0320 	and.w	r3, r3, #32
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d113      	bne.n	800dc88 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 f86f 	bl	800dd44 <HAL_RTC_WaitForSynchro>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00d      	beq.n	800dc88 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	22ff      	movs	r2, #255	; 0xff
 800dc72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2204      	movs	r2, #4
 800dc78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e00c      	b.n	800dca2 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	22ff      	movs	r2, #255	; 0xff
 800dc8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dca0:	2300      	movs	r3, #0
  }
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	371c      	adds	r7, #28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd90      	pop	{r4, r7, pc}

0800dcaa <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b086      	sub	sp, #24
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dcc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcc4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	0c1b      	lsrs	r3, r3, #16
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	0a1b      	lsrs	r3, r3, #8
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	f003 031f 	and.w	r3, r3, #31
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	0b5b      	lsrs	r3, r3, #13
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 0307 	and.w	r3, r3, #7
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d11a      	bne.n	800dd3a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	78db      	ldrb	r3, [r3, #3]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 f88b 	bl	800de24 <RTC_Bcd2ToByte>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	461a      	mov	r2, r3
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	785b      	ldrb	r3, [r3, #1]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f000 f882 	bl	800de24 <RTC_Bcd2ToByte>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	789b      	ldrb	r3, [r3, #2]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 f879 	bl	800de24 <RTC_Bcd2ToByte>
 800dd32:	4603      	mov	r3, r0
 800dd34:	461a      	mov	r2, r3
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68da      	ldr	r2, [r3, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dd5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dd5c:	f7f8 fdee 	bl	800693c <HAL_GetTick>
 800dd60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd62:	e009      	b.n	800dd78 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dd64:	f7f8 fdea 	bl	800693c <HAL_GetTick>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd72:	d901      	bls.n	800dd78 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e007      	b.n	800dd88 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d0ee      	beq.n	800dd64 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d119      	bne.n	800ddda <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ddae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ddb0:	f7f8 fdc4 	bl	800693c <HAL_GetTick>
 800ddb4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ddb6:	e009      	b.n	800ddcc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ddb8:	f7f8 fdc0 	bl	800693c <HAL_GetTick>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddc6:	d901      	bls.n	800ddcc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e007      	b.n	800dddc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0ee      	beq.n	800ddb8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800ddf6:	e005      	b.n	800de04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800ddfe:	7afb      	ldrb	r3, [r7, #11]
 800de00:	3b0a      	subs	r3, #10
 800de02:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800de04:	7afb      	ldrb	r3, [r7, #11]
 800de06:	2b09      	cmp	r3, #9
 800de08:	d8f6      	bhi.n	800ddf8 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	011b      	lsls	r3, r3, #4
 800de10:	b2da      	uxtb	r2, r3
 800de12:	7afb      	ldrb	r3, [r7, #11]
 800de14:	4313      	orrs	r3, r2
 800de16:	b2db      	uxtb	r3, r3
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800de2e:	79fb      	ldrb	r3, [r7, #7]
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	b2db      	uxtb	r3, r3
 800de34:	461a      	mov	r2, r3
 800de36:	4613      	mov	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	b2da      	uxtb	r2, r3
 800de44:	79fb      	ldrb	r3, [r7, #7]
 800de46:	f003 030f 	and.w	r3, r3, #15
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	4413      	add	r3, r2
 800de4e:	b2db      	uxtb	r3, r3
}
 800de50:	4618      	mov	r0, r3
 800de52:	3714      	adds	r7, #20
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b087      	sub	sp, #28
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3350      	adds	r3, #80	; 0x50
 800de6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	4413      	add	r3, r2
 800de78:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	601a      	str	r2, [r3, #0]
}
 800de80:	bf00      	nop
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e01d      	b.n	800deda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d106      	bne.n	800deb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7f8 f856 	bl	8005f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2202      	movs	r2, #2
 800debc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3304      	adds	r3, #4
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f000 fc84 	bl	800e7d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
	...

0800dee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	689a      	ldr	r2, [r3, #8]
 800defa:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <HAL_TIM_Base_Start+0x50>)
 800defc:	4013      	ands	r3, r2
 800defe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b06      	cmp	r3, #6
 800df04:	d00b      	beq.n	800df1e <HAL_TIM_Base_Start+0x3a>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df0c:	d007      	beq.n	800df1e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f042 0201 	orr.w	r2, r2, #1
 800df1c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	00010007 	.word	0x00010007

0800df38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2202      	movs	r2, #2
 800df44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6a1a      	ldr	r2, [r3, #32]
 800df4e:	f241 1311 	movw	r3, #4369	; 0x1111
 800df52:	4013      	ands	r3, r2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10f      	bne.n	800df78 <HAL_TIM_Base_Stop+0x40>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6a1a      	ldr	r2, [r3, #32]
 800df5e:	f240 4344 	movw	r3, #1092	; 0x444
 800df62:	4013      	ands	r3, r2
 800df64:	2b00      	cmp	r3, #0
 800df66:	d107      	bne.n	800df78 <HAL_TIM_Base_Stop+0x40>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f022 0201 	bic.w	r2, r2, #1
 800df76:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
	...

0800df90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f042 0201 	orr.w	r2, r2, #1
 800dfa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	689a      	ldr	r2, [r3, #8]
 800dfae:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <HAL_TIM_Base_Start_IT+0x50>)
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b06      	cmp	r3, #6
 800dfb8:	d00b      	beq.n	800dfd2 <HAL_TIM_Base_Start_IT+0x42>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfc0:	d007      	beq.n	800dfd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f042 0201 	orr.w	r2, r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	00010007 	.word	0x00010007

0800dfe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e01d      	b.n	800e032 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 f815 	bl	800e03a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2202      	movs	r2, #2
 800e014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3304      	adds	r3, #4
 800e020:	4619      	mov	r1, r3
 800e022:	4610      	mov	r0, r2
 800e024:	f000 fbd8 	bl	800e7d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e042:	bf00      	nop
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
	...

0800e050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2201      	movs	r2, #1
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	4618      	mov	r0, r3
 800e064:	f000 ff36 	bl	800eed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a19      	ldr	r2, [pc, #100]	; (800e0d4 <HAL_TIM_PWM_Start+0x84>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d009      	beq.n	800e086 <HAL_TIM_PWM_Start+0x36>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a18      	ldr	r2, [pc, #96]	; (800e0d8 <HAL_TIM_PWM_Start+0x88>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d004      	beq.n	800e086 <HAL_TIM_PWM_Start+0x36>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a16      	ldr	r2, [pc, #88]	; (800e0dc <HAL_TIM_PWM_Start+0x8c>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d101      	bne.n	800e08a <HAL_TIM_PWM_Start+0x3a>
 800e086:	2301      	movs	r3, #1
 800e088:	e000      	b.n	800e08c <HAL_TIM_PWM_Start+0x3c>
 800e08a:	2300      	movs	r3, #0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e09e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	4b0e      	ldr	r3, [pc, #56]	; (800e0e0 <HAL_TIM_PWM_Start+0x90>)
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b06      	cmp	r3, #6
 800e0b0:	d00b      	beq.n	800e0ca <HAL_TIM_PWM_Start+0x7a>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0b8:	d007      	beq.n	800e0ca <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f042 0201 	orr.w	r2, r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	40012c00 	.word	0x40012c00
 800e0d8:	40014400 	.word	0x40014400
 800e0dc:	40014800 	.word	0x40014800
 800e0e0:	00010007 	.word	0x00010007

0800e0e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f000 feec 	bl	800eed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a25      	ldr	r2, [pc, #148]	; (800e198 <HAL_TIM_PWM_Stop+0xb4>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d009      	beq.n	800e11a <HAL_TIM_PWM_Stop+0x36>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a24      	ldr	r2, [pc, #144]	; (800e19c <HAL_TIM_PWM_Stop+0xb8>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d004      	beq.n	800e11a <HAL_TIM_PWM_Stop+0x36>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a22      	ldr	r2, [pc, #136]	; (800e1a0 <HAL_TIM_PWM_Stop+0xbc>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d101      	bne.n	800e11e <HAL_TIM_PWM_Stop+0x3a>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e000      	b.n	800e120 <HAL_TIM_PWM_Stop+0x3c>
 800e11e:	2300      	movs	r3, #0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d017      	beq.n	800e154 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6a1a      	ldr	r2, [r3, #32]
 800e12a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e12e:	4013      	ands	r3, r2
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10f      	bne.n	800e154 <HAL_TIM_PWM_Stop+0x70>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	6a1a      	ldr	r2, [r3, #32]
 800e13a:	f240 4344 	movw	r3, #1092	; 0x444
 800e13e:	4013      	ands	r3, r2
 800e140:	2b00      	cmp	r3, #0
 800e142:	d107      	bne.n	800e154 <HAL_TIM_PWM_Stop+0x70>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e152:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6a1a      	ldr	r2, [r3, #32]
 800e15a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e15e:	4013      	ands	r3, r2
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10f      	bne.n	800e184 <HAL_TIM_PWM_Stop+0xa0>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6a1a      	ldr	r2, [r3, #32]
 800e16a:	f240 4344 	movw	r3, #1092	; 0x444
 800e16e:	4013      	ands	r3, r2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d107      	bne.n	800e184 <HAL_TIM_PWM_Stop+0xa0>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f022 0201 	bic.w	r2, r2, #1
 800e182:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	40012c00 	.word	0x40012c00
 800e19c:	40014400 	.word	0x40014400
 800e1a0:	40014800 	.word	0x40014800

0800e1a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	f003 0302 	and.w	r3, r3, #2
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d122      	bne.n	800e200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	f003 0302 	and.w	r3, r3, #2
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d11b      	bne.n	800e200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f06f 0202 	mvn.w	r2, #2
 800e1d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	f003 0303 	and.w	r3, r3, #3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fad7 	bl	800e79a <HAL_TIM_IC_CaptureCallback>
 800e1ec:	e005      	b.n	800e1fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fac9 	bl	800e786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fada 	bl	800e7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	f003 0304 	and.w	r3, r3, #4
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d122      	bne.n	800e254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	f003 0304 	and.w	r3, r3, #4
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d11b      	bne.n	800e254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f06f 0204 	mvn.w	r2, #4
 800e224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2202      	movs	r2, #2
 800e22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e236:	2b00      	cmp	r3, #0
 800e238:	d003      	beq.n	800e242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 faad 	bl	800e79a <HAL_TIM_IC_CaptureCallback>
 800e240:	e005      	b.n	800e24e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fa9f 	bl	800e786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fab0 	bl	800e7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	f003 0308 	and.w	r3, r3, #8
 800e25e:	2b08      	cmp	r3, #8
 800e260:	d122      	bne.n	800e2a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f003 0308 	and.w	r3, r3, #8
 800e26c:	2b08      	cmp	r3, #8
 800e26e:	d11b      	bne.n	800e2a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f06f 0208 	mvn.w	r2, #8
 800e278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2204      	movs	r2, #4
 800e27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	f003 0303 	and.w	r3, r3, #3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d003      	beq.n	800e296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fa83 	bl	800e79a <HAL_TIM_IC_CaptureCallback>
 800e294:	e005      	b.n	800e2a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fa75 	bl	800e786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fa86 	bl	800e7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	f003 0310 	and.w	r3, r3, #16
 800e2b2:	2b10      	cmp	r3, #16
 800e2b4:	d122      	bne.n	800e2fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	2b10      	cmp	r3, #16
 800e2c2:	d11b      	bne.n	800e2fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f06f 0210 	mvn.w	r2, #16
 800e2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	69db      	ldr	r3, [r3, #28]
 800e2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fa59 	bl	800e79a <HAL_TIM_IC_CaptureCallback>
 800e2e8:	e005      	b.n	800e2f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fa4b 	bl	800e786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fa5c 	bl	800e7ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	2b01      	cmp	r3, #1
 800e308:	d10e      	bne.n	800e328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	2b01      	cmp	r3, #1
 800e316:	d107      	bne.n	800e328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f06f 0201 	mvn.w	r2, #1
 800e320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7f6 f8cc 	bl	80044c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e332:	2b80      	cmp	r3, #128	; 0x80
 800e334:	d10e      	bne.n	800e354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e340:	2b80      	cmp	r3, #128	; 0x80
 800e342:	d107      	bne.n	800e354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fe50 	bl	800eff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e362:	d10e      	bne.n	800e382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36e:	2b80      	cmp	r3, #128	; 0x80
 800e370:	d107      	bne.n	800e382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fe43 	bl	800f008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	691b      	ldr	r3, [r3, #16]
 800e388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e38c:	2b40      	cmp	r3, #64	; 0x40
 800e38e:	d10e      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39a:	2b40      	cmp	r3, #64	; 0x40
 800e39c:	d107      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fa0a 	bl	800e7c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f003 0320 	and.w	r3, r3, #32
 800e3b8:	2b20      	cmp	r3, #32
 800e3ba:	d10e      	bne.n	800e3da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b20      	cmp	r3, #32
 800e3c8:	d107      	bne.n	800e3da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f06f 0220 	mvn.w	r2, #32
 800e3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fe03 	bl	800efe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3da:	bf00      	nop
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
	...

0800e3e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d101      	bne.n	800e3fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e3fa:	2302      	movs	r3, #2
 800e3fc:	e105      	b.n	800e60a <HAL_TIM_PWM_ConfigChannel+0x226>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2202      	movs	r2, #2
 800e40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b14      	cmp	r3, #20
 800e412:	f200 80f0 	bhi.w	800e5f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800e416:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e471 	.word	0x0800e471
 800e420:	0800e5f7 	.word	0x0800e5f7
 800e424:	0800e5f7 	.word	0x0800e5f7
 800e428:	0800e5f7 	.word	0x0800e5f7
 800e42c:	0800e4b1 	.word	0x0800e4b1
 800e430:	0800e5f7 	.word	0x0800e5f7
 800e434:	0800e5f7 	.word	0x0800e5f7
 800e438:	0800e5f7 	.word	0x0800e5f7
 800e43c:	0800e4f3 	.word	0x0800e4f3
 800e440:	0800e5f7 	.word	0x0800e5f7
 800e444:	0800e5f7 	.word	0x0800e5f7
 800e448:	0800e5f7 	.word	0x0800e5f7
 800e44c:	0800e533 	.word	0x0800e533
 800e450:	0800e5f7 	.word	0x0800e5f7
 800e454:	0800e5f7 	.word	0x0800e5f7
 800e458:	0800e5f7 	.word	0x0800e5f7
 800e45c:	0800e575 	.word	0x0800e575
 800e460:	0800e5f7 	.word	0x0800e5f7
 800e464:	0800e5f7 	.word	0x0800e5f7
 800e468:	0800e5f7 	.word	0x0800e5f7
 800e46c:	0800e5b5 	.word	0x0800e5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fa12 	bl	800e8a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699a      	ldr	r2, [r3, #24]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0208 	orr.w	r2, r2, #8
 800e48a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0204 	bic.w	r2, r2, #4
 800e49a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6999      	ldr	r1, [r3, #24]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	619a      	str	r2, [r3, #24]
      break;
 800e4ae:	e0a3      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 fa6e 	bl	800e998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	699a      	ldr	r2, [r3, #24]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6999      	ldr	r1, [r3, #24]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	021a      	lsls	r2, r3, #8
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	619a      	str	r2, [r3, #24]
      break;
 800e4f0:	e082      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68b9      	ldr	r1, [r7, #8]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 fac7 	bl	800ea8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	69da      	ldr	r2, [r3, #28]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f042 0208 	orr.w	r2, r2, #8
 800e50c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69da      	ldr	r2, [r3, #28]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f022 0204 	bic.w	r2, r2, #4
 800e51c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	69d9      	ldr	r1, [r3, #28]
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	691a      	ldr	r2, [r3, #16]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	430a      	orrs	r2, r1
 800e52e:	61da      	str	r2, [r3, #28]
      break;
 800e530:	e062      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fb1f 	bl	800eb7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	69da      	ldr	r2, [r3, #28]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e54c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69da      	ldr	r2, [r3, #28]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e55c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69d9      	ldr	r1, [r3, #28]
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	021a      	lsls	r2, r3, #8
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	61da      	str	r2, [r3, #28]
      break;
 800e572:	e041      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 fb5c 	bl	800ec38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f042 0208 	orr.w	r2, r2, #8
 800e58e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f022 0204 	bic.w	r2, r2, #4
 800e59e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691a      	ldr	r2, [r3, #16]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e5b2:	e021      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68b9      	ldr	r1, [r7, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fb94 	bl	800ece8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	021a      	lsls	r2, r3, #8
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e5f4:	e000      	b.n	800e5f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e5f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop

0800e614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e624:	2b01      	cmp	r3, #1
 800e626:	d101      	bne.n	800e62c <HAL_TIM_ConfigClockSource+0x18>
 800e628:	2302      	movs	r3, #2
 800e62a:	e0a8      	b.n	800e77e <HAL_TIM_ConfigClockSource+0x16a>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e64a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e64e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b40      	cmp	r3, #64	; 0x40
 800e666:	d067      	beq.n	800e738 <HAL_TIM_ConfigClockSource+0x124>
 800e668:	2b40      	cmp	r3, #64	; 0x40
 800e66a:	d80b      	bhi.n	800e684 <HAL_TIM_ConfigClockSource+0x70>
 800e66c:	2b10      	cmp	r3, #16
 800e66e:	d073      	beq.n	800e758 <HAL_TIM_ConfigClockSource+0x144>
 800e670:	2b10      	cmp	r3, #16
 800e672:	d802      	bhi.n	800e67a <HAL_TIM_ConfigClockSource+0x66>
 800e674:	2b00      	cmp	r3, #0
 800e676:	d06f      	beq.n	800e758 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e678:	e078      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	d06c      	beq.n	800e758 <HAL_TIM_ConfigClockSource+0x144>
 800e67e:	2b30      	cmp	r3, #48	; 0x30
 800e680:	d06a      	beq.n	800e758 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800e682:	e073      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e684:	2b70      	cmp	r3, #112	; 0x70
 800e686:	d00d      	beq.n	800e6a4 <HAL_TIM_ConfigClockSource+0x90>
 800e688:	2b70      	cmp	r3, #112	; 0x70
 800e68a:	d804      	bhi.n	800e696 <HAL_TIM_ConfigClockSource+0x82>
 800e68c:	2b50      	cmp	r3, #80	; 0x50
 800e68e:	d033      	beq.n	800e6f8 <HAL_TIM_ConfigClockSource+0xe4>
 800e690:	2b60      	cmp	r3, #96	; 0x60
 800e692:	d041      	beq.n	800e718 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800e694:	e06a      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800e696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e69a:	d066      	beq.n	800e76a <HAL_TIM_ConfigClockSource+0x156>
 800e69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6a0:	d017      	beq.n	800e6d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800e6a2:	e063      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6818      	ldr	r0, [r3, #0]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	6899      	ldr	r1, [r3, #8]
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f000 fbee 	bl	800ee94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	609a      	str	r2, [r3, #8]
      break;
 800e6d0:	e04c      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	6899      	ldr	r1, [r3, #8]
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	f000 fbd7 	bl	800ee94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689a      	ldr	r2, [r3, #8]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6f4:	609a      	str	r2, [r3, #8]
      break;
 800e6f6:	e039      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6818      	ldr	r0, [r3, #0]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	6859      	ldr	r1, [r3, #4]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	461a      	mov	r2, r3
 800e706:	f000 fb49 	bl	800ed9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2150      	movs	r1, #80	; 0x50
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fba2 	bl	800ee5a <TIM_ITRx_SetConfig>
      break;
 800e716:	e029      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6818      	ldr	r0, [r3, #0]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	6859      	ldr	r1, [r3, #4]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	461a      	mov	r2, r3
 800e726:	f000 fb68 	bl	800edfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2160      	movs	r1, #96	; 0x60
 800e730:	4618      	mov	r0, r3
 800e732:	f000 fb92 	bl	800ee5a <TIM_ITRx_SetConfig>
      break;
 800e736:	e019      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6818      	ldr	r0, [r3, #0]
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	6859      	ldr	r1, [r3, #4]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	461a      	mov	r2, r3
 800e746:	f000 fb29 	bl	800ed9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2140      	movs	r1, #64	; 0x40
 800e750:	4618      	mov	r0, r3
 800e752:	f000 fb82 	bl	800ee5a <TIM_ITRx_SetConfig>
      break;
 800e756:	e009      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4619      	mov	r1, r3
 800e762:	4610      	mov	r0, r2
 800e764:	f000 fb79 	bl	800ee5a <TIM_ITRx_SetConfig>
      break;
 800e768:	e000      	b.n	800e76c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800e76a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e786:	b480      	push	{r7}
 800e788:	b083      	sub	sp, #12
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e78e:	bf00      	nop
 800e790:	370c      	adds	r7, #12
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr

0800e79a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e79a:	b480      	push	{r7}
 800e79c:	b083      	sub	sp, #12
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7a2:	bf00      	nop
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7ca:	bf00      	nop
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
	...

0800e7d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a2a      	ldr	r2, [pc, #168]	; (800e894 <TIM_Base_SetConfig+0xbc>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d003      	beq.n	800e7f8 <TIM_Base_SetConfig+0x20>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f6:	d108      	bne.n	800e80a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4313      	orrs	r3, r2
 800e808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a21      	ldr	r2, [pc, #132]	; (800e894 <TIM_Base_SetConfig+0xbc>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d00b      	beq.n	800e82a <TIM_Base_SetConfig+0x52>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e818:	d007      	beq.n	800e82a <TIM_Base_SetConfig+0x52>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a1e      	ldr	r2, [pc, #120]	; (800e898 <TIM_Base_SetConfig+0xc0>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d003      	beq.n	800e82a <TIM_Base_SetConfig+0x52>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4a1d      	ldr	r2, [pc, #116]	; (800e89c <TIM_Base_SetConfig+0xc4>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d108      	bne.n	800e83c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	4313      	orrs	r3, r2
 800e83a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	4313      	orrs	r3, r2
 800e848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	689a      	ldr	r2, [r3, #8]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a0c      	ldr	r2, [pc, #48]	; (800e894 <TIM_Base_SetConfig+0xbc>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d007      	beq.n	800e878 <TIM_Base_SetConfig+0xa0>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a0b      	ldr	r2, [pc, #44]	; (800e898 <TIM_Base_SetConfig+0xc0>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d003      	beq.n	800e878 <TIM_Base_SetConfig+0xa0>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <TIM_Base_SetConfig+0xc4>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d103      	bne.n	800e880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	691a      	ldr	r2, [r3, #16]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	615a      	str	r2, [r3, #20]
}
 800e886:	bf00      	nop
 800e888:	3714      	adds	r7, #20
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	40012c00 	.word	0x40012c00
 800e898:	40014400 	.word	0x40014400
 800e89c:	40014800 	.word	0x40014800

0800e8a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a1b      	ldr	r3, [r3, #32]
 800e8ae:	f023 0201 	bic.w	r2, r3, #1
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a1b      	ldr	r3, [r3, #32]
 800e8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	699b      	ldr	r3, [r3, #24]
 800e8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f023 0303 	bic.w	r3, r3, #3
 800e8da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f023 0302 	bic.w	r3, r3, #2
 800e8ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	697a      	ldr	r2, [r7, #20]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a24      	ldr	r2, [pc, #144]	; (800e98c <TIM_OC1_SetConfig+0xec>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d007      	beq.n	800e910 <TIM_OC1_SetConfig+0x70>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a23      	ldr	r2, [pc, #140]	; (800e990 <TIM_OC1_SetConfig+0xf0>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d003      	beq.n	800e910 <TIM_OC1_SetConfig+0x70>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a22      	ldr	r2, [pc, #136]	; (800e994 <TIM_OC1_SetConfig+0xf4>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d10c      	bne.n	800e92a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	f023 0308 	bic.w	r3, r3, #8
 800e916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	697a      	ldr	r2, [r7, #20]
 800e91e:	4313      	orrs	r3, r2
 800e920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	f023 0304 	bic.w	r3, r3, #4
 800e928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4a17      	ldr	r2, [pc, #92]	; (800e98c <TIM_OC1_SetConfig+0xec>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d007      	beq.n	800e942 <TIM_OC1_SetConfig+0xa2>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a17      	ldr	r2, [pc, #92]	; (800e994 <TIM_OC1_SetConfig+0xf4>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d003      	beq.n	800e942 <TIM_OC1_SetConfig+0xa2>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a14      	ldr	r2, [pc, #80]	; (800e990 <TIM_OC1_SetConfig+0xf0>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d111      	bne.n	800e966 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	4313      	orrs	r3, r2
 800e95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4313      	orrs	r3, r2
 800e964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	621a      	str	r2, [r3, #32]
}
 800e980:	bf00      	nop
 800e982:	371c      	adds	r7, #28
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr
 800e98c:	40012c00 	.word	0x40012c00
 800e990:	40014800 	.word	0x40014800
 800e994:	40014400 	.word	0x40014400

0800e998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	f023 0210 	bic.w	r2, r3, #16
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	021b      	lsls	r3, r3, #8
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f023 0320 	bic.w	r3, r3, #32
 800e9e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	011b      	lsls	r3, r3, #4
 800e9ee:	697a      	ldr	r2, [r7, #20]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a22      	ldr	r2, [pc, #136]	; (800ea80 <TIM_OC2_SetConfig+0xe8>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d10d      	bne.n	800ea18 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	697a      	ldr	r2, [r7, #20]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a19      	ldr	r2, [pc, #100]	; (800ea80 <TIM_OC2_SetConfig+0xe8>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d007      	beq.n	800ea30 <TIM_OC2_SetConfig+0x98>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a18      	ldr	r2, [pc, #96]	; (800ea84 <TIM_OC2_SetConfig+0xec>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d003      	beq.n	800ea30 <TIM_OC2_SetConfig+0x98>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <TIM_OC2_SetConfig+0xf0>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d113      	bne.n	800ea58 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	685a      	ldr	r2, [r3, #4]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	621a      	str	r2, [r3, #32]
}
 800ea72:	bf00      	nop
 800ea74:	371c      	adds	r7, #28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	40012c00 	.word	0x40012c00
 800ea84:	40014400 	.word	0x40014400
 800ea88:	40014800 	.word	0x40014800

0800ea8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b087      	sub	sp, #28
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eaba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f023 0303 	bic.w	r3, r3, #3
 800eac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	4313      	orrs	r3, r2
 800ead0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ead8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	021b      	lsls	r3, r3, #8
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a21      	ldr	r2, [pc, #132]	; (800eb70 <TIM_OC3_SetConfig+0xe4>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d10d      	bne.n	800eb0a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eaf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	021b      	lsls	r3, r3, #8
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a18      	ldr	r2, [pc, #96]	; (800eb70 <TIM_OC3_SetConfig+0xe4>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d007      	beq.n	800eb22 <TIM_OC3_SetConfig+0x96>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4a17      	ldr	r2, [pc, #92]	; (800eb74 <TIM_OC3_SetConfig+0xe8>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d003      	beq.n	800eb22 <TIM_OC3_SetConfig+0x96>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4a16      	ldr	r2, [pc, #88]	; (800eb78 <TIM_OC3_SetConfig+0xec>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d113      	bne.n	800eb4a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	011b      	lsls	r3, r3, #4
 800eb38:	693a      	ldr	r2, [r7, #16]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	011b      	lsls	r3, r3, #4
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	693a      	ldr	r2, [r7, #16]
 800eb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	697a      	ldr	r2, [r7, #20]
 800eb62:	621a      	str	r2, [r3, #32]
}
 800eb64:	bf00      	nop
 800eb66:	371c      	adds	r7, #28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	40012c00 	.word	0x40012c00
 800eb74:	40014400 	.word	0x40014400
 800eb78:	40014800 	.word	0x40014800

0800eb7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b087      	sub	sp, #28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	69db      	ldr	r3, [r3, #28]
 800eba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	031b      	lsls	r3, r3, #12
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a14      	ldr	r2, [pc, #80]	; (800ec2c <TIM_OC4_SetConfig+0xb0>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d007      	beq.n	800ebf0 <TIM_OC4_SetConfig+0x74>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a13      	ldr	r2, [pc, #76]	; (800ec30 <TIM_OC4_SetConfig+0xb4>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d003      	beq.n	800ebf0 <TIM_OC4_SetConfig+0x74>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a12      	ldr	r2, [pc, #72]	; (800ec34 <TIM_OC4_SetConfig+0xb8>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d109      	bne.n	800ec04 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	695b      	ldr	r3, [r3, #20]
 800ebfc:	019b      	lsls	r3, r3, #6
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	693a      	ldr	r2, [r7, #16]
 800ec1c:	621a      	str	r2, [r3, #32]
}
 800ec1e:	bf00      	nop
 800ec20:	371c      	adds	r7, #28
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	40012c00 	.word	0x40012c00
 800ec30:	40014400 	.word	0x40014400
 800ec34:	40014800 	.word	0x40014800

0800ec38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b087      	sub	sp, #28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ec7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	041b      	lsls	r3, r3, #16
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a13      	ldr	r2, [pc, #76]	; (800ecdc <TIM_OC5_SetConfig+0xa4>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d007      	beq.n	800eca2 <TIM_OC5_SetConfig+0x6a>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a12      	ldr	r2, [pc, #72]	; (800ece0 <TIM_OC5_SetConfig+0xa8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d003      	beq.n	800eca2 <TIM_OC5_SetConfig+0x6a>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a11      	ldr	r2, [pc, #68]	; (800ece4 <TIM_OC5_SetConfig+0xac>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d109      	bne.n	800ecb6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eca8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	021b      	lsls	r3, r3, #8
 800ecb0:	697a      	ldr	r2, [r7, #20]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	697a      	ldr	r2, [r7, #20]
 800ecba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	621a      	str	r2, [r3, #32]
}
 800ecd0:	bf00      	nop
 800ecd2:	371c      	adds	r7, #28
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	40012c00 	.word	0x40012c00
 800ece0:	40014400 	.word	0x40014400
 800ece4:	40014800 	.word	0x40014800

0800ece8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	021b      	lsls	r3, r3, #8
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	051b      	lsls	r3, r3, #20
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a14      	ldr	r2, [pc, #80]	; (800ed90 <TIM_OC6_SetConfig+0xa8>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d007      	beq.n	800ed54 <TIM_OC6_SetConfig+0x6c>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4a13      	ldr	r2, [pc, #76]	; (800ed94 <TIM_OC6_SetConfig+0xac>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d003      	beq.n	800ed54 <TIM_OC6_SetConfig+0x6c>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a12      	ldr	r2, [pc, #72]	; (800ed98 <TIM_OC6_SetConfig+0xb0>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d109      	bne.n	800ed68 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ed5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	029b      	lsls	r3, r3, #10
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	685a      	ldr	r2, [r3, #4]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	621a      	str	r2, [r3, #32]
}
 800ed82:	bf00      	nop
 800ed84:	371c      	adds	r7, #28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	40012c00 	.word	0x40012c00
 800ed94:	40014400 	.word	0x40014400
 800ed98:	40014800 	.word	0x40014800

0800ed9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6a1b      	ldr	r3, [r3, #32]
 800edac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	f023 0201 	bic.w	r2, r3, #1
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	699b      	ldr	r3, [r3, #24]
 800edbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	011b      	lsls	r3, r3, #4
 800edcc:	693a      	ldr	r2, [r7, #16]
 800edce:	4313      	orrs	r3, r2
 800edd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f023 030a 	bic.w	r3, r3, #10
 800edd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	4313      	orrs	r3, r2
 800ede0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	693a      	ldr	r2, [r7, #16]
 800ede6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	621a      	str	r2, [r3, #32]
}
 800edee:	bf00      	nop
 800edf0:	371c      	adds	r7, #28
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b087      	sub	sp, #28
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	60f8      	str	r0, [r7, #12]
 800ee02:	60b9      	str	r1, [r7, #8]
 800ee04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	f023 0210 	bic.w	r2, r3, #16
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	031b      	lsls	r3, r3, #12
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ee36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	011b      	lsls	r3, r3, #4
 800ee3c:	693a      	ldr	r2, [r7, #16]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	693a      	ldr	r2, [r7, #16]
 800ee4c:	621a      	str	r2, [r3, #32]
}
 800ee4e:	bf00      	nop
 800ee50:	371c      	adds	r7, #28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr

0800ee5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee5a:	b480      	push	{r7}
 800ee5c:	b085      	sub	sp, #20
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
 800ee62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ee70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	f043 0307 	orr.w	r3, r3, #7
 800ee80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	609a      	str	r2, [r3, #8]
}
 800ee88:	bf00      	nop
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eeae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	021a      	lsls	r2, r3, #8
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	609a      	str	r2, [r3, #8]
}
 800eec8:	bf00      	nop
 800eeca:	371c      	adds	r7, #28
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	f003 031f 	and.w	r3, r3, #31
 800eee6:	2201      	movs	r2, #1
 800eee8:	fa02 f303 	lsl.w	r3, r2, r3
 800eeec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6a1a      	ldr	r2, [r3, #32]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	43db      	mvns	r3, r3
 800eef6:	401a      	ands	r2, r3
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6a1a      	ldr	r2, [r3, #32]
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	f003 031f 	and.w	r3, r3, #31
 800ef06:	6879      	ldr	r1, [r7, #4]
 800ef08:	fa01 f303 	lsl.w	r3, r1, r3
 800ef0c:	431a      	orrs	r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	621a      	str	r2, [r3, #32]
}
 800ef12:	bf00      	nop
 800ef14:	371c      	adds	r7, #28
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
	...

0800ef20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d101      	bne.n	800ef38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef34:	2302      	movs	r3, #2
 800ef36:	e04a      	b.n	800efce <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2202      	movs	r2, #2
 800ef44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a1f      	ldr	r2, [pc, #124]	; (800efdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d108      	bne.n	800ef74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ef68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a12      	ldr	r2, [pc, #72]	; (800efdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d004      	beq.n	800efa2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efa0:	d10c      	bne.n	800efbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	4313      	orrs	r3, r2
 800efb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	40012c00 	.word	0x40012c00

0800efe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f024:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f028:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f030:	b29a      	uxth	r2, r3
 800f032:	89fb      	ldrh	r3, [r7, #14]
 800f034:	4313      	orrs	r3, r2
 800f036:	b29a      	uxth	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f054:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f058:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f060:	b29b      	uxth	r3, r3
 800f062:	b21a      	sxth	r2, r3
 800f064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f068:	43db      	mvns	r3, r3
 800f06a:	b21b      	sxth	r3, r3
 800f06c:	4013      	ands	r3, r2
 800f06e:	b21b      	sxth	r3, r3
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f086:	b084      	sub	sp, #16
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	f107 0014 	add.w	r0, r7, #20
 800f094:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff ffaf 	bl	800f01c <USB_EnableGlobalInt>

  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0ca:	b004      	add	sp, #16
 800f0cc:	4770      	bx	lr
	...

0800f0d0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f0d0:	b490      	push	{r4, r7}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4413      	add	r3, r2
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0f4:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	78db      	ldrb	r3, [r3, #3]
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d819      	bhi.n	800f132 <USB_ActivateEndpoint+0x62>
 800f0fe:	a201      	add	r2, pc, #4	; (adr r2, 800f104 <USB_ActivateEndpoint+0x34>)
 800f100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f104:	0800f115 	.word	0x0800f115
 800f108:	0800f129 	.word	0x0800f129
 800f10c:	0800f139 	.word	0x0800f139
 800f110:	0800f11f 	.word	0x0800f11f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f114:	8abb      	ldrh	r3, [r7, #20]
 800f116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f11a:	82bb      	strh	r3, [r7, #20]
      break;
 800f11c:	e00d      	b.n	800f13a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f11e:	8abb      	ldrh	r3, [r7, #20]
 800f120:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f124:	82bb      	strh	r3, [r7, #20]
      break;
 800f126:	e008      	b.n	800f13a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f128:	8abb      	ldrh	r3, [r7, #20]
 800f12a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f12e:	82bb      	strh	r3, [r7, #20]
      break;
 800f130:	e003      	b.n	800f13a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800f132:	2301      	movs	r3, #1
 800f134:	75fb      	strb	r3, [r7, #23]
      break;
 800f136:	e000      	b.n	800f13a <USB_ActivateEndpoint+0x6a>
      break;
 800f138:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	441a      	add	r2, r3
 800f144:	8abb      	ldrh	r3, [r7, #20]
 800f146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f14a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f156:	b29b      	uxth	r3, r3
 800f158:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	b29b      	uxth	r3, r3
 800f168:	b21b      	sxth	r3, r3
 800f16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f172:	b21a      	sxth	r2, r3
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	b21b      	sxth	r3, r3
 800f17a:	4313      	orrs	r3, r2
 800f17c:	b21b      	sxth	r3, r3
 800f17e:	b29c      	uxth	r4, r3
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	441a      	add	r2, r3
 800f18a:	4b87      	ldr	r3, [pc, #540]	; (800f3a8 <USB_ActivateEndpoint+0x2d8>)
 800f18c:	4323      	orrs	r3, r4
 800f18e:	b29b      	uxth	r3, r3
 800f190:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	7b1b      	ldrb	r3, [r3, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f040 810c 	bne.w	800f3b4 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	785b      	ldrb	r3, [r3, #1]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d067      	beq.n	800f274 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f1a4:	687c      	ldr	r4, [r7, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	441c      	add	r4, r3
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	4423      	add	r3, r4
 800f1b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1bc:	461c      	mov	r4, r3
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	88db      	ldrh	r3, [r3, #6]
 800f1c2:	085b      	lsrs	r3, r3, #1
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4413      	add	r3, r2
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29c      	uxth	r4, r3
 800f1da:	4623      	mov	r3, r4
 800f1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d014      	beq.n	800f20e <USB_ActivateEndpoint+0x13e>
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4413      	add	r3, r2
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1fa:	b29c      	uxth	r4, r3
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	441a      	add	r2, r3
 800f206:	4b69      	ldr	r3, [pc, #420]	; (800f3ac <USB_ActivateEndpoint+0x2dc>)
 800f208:	4323      	orrs	r3, r4
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	78db      	ldrb	r3, [r3, #3]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d018      	beq.n	800f248 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4413      	add	r3, r2
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	b29b      	uxth	r3, r3
 800f224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f22c:	b29c      	uxth	r4, r3
 800f22e:	f084 0320 	eor.w	r3, r4, #32
 800f232:	b29c      	uxth	r4, r3
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	441a      	add	r2, r3
 800f23e:	4b5a      	ldr	r3, [pc, #360]	; (800f3a8 <USB_ActivateEndpoint+0x2d8>)
 800f240:	4323      	orrs	r3, r4
 800f242:	b29b      	uxth	r3, r3
 800f244:	8013      	strh	r3, [r2, #0]
 800f246:	e225      	b.n	800f694 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	b29b      	uxth	r3, r3
 800f256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f25e:	b29c      	uxth	r4, r3
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	441a      	add	r2, r3
 800f26a:	4b4f      	ldr	r3, [pc, #316]	; (800f3a8 <USB_ActivateEndpoint+0x2d8>)
 800f26c:	4323      	orrs	r3, r4
 800f26e:	b29b      	uxth	r3, r3
 800f270:	8013      	strh	r3, [r2, #0]
 800f272:	e20f      	b.n	800f694 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f274:	687c      	ldr	r4, [r7, #4]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	441c      	add	r4, r3
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	4423      	add	r3, r4
 800f288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f28c:	461c      	mov	r4, r3
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	88db      	ldrh	r3, [r3, #6]
 800f292:	085b      	lsrs	r3, r3, #1
 800f294:	b29b      	uxth	r3, r3
 800f296:	005b      	lsls	r3, r3, #1
 800f298:	b29b      	uxth	r3, r3
 800f29a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f29c:	687c      	ldr	r4, [r7, #4]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	441c      	add	r4, r3
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	4423      	add	r3, r4
 800f2b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f2b4:	60fb      	str	r3, [r7, #12]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d110      	bne.n	800f2e0 <USB_ActivateEndpoint+0x210>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	801a      	strh	r2, [r3, #0]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	801a      	strh	r2, [r3, #0]
 800f2de:	e026      	b.n	800f32e <USB_ActivateEndpoint+0x25e>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	2b3d      	cmp	r3, #61	; 0x3d
 800f2e6:	d813      	bhi.n	800f310 <USB_ActivateEndpoint+0x240>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	691b      	ldr	r3, [r3, #16]
 800f2ec:	085b      	lsrs	r3, r3, #1
 800f2ee:	613b      	str	r3, [r7, #16]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <USB_ActivateEndpoint+0x232>
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	3301      	adds	r3, #1
 800f300:	613b      	str	r3, [r7, #16]
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	b29b      	uxth	r3, r3
 800f306:	029b      	lsls	r3, r3, #10
 800f308:	b29a      	uxth	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	801a      	strh	r2, [r3, #0]
 800f30e:	e00e      	b.n	800f32e <USB_ActivateEndpoint+0x25e>
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	095b      	lsrs	r3, r3, #5
 800f316:	613b      	str	r3, [r7, #16]
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	029b      	lsls	r3, r3, #10
 800f31e:	b29b      	uxth	r3, r3
 800f320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f328:	b29a      	uxth	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	4413      	add	r3, r2
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	b29c      	uxth	r4, r3
 800f33c:	4623      	mov	r3, r4
 800f33e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f342:	2b00      	cmp	r3, #0
 800f344:	d014      	beq.n	800f370 <USB_ActivateEndpoint+0x2a0>
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4413      	add	r3, r2
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	b29b      	uxth	r3, r3
 800f354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f35c:	b29c      	uxth	r4, r3
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	441a      	add	r2, r3
 800f368:	4b11      	ldr	r3, [pc, #68]	; (800f3b0 <USB_ActivateEndpoint+0x2e0>)
 800f36a:	4323      	orrs	r3, r4
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f386:	b29c      	uxth	r4, r3
 800f388:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f38c:	b29c      	uxth	r4, r3
 800f38e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f392:	b29c      	uxth	r4, r3
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	441a      	add	r2, r3
 800f39e:	4b02      	ldr	r3, [pc, #8]	; (800f3a8 <USB_ActivateEndpoint+0x2d8>)
 800f3a0:	4323      	orrs	r3, r4
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	8013      	strh	r3, [r2, #0]
 800f3a6:	e175      	b.n	800f694 <USB_ActivateEndpoint+0x5c4>
 800f3a8:	ffff8080 	.word	0xffff8080
 800f3ac:	ffff80c0 	.word	0xffff80c0
 800f3b0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4413      	add	r3, r2
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ca:	b29c      	uxth	r4, r3
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	441a      	add	r2, r3
 800f3d6:	4b96      	ldr	r3, [pc, #600]	; (800f630 <USB_ActivateEndpoint+0x560>)
 800f3d8:	4323      	orrs	r3, r4
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f3de:	687c      	ldr	r4, [r7, #4]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	441c      	add	r4, r3
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	4423      	add	r3, r4
 800f3f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3f6:	461c      	mov	r4, r3
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	891b      	ldrh	r3, [r3, #8]
 800f3fc:	085b      	lsrs	r3, r3, #1
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	b29b      	uxth	r3, r3
 800f404:	8023      	strh	r3, [r4, #0]
 800f406:	687c      	ldr	r4, [r7, #4]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f40e:	b29b      	uxth	r3, r3
 800f410:	441c      	add	r4, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	4423      	add	r3, r4
 800f41a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f41e:	461c      	mov	r4, r3
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	895b      	ldrh	r3, [r3, #10]
 800f424:	085b      	lsrs	r3, r3, #1
 800f426:	b29b      	uxth	r3, r3
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	785b      	ldrb	r3, [r3, #1]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f040 8088 	bne.w	800f548 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	b29c      	uxth	r4, r3
 800f446:	4623      	mov	r3, r4
 800f448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d014      	beq.n	800f47a <USB_ActivateEndpoint+0x3aa>
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4413      	add	r3, r2
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f466:	b29c      	uxth	r4, r3
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	441a      	add	r2, r3
 800f472:	4b70      	ldr	r3, [pc, #448]	; (800f634 <USB_ActivateEndpoint+0x564>)
 800f474:	4323      	orrs	r3, r4
 800f476:	b29b      	uxth	r3, r3
 800f478:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	b29c      	uxth	r4, r3
 800f488:	4623      	mov	r3, r4
 800f48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d014      	beq.n	800f4bc <USB_ActivateEndpoint+0x3ec>
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a8:	b29c      	uxth	r4, r3
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	441a      	add	r2, r3
 800f4b4:	4b60      	ldr	r3, [pc, #384]	; (800f638 <USB_ActivateEndpoint+0x568>)
 800f4b6:	4323      	orrs	r3, r4
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4d2:	b29c      	uxth	r4, r3
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	441a      	add	r2, r3
 800f4de:	4b56      	ldr	r3, [pc, #344]	; (800f638 <USB_ActivateEndpoint+0x568>)
 800f4e0:	4323      	orrs	r3, r4
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4fc:	b29c      	uxth	r4, r3
 800f4fe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800f502:	b29c      	uxth	r4, r3
 800f504:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800f508:	b29c      	uxth	r4, r3
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	441a      	add	r2, r3
 800f514:	4b49      	ldr	r3, [pc, #292]	; (800f63c <USB_ActivateEndpoint+0x56c>)
 800f516:	4323      	orrs	r3, r4
 800f518:	b29b      	uxth	r3, r3
 800f51a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f52e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f532:	b29c      	uxth	r4, r3
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	441a      	add	r2, r3
 800f53e:	4b3f      	ldr	r3, [pc, #252]	; (800f63c <USB_ActivateEndpoint+0x56c>)
 800f540:	4323      	orrs	r3, r4
 800f542:	b29b      	uxth	r3, r3
 800f544:	8013      	strh	r3, [r2, #0]
 800f546:	e0a5      	b.n	800f694 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	b29c      	uxth	r4, r3
 800f556:	4623      	mov	r3, r4
 800f558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d014      	beq.n	800f58a <USB_ActivateEndpoint+0x4ba>
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	881b      	ldrh	r3, [r3, #0]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f576:	b29c      	uxth	r4, r3
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	441a      	add	r2, r3
 800f582:	4b2c      	ldr	r3, [pc, #176]	; (800f634 <USB_ActivateEndpoint+0x564>)
 800f584:	4323      	orrs	r3, r4
 800f586:	b29b      	uxth	r3, r3
 800f588:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	b29c      	uxth	r4, r3
 800f598:	4623      	mov	r3, r4
 800f59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d014      	beq.n	800f5cc <USB_ActivateEndpoint+0x4fc>
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5b8:	b29c      	uxth	r4, r3
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	441a      	add	r2, r3
 800f5c4:	4b1c      	ldr	r3, [pc, #112]	; (800f638 <USB_ActivateEndpoint+0x568>)
 800f5c6:	4323      	orrs	r3, r4
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	4413      	add	r3, r2
 800f5d6:	881b      	ldrh	r3, [r3, #0]
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5e2:	b29c      	uxth	r4, r3
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	441a      	add	r2, r3
 800f5ee:	4b11      	ldr	r3, [pc, #68]	; (800f634 <USB_ActivateEndpoint+0x564>)
 800f5f0:	4323      	orrs	r3, r4
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	78db      	ldrb	r3, [r3, #3]
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d020      	beq.n	800f640 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f614:	b29c      	uxth	r4, r3
 800f616:	f084 0320 	eor.w	r3, r4, #32
 800f61a:	b29c      	uxth	r4, r3
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	441a      	add	r2, r3
 800f626:	4b05      	ldr	r3, [pc, #20]	; (800f63c <USB_ActivateEndpoint+0x56c>)
 800f628:	4323      	orrs	r3, r4
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	8013      	strh	r3, [r2, #0]
 800f62e:	e01c      	b.n	800f66a <USB_ActivateEndpoint+0x59a>
 800f630:	ffff8180 	.word	0xffff8180
 800f634:	ffffc080 	.word	0xffffc080
 800f638:	ffff80c0 	.word	0xffff80c0
 800f63c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	4413      	add	r3, r2
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f656:	b29c      	uxth	r4, r3
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	441a      	add	r2, r3
 800f662:	4b0f      	ldr	r3, [pc, #60]	; (800f6a0 <USB_ActivateEndpoint+0x5d0>)
 800f664:	4323      	orrs	r3, r4
 800f666:	b29b      	uxth	r3, r3
 800f668:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	4413      	add	r3, r2
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29b      	uxth	r3, r3
 800f678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f67c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f680:	b29c      	uxth	r4, r3
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	441a      	add	r2, r3
 800f68c:	4b04      	ldr	r3, [pc, #16]	; (800f6a0 <USB_ActivateEndpoint+0x5d0>)
 800f68e:	4323      	orrs	r3, r4
 800f690:	b29b      	uxth	r3, r3
 800f692:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800f694:	7dfb      	ldrb	r3, [r7, #23]
}
 800f696:	4618      	mov	r0, r3
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bc90      	pop	{r4, r7}
 800f69e:	4770      	bx	lr
 800f6a0:	ffff8080 	.word	0xffff8080

0800f6a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f6a4:	b490      	push	{r4, r7}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	7b1b      	ldrb	r3, [r3, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d171      	bne.n	800f79a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d036      	beq.n	800f72c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	b29c      	uxth	r4, r3
 800f6cc:	4623      	mov	r3, r4
 800f6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d014      	beq.n	800f700 <USB_DeactivateEndpoint+0x5c>
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4413      	add	r3, r2
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6ec:	b29c      	uxth	r4, r3
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	441a      	add	r2, r3
 800f6f8:	4b6b      	ldr	r3, [pc, #428]	; (800f8a8 <USB_DeactivateEndpoint+0x204>)
 800f6fa:	4323      	orrs	r3, r4
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	4413      	add	r3, r2
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f716:	b29c      	uxth	r4, r3
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	441a      	add	r2, r3
 800f722:	4b62      	ldr	r3, [pc, #392]	; (800f8ac <USB_DeactivateEndpoint+0x208>)
 800f724:	4323      	orrs	r3, r4
 800f726:	b29b      	uxth	r3, r3
 800f728:	8013      	strh	r3, [r2, #0]
 800f72a:	e144      	b.n	800f9b6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	b29c      	uxth	r4, r3
 800f73a:	4623      	mov	r3, r4
 800f73c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f740:	2b00      	cmp	r3, #0
 800f742:	d014      	beq.n	800f76e <USB_DeactivateEndpoint+0xca>
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4413      	add	r3, r2
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	b29b      	uxth	r3, r3
 800f752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f75a:	b29c      	uxth	r4, r3
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	441a      	add	r2, r3
 800f766:	4b52      	ldr	r3, [pc, #328]	; (800f8b0 <USB_DeactivateEndpoint+0x20c>)
 800f768:	4323      	orrs	r3, r4
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f784:	b29c      	uxth	r4, r3
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	441a      	add	r2, r3
 800f790:	4b46      	ldr	r3, [pc, #280]	; (800f8ac <USB_DeactivateEndpoint+0x208>)
 800f792:	4323      	orrs	r3, r4
 800f794:	b29b      	uxth	r3, r3
 800f796:	8013      	strh	r3, [r2, #0]
 800f798:	e10d      	b.n	800f9b6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f040 8088 	bne.w	800f8b4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4413      	add	r3, r2
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	b29c      	uxth	r4, r3
 800f7b2:	4623      	mov	r3, r4
 800f7b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d014      	beq.n	800f7e6 <USB_DeactivateEndpoint+0x142>
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	4413      	add	r3, r2
 800f7c6:	881b      	ldrh	r3, [r3, #0]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7d2:	b29c      	uxth	r4, r3
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	441a      	add	r2, r3
 800f7de:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <USB_DeactivateEndpoint+0x20c>)
 800f7e0:	4323      	orrs	r3, r4
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	b29c      	uxth	r4, r3
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d014      	beq.n	800f828 <USB_DeactivateEndpoint+0x184>
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f814:	b29c      	uxth	r4, r3
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	441a      	add	r2, r3
 800f820:	4b21      	ldr	r3, [pc, #132]	; (800f8a8 <USB_DeactivateEndpoint+0x204>)
 800f822:	4323      	orrs	r3, r4
 800f824:	b29b      	uxth	r3, r3
 800f826:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	b29b      	uxth	r3, r3
 800f836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f83e:	b29c      	uxth	r4, r3
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	441a      	add	r2, r3
 800f84a:	4b17      	ldr	r3, [pc, #92]	; (800f8a8 <USB_DeactivateEndpoint+0x204>)
 800f84c:	4323      	orrs	r3, r4
 800f84e:	b29b      	uxth	r3, r3
 800f850:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	881b      	ldrh	r3, [r3, #0]
 800f85e:	b29b      	uxth	r3, r3
 800f860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f868:	b29c      	uxth	r4, r3
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	441a      	add	r2, r3
 800f874:	4b0d      	ldr	r3, [pc, #52]	; (800f8ac <USB_DeactivateEndpoint+0x208>)
 800f876:	4323      	orrs	r3, r4
 800f878:	b29b      	uxth	r3, r3
 800f87a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	881b      	ldrh	r3, [r3, #0]
 800f888:	b29b      	uxth	r3, r3
 800f88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f88e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f892:	b29c      	uxth	r4, r3
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	441a      	add	r2, r3
 800f89e:	4b03      	ldr	r3, [pc, #12]	; (800f8ac <USB_DeactivateEndpoint+0x208>)
 800f8a0:	4323      	orrs	r3, r4
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	8013      	strh	r3, [r2, #0]
 800f8a6:	e086      	b.n	800f9b6 <USB_DeactivateEndpoint+0x312>
 800f8a8:	ffff80c0 	.word	0xffff80c0
 800f8ac:	ffff8080 	.word	0xffff8080
 800f8b0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	881b      	ldrh	r3, [r3, #0]
 800f8c0:	b29c      	uxth	r4, r3
 800f8c2:	4623      	mov	r3, r4
 800f8c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d014      	beq.n	800f8f6 <USB_DeactivateEndpoint+0x252>
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4413      	add	r3, r2
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e2:	b29c      	uxth	r4, r3
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	441a      	add	r2, r3
 800f8ee:	4b35      	ldr	r3, [pc, #212]	; (800f9c4 <USB_DeactivateEndpoint+0x320>)
 800f8f0:	4323      	orrs	r3, r4
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	b29c      	uxth	r4, r3
 800f904:	4623      	mov	r3, r4
 800f906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d014      	beq.n	800f938 <USB_DeactivateEndpoint+0x294>
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4413      	add	r3, r2
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f924:	b29c      	uxth	r4, r3
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	441a      	add	r2, r3
 800f930:	4b25      	ldr	r3, [pc, #148]	; (800f9c8 <USB_DeactivateEndpoint+0x324>)
 800f932:	4323      	orrs	r3, r4
 800f934:	b29b      	uxth	r3, r3
 800f936:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	b29b      	uxth	r3, r3
 800f946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f94a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f94e:	b29c      	uxth	r4, r3
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	441a      	add	r2, r3
 800f95a:	4b1a      	ldr	r3, [pc, #104]	; (800f9c4 <USB_DeactivateEndpoint+0x320>)
 800f95c:	4323      	orrs	r3, r4
 800f95e:	b29b      	uxth	r3, r3
 800f960:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	b29b      	uxth	r3, r3
 800f970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f978:	b29c      	uxth	r4, r3
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	441a      	add	r2, r3
 800f984:	4b11      	ldr	r3, [pc, #68]	; (800f9cc <USB_DeactivateEndpoint+0x328>)
 800f986:	4323      	orrs	r3, r4
 800f988:	b29b      	uxth	r3, r3
 800f98a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	4413      	add	r3, r2
 800f996:	881b      	ldrh	r3, [r3, #0]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9a2:	b29c      	uxth	r4, r3
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	441a      	add	r2, r3
 800f9ae:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <USB_DeactivateEndpoint+0x328>)
 800f9b0:	4323      	orrs	r3, r4
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bc90      	pop	{r4, r7}
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	ffffc080 	.word	0xffffc080
 800f9c8:	ffff80c0 	.word	0xffff80c0
 800f9cc:	ffff8080 	.word	0xffff8080

0800f9d0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f9d0:	b590      	push	{r4, r7, lr}
 800f9d2:	b095      	sub	sp, #84	; 0x54
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	785b      	ldrb	r3, [r3, #1]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	f040 815d 	bne.w	800fc9e <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	699a      	ldr	r2, [r3, #24]
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	691b      	ldr	r3, [r3, #16]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d909      	bls.n	800fa04 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	699a      	ldr	r2, [r3, #24]
 800f9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9fc:	1ad2      	subs	r2, r2, r3
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	619a      	str	r2, [r3, #24]
 800fa02:	e005      	b.n	800fa10 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	699b      	ldr	r3, [r3, #24]
 800fa08:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	7b1b      	ldrb	r3, [r3, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d11a      	bne.n	800fa4e <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	6959      	ldr	r1, [r3, #20]
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	88da      	ldrh	r2, [r3, #6]
 800fa20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 fb9c 	bl	8010162 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fa2a:	687c      	ldr	r4, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	441c      	add	r4, r3
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	00db      	lsls	r3, r3, #3
 800fa3c:	4423      	add	r3, r4
 800fa3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	801a      	strh	r2, [r3, #0]
 800fa4c:	e10b      	b.n	800fc66 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d062      	beq.n	800fb2a <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fa64:	687c      	ldr	r4, [r7, #4]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	785b      	ldrb	r3, [r3, #1]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d144      	bne.n	800faf8 <USB_EPStartXfer+0x128>
 800fa6e:	687c      	ldr	r4, [r7, #4]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	441c      	add	r4, r3
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	4423      	add	r3, r4
 800fa82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fa86:	613b      	str	r3, [r7, #16]
 800fa88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d110      	bne.n	800fab0 <USB_EPStartXfer+0xe0>
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	801a      	strh	r2, [r3, #0]
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800faa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	801a      	strh	r2, [r3, #0]
 800faae:	e037      	b.n	800fb20 <USB_EPStartXfer+0x150>
 800fab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fab2:	2b3d      	cmp	r3, #61	; 0x3d
 800fab4:	d811      	bhi.n	800fada <USB_EPStartXfer+0x10a>
 800fab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fab8:	085b      	lsrs	r3, r3, #1
 800faba:	647b      	str	r3, [r7, #68]	; 0x44
 800fabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fabe:	f003 0301 	and.w	r3, r3, #1
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <USB_EPStartXfer+0xfc>
 800fac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac8:	3301      	adds	r3, #1
 800faca:	647b      	str	r3, [r7, #68]	; 0x44
 800facc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800face:	b29b      	uxth	r3, r3
 800fad0:	029b      	lsls	r3, r3, #10
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	801a      	strh	r2, [r3, #0]
 800fad8:	e022      	b.n	800fb20 <USB_EPStartXfer+0x150>
 800fada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fadc:	095b      	lsrs	r3, r3, #5
 800fade:	647b      	str	r3, [r7, #68]	; 0x44
 800fae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	029b      	lsls	r3, r3, #10
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800faec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	801a      	strh	r2, [r3, #0]
 800faf6:	e013      	b.n	800fb20 <USB_EPStartXfer+0x150>
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	785b      	ldrb	r3, [r3, #1]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d10f      	bne.n	800fb20 <USB_EPStartXfer+0x150>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	441c      	add	r4, r3
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	00db      	lsls	r3, r3, #3
 800fb10:	4423      	add	r3, r4
 800fb12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb16:	617b      	str	r3, [r7, #20]
 800fb18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	895b      	ldrh	r3, [r3, #10]
 800fb24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800fb28:	e061      	b.n	800fbee <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	785b      	ldrb	r3, [r3, #1]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d144      	bne.n	800fbbc <USB_EPStartXfer+0x1ec>
 800fb32:	687c      	ldr	r4, [r7, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	441c      	add	r4, r3
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	00db      	lsls	r3, r3, #3
 800fb44:	4423      	add	r3, r4
 800fb46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fb4a:	61bb      	str	r3, [r7, #24]
 800fb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d110      	bne.n	800fb74 <USB_EPStartXfer+0x1a4>
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	801a      	strh	r2, [r3, #0]
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	801a      	strh	r2, [r3, #0]
 800fb72:	e038      	b.n	800fbe6 <USB_EPStartXfer+0x216>
 800fb74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb76:	2b3d      	cmp	r3, #61	; 0x3d
 800fb78:	d811      	bhi.n	800fb9e <USB_EPStartXfer+0x1ce>
 800fb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb7c:	085b      	lsrs	r3, r3, #1
 800fb7e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb82:	f003 0301 	and.w	r3, r3, #1
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d002      	beq.n	800fb90 <USB_EPStartXfer+0x1c0>
 800fb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	029b      	lsls	r3, r3, #10
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	801a      	strh	r2, [r3, #0]
 800fb9c:	e023      	b.n	800fbe6 <USB_EPStartXfer+0x216>
 800fb9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fba0:	095b      	lsrs	r3, r3, #5
 800fba2:	643b      	str	r3, [r7, #64]	; 0x40
 800fba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	029b      	lsls	r3, r3, #10
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	801a      	strh	r2, [r3, #0]
 800fbba:	e014      	b.n	800fbe6 <USB_EPStartXfer+0x216>
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	785b      	ldrb	r3, [r3, #1]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d110      	bne.n	800fbe6 <USB_EPStartXfer+0x216>
 800fbc4:	687c      	ldr	r4, [r7, #4]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	441c      	add	r4, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	4423      	add	r3, r4
 800fbd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fbdc:	61fb      	str	r3, [r7, #28]
 800fbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	891b      	ldrh	r3, [r3, #8]
 800fbea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	6959      	ldr	r1, [r3, #20]
 800fbf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fab1 	bl	8010162 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	785b      	ldrb	r3, [r3, #1]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d115      	bne.n	800fc34 <USB_EPStartXfer+0x264>
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	4413      	add	r3, r2
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc1e:	b29c      	uxth	r4, r3
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	441a      	add	r2, r3
 800fc2a:	4b99      	ldr	r3, [pc, #612]	; (800fe90 <USB_EPStartXfer+0x4c0>)
 800fc2c:	4323      	orrs	r3, r4
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	8013      	strh	r3, [r2, #0]
 800fc32:	e018      	b.n	800fc66 <USB_EPStartXfer+0x296>
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	785b      	ldrb	r3, [r3, #1]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d114      	bne.n	800fc66 <USB_EPStartXfer+0x296>
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	881b      	ldrh	r3, [r3, #0]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc52:	b29c      	uxth	r4, r3
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	441a      	add	r2, r3
 800fc5e:	4b8d      	ldr	r3, [pc, #564]	; (800fe94 <USB_EPStartXfer+0x4c4>)
 800fc60:	4323      	orrs	r3, r4
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc7c:	b29c      	uxth	r4, r3
 800fc7e:	f084 0310 	eor.w	r3, r4, #16
 800fc82:	b29c      	uxth	r4, r3
 800fc84:	f084 0320 	eor.w	r3, r4, #32
 800fc88:	b29c      	uxth	r4, r3
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	441a      	add	r2, r3
 800fc94:	4b80      	ldr	r3, [pc, #512]	; (800fe98 <USB_EPStartXfer+0x4c8>)
 800fc96:	4323      	orrs	r3, r4
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	8013      	strh	r3, [r2, #0]
 800fc9c:	e13c      	b.n	800ff18 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	699a      	ldr	r2, [r3, #24]
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d909      	bls.n	800fcbe <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	691b      	ldr	r3, [r3, #16]
 800fcae:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	699a      	ldr	r2, [r3, #24]
 800fcb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcb6:	1ad2      	subs	r2, r2, r3
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	619a      	str	r2, [r3, #24]
 800fcbc:	e005      	b.n	800fcca <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	699b      	ldr	r3, [r3, #24]
 800fcc2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	7b1b      	ldrb	r3, [r3, #12]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d144      	bne.n	800fd5c <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fcd2:	687c      	ldr	r4, [r7, #4]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	441c      	add	r4, r3
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	4423      	add	r3, r4
 800fce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fcea:	623b      	str	r3, [r7, #32]
 800fcec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d110      	bne.n	800fd14 <USB_EPStartXfer+0x344>
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	6a3b      	ldr	r3, [r7, #32]
 800fcfe:	801a      	strh	r2, [r3, #0]
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	881b      	ldrh	r3, [r3, #0]
 800fd04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	801a      	strh	r2, [r3, #0]
 800fd12:	e0e6      	b.n	800fee2 <USB_EPStartXfer+0x512>
 800fd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd16:	2b3d      	cmp	r3, #61	; 0x3d
 800fd18:	d811      	bhi.n	800fd3e <USB_EPStartXfer+0x36e>
 800fd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd1c:	085b      	lsrs	r3, r3, #1
 800fd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd22:	f003 0301 	and.w	r3, r3, #1
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <USB_EPStartXfer+0x360>
 800fd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	029b      	lsls	r3, r3, #10
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	6a3b      	ldr	r3, [r7, #32]
 800fd3a:	801a      	strh	r2, [r3, #0]
 800fd3c:	e0d1      	b.n	800fee2 <USB_EPStartXfer+0x512>
 800fd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd40:	095b      	lsrs	r3, r3, #5
 800fd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	029b      	lsls	r3, r3, #10
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	6a3b      	ldr	r3, [r7, #32]
 800fd58:	801a      	strh	r2, [r3, #0]
 800fd5a:	e0c2      	b.n	800fee2 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	785b      	ldrb	r3, [r3, #1]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d144      	bne.n	800fdee <USB_EPStartXfer+0x41e>
 800fd64:	687c      	ldr	r4, [r7, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	441c      	add	r4, r3
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	4423      	add	r3, r4
 800fd78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d110      	bne.n	800fda6 <USB_EPStartXfer+0x3d6>
 800fd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd90:	801a      	strh	r2, [r3, #0]
 800fd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	801a      	strh	r2, [r3, #0]
 800fda4:	e038      	b.n	800fe18 <USB_EPStartXfer+0x448>
 800fda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fda8:	2b3d      	cmp	r3, #61	; 0x3d
 800fdaa:	d811      	bhi.n	800fdd0 <USB_EPStartXfer+0x400>
 800fdac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdae:	085b      	lsrs	r3, r3, #1
 800fdb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d002      	beq.n	800fdc2 <USB_EPStartXfer+0x3f2>
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	029b      	lsls	r3, r3, #10
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	801a      	strh	r2, [r3, #0]
 800fdce:	e023      	b.n	800fe18 <USB_EPStartXfer+0x448>
 800fdd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd2:	095b      	lsrs	r3, r3, #5
 800fdd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	029b      	lsls	r3, r3, #10
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fde2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	801a      	strh	r2, [r3, #0]
 800fdec:	e014      	b.n	800fe18 <USB_EPStartXfer+0x448>
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	785b      	ldrb	r3, [r3, #1]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d110      	bne.n	800fe18 <USB_EPStartXfer+0x448>
 800fdf6:	687c      	ldr	r4, [r7, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	441c      	add	r4, r3
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	00db      	lsls	r3, r3, #3
 800fe08:	4423      	add	r3, r4
 800fe0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe0e:	633b      	str	r3, [r7, #48]	; 0x30
 800fe10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	801a      	strh	r2, [r3, #0]
 800fe18:	687c      	ldr	r4, [r7, #4]
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	785b      	ldrb	r3, [r3, #1]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d14b      	bne.n	800feba <USB_EPStartXfer+0x4ea>
 800fe22:	687c      	ldr	r4, [r7, #4]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	441c      	add	r4, r3
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	00db      	lsls	r3, r3, #3
 800fe34:	4423      	add	r3, r4
 800fe36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fe3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fe3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d110      	bne.n	800fe64 <USB_EPStartXfer+0x494>
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	801a      	strh	r2, [r3, #0]
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe60:	801a      	strh	r2, [r3, #0]
 800fe62:	e03e      	b.n	800fee2 <USB_EPStartXfer+0x512>
 800fe64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe66:	2b3d      	cmp	r3, #61	; 0x3d
 800fe68:	d818      	bhi.n	800fe9c <USB_EPStartXfer+0x4cc>
 800fe6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe6c:	085b      	lsrs	r3, r3, #1
 800fe6e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <USB_EPStartXfer+0x4b0>
 800fe7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	029b      	lsls	r3, r3, #10
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8a:	801a      	strh	r2, [r3, #0]
 800fe8c:	e029      	b.n	800fee2 <USB_EPStartXfer+0x512>
 800fe8e:	bf00      	nop
 800fe90:	ffff80c0 	.word	0xffff80c0
 800fe94:	ffffc080 	.word	0xffffc080
 800fe98:	ffff8080 	.word	0xffff8080
 800fe9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe9e:	095b      	lsrs	r3, r3, #5
 800fea0:	637b      	str	r3, [r7, #52]	; 0x34
 800fea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	029b      	lsls	r3, r3, #10
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800feae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	801a      	strh	r2, [r3, #0]
 800feb8:	e013      	b.n	800fee2 <USB_EPStartXfer+0x512>
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	785b      	ldrb	r3, [r3, #1]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d10f      	bne.n	800fee2 <USB_EPStartXfer+0x512>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fec8:	b29b      	uxth	r3, r3
 800feca:	441c      	add	r4, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	00db      	lsls	r3, r3, #3
 800fed2:	4423      	add	r3, r4
 800fed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
 800feda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fedc:	b29a      	uxth	r2, r3
 800fede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee0:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	4413      	add	r3, r2
 800feec:	881b      	ldrh	r3, [r3, #0]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fef8:	b29c      	uxth	r4, r3
 800fefa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800fefe:	b29c      	uxth	r4, r3
 800ff00:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ff04:	b29c      	uxth	r4, r3
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	441a      	add	r2, r3
 800ff10:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <USB_EPStartXfer+0x554>)
 800ff12:	4323      	orrs	r3, r4
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3754      	adds	r7, #84	; 0x54
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd90      	pop	{r4, r7, pc}
 800ff22:	bf00      	nop
 800ff24:	ffff8080 	.word	0xffff8080

0800ff28 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff28:	b490      	push	{r4, r7}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	785b      	ldrb	r3, [r3, #1]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d018      	beq.n	800ff6c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	4413      	add	r3, r2
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff50:	b29c      	uxth	r4, r3
 800ff52:	f084 0310 	eor.w	r3, r4, #16
 800ff56:	b29c      	uxth	r4, r3
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	441a      	add	r2, r3
 800ff62:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <USB_EPSetStall+0x80>)
 800ff64:	4323      	orrs	r3, r4
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	8013      	strh	r3, [r2, #0]
 800ff6a:	e017      	b.n	800ff9c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	4413      	add	r3, r2
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff82:	b29c      	uxth	r4, r3
 800ff84:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ff88:	b29c      	uxth	r4, r3
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	441a      	add	r2, r3
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <USB_EPSetStall+0x80>)
 800ff96:	4323      	orrs	r3, r4
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bc90      	pop	{r4, r7}
 800ffa6:	4770      	bx	lr
 800ffa8:	ffff8080 	.word	0xffff8080

0800ffac <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ffac:	b490      	push	{r4, r7}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	7b1b      	ldrb	r3, [r3, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d17d      	bne.n	80100ba <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	785b      	ldrb	r3, [r3, #1]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d03d      	beq.n	8010042 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	b29c      	uxth	r4, r3
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d014      	beq.n	8010008 <USB_EPClearStall+0x5c>
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fff4:	b29c      	uxth	r4, r3
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	441a      	add	r2, r3
 8010000:	4b31      	ldr	r3, [pc, #196]	; (80100c8 <USB_EPClearStall+0x11c>)
 8010002:	4323      	orrs	r3, r4
 8010004:	b29b      	uxth	r3, r3
 8010006:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	78db      	ldrb	r3, [r3, #3]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d054      	beq.n	80100ba <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	b29b      	uxth	r3, r3
 801001e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010026:	b29c      	uxth	r4, r3
 8010028:	f084 0320 	eor.w	r3, r4, #32
 801002c:	b29c      	uxth	r4, r3
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	441a      	add	r2, r3
 8010038:	4b24      	ldr	r3, [pc, #144]	; (80100cc <USB_EPClearStall+0x120>)
 801003a:	4323      	orrs	r3, r4
 801003c:	b29b      	uxth	r3, r3
 801003e:	8013      	strh	r3, [r2, #0]
 8010040:	e03b      	b.n	80100ba <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	b29c      	uxth	r4, r3
 8010050:	4623      	mov	r3, r4
 8010052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010056:	2b00      	cmp	r3, #0
 8010058:	d014      	beq.n	8010084 <USB_EPClearStall+0xd8>
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	b29b      	uxth	r3, r3
 8010068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801006c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010070:	b29c      	uxth	r4, r3
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	441a      	add	r2, r3
 801007c:	4b14      	ldr	r3, [pc, #80]	; (80100d0 <USB_EPClearStall+0x124>)
 801007e:	4323      	orrs	r3, r4
 8010080:	b29b      	uxth	r3, r3
 8010082:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4413      	add	r3, r2
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	b29b      	uxth	r3, r3
 8010092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801009a:	b29c      	uxth	r4, r3
 801009c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80100a0:	b29c      	uxth	r4, r3
 80100a2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80100a6:	b29c      	uxth	r4, r3
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	441a      	add	r2, r3
 80100b2:	4b06      	ldr	r3, [pc, #24]	; (80100cc <USB_EPClearStall+0x120>)
 80100b4:	4323      	orrs	r3, r4
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80100ba:	2300      	movs	r3, #0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bc90      	pop	{r4, r7}
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	ffff80c0 	.word	0xffff80c0
 80100cc:	ffff8080 	.word	0xffff8080
 80100d0:	ffffc080 	.word	0xffffc080

080100d4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80100e0:	78fb      	ldrb	r3, [r7, #3]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d103      	bne.n	80100ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2280      	movs	r2, #128	; 0x80
 80100ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801010a:	b29b      	uxth	r3, r3
 801010c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010114:	b29a      	uxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801011c:	2300      	movs	r3, #0
}
 801011e:	4618      	mov	r0, r3
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr

0801012a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801012a:	b480      	push	{r7}
 801012c:	b085      	sub	sp, #20
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010138:	b29b      	uxth	r3, r3
 801013a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801013c:	68fb      	ldr	r3, [r7, #12]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3714      	adds	r7, #20
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 801014a:	b480      	push	{r7}
 801014c:	b083      	sub	sp, #12
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010162:	b480      	push	{r7}
 8010164:	b08d      	sub	sp, #52	; 0x34
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	4611      	mov	r1, r2
 801016e:	461a      	mov	r2, r3
 8010170:	460b      	mov	r3, r1
 8010172:	80fb      	strh	r3, [r7, #6]
 8010174:	4613      	mov	r3, r2
 8010176:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010178:	88bb      	ldrh	r3, [r7, #4]
 801017a:	3301      	adds	r3, #1
 801017c:	085b      	lsrs	r3, r3, #1
 801017e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010188:	88fa      	ldrh	r2, [r7, #6]
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	4413      	add	r3, r2
 801018e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010192:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010198:	e01b      	b.n	80101d2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	3301      	adds	r3, #1
 80101a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	b29b      	uxth	r3, r3
 80101ac:	021b      	lsls	r3, r3, #8
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	461a      	mov	r2, r3
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	4313      	orrs	r3, r2
 80101b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80101c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c2:	3302      	adds	r3, #2
 80101c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	3301      	adds	r3, #1
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	3b01      	subs	r3, #1
 80101d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1e0      	bne.n	801019a <USB_WritePMA+0x38>
  }
}
 80101d8:	bf00      	nop
 80101da:	3734      	adds	r7, #52	; 0x34
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b08b      	sub	sp, #44	; 0x2c
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	4611      	mov	r1, r2
 80101f0:	461a      	mov	r2, r3
 80101f2:	460b      	mov	r3, r1
 80101f4:	80fb      	strh	r3, [r7, #6]
 80101f6:	4613      	mov	r3, r2
 80101f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80101fa:	88bb      	ldrh	r3, [r7, #4]
 80101fc:	085b      	lsrs	r3, r3, #1
 80101fe:	b29b      	uxth	r3, r3
 8010200:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801020a:	88fa      	ldrh	r2, [r7, #6]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	4413      	add	r3, r2
 8010210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010214:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	627b      	str	r3, [r7, #36]	; 0x24
 801021a:	e018      	b.n	801024e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	b29b      	uxth	r3, r3
 8010222:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010224:	6a3b      	ldr	r3, [r7, #32]
 8010226:	3302      	adds	r3, #2
 8010228:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	b2da      	uxtb	r2, r3
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	3301      	adds	r3, #1
 8010236:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	0a1b      	lsrs	r3, r3, #8
 801023c:	b2da      	uxtb	r2, r3
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	3301      	adds	r3, #1
 8010246:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8010248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024a:	3b01      	subs	r3, #1
 801024c:	627b      	str	r3, [r7, #36]	; 0x24
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e3      	bne.n	801021c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8010254:	88bb      	ldrh	r3, [r7, #4]
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	b29b      	uxth	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d007      	beq.n	8010270 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8010260:	6a3b      	ldr	r3, [r7, #32]
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	b29b      	uxth	r3, r3
 8010266:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	b2da      	uxtb	r2, r3
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	701a      	strb	r2, [r3, #0]
  }
}
 8010270:	bf00      	nop
 8010272:	372c      	adds	r7, #44	; 0x2c
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010282:	f3ef 8305 	mrs	r3, IPSR
 8010286:	60bb      	str	r3, [r7, #8]
  return(result);
 8010288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10f      	bne.n	80102ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801028e:	f3ef 8310 	mrs	r3, PRIMASK
 8010292:	607b      	str	r3, [r7, #4]
  return(result);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d109      	bne.n	80102ae <osKernelInitialize+0x32>
 801029a:	4b11      	ldr	r3, [pc, #68]	; (80102e0 <osKernelInitialize+0x64>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d109      	bne.n	80102b6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102a2:	f3ef 8311 	mrs	r3, BASEPRI
 80102a6:	603b      	str	r3, [r7, #0]
  return(result);
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80102ae:	f06f 0305 	mvn.w	r3, #5
 80102b2:	60fb      	str	r3, [r7, #12]
 80102b4:	e00c      	b.n	80102d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102b6:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <osKernelInitialize+0x64>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d105      	bne.n	80102ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80102be:	4b08      	ldr	r3, [pc, #32]	; (80102e0 <osKernelInitialize+0x64>)
 80102c0:	2201      	movs	r2, #1
 80102c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60fb      	str	r3, [r7, #12]
 80102c8:	e002      	b.n	80102d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80102ca:	f04f 33ff 	mov.w	r3, #4294967295
 80102ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80102d0:	68fb      	ldr	r3, [r7, #12]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	20000c98 	.word	0x20000c98

080102e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ea:	f3ef 8305 	mrs	r3, IPSR
 80102ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80102f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10f      	bne.n	8010316 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102f6:	f3ef 8310 	mrs	r3, PRIMASK
 80102fa:	607b      	str	r3, [r7, #4]
  return(result);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d109      	bne.n	8010316 <osKernelStart+0x32>
 8010302:	4b11      	ldr	r3, [pc, #68]	; (8010348 <osKernelStart+0x64>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b02      	cmp	r3, #2
 8010308:	d109      	bne.n	801031e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801030a:	f3ef 8311 	mrs	r3, BASEPRI
 801030e:	603b      	str	r3, [r7, #0]
  return(result);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d003      	beq.n	801031e <osKernelStart+0x3a>
    stat = osErrorISR;
 8010316:	f06f 0305 	mvn.w	r3, #5
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	e00e      	b.n	801033c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 801031e:	4b0a      	ldr	r3, [pc, #40]	; (8010348 <osKernelStart+0x64>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b01      	cmp	r3, #1
 8010324:	d107      	bne.n	8010336 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8010326:	4b08      	ldr	r3, [pc, #32]	; (8010348 <osKernelStart+0x64>)
 8010328:	2202      	movs	r2, #2
 801032a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 801032c:	f002 fee2 	bl	80130f4 <vTaskStartScheduler>
      stat = osOK;
 8010330:	2300      	movs	r3, #0
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	e002      	b.n	801033c <osKernelStart+0x58>
    } else {
      stat = osError;
 8010336:	f04f 33ff 	mov.w	r3, #4294967295
 801033a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801033c:	68fb      	ldr	r3, [r7, #12]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	20000c98 	.word	0x20000c98

0801034c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801034c:	b580      	push	{r7, lr}
 801034e:	b092      	sub	sp, #72	; 0x48
 8010350:	af04      	add	r7, sp, #16
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010358:	2300      	movs	r3, #0
 801035a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801035c:	f3ef 8305 	mrs	r3, IPSR
 8010360:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8010364:	2b00      	cmp	r3, #0
 8010366:	f040 8095 	bne.w	8010494 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801036a:	f3ef 8310 	mrs	r3, PRIMASK
 801036e:	623b      	str	r3, [r7, #32]
  return(result);
 8010370:	6a3b      	ldr	r3, [r7, #32]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f040 808e 	bne.w	8010494 <osThreadNew+0x148>
 8010378:	4b49      	ldr	r3, [pc, #292]	; (80104a0 <osThreadNew+0x154>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b02      	cmp	r3, #2
 801037e:	d106      	bne.n	801038e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010380:	f3ef 8311 	mrs	r3, BASEPRI
 8010384:	61fb      	str	r3, [r7, #28]
  return(result);
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f040 8083 	bne.w	8010494 <osThreadNew+0x148>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d07f      	beq.n	8010494 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8010394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010398:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 801039a:	2318      	movs	r3, #24
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 801039e:	2300      	movs	r3, #0
 80103a0:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80103a2:	f107 031b 	add.w	r3, r7, #27
 80103a6:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295
 80103ac:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d045      	beq.n	8010440 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d002      	beq.n	80103c2 <osThreadNew+0x76>
        name = attr->name;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	699b      	ldr	r3, [r3, #24]
 80103ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80103d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d008      	beq.n	80103e8 <osThreadNew+0x9c>
 80103d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d8:	2b38      	cmp	r3, #56	; 0x38
 80103da:	d805      	bhi.n	80103e8 <osThreadNew+0x9c>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	f003 0301 	and.w	r3, r3, #1
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d001      	beq.n	80103ec <osThreadNew+0xa0>
        return (NULL);
 80103e8:	2300      	movs	r3, #0
 80103ea:	e054      	b.n	8010496 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d003      	beq.n	80103fc <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	695b      	ldr	r3, [r3, #20]
 80103f8:	089b      	lsrs	r3, r3, #2
 80103fa:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00e      	beq.n	8010422 <osThreadNew+0xd6>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	2b63      	cmp	r3, #99	; 0x63
 801040a:	d90a      	bls.n	8010422 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010410:	2b00      	cmp	r3, #0
 8010412:	d006      	beq.n	8010422 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	695b      	ldr	r3, [r3, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <osThreadNew+0xd6>
        mem = 1;
 801041c:	2301      	movs	r3, #1
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010420:	e010      	b.n	8010444 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d10c      	bne.n	8010444 <osThreadNew+0xf8>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d108      	bne.n	8010444 <osThreadNew+0xf8>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d104      	bne.n	8010444 <osThreadNew+0xf8>
          mem = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	62bb      	str	r3, [r7, #40]	; 0x28
 801043e:	e001      	b.n	8010444 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8010444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010446:	2b01      	cmp	r3, #1
 8010448:	d110      	bne.n	801046c <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010452:	9202      	str	r2, [sp, #8]
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801045e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f002 fc79 	bl	8012d58 <xTaskCreateStatic>
 8010466:	4603      	mov	r3, r0
 8010468:	617b      	str	r3, [r7, #20]
 801046a:	e013      	b.n	8010494 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 801046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046e:	2b00      	cmp	r3, #0
 8010470:	d110      	bne.n	8010494 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010474:	b29a      	uxth	r2, r3
 8010476:	f107 0314 	add.w	r3, r7, #20
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	f002 fcc0 	bl	8012e0a <xTaskCreate>
 801048a:	4603      	mov	r3, r0
 801048c:	2b01      	cmp	r3, #1
 801048e:	d001      	beq.n	8010494 <osThreadNew+0x148>
          hTask = NULL;
 8010490:	2300      	movs	r3, #0
 8010492:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010494:	697b      	ldr	r3, [r7, #20]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3738      	adds	r7, #56	; 0x38
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20000c98 	.word	0x20000c98

080104a4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b08a      	sub	sp, #40	; 0x28
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <osThreadFlagsSet+0x1a>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	da03      	bge.n	80104c6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80104be:	f06f 0303 	mvn.w	r3, #3
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	e046      	b.n	8010554 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 80104c6:	f04f 33ff 	mov.w	r3, #4294967295
 80104ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104cc:	f3ef 8305 	mrs	r3, IPSR
 80104d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80104d2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10f      	bne.n	80104f8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104d8:	f3ef 8310 	mrs	r3, PRIMASK
 80104dc:	617b      	str	r3, [r7, #20]
  return(result);
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d109      	bne.n	80104f8 <osThreadFlagsSet+0x54>
 80104e4:	4b1e      	ldr	r3, [pc, #120]	; (8010560 <osThreadFlagsSet+0xbc>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d126      	bne.n	801053a <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ec:	f3ef 8311 	mrs	r3, BASEPRI
 80104f0:	613b      	str	r3, [r7, #16]
  return(result);
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d020      	beq.n	801053a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80104f8:	2300      	movs	r3, #0
 80104fa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80104fc:	f107 0308 	add.w	r3, r7, #8
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	2300      	movs	r3, #0
 8010504:	2201      	movs	r2, #1
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	69f8      	ldr	r0, [r7, #28]
 801050a:	f003 fdbd 	bl	8014088 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801050e:	f107 020c 	add.w	r2, r7, #12
 8010512:	2300      	movs	r3, #0
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	4613      	mov	r3, r2
 8010518:	2200      	movs	r2, #0
 801051a:	2100      	movs	r1, #0
 801051c:	69f8      	ldr	r0, [r7, #28]
 801051e:	f003 fdb3 	bl	8014088 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d015      	beq.n	8010554 <osThreadFlagsSet+0xb0>
 8010528:	4b0e      	ldr	r3, [pc, #56]	; (8010564 <osThreadFlagsSet+0xc0>)
 801052a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801052e:	601a      	str	r2, [r3, #0]
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	e00c      	b.n	8010554 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801053a:	2300      	movs	r3, #0
 801053c:	2201      	movs	r2, #1
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	69f8      	ldr	r0, [r7, #28]
 8010542:	f003 fcfd 	bl	8013f40 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8010546:	f107 030c 	add.w	r3, r7, #12
 801054a:	2200      	movs	r2, #0
 801054c:	2100      	movs	r1, #0
 801054e:	69f8      	ldr	r0, [r7, #28]
 8010550:	f003 fcf6 	bl	8013f40 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8010554:	68fb      	ldr	r3, [r7, #12]
}
 8010556:	4618      	mov	r0, r3
 8010558:	3720      	adds	r7, #32
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20000c98 	.word	0x20000c98
 8010564:	e000ed04 	.word	0xe000ed04

08010568 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8010568:	b580      	push	{r7, lr}
 801056a:	b088      	sub	sp, #32
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010570:	f3ef 8305 	mrs	r3, IPSR
 8010574:	617b      	str	r3, [r7, #20]
  return(result);
 8010576:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10f      	bne.n	801059c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801057c:	f3ef 8310 	mrs	r3, PRIMASK
 8010580:	613b      	str	r3, [r7, #16]
  return(result);
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d109      	bne.n	801059c <osThreadFlagsClear+0x34>
 8010588:	4b1e      	ldr	r3, [pc, #120]	; (8010604 <osThreadFlagsClear+0x9c>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b02      	cmp	r3, #2
 801058e:	d109      	bne.n	80105a4 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010590:	f3ef 8311 	mrs	r3, BASEPRI
 8010594:	60fb      	str	r3, [r7, #12]
  return(result);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d003      	beq.n	80105a4 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 801059c:	f06f 0305 	mvn.w	r3, #5
 80105a0:	61fb      	str	r3, [r7, #28]
 80105a2:	e02a      	b.n	80105fa <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	da03      	bge.n	80105b2 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80105aa:	f06f 0303 	mvn.w	r3, #3
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	e023      	b.n	80105fa <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80105b2:	f003 facb 	bl	8013b4c <xTaskGetCurrentTaskHandle>
 80105b6:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80105b8:	f107 0308 	add.w	r3, r7, #8
 80105bc:	2200      	movs	r2, #0
 80105be:	2100      	movs	r1, #0
 80105c0:	69b8      	ldr	r0, [r7, #24]
 80105c2:	f003 fcbd 	bl	8013f40 <xTaskGenericNotify>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d113      	bne.n	80105f4 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	43da      	mvns	r2, r3
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	4013      	ands	r3, r2
 80105d8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80105da:	68b9      	ldr	r1, [r7, #8]
 80105dc:	2300      	movs	r3, #0
 80105de:	2203      	movs	r2, #3
 80105e0:	69b8      	ldr	r0, [r7, #24]
 80105e2:	f003 fcad 	bl	8013f40 <xTaskGenericNotify>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d006      	beq.n	80105fa <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 80105ec:	f04f 33ff 	mov.w	r3, #4294967295
 80105f0:	61fb      	str	r3, [r7, #28]
 80105f2:	e002      	b.n	80105fa <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80105f4:	f04f 33ff 	mov.w	r3, #4294967295
 80105f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80105fa:	69fb      	ldr	r3, [r7, #28]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20000c98 	.word	0x20000c98

08010608 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010608:	b580      	push	{r7, lr}
 801060a:	b08e      	sub	sp, #56	; 0x38
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010614:	f3ef 8305 	mrs	r3, IPSR
 8010618:	61fb      	str	r3, [r7, #28]
  return(result);
 801061a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10f      	bne.n	8010640 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010620:	f3ef 8310 	mrs	r3, PRIMASK
 8010624:	61bb      	str	r3, [r7, #24]
  return(result);
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d109      	bne.n	8010640 <osThreadFlagsWait+0x38>
 801062c:	4b3f      	ldr	r3, [pc, #252]	; (801072c <osThreadFlagsWait+0x124>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b02      	cmp	r3, #2
 8010632:	d109      	bne.n	8010648 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010634:	f3ef 8311 	mrs	r3, BASEPRI
 8010638:	617b      	str	r3, [r7, #20]
  return(result);
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8010640:	f06f 0305 	mvn.w	r3, #5
 8010644:	637b      	str	r3, [r7, #52]	; 0x34
 8010646:	e06b      	b.n	8010720 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2b00      	cmp	r3, #0
 801064c:	da03      	bge.n	8010656 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801064e:	f06f 0303 	mvn.w	r3, #3
 8010652:	637b      	str	r3, [r7, #52]	; 0x34
 8010654:	e064      	b.n	8010720 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	f003 0302 	and.w	r3, r3, #2
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8010660:	2300      	movs	r3, #0
 8010662:	633b      	str	r3, [r7, #48]	; 0x30
 8010664:	e001      	b.n	801066a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801066a:	2300      	movs	r3, #0
 801066c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8010672:	f002 fe87 	bl	8013384 <xTaskGetTickCount>
 8010676:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010678:	f107 0210 	add.w	r2, r7, #16
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010680:	2000      	movs	r0, #0
 8010682:	f003 fc03 	bl	8013e8c <xTaskNotifyWait>
 8010686:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	2b01      	cmp	r3, #1
 801068c:	d137      	bne.n	80106fe <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801068e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	4013      	ands	r3, r2
 8010694:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801069a:	4313      	orrs	r3, r2
 801069c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f003 0301 	and.w	r3, r3, #1
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00c      	beq.n	80106c2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ac:	4013      	ands	r3, r2
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d032      	beq.n	801071a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d10f      	bne.n	80106da <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80106ba:	f06f 0302 	mvn.w	r3, #2
 80106be:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106c0:	e02e      	b.n	8010720 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c6:	4013      	ands	r3, r2
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d128      	bne.n	801071e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d103      	bne.n	80106da <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80106d2:	f06f 0302 	mvn.w	r3, #2
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80106d8:	e022      	b.n	8010720 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80106da:	f002 fe53 	bl	8013384 <xTaskGetTickCount>
 80106de:	4602      	mov	r2, r0
 80106e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80106e6:	6a3a      	ldr	r2, [r7, #32]
 80106e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d902      	bls.n	80106f4 <osThreadFlagsWait+0xec>
          tout  = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106f2:	e00e      	b.n	8010712 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80106f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106fc:	e009      	b.n	8010712 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d103      	bne.n	801070c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8010704:	f06f 0302 	mvn.w	r3, #2
 8010708:	637b      	str	r3, [r7, #52]	; 0x34
 801070a:	e002      	b.n	8010712 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801070c:	f06f 0301 	mvn.w	r3, #1
 8010710:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1af      	bne.n	8010678 <osThreadFlagsWait+0x70>
 8010718:	e002      	b.n	8010720 <osThreadFlagsWait+0x118>
            break;
 801071a:	bf00      	nop
 801071c:	e000      	b.n	8010720 <osThreadFlagsWait+0x118>
            break;
 801071e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010722:	4618      	mov	r0, r3
 8010724:	3738      	adds	r7, #56	; 0x38
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	20000c98 	.word	0x20000c98

08010730 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010738:	f3ef 8305 	mrs	r3, IPSR
 801073c:	613b      	str	r3, [r7, #16]
  return(result);
 801073e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10f      	bne.n	8010764 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010744:	f3ef 8310 	mrs	r3, PRIMASK
 8010748:	60fb      	str	r3, [r7, #12]
  return(result);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d109      	bne.n	8010764 <osDelay+0x34>
 8010750:	4b0d      	ldr	r3, [pc, #52]	; (8010788 <osDelay+0x58>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b02      	cmp	r3, #2
 8010756:	d109      	bne.n	801076c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010758:	f3ef 8311 	mrs	r3, BASEPRI
 801075c:	60bb      	str	r3, [r7, #8]
  return(result);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <osDelay+0x3c>
    stat = osErrorISR;
 8010764:	f06f 0305 	mvn.w	r3, #5
 8010768:	617b      	str	r3, [r7, #20]
 801076a:	e007      	b.n	801077c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d002      	beq.n	801077c <osDelay+0x4c>
      vTaskDelay(ticks);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f002 fc88 	bl	801308c <vTaskDelay>
    }
  }

  return (stat);
 801077c:	697b      	ldr	r3, [r7, #20]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3718      	adds	r7, #24
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20000c98 	.word	0x20000c98

0801078c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f004 f94f 	bl	8014a38 <pvTimerGetTimerID>
 801079a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d005      	beq.n	80107ae <TimerCallback+0x22>
    callb->func (callb->arg);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	6852      	ldr	r2, [r2, #4]
 80107aa:	4610      	mov	r0, r2
 80107ac:	4798      	blx	r3
  }
}
 80107ae:	bf00      	nop
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
	...

080107b8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08e      	sub	sp, #56	; 0x38
 80107bc:	af02      	add	r7, sp, #8
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	607a      	str	r2, [r7, #4]
 80107c2:	603b      	str	r3, [r7, #0]
 80107c4:	460b      	mov	r3, r1
 80107c6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107cc:	f3ef 8305 	mrs	r3, IPSR
 80107d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80107d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d16a      	bne.n	80108ae <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107d8:	f3ef 8310 	mrs	r3, PRIMASK
 80107dc:	617b      	str	r3, [r7, #20]
  return(result);
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d164      	bne.n	80108ae <osTimerNew+0xf6>
 80107e4:	4b34      	ldr	r3, [pc, #208]	; (80108b8 <osTimerNew+0x100>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b02      	cmp	r3, #2
 80107ea:	d105      	bne.n	80107f8 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107ec:	f3ef 8311 	mrs	r3, BASEPRI
 80107f0:	613b      	str	r3, [r7, #16]
  return(result);
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d15a      	bne.n	80108ae <osTimerNew+0xf6>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d057      	beq.n	80108ae <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80107fe:	2008      	movs	r0, #8
 8010800:	f000 fd60 	bl	80112c4 <pvPortMalloc>
 8010804:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d050      	beq.n	80108ae <osTimerNew+0xf6>
      callb->func = func;
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010818:	7afb      	ldrb	r3, [r7, #11]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d102      	bne.n	8010824 <osTimerNew+0x6c>
        reload = pdFALSE;
 801081e:	2300      	movs	r3, #0
 8010820:	627b      	str	r3, [r7, #36]	; 0x24
 8010822:	e001      	b.n	8010828 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8010824:	2301      	movs	r3, #1
 8010826:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8010828:	f04f 33ff 	mov.w	r3, #4294967295
 801082c:	623b      	str	r3, [r7, #32]
      name = NULL;
 801082e:	2300      	movs	r3, #0
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d01c      	beq.n	8010872 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <osTimerNew+0x8e>
          name = attr->name;
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d006      	beq.n	801085c <osTimerNew+0xa4>
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	2b2f      	cmp	r3, #47	; 0x2f
 8010854:	d902      	bls.n	801085c <osTimerNew+0xa4>
          mem = 1;
 8010856:	2301      	movs	r3, #1
 8010858:	623b      	str	r3, [r7, #32]
 801085a:	e00c      	b.n	8010876 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d108      	bne.n	8010876 <osTimerNew+0xbe>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <osTimerNew+0xbe>
            mem = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	623b      	str	r3, [r7, #32]
 8010870:	e001      	b.n	8010876 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d10c      	bne.n	8010896 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	9301      	str	r3, [sp, #4]
 8010882:	4b0e      	ldr	r3, [pc, #56]	; (80108bc <osTimerNew+0x104>)
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801088a:	2101      	movs	r1, #1
 801088c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801088e:	f003 fd80 	bl	8014392 <xTimerCreateStatic>
 8010892:	62b8      	str	r0, [r7, #40]	; 0x28
 8010894:	e00b      	b.n	80108ae <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d108      	bne.n	80108ae <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801089c:	4b07      	ldr	r3, [pc, #28]	; (80108bc <osTimerNew+0x104>)
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a4:	2101      	movs	r1, #1
 80108a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108a8:	f003 fd52 	bl	8014350 <xTimerCreate>
 80108ac:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80108ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3730      	adds	r7, #48	; 0x30
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20000c98 	.word	0x20000c98
 80108bc:	0801078d 	.word	0x0801078d

080108c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	; 0x28
 80108c4:	af02      	add	r7, sp, #8
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ce:	f3ef 8305 	mrs	r3, IPSR
 80108d2:	617b      	str	r3, [r7, #20]
  return(result);
 80108d4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d10f      	bne.n	80108fa <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108da:	f3ef 8310 	mrs	r3, PRIMASK
 80108de:	613b      	str	r3, [r7, #16]
  return(result);
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d109      	bne.n	80108fa <osTimerStart+0x3a>
 80108e6:	4b15      	ldr	r3, [pc, #84]	; (801093c <osTimerStart+0x7c>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b02      	cmp	r3, #2
 80108ec:	d109      	bne.n	8010902 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108ee:	f3ef 8311 	mrs	r3, BASEPRI
 80108f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d003      	beq.n	8010902 <osTimerStart+0x42>
    stat = osErrorISR;
 80108fa:	f06f 0305 	mvn.w	r3, #5
 80108fe:	61fb      	str	r3, [r7, #28]
 8010900:	e017      	b.n	8010932 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d103      	bne.n	8010910 <osTimerStart+0x50>
    stat = osErrorParameter;
 8010908:	f06f 0303 	mvn.w	r3, #3
 801090c:	61fb      	str	r3, [r7, #28]
 801090e:	e010      	b.n	8010932 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8010910:	2300      	movs	r3, #0
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	2300      	movs	r3, #0
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	2104      	movs	r1, #4
 801091a:	69b8      	ldr	r0, [r7, #24]
 801091c:	f003 fda6 	bl	801446c <xTimerGenericCommand>
 8010920:	4603      	mov	r3, r0
 8010922:	2b01      	cmp	r3, #1
 8010924:	d102      	bne.n	801092c <osTimerStart+0x6c>
      stat = osOK;
 8010926:	2300      	movs	r3, #0
 8010928:	61fb      	str	r3, [r7, #28]
 801092a:	e002      	b.n	8010932 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 801092c:	f06f 0302 	mvn.w	r3, #2
 8010930:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8010932:	69fb      	ldr	r3, [r7, #28]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3720      	adds	r7, #32
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	20000c98 	.word	0x20000c98

08010940 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8010940:	b580      	push	{r7, lr}
 8010942:	b08a      	sub	sp, #40	; 0x28
 8010944:	af02      	add	r7, sp, #8
 8010946:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801094c:	f3ef 8305 	mrs	r3, IPSR
 8010950:	617b      	str	r3, [r7, #20]
  return(result);
 8010952:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010954:	2b00      	cmp	r3, #0
 8010956:	d10f      	bne.n	8010978 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010958:	f3ef 8310 	mrs	r3, PRIMASK
 801095c:	613b      	str	r3, [r7, #16]
  return(result);
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d109      	bne.n	8010978 <osTimerStop+0x38>
 8010964:	4b1a      	ldr	r3, [pc, #104]	; (80109d0 <osTimerStop+0x90>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b02      	cmp	r3, #2
 801096a:	d109      	bne.n	8010980 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801096c:	f3ef 8311 	mrs	r3, BASEPRI
 8010970:	60fb      	str	r3, [r7, #12]
  return(result);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d003      	beq.n	8010980 <osTimerStop+0x40>
    stat = osErrorISR;
 8010978:	f06f 0305 	mvn.w	r3, #5
 801097c:	61fb      	str	r3, [r7, #28]
 801097e:	e021      	b.n	80109c4 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d103      	bne.n	801098e <osTimerStop+0x4e>
    stat = osErrorParameter;
 8010986:	f06f 0303 	mvn.w	r3, #3
 801098a:	61fb      	str	r3, [r7, #28]
 801098c:	e01a      	b.n	80109c4 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 801098e:	69b8      	ldr	r0, [r7, #24]
 8010990:	f004 f82e 	bl	80149f0 <xTimerIsTimerActive>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d103      	bne.n	80109a2 <osTimerStop+0x62>
      stat = osErrorResource;
 801099a:	f06f 0302 	mvn.w	r3, #2
 801099e:	61fb      	str	r3, [r7, #28]
 80109a0:	e010      	b.n	80109c4 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80109a2:	2300      	movs	r3, #0
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	2300      	movs	r3, #0
 80109a8:	2200      	movs	r2, #0
 80109aa:	2103      	movs	r1, #3
 80109ac:	69b8      	ldr	r0, [r7, #24]
 80109ae:	f003 fd5d 	bl	801446c <xTimerGenericCommand>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d102      	bne.n	80109be <osTimerStop+0x7e>
        stat = osOK;
 80109b8:	2300      	movs	r3, #0
 80109ba:	61fb      	str	r3, [r7, #28]
 80109bc:	e002      	b.n	80109c4 <osTimerStop+0x84>
      } else {
        stat = osError;
 80109be:	f04f 33ff 	mov.w	r3, #4294967295
 80109c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80109c4:	69fb      	ldr	r3, [r7, #28]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3720      	adds	r7, #32
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	20000c98 	.word	0x20000c98

080109d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b08a      	sub	sp, #40	; 0x28
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80109dc:	2300      	movs	r3, #0
 80109de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109e0:	f3ef 8305 	mrs	r3, IPSR
 80109e4:	613b      	str	r3, [r7, #16]
  return(result);
 80109e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f040 8085 	bne.w	8010af8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109ee:	f3ef 8310 	mrs	r3, PRIMASK
 80109f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d17e      	bne.n	8010af8 <osMutexNew+0x124>
 80109fa:	4b42      	ldr	r3, [pc, #264]	; (8010b04 <osMutexNew+0x130>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d105      	bne.n	8010a0e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a02:	f3ef 8311 	mrs	r3, BASEPRI
 8010a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d174      	bne.n	8010af8 <osMutexNew+0x124>
    if (attr != NULL) {
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d003      	beq.n	8010a1c <osMutexNew+0x48>
      type = attr->attr_bits;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	623b      	str	r3, [r7, #32]
 8010a1a:	e001      	b.n	8010a20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010a20:	6a3b      	ldr	r3, [r7, #32]
 8010a22:	f003 0301 	and.w	r3, r3, #1
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d002      	beq.n	8010a30 <osMutexNew+0x5c>
      rmtx = 1U;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	61fb      	str	r3, [r7, #28]
 8010a2e:	e001      	b.n	8010a34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010a34:	6a3b      	ldr	r3, [r7, #32]
 8010a36:	f003 0308 	and.w	r3, r3, #8
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d15c      	bne.n	8010af8 <osMutexNew+0x124>
      mem = -1;
 8010a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d015      	beq.n	8010a76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d006      	beq.n	8010a60 <osMutexNew+0x8c>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	2b4f      	cmp	r3, #79	; 0x4f
 8010a58:	d902      	bls.n	8010a60 <osMutexNew+0x8c>
          mem = 1;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	61bb      	str	r3, [r7, #24]
 8010a5e:	e00c      	b.n	8010a7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d108      	bne.n	8010a7a <osMutexNew+0xa6>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d104      	bne.n	8010a7a <osMutexNew+0xa6>
            mem = 0;
 8010a70:	2300      	movs	r3, #0
 8010a72:	61bb      	str	r3, [r7, #24]
 8010a74:	e001      	b.n	8010a7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d112      	bne.n	8010aa6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d007      	beq.n	8010a96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	689b      	ldr	r3, [r3, #8]
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	2004      	movs	r0, #4
 8010a8e:	f001 fa2f 	bl	8011ef0 <xQueueCreateMutexStatic>
 8010a92:	6278      	str	r0, [r7, #36]	; 0x24
 8010a94:	e016      	b.n	8010ac4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	f001 fa27 	bl	8011ef0 <xQueueCreateMutexStatic>
 8010aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8010aa4:	e00e      	b.n	8010ac4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10b      	bne.n	8010ac4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d004      	beq.n	8010abc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010ab2:	2004      	movs	r0, #4
 8010ab4:	f001 fa04 	bl	8011ec0 <xQueueCreateMutex>
 8010ab8:	6278      	str	r0, [r7, #36]	; 0x24
 8010aba:	e003      	b.n	8010ac4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010abc:	2001      	movs	r0, #1
 8010abe:	f001 f9ff 	bl	8011ec0 <xQueueCreateMutex>
 8010ac2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d00c      	beq.n	8010ae4 <osMutexNew+0x110>
        if (attr != NULL) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d003      	beq.n	8010ad8 <osMutexNew+0x104>
          name = attr->name;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	617b      	str	r3, [r7, #20]
 8010ad6:	e001      	b.n	8010adc <osMutexNew+0x108>
        } else {
          name = NULL;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010adc:	6979      	ldr	r1, [r7, #20]
 8010ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ae0:	f002 f8b4 	bl	8012c4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d006      	beq.n	8010af8 <osMutexNew+0x124>
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d003      	beq.n	8010af8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	f043 0301 	orr.w	r3, r3, #1
 8010af6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3728      	adds	r7, #40	; 0x28
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	20000c98 	.word	0x20000c98

08010b08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b088      	sub	sp, #32
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f023 0301 	bic.w	r3, r3, #1
 8010b18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b26:	f3ef 8305 	mrs	r3, IPSR
 8010b2a:	613b      	str	r3, [r7, #16]
  return(result);
 8010b2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10f      	bne.n	8010b52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b32:	f3ef 8310 	mrs	r3, PRIMASK
 8010b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d109      	bne.n	8010b52 <osMutexAcquire+0x4a>
 8010b3e:	4b20      	ldr	r3, [pc, #128]	; (8010bc0 <osMutexAcquire+0xb8>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d109      	bne.n	8010b5a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b46:	f3ef 8311 	mrs	r3, BASEPRI
 8010b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d003      	beq.n	8010b5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010b52:	f06f 0305 	mvn.w	r3, #5
 8010b56:	61fb      	str	r3, [r7, #28]
 8010b58:	e02c      	b.n	8010bb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d103      	bne.n	8010b68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010b60:	f06f 0303 	mvn.w	r3, #3
 8010b64:	61fb      	str	r3, [r7, #28]
 8010b66:	e025      	b.n	8010bb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d011      	beq.n	8010b92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	69b8      	ldr	r0, [r7, #24]
 8010b72:	f001 fa0b 	bl	8011f8c <xQueueTakeMutexRecursive>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d01b      	beq.n	8010bb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010b82:	f06f 0301 	mvn.w	r3, #1
 8010b86:	61fb      	str	r3, [r7, #28]
 8010b88:	e014      	b.n	8010bb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010b8a:	f06f 0302 	mvn.w	r3, #2
 8010b8e:	61fb      	str	r3, [r7, #28]
 8010b90:	e010      	b.n	8010bb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	69b8      	ldr	r0, [r7, #24]
 8010b96:	f001 fd89 	bl	80126ac <xQueueSemaphoreTake>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d009      	beq.n	8010bb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d003      	beq.n	8010bae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010ba6:	f06f 0301 	mvn.w	r3, #1
 8010baa:	61fb      	str	r3, [r7, #28]
 8010bac:	e002      	b.n	8010bb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010bae:	f06f 0302 	mvn.w	r3, #2
 8010bb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010bb4:	69fb      	ldr	r3, [r7, #28]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3720      	adds	r7, #32
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	20000c98 	.word	0x20000c98

08010bc4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f023 0301 	bic.w	r3, r3, #1
 8010bd2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010be0:	f3ef 8305 	mrs	r3, IPSR
 8010be4:	613b      	str	r3, [r7, #16]
  return(result);
 8010be6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10f      	bne.n	8010c0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bec:	f3ef 8310 	mrs	r3, PRIMASK
 8010bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d109      	bne.n	8010c0c <osMutexRelease+0x48>
 8010bf8:	4b19      	ldr	r3, [pc, #100]	; (8010c60 <osMutexRelease+0x9c>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2b02      	cmp	r3, #2
 8010bfe:	d109      	bne.n	8010c14 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c00:	f3ef 8311 	mrs	r3, BASEPRI
 8010c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d003      	beq.n	8010c14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010c0c:	f06f 0305 	mvn.w	r3, #5
 8010c10:	61fb      	str	r3, [r7, #28]
 8010c12:	e01f      	b.n	8010c54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d103      	bne.n	8010c22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010c1a:	f06f 0303 	mvn.w	r3, #3
 8010c1e:	61fb      	str	r3, [r7, #28]
 8010c20:	e018      	b.n	8010c54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d009      	beq.n	8010c3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010c28:	69b8      	ldr	r0, [r7, #24]
 8010c2a:	f001 f97c 	bl	8011f26 <xQueueGiveMutexRecursive>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d00f      	beq.n	8010c54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c34:	f06f 0302 	mvn.w	r3, #2
 8010c38:	61fb      	str	r3, [r7, #28]
 8010c3a:	e00b      	b.n	8010c54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	2200      	movs	r2, #0
 8010c40:	2100      	movs	r1, #0
 8010c42:	69b8      	ldr	r0, [r7, #24]
 8010c44:	f001 fa3e 	bl	80120c4 <xQueueGenericSend>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d002      	beq.n	8010c54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010c4e:	f06f 0302 	mvn.w	r3, #2
 8010c52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010c54:	69fb      	ldr	r3, [r7, #28]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	20000c98 	.word	0x20000c98

08010c64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b08c      	sub	sp, #48	; 0x30
 8010c68:	af02      	add	r7, sp, #8
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010c70:	2300      	movs	r3, #0
 8010c72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c74:	f3ef 8305 	mrs	r3, IPSR
 8010c78:	61bb      	str	r3, [r7, #24]
  return(result);
 8010c7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f040 8088 	bne.w	8010d92 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c82:	f3ef 8310 	mrs	r3, PRIMASK
 8010c86:	617b      	str	r3, [r7, #20]
  return(result);
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f040 8081 	bne.w	8010d92 <osSemaphoreNew+0x12e>
 8010c90:	4b42      	ldr	r3, [pc, #264]	; (8010d9c <osSemaphoreNew+0x138>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d105      	bne.n	8010ca4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c98:	f3ef 8311 	mrs	r3, BASEPRI
 8010c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d176      	bne.n	8010d92 <osSemaphoreNew+0x12e>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d073      	beq.n	8010d92 <osSemaphoreNew+0x12e>
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d86f      	bhi.n	8010d92 <osSemaphoreNew+0x12e>
    mem = -1;
 8010cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d015      	beq.n	8010cea <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d006      	beq.n	8010cd4 <osSemaphoreNew+0x70>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	2b4f      	cmp	r3, #79	; 0x4f
 8010ccc:	d902      	bls.n	8010cd4 <osSemaphoreNew+0x70>
        mem = 1;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	e00c      	b.n	8010cee <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d108      	bne.n	8010cee <osSemaphoreNew+0x8a>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d104      	bne.n	8010cee <osSemaphoreNew+0x8a>
          mem = 0;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	623b      	str	r3, [r7, #32]
 8010ce8:	e001      	b.n	8010cee <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf4:	d04d      	beq.n	8010d92 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d129      	bne.n	8010d50 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d10b      	bne.n	8010d1a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	2303      	movs	r3, #3
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	2100      	movs	r1, #0
 8010d10:	2001      	movs	r0, #1
 8010d12:	f000 ffe9 	bl	8011ce8 <xQueueGenericCreateStatic>
 8010d16:	6278      	str	r0, [r7, #36]	; 0x24
 8010d18:	e005      	b.n	8010d26 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010d1a:	2203      	movs	r2, #3
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	2001      	movs	r0, #1
 8010d20:	f001 f854 	bl	8011dcc <xQueueGenericCreate>
 8010d24:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d022      	beq.n	8010d72 <osSemaphoreNew+0x10e>
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d01f      	beq.n	8010d72 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010d32:	2300      	movs	r3, #0
 8010d34:	2200      	movs	r2, #0
 8010d36:	2100      	movs	r1, #0
 8010d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d3a:	f001 f9c3 	bl	80120c4 <xQueueGenericSend>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d016      	beq.n	8010d72 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8010d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d46:	f001 fe36 	bl	80129b6 <vQueueDelete>
            hSemaphore = NULL;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8010d4e:	e010      	b.n	8010d72 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d108      	bne.n	8010d68 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f001 f949 	bl	8011ff6 <xQueueCreateCountingSemaphoreStatic>
 8010d64:	6278      	str	r0, [r7, #36]	; 0x24
 8010d66:	e004      	b.n	8010d72 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010d68:	68b9      	ldr	r1, [r7, #8]
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f001 f978 	bl	8012060 <xQueueCreateCountingSemaphore>
 8010d70:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00c      	beq.n	8010d92 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <osSemaphoreNew+0x122>
          name = attr->name;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	e001      	b.n	8010d8a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010d8a:	69f9      	ldr	r1, [r7, #28]
 8010d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d8e:	f001 ff5d 	bl	8012c4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3728      	adds	r7, #40	; 0x28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20000c98 	.word	0x20000c98

08010da0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b088      	sub	sp, #32
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010dae:	2300      	movs	r3, #0
 8010db0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d103      	bne.n	8010dc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010db8:	f06f 0303 	mvn.w	r3, #3
 8010dbc:	61fb      	str	r3, [r7, #28]
 8010dbe:	e04b      	b.n	8010e58 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dc0:	f3ef 8305 	mrs	r3, IPSR
 8010dc4:	617b      	str	r3, [r7, #20]
  return(result);
 8010dc6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10f      	bne.n	8010dec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8010dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <osSemaphoreAcquire+0x4c>
 8010dd8:	4b22      	ldr	r3, [pc, #136]	; (8010e64 <osSemaphoreAcquire+0xc4>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d128      	bne.n	8010e32 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010de0:	f3ef 8311 	mrs	r3, BASEPRI
 8010de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d022      	beq.n	8010e32 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d003      	beq.n	8010dfa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010df2:	f06f 0303 	mvn.w	r3, #3
 8010df6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010df8:	e02d      	b.n	8010e56 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010dfe:	f107 0308 	add.w	r3, r7, #8
 8010e02:	461a      	mov	r2, r3
 8010e04:	2100      	movs	r1, #0
 8010e06:	69b8      	ldr	r0, [r7, #24]
 8010e08:	f001 fd58 	bl	80128bc <xQueueReceiveFromISR>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d003      	beq.n	8010e1a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010e12:	f06f 0302 	mvn.w	r3, #2
 8010e16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010e18:	e01d      	b.n	8010e56 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d01a      	beq.n	8010e56 <osSemaphoreAcquire+0xb6>
 8010e20:	4b11      	ldr	r3, [pc, #68]	; (8010e68 <osSemaphoreAcquire+0xc8>)
 8010e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010e30:	e011      	b.n	8010e56 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	69b8      	ldr	r0, [r7, #24]
 8010e36:	f001 fc39 	bl	80126ac <xQueueSemaphoreTake>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d00b      	beq.n	8010e58 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d003      	beq.n	8010e4e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010e46:	f06f 0301 	mvn.w	r3, #1
 8010e4a:	61fb      	str	r3, [r7, #28]
 8010e4c:	e004      	b.n	8010e58 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010e4e:	f06f 0302 	mvn.w	r3, #2
 8010e52:	61fb      	str	r3, [r7, #28]
 8010e54:	e000      	b.n	8010e58 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010e56:	bf00      	nop
      }
    }
  }

  return (stat);
 8010e58:	69fb      	ldr	r3, [r7, #28]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3720      	adds	r7, #32
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20000c98 	.word	0x20000c98
 8010e68:	e000ed04 	.word	0xe000ed04

08010e6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b088      	sub	sp, #32
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d103      	bne.n	8010e8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010e82:	f06f 0303 	mvn.w	r3, #3
 8010e86:	61fb      	str	r3, [r7, #28]
 8010e88:	e03e      	b.n	8010f08 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e8a:	f3ef 8305 	mrs	r3, IPSR
 8010e8e:	617b      	str	r3, [r7, #20]
  return(result);
 8010e90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d10f      	bne.n	8010eb6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e96:	f3ef 8310 	mrs	r3, PRIMASK
 8010e9a:	613b      	str	r3, [r7, #16]
  return(result);
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d109      	bne.n	8010eb6 <osSemaphoreRelease+0x4a>
 8010ea2:	4b1c      	ldr	r3, [pc, #112]	; (8010f14 <osSemaphoreRelease+0xa8>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d120      	bne.n	8010eec <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8010eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d01a      	beq.n	8010eec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010eba:	f107 0308 	add.w	r3, r7, #8
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	69b8      	ldr	r0, [r7, #24]
 8010ec2:	f001 fa8d 	bl	80123e0 <xQueueGiveFromISR>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d003      	beq.n	8010ed4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010ecc:	f06f 0302 	mvn.w	r3, #2
 8010ed0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010ed2:	e018      	b.n	8010f06 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d015      	beq.n	8010f06 <osSemaphoreRelease+0x9a>
 8010eda:	4b0f      	ldr	r3, [pc, #60]	; (8010f18 <osSemaphoreRelease+0xac>)
 8010edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ee0:	601a      	str	r2, [r3, #0]
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010eea:	e00c      	b.n	8010f06 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010eec:	2300      	movs	r3, #0
 8010eee:	2200      	movs	r2, #0
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	69b8      	ldr	r0, [r7, #24]
 8010ef4:	f001 f8e6 	bl	80120c4 <xQueueGenericSend>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d004      	beq.n	8010f08 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010efe:	f06f 0302 	mvn.w	r3, #2
 8010f02:	61fb      	str	r3, [r7, #28]
 8010f04:	e000      	b.n	8010f08 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010f06:	bf00      	nop
    }
  }

  return (stat);
 8010f08:	69fb      	ldr	r3, [r7, #28]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3720      	adds	r7, #32
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	20000c98 	.word	0x20000c98
 8010f18:	e000ed04 	.word	0xe000ed04

08010f1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b08c      	sub	sp, #48	; 0x30
 8010f20:	af02      	add	r7, sp, #8
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f2c:	f3ef 8305 	mrs	r3, IPSR
 8010f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d170      	bne.n	801101a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f38:	f3ef 8310 	mrs	r3, PRIMASK
 8010f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d16a      	bne.n	801101a <osMessageQueueNew+0xfe>
 8010f44:	4b37      	ldr	r3, [pc, #220]	; (8011024 <osMessageQueueNew+0x108>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d105      	bne.n	8010f58 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8010f50:	613b      	str	r3, [r7, #16]
  return(result);
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d160      	bne.n	801101a <osMessageQueueNew+0xfe>
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d05d      	beq.n	801101a <osMessageQueueNew+0xfe>
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d05a      	beq.n	801101a <osMessageQueueNew+0xfe>
    mem = -1;
 8010f64:	f04f 33ff 	mov.w	r3, #4294967295
 8010f68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d029      	beq.n	8010fc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d012      	beq.n	8010f9e <osMessageQueueNew+0x82>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	2b4f      	cmp	r3, #79	; 0x4f
 8010f7e:	d90e      	bls.n	8010f9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00a      	beq.n	8010f9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	695a      	ldr	r2, [r3, #20]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	68b9      	ldr	r1, [r7, #8]
 8010f90:	fb01 f303 	mul.w	r3, r1, r3
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d302      	bcc.n	8010f9e <osMessageQueueNew+0x82>
        mem = 1;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	623b      	str	r3, [r7, #32]
 8010f9c:	e014      	b.n	8010fc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d110      	bne.n	8010fc8 <osMessageQueueNew+0xac>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10c      	bne.n	8010fc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d108      	bne.n	8010fc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d104      	bne.n	8010fc8 <osMessageQueueNew+0xac>
          mem = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	623b      	str	r3, [r7, #32]
 8010fc2:	e001      	b.n	8010fc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010fc8:	6a3b      	ldr	r3, [r7, #32]
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d10c      	bne.n	8010fe8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	691a      	ldr	r2, [r3, #16]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6899      	ldr	r1, [r3, #8]
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	460b      	mov	r3, r1
 8010fdc:	68b9      	ldr	r1, [r7, #8]
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	f000 fe82 	bl	8011ce8 <xQueueGenericCreateStatic>
 8010fe4:	6278      	str	r0, [r7, #36]	; 0x24
 8010fe6:	e008      	b.n	8010ffa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d105      	bne.n	8010ffa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010fee:	2200      	movs	r2, #0
 8010ff0:	68b9      	ldr	r1, [r7, #8]
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	f000 feea 	bl	8011dcc <xQueueGenericCreate>
 8010ff8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00c      	beq.n	801101a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d003      	beq.n	801100e <osMessageQueueNew+0xf2>
        name = attr->name;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	61fb      	str	r3, [r7, #28]
 801100c:	e001      	b.n	8011012 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8011012:	69f9      	ldr	r1, [r7, #28]
 8011014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011016:	f001 fe19 	bl	8012c4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801101c:	4618      	mov	r0, r3
 801101e:	3728      	adds	r7, #40	; 0x28
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20000c98 	.word	0x20000c98

08011028 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011028:	b580      	push	{r7, lr}
 801102a:	b08a      	sub	sp, #40	; 0x28
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	603b      	str	r3, [r7, #0]
 8011034:	4613      	mov	r3, r2
 8011036:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801103c:	2300      	movs	r3, #0
 801103e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011040:	f3ef 8305 	mrs	r3, IPSR
 8011044:	61fb      	str	r3, [r7, #28]
  return(result);
 8011046:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011048:	2b00      	cmp	r3, #0
 801104a:	d10f      	bne.n	801106c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801104c:	f3ef 8310 	mrs	r3, PRIMASK
 8011050:	61bb      	str	r3, [r7, #24]
  return(result);
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d109      	bne.n	801106c <osMessageQueuePut+0x44>
 8011058:	4b2b      	ldr	r3, [pc, #172]	; (8011108 <osMessageQueuePut+0xe0>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	2b02      	cmp	r3, #2
 801105e:	d12e      	bne.n	80110be <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011060:	f3ef 8311 	mrs	r3, BASEPRI
 8011064:	617b      	str	r3, [r7, #20]
  return(result);
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d028      	beq.n	80110be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801106c:	6a3b      	ldr	r3, [r7, #32]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d005      	beq.n	801107e <osMessageQueuePut+0x56>
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <osMessageQueuePut+0x56>
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d003      	beq.n	8011086 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801107e:	f06f 0303 	mvn.w	r3, #3
 8011082:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011084:	e039      	b.n	80110fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8011086:	2300      	movs	r3, #0
 8011088:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801108a:	f107 0210 	add.w	r2, r7, #16
 801108e:	2300      	movs	r3, #0
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	6a38      	ldr	r0, [r7, #32]
 8011094:	f001 f910 	bl	80122b8 <xQueueGenericSendFromISR>
 8011098:	4603      	mov	r3, r0
 801109a:	2b01      	cmp	r3, #1
 801109c:	d003      	beq.n	80110a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801109e:	f06f 0302 	mvn.w	r3, #2
 80110a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110a4:	e029      	b.n	80110fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d026      	beq.n	80110fa <osMessageQueuePut+0xd2>
 80110ac:	4b17      	ldr	r3, [pc, #92]	; (801110c <osMessageQueuePut+0xe4>)
 80110ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b2:	601a      	str	r2, [r3, #0]
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110bc:	e01d      	b.n	80110fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80110be:	6a3b      	ldr	r3, [r7, #32]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <osMessageQueuePut+0xa2>
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d103      	bne.n	80110d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80110ca:	f06f 0303 	mvn.w	r3, #3
 80110ce:	627b      	str	r3, [r7, #36]	; 0x24
 80110d0:	e014      	b.n	80110fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110d2:	2300      	movs	r3, #0
 80110d4:	683a      	ldr	r2, [r7, #0]
 80110d6:	68b9      	ldr	r1, [r7, #8]
 80110d8:	6a38      	ldr	r0, [r7, #32]
 80110da:	f000 fff3 	bl	80120c4 <xQueueGenericSend>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d00b      	beq.n	80110fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d003      	beq.n	80110f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80110ea:	f06f 0301 	mvn.w	r3, #1
 80110ee:	627b      	str	r3, [r7, #36]	; 0x24
 80110f0:	e004      	b.n	80110fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80110f2:	f06f 0302 	mvn.w	r3, #2
 80110f6:	627b      	str	r3, [r7, #36]	; 0x24
 80110f8:	e000      	b.n	80110fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80110fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80110fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3728      	adds	r7, #40	; 0x28
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	20000c98 	.word	0x20000c98
 801110c:	e000ed04 	.word	0xe000ed04

08011110 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b08a      	sub	sp, #40	; 0x28
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011122:	2300      	movs	r3, #0
 8011124:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011126:	f3ef 8305 	mrs	r3, IPSR
 801112a:	61fb      	str	r3, [r7, #28]
  return(result);
 801112c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801112e:	2b00      	cmp	r3, #0
 8011130:	d10f      	bne.n	8011152 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011132:	f3ef 8310 	mrs	r3, PRIMASK
 8011136:	61bb      	str	r3, [r7, #24]
  return(result);
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d109      	bne.n	8011152 <osMessageQueueGet+0x42>
 801113e:	4b2b      	ldr	r3, [pc, #172]	; (80111ec <osMessageQueueGet+0xdc>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b02      	cmp	r3, #2
 8011144:	d12e      	bne.n	80111a4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011146:	f3ef 8311 	mrs	r3, BASEPRI
 801114a:	617b      	str	r3, [r7, #20]
  return(result);
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d028      	beq.n	80111a4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d005      	beq.n	8011164 <osMessageQueueGet+0x54>
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d002      	beq.n	8011164 <osMessageQueueGet+0x54>
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8011164:	f06f 0303 	mvn.w	r3, #3
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801116a:	e038      	b.n	80111de <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801116c:	2300      	movs	r3, #0
 801116e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011170:	f107 0310 	add.w	r3, r7, #16
 8011174:	461a      	mov	r2, r3
 8011176:	68b9      	ldr	r1, [r7, #8]
 8011178:	6a38      	ldr	r0, [r7, #32]
 801117a:	f001 fb9f 	bl	80128bc <xQueueReceiveFromISR>
 801117e:	4603      	mov	r3, r0
 8011180:	2b01      	cmp	r3, #1
 8011182:	d003      	beq.n	801118c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8011184:	f06f 0302 	mvn.w	r3, #2
 8011188:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801118a:	e028      	b.n	80111de <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d025      	beq.n	80111de <osMessageQueueGet+0xce>
 8011192:	4b17      	ldr	r3, [pc, #92]	; (80111f0 <osMessageQueueGet+0xe0>)
 8011194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111a2:	e01c      	b.n	80111de <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80111a4:	6a3b      	ldr	r3, [r7, #32]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <osMessageQueueGet+0xa0>
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d103      	bne.n	80111b8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80111b0:	f06f 0303 	mvn.w	r3, #3
 80111b4:	627b      	str	r3, [r7, #36]	; 0x24
 80111b6:	e013      	b.n	80111e0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80111b8:	683a      	ldr	r2, [r7, #0]
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	6a38      	ldr	r0, [r7, #32]
 80111be:	f001 f999 	bl	80124f4 <xQueueReceive>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d00b      	beq.n	80111e0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d003      	beq.n	80111d6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80111ce:	f06f 0301 	mvn.w	r3, #1
 80111d2:	627b      	str	r3, [r7, #36]	; 0x24
 80111d4:	e004      	b.n	80111e0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80111d6:	f06f 0302 	mvn.w	r3, #2
 80111da:	627b      	str	r3, [r7, #36]	; 0x24
 80111dc:	e000      	b.n	80111e0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3728      	adds	r7, #40	; 0x28
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	20000c98 	.word	0x20000c98
 80111f0:	e000ed04 	.word	0xe000ed04

080111f4 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011200:	f3ef 8305 	mrs	r3, IPSR
 8011204:	617b      	str	r3, [r7, #20]
  return(result);
 8011206:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011208:	2b00      	cmp	r3, #0
 801120a:	d10f      	bne.n	801122c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801120c:	f3ef 8310 	mrs	r3, PRIMASK
 8011210:	613b      	str	r3, [r7, #16]
  return(result);
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d109      	bne.n	801122c <osMessageQueueReset+0x38>
 8011218:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <osMessageQueueReset+0x64>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b02      	cmp	r3, #2
 801121e:	d109      	bne.n	8011234 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011220:	f3ef 8311 	mrs	r3, BASEPRI
 8011224:	60fb      	str	r3, [r7, #12]
  return(result);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d003      	beq.n	8011234 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 801122c:	f06f 0305 	mvn.w	r3, #5
 8011230:	61fb      	str	r3, [r7, #28]
 8011232:	e00c      	b.n	801124e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d103      	bne.n	8011242 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 801123a:	f06f 0303 	mvn.w	r3, #3
 801123e:	61fb      	str	r3, [r7, #28]
 8011240:	e005      	b.n	801124e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8011242:	2300      	movs	r3, #0
 8011244:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8011246:	2100      	movs	r1, #0
 8011248:	69b8      	ldr	r0, [r7, #24]
 801124a:	f000 fce5 	bl	8011c18 <xQueueGenericReset>
  }

  return (stat);
 801124e:	69fb      	ldr	r3, [r7, #28]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3720      	adds	r7, #32
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20000c98 	.word	0x20000c98

0801125c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	4a07      	ldr	r2, [pc, #28]	; (8011288 <vApplicationGetIdleTaskMemory+0x2c>)
 801126c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	4a06      	ldr	r2, [pc, #24]	; (801128c <vApplicationGetIdleTaskMemory+0x30>)
 8011272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f44f 7200 	mov.w	r2, #512	; 0x200
 801127a:	601a      	str	r2, [r3, #0]
}
 801127c:	bf00      	nop
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	20000c9c 	.word	0x20000c9c
 801128c:	20000d00 	.word	0x20000d00

08011290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	4a07      	ldr	r2, [pc, #28]	; (80112bc <vApplicationGetTimerTaskMemory+0x2c>)
 80112a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <vApplicationGetTimerTaskMemory+0x30>)
 80112a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112ae:	601a      	str	r2, [r3, #0]
}
 80112b0:	bf00      	nop
 80112b2:	3714      	adds	r7, #20
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	20001500 	.word	0x20001500
 80112c0:	20001564 	.word	0x20001564

080112c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08a      	sub	sp, #40	; 0x28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80112cc:	2300      	movs	r3, #0
 80112ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80112d0:	f001 ff76 	bl	80131c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80112d4:	4b59      	ldr	r3, [pc, #356]	; (801143c <pvPortMalloc+0x178>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d101      	bne.n	80112e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80112dc:	f000 f910 	bl	8011500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80112e0:	4b57      	ldr	r3, [pc, #348]	; (8011440 <pvPortMalloc+0x17c>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4013      	ands	r3, r2
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f040 808c 	bne.w	8011406 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d01c      	beq.n	801132e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80112f4:	2208      	movs	r2, #8
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4413      	add	r3, r2
 80112fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f003 0307 	and.w	r3, r3, #7
 8011302:	2b00      	cmp	r3, #0
 8011304:	d013      	beq.n	801132e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f023 0307 	bic.w	r3, r3, #7
 801130c:	3308      	adds	r3, #8
 801130e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f003 0307 	and.w	r3, r3, #7
 8011316:	2b00      	cmp	r3, #0
 8011318:	d009      	beq.n	801132e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	617b      	str	r3, [r7, #20]
 801132c:	e7fe      	b.n	801132c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d068      	beq.n	8011406 <pvPortMalloc+0x142>
 8011334:	4b43      	ldr	r3, [pc, #268]	; (8011444 <pvPortMalloc+0x180>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	429a      	cmp	r2, r3
 801133c:	d863      	bhi.n	8011406 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801133e:	4b42      	ldr	r3, [pc, #264]	; (8011448 <pvPortMalloc+0x184>)
 8011340:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011342:	4b41      	ldr	r3, [pc, #260]	; (8011448 <pvPortMalloc+0x184>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011348:	e004      	b.n	8011354 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	429a      	cmp	r2, r3
 801135c:	d903      	bls.n	8011366 <pvPortMalloc+0xa2>
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1f1      	bne.n	801134a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011366:	4b35      	ldr	r3, [pc, #212]	; (801143c <pvPortMalloc+0x178>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136c:	429a      	cmp	r2, r3
 801136e:	d04a      	beq.n	8011406 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2208      	movs	r2, #8
 8011376:	4413      	add	r3, r2
 8011378:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	6a3b      	ldr	r3, [r7, #32]
 8011380:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	685a      	ldr	r2, [r3, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	1ad2      	subs	r2, r2, r3
 801138a:	2308      	movs	r3, #8
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	429a      	cmp	r2, r3
 8011390:	d91e      	bls.n	80113d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4413      	add	r3, r2
 8011398:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	f003 0307 	and.w	r3, r3, #7
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d009      	beq.n	80113b8 <pvPortMalloc+0xf4>
 80113a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a8:	f383 8811 	msr	BASEPRI, r3
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	613b      	str	r3, [r7, #16]
 80113b6:	e7fe      	b.n	80113b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80113b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ba:	685a      	ldr	r2, [r3, #4]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	1ad2      	subs	r2, r2, r3
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80113ca:	69b8      	ldr	r0, [r7, #24]
 80113cc:	f000 f8fc 	bl	80115c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80113d0:	4b1c      	ldr	r3, [pc, #112]	; (8011444 <pvPortMalloc+0x180>)
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	4a1a      	ldr	r2, [pc, #104]	; (8011444 <pvPortMalloc+0x180>)
 80113dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80113de:	4b19      	ldr	r3, [pc, #100]	; (8011444 <pvPortMalloc+0x180>)
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	4b1a      	ldr	r3, [pc, #104]	; (801144c <pvPortMalloc+0x188>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d203      	bcs.n	80113f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80113ea:	4b16      	ldr	r3, [pc, #88]	; (8011444 <pvPortMalloc+0x180>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a17      	ldr	r2, [pc, #92]	; (801144c <pvPortMalloc+0x188>)
 80113f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	4b12      	ldr	r3, [pc, #72]	; (8011440 <pvPortMalloc+0x17c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	431a      	orrs	r2, r3
 80113fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011406:	f001 ff21 	bl	801324c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011410:	f7ef ff36 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	f003 0307 	and.w	r3, r3, #7
 801141a:	2b00      	cmp	r3, #0
 801141c:	d009      	beq.n	8011432 <pvPortMalloc+0x16e>
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e7fe      	b.n	8011430 <pvPortMalloc+0x16c>
	return pvReturn;
 8011432:	69fb      	ldr	r3, [r7, #28]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3728      	adds	r7, #40	; 0x28
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	20026f5c 	.word	0x20026f5c
 8011440:	20026f68 	.word	0x20026f68
 8011444:	20026f60 	.word	0x20026f60
 8011448:	20026f54 	.word	0x20026f54
 801144c:	20026f64 	.word	0x20026f64

08011450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d046      	beq.n	80114f0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011462:	2308      	movs	r3, #8
 8011464:	425b      	negs	r3, r3
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	4413      	add	r3, r2
 801146a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	685a      	ldr	r2, [r3, #4]
 8011474:	4b20      	ldr	r3, [pc, #128]	; (80114f8 <vPortFree+0xa8>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4013      	ands	r3, r2
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <vPortFree+0x42>
 801147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	60fb      	str	r3, [r7, #12]
 8011490:	e7fe      	b.n	8011490 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <vPortFree+0x5e>
 801149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	60bb      	str	r3, [r7, #8]
 80114ac:	e7fe      	b.n	80114ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	4b11      	ldr	r3, [pc, #68]	; (80114f8 <vPortFree+0xa8>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4013      	ands	r3, r2
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d019      	beq.n	80114f0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d115      	bne.n	80114f0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	685a      	ldr	r2, [r3, #4]
 80114c8:	4b0b      	ldr	r3, [pc, #44]	; (80114f8 <vPortFree+0xa8>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	43db      	mvns	r3, r3
 80114ce:	401a      	ands	r2, r3
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80114d4:	f001 fe74 	bl	80131c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	4b07      	ldr	r3, [pc, #28]	; (80114fc <vPortFree+0xac>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4413      	add	r3, r2
 80114e2:	4a06      	ldr	r2, [pc, #24]	; (80114fc <vPortFree+0xac>)
 80114e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80114e6:	6938      	ldr	r0, [r7, #16]
 80114e8:	f000 f86e 	bl	80115c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80114ec:	f001 feae 	bl	801324c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80114f0:	bf00      	nop
 80114f2:	3718      	adds	r7, #24
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	20026f68 	.word	0x20026f68
 80114fc:	20026f60 	.word	0x20026f60

08011500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011506:	4b29      	ldr	r3, [pc, #164]	; (80115ac <prvHeapInit+0xac>)
 8011508:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801150a:	4b29      	ldr	r3, [pc, #164]	; (80115b0 <prvHeapInit+0xb0>)
 801150c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f003 0307 	and.w	r3, r3, #7
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00c      	beq.n	8011532 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	3307      	adds	r3, #7
 801151c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f023 0307 	bic.w	r3, r3, #7
 8011524:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011526:	68ba      	ldr	r2, [r7, #8]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	4a20      	ldr	r2, [pc, #128]	; (80115b0 <prvHeapInit+0xb0>)
 801152e:	4413      	add	r3, r2
 8011530:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011536:	4a1f      	ldr	r2, [pc, #124]	; (80115b4 <prvHeapInit+0xb4>)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801153c:	4b1d      	ldr	r3, [pc, #116]	; (80115b4 <prvHeapInit+0xb4>)
 801153e:	2200      	movs	r2, #0
 8011540:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	4413      	add	r3, r2
 8011548:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801154a:	2208      	movs	r2, #8
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	1a9b      	subs	r3, r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f023 0307 	bic.w	r3, r3, #7
 8011558:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	4a16      	ldr	r2, [pc, #88]	; (80115b8 <prvHeapInit+0xb8>)
 801155e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011560:	4b15      	ldr	r3, [pc, #84]	; (80115b8 <prvHeapInit+0xb8>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2200      	movs	r2, #0
 8011566:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011568:	4b13      	ldr	r3, [pc, #76]	; (80115b8 <prvHeapInit+0xb8>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2200      	movs	r2, #0
 801156e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	1ad2      	subs	r2, r2, r3
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801157e:	4b0e      	ldr	r3, [pc, #56]	; (80115b8 <prvHeapInit+0xb8>)
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	4a0c      	ldr	r2, [pc, #48]	; (80115bc <prvHeapInit+0xbc>)
 801158c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	4a0b      	ldr	r2, [pc, #44]	; (80115c0 <prvHeapInit+0xc0>)
 8011594:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011596:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <prvHeapInit+0xc4>)
 8011598:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801159c:	601a      	str	r2, [r3, #0]
}
 801159e:	bf00      	nop
 80115a0:	3714      	adds	r7, #20
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	000249f0 	.word	0x000249f0
 80115b0:	20002564 	.word	0x20002564
 80115b4:	20026f54 	.word	0x20026f54
 80115b8:	20026f5c 	.word	0x20026f5c
 80115bc:	20026f64 	.word	0x20026f64
 80115c0:	20026f60 	.word	0x20026f60
 80115c4:	20026f68 	.word	0x20026f68

080115c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115d0:	4b28      	ldr	r3, [pc, #160]	; (8011674 <prvInsertBlockIntoFreeList+0xac>)
 80115d2:	60fb      	str	r3, [r7, #12]
 80115d4:	e002      	b.n	80115dc <prvInsertBlockIntoFreeList+0x14>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	60fb      	str	r3, [r7, #12]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d8f7      	bhi.n	80115d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	4413      	add	r3, r2
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d108      	bne.n	801160a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	441a      	add	r2, r3
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	68ba      	ldr	r2, [r7, #8]
 8011614:	441a      	add	r2, r3
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	429a      	cmp	r2, r3
 801161c:	d118      	bne.n	8011650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	4b15      	ldr	r3, [pc, #84]	; (8011678 <prvInsertBlockIntoFreeList+0xb0>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	429a      	cmp	r2, r3
 8011628:	d00d      	beq.n	8011646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	441a      	add	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
 8011644:	e008      	b.n	8011658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011646:	4b0c      	ldr	r3, [pc, #48]	; (8011678 <prvInsertBlockIntoFreeList+0xb0>)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	601a      	str	r2, [r3, #0]
 801164e:	e003      	b.n	8011658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	429a      	cmp	r2, r3
 801165e:	d002      	beq.n	8011666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011666:	bf00      	nop
 8011668:	3714      	adds	r7, #20
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	20026f54 	.word	0x20026f54
 8011678:	20026f5c 	.word	0x20026f5c

0801167c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f103 0208 	add.w	r2, r3, #8
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f04f 32ff 	mov.w	r2, #4294967295
 8011694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f103 0208 	add.w	r2, r3, #8
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f103 0208 	add.w	r2, r3, #8
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116ca:	bf00      	nop
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116d6:	b480      	push	{r7}
 80116d8:	b085      	sub	sp, #20
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	689a      	ldr	r2, [r3, #8]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	1c5a      	adds	r2, r3, #1
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	601a      	str	r2, [r3, #0]
}
 8011712:	bf00      	nop
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801171e:	b480      	push	{r7}
 8011720:	b085      	sub	sp, #20
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011734:	d103      	bne.n	801173e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	691b      	ldr	r3, [r3, #16]
 801173a:	60fb      	str	r3, [r7, #12]
 801173c:	e00c      	b.n	8011758 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	3308      	adds	r3, #8
 8011742:	60fb      	str	r3, [r7, #12]
 8011744:	e002      	b.n	801174c <vListInsert+0x2e>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	60fb      	str	r3, [r7, #12]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	429a      	cmp	r2, r3
 8011756:	d2f6      	bcs.n	8011746 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	683a      	ldr	r2, [r7, #0]
 8011766:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
}
 8011784:	bf00      	nop
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	691b      	ldr	r3, [r3, #16]
 801179c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	6892      	ldr	r2, [r2, #8]
 80117a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	6852      	ldr	r2, [r2, #4]
 80117b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d103      	bne.n	80117c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	689a      	ldr	r2, [r3, #8]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	1e5a      	subs	r2, r3, #1
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3714      	adds	r7, #20
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	60b9      	str	r1, [r7, #8]
 80117ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	3b04      	subs	r3, #4
 80117f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	3b04      	subs	r3, #4
 8011802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	f023 0201 	bic.w	r2, r3, #1
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3b04      	subs	r3, #4
 8011812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011814:	4a0c      	ldr	r2, [pc, #48]	; (8011848 <pxPortInitialiseStack+0x64>)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3b14      	subs	r3, #20
 801181e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3b04      	subs	r3, #4
 801182a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f06f 0202 	mvn.w	r2, #2
 8011832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	3b20      	subs	r3, #32
 8011838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801183a:	68fb      	ldr	r3, [r7, #12]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3714      	adds	r7, #20
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	0801184d 	.word	0x0801184d

0801184c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <prvTaskExitError+0x50>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801185e:	d009      	beq.n	8011874 <prvTaskExitError+0x28>
 8011860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011864:	f383 8811 	msr	BASEPRI, r3
 8011868:	f3bf 8f6f 	isb	sy
 801186c:	f3bf 8f4f 	dsb	sy
 8011870:	60fb      	str	r3, [r7, #12]
 8011872:	e7fe      	b.n	8011872 <prvTaskExitError+0x26>
 8011874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011886:	bf00      	nop
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d0fc      	beq.n	8011888 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801188e:	bf00      	nop
 8011890:	3714      	adds	r7, #20
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	20000084 	.word	0x20000084

080118a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118a0:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <pxCurrentTCBConst2>)
 80118a2:	6819      	ldr	r1, [r3, #0]
 80118a4:	6808      	ldr	r0, [r1, #0]
 80118a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118aa:	f380 8809 	msr	PSP, r0
 80118ae:	f3bf 8f6f 	isb	sy
 80118b2:	f04f 0000 	mov.w	r0, #0
 80118b6:	f380 8811 	msr	BASEPRI, r0
 80118ba:	4770      	bx	lr
 80118bc:	f3af 8000 	nop.w

080118c0 <pxCurrentTCBConst2>:
 80118c0:	20026f74 	.word	0x20026f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118c4:	bf00      	nop
 80118c6:	bf00      	nop

080118c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118c8:	4808      	ldr	r0, [pc, #32]	; (80118ec <prvPortStartFirstTask+0x24>)
 80118ca:	6800      	ldr	r0, [r0, #0]
 80118cc:	6800      	ldr	r0, [r0, #0]
 80118ce:	f380 8808 	msr	MSP, r0
 80118d2:	f04f 0000 	mov.w	r0, #0
 80118d6:	f380 8814 	msr	CONTROL, r0
 80118da:	b662      	cpsie	i
 80118dc:	b661      	cpsie	f
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	df00      	svc	0
 80118e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118ea:	bf00      	nop
 80118ec:	e000ed08 	.word	0xe000ed08

080118f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80118f6:	4b44      	ldr	r3, [pc, #272]	; (8011a08 <xPortStartScheduler+0x118>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4a44      	ldr	r2, [pc, #272]	; (8011a0c <xPortStartScheduler+0x11c>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d109      	bne.n	8011914 <xPortStartScheduler+0x24>
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	613b      	str	r3, [r7, #16]
 8011912:	e7fe      	b.n	8011912 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011914:	4b3c      	ldr	r3, [pc, #240]	; (8011a08 <xPortStartScheduler+0x118>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a3d      	ldr	r2, [pc, #244]	; (8011a10 <xPortStartScheduler+0x120>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d109      	bne.n	8011932 <xPortStartScheduler+0x42>
 801191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	60fb      	str	r3, [r7, #12]
 8011930:	e7fe      	b.n	8011930 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011932:	4b38      	ldr	r3, [pc, #224]	; (8011a14 <xPortStartScheduler+0x124>)
 8011934:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	b2db      	uxtb	r3, r3
 801193c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	22ff      	movs	r2, #255	; 0xff
 8011942:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	b2db      	uxtb	r3, r3
 801194a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801194c:	78fb      	ldrb	r3, [r7, #3]
 801194e:	b2db      	uxtb	r3, r3
 8011950:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011954:	b2da      	uxtb	r2, r3
 8011956:	4b30      	ldr	r3, [pc, #192]	; (8011a18 <xPortStartScheduler+0x128>)
 8011958:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801195a:	4b30      	ldr	r3, [pc, #192]	; (8011a1c <xPortStartScheduler+0x12c>)
 801195c:	2207      	movs	r2, #7
 801195e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011960:	e009      	b.n	8011976 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011962:	4b2e      	ldr	r3, [pc, #184]	; (8011a1c <xPortStartScheduler+0x12c>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	3b01      	subs	r3, #1
 8011968:	4a2c      	ldr	r2, [pc, #176]	; (8011a1c <xPortStartScheduler+0x12c>)
 801196a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	b2db      	uxtb	r3, r3
 8011970:	005b      	lsls	r3, r3, #1
 8011972:	b2db      	uxtb	r3, r3
 8011974:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011976:	78fb      	ldrb	r3, [r7, #3]
 8011978:	b2db      	uxtb	r3, r3
 801197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801197e:	2b80      	cmp	r3, #128	; 0x80
 8011980:	d0ef      	beq.n	8011962 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011982:	4b26      	ldr	r3, [pc, #152]	; (8011a1c <xPortStartScheduler+0x12c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f1c3 0307 	rsb	r3, r3, #7
 801198a:	2b04      	cmp	r3, #4
 801198c:	d009      	beq.n	80119a2 <xPortStartScheduler+0xb2>
 801198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	60bb      	str	r3, [r7, #8]
 80119a0:	e7fe      	b.n	80119a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80119a2:	4b1e      	ldr	r3, [pc, #120]	; (8011a1c <xPortStartScheduler+0x12c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	021b      	lsls	r3, r3, #8
 80119a8:	4a1c      	ldr	r2, [pc, #112]	; (8011a1c <xPortStartScheduler+0x12c>)
 80119aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80119ac:	4b1b      	ldr	r3, [pc, #108]	; (8011a1c <xPortStartScheduler+0x12c>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80119b4:	4a19      	ldr	r2, [pc, #100]	; (8011a1c <xPortStartScheduler+0x12c>)
 80119b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	b2da      	uxtb	r2, r3
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119c0:	4b17      	ldr	r3, [pc, #92]	; (8011a20 <xPortStartScheduler+0x130>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4a16      	ldr	r2, [pc, #88]	; (8011a20 <xPortStartScheduler+0x130>)
 80119c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119cc:	4b14      	ldr	r3, [pc, #80]	; (8011a20 <xPortStartScheduler+0x130>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a13      	ldr	r2, [pc, #76]	; (8011a20 <xPortStartScheduler+0x130>)
 80119d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119d8:	f7f0 fd6c 	bl	80024b4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119dc:	4b11      	ldr	r3, [pc, #68]	; (8011a24 <xPortStartScheduler+0x134>)
 80119de:	2200      	movs	r2, #0
 80119e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119e2:	f000 f8d1 	bl	8011b88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119e6:	4b10      	ldr	r3, [pc, #64]	; (8011a28 <xPortStartScheduler+0x138>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4a0f      	ldr	r2, [pc, #60]	; (8011a28 <xPortStartScheduler+0x138>)
 80119ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119f2:	f7ff ff69 	bl	80118c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119f6:	f001 fdc1 	bl	801357c <vTaskSwitchContext>
	prvTaskExitError();
 80119fa:	f7ff ff27 	bl	801184c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119fe:	2300      	movs	r3, #0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3718      	adds	r7, #24
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	e000ed00 	.word	0xe000ed00
 8011a0c:	410fc271 	.word	0x410fc271
 8011a10:	410fc270 	.word	0x410fc270
 8011a14:	e000e400 	.word	0xe000e400
 8011a18:	20026f6c 	.word	0x20026f6c
 8011a1c:	20026f70 	.word	0x20026f70
 8011a20:	e000ed20 	.word	0xe000ed20
 8011a24:	20000084 	.word	0x20000084
 8011a28:	e000ef34 	.word	0xe000ef34

08011a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a36:	f383 8811 	msr	BASEPRI, r3
 8011a3a:	f3bf 8f6f 	isb	sy
 8011a3e:	f3bf 8f4f 	dsb	sy
 8011a42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a44:	4b0e      	ldr	r3, [pc, #56]	; (8011a80 <vPortEnterCritical+0x54>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	4a0d      	ldr	r2, [pc, #52]	; (8011a80 <vPortEnterCritical+0x54>)
 8011a4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a4e:	4b0c      	ldr	r3, [pc, #48]	; (8011a80 <vPortEnterCritical+0x54>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	d10e      	bne.n	8011a74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a56:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <vPortEnterCritical+0x58>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d009      	beq.n	8011a74 <vPortEnterCritical+0x48>
 8011a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	603b      	str	r3, [r7, #0]
 8011a72:	e7fe      	b.n	8011a72 <vPortEnterCritical+0x46>
	}
}
 8011a74:	bf00      	nop
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	20000084 	.word	0x20000084
 8011a84:	e000ed04 	.word	0xe000ed04

08011a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a8e:	4b11      	ldr	r3, [pc, #68]	; (8011ad4 <vPortExitCritical+0x4c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d109      	bne.n	8011aaa <vPortExitCritical+0x22>
 8011a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9a:	f383 8811 	msr	BASEPRI, r3
 8011a9e:	f3bf 8f6f 	isb	sy
 8011aa2:	f3bf 8f4f 	dsb	sy
 8011aa6:	607b      	str	r3, [r7, #4]
 8011aa8:	e7fe      	b.n	8011aa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011aaa:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <vPortExitCritical+0x4c>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	4a08      	ldr	r2, [pc, #32]	; (8011ad4 <vPortExitCritical+0x4c>)
 8011ab2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011ab4:	4b07      	ldr	r3, [pc, #28]	; (8011ad4 <vPortExitCritical+0x4c>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d104      	bne.n	8011ac6 <vPortExitCritical+0x3e>
 8011abc:	2300      	movs	r3, #0
 8011abe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011ac6:	bf00      	nop
 8011ac8:	370c      	adds	r7, #12
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	20000084 	.word	0x20000084
	...

08011ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ae0:	f3ef 8009 	mrs	r0, PSP
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	4b15      	ldr	r3, [pc, #84]	; (8011b40 <pxCurrentTCBConst>)
 8011aea:	681a      	ldr	r2, [r3, #0]
 8011aec:	f01e 0f10 	tst.w	lr, #16
 8011af0:	bf08      	it	eq
 8011af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afa:	6010      	str	r0, [r2, #0]
 8011afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b04:	f380 8811 	msr	BASEPRI, r0
 8011b08:	f3bf 8f4f 	dsb	sy
 8011b0c:	f3bf 8f6f 	isb	sy
 8011b10:	f001 fd34 	bl	801357c <vTaskSwitchContext>
 8011b14:	f04f 0000 	mov.w	r0, #0
 8011b18:	f380 8811 	msr	BASEPRI, r0
 8011b1c:	bc09      	pop	{r0, r3}
 8011b1e:	6819      	ldr	r1, [r3, #0]
 8011b20:	6808      	ldr	r0, [r1, #0]
 8011b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b26:	f01e 0f10 	tst.w	lr, #16
 8011b2a:	bf08      	it	eq
 8011b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b30:	f380 8809 	msr	PSP, r0
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	f3af 8000 	nop.w

08011b40 <pxCurrentTCBConst>:
 8011b40:	20026f74 	.word	0x20026f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b44:	bf00      	nop
 8011b46:	bf00      	nop

08011b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b60:	f001 fc46 	bl	80133f0 <xTaskIncrementTick>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d003      	beq.n	8011b72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b6a:	4b06      	ldr	r3, [pc, #24]	; (8011b84 <SysTick_Handler+0x3c>)
 8011b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b70:	601a      	str	r2, [r3, #0]
 8011b72:	2300      	movs	r3, #0
 8011b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b7c:	bf00      	nop
 8011b7e:	3708      	adds	r7, #8
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	e000ed04 	.word	0xe000ed04

08011b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011b98 <vPortEnableVFP+0x10>
 8011b8c:	6801      	ldr	r1, [r0, #0]
 8011b8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b92:	6001      	str	r1, [r0, #0]
 8011b94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b96:	bf00      	nop
 8011b98:	e000ed88 	.word	0xe000ed88

08011b9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ba2:	f3ef 8305 	mrs	r3, IPSR
 8011ba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b0f      	cmp	r3, #15
 8011bac:	d913      	bls.n	8011bd6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bae:	4a16      	ldr	r2, [pc, #88]	; (8011c08 <vPortValidateInterruptPriority+0x6c>)
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bb8:	4b14      	ldr	r3, [pc, #80]	; (8011c0c <vPortValidateInterruptPriority+0x70>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	7afa      	ldrb	r2, [r7, #11]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d209      	bcs.n	8011bd6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc6:	f383 8811 	msr	BASEPRI, r3
 8011bca:	f3bf 8f6f 	isb	sy
 8011bce:	f3bf 8f4f 	dsb	sy
 8011bd2:	607b      	str	r3, [r7, #4]
 8011bd4:	e7fe      	b.n	8011bd4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bd6:	4b0e      	ldr	r3, [pc, #56]	; (8011c10 <vPortValidateInterruptPriority+0x74>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011bde:	4b0d      	ldr	r3, [pc, #52]	; (8011c14 <vPortValidateInterruptPriority+0x78>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d909      	bls.n	8011bfa <vPortValidateInterruptPriority+0x5e>
 8011be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bea:	f383 8811 	msr	BASEPRI, r3
 8011bee:	f3bf 8f6f 	isb	sy
 8011bf2:	f3bf 8f4f 	dsb	sy
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	e7fe      	b.n	8011bf8 <vPortValidateInterruptPriority+0x5c>
	}
 8011bfa:	bf00      	nop
 8011bfc:	3714      	adds	r7, #20
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr
 8011c06:	bf00      	nop
 8011c08:	e000e3f0 	.word	0xe000e3f0
 8011c0c:	20026f6c 	.word	0x20026f6c
 8011c10:	e000ed0c 	.word	0xe000ed0c
 8011c14:	20026f70 	.word	0x20026f70

08011c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d109      	bne.n	8011c40 <xQueueGenericReset+0x28>
 8011c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c30:	f383 8811 	msr	BASEPRI, r3
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	60bb      	str	r3, [r7, #8]
 8011c3e:	e7fe      	b.n	8011c3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011c40:	f7ff fef4 	bl	8011a2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c4c:	68f9      	ldr	r1, [r7, #12]
 8011c4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c50:	fb01 f303 	mul.w	r3, r1, r3
 8011c54:	441a      	add	r2, r3
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c70:	3b01      	subs	r3, #1
 8011c72:	68f9      	ldr	r1, [r7, #12]
 8011c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011c76:	fb01 f303 	mul.w	r3, r1, r3
 8011c7a:	441a      	add	r2, r3
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	22ff      	movs	r2, #255	; 0xff
 8011c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	22ff      	movs	r2, #255	; 0xff
 8011c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d114      	bne.n	8011cc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d01a      	beq.n	8011cd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	3310      	adds	r3, #16
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f001 fd40 	bl	8013728 <xTaskRemoveFromEventList>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d012      	beq.n	8011cd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011cae:	4b0d      	ldr	r3, [pc, #52]	; (8011ce4 <xQueueGenericReset+0xcc>)
 8011cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cb4:	601a      	str	r2, [r3, #0]
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	f3bf 8f6f 	isb	sy
 8011cbe:	e009      	b.n	8011cd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	3310      	adds	r3, #16
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fcd9 	bl	801167c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	3324      	adds	r3, #36	; 0x24
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7ff fcd4 	bl	801167c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011cd4:	f7ff fed8 	bl	8011a88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011cd8:	2301      	movs	r3, #1
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	e000ed04 	.word	0xe000ed04

08011ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b08e      	sub	sp, #56	; 0x38
 8011cec:	af02      	add	r7, sp, #8
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	607a      	str	r2, [r7, #4]
 8011cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d109      	bne.n	8011d10 <xQueueGenericCreateStatic+0x28>
 8011cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d0e:	e7fe      	b.n	8011d0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d109      	bne.n	8011d2a <xQueueGenericCreateStatic+0x42>
 8011d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	627b      	str	r3, [r7, #36]	; 0x24
 8011d28:	e7fe      	b.n	8011d28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <xQueueGenericCreateStatic+0x4e>
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d001      	beq.n	8011d3a <xQueueGenericCreateStatic+0x52>
 8011d36:	2301      	movs	r3, #1
 8011d38:	e000      	b.n	8011d3c <xQueueGenericCreateStatic+0x54>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d109      	bne.n	8011d54 <xQueueGenericCreateStatic+0x6c>
 8011d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d44:	f383 8811 	msr	BASEPRI, r3
 8011d48:	f3bf 8f6f 	isb	sy
 8011d4c:	f3bf 8f4f 	dsb	sy
 8011d50:	623b      	str	r3, [r7, #32]
 8011d52:	e7fe      	b.n	8011d52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d102      	bne.n	8011d60 <xQueueGenericCreateStatic+0x78>
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <xQueueGenericCreateStatic+0x7c>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e000      	b.n	8011d66 <xQueueGenericCreateStatic+0x7e>
 8011d64:	2300      	movs	r3, #0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d109      	bne.n	8011d7e <xQueueGenericCreateStatic+0x96>
 8011d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6e:	f383 8811 	msr	BASEPRI, r3
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	f3bf 8f4f 	dsb	sy
 8011d7a:	61fb      	str	r3, [r7, #28]
 8011d7c:	e7fe      	b.n	8011d7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011d7e:	2350      	movs	r3, #80	; 0x50
 8011d80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2b50      	cmp	r3, #80	; 0x50
 8011d86:	d009      	beq.n	8011d9c <xQueueGenericCreateStatic+0xb4>
 8011d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8c:	f383 8811 	msr	BASEPRI, r3
 8011d90:	f3bf 8f6f 	isb	sy
 8011d94:	f3bf 8f4f 	dsb	sy
 8011d98:	61bb      	str	r3, [r7, #24]
 8011d9a:	e7fe      	b.n	8011d9a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00d      	beq.n	8011dc2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da8:	2201      	movs	r2, #1
 8011daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011dae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	4613      	mov	r3, r2
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	68b9      	ldr	r1, [r7, #8]
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f000 f842 	bl	8011e46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3730      	adds	r7, #48	; 0x30
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b08a      	sub	sp, #40	; 0x28
 8011dd0:	af02      	add	r7, sp, #8
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d109      	bne.n	8011df4 <xQueueGenericCreate+0x28>
 8011de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	613b      	str	r3, [r7, #16]
 8011df2:	e7fe      	b.n	8011df2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d102      	bne.n	8011e00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	61fb      	str	r3, [r7, #28]
 8011dfe:	e004      	b.n	8011e0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	fb02 f303 	mul.w	r3, r2, r3
 8011e08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	3350      	adds	r3, #80	; 0x50
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7ff fa58 	bl	80112c4 <pvPortMalloc>
 8011e14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00f      	beq.n	8011e3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	3350      	adds	r3, #80	; 0x50
 8011e20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e2a:	79fa      	ldrb	r2, [r7, #7]
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4613      	mov	r3, r2
 8011e32:	697a      	ldr	r2, [r7, #20]
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f000 f805 	bl	8011e46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3720      	adds	r7, #32
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b084      	sub	sp, #16
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	60f8      	str	r0, [r7, #12]
 8011e4e:	60b9      	str	r1, [r7, #8]
 8011e50:	607a      	str	r2, [r7, #4]
 8011e52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d103      	bne.n	8011e62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	69ba      	ldr	r2, [r7, #24]
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	e002      	b.n	8011e68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011e74:	2101      	movs	r1, #1
 8011e76:	69b8      	ldr	r0, [r7, #24]
 8011e78:	f7ff fece 	bl	8011c18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	78fa      	ldrb	r2, [r7, #3]
 8011e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011e84:	bf00      	nop
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00e      	beq.n	8011eb8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011eac:	2300      	movs	r3, #0
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 f906 	bl	80120c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011eb8:	bf00      	nop
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011eca:	2301      	movs	r3, #1
 8011ecc:	617b      	str	r3, [r7, #20]
 8011ece:	2300      	movs	r3, #0
 8011ed0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011ed2:	79fb      	ldrb	r3, [r7, #7]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	6939      	ldr	r1, [r7, #16]
 8011ed8:	6978      	ldr	r0, [r7, #20]
 8011eda:	f7ff ff77 	bl	8011dcc <xQueueGenericCreate>
 8011ede:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f7ff ffd3 	bl	8011e8c <prvInitialiseMutex>

		return pxNewQueue;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
	}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3718      	adds	r7, #24
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b088      	sub	sp, #32
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	6039      	str	r1, [r7, #0]
 8011efa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011efc:	2301      	movs	r3, #1
 8011efe:	617b      	str	r3, [r7, #20]
 8011f00:	2300      	movs	r3, #0
 8011f02:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011f04:	79fb      	ldrb	r3, [r7, #7]
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	6939      	ldr	r1, [r7, #16]
 8011f0e:	6978      	ldr	r0, [r7, #20]
 8011f10:	f7ff feea 	bl	8011ce8 <xQueueGenericCreateStatic>
 8011f14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f7ff ffb8 	bl	8011e8c <prvInitialiseMutex>

		return pxNewQueue;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
	}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3718      	adds	r7, #24
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011f26:	b590      	push	{r4, r7, lr}
 8011f28:	b087      	sub	sp, #28
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d109      	bne.n	8011f4c <xQueueGiveMutexRecursive+0x26>
 8011f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3c:	f383 8811 	msr	BASEPRI, r3
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	60fb      	str	r3, [r7, #12]
 8011f4a:	e7fe      	b.n	8011f4a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	685c      	ldr	r4, [r3, #4]
 8011f50:	f001 fdfc 	bl	8013b4c <xTaskGetCurrentTaskHandle>
 8011f54:	4603      	mov	r3, r0
 8011f56:	429c      	cmp	r4, r3
 8011f58:	d111      	bne.n	8011f7e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	1e5a      	subs	r2, r3, #1
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d105      	bne.n	8011f78 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	2200      	movs	r2, #0
 8011f70:	2100      	movs	r1, #0
 8011f72:	6938      	ldr	r0, [r7, #16]
 8011f74:	f000 f8a6 	bl	80120c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	617b      	str	r3, [r7, #20]
 8011f7c:	e001      	b.n	8011f82 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011f82:	697b      	ldr	r3, [r7, #20]
	}
 8011f84:	4618      	mov	r0, r3
 8011f86:	371c      	adds	r7, #28
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}

08011f8c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011f8c:	b590      	push	{r4, r7, lr}
 8011f8e:	b087      	sub	sp, #28
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d109      	bne.n	8011fb4 <xQueueTakeMutexRecursive+0x28>
 8011fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa4:	f383 8811 	msr	BASEPRI, r3
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	f3bf 8f4f 	dsb	sy
 8011fb0:	60fb      	str	r3, [r7, #12]
 8011fb2:	e7fe      	b.n	8011fb2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	685c      	ldr	r4, [r3, #4]
 8011fb8:	f001 fdc8 	bl	8013b4c <xTaskGetCurrentTaskHandle>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	429c      	cmp	r4, r3
 8011fc0:	d107      	bne.n	8011fd2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	617b      	str	r3, [r7, #20]
 8011fd0:	e00c      	b.n	8011fec <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011fd2:	6839      	ldr	r1, [r7, #0]
 8011fd4:	6938      	ldr	r0, [r7, #16]
 8011fd6:	f000 fb69 	bl	80126ac <xQueueSemaphoreTake>
 8011fda:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d004      	beq.n	8011fec <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	1c5a      	adds	r2, r3, #1
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011fec:	697b      	ldr	r3, [r7, #20]
	}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	371c      	adds	r7, #28
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd90      	pop	{r4, r7, pc}

08011ff6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b08a      	sub	sp, #40	; 0x28
 8011ffa:	af02      	add	r7, sp, #8
 8011ffc:	60f8      	str	r0, [r7, #12]
 8011ffe:	60b9      	str	r1, [r7, #8]
 8012000:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d109      	bne.n	801201c <xQueueCreateCountingSemaphoreStatic+0x26>
 8012008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200c:	f383 8811 	msr	BASEPRI, r3
 8012010:	f3bf 8f6f 	isb	sy
 8012014:	f3bf 8f4f 	dsb	sy
 8012018:	61bb      	str	r3, [r7, #24]
 801201a:	e7fe      	b.n	801201a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	429a      	cmp	r2, r3
 8012022:	d909      	bls.n	8012038 <xQueueCreateCountingSemaphoreStatic+0x42>
 8012024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012028:	f383 8811 	msr	BASEPRI, r3
 801202c:	f3bf 8f6f 	isb	sy
 8012030:	f3bf 8f4f 	dsb	sy
 8012034:	617b      	str	r3, [r7, #20]
 8012036:	e7fe      	b.n	8012036 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012038:	2302      	movs	r3, #2
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	2100      	movs	r1, #0
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f7ff fe50 	bl	8011ce8 <xQueueGenericCreateStatic>
 8012048:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d002      	beq.n	8012056 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012056:	69fb      	ldr	r3, [r7, #28]
	}
 8012058:	4618      	mov	r0, r3
 801205a:	3720      	adds	r7, #32
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d109      	bne.n	8012084 <xQueueCreateCountingSemaphore+0x24>
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	613b      	str	r3, [r7, #16]
 8012082:	e7fe      	b.n	8012082 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012084:	683a      	ldr	r2, [r7, #0]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	429a      	cmp	r2, r3
 801208a:	d909      	bls.n	80120a0 <xQueueCreateCountingSemaphore+0x40>
 801208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012090:	f383 8811 	msr	BASEPRI, r3
 8012094:	f3bf 8f6f 	isb	sy
 8012098:	f3bf 8f4f 	dsb	sy
 801209c:	60fb      	str	r3, [r7, #12]
 801209e:	e7fe      	b.n	801209e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80120a0:	2202      	movs	r2, #2
 80120a2:	2100      	movs	r1, #0
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7ff fe91 	bl	8011dcc <xQueueGenericCreate>
 80120aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80120b8:	697b      	ldr	r3, [r7, #20]
	}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08e      	sub	sp, #56	; 0x38
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
 80120d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80120d2:	2300      	movs	r3, #0
 80120d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d109      	bne.n	80120f4 <xQueueGenericSend+0x30>
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	f383 8811 	msr	BASEPRI, r3
 80120e8:	f3bf 8f6f 	isb	sy
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80120f2:	e7fe      	b.n	80120f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d103      	bne.n	8012102 <xQueueGenericSend+0x3e>
 80120fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <xQueueGenericSend+0x42>
 8012102:	2301      	movs	r3, #1
 8012104:	e000      	b.n	8012108 <xQueueGenericSend+0x44>
 8012106:	2300      	movs	r3, #0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d109      	bne.n	8012120 <xQueueGenericSend+0x5c>
 801210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012110:	f383 8811 	msr	BASEPRI, r3
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	627b      	str	r3, [r7, #36]	; 0x24
 801211e:	e7fe      	b.n	801211e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	2b02      	cmp	r3, #2
 8012124:	d103      	bne.n	801212e <xQueueGenericSend+0x6a>
 8012126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801212a:	2b01      	cmp	r3, #1
 801212c:	d101      	bne.n	8012132 <xQueueGenericSend+0x6e>
 801212e:	2301      	movs	r3, #1
 8012130:	e000      	b.n	8012134 <xQueueGenericSend+0x70>
 8012132:	2300      	movs	r3, #0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d109      	bne.n	801214c <xQueueGenericSend+0x88>
 8012138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213c:	f383 8811 	msr	BASEPRI, r3
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	f3bf 8f4f 	dsb	sy
 8012148:	623b      	str	r3, [r7, #32]
 801214a:	e7fe      	b.n	801214a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801214c:	f001 fd0e 	bl	8013b6c <xTaskGetSchedulerState>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d102      	bne.n	801215c <xQueueGenericSend+0x98>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d101      	bne.n	8012160 <xQueueGenericSend+0x9c>
 801215c:	2301      	movs	r3, #1
 801215e:	e000      	b.n	8012162 <xQueueGenericSend+0x9e>
 8012160:	2300      	movs	r3, #0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d109      	bne.n	801217a <xQueueGenericSend+0xb6>
 8012166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216a:	f383 8811 	msr	BASEPRI, r3
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	61fb      	str	r3, [r7, #28]
 8012178:	e7fe      	b.n	8012178 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801217a:	f7ff fc57 	bl	8011a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012186:	429a      	cmp	r2, r3
 8012188:	d302      	bcc.n	8012190 <xQueueGenericSend+0xcc>
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b02      	cmp	r3, #2
 801218e:	d129      	bne.n	80121e4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012190:	683a      	ldr	r2, [r7, #0]
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012196:	f000 fc48 	bl	8012a2a <prvCopyDataToQueue>
 801219a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d010      	beq.n	80121c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a6:	3324      	adds	r3, #36	; 0x24
 80121a8:	4618      	mov	r0, r3
 80121aa:	f001 fabd 	bl	8013728 <xTaskRemoveFromEventList>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d013      	beq.n	80121dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80121b4:	4b3f      	ldr	r3, [pc, #252]	; (80122b4 <xQueueGenericSend+0x1f0>)
 80121b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	f3bf 8f6f 	isb	sy
 80121c4:	e00a      	b.n	80121dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80121c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d007      	beq.n	80121dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80121cc:	4b39      	ldr	r3, [pc, #228]	; (80122b4 <xQueueGenericSend+0x1f0>)
 80121ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121d2:	601a      	str	r2, [r3, #0]
 80121d4:	f3bf 8f4f 	dsb	sy
 80121d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80121dc:	f7ff fc54 	bl	8011a88 <vPortExitCritical>
				return pdPASS;
 80121e0:	2301      	movs	r3, #1
 80121e2:	e063      	b.n	80122ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d103      	bne.n	80121f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121ea:	f7ff fc4d 	bl	8011a88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80121ee:	2300      	movs	r3, #0
 80121f0:	e05c      	b.n	80122ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d106      	bne.n	8012206 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121f8:	f107 0314 	add.w	r3, r7, #20
 80121fc:	4618      	mov	r0, r3
 80121fe:	f001 faf7 	bl	80137f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012202:	2301      	movs	r3, #1
 8012204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012206:	f7ff fc3f 	bl	8011a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801220a:	f000 ffd9 	bl	80131c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801220e:	f7ff fc0d 	bl	8011a2c <vPortEnterCritical>
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012218:	b25b      	sxtb	r3, r3
 801221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221e:	d103      	bne.n	8012228 <xQueueGenericSend+0x164>
 8012220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012222:	2200      	movs	r2, #0
 8012224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801222e:	b25b      	sxtb	r3, r3
 8012230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012234:	d103      	bne.n	801223e <xQueueGenericSend+0x17a>
 8012236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012238:	2200      	movs	r2, #0
 801223a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801223e:	f7ff fc23 	bl	8011a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012242:	1d3a      	adds	r2, r7, #4
 8012244:	f107 0314 	add.w	r3, r7, #20
 8012248:	4611      	mov	r1, r2
 801224a:	4618      	mov	r0, r3
 801224c:	f001 fae6 	bl	801381c <xTaskCheckForTimeOut>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d124      	bne.n	80122a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012258:	f000 fcdf 	bl	8012c1a <prvIsQueueFull>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d018      	beq.n	8012294 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	3310      	adds	r3, #16
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	4611      	mov	r1, r2
 801226a:	4618      	mov	r0, r3
 801226c:	f001 fa0e 	bl	801368c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012272:	f000 fc6a 	bl	8012b4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012276:	f000 ffe9 	bl	801324c <xTaskResumeAll>
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	f47f af7c 	bne.w	801217a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012282:	4b0c      	ldr	r3, [pc, #48]	; (80122b4 <xQueueGenericSend+0x1f0>)
 8012284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	f3bf 8f4f 	dsb	sy
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	e772      	b.n	801217a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012296:	f000 fc58 	bl	8012b4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801229a:	f000 ffd7 	bl	801324c <xTaskResumeAll>
 801229e:	e76c      	b.n	801217a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80122a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a2:	f000 fc52 	bl	8012b4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122a6:	f000 ffd1 	bl	801324c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80122aa:	2300      	movs	r3, #0
		}
	}
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3738      	adds	r7, #56	; 0x38
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	e000ed04 	.word	0xe000ed04

080122b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b08e      	sub	sp, #56	; 0x38
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
 80122c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80122ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d109      	bne.n	80122e4 <xQueueGenericSendFromISR+0x2c>
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	627b      	str	r3, [r7, #36]	; 0x24
 80122e2:	e7fe      	b.n	80122e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d103      	bne.n	80122f2 <xQueueGenericSendFromISR+0x3a>
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d101      	bne.n	80122f6 <xQueueGenericSendFromISR+0x3e>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <xQueueGenericSendFromISR+0x40>
 80122f6:	2300      	movs	r3, #0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d109      	bne.n	8012310 <xQueueGenericSendFromISR+0x58>
 80122fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	623b      	str	r3, [r7, #32]
 801230e:	e7fe      	b.n	801230e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2b02      	cmp	r3, #2
 8012314:	d103      	bne.n	801231e <xQueueGenericSendFromISR+0x66>
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801231a:	2b01      	cmp	r3, #1
 801231c:	d101      	bne.n	8012322 <xQueueGenericSendFromISR+0x6a>
 801231e:	2301      	movs	r3, #1
 8012320:	e000      	b.n	8012324 <xQueueGenericSendFromISR+0x6c>
 8012322:	2300      	movs	r3, #0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d109      	bne.n	801233c <xQueueGenericSendFromISR+0x84>
 8012328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	61fb      	str	r3, [r7, #28]
 801233a:	e7fe      	b.n	801233a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801233c:	f7ff fc2e 	bl	8011b9c <vPortValidateInterruptPriority>
	__asm volatile
 8012340:	f3ef 8211 	mrs	r2, BASEPRI
 8012344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012348:	f383 8811 	msr	BASEPRI, r3
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	61ba      	str	r2, [r7, #24]
 8012356:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012358:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801235a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012364:	429a      	cmp	r2, r3
 8012366:	d302      	bcc.n	801236e <xQueueGenericSendFromISR+0xb6>
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	2b02      	cmp	r3, #2
 801236c:	d12c      	bne.n	80123c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	68b9      	ldr	r1, [r7, #8]
 801237c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801237e:	f000 fb54 	bl	8012a2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012382:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238a:	d112      	bne.n	80123b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012390:	2b00      	cmp	r3, #0
 8012392:	d016      	beq.n	80123c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012396:	3324      	adds	r3, #36	; 0x24
 8012398:	4618      	mov	r0, r3
 801239a:	f001 f9c5 	bl	8013728 <xTaskRemoveFromEventList>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00e      	beq.n	80123c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00b      	beq.n	80123c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2201      	movs	r2, #1
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	e007      	b.n	80123c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80123b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80123b6:	3301      	adds	r3, #1
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	b25a      	sxtb	r2, r3
 80123bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80123c2:	2301      	movs	r3, #1
 80123c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80123c6:	e001      	b.n	80123cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80123c8:	2300      	movs	r3, #0
 80123ca:	637b      	str	r3, [r7, #52]	; 0x34
 80123cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3738      	adds	r7, #56	; 0x38
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08e      	sub	sp, #56	; 0x38
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d109      	bne.n	8012408 <xQueueGiveFromISR+0x28>
	__asm volatile
 80123f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f8:	f383 8811 	msr	BASEPRI, r3
 80123fc:	f3bf 8f6f 	isb	sy
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	623b      	str	r3, [r7, #32]
 8012406:	e7fe      	b.n	8012406 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801240c:	2b00      	cmp	r3, #0
 801240e:	d009      	beq.n	8012424 <xQueueGiveFromISR+0x44>
 8012410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012414:	f383 8811 	msr	BASEPRI, r3
 8012418:	f3bf 8f6f 	isb	sy
 801241c:	f3bf 8f4f 	dsb	sy
 8012420:	61fb      	str	r3, [r7, #28]
 8012422:	e7fe      	b.n	8012422 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d103      	bne.n	8012434 <xQueueGiveFromISR+0x54>
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d101      	bne.n	8012438 <xQueueGiveFromISR+0x58>
 8012434:	2301      	movs	r3, #1
 8012436:	e000      	b.n	801243a <xQueueGiveFromISR+0x5a>
 8012438:	2300      	movs	r3, #0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d109      	bne.n	8012452 <xQueueGiveFromISR+0x72>
 801243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012442:	f383 8811 	msr	BASEPRI, r3
 8012446:	f3bf 8f6f 	isb	sy
 801244a:	f3bf 8f4f 	dsb	sy
 801244e:	61bb      	str	r3, [r7, #24]
 8012450:	e7fe      	b.n	8012450 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012452:	f7ff fba3 	bl	8011b9c <vPortValidateInterruptPriority>
	__asm volatile
 8012456:	f3ef 8211 	mrs	r2, BASEPRI
 801245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	617a      	str	r2, [r7, #20]
 801246c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801246e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012470:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012476:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801247c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801247e:	429a      	cmp	r2, r3
 8012480:	d22b      	bcs.n	80124da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	1c5a      	adds	r2, r3, #1
 8012490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012492:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012494:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801249c:	d112      	bne.n	80124c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d016      	beq.n	80124d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	3324      	adds	r3, #36	; 0x24
 80124aa:	4618      	mov	r0, r3
 80124ac:	f001 f93c 	bl	8013728 <xTaskRemoveFromEventList>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d00e      	beq.n	80124d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00b      	beq.n	80124d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2201      	movs	r2, #1
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	e007      	b.n	80124d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80124c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124c8:	3301      	adds	r3, #1
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	b25a      	sxtb	r2, r3
 80124ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80124d4:	2301      	movs	r3, #1
 80124d6:	637b      	str	r3, [r7, #52]	; 0x34
 80124d8:	e001      	b.n	80124de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80124da:	2300      	movs	r3, #0
 80124dc:	637b      	str	r3, [r7, #52]	; 0x34
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3738      	adds	r7, #56	; 0x38
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
	...

080124f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b08c      	sub	sp, #48	; 0x30
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012500:	2300      	movs	r3, #0
 8012502:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	2b00      	cmp	r3, #0
 801250c:	d109      	bne.n	8012522 <xQueueReceive+0x2e>
	__asm volatile
 801250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	623b      	str	r3, [r7, #32]
 8012520:	e7fe      	b.n	8012520 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d103      	bne.n	8012530 <xQueueReceive+0x3c>
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801252c:	2b00      	cmp	r3, #0
 801252e:	d101      	bne.n	8012534 <xQueueReceive+0x40>
 8012530:	2301      	movs	r3, #1
 8012532:	e000      	b.n	8012536 <xQueueReceive+0x42>
 8012534:	2300      	movs	r3, #0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d109      	bne.n	801254e <xQueueReceive+0x5a>
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	61fb      	str	r3, [r7, #28]
 801254c:	e7fe      	b.n	801254c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801254e:	f001 fb0d 	bl	8013b6c <xTaskGetSchedulerState>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d102      	bne.n	801255e <xQueueReceive+0x6a>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d101      	bne.n	8012562 <xQueueReceive+0x6e>
 801255e:	2301      	movs	r3, #1
 8012560:	e000      	b.n	8012564 <xQueueReceive+0x70>
 8012562:	2300      	movs	r3, #0
 8012564:	2b00      	cmp	r3, #0
 8012566:	d109      	bne.n	801257c <xQueueReceive+0x88>
 8012568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	61bb      	str	r3, [r7, #24]
 801257a:	e7fe      	b.n	801257a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801257c:	f7ff fa56 	bl	8011a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012584:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	2b00      	cmp	r3, #0
 801258a:	d01f      	beq.n	80125cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801258c:	68b9      	ldr	r1, [r7, #8]
 801258e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012590:	f000 fab5 	bl	8012afe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012596:	1e5a      	subs	r2, r3, #1
 8012598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d00f      	beq.n	80125c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	3310      	adds	r3, #16
 80125a8:	4618      	mov	r0, r3
 80125aa:	f001 f8bd 	bl	8013728 <xTaskRemoveFromEventList>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d007      	beq.n	80125c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80125b4:	4b3c      	ldr	r3, [pc, #240]	; (80126a8 <xQueueReceive+0x1b4>)
 80125b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ba:	601a      	str	r2, [r3, #0]
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80125c4:	f7ff fa60 	bl	8011a88 <vPortExitCritical>
				return pdPASS;
 80125c8:	2301      	movs	r3, #1
 80125ca:	e069      	b.n	80126a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d103      	bne.n	80125da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80125d2:	f7ff fa59 	bl	8011a88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80125d6:	2300      	movs	r3, #0
 80125d8:	e062      	b.n	80126a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d106      	bne.n	80125ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125e0:	f107 0310 	add.w	r3, r7, #16
 80125e4:	4618      	mov	r0, r3
 80125e6:	f001 f903 	bl	80137f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125ea:	2301      	movs	r3, #1
 80125ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125ee:	f7ff fa4b 	bl	8011a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125f2:	f000 fde5 	bl	80131c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125f6:	f7ff fa19 	bl	8011a2c <vPortEnterCritical>
 80125fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012600:	b25b      	sxtb	r3, r3
 8012602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012606:	d103      	bne.n	8012610 <xQueueReceive+0x11c>
 8012608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260a:	2200      	movs	r2, #0
 801260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012616:	b25b      	sxtb	r3, r3
 8012618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801261c:	d103      	bne.n	8012626 <xQueueReceive+0x132>
 801261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012620:	2200      	movs	r2, #0
 8012622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012626:	f7ff fa2f 	bl	8011a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801262a:	1d3a      	adds	r2, r7, #4
 801262c:	f107 0310 	add.w	r3, r7, #16
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f001 f8f2 	bl	801381c <xTaskCheckForTimeOut>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d123      	bne.n	8012686 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801263e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012640:	f000 fad5 	bl	8012bee <prvIsQueueEmpty>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d017      	beq.n	801267a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264c:	3324      	adds	r3, #36	; 0x24
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f001 f81a 	bl	801368c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801265a:	f000 fa76 	bl	8012b4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801265e:	f000 fdf5 	bl	801324c <xTaskResumeAll>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d189      	bne.n	801257c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012668:	4b0f      	ldr	r3, [pc, #60]	; (80126a8 <xQueueReceive+0x1b4>)
 801266a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801266e:	601a      	str	r2, [r3, #0]
 8012670:	f3bf 8f4f 	dsb	sy
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	e780      	b.n	801257c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801267a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801267c:	f000 fa65 	bl	8012b4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012680:	f000 fde4 	bl	801324c <xTaskResumeAll>
 8012684:	e77a      	b.n	801257c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012688:	f000 fa5f 	bl	8012b4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801268c:	f000 fdde 	bl	801324c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012692:	f000 faac 	bl	8012bee <prvIsQueueEmpty>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	f43f af6f 	beq.w	801257c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801269e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3730      	adds	r7, #48	; 0x30
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	e000ed04 	.word	0xe000ed04

080126ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08e      	sub	sp, #56	; 0x38
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80126b6:	2300      	movs	r3, #0
 80126b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80126be:	2300      	movs	r3, #0
 80126c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d109      	bne.n	80126dc <xQueueSemaphoreTake+0x30>
 80126c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126cc:	f383 8811 	msr	BASEPRI, r3
 80126d0:	f3bf 8f6f 	isb	sy
 80126d4:	f3bf 8f4f 	dsb	sy
 80126d8:	623b      	str	r3, [r7, #32]
 80126da:	e7fe      	b.n	80126da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d009      	beq.n	80126f8 <xQueueSemaphoreTake+0x4c>
 80126e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e8:	f383 8811 	msr	BASEPRI, r3
 80126ec:	f3bf 8f6f 	isb	sy
 80126f0:	f3bf 8f4f 	dsb	sy
 80126f4:	61fb      	str	r3, [r7, #28]
 80126f6:	e7fe      	b.n	80126f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126f8:	f001 fa38 	bl	8013b6c <xTaskGetSchedulerState>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d102      	bne.n	8012708 <xQueueSemaphoreTake+0x5c>
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d101      	bne.n	801270c <xQueueSemaphoreTake+0x60>
 8012708:	2301      	movs	r3, #1
 801270a:	e000      	b.n	801270e <xQueueSemaphoreTake+0x62>
 801270c:	2300      	movs	r3, #0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d109      	bne.n	8012726 <xQueueSemaphoreTake+0x7a>
 8012712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012716:	f383 8811 	msr	BASEPRI, r3
 801271a:	f3bf 8f6f 	isb	sy
 801271e:	f3bf 8f4f 	dsb	sy
 8012722:	61bb      	str	r3, [r7, #24]
 8012724:	e7fe      	b.n	8012724 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012726:	f7ff f981 	bl	8011a2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801272e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012732:	2b00      	cmp	r3, #0
 8012734:	d024      	beq.n	8012780 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	1e5a      	subs	r2, r3, #1
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d104      	bne.n	8012750 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012746:	f001 fb8d 	bl	8013e64 <pvTaskIncrementMutexHeldCount>
 801274a:	4602      	mov	r2, r0
 801274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00f      	beq.n	8012778 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275a:	3310      	adds	r3, #16
 801275c:	4618      	mov	r0, r3
 801275e:	f000 ffe3 	bl	8013728 <xTaskRemoveFromEventList>
 8012762:	4603      	mov	r3, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	d007      	beq.n	8012778 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012768:	4b53      	ldr	r3, [pc, #332]	; (80128b8 <xQueueSemaphoreTake+0x20c>)
 801276a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801276e:	601a      	str	r2, [r3, #0]
 8012770:	f3bf 8f4f 	dsb	sy
 8012774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012778:	f7ff f986 	bl	8011a88 <vPortExitCritical>
				return pdPASS;
 801277c:	2301      	movs	r3, #1
 801277e:	e096      	b.n	80128ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d110      	bne.n	80127a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	2b00      	cmp	r3, #0
 801278a:	d009      	beq.n	80127a0 <xQueueSemaphoreTake+0xf4>
 801278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012790:	f383 8811 	msr	BASEPRI, r3
 8012794:	f3bf 8f6f 	isb	sy
 8012798:	f3bf 8f4f 	dsb	sy
 801279c:	617b      	str	r3, [r7, #20]
 801279e:	e7fe      	b.n	801279e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80127a0:	f7ff f972 	bl	8011a88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80127a4:	2300      	movs	r3, #0
 80127a6:	e082      	b.n	80128ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80127a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80127ae:	f107 030c 	add.w	r3, r7, #12
 80127b2:	4618      	mov	r0, r3
 80127b4:	f001 f81c 	bl	80137f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127b8:	2301      	movs	r3, #1
 80127ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80127bc:	f7ff f964 	bl	8011a88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80127c0:	f000 fcfe 	bl	80131c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80127c4:	f7ff f932 	bl	8011a2c <vPortEnterCritical>
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127ce:	b25b      	sxtb	r3, r3
 80127d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127d4:	d103      	bne.n	80127de <xQueueSemaphoreTake+0x132>
 80127d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d8:	2200      	movs	r2, #0
 80127da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127e4:	b25b      	sxtb	r3, r3
 80127e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ea:	d103      	bne.n	80127f4 <xQueueSemaphoreTake+0x148>
 80127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ee:	2200      	movs	r2, #0
 80127f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127f4:	f7ff f948 	bl	8011a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127f8:	463a      	mov	r2, r7
 80127fa:	f107 030c 	add.w	r3, r7, #12
 80127fe:	4611      	mov	r1, r2
 8012800:	4618      	mov	r0, r3
 8012802:	f001 f80b 	bl	801381c <xTaskCheckForTimeOut>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d132      	bne.n	8012872 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801280c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801280e:	f000 f9ee 	bl	8012bee <prvIsQueueEmpty>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d026      	beq.n	8012866 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d109      	bne.n	8012834 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012820:	f7ff f904 	bl	8011a2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	f001 f9bd 	bl	8013ba8 <xTaskPriorityInherit>
 801282e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012830:	f7ff f92a 	bl	8011a88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	3324      	adds	r3, #36	; 0x24
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	4611      	mov	r1, r2
 801283c:	4618      	mov	r0, r3
 801283e:	f000 ff25 	bl	801368c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012844:	f000 f981 	bl	8012b4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012848:	f000 fd00 	bl	801324c <xTaskResumeAll>
 801284c:	4603      	mov	r3, r0
 801284e:	2b00      	cmp	r3, #0
 8012850:	f47f af69 	bne.w	8012726 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012854:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <xQueueSemaphoreTake+0x20c>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	e75f      	b.n	8012726 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012868:	f000 f96f 	bl	8012b4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801286c:	f000 fcee 	bl	801324c <xTaskResumeAll>
 8012870:	e759      	b.n	8012726 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012874:	f000 f969 	bl	8012b4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012878:	f000 fce8 	bl	801324c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801287c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801287e:	f000 f9b6 	bl	8012bee <prvIsQueueEmpty>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	f43f af4e 	beq.w	8012726 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00d      	beq.n	80128ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8012890:	f7ff f8cc 	bl	8011a2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012896:	f000 f8b0 	bl	80129fa <prvGetDisinheritPriorityAfterTimeout>
 801289a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128a2:	4618      	mov	r0, r3
 80128a4:	f001 fa5a 	bl	8013d5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80128a8:	f7ff f8ee 	bl	8011a88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80128ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3738      	adds	r7, #56	; 0x38
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	e000ed04 	.word	0xe000ed04

080128bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b08e      	sub	sp, #56	; 0x38
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d109      	bne.n	80128e6 <xQueueReceiveFromISR+0x2a>
 80128d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d6:	f383 8811 	msr	BASEPRI, r3
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	623b      	str	r3, [r7, #32]
 80128e4:	e7fe      	b.n	80128e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d103      	bne.n	80128f4 <xQueueReceiveFromISR+0x38>
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d101      	bne.n	80128f8 <xQueueReceiveFromISR+0x3c>
 80128f4:	2301      	movs	r3, #1
 80128f6:	e000      	b.n	80128fa <xQueueReceiveFromISR+0x3e>
 80128f8:	2300      	movs	r3, #0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d109      	bne.n	8012912 <xQueueReceiveFromISR+0x56>
 80128fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	61fb      	str	r3, [r7, #28]
 8012910:	e7fe      	b.n	8012910 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012912:	f7ff f943 	bl	8011b9c <vPortValidateInterruptPriority>
	__asm volatile
 8012916:	f3ef 8211 	mrs	r2, BASEPRI
 801291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	61ba      	str	r2, [r7, #24]
 801292c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801292e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	2b00      	cmp	r3, #0
 801293c:	d02f      	beq.n	801299e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012948:	68b9      	ldr	r1, [r7, #8]
 801294a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801294c:	f000 f8d7 	bl	8012afe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012952:	1e5a      	subs	r2, r3, #1
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012960:	d112      	bne.n	8012988 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012964:	691b      	ldr	r3, [r3, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d016      	beq.n	8012998 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296c:	3310      	adds	r3, #16
 801296e:	4618      	mov	r0, r3
 8012970:	f000 feda 	bl	8013728 <xTaskRemoveFromEventList>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00e      	beq.n	8012998 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d00b      	beq.n	8012998 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2201      	movs	r2, #1
 8012984:	601a      	str	r2, [r3, #0]
 8012986:	e007      	b.n	8012998 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801298c:	3301      	adds	r3, #1
 801298e:	b2db      	uxtb	r3, r3
 8012990:	b25a      	sxtb	r2, r3
 8012992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012998:	2301      	movs	r3, #1
 801299a:	637b      	str	r3, [r7, #52]	; 0x34
 801299c:	e001      	b.n	80129a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801299e:	2300      	movs	r3, #0
 80129a0:	637b      	str	r3, [r7, #52]	; 0x34
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3738      	adds	r7, #56	; 0x38
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b084      	sub	sp, #16
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d109      	bne.n	80129dc <vQueueDelete+0x26>
	__asm volatile
 80129c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	60bb      	str	r3, [r7, #8]
 80129da:	e7fe      	b.n	80129da <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f000 f95d 	bl	8012c9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d102      	bne.n	80129f2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80129ec:	68f8      	ldr	r0, [r7, #12]
 80129ee:	f7fe fd2f 	bl	8011450 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80129f2:	bf00      	nop
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80129fa:	b480      	push	{r7}
 80129fc:	b085      	sub	sp, #20
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d006      	beq.n	8012a18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012a14:	60fb      	str	r3, [r7, #12]
 8012a16:	e001      	b.n	8012a1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
	}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3714      	adds	r7, #20
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr

08012a2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b086      	sub	sp, #24
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	60f8      	str	r0, [r7, #12]
 8012a32:	60b9      	str	r1, [r7, #8]
 8012a34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012a36:	2300      	movs	r3, #0
 8012a38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d10d      	bne.n	8012a64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d14d      	bne.n	8012aec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	4618      	mov	r0, r3
 8012a56:	f001 f915 	bl	8013c84 <xTaskPriorityDisinherit>
 8012a5a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	605a      	str	r2, [r3, #4]
 8012a62:	e043      	b.n	8012aec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d119      	bne.n	8012a9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6898      	ldr	r0, [r3, #8]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a72:	461a      	mov	r2, r3
 8012a74:	68b9      	ldr	r1, [r7, #8]
 8012a76:	f007 fcd3 	bl	801a420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	689a      	ldr	r2, [r3, #8]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a82:	441a      	add	r2, r3
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	689a      	ldr	r2, [r3, #8]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d32b      	bcc.n	8012aec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	609a      	str	r2, [r3, #8]
 8012a9c:	e026      	b.n	8012aec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	68d8      	ldr	r0, [r3, #12]
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	68b9      	ldr	r1, [r7, #8]
 8012aaa:	f007 fcb9 	bl	801a420 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	68da      	ldr	r2, [r3, #12]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab6:	425b      	negs	r3, r3
 8012ab8:	441a      	add	r2, r3
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68da      	ldr	r2, [r3, #12]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d207      	bcs.n	8012ada <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	425b      	negs	r3, r3
 8012ad4:	441a      	add	r2, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d105      	bne.n	8012aec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012ae6:	693b      	ldr	r3, [r7, #16]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	1c5a      	adds	r2, r3, #1
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012af4:	697b      	ldr	r3, [r7, #20]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b082      	sub	sp, #8
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d018      	beq.n	8012b42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	68da      	ldr	r2, [r3, #12]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b18:	441a      	add	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	68da      	ldr	r2, [r3, #12]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d303      	bcc.n	8012b32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	68d9      	ldr	r1, [r3, #12]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	6838      	ldr	r0, [r7, #0]
 8012b3e:	f007 fc6f 	bl	801a420 <memcpy>
	}
}
 8012b42:	bf00      	nop
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b084      	sub	sp, #16
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b52:	f7fe ff6b 	bl	8011a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b5e:	e011      	b.n	8012b84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d012      	beq.n	8012b8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3324      	adds	r3, #36	; 0x24
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f000 fddb 	bl	8013728 <xTaskRemoveFromEventList>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d001      	beq.n	8012b7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012b78:	f000 feb0 	bl	80138dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012b7c:	7bfb      	ldrb	r3, [r7, #15]
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	dce9      	bgt.n	8012b60 <prvUnlockQueue+0x16>
 8012b8c:	e000      	b.n	8012b90 <prvUnlockQueue+0x46>
					break;
 8012b8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	22ff      	movs	r2, #255	; 0xff
 8012b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012b98:	f7fe ff76 	bl	8011a88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012b9c:	f7fe ff46 	bl	8011a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ba6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ba8:	e011      	b.n	8012bce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d012      	beq.n	8012bd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	3310      	adds	r3, #16
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f000 fdb6 	bl	8013728 <xTaskRemoveFromEventList>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d001      	beq.n	8012bc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012bc2:	f000 fe8b 	bl	80138dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012bc6:	7bbb      	ldrb	r3, [r7, #14]
 8012bc8:	3b01      	subs	r3, #1
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	dce9      	bgt.n	8012baa <prvUnlockQueue+0x60>
 8012bd6:	e000      	b.n	8012bda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012bd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	22ff      	movs	r2, #255	; 0xff
 8012bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012be2:	f7fe ff51 	bl	8011a88 <vPortExitCritical>
}
 8012be6:	bf00      	nop
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}

08012bee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012bf6:	f7fe ff19 	bl	8011a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012c02:	2301      	movs	r3, #1
 8012c04:	60fb      	str	r3, [r7, #12]
 8012c06:	e001      	b.n	8012c0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c0c:	f7fe ff3c 	bl	8011a88 <vPortExitCritical>

	return xReturn;
 8012c10:	68fb      	ldr	r3, [r7, #12]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b084      	sub	sp, #16
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c22:	f7fe ff03 	bl	8011a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d102      	bne.n	8012c38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012c32:	2301      	movs	r3, #1
 8012c34:	60fb      	str	r3, [r7, #12]
 8012c36:	e001      	b.n	8012c3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c3c:	f7fe ff24 	bl	8011a88 <vPortExitCritical>

	return xReturn;
 8012c40:	68fb      	ldr	r3, [r7, #12]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
	...

08012c4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c56:	2300      	movs	r3, #0
 8012c58:	60fb      	str	r3, [r7, #12]
 8012c5a:	e014      	b.n	8012c86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012c5c:	4a0e      	ldr	r2, [pc, #56]	; (8012c98 <vQueueAddToRegistry+0x4c>)
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d10b      	bne.n	8012c80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012c68:	490b      	ldr	r1, [pc, #44]	; (8012c98 <vQueueAddToRegistry+0x4c>)
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	683a      	ldr	r2, [r7, #0]
 8012c6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012c72:	4a09      	ldr	r2, [pc, #36]	; (8012c98 <vQueueAddToRegistry+0x4c>)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	4413      	add	r3, r2
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012c7e:	e005      	b.n	8012c8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	3301      	adds	r3, #1
 8012c84:	60fb      	str	r3, [r7, #12]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2b0b      	cmp	r3, #11
 8012c8a:	d9e7      	bls.n	8012c5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012c8c:	bf00      	nop
 8012c8e:	3714      	adds	r7, #20
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	200288cc 	.word	0x200288cc

08012c9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	60fb      	str	r3, [r7, #12]
 8012ca8:	e016      	b.n	8012cd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012caa:	4a10      	ldr	r2, [pc, #64]	; (8012cec <vQueueUnregisterQueue+0x50>)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	00db      	lsls	r3, r3, #3
 8012cb0:	4413      	add	r3, r2
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d10b      	bne.n	8012cd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012cba:	4a0c      	ldr	r2, [pc, #48]	; (8012cec <vQueueUnregisterQueue+0x50>)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2100      	movs	r1, #0
 8012cc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012cc4:	4a09      	ldr	r2, [pc, #36]	; (8012cec <vQueueUnregisterQueue+0x50>)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	00db      	lsls	r3, r3, #3
 8012cca:	4413      	add	r3, r2
 8012ccc:	2200      	movs	r2, #0
 8012cce:	605a      	str	r2, [r3, #4]
				break;
 8012cd0:	e005      	b.n	8012cde <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	60fb      	str	r3, [r7, #12]
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b0b      	cmp	r3, #11
 8012cdc:	d9e5      	bls.n	8012caa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012cde:	bf00      	nop
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	200288cc 	.word	0x200288cc

08012cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012d00:	f7fe fe94 	bl	8011a2c <vPortEnterCritical>
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d0a:	b25b      	sxtb	r3, r3
 8012d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d10:	d103      	bne.n	8012d1a <vQueueWaitForMessageRestricted+0x2a>
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d20:	b25b      	sxtb	r3, r3
 8012d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d26:	d103      	bne.n	8012d30 <vQueueWaitForMessageRestricted+0x40>
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d30:	f7fe feaa 	bl	8011a88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	3324      	adds	r3, #36	; 0x24
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	68b9      	ldr	r1, [r7, #8]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 fcc5 	bl	80136d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012d4a:	6978      	ldr	r0, [r7, #20]
 8012d4c:	f7ff fefd 	bl	8012b4a <prvUnlockQueue>
	}
 8012d50:	bf00      	nop
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b08e      	sub	sp, #56	; 0x38
 8012d5c:	af04      	add	r7, sp, #16
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	607a      	str	r2, [r7, #4]
 8012d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d109      	bne.n	8012d80 <xTaskCreateStatic+0x28>
 8012d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d70:	f383 8811 	msr	BASEPRI, r3
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	f3bf 8f4f 	dsb	sy
 8012d7c:	623b      	str	r3, [r7, #32]
 8012d7e:	e7fe      	b.n	8012d7e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d109      	bne.n	8012d9a <xTaskCreateStatic+0x42>
 8012d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d8a:	f383 8811 	msr	BASEPRI, r3
 8012d8e:	f3bf 8f6f 	isb	sy
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	61fb      	str	r3, [r7, #28]
 8012d98:	e7fe      	b.n	8012d98 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012d9a:	2364      	movs	r3, #100	; 0x64
 8012d9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	2b64      	cmp	r3, #100	; 0x64
 8012da2:	d009      	beq.n	8012db8 <xTaskCreateStatic+0x60>
 8012da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da8:	f383 8811 	msr	BASEPRI, r3
 8012dac:	f3bf 8f6f 	isb	sy
 8012db0:	f3bf 8f4f 	dsb	sy
 8012db4:	61bb      	str	r3, [r7, #24]
 8012db6:	e7fe      	b.n	8012db6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d01e      	beq.n	8012dfc <xTaskCreateStatic+0xa4>
 8012dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d01b      	beq.n	8012dfc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd0:	2202      	movs	r2, #2
 8012dd2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	9303      	str	r3, [sp, #12]
 8012dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ddc:	9302      	str	r3, [sp, #8]
 8012dde:	f107 0314 	add.w	r3, r7, #20
 8012de2:	9301      	str	r3, [sp, #4]
 8012de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	68b9      	ldr	r1, [r7, #8]
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	f000 f850 	bl	8012e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012df6:	f000 f8d9 	bl	8012fac <prvAddNewTaskToReadyList>
 8012dfa:	e001      	b.n	8012e00 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012e00:	697b      	ldr	r3, [r7, #20]
	}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3728      	adds	r7, #40	; 0x28
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b08c      	sub	sp, #48	; 0x30
 8012e0e:	af04      	add	r7, sp, #16
 8012e10:	60f8      	str	r0, [r7, #12]
 8012e12:	60b9      	str	r1, [r7, #8]
 8012e14:	603b      	str	r3, [r7, #0]
 8012e16:	4613      	mov	r3, r2
 8012e18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e1a:	88fb      	ldrh	r3, [r7, #6]
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe fa50 	bl	80112c4 <pvPortMalloc>
 8012e24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d00e      	beq.n	8012e4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012e2c:	2064      	movs	r0, #100	; 0x64
 8012e2e:	f7fe fa49 	bl	80112c4 <pvPortMalloc>
 8012e32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d003      	beq.n	8012e42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	697a      	ldr	r2, [r7, #20]
 8012e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8012e40:	e005      	b.n	8012e4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012e42:	6978      	ldr	r0, [r7, #20]
 8012e44:	f7fe fb04 	bl	8011450 <vPortFree>
 8012e48:	e001      	b.n	8012e4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d017      	beq.n	8012e84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	2200      	movs	r2, #0
 8012e58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e5c:	88fa      	ldrh	r2, [r7, #6]
 8012e5e:	2300      	movs	r3, #0
 8012e60:	9303      	str	r3, [sp, #12]
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	9302      	str	r3, [sp, #8]
 8012e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	68b9      	ldr	r1, [r7, #8]
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f000 f80e 	bl	8012e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e78:	69f8      	ldr	r0, [r7, #28]
 8012e7a:	f000 f897 	bl	8012fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	61bb      	str	r3, [r7, #24]
 8012e82:	e002      	b.n	8012e8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012e84:	f04f 33ff 	mov.w	r3, #4294967295
 8012e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3720      	adds	r7, #32
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b088      	sub	sp, #32
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	60b9      	str	r1, [r7, #8]
 8012e9e:	607a      	str	r2, [r7, #4]
 8012ea0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	461a      	mov	r2, r3
 8012eac:	21a5      	movs	r1, #165	; 0xa5
 8012eae:	f007 fac2 	bl	801a436 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	009b      	lsls	r3, r3, #2
 8012ec0:	4413      	add	r3, r2
 8012ec2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	f023 0307 	bic.w	r3, r3, #7
 8012eca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	f003 0307 	and.w	r3, r3, #7
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d009      	beq.n	8012eea <prvInitialiseNewTask+0x56>
 8012ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eda:	f383 8811 	msr	BASEPRI, r3
 8012ede:	f3bf 8f6f 	isb	sy
 8012ee2:	f3bf 8f4f 	dsb	sy
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	e7fe      	b.n	8012ee8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	69ba      	ldr	r2, [r7, #24]
 8012eee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	61fb      	str	r3, [r7, #28]
 8012ef4:	e012      	b.n	8012f1c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	4413      	add	r3, r2
 8012efc:	7819      	ldrb	r1, [r3, #0]
 8012efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	4413      	add	r3, r2
 8012f04:	3334      	adds	r3, #52	; 0x34
 8012f06:	460a      	mov	r2, r1
 8012f08:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	4413      	add	r3, r2
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d006      	beq.n	8012f24 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	61fb      	str	r3, [r7, #28]
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	2b0f      	cmp	r3, #15
 8012f20:	d9e9      	bls.n	8012ef6 <prvInitialiseNewTask+0x62>
 8012f22:	e000      	b.n	8012f26 <prvInitialiseNewTask+0x92>
		{
			break;
 8012f24:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	2b37      	cmp	r3, #55	; 0x37
 8012f32:	d901      	bls.n	8012f38 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012f34:	2337      	movs	r3, #55	; 0x37
 8012f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f42:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8012f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f46:	2200      	movs	r2, #0
 8012f48:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	3304      	adds	r3, #4
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe fbb4 	bl	80116bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f56:	3318      	adds	r3, #24
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7fe fbaf 	bl	80116bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f76:	2200      	movs	r2, #0
 8012f78:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f82:	2200      	movs	r2, #0
 8012f84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012f88:	683a      	ldr	r2, [r7, #0]
 8012f8a:	68f9      	ldr	r1, [r7, #12]
 8012f8c:	69b8      	ldr	r0, [r7, #24]
 8012f8e:	f7fe fc29 	bl	80117e4 <pxPortInitialiseStack>
 8012f92:	4602      	mov	r2, r0
 8012f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d002      	beq.n	8012fa4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fa4:	bf00      	nop
 8012fa6:	3720      	adds	r7, #32
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012fb4:	f7fe fd3a 	bl	8011a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012fb8:	4b2d      	ldr	r3, [pc, #180]	; (8013070 <prvAddNewTaskToReadyList+0xc4>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	4a2c      	ldr	r2, [pc, #176]	; (8013070 <prvAddNewTaskToReadyList+0xc4>)
 8012fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012fc2:	4b2c      	ldr	r3, [pc, #176]	; (8013074 <prvAddNewTaskToReadyList+0xc8>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d109      	bne.n	8012fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012fca:	4a2a      	ldr	r2, [pc, #168]	; (8013074 <prvAddNewTaskToReadyList+0xc8>)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012fd0:	4b27      	ldr	r3, [pc, #156]	; (8013070 <prvAddNewTaskToReadyList+0xc4>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d110      	bne.n	8012ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012fd8:	f000 fcf8 	bl	80139cc <prvInitialiseTaskLists>
 8012fdc:	e00d      	b.n	8012ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012fde:	4b26      	ldr	r3, [pc, #152]	; (8013078 <prvAddNewTaskToReadyList+0xcc>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d109      	bne.n	8012ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012fe6:	4b23      	ldr	r3, [pc, #140]	; (8013074 <prvAddNewTaskToReadyList+0xc8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d802      	bhi.n	8012ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012ff4:	4a1f      	ldr	r2, [pc, #124]	; (8013074 <prvAddNewTaskToReadyList+0xc8>)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012ffa:	4b20      	ldr	r3, [pc, #128]	; (801307c <prvAddNewTaskToReadyList+0xd0>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	3301      	adds	r3, #1
 8013000:	4a1e      	ldr	r2, [pc, #120]	; (801307c <prvAddNewTaskToReadyList+0xd0>)
 8013002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013004:	4b1d      	ldr	r3, [pc, #116]	; (801307c <prvAddNewTaskToReadyList+0xd0>)
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013010:	4b1b      	ldr	r3, [pc, #108]	; (8013080 <prvAddNewTaskToReadyList+0xd4>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	429a      	cmp	r2, r3
 8013016:	d903      	bls.n	8013020 <prvAddNewTaskToReadyList+0x74>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801301c:	4a18      	ldr	r2, [pc, #96]	; (8013080 <prvAddNewTaskToReadyList+0xd4>)
 801301e:	6013      	str	r3, [r2, #0]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013024:	4613      	mov	r3, r2
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	4413      	add	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	4a15      	ldr	r2, [pc, #84]	; (8013084 <prvAddNewTaskToReadyList+0xd8>)
 801302e:	441a      	add	r2, r3
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	3304      	adds	r3, #4
 8013034:	4619      	mov	r1, r3
 8013036:	4610      	mov	r0, r2
 8013038:	f7fe fb4d 	bl	80116d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801303c:	f7fe fd24 	bl	8011a88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013040:	4b0d      	ldr	r3, [pc, #52]	; (8013078 <prvAddNewTaskToReadyList+0xcc>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00e      	beq.n	8013066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013048:	4b0a      	ldr	r3, [pc, #40]	; (8013074 <prvAddNewTaskToReadyList+0xc8>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013052:	429a      	cmp	r2, r3
 8013054:	d207      	bcs.n	8013066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013056:	4b0c      	ldr	r3, [pc, #48]	; (8013088 <prvAddNewTaskToReadyList+0xdc>)
 8013058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013066:	bf00      	nop
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	20027448 	.word	0x20027448
 8013074:	20026f74 	.word	0x20026f74
 8013078:	20027454 	.word	0x20027454
 801307c:	20027464 	.word	0x20027464
 8013080:	20027450 	.word	0x20027450
 8013084:	20026f78 	.word	0x20026f78
 8013088:	e000ed04 	.word	0xe000ed04

0801308c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013094:	2300      	movs	r3, #0
 8013096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d016      	beq.n	80130cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801309e:	4b13      	ldr	r3, [pc, #76]	; (80130ec <vTaskDelay+0x60>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d009      	beq.n	80130ba <vTaskDelay+0x2e>
 80130a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130aa:	f383 8811 	msr	BASEPRI, r3
 80130ae:	f3bf 8f6f 	isb	sy
 80130b2:	f3bf 8f4f 	dsb	sy
 80130b6:	60bb      	str	r3, [r7, #8]
 80130b8:	e7fe      	b.n	80130b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80130ba:	f000 f881 	bl	80131c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80130be:	2100      	movs	r1, #0
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f001 f8a9 	bl	8014218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80130c6:	f000 f8c1 	bl	801324c <xTaskResumeAll>
 80130ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d107      	bne.n	80130e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80130d2:	4b07      	ldr	r3, [pc, #28]	; (80130f0 <vTaskDelay+0x64>)
 80130d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130d8:	601a      	str	r2, [r3, #0]
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80130e2:	bf00      	nop
 80130e4:	3710      	adds	r7, #16
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	20027470 	.word	0x20027470
 80130f0:	e000ed04 	.word	0xe000ed04

080130f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08a      	sub	sp, #40	; 0x28
 80130f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80130fe:	2300      	movs	r3, #0
 8013100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013102:	463a      	mov	r2, r7
 8013104:	1d39      	adds	r1, r7, #4
 8013106:	f107 0308 	add.w	r3, r7, #8
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe f8a6 	bl	801125c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013110:	6839      	ldr	r1, [r7, #0]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	68ba      	ldr	r2, [r7, #8]
 8013116:	9202      	str	r2, [sp, #8]
 8013118:	9301      	str	r3, [sp, #4]
 801311a:	2300      	movs	r3, #0
 801311c:	9300      	str	r3, [sp, #0]
 801311e:	2300      	movs	r3, #0
 8013120:	460a      	mov	r2, r1
 8013122:	4921      	ldr	r1, [pc, #132]	; (80131a8 <vTaskStartScheduler+0xb4>)
 8013124:	4821      	ldr	r0, [pc, #132]	; (80131ac <vTaskStartScheduler+0xb8>)
 8013126:	f7ff fe17 	bl	8012d58 <xTaskCreateStatic>
 801312a:	4602      	mov	r2, r0
 801312c:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <vTaskStartScheduler+0xbc>)
 801312e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013130:	4b1f      	ldr	r3, [pc, #124]	; (80131b0 <vTaskStartScheduler+0xbc>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d002      	beq.n	801313e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013138:	2301      	movs	r3, #1
 801313a:	617b      	str	r3, [r7, #20]
 801313c:	e001      	b.n	8013142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801313e:	2300      	movs	r3, #0
 8013140:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d102      	bne.n	801314e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013148:	f001 f8ba 	bl	80142c0 <xTimerCreateTimerTask>
 801314c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d117      	bne.n	8013184 <vTaskStartScheduler+0x90>
 8013154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013158:	f383 8811 	msr	BASEPRI, r3
 801315c:	f3bf 8f6f 	isb	sy
 8013160:	f3bf 8f4f 	dsb	sy
 8013164:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013166:	4b13      	ldr	r3, [pc, #76]	; (80131b4 <vTaskStartScheduler+0xc0>)
 8013168:	f04f 32ff 	mov.w	r2, #4294967295
 801316c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801316e:	4b12      	ldr	r3, [pc, #72]	; (80131b8 <vTaskStartScheduler+0xc4>)
 8013170:	2201      	movs	r2, #1
 8013172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013174:	4b11      	ldr	r3, [pc, #68]	; (80131bc <vTaskStartScheduler+0xc8>)
 8013176:	2200      	movs	r2, #0
 8013178:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801317a:	f7ee f858 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801317e:	f7fe fbb7 	bl	80118f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013182:	e00d      	b.n	80131a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318a:	d109      	bne.n	80131a0 <vTaskStartScheduler+0xac>
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	60fb      	str	r3, [r7, #12]
 801319e:	e7fe      	b.n	801319e <vTaskStartScheduler+0xaa>
}
 80131a0:	bf00      	nop
 80131a2:	3718      	adds	r7, #24
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	0801b800 	.word	0x0801b800
 80131ac:	080138f5 	.word	0x080138f5
 80131b0:	2002746c 	.word	0x2002746c
 80131b4:	20027468 	.word	0x20027468
 80131b8:	20027454 	.word	0x20027454
 80131bc:	2002744c 	.word	0x2002744c

080131c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80131c0:	b480      	push	{r7}
 80131c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80131c4:	4b04      	ldr	r3, [pc, #16]	; (80131d8 <vTaskSuspendAll+0x18>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	3301      	adds	r3, #1
 80131ca:	4a03      	ldr	r2, [pc, #12]	; (80131d8 <vTaskSuspendAll+0x18>)
 80131cc:	6013      	str	r3, [r2, #0]
}
 80131ce:	bf00      	nop
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr
 80131d8:	20027470 	.word	0x20027470

080131dc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80131e2:	2300      	movs	r3, #0
 80131e4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80131e6:	4b14      	ldr	r3, [pc, #80]	; (8013238 <prvGetExpectedIdleTime+0x5c>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d001      	beq.n	80131f2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80131ee:	2301      	movs	r3, #1
 80131f0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80131f2:	4b12      	ldr	r3, [pc, #72]	; (801323c <prvGetExpectedIdleTime+0x60>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d002      	beq.n	8013202 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80131fc:	2300      	movs	r3, #0
 80131fe:	607b      	str	r3, [r7, #4]
 8013200:	e012      	b.n	8013228 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8013202:	4b0f      	ldr	r3, [pc, #60]	; (8013240 <prvGetExpectedIdleTime+0x64>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d902      	bls.n	8013210 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	607b      	str	r3, [r7, #4]
 801320e:	e00b      	b.n	8013228 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8013216:	2300      	movs	r3, #0
 8013218:	607b      	str	r3, [r7, #4]
 801321a:	e005      	b.n	8013228 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 801321c:	4b09      	ldr	r3, [pc, #36]	; (8013244 <prvGetExpectedIdleTime+0x68>)
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	4b09      	ldr	r3, [pc, #36]	; (8013248 <prvGetExpectedIdleTime+0x6c>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8013228:	687b      	ldr	r3, [r7, #4]
	}
 801322a:	4618      	mov	r0, r3
 801322c:	370c      	adds	r7, #12
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
 8013236:	bf00      	nop
 8013238:	20027450 	.word	0x20027450
 801323c:	20026f74 	.word	0x20026f74
 8013240:	20026f78 	.word	0x20026f78
 8013244:	20027468 	.word	0x20027468
 8013248:	2002744c 	.word	0x2002744c

0801324c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013252:	2300      	movs	r3, #0
 8013254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013256:	2300      	movs	r3, #0
 8013258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801325a:	4b41      	ldr	r3, [pc, #260]	; (8013360 <xTaskResumeAll+0x114>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <xTaskResumeAll+0x2a>
 8013262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013266:	f383 8811 	msr	BASEPRI, r3
 801326a:	f3bf 8f6f 	isb	sy
 801326e:	f3bf 8f4f 	dsb	sy
 8013272:	603b      	str	r3, [r7, #0]
 8013274:	e7fe      	b.n	8013274 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013276:	f7fe fbd9 	bl	8011a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801327a:	4b39      	ldr	r3, [pc, #228]	; (8013360 <xTaskResumeAll+0x114>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3b01      	subs	r3, #1
 8013280:	4a37      	ldr	r2, [pc, #220]	; (8013360 <xTaskResumeAll+0x114>)
 8013282:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013284:	4b36      	ldr	r3, [pc, #216]	; (8013360 <xTaskResumeAll+0x114>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d162      	bne.n	8013352 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801328c:	4b35      	ldr	r3, [pc, #212]	; (8013364 <xTaskResumeAll+0x118>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d05e      	beq.n	8013352 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013294:	e02f      	b.n	80132f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013296:	4b34      	ldr	r3, [pc, #208]	; (8013368 <xTaskResumeAll+0x11c>)
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	3318      	adds	r3, #24
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fe fa74 	bl	8011790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	3304      	adds	r3, #4
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fe fa6f 	bl	8011790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132b6:	4b2d      	ldr	r3, [pc, #180]	; (801336c <xTaskResumeAll+0x120>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d903      	bls.n	80132c6 <xTaskResumeAll+0x7a>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c2:	4a2a      	ldr	r2, [pc, #168]	; (801336c <xTaskResumeAll+0x120>)
 80132c4:	6013      	str	r3, [r2, #0]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ca:	4613      	mov	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4413      	add	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	4a27      	ldr	r2, [pc, #156]	; (8013370 <xTaskResumeAll+0x124>)
 80132d4:	441a      	add	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	3304      	adds	r3, #4
 80132da:	4619      	mov	r1, r3
 80132dc:	4610      	mov	r0, r2
 80132de:	f7fe f9fa 	bl	80116d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132e6:	4b23      	ldr	r3, [pc, #140]	; (8013374 <xTaskResumeAll+0x128>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d302      	bcc.n	80132f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80132f0:	4b21      	ldr	r3, [pc, #132]	; (8013378 <xTaskResumeAll+0x12c>)
 80132f2:	2201      	movs	r2, #1
 80132f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132f6:	4b1c      	ldr	r3, [pc, #112]	; (8013368 <xTaskResumeAll+0x11c>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1cb      	bne.n	8013296 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013304:	f000 fbfc 	bl	8013b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013308:	4b1c      	ldr	r3, [pc, #112]	; (801337c <xTaskResumeAll+0x130>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d010      	beq.n	8013336 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013314:	f000 f86c 	bl	80133f0 <xTaskIncrementTick>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d002      	beq.n	8013324 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801331e:	4b16      	ldr	r3, [pc, #88]	; (8013378 <xTaskResumeAll+0x12c>)
 8013320:	2201      	movs	r2, #1
 8013322:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	3b01      	subs	r3, #1
 8013328:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1f1      	bne.n	8013314 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013330:	4b12      	ldr	r3, [pc, #72]	; (801337c <xTaskResumeAll+0x130>)
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013336:	4b10      	ldr	r3, [pc, #64]	; (8013378 <xTaskResumeAll+0x12c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d009      	beq.n	8013352 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801333e:	2301      	movs	r3, #1
 8013340:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013342:	4b0f      	ldr	r3, [pc, #60]	; (8013380 <xTaskResumeAll+0x134>)
 8013344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	f3bf 8f4f 	dsb	sy
 801334e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013352:	f7fe fb99 	bl	8011a88 <vPortExitCritical>

	return xAlreadyYielded;
 8013356:	68bb      	ldr	r3, [r7, #8]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	20027470 	.word	0x20027470
 8013364:	20027448 	.word	0x20027448
 8013368:	20027408 	.word	0x20027408
 801336c:	20027450 	.word	0x20027450
 8013370:	20026f78 	.word	0x20026f78
 8013374:	20026f74 	.word	0x20026f74
 8013378:	2002745c 	.word	0x2002745c
 801337c:	20027458 	.word	0x20027458
 8013380:	e000ed04 	.word	0xe000ed04

08013384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013384:	b480      	push	{r7}
 8013386:	b083      	sub	sp, #12
 8013388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801338a:	4b05      	ldr	r3, [pc, #20]	; (80133a0 <xTaskGetTickCount+0x1c>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013390:	687b      	ldr	r3, [r7, #4]
}
 8013392:	4618      	mov	r0, r3
 8013394:	370c      	adds	r7, #12
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	2002744c 	.word	0x2002744c

080133a4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80133a4:	b480      	push	{r7}
 80133a6:	b085      	sub	sp, #20
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80133ac:	4b0e      	ldr	r3, [pc, #56]	; (80133e8 <vTaskStepTick+0x44>)
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	441a      	add	r2, r3
 80133b4:	4b0d      	ldr	r3, [pc, #52]	; (80133ec <vTaskStepTick+0x48>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d909      	bls.n	80133d0 <vTaskStepTick+0x2c>
 80133bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c0:	f383 8811 	msr	BASEPRI, r3
 80133c4:	f3bf 8f6f 	isb	sy
 80133c8:	f3bf 8f4f 	dsb	sy
 80133cc:	60fb      	str	r3, [r7, #12]
 80133ce:	e7fe      	b.n	80133ce <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80133d0:	4b05      	ldr	r3, [pc, #20]	; (80133e8 <vTaskStepTick+0x44>)
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4413      	add	r3, r2
 80133d8:	4a03      	ldr	r2, [pc, #12]	; (80133e8 <vTaskStepTick+0x44>)
 80133da:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80133dc:	bf00      	nop
 80133de:	3714      	adds	r7, #20
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	2002744c 	.word	0x2002744c
 80133ec:	20027468 	.word	0x20027468

080133f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80133f6:	2300      	movs	r3, #0
 80133f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133fa:	4b55      	ldr	r3, [pc, #340]	; (8013550 <xTaskIncrementTick+0x160>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	f040 8093 	bne.w	801352a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013404:	4b53      	ldr	r3, [pc, #332]	; (8013554 <xTaskIncrementTick+0x164>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	3301      	adds	r3, #1
 801340a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801340c:	4a51      	ldr	r2, [pc, #324]	; (8013554 <xTaskIncrementTick+0x164>)
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d11f      	bne.n	8013458 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013418:	4b4f      	ldr	r3, [pc, #316]	; (8013558 <xTaskIncrementTick+0x168>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d009      	beq.n	8013436 <xTaskIncrementTick+0x46>
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	603b      	str	r3, [r7, #0]
 8013434:	e7fe      	b.n	8013434 <xTaskIncrementTick+0x44>
 8013436:	4b48      	ldr	r3, [pc, #288]	; (8013558 <xTaskIncrementTick+0x168>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	4b47      	ldr	r3, [pc, #284]	; (801355c <xTaskIncrementTick+0x16c>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a45      	ldr	r2, [pc, #276]	; (8013558 <xTaskIncrementTick+0x168>)
 8013442:	6013      	str	r3, [r2, #0]
 8013444:	4a45      	ldr	r2, [pc, #276]	; (801355c <xTaskIncrementTick+0x16c>)
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6013      	str	r3, [r2, #0]
 801344a:	4b45      	ldr	r3, [pc, #276]	; (8013560 <xTaskIncrementTick+0x170>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	3301      	adds	r3, #1
 8013450:	4a43      	ldr	r2, [pc, #268]	; (8013560 <xTaskIncrementTick+0x170>)
 8013452:	6013      	str	r3, [r2, #0]
 8013454:	f000 fb54 	bl	8013b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013458:	4b42      	ldr	r3, [pc, #264]	; (8013564 <xTaskIncrementTick+0x174>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	693a      	ldr	r2, [r7, #16]
 801345e:	429a      	cmp	r2, r3
 8013460:	d34e      	bcc.n	8013500 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013462:	4b3d      	ldr	r3, [pc, #244]	; (8013558 <xTaskIncrementTick+0x168>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <xTaskIncrementTick+0x80>
 801346c:	2301      	movs	r3, #1
 801346e:	e000      	b.n	8013472 <xTaskIncrementTick+0x82>
 8013470:	2300      	movs	r3, #0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d004      	beq.n	8013480 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013476:	4b3b      	ldr	r3, [pc, #236]	; (8013564 <xTaskIncrementTick+0x174>)
 8013478:	f04f 32ff 	mov.w	r2, #4294967295
 801347c:	601a      	str	r2, [r3, #0]
					break;
 801347e:	e03f      	b.n	8013500 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013480:	4b35      	ldr	r3, [pc, #212]	; (8013558 <xTaskIncrementTick+0x168>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013490:	693a      	ldr	r2, [r7, #16]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	429a      	cmp	r2, r3
 8013496:	d203      	bcs.n	80134a0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013498:	4a32      	ldr	r2, [pc, #200]	; (8013564 <xTaskIncrementTick+0x174>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6013      	str	r3, [r2, #0]
						break;
 801349e:	e02f      	b.n	8013500 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	3304      	adds	r3, #4
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7fe f973 	bl	8011790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d004      	beq.n	80134bc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	3318      	adds	r3, #24
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fe f96a 	bl	8011790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134c0:	4b29      	ldr	r3, [pc, #164]	; (8013568 <xTaskIncrementTick+0x178>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d903      	bls.n	80134d0 <xTaskIncrementTick+0xe0>
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134cc:	4a26      	ldr	r2, [pc, #152]	; (8013568 <xTaskIncrementTick+0x178>)
 80134ce:	6013      	str	r3, [r2, #0]
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d4:	4613      	mov	r3, r2
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	4413      	add	r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4a23      	ldr	r2, [pc, #140]	; (801356c <xTaskIncrementTick+0x17c>)
 80134de:	441a      	add	r2, r3
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	3304      	adds	r3, #4
 80134e4:	4619      	mov	r1, r3
 80134e6:	4610      	mov	r0, r2
 80134e8:	f7fe f8f5 	bl	80116d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f0:	4b1f      	ldr	r3, [pc, #124]	; (8013570 <xTaskIncrementTick+0x180>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d3b3      	bcc.n	8013462 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80134fa:	2301      	movs	r3, #1
 80134fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134fe:	e7b0      	b.n	8013462 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013500:	4b1b      	ldr	r3, [pc, #108]	; (8013570 <xTaskIncrementTick+0x180>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013506:	4919      	ldr	r1, [pc, #100]	; (801356c <xTaskIncrementTick+0x17c>)
 8013508:	4613      	mov	r3, r2
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	4413      	add	r3, r2
 801350e:	009b      	lsls	r3, r3, #2
 8013510:	440b      	add	r3, r1
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d901      	bls.n	801351c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013518:	2301      	movs	r3, #1
 801351a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801351c:	4b15      	ldr	r3, [pc, #84]	; (8013574 <xTaskIncrementTick+0x184>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d109      	bne.n	8013538 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8013524:	f7ed fe91 	bl	800124a <vApplicationTickHook>
 8013528:	e006      	b.n	8013538 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801352a:	4b12      	ldr	r3, [pc, #72]	; (8013574 <xTaskIncrementTick+0x184>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	3301      	adds	r3, #1
 8013530:	4a10      	ldr	r2, [pc, #64]	; (8013574 <xTaskIncrementTick+0x184>)
 8013532:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8013534:	f7ed fe89 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013538:	4b0f      	ldr	r3, [pc, #60]	; (8013578 <xTaskIncrementTick+0x188>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d001      	beq.n	8013544 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8013540:	2301      	movs	r3, #1
 8013542:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013544:	697b      	ldr	r3, [r7, #20]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3718      	adds	r7, #24
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	20027470 	.word	0x20027470
 8013554:	2002744c 	.word	0x2002744c
 8013558:	20027400 	.word	0x20027400
 801355c:	20027404 	.word	0x20027404
 8013560:	20027460 	.word	0x20027460
 8013564:	20027468 	.word	0x20027468
 8013568:	20027450 	.word	0x20027450
 801356c:	20026f78 	.word	0x20026f78
 8013570:	20026f74 	.word	0x20026f74
 8013574:	20027458 	.word	0x20027458
 8013578:	2002745c 	.word	0x2002745c

0801357c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013582:	4b3b      	ldr	r3, [pc, #236]	; (8013670 <vTaskSwitchContext+0xf4>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801358a:	4b3a      	ldr	r3, [pc, #232]	; (8013674 <vTaskSwitchContext+0xf8>)
 801358c:	2201      	movs	r2, #1
 801358e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013590:	e06a      	b.n	8013668 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8013592:	4b38      	ldr	r3, [pc, #224]	; (8013674 <vTaskSwitchContext+0xf8>)
 8013594:	2200      	movs	r2, #0
 8013596:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013598:	f7ed fe50 	bl	800123c <getRunTimeCounterValue>
 801359c:	4602      	mov	r2, r0
 801359e:	4b36      	ldr	r3, [pc, #216]	; (8013678 <vTaskSwitchContext+0xfc>)
 80135a0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80135a2:	4b35      	ldr	r3, [pc, #212]	; (8013678 <vTaskSwitchContext+0xfc>)
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	4b35      	ldr	r3, [pc, #212]	; (801367c <vTaskSwitchContext+0x100>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d909      	bls.n	80135c2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80135ae:	4b34      	ldr	r3, [pc, #208]	; (8013680 <vTaskSwitchContext+0x104>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80135b4:	4a30      	ldr	r2, [pc, #192]	; (8013678 <vTaskSwitchContext+0xfc>)
 80135b6:	6810      	ldr	r0, [r2, #0]
 80135b8:	4a30      	ldr	r2, [pc, #192]	; (801367c <vTaskSwitchContext+0x100>)
 80135ba:	6812      	ldr	r2, [r2, #0]
 80135bc:	1a82      	subs	r2, r0, r2
 80135be:	440a      	add	r2, r1
 80135c0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80135c2:	4b2d      	ldr	r3, [pc, #180]	; (8013678 <vTaskSwitchContext+0xfc>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	4a2d      	ldr	r2, [pc, #180]	; (801367c <vTaskSwitchContext+0x100>)
 80135c8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80135ca:	4b2d      	ldr	r3, [pc, #180]	; (8013680 <vTaskSwitchContext+0x104>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	4b2b      	ldr	r3, [pc, #172]	; (8013680 <vTaskSwitchContext+0x104>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d808      	bhi.n	80135ec <vTaskSwitchContext+0x70>
 80135da:	4b29      	ldr	r3, [pc, #164]	; (8013680 <vTaskSwitchContext+0x104>)
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	4b28      	ldr	r3, [pc, #160]	; (8013680 <vTaskSwitchContext+0x104>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	3334      	adds	r3, #52	; 0x34
 80135e4:	4619      	mov	r1, r3
 80135e6:	4610      	mov	r0, r2
 80135e8:	f7ed fe36 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80135ec:	4b25      	ldr	r3, [pc, #148]	; (8013684 <vTaskSwitchContext+0x108>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	60fb      	str	r3, [r7, #12]
 80135f2:	e00f      	b.n	8013614 <vTaskSwitchContext+0x98>
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d109      	bne.n	801360e <vTaskSwitchContext+0x92>
 80135fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	607b      	str	r3, [r7, #4]
 801360c:	e7fe      	b.n	801360c <vTaskSwitchContext+0x90>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	3b01      	subs	r3, #1
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	491c      	ldr	r1, [pc, #112]	; (8013688 <vTaskSwitchContext+0x10c>)
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	4613      	mov	r3, r2
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	4413      	add	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	440b      	add	r3, r1
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d0e5      	beq.n	80135f4 <vTaskSwitchContext+0x78>
 8013628:	68fa      	ldr	r2, [r7, #12]
 801362a:	4613      	mov	r3, r2
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	4413      	add	r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	4a15      	ldr	r2, [pc, #84]	; (8013688 <vTaskSwitchContext+0x10c>)
 8013634:	4413      	add	r3, r2
 8013636:	60bb      	str	r3, [r7, #8]
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	685a      	ldr	r2, [r3, #4]
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	605a      	str	r2, [r3, #4]
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	685a      	ldr	r2, [r3, #4]
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	3308      	adds	r3, #8
 801364a:	429a      	cmp	r2, r3
 801364c:	d104      	bne.n	8013658 <vTaskSwitchContext+0xdc>
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	685a      	ldr	r2, [r3, #4]
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	605a      	str	r2, [r3, #4]
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	4a08      	ldr	r2, [pc, #32]	; (8013680 <vTaskSwitchContext+0x104>)
 8013660:	6013      	str	r3, [r2, #0]
 8013662:	4a08      	ldr	r2, [pc, #32]	; (8013684 <vTaskSwitchContext+0x108>)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	6013      	str	r3, [r2, #0]
}
 8013668:	bf00      	nop
 801366a:	3710      	adds	r7, #16
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	20027470 	.word	0x20027470
 8013674:	2002745c 	.word	0x2002745c
 8013678:	20027478 	.word	0x20027478
 801367c:	20027474 	.word	0x20027474
 8013680:	20026f74 	.word	0x20026f74
 8013684:	20027450 	.word	0x20027450
 8013688:	20026f78 	.word	0x20026f78

0801368c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d109      	bne.n	80136b0 <vTaskPlaceOnEventList+0x24>
 801369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a0:	f383 8811 	msr	BASEPRI, r3
 80136a4:	f3bf 8f6f 	isb	sy
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	60fb      	str	r3, [r7, #12]
 80136ae:	e7fe      	b.n	80136ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136b0:	4b07      	ldr	r3, [pc, #28]	; (80136d0 <vTaskPlaceOnEventList+0x44>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	3318      	adds	r3, #24
 80136b6:	4619      	mov	r1, r3
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7fe f830 	bl	801171e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136be:	2101      	movs	r1, #1
 80136c0:	6838      	ldr	r0, [r7, #0]
 80136c2:	f000 fda9 	bl	8014218 <prvAddCurrentTaskToDelayedList>
}
 80136c6:	bf00      	nop
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	20026f74 	.word	0x20026f74

080136d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d109      	bne.n	80136fa <vTaskPlaceOnEventListRestricted+0x26>
 80136e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ea:	f383 8811 	msr	BASEPRI, r3
 80136ee:	f3bf 8f6f 	isb	sy
 80136f2:	f3bf 8f4f 	dsb	sy
 80136f6:	617b      	str	r3, [r7, #20]
 80136f8:	e7fe      	b.n	80136f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136fa:	4b0a      	ldr	r3, [pc, #40]	; (8013724 <vTaskPlaceOnEventListRestricted+0x50>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	3318      	adds	r3, #24
 8013700:	4619      	mov	r1, r3
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f7fd ffe7 	bl	80116d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d002      	beq.n	8013714 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801370e:	f04f 33ff 	mov.w	r3, #4294967295
 8013712:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013714:	6879      	ldr	r1, [r7, #4]
 8013716:	68b8      	ldr	r0, [r7, #8]
 8013718:	f000 fd7e 	bl	8014218 <prvAddCurrentTaskToDelayedList>
	}
 801371c:	bf00      	nop
 801371e:	3718      	adds	r7, #24
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	20026f74 	.word	0x20026f74

08013728 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d109      	bne.n	8013752 <xTaskRemoveFromEventList+0x2a>
 801373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	60fb      	str	r3, [r7, #12]
 8013750:	e7fe      	b.n	8013750 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	3318      	adds	r3, #24
 8013756:	4618      	mov	r0, r3
 8013758:	f7fe f81a 	bl	8011790 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801375c:	4b1e      	ldr	r3, [pc, #120]	; (80137d8 <xTaskRemoveFromEventList+0xb0>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d11d      	bne.n	80137a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	3304      	adds	r3, #4
 8013768:	4618      	mov	r0, r3
 801376a:	f7fe f811 	bl	8011790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013772:	4b1a      	ldr	r3, [pc, #104]	; (80137dc <xTaskRemoveFromEventList+0xb4>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	429a      	cmp	r2, r3
 8013778:	d903      	bls.n	8013782 <xTaskRemoveFromEventList+0x5a>
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377e:	4a17      	ldr	r2, [pc, #92]	; (80137dc <xTaskRemoveFromEventList+0xb4>)
 8013780:	6013      	str	r3, [r2, #0]
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013786:	4613      	mov	r3, r2
 8013788:	009b      	lsls	r3, r3, #2
 801378a:	4413      	add	r3, r2
 801378c:	009b      	lsls	r3, r3, #2
 801378e:	4a14      	ldr	r2, [pc, #80]	; (80137e0 <xTaskRemoveFromEventList+0xb8>)
 8013790:	441a      	add	r2, r3
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	3304      	adds	r3, #4
 8013796:	4619      	mov	r1, r3
 8013798:	4610      	mov	r0, r2
 801379a:	f7fd ff9c 	bl	80116d6 <vListInsertEnd>
 801379e:	e005      	b.n	80137ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	3318      	adds	r3, #24
 80137a4:	4619      	mov	r1, r3
 80137a6:	480f      	ldr	r0, [pc, #60]	; (80137e4 <xTaskRemoveFromEventList+0xbc>)
 80137a8:	f7fd ff95 	bl	80116d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b0:	4b0d      	ldr	r3, [pc, #52]	; (80137e8 <xTaskRemoveFromEventList+0xc0>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d905      	bls.n	80137c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80137ba:	2301      	movs	r3, #1
 80137bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80137be:	4b0b      	ldr	r3, [pc, #44]	; (80137ec <xTaskRemoveFromEventList+0xc4>)
 80137c0:	2201      	movs	r2, #1
 80137c2:	601a      	str	r2, [r3, #0]
 80137c4:	e001      	b.n	80137ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80137c6:	2300      	movs	r3, #0
 80137c8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80137ca:	f000 f999 	bl	8013b00 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80137ce:	697b      	ldr	r3, [r7, #20]
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3718      	adds	r7, #24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	20027470 	.word	0x20027470
 80137dc:	20027450 	.word	0x20027450
 80137e0:	20026f78 	.word	0x20026f78
 80137e4:	20027408 	.word	0x20027408
 80137e8:	20026f74 	.word	0x20026f74
 80137ec:	2002745c 	.word	0x2002745c

080137f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80137f8:	4b06      	ldr	r3, [pc, #24]	; (8013814 <vTaskInternalSetTimeOutState+0x24>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013800:	4b05      	ldr	r3, [pc, #20]	; (8013818 <vTaskInternalSetTimeOutState+0x28>)
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	605a      	str	r2, [r3, #4]
}
 8013808:	bf00      	nop
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	20027460 	.word	0x20027460
 8013818:	2002744c 	.word	0x2002744c

0801381c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b088      	sub	sp, #32
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d109      	bne.n	8013840 <xTaskCheckForTimeOut+0x24>
 801382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013830:	f383 8811 	msr	BASEPRI, r3
 8013834:	f3bf 8f6f 	isb	sy
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	613b      	str	r3, [r7, #16]
 801383e:	e7fe      	b.n	801383e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d109      	bne.n	801385a <xTaskCheckForTimeOut+0x3e>
 8013846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384a:	f383 8811 	msr	BASEPRI, r3
 801384e:	f3bf 8f6f 	isb	sy
 8013852:	f3bf 8f4f 	dsb	sy
 8013856:	60fb      	str	r3, [r7, #12]
 8013858:	e7fe      	b.n	8013858 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801385a:	f7fe f8e7 	bl	8011a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801385e:	4b1d      	ldr	r3, [pc, #116]	; (80138d4 <xTaskCheckForTimeOut+0xb8>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	69ba      	ldr	r2, [r7, #24]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013876:	d102      	bne.n	801387e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013878:	2300      	movs	r3, #0
 801387a:	61fb      	str	r3, [r7, #28]
 801387c:	e023      	b.n	80138c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	4b15      	ldr	r3, [pc, #84]	; (80138d8 <xTaskCheckForTimeOut+0xbc>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	429a      	cmp	r2, r3
 8013888:	d007      	beq.n	801389a <xTaskCheckForTimeOut+0x7e>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	69ba      	ldr	r2, [r7, #24]
 8013890:	429a      	cmp	r2, r3
 8013892:	d302      	bcc.n	801389a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013894:	2301      	movs	r3, #1
 8013896:	61fb      	str	r3, [r7, #28]
 8013898:	e015      	b.n	80138c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d20b      	bcs.n	80138bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	1ad2      	subs	r2, r2, r3
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7ff ff9d 	bl	80137f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80138b6:	2300      	movs	r3, #0
 80138b8:	61fb      	str	r3, [r7, #28]
 80138ba:	e004      	b.n	80138c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	2200      	movs	r2, #0
 80138c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80138c2:	2301      	movs	r3, #1
 80138c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80138c6:	f7fe f8df 	bl	8011a88 <vPortExitCritical>

	return xReturn;
 80138ca:	69fb      	ldr	r3, [r7, #28]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3720      	adds	r7, #32
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	2002744c 	.word	0x2002744c
 80138d8:	20027460 	.word	0x20027460

080138dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80138dc:	b480      	push	{r7}
 80138de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80138e0:	4b03      	ldr	r3, [pc, #12]	; (80138f0 <vTaskMissedYield+0x14>)
 80138e2:	2201      	movs	r2, #1
 80138e4:	601a      	str	r2, [r3, #0]
}
 80138e6:	bf00      	nop
 80138e8:	46bd      	mov	sp, r7
 80138ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ee:	4770      	bx	lr
 80138f0:	2002745c 	.word	0x2002745c

080138f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80138fc:	f000 f8a6 	bl	8013a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013900:	4b17      	ldr	r3, [pc, #92]	; (8013960 <prvIdleTask+0x6c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d907      	bls.n	8013918 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013908:	4b16      	ldr	r3, [pc, #88]	; (8013964 <prvIdleTask+0x70>)
 801390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8013918:	f7ff fc60 	bl	80131dc <prvGetExpectedIdleTime>
 801391c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d9eb      	bls.n	80138fc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8013924:	f7ff fc4c 	bl	80131c0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8013928:	4b0f      	ldr	r3, [pc, #60]	; (8013968 <prvIdleTask+0x74>)
 801392a:	681a      	ldr	r2, [r3, #0]
 801392c:	4b0f      	ldr	r3, [pc, #60]	; (801396c <prvIdleTask+0x78>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	429a      	cmp	r2, r3
 8013932:	d209      	bcs.n	8013948 <prvIdleTask+0x54>
 8013934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	60bb      	str	r3, [r7, #8]
 8013946:	e7fe      	b.n	8013946 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8013948:	f7ff fc48 	bl	80131dc <prvGetExpectedIdleTime>
 801394c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d902      	bls.n	801395a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7ee fd63 	bl	8002420 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801395a:	f7ff fc77 	bl	801324c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801395e:	e7cd      	b.n	80138fc <prvIdleTask+0x8>
 8013960:	20026f78 	.word	0x20026f78
 8013964:	e000ed04 	.word	0xe000ed04
 8013968:	20027468 	.word	0x20027468
 801396c:	2002744c 	.word	0x2002744c

08013970 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8013976:	2301      	movs	r3, #1
 8013978:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801397a:	2301      	movs	r3, #1
 801397c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801397e:	4b0f      	ldr	r3, [pc, #60]	; (80139bc <eTaskConfirmSleepModeStatus+0x4c>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8013986:	2300      	movs	r3, #0
 8013988:	71fb      	strb	r3, [r7, #7]
 801398a:	e010      	b.n	80139ae <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 801398c:	4b0c      	ldr	r3, [pc, #48]	; (80139c0 <eTaskConfirmSleepModeStatus+0x50>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d002      	beq.n	801399a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8013994:	2300      	movs	r3, #0
 8013996:	71fb      	strb	r3, [r7, #7]
 8013998:	e009      	b.n	80139ae <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 801399a:	4b0a      	ldr	r3, [pc, #40]	; (80139c4 <eTaskConfirmSleepModeStatus+0x54>)
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	4b0a      	ldr	r3, [pc, #40]	; (80139c8 <eTaskConfirmSleepModeStatus+0x58>)
 80139a0:	6819      	ldr	r1, [r3, #0]
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	1acb      	subs	r3, r1, r3
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d101      	bne.n	80139ae <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80139aa:	2302      	movs	r3, #2
 80139ac:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80139ae:	79fb      	ldrb	r3, [r7, #7]
	}
 80139b0:	4618      	mov	r0, r3
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr
 80139bc:	20027408 	.word	0x20027408
 80139c0:	2002745c 	.word	0x2002745c
 80139c4:	20027434 	.word	0x20027434
 80139c8:	20027448 	.word	0x20027448

080139cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139d2:	2300      	movs	r3, #0
 80139d4:	607b      	str	r3, [r7, #4]
 80139d6:	e00c      	b.n	80139f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	4613      	mov	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	4a12      	ldr	r2, [pc, #72]	; (8013a2c <prvInitialiseTaskLists+0x60>)
 80139e4:	4413      	add	r3, r2
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fd fe48 	bl	801167c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	3301      	adds	r3, #1
 80139f0:	607b      	str	r3, [r7, #4]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b37      	cmp	r3, #55	; 0x37
 80139f6:	d9ef      	bls.n	80139d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80139f8:	480d      	ldr	r0, [pc, #52]	; (8013a30 <prvInitialiseTaskLists+0x64>)
 80139fa:	f7fd fe3f 	bl	801167c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80139fe:	480d      	ldr	r0, [pc, #52]	; (8013a34 <prvInitialiseTaskLists+0x68>)
 8013a00:	f7fd fe3c 	bl	801167c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013a04:	480c      	ldr	r0, [pc, #48]	; (8013a38 <prvInitialiseTaskLists+0x6c>)
 8013a06:	f7fd fe39 	bl	801167c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013a0a:	480c      	ldr	r0, [pc, #48]	; (8013a3c <prvInitialiseTaskLists+0x70>)
 8013a0c:	f7fd fe36 	bl	801167c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013a10:	480b      	ldr	r0, [pc, #44]	; (8013a40 <prvInitialiseTaskLists+0x74>)
 8013a12:	f7fd fe33 	bl	801167c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013a16:	4b0b      	ldr	r3, [pc, #44]	; (8013a44 <prvInitialiseTaskLists+0x78>)
 8013a18:	4a05      	ldr	r2, [pc, #20]	; (8013a30 <prvInitialiseTaskLists+0x64>)
 8013a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a1c:	4b0a      	ldr	r3, [pc, #40]	; (8013a48 <prvInitialiseTaskLists+0x7c>)
 8013a1e:	4a05      	ldr	r2, [pc, #20]	; (8013a34 <prvInitialiseTaskLists+0x68>)
 8013a20:	601a      	str	r2, [r3, #0]
}
 8013a22:	bf00      	nop
 8013a24:	3708      	adds	r7, #8
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20026f78 	.word	0x20026f78
 8013a30:	200273d8 	.word	0x200273d8
 8013a34:	200273ec 	.word	0x200273ec
 8013a38:	20027408 	.word	0x20027408
 8013a3c:	2002741c 	.word	0x2002741c
 8013a40:	20027434 	.word	0x20027434
 8013a44:	20027400 	.word	0x20027400
 8013a48:	20027404 	.word	0x20027404

08013a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a52:	e019      	b.n	8013a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a54:	f7fd ffea 	bl	8011a2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013a58:	4b0f      	ldr	r3, [pc, #60]	; (8013a98 <prvCheckTasksWaitingTermination+0x4c>)
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3304      	adds	r3, #4
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fd fe93 	bl	8011790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a6a:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <prvCheckTasksWaitingTermination+0x50>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	4a0a      	ldr	r2, [pc, #40]	; (8013a9c <prvCheckTasksWaitingTermination+0x50>)
 8013a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a74:	4b0a      	ldr	r3, [pc, #40]	; (8013aa0 <prvCheckTasksWaitingTermination+0x54>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	4a09      	ldr	r2, [pc, #36]	; (8013aa0 <prvCheckTasksWaitingTermination+0x54>)
 8013a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a7e:	f7fe f803 	bl	8011a88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f000 f80e 	bl	8013aa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a88:	4b05      	ldr	r3, [pc, #20]	; (8013aa0 <prvCheckTasksWaitingTermination+0x54>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d1e1      	bne.n	8013a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	2002741c 	.word	0x2002741c
 8013a9c:	20027448 	.word	0x20027448
 8013aa0:	20027430 	.word	0x20027430

08013aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d108      	bne.n	8013ac8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fd fcc8 	bl	8011450 <vPortFree>
				vPortFree( pxTCB );
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7fd fcc5 	bl	8011450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ac6:	e017      	b.n	8013af8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d103      	bne.n	8013ada <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7fd fcbc 	bl	8011450 <vPortFree>
	}
 8013ad8:	e00e      	b.n	8013af8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d009      	beq.n	8013af8 <prvDeleteTCB+0x54>
 8013ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	60fb      	str	r3, [r7, #12]
 8013af6:	e7fe      	b.n	8013af6 <prvDeleteTCB+0x52>
	}
 8013af8:	bf00      	nop
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b06:	4b0f      	ldr	r3, [pc, #60]	; (8013b44 <prvResetNextTaskUnblockTime+0x44>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <prvResetNextTaskUnblockTime+0x14>
 8013b10:	2301      	movs	r3, #1
 8013b12:	e000      	b.n	8013b16 <prvResetNextTaskUnblockTime+0x16>
 8013b14:	2300      	movs	r3, #0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d004      	beq.n	8013b24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b1a:	4b0b      	ldr	r3, [pc, #44]	; (8013b48 <prvResetNextTaskUnblockTime+0x48>)
 8013b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b22:	e008      	b.n	8013b36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013b24:	4b07      	ldr	r3, [pc, #28]	; (8013b44 <prvResetNextTaskUnblockTime+0x44>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	4a05      	ldr	r2, [pc, #20]	; (8013b48 <prvResetNextTaskUnblockTime+0x48>)
 8013b34:	6013      	str	r3, [r2, #0]
}
 8013b36:	bf00      	nop
 8013b38:	370c      	adds	r7, #12
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	20027400 	.word	0x20027400
 8013b48:	20027468 	.word	0x20027468

08013b4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013b52:	4b05      	ldr	r3, [pc, #20]	; (8013b68 <xTaskGetCurrentTaskHandle+0x1c>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013b58:	687b      	ldr	r3, [r7, #4]
	}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	370c      	adds	r7, #12
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop
 8013b68:	20026f74 	.word	0x20026f74

08013b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b72:	4b0b      	ldr	r3, [pc, #44]	; (8013ba0 <xTaskGetSchedulerState+0x34>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d102      	bne.n	8013b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	607b      	str	r3, [r7, #4]
 8013b7e:	e008      	b.n	8013b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b80:	4b08      	ldr	r3, [pc, #32]	; (8013ba4 <xTaskGetSchedulerState+0x38>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d102      	bne.n	8013b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b88:	2302      	movs	r3, #2
 8013b8a:	607b      	str	r3, [r7, #4]
 8013b8c:	e001      	b.n	8013b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b92:	687b      	ldr	r3, [r7, #4]
	}
 8013b94:	4618      	mov	r0, r3
 8013b96:	370c      	adds	r7, #12
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr
 8013ba0:	20027454 	.word	0x20027454
 8013ba4:	20027470 	.word	0x20027470

08013ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d056      	beq.n	8013c6c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bc2:	4b2d      	ldr	r3, [pc, #180]	; (8013c78 <xTaskPriorityInherit+0xd0>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d246      	bcs.n	8013c5a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	699b      	ldr	r3, [r3, #24]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	db06      	blt.n	8013be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bd4:	4b28      	ldr	r3, [pc, #160]	; (8013c78 <xTaskPriorityInherit+0xd0>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	6959      	ldr	r1, [r3, #20]
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bea:	4613      	mov	r3, r2
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4a22      	ldr	r2, [pc, #136]	; (8013c7c <xTaskPriorityInherit+0xd4>)
 8013bf4:	4413      	add	r3, r2
 8013bf6:	4299      	cmp	r1, r3
 8013bf8:	d101      	bne.n	8013bfe <xTaskPriorityInherit+0x56>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e000      	b.n	8013c00 <xTaskPriorityInherit+0x58>
 8013bfe:	2300      	movs	r3, #0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d022      	beq.n	8013c4a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	3304      	adds	r3, #4
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fd fdc1 	bl	8011790 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013c0e:	4b1a      	ldr	r3, [pc, #104]	; (8013c78 <xTaskPriorityInherit+0xd0>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c1c:	4b18      	ldr	r3, [pc, #96]	; (8013c80 <xTaskPriorityInherit+0xd8>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d903      	bls.n	8013c2c <xTaskPriorityInherit+0x84>
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c28:	4a15      	ldr	r2, [pc, #84]	; (8013c80 <xTaskPriorityInherit+0xd8>)
 8013c2a:	6013      	str	r3, [r2, #0]
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c30:	4613      	mov	r3, r2
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	4413      	add	r3, r2
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	4a10      	ldr	r2, [pc, #64]	; (8013c7c <xTaskPriorityInherit+0xd4>)
 8013c3a:	441a      	add	r2, r3
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	3304      	adds	r3, #4
 8013c40:	4619      	mov	r1, r3
 8013c42:	4610      	mov	r0, r2
 8013c44:	f7fd fd47 	bl	80116d6 <vListInsertEnd>
 8013c48:	e004      	b.n	8013c54 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013c4a:	4b0b      	ldr	r3, [pc, #44]	; (8013c78 <xTaskPriorityInherit+0xd0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013c54:	2301      	movs	r3, #1
 8013c56:	60fb      	str	r3, [r7, #12]
 8013c58:	e008      	b.n	8013c6c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c5e:	4b06      	ldr	r3, [pc, #24]	; (8013c78 <xTaskPriorityInherit+0xd0>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d201      	bcs.n	8013c6c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
	}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	20026f74 	.word	0x20026f74
 8013c7c:	20026f78 	.word	0x20026f78
 8013c80:	20027450 	.word	0x20027450

08013c84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013c90:	2300      	movs	r3, #0
 8013c92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d054      	beq.n	8013d44 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013c9a:	4b2d      	ldr	r3, [pc, #180]	; (8013d50 <xTaskPriorityDisinherit+0xcc>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	693a      	ldr	r2, [r7, #16]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d009      	beq.n	8013cb8 <xTaskPriorityDisinherit+0x34>
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	f383 8811 	msr	BASEPRI, r3
 8013cac:	f3bf 8f6f 	isb	sy
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	60fb      	str	r3, [r7, #12]
 8013cb6:	e7fe      	b.n	8013cb6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d109      	bne.n	8013cd4 <xTaskPriorityDisinherit+0x50>
 8013cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc4:	f383 8811 	msr	BASEPRI, r3
 8013cc8:	f3bf 8f6f 	isb	sy
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	60bb      	str	r3, [r7, #8]
 8013cd2:	e7fe      	b.n	8013cd2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cd8:	1e5a      	subs	r2, r3, #1
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d02c      	beq.n	8013d44 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d128      	bne.n	8013d44 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	3304      	adds	r3, #4
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fd fd4a 	bl	8011790 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d14:	4b0f      	ldr	r3, [pc, #60]	; (8013d54 <xTaskPriorityDisinherit+0xd0>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d903      	bls.n	8013d24 <xTaskPriorityDisinherit+0xa0>
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d20:	4a0c      	ldr	r2, [pc, #48]	; (8013d54 <xTaskPriorityDisinherit+0xd0>)
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d28:	4613      	mov	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4a09      	ldr	r2, [pc, #36]	; (8013d58 <xTaskPriorityDisinherit+0xd4>)
 8013d32:	441a      	add	r2, r3
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	3304      	adds	r3, #4
 8013d38:	4619      	mov	r1, r3
 8013d3a:	4610      	mov	r0, r2
 8013d3c:	f7fd fccb 	bl	80116d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013d40:	2301      	movs	r3, #1
 8013d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d44:	697b      	ldr	r3, [r7, #20]
	}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3718      	adds	r7, #24
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	20026f74 	.word	0x20026f74
 8013d54:	20027450 	.word	0x20027450
 8013d58:	20026f78 	.word	0x20026f78

08013d5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b088      	sub	sp, #32
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d06d      	beq.n	8013e50 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d109      	bne.n	8013d90 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d80:	f383 8811 	msr	BASEPRI, r3
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	f3bf 8f4f 	dsb	sy
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	e7fe      	b.n	8013d8e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d902      	bls.n	8013da0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	61fb      	str	r3, [r7, #28]
 8013d9e:	e002      	b.n	8013da6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013da0:	69bb      	ldr	r3, [r7, #24]
 8013da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013da4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013daa:	69fa      	ldr	r2, [r7, #28]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d04f      	beq.n	8013e50 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013db4:	697a      	ldr	r2, [r7, #20]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d14a      	bne.n	8013e50 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013dba:	4b27      	ldr	r3, [pc, #156]	; (8013e58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	69ba      	ldr	r2, [r7, #24]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d109      	bne.n	8013dd8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc8:	f383 8811 	msr	BASEPRI, r3
 8013dcc:	f3bf 8f6f 	isb	sy
 8013dd0:	f3bf 8f4f 	dsb	sy
 8013dd4:	60bb      	str	r3, [r7, #8]
 8013dd6:	e7fe      	b.n	8013dd6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ddc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	69fa      	ldr	r2, [r7, #28]
 8013de2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	db04      	blt.n	8013df6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dec:	69fb      	ldr	r3, [r7, #28]
 8013dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013df2:	69bb      	ldr	r3, [r7, #24]
 8013df4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	6959      	ldr	r1, [r3, #20]
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	009b      	lsls	r3, r3, #2
 8013e00:	4413      	add	r3, r2
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	4a15      	ldr	r2, [pc, #84]	; (8013e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013e06:	4413      	add	r3, r2
 8013e08:	4299      	cmp	r1, r3
 8013e0a:	d101      	bne.n	8013e10 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e000      	b.n	8013e12 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013e10:	2300      	movs	r3, #0
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d01c      	beq.n	8013e50 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7fd fcb8 	bl	8011790 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e24:	4b0e      	ldr	r3, [pc, #56]	; (8013e60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d903      	bls.n	8013e34 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e30:	4a0b      	ldr	r2, [pc, #44]	; (8013e60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013e32:	6013      	str	r3, [r2, #0]
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e38:	4613      	mov	r3, r2
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	4413      	add	r3, r2
 8013e3e:	009b      	lsls	r3, r3, #2
 8013e40:	4a06      	ldr	r2, [pc, #24]	; (8013e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013e42:	441a      	add	r2, r3
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	3304      	adds	r3, #4
 8013e48:	4619      	mov	r1, r3
 8013e4a:	4610      	mov	r0, r2
 8013e4c:	f7fd fc43 	bl	80116d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e50:	bf00      	nop
 8013e52:	3720      	adds	r7, #32
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	20026f74 	.word	0x20026f74
 8013e5c:	20026f78 	.word	0x20026f78
 8013e60:	20027450 	.word	0x20027450

08013e64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013e64:	b480      	push	{r7}
 8013e66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013e68:	4b07      	ldr	r3, [pc, #28]	; (8013e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d004      	beq.n	8013e7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013e70:	4b05      	ldr	r3, [pc, #20]	; (8013e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e76:	3201      	adds	r2, #1
 8013e78:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8013e7a:	4b03      	ldr	r3, [pc, #12]	; (8013e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
	}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	46bd      	mov	sp, r7
 8013e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e86:	4770      	bx	lr
 8013e88:	20026f74 	.word	0x20026f74

08013e8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b086      	sub	sp, #24
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
 8013e98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013e9a:	f7fd fdc7 	bl	8011a2c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013e9e:	4b26      	ldr	r3, [pc, #152]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	2b02      	cmp	r3, #2
 8013eaa:	d01a      	beq.n	8013ee2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013eac:	4b22      	ldr	r3, [pc, #136]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	43d2      	mvns	r2, r2
 8013eb6:	400a      	ands	r2, r1
 8013eb8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013eba:	4b1f      	ldr	r3, [pc, #124]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d00b      	beq.n	8013ee2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013eca:	2101      	movs	r1, #1
 8013ecc:	6838      	ldr	r0, [r7, #0]
 8013ece:	f000 f9a3 	bl	8014218 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013ed2:	4b1a      	ldr	r3, [pc, #104]	; (8013f3c <xTaskNotifyWait+0xb0>)
 8013ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	f3bf 8f4f 	dsb	sy
 8013ede:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013ee2:	f7fd fdd1 	bl	8011a88 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013ee6:	f7fd fda1 	bl	8011a2c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013ef0:	4b11      	ldr	r3, [pc, #68]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013efa:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d002      	beq.n	8013f0e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	617b      	str	r3, [r7, #20]
 8013f0c:	e008      	b.n	8013f20 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013f0e:	4b0a      	ldr	r3, [pc, #40]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013f14:	68ba      	ldr	r2, [r7, #8]
 8013f16:	43d2      	mvns	r2, r2
 8013f18:	400a      	ands	r2, r1
 8013f1a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f20:	4b05      	ldr	r3, [pc, #20]	; (8013f38 <xTaskNotifyWait+0xac>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2200      	movs	r2, #0
 8013f26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8013f2a:	f7fd fdad 	bl	8011a88 <vPortExitCritical>

		return xReturn;
 8013f2e:	697b      	ldr	r3, [r7, #20]
	}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3718      	adds	r7, #24
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	20026f74 	.word	0x20026f74
 8013f3c:	e000ed04 	.word	0xe000ed04

08013f40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013f50:	2301      	movs	r3, #1
 8013f52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d109      	bne.n	8013f6e <xTaskGenericNotify+0x2e>
 8013f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5e:	f383 8811 	msr	BASEPRI, r3
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	61bb      	str	r3, [r7, #24]
 8013f6c:	e7fe      	b.n	8013f6c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013f72:	f7fd fd5b 	bl	8011a2c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d003      	beq.n	8013f84 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013f7c:	6a3b      	ldr	r3, [r7, #32]
 8013f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013f84:	6a3b      	ldr	r3, [r7, #32]
 8013f86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8013f8a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013f8c:	6a3b      	ldr	r3, [r7, #32]
 8013f8e:	2202      	movs	r2, #2
 8013f90:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8013f94:	79fb      	ldrb	r3, [r7, #7]
 8013f96:	2b04      	cmp	r3, #4
 8013f98:	d827      	bhi.n	8013fea <xTaskGenericNotify+0xaa>
 8013f9a:	a201      	add	r2, pc, #4	; (adr r2, 8013fa0 <xTaskGenericNotify+0x60>)
 8013f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa0:	08013feb 	.word	0x08013feb
 8013fa4:	08013fb5 	.word	0x08013fb5
 8013fa8:	08013fc3 	.word	0x08013fc3
 8013fac:	08013fcf 	.word	0x08013fcf
 8013fb0:	08013fd7 	.word	0x08013fd7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013fb4:	6a3b      	ldr	r3, [r7, #32]
 8013fb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	431a      	orrs	r2, r3
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013fc0:	e013      	b.n	8013fea <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013fc2:	6a3b      	ldr	r3, [r7, #32]
 8013fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fc6:	1c5a      	adds	r2, r3, #1
 8013fc8:	6a3b      	ldr	r3, [r7, #32]
 8013fca:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013fcc:	e00d      	b.n	8013fea <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013fce:	6a3b      	ldr	r3, [r7, #32]
 8013fd0:	68ba      	ldr	r2, [r7, #8]
 8013fd2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8013fd4:	e009      	b.n	8013fea <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013fd6:	7ffb      	ldrb	r3, [r7, #31]
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	d003      	beq.n	8013fe4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013fe2:	e001      	b.n	8013fe8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013fe8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013fea:	7ffb      	ldrb	r3, [r7, #31]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d13b      	bne.n	8014068 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ff0:	6a3b      	ldr	r3, [r7, #32]
 8013ff2:	3304      	adds	r3, #4
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fd fbcb 	bl	8011790 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013ffa:	6a3b      	ldr	r3, [r7, #32]
 8013ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ffe:	4b1e      	ldr	r3, [pc, #120]	; (8014078 <xTaskGenericNotify+0x138>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	429a      	cmp	r2, r3
 8014004:	d903      	bls.n	801400e <xTaskGenericNotify+0xce>
 8014006:	6a3b      	ldr	r3, [r7, #32]
 8014008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400a:	4a1b      	ldr	r2, [pc, #108]	; (8014078 <xTaskGenericNotify+0x138>)
 801400c:	6013      	str	r3, [r2, #0]
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014012:	4613      	mov	r3, r2
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	4413      	add	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4a18      	ldr	r2, [pc, #96]	; (801407c <xTaskGenericNotify+0x13c>)
 801401c:	441a      	add	r2, r3
 801401e:	6a3b      	ldr	r3, [r7, #32]
 8014020:	3304      	adds	r3, #4
 8014022:	4619      	mov	r1, r3
 8014024:	4610      	mov	r0, r2
 8014026:	f7fd fb56 	bl	80116d6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801402a:	6a3b      	ldr	r3, [r7, #32]
 801402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801402e:	2b00      	cmp	r3, #0
 8014030:	d009      	beq.n	8014046 <xTaskGenericNotify+0x106>
 8014032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014036:	f383 8811 	msr	BASEPRI, r3
 801403a:	f3bf 8f6f 	isb	sy
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	617b      	str	r3, [r7, #20]
 8014044:	e7fe      	b.n	8014044 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8014046:	f7ff fd5b 	bl	8013b00 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801404e:	4b0c      	ldr	r3, [pc, #48]	; (8014080 <xTaskGenericNotify+0x140>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014054:	429a      	cmp	r2, r3
 8014056:	d907      	bls.n	8014068 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014058:	4b0a      	ldr	r3, [pc, #40]	; (8014084 <xTaskGenericNotify+0x144>)
 801405a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801405e:	601a      	str	r2, [r3, #0]
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014068:	f7fd fd0e 	bl	8011a88 <vPortExitCritical>

		return xReturn;
 801406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801406e:	4618      	mov	r0, r3
 8014070:	3728      	adds	r7, #40	; 0x28
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	20027450 	.word	0x20027450
 801407c:	20026f78 	.word	0x20026f78
 8014080:	20026f74 	.word	0x20026f74
 8014084:	e000ed04 	.word	0xe000ed04

08014088 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014088:	b580      	push	{r7, lr}
 801408a:	b08e      	sub	sp, #56	; 0x38
 801408c:	af00      	add	r7, sp, #0
 801408e:	60f8      	str	r0, [r7, #12]
 8014090:	60b9      	str	r1, [r7, #8]
 8014092:	603b      	str	r3, [r7, #0]
 8014094:	4613      	mov	r3, r2
 8014096:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014098:	2301      	movs	r3, #1
 801409a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d109      	bne.n	80140b6 <xTaskGenericNotifyFromISR+0x2e>
 80140a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a6:	f383 8811 	msr	BASEPRI, r3
 80140aa:	f3bf 8f6f 	isb	sy
 80140ae:	f3bf 8f4f 	dsb	sy
 80140b2:	627b      	str	r3, [r7, #36]	; 0x24
 80140b4:	e7fe      	b.n	80140b4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140b6:	f7fd fd71 	bl	8011b9c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80140be:	f3ef 8211 	mrs	r2, BASEPRI
 80140c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c6:	f383 8811 	msr	BASEPRI, r3
 80140ca:	f3bf 8f6f 	isb	sy
 80140ce:	f3bf 8f4f 	dsb	sy
 80140d2:	623a      	str	r2, [r7, #32]
 80140d4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80140d6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d003      	beq.n	80140e8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80140e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80140e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80140ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	2202      	movs	r2, #2
 80140f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 80140fa:	79fb      	ldrb	r3, [r7, #7]
 80140fc:	2b04      	cmp	r3, #4
 80140fe:	d829      	bhi.n	8014154 <xTaskGenericNotifyFromISR+0xcc>
 8014100:	a201      	add	r2, pc, #4	; (adr r2, 8014108 <xTaskGenericNotifyFromISR+0x80>)
 8014102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014106:	bf00      	nop
 8014108:	08014155 	.word	0x08014155
 801410c:	0801411d 	.word	0x0801411d
 8014110:	0801412b 	.word	0x0801412b
 8014114:	08014137 	.word	0x08014137
 8014118:	0801413f 	.word	0x0801413f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	431a      	orrs	r2, r3
 8014124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014126:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014128:	e014      	b.n	8014154 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801412e:	1c5a      	adds	r2, r3, #1
 8014130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014132:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8014134:	e00e      	b.n	8014154 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014138:	68ba      	ldr	r2, [r7, #8]
 801413a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 801413c:	e00a      	b.n	8014154 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801413e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014142:	2b02      	cmp	r3, #2
 8014144:	d003      	beq.n	801414e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801414c:	e001      	b.n	8014152 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801414e:	2300      	movs	r3, #0
 8014150:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014152:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014158:	2b01      	cmp	r3, #1
 801415a:	d146      	bne.n	80141ea <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014160:	2b00      	cmp	r3, #0
 8014162:	d009      	beq.n	8014178 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014168:	f383 8811 	msr	BASEPRI, r3
 801416c:	f3bf 8f6f 	isb	sy
 8014170:	f3bf 8f4f 	dsb	sy
 8014174:	61bb      	str	r3, [r7, #24]
 8014176:	e7fe      	b.n	8014176 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014178:	4b21      	ldr	r3, [pc, #132]	; (8014200 <xTaskGenericNotifyFromISR+0x178>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d11d      	bne.n	80141bc <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	3304      	adds	r3, #4
 8014184:	4618      	mov	r0, r3
 8014186:	f7fd fb03 	bl	8011790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418e:	4b1d      	ldr	r3, [pc, #116]	; (8014204 <xTaskGenericNotifyFromISR+0x17c>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	429a      	cmp	r2, r3
 8014194:	d903      	bls.n	801419e <xTaskGenericNotifyFromISR+0x116>
 8014196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801419a:	4a1a      	ldr	r2, [pc, #104]	; (8014204 <xTaskGenericNotifyFromISR+0x17c>)
 801419c:	6013      	str	r3, [r2, #0]
 801419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a2:	4613      	mov	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4413      	add	r3, r2
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	4a17      	ldr	r2, [pc, #92]	; (8014208 <xTaskGenericNotifyFromISR+0x180>)
 80141ac:	441a      	add	r2, r3
 80141ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b0:	3304      	adds	r3, #4
 80141b2:	4619      	mov	r1, r3
 80141b4:	4610      	mov	r0, r2
 80141b6:	f7fd fa8e 	bl	80116d6 <vListInsertEnd>
 80141ba:	e005      	b.n	80141c8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80141bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141be:	3318      	adds	r3, #24
 80141c0:	4619      	mov	r1, r3
 80141c2:	4812      	ldr	r0, [pc, #72]	; (801420c <xTaskGenericNotifyFromISR+0x184>)
 80141c4:	f7fd fa87 	bl	80116d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80141c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141cc:	4b10      	ldr	r3, [pc, #64]	; (8014210 <xTaskGenericNotifyFromISR+0x188>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d909      	bls.n	80141ea <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80141d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d003      	beq.n	80141e4 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80141dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141de:	2201      	movs	r2, #1
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e002      	b.n	80141ea <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80141e4:	4b0b      	ldr	r3, [pc, #44]	; (8014214 <xTaskGenericNotifyFromISR+0x18c>)
 80141e6:	2201      	movs	r2, #1
 80141e8:	601a      	str	r2, [r3, #0]
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	617b      	str	r3, [r7, #20]
	__asm volatile
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80141f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3738      	adds	r7, #56	; 0x38
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
 80141fe:	bf00      	nop
 8014200:	20027470 	.word	0x20027470
 8014204:	20027450 	.word	0x20027450
 8014208:	20026f78 	.word	0x20026f78
 801420c:	20027408 	.word	0x20027408
 8014210:	20026f74 	.word	0x20026f74
 8014214:	2002745c 	.word	0x2002745c

08014218 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014222:	4b21      	ldr	r3, [pc, #132]	; (80142a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014228:	4b20      	ldr	r3, [pc, #128]	; (80142ac <prvAddCurrentTaskToDelayedList+0x94>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	3304      	adds	r3, #4
 801422e:	4618      	mov	r0, r3
 8014230:	f7fd faae 	bl	8011790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801423a:	d10a      	bne.n	8014252 <prvAddCurrentTaskToDelayedList+0x3a>
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d007      	beq.n	8014252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014242:	4b1a      	ldr	r3, [pc, #104]	; (80142ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	3304      	adds	r3, #4
 8014248:	4619      	mov	r1, r3
 801424a:	4819      	ldr	r0, [pc, #100]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801424c:	f7fd fa43 	bl	80116d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014250:	e026      	b.n	80142a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4413      	add	r3, r2
 8014258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801425a:	4b14      	ldr	r3, [pc, #80]	; (80142ac <prvAddCurrentTaskToDelayedList+0x94>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014262:	68ba      	ldr	r2, [r7, #8]
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	429a      	cmp	r2, r3
 8014268:	d209      	bcs.n	801427e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801426a:	4b12      	ldr	r3, [pc, #72]	; (80142b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	4b0f      	ldr	r3, [pc, #60]	; (80142ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	3304      	adds	r3, #4
 8014274:	4619      	mov	r1, r3
 8014276:	4610      	mov	r0, r2
 8014278:	f7fd fa51 	bl	801171e <vListInsert>
}
 801427c:	e010      	b.n	80142a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801427e:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	4b0a      	ldr	r3, [pc, #40]	; (80142ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	3304      	adds	r3, #4
 8014288:	4619      	mov	r1, r3
 801428a:	4610      	mov	r0, r2
 801428c:	f7fd fa47 	bl	801171e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014290:	4b0a      	ldr	r3, [pc, #40]	; (80142bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	429a      	cmp	r2, r3
 8014298:	d202      	bcs.n	80142a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801429a:	4a08      	ldr	r2, [pc, #32]	; (80142bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	6013      	str	r3, [r2, #0]
}
 80142a0:	bf00      	nop
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	2002744c 	.word	0x2002744c
 80142ac:	20026f74 	.word	0x20026f74
 80142b0:	20027434 	.word	0x20027434
 80142b4:	20027404 	.word	0x20027404
 80142b8:	20027400 	.word	0x20027400
 80142bc:	20027468 	.word	0x20027468

080142c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08a      	sub	sp, #40	; 0x28
 80142c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80142c6:	2300      	movs	r3, #0
 80142c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80142ca:	f000 fb51 	bl	8014970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80142ce:	4b1c      	ldr	r3, [pc, #112]	; (8014340 <xTimerCreateTimerTask+0x80>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d021      	beq.n	801431a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80142d6:	2300      	movs	r3, #0
 80142d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80142da:	2300      	movs	r3, #0
 80142dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80142de:	1d3a      	adds	r2, r7, #4
 80142e0:	f107 0108 	add.w	r1, r7, #8
 80142e4:	f107 030c 	add.w	r3, r7, #12
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fc ffd1 	bl	8011290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80142ee:	6879      	ldr	r1, [r7, #4]
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	9202      	str	r2, [sp, #8]
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	2302      	movs	r3, #2
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	2300      	movs	r3, #0
 80142fe:	460a      	mov	r2, r1
 8014300:	4910      	ldr	r1, [pc, #64]	; (8014344 <xTimerCreateTimerTask+0x84>)
 8014302:	4811      	ldr	r0, [pc, #68]	; (8014348 <xTimerCreateTimerTask+0x88>)
 8014304:	f7fe fd28 	bl	8012d58 <xTaskCreateStatic>
 8014308:	4602      	mov	r2, r0
 801430a:	4b10      	ldr	r3, [pc, #64]	; (801434c <xTimerCreateTimerTask+0x8c>)
 801430c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801430e:	4b0f      	ldr	r3, [pc, #60]	; (801434c <xTimerCreateTimerTask+0x8c>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d001      	beq.n	801431a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014316:	2301      	movs	r3, #1
 8014318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d109      	bne.n	8014334 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8014320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014324:	f383 8811 	msr	BASEPRI, r3
 8014328:	f3bf 8f6f 	isb	sy
 801432c:	f3bf 8f4f 	dsb	sy
 8014330:	613b      	str	r3, [r7, #16]
 8014332:	e7fe      	b.n	8014332 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8014334:	697b      	ldr	r3, [r7, #20]
}
 8014336:	4618      	mov	r0, r3
 8014338:	3718      	adds	r7, #24
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	200274ac 	.word	0x200274ac
 8014344:	0801b808 	.word	0x0801b808
 8014348:	08014585 	.word	0x08014585
 801434c:	200274b0 	.word	0x200274b0

08014350 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014350:	b580      	push	{r7, lr}
 8014352:	b088      	sub	sp, #32
 8014354:	af02      	add	r7, sp, #8
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801435e:	2030      	movs	r0, #48	; 0x30
 8014360:	f7fc ffb0 	bl	80112c4 <pvPortMalloc>
 8014364:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00d      	beq.n	8014388 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	9301      	str	r3, [sp, #4]
 8014370:	6a3b      	ldr	r3, [r7, #32]
 8014372:	9300      	str	r3, [sp, #0]
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	68b9      	ldr	r1, [r7, #8]
 801437a:	68f8      	ldr	r0, [r7, #12]
 801437c:	f000 f844 	bl	8014408 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	2200      	movs	r2, #0
 8014384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8014388:	697b      	ldr	r3, [r7, #20]
	}
 801438a:	4618      	mov	r0, r3
 801438c:	3718      	adds	r7, #24
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8014392:	b580      	push	{r7, lr}
 8014394:	b08a      	sub	sp, #40	; 0x28
 8014396:	af02      	add	r7, sp, #8
 8014398:	60f8      	str	r0, [r7, #12]
 801439a:	60b9      	str	r1, [r7, #8]
 801439c:	607a      	str	r2, [r7, #4]
 801439e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80143a0:	2330      	movs	r3, #48	; 0x30
 80143a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	2b30      	cmp	r3, #48	; 0x30
 80143a8:	d009      	beq.n	80143be <xTimerCreateStatic+0x2c>
 80143aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ae:	f383 8811 	msr	BASEPRI, r3
 80143b2:	f3bf 8f6f 	isb	sy
 80143b6:	f3bf 8f4f 	dsb	sy
 80143ba:	61bb      	str	r3, [r7, #24]
 80143bc:	e7fe      	b.n	80143bc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d109      	bne.n	80143d8 <xTimerCreateStatic+0x46>
 80143c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c8:	f383 8811 	msr	BASEPRI, r3
 80143cc:	f3bf 8f6f 	isb	sy
 80143d0:	f3bf 8f4f 	dsb	sy
 80143d4:	617b      	str	r3, [r7, #20]
 80143d6:	e7fe      	b.n	80143d6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143da:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d00d      	beq.n	80143fe <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80143e2:	69fb      	ldr	r3, [r7, #28]
 80143e4:	9301      	str	r3, [sp, #4]
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	9300      	str	r3, [sp, #0]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	68b9      	ldr	r1, [r7, #8]
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 f809 	bl	8014408 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	2201      	movs	r2, #1
 80143fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80143fe:	69fb      	ldr	r3, [r7, #28]
	}
 8014400:	4618      	mov	r0, r3
 8014402:	3720      	adds	r7, #32
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b086      	sub	sp, #24
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	607a      	str	r2, [r7, #4]
 8014414:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d109      	bne.n	8014430 <prvInitialiseNewTimer+0x28>
 801441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014420:	f383 8811 	msr	BASEPRI, r3
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	617b      	str	r3, [r7, #20]
 801442e:	e7fe      	b.n	801442e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8014430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014432:	2b00      	cmp	r3, #0
 8014434:	d015      	beq.n	8014462 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014436:	f000 fa9b 	bl	8014970 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014442:	68ba      	ldr	r2, [r7, #8]
 8014444:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8014446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444e:	683a      	ldr	r2, [r7, #0]
 8014450:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014454:	6a3a      	ldr	r2, [r7, #32]
 8014456:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445a:	3304      	adds	r3, #4
 801445c:	4618      	mov	r0, r3
 801445e:	f7fd f92d 	bl	80116bc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014462:	bf00      	nop
 8014464:	3718      	adds	r7, #24
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
	...

0801446c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b08a      	sub	sp, #40	; 0x28
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	607a      	str	r2, [r7, #4]
 8014478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801447a:	2300      	movs	r3, #0
 801447c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d109      	bne.n	8014498 <xTimerGenericCommand+0x2c>
 8014484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014488:	f383 8811 	msr	BASEPRI, r3
 801448c:	f3bf 8f6f 	isb	sy
 8014490:	f3bf 8f4f 	dsb	sy
 8014494:	623b      	str	r3, [r7, #32]
 8014496:	e7fe      	b.n	8014496 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014498:	4b19      	ldr	r3, [pc, #100]	; (8014500 <xTimerGenericCommand+0x94>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d02a      	beq.n	80144f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	2b05      	cmp	r3, #5
 80144b0:	dc18      	bgt.n	80144e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80144b2:	f7ff fb5b 	bl	8013b6c <xTaskGetSchedulerState>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b02      	cmp	r3, #2
 80144ba:	d109      	bne.n	80144d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80144bc:	4b10      	ldr	r3, [pc, #64]	; (8014500 <xTimerGenericCommand+0x94>)
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	f107 0110 	add.w	r1, r7, #16
 80144c4:	2300      	movs	r3, #0
 80144c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c8:	f7fd fdfc 	bl	80120c4 <xQueueGenericSend>
 80144cc:	6278      	str	r0, [r7, #36]	; 0x24
 80144ce:	e012      	b.n	80144f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80144d0:	4b0b      	ldr	r3, [pc, #44]	; (8014500 <xTimerGenericCommand+0x94>)
 80144d2:	6818      	ldr	r0, [r3, #0]
 80144d4:	f107 0110 	add.w	r1, r7, #16
 80144d8:	2300      	movs	r3, #0
 80144da:	2200      	movs	r2, #0
 80144dc:	f7fd fdf2 	bl	80120c4 <xQueueGenericSend>
 80144e0:	6278      	str	r0, [r7, #36]	; 0x24
 80144e2:	e008      	b.n	80144f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80144e4:	4b06      	ldr	r3, [pc, #24]	; (8014500 <xTimerGenericCommand+0x94>)
 80144e6:	6818      	ldr	r0, [r3, #0]
 80144e8:	f107 0110 	add.w	r1, r7, #16
 80144ec:	2300      	movs	r3, #0
 80144ee:	683a      	ldr	r2, [r7, #0]
 80144f0:	f7fd fee2 	bl	80122b8 <xQueueGenericSendFromISR>
 80144f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80144f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3728      	adds	r7, #40	; 0x28
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	200274ac 	.word	0x200274ac

08014504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b088      	sub	sp, #32
 8014508:	af02      	add	r7, sp, #8
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801450e:	4b1c      	ldr	r3, [pc, #112]	; (8014580 <prvProcessExpiredTimer+0x7c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	3304      	adds	r3, #4
 801451c:	4618      	mov	r0, r3
 801451e:	f7fd f937 	bl	8011790 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	69db      	ldr	r3, [r3, #28]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d121      	bne.n	801456e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	699a      	ldr	r2, [r3, #24]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	18d1      	adds	r1, r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	6978      	ldr	r0, [r7, #20]
 8014538:	f000 f8c8 	bl	80146cc <prvInsertTimerInActiveList>
 801453c:	4603      	mov	r3, r0
 801453e:	2b00      	cmp	r3, #0
 8014540:	d015      	beq.n	801456e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014542:	2300      	movs	r3, #0
 8014544:	9300      	str	r3, [sp, #0]
 8014546:	2300      	movs	r3, #0
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	2100      	movs	r1, #0
 801454c:	6978      	ldr	r0, [r7, #20]
 801454e:	f7ff ff8d 	bl	801446c <xTimerGenericCommand>
 8014552:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d109      	bne.n	801456e <prvProcessExpiredTimer+0x6a>
 801455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455e:	f383 8811 	msr	BASEPRI, r3
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	f3bf 8f4f 	dsb	sy
 801456a:	60fb      	str	r3, [r7, #12]
 801456c:	e7fe      	b.n	801456c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014572:	6978      	ldr	r0, [r7, #20]
 8014574:	4798      	blx	r3
}
 8014576:	bf00      	nop
 8014578:	3718      	adds	r7, #24
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	200274a4 	.word	0x200274a4

08014584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801458c:	f107 0308 	add.w	r3, r7, #8
 8014590:	4618      	mov	r0, r3
 8014592:	f000 f857 	bl	8014644 <prvGetNextExpireTime>
 8014596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	4619      	mov	r1, r3
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f000 f803 	bl	80145a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80145a2:	f000 f8d5 	bl	8014750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80145a6:	e7f1      	b.n	801458c <prvTimerTask+0x8>

080145a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80145b2:	f7fe fe05 	bl	80131c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80145b6:	f107 0308 	add.w	r3, r7, #8
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 f866 	bl	801468c <prvSampleTimeNow>
 80145c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d130      	bne.n	801462a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d10a      	bne.n	80145e4 <prvProcessTimerOrBlockTask+0x3c>
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d806      	bhi.n	80145e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145d6:	f7fe fe39 	bl	801324c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145da:	68f9      	ldr	r1, [r7, #12]
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7ff ff91 	bl	8014504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80145e2:	e024      	b.n	801462e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d008      	beq.n	80145fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80145ea:	4b13      	ldr	r3, [pc, #76]	; (8014638 <prvProcessTimerOrBlockTask+0x90>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	bf0c      	ite	eq
 80145f4:	2301      	moveq	r3, #1
 80145f6:	2300      	movne	r3, #0
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <prvProcessTimerOrBlockTask+0x94>)
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	1ad3      	subs	r3, r2, r3
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	4619      	mov	r1, r3
 801460a:	f7fe fb71 	bl	8012cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801460e:	f7fe fe1d 	bl	801324c <xTaskResumeAll>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d10a      	bne.n	801462e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014618:	4b09      	ldr	r3, [pc, #36]	; (8014640 <prvProcessTimerOrBlockTask+0x98>)
 801461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801461e:	601a      	str	r2, [r3, #0]
 8014620:	f3bf 8f4f 	dsb	sy
 8014624:	f3bf 8f6f 	isb	sy
}
 8014628:	e001      	b.n	801462e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801462a:	f7fe fe0f 	bl	801324c <xTaskResumeAll>
}
 801462e:	bf00      	nop
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	200274a8 	.word	0x200274a8
 801463c:	200274ac 	.word	0x200274ac
 8014640:	e000ed04 	.word	0xe000ed04

08014644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014644:	b480      	push	{r7}
 8014646:	b085      	sub	sp, #20
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801464c:	4b0e      	ldr	r3, [pc, #56]	; (8014688 <prvGetNextExpireTime+0x44>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	bf0c      	ite	eq
 8014656:	2301      	moveq	r3, #1
 8014658:	2300      	movne	r3, #0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	461a      	mov	r2, r3
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d105      	bne.n	8014676 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801466a:	4b07      	ldr	r3, [pc, #28]	; (8014688 <prvGetNextExpireTime+0x44>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	60fb      	str	r3, [r7, #12]
 8014674:	e001      	b.n	801467a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014676:	2300      	movs	r3, #0
 8014678:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801467a:	68fb      	ldr	r3, [r7, #12]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3714      	adds	r7, #20
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	200274a4 	.word	0x200274a4

0801468c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014694:	f7fe fe76 	bl	8013384 <xTaskGetTickCount>
 8014698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801469a:	4b0b      	ldr	r3, [pc, #44]	; (80146c8 <prvSampleTimeNow+0x3c>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d205      	bcs.n	80146b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80146a4:	f000 f904 	bl	80148b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2201      	movs	r2, #1
 80146ac:	601a      	str	r2, [r3, #0]
 80146ae:	e002      	b.n	80146b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80146b6:	4a04      	ldr	r2, [pc, #16]	; (80146c8 <prvSampleTimeNow+0x3c>)
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80146bc:	68fb      	ldr	r3, [r7, #12]
}
 80146be:	4618      	mov	r0, r3
 80146c0:	3710      	adds	r7, #16
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	200274b4 	.word	0x200274b4

080146cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b086      	sub	sp, #24
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
 80146d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146da:	2300      	movs	r3, #0
 80146dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	68ba      	ldr	r2, [r7, #8]
 80146e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d812      	bhi.n	8014718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	1ad2      	subs	r2, r2, r3
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	699b      	ldr	r3, [r3, #24]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d302      	bcc.n	8014706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014700:	2301      	movs	r3, #1
 8014702:	617b      	str	r3, [r7, #20]
 8014704:	e01b      	b.n	801473e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014706:	4b10      	ldr	r3, [pc, #64]	; (8014748 <prvInsertTimerInActiveList+0x7c>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	3304      	adds	r3, #4
 801470e:	4619      	mov	r1, r3
 8014710:	4610      	mov	r0, r2
 8014712:	f7fd f804 	bl	801171e <vListInsert>
 8014716:	e012      	b.n	801473e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	429a      	cmp	r2, r3
 801471e:	d206      	bcs.n	801472e <prvInsertTimerInActiveList+0x62>
 8014720:	68ba      	ldr	r2, [r7, #8]
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	429a      	cmp	r2, r3
 8014726:	d302      	bcc.n	801472e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014728:	2301      	movs	r3, #1
 801472a:	617b      	str	r3, [r7, #20]
 801472c:	e007      	b.n	801473e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801472e:	4b07      	ldr	r3, [pc, #28]	; (801474c <prvInsertTimerInActiveList+0x80>)
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	3304      	adds	r3, #4
 8014736:	4619      	mov	r1, r3
 8014738:	4610      	mov	r0, r2
 801473a:	f7fc fff0 	bl	801171e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801473e:	697b      	ldr	r3, [r7, #20]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3718      	adds	r7, #24
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	200274a8 	.word	0x200274a8
 801474c:	200274a4 	.word	0x200274a4

08014750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b08e      	sub	sp, #56	; 0x38
 8014754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014756:	e099      	b.n	801488c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2b00      	cmp	r3, #0
 801475c:	da17      	bge.n	801478e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801475e:	1d3b      	adds	r3, r7, #4
 8014760:	3304      	adds	r3, #4
 8014762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014766:	2b00      	cmp	r3, #0
 8014768:	d109      	bne.n	801477e <prvProcessReceivedCommands+0x2e>
 801476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801476e:	f383 8811 	msr	BASEPRI, r3
 8014772:	f3bf 8f6f 	isb	sy
 8014776:	f3bf 8f4f 	dsb	sy
 801477a:	61fb      	str	r3, [r7, #28]
 801477c:	e7fe      	b.n	801477c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014784:	6850      	ldr	r0, [r2, #4]
 8014786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014788:	6892      	ldr	r2, [r2, #8]
 801478a:	4611      	mov	r1, r2
 801478c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	2b00      	cmp	r3, #0
 8014792:	db7a      	blt.n	801488a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	695b      	ldr	r3, [r3, #20]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d004      	beq.n	80147aa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a2:	3304      	adds	r3, #4
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fc fff3 	bl	8011790 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147aa:	463b      	mov	r3, r7
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7ff ff6d 	bl	801468c <prvSampleTimeNow>
 80147b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b09      	cmp	r3, #9
 80147b8:	d868      	bhi.n	801488c <prvProcessReceivedCommands+0x13c>
 80147ba:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <prvProcessReceivedCommands+0x70>)
 80147bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c0:	080147e9 	.word	0x080147e9
 80147c4:	080147e9 	.word	0x080147e9
 80147c8:	080147e9 	.word	0x080147e9
 80147cc:	0801488d 	.word	0x0801488d
 80147d0:	08014843 	.word	0x08014843
 80147d4:	08014879 	.word	0x08014879
 80147d8:	080147e9 	.word	0x080147e9
 80147dc:	080147e9 	.word	0x080147e9
 80147e0:	0801488d 	.word	0x0801488d
 80147e4:	08014843 	.word	0x08014843
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147e8:	68ba      	ldr	r2, [r7, #8]
 80147ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ec:	699b      	ldr	r3, [r3, #24]
 80147ee:	18d1      	adds	r1, r2, r3
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147f6:	f7ff ff69 	bl	80146cc <prvInsertTimerInActiveList>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d045      	beq.n	801488c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014806:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8014808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480a:	69db      	ldr	r3, [r3, #28]
 801480c:	2b01      	cmp	r3, #1
 801480e:	d13d      	bne.n	801488c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014814:	699b      	ldr	r3, [r3, #24]
 8014816:	441a      	add	r2, r3
 8014818:	2300      	movs	r3, #0
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	2300      	movs	r3, #0
 801481e:	2100      	movs	r1, #0
 8014820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014822:	f7ff fe23 	bl	801446c <xTimerGenericCommand>
 8014826:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014828:	6a3b      	ldr	r3, [r7, #32]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d12e      	bne.n	801488c <prvProcessReceivedCommands+0x13c>
 801482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	61bb      	str	r3, [r7, #24]
 8014840:	e7fe      	b.n	8014840 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484a:	699b      	ldr	r3, [r3, #24]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d109      	bne.n	8014864 <prvProcessReceivedCommands+0x114>
 8014850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014854:	f383 8811 	msr	BASEPRI, r3
 8014858:	f3bf 8f6f 	isb	sy
 801485c:	f3bf 8f4f 	dsb	sy
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	e7fe      	b.n	8014862 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014866:	699a      	ldr	r2, [r3, #24]
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	18d1      	adds	r1, r2, r3
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014872:	f7ff ff2b 	bl	80146cc <prvInsertTimerInActiveList>
					break;
 8014876:	e009      	b.n	801488c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801487a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801487e:	2b00      	cmp	r3, #0
 8014880:	d104      	bne.n	801488c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8014882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014884:	f7fc fde4 	bl	8011450 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014888:	e000      	b.n	801488c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801488a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801488c:	4b07      	ldr	r3, [pc, #28]	; (80148ac <prvProcessReceivedCommands+0x15c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	1d39      	adds	r1, r7, #4
 8014892:	2200      	movs	r2, #0
 8014894:	4618      	mov	r0, r3
 8014896:	f7fd fe2d 	bl	80124f4 <xQueueReceive>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	f47f af5b 	bne.w	8014758 <prvProcessReceivedCommands+0x8>
	}
}
 80148a2:	bf00      	nop
 80148a4:	3730      	adds	r7, #48	; 0x30
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	200274ac 	.word	0x200274ac

080148b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b088      	sub	sp, #32
 80148b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148b6:	e044      	b.n	8014942 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148b8:	4b2b      	ldr	r3, [pc, #172]	; (8014968 <prvSwitchTimerLists+0xb8>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148c2:	4b29      	ldr	r3, [pc, #164]	; (8014968 <prvSwitchTimerLists+0xb8>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	3304      	adds	r3, #4
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7fc ff5d 	bl	8011790 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148da:	68f8      	ldr	r0, [r7, #12]
 80148dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	69db      	ldr	r3, [r3, #28]
 80148e2:	2b01      	cmp	r3, #1
 80148e4:	d12d      	bne.n	8014942 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	699b      	ldr	r3, [r3, #24]
 80148ea:	693a      	ldr	r2, [r7, #16]
 80148ec:	4413      	add	r3, r2
 80148ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80148f0:	68ba      	ldr	r2, [r7, #8]
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d90e      	bls.n	8014916 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	68ba      	ldr	r2, [r7, #8]
 80148fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014904:	4b18      	ldr	r3, [pc, #96]	; (8014968 <prvSwitchTimerLists+0xb8>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	3304      	adds	r3, #4
 801490c:	4619      	mov	r1, r3
 801490e:	4610      	mov	r0, r2
 8014910:	f7fc ff05 	bl	801171e <vListInsert>
 8014914:	e015      	b.n	8014942 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014916:	2300      	movs	r3, #0
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	2300      	movs	r3, #0
 801491c:	693a      	ldr	r2, [r7, #16]
 801491e:	2100      	movs	r1, #0
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f7ff fda3 	bl	801446c <xTimerGenericCommand>
 8014926:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d109      	bne.n	8014942 <prvSwitchTimerLists+0x92>
 801492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014932:	f383 8811 	msr	BASEPRI, r3
 8014936:	f3bf 8f6f 	isb	sy
 801493a:	f3bf 8f4f 	dsb	sy
 801493e:	603b      	str	r3, [r7, #0]
 8014940:	e7fe      	b.n	8014940 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014942:	4b09      	ldr	r3, [pc, #36]	; (8014968 <prvSwitchTimerLists+0xb8>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1b5      	bne.n	80148b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801494c:	4b06      	ldr	r3, [pc, #24]	; (8014968 <prvSwitchTimerLists+0xb8>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014952:	4b06      	ldr	r3, [pc, #24]	; (801496c <prvSwitchTimerLists+0xbc>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4a04      	ldr	r2, [pc, #16]	; (8014968 <prvSwitchTimerLists+0xb8>)
 8014958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801495a:	4a04      	ldr	r2, [pc, #16]	; (801496c <prvSwitchTimerLists+0xbc>)
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	6013      	str	r3, [r2, #0]
}
 8014960:	bf00      	nop
 8014962:	3718      	adds	r7, #24
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	200274a4 	.word	0x200274a4
 801496c:	200274a8 	.word	0x200274a8

08014970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014976:	f7fd f859 	bl	8011a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801497a:	4b15      	ldr	r3, [pc, #84]	; (80149d0 <prvCheckForValidListAndQueue+0x60>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d120      	bne.n	80149c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014982:	4814      	ldr	r0, [pc, #80]	; (80149d4 <prvCheckForValidListAndQueue+0x64>)
 8014984:	f7fc fe7a 	bl	801167c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014988:	4813      	ldr	r0, [pc, #76]	; (80149d8 <prvCheckForValidListAndQueue+0x68>)
 801498a:	f7fc fe77 	bl	801167c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801498e:	4b13      	ldr	r3, [pc, #76]	; (80149dc <prvCheckForValidListAndQueue+0x6c>)
 8014990:	4a10      	ldr	r2, [pc, #64]	; (80149d4 <prvCheckForValidListAndQueue+0x64>)
 8014992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014994:	4b12      	ldr	r3, [pc, #72]	; (80149e0 <prvCheckForValidListAndQueue+0x70>)
 8014996:	4a10      	ldr	r2, [pc, #64]	; (80149d8 <prvCheckForValidListAndQueue+0x68>)
 8014998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801499a:	2300      	movs	r3, #0
 801499c:	9300      	str	r3, [sp, #0]
 801499e:	4b11      	ldr	r3, [pc, #68]	; (80149e4 <prvCheckForValidListAndQueue+0x74>)
 80149a0:	4a11      	ldr	r2, [pc, #68]	; (80149e8 <prvCheckForValidListAndQueue+0x78>)
 80149a2:	2110      	movs	r1, #16
 80149a4:	200a      	movs	r0, #10
 80149a6:	f7fd f99f 	bl	8011ce8 <xQueueGenericCreateStatic>
 80149aa:	4602      	mov	r2, r0
 80149ac:	4b08      	ldr	r3, [pc, #32]	; (80149d0 <prvCheckForValidListAndQueue+0x60>)
 80149ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149b0:	4b07      	ldr	r3, [pc, #28]	; (80149d0 <prvCheckForValidListAndQueue+0x60>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d005      	beq.n	80149c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149b8:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <prvCheckForValidListAndQueue+0x60>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	490b      	ldr	r1, [pc, #44]	; (80149ec <prvCheckForValidListAndQueue+0x7c>)
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fe f944 	bl	8012c4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149c4:	f7fd f860 	bl	8011a88 <vPortExitCritical>
}
 80149c8:	bf00      	nop
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	200274ac 	.word	0x200274ac
 80149d4:	2002747c 	.word	0x2002747c
 80149d8:	20027490 	.word	0x20027490
 80149dc:	200274a4 	.word	0x200274a4
 80149e0:	200274a8 	.word	0x200274a8
 80149e4:	20027558 	.word	0x20027558
 80149e8:	200274b8 	.word	0x200274b8
 80149ec:	0801b810 	.word	0x0801b810

080149f0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d109      	bne.n	8014a16 <xTimerIsTimerActive+0x26>
 8014a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a06:	f383 8811 	msr	BASEPRI, r3
 8014a0a:	f3bf 8f6f 	isb	sy
 8014a0e:	f3bf 8f4f 	dsb	sy
 8014a12:	60fb      	str	r3, [r7, #12]
 8014a14:	e7fe      	b.n	8014a14 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8014a16:	f7fd f809 	bl	8011a2c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	695b      	ldr	r3, [r3, #20]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	bf14      	ite	ne
 8014a22:	2301      	movne	r3, #1
 8014a24:	2300      	moveq	r3, #0
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014a2a:	f7fd f82d 	bl	8011a88 <vPortExitCritical>

	return xTimerIsInActiveList;
 8014a2e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8014a30:	4618      	mov	r0, r3
 8014a32:	3718      	adds	r7, #24
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d109      	bne.n	8014a5e <pvTimerGetTimerID+0x26>
 8014a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4e:	f383 8811 	msr	BASEPRI, r3
 8014a52:	f3bf 8f6f 	isb	sy
 8014a56:	f3bf 8f4f 	dsb	sy
 8014a5a:	60fb      	str	r3, [r7, #12]
 8014a5c:	e7fe      	b.n	8014a5c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8014a5e:	f7fc ffe5 	bl	8011a2c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	6a1b      	ldr	r3, [r3, #32]
 8014a66:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014a68:	f7fd f80e 	bl	8011a88 <vPortExitCritical>

	return pvReturn;
 8014a6c:	693b      	ldr	r3, [r7, #16]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3718      	adds	r7, #24
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b084      	sub	sp, #16
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
 8014a7e:	460b      	mov	r3, r1
 8014a80:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014a82:	f004 f88b 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014a86:	f004 f827 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014a8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8014a94:	701a      	strb	r2, [r3, #0]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f042 0201 	orr.w	r2, r2, #1
 8014a9c:	705a      	strb	r2, [r3, #1]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	709a      	strb	r2, [r3, #2]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	f042 0201 	orr.w	r2, r2, #1
 8014aae:	711a      	strb	r2, [r3, #4]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	715a      	strb	r2, [r3, #5]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	719a      	strb	r2, [r3, #6]
 8014ab8:	2200      	movs	r2, #0
 8014aba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 8014abc:	887a      	ldrh	r2, [r7, #2]
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014ac2:	f004 f82d 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ac6:	f004 f813 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014aca:	60f8      	str	r0, [r7, #12]
}
 8014acc:	bf00      	nop
 8014ace:	3710      	adds	r7, #16
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	460b      	mov	r3, r1
 8014ade:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014ae0:	f004 f85c 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014ae4:	f003 fff8 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014ae8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2200      	movs	r2, #0
 8014aee:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8014af2:	701a      	strb	r2, [r3, #0]
 8014af4:	2200      	movs	r2, #0
 8014af6:	f042 0201 	orr.w	r2, r2, #1
 8014afa:	705a      	strb	r2, [r3, #1]
 8014afc:	2200      	movs	r2, #0
 8014afe:	709a      	strb	r2, [r3, #2]
 8014b00:	2200      	movs	r2, #0
 8014b02:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f042 0201 	orr.w	r2, r2, #1
 8014b0c:	711a      	strb	r2, [r3, #4]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	715a      	strb	r2, [r3, #5]
 8014b12:	2200      	movs	r2, #0
 8014b14:	719a      	strb	r2, [r3, #6]
 8014b16:	2200      	movs	r2, #0
 8014b18:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 8014b1a:	887a      	ldrh	r2, [r7, #2]
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014b20:	f003 fffe 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b24:	f003 ffe4 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b28:	60f8      	str	r0, [r7, #12]
}
 8014b2a:	bf00      	nop
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	70fb      	strb	r3, [r7, #3]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014b42:	f004 f82b 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014b46:	f003 ffc7 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014b4a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f062 0260 	orn	r2, r2, #96	; 0x60
 8014b54:	701a      	strb	r2, [r3, #0]
 8014b56:	2200      	movs	r2, #0
 8014b58:	705a      	strb	r2, [r3, #1]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	709a      	strb	r2, [r3, #2]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	f042 0203 	orr.w	r2, r2, #3
 8014b6a:	711a      	strb	r2, [r3, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	715a      	strb	r2, [r3, #5]
 8014b70:	2200      	movs	r2, #0
 8014b72:	719a      	strb	r2, [r3, #6]
 8014b74:	2200      	movs	r2, #0
 8014b76:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 8014b7e:	78fa      	ldrb	r2, [r7, #3]
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 8014b84:	78ba      	ldrb	r2, [r7, #2]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014b8a:	f003 ffc9 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014b8e:	f003 ffaf 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014b92:	60f8      	str	r0, [r7, #12]
}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 8014baa:	f003 fff7 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014bae:	f003 ff93 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014bb2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8014bbc:	701a      	strb	r2, [r3, #0]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	705a      	strb	r2, [r3, #1]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	709a      	strb	r2, [r3, #2]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f042 0203 	orr.w	r2, r2, #3
 8014bd2:	711a      	strb	r2, [r3, #4]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	715a      	strb	r2, [r3, #5]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	719a      	strb	r2, [r3, #6]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 8014bec:	79fa      	ldrb	r2, [r7, #7]
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8014bf2:	f003 ff95 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014bf6:	f003 ff7b 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014bfa:	6178      	str	r0, [r7, #20]
}
 8014bfc:	bf00      	nop
 8014bfe:	3718      	adds	r7, #24
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	460b      	mov	r3, r1
 8014c0e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014c10:	f003 ffc4 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c14:	f003 ff60 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014c18:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8014c22:	701a      	strb	r2, [r3, #0]
 8014c24:	2200      	movs	r2, #0
 8014c26:	705a      	strb	r2, [r3, #1]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	709a      	strb	r2, [r3, #2]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2200      	movs	r2, #0
 8014c34:	f042 0202 	orr.w	r2, r2, #2
 8014c38:	711a      	strb	r2, [r3, #4]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	715a      	strb	r2, [r3, #5]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	719a      	strb	r2, [r3, #6]
 8014c42:	2200      	movs	r2, #0
 8014c44:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 8014c4c:	78fa      	ldrb	r2, [r7, #3]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014c52:	f003 ff65 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014c56:	f003 ff4b 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014c5a:	60f8      	str	r0, [r7, #12]
}
 8014c5c:	bf00      	nop
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8014c70:	f003 ff94 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014c74:	f003 ff30 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014c78:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 8014c82:	701a      	strb	r2, [r3, #0]
 8014c84:	2200      	movs	r2, #0
 8014c86:	705a      	strb	r2, [r3, #1]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	709a      	strb	r2, [r3, #2]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2200      	movs	r2, #0
 8014c94:	f042 0202 	orr.w	r2, r2, #2
 8014c98:	711a      	strb	r2, [r3, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	715a      	strb	r2, [r3, #5]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	719a      	strb	r2, [r3, #6]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 8014cac:	78fa      	ldrb	r2, [r7, #3]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014cb2:	f003 ff35 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014cb6:	f003 ff1b 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014cba:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	689b      	ldr	r3, [r3, #8]
 8014cc0:	b2db      	uxtb	r3, r3
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3710      	adds	r7, #16
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b084      	sub	sp, #16
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
 8014cd2:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014cd4:	f003 ff62 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014cd8:	f003 fefe 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014cdc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f062 0250 	orn	r2, r2, #80	; 0x50
 8014ce6:	701a      	strb	r2, [r3, #0]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	705a      	strb	r2, [r3, #1]
 8014cec:	2200      	movs	r2, #0
 8014cee:	709a      	strb	r2, [r3, #2]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f042 0202 	orr.w	r2, r2, #2
 8014cfc:	711a      	strb	r2, [r3, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	715a      	strb	r2, [r3, #5]
 8014d02:	2200      	movs	r2, #0
 8014d04:	719a      	strb	r2, [r3, #6]
 8014d06:	2200      	movs	r2, #0
 8014d08:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8014d10:	683a      	ldr	r2, [r7, #0]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014d16:	f003 ff03 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d1a:	f003 fee9 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d1e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	b2db      	uxtb	r3, r3
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3710      	adds	r7, #16
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}

08014d2e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8014d2e:	b580      	push	{r7, lr}
 8014d30:	b084      	sub	sp, #16
 8014d32:	af00      	add	r7, sp, #0
 8014d34:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014d36:	f003 ff31 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d3a:	f003 fecd 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014d3e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8014d48:	701a      	strb	r2, [r3, #0]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	705a      	strb	r2, [r3, #1]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	709a      	strb	r2, [r3, #2]
 8014d52:	2200      	movs	r2, #0
 8014d54:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f042 0201 	orr.w	r2, r2, #1
 8014d5e:	711a      	strb	r2, [r3, #4]
 8014d60:	2200      	movs	r2, #0
 8014d62:	715a      	strb	r2, [r3, #5]
 8014d64:	2200      	movs	r2, #0
 8014d66:	719a      	strb	r2, [r3, #6]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014d72:	f003 fed5 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014d76:	f003 febb 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014d7a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	689b      	ldr	r3, [r3, #8]
 8014d80:	b2db      	uxtb	r3, r3
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b084      	sub	sp, #16
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
 8014d92:	460b      	mov	r3, r1
 8014d94:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8014d96:	f003 ff01 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014d9a:	f003 fe9d 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014d9e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2200      	movs	r2, #0
 8014da4:	f062 0256 	orn	r2, r2, #86	; 0x56
 8014da8:	701a      	strb	r2, [r3, #0]
 8014daa:	2200      	movs	r2, #0
 8014dac:	705a      	strb	r2, [r3, #1]
 8014dae:	2200      	movs	r2, #0
 8014db0:	709a      	strb	r2, [r3, #2]
 8014db2:	2200      	movs	r2, #0
 8014db4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2200      	movs	r2, #0
 8014dba:	f042 0202 	orr.w	r2, r2, #2
 8014dbe:	711a      	strb	r2, [r3, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	715a      	strb	r2, [r3, #5]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	719a      	strb	r2, [r3, #6]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8014dd2:	887a      	ldrh	r2, [r7, #2]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8014dd8:	f003 fea2 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ddc:	f003 fe88 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014de0:	60f8      	str	r0, [r7, #12]
}
 8014de2:	bf00      	nop
 8014de4:	3710      	adds	r7, #16
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}

08014dea <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8014dea:	b580      	push	{r7, lr}
 8014dec:	b084      	sub	sp, #16
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014df2:	f003 fed3 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014df6:	f003 fe6f 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014dfa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f062 0261 	orn	r2, r2, #97	; 0x61
 8014e04:	701a      	strb	r2, [r3, #0]
 8014e06:	2200      	movs	r2, #0
 8014e08:	705a      	strb	r2, [r3, #1]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	709a      	strb	r2, [r3, #2]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	f042 0201 	orr.w	r2, r2, #1
 8014e1a:	711a      	strb	r2, [r3, #4]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	715a      	strb	r2, [r3, #5]
 8014e20:	2200      	movs	r2, #0
 8014e22:	719a      	strb	r2, [r3, #6]
 8014e24:	2200      	movs	r2, #0
 8014e26:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014e2e:	f003 fe77 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e32:	f003 fe5d 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e36:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	b2db      	uxtb	r3, r3
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b084      	sub	sp, #16
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014e4e:	f003 fea5 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014e52:	f003 fe41 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014e56:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8014e60:	701a      	strb	r2, [r3, #0]
 8014e62:	2200      	movs	r2, #0
 8014e64:	705a      	strb	r2, [r3, #1]
 8014e66:	2200      	movs	r2, #0
 8014e68:	709a      	strb	r2, [r3, #2]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f042 0201 	orr.w	r2, r2, #1
 8014e76:	711a      	strb	r2, [r3, #4]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	715a      	strb	r2, [r3, #5]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	719a      	strb	r2, [r3, #6]
 8014e80:	2200      	movs	r2, #0
 8014e82:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014e8a:	f003 fe49 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014e8e:	f003 fe2f 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014e92:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	b2db      	uxtb	r3, r3
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b084      	sub	sp, #16
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014eaa:	f003 fe77 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014eae:	f003 fe13 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014eb2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f062 0255 	orn	r2, r2, #85	; 0x55
 8014ebc:	701a      	strb	r2, [r3, #0]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	705a      	strb	r2, [r3, #1]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	709a      	strb	r2, [r3, #2]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	f042 0201 	orr.w	r2, r2, #1
 8014ed2:	711a      	strb	r2, [r3, #4]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	715a      	strb	r2, [r3, #5]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	719a      	strb	r2, [r3, #6]
 8014edc:	2200      	movs	r2, #0
 8014ede:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014ee6:	f003 fe1b 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014eea:	f003 fe01 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014eee:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	689b      	ldr	r3, [r3, #8]
 8014ef4:	b29b      	uxth	r3, r3
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b084      	sub	sp, #16
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014f06:	f003 fe49 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f0a:	f003 fde5 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014f0e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f062 0254 	orn	r2, r2, #84	; 0x54
 8014f18:	701a      	strb	r2, [r3, #0]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	705a      	strb	r2, [r3, #1]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	709a      	strb	r2, [r3, #2]
 8014f22:	2200      	movs	r2, #0
 8014f24:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	f042 0201 	orr.w	r2, r2, #1
 8014f2e:	711a      	strb	r2, [r3, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	715a      	strb	r2, [r3, #5]
 8014f34:	2200      	movs	r2, #0
 8014f36:	719a      	strb	r2, [r3, #6]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f42:	f003 fded 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014f46:	f003 fdd3 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014f4a:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	689b      	ldr	r3, [r3, #8]
 8014f50:	b2db      	uxtb	r3, r3
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3710      	adds	r7, #16
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b084      	sub	sp, #16
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8014f62:	f003 fe1b 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014f66:	f003 fdb7 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014f6a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f062 0253 	orn	r2, r2, #83	; 0x53
 8014f74:	701a      	strb	r2, [r3, #0]
 8014f76:	2200      	movs	r2, #0
 8014f78:	705a      	strb	r2, [r3, #1]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	709a      	strb	r2, [r3, #2]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2200      	movs	r2, #0
 8014f86:	f042 0201 	orr.w	r2, r2, #1
 8014f8a:	711a      	strb	r2, [r3, #4]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	715a      	strb	r2, [r3, #5]
 8014f90:	2200      	movs	r2, #0
 8014f92:	719a      	strb	r2, [r3, #6]
 8014f94:	2200      	movs	r2, #0
 8014f96:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014f9e:	f003 fdbf 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014fa2:	f003 fda5 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8014fa6:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	689b      	ldr	r3, [r3, #8]
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3710      	adds	r7, #16
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8014fbe:	f003 fded 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8014fc2:	f003 fd89 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8014fc6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f062 0259 	orn	r2, r2, #89	; 0x59
 8014fd0:	701a      	strb	r2, [r3, #0]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	705a      	strb	r2, [r3, #1]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	709a      	strb	r2, [r3, #2]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f042 0201 	orr.w	r2, r2, #1
 8014fe6:	711a      	strb	r2, [r3, #4]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	715a      	strb	r2, [r3, #5]
 8014fec:	2200      	movs	r2, #0
 8014fee:	719a      	strb	r2, [r3, #6]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8014ff4:	683a      	ldr	r2, [r7, #0]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8014ffa:	f003 fd91 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8014ffe:	f003 fd77 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015002:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	689b      	ldr	r3, [r3, #8]

}
 8015008:	4618      	mov	r0, r3
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b086      	sub	sp, #24
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	607a      	str	r2, [r7, #4]
 801501c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 801501e:	f003 fdbd 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015022:	f003 fd59 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015026:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	2200      	movs	r2, #0
 801502c:	f062 0258 	orn	r2, r2, #88	; 0x58
 8015030:	701a      	strb	r2, [r3, #0]
 8015032:	2200      	movs	r2, #0
 8015034:	705a      	strb	r2, [r3, #1]
 8015036:	2200      	movs	r2, #0
 8015038:	709a      	strb	r2, [r3, #2]
 801503a:	2200      	movs	r2, #0
 801503c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	2200      	movs	r2, #0
 8015042:	f042 0203 	orr.w	r2, r2, #3
 8015046:	711a      	strb	r2, [r3, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	715a      	strb	r2, [r3, #5]
 801504c:	2200      	movs	r2, #0
 801504e:	719a      	strb	r2, [r3, #6]
 8015050:	2200      	movs	r2, #0
 8015052:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015054:	68ba      	ldr	r2, [r7, #8]
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8015066:	6a3a      	ldr	r2, [r7, #32]
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 801506c:	f003 fd58 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015070:	f003 fd3e 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015074:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	689b      	ldr	r3, [r3, #8]
 801507a:	b2db      	uxtb	r3, r3
}
 801507c:	4618      	mov	r0, r3
 801507e:	3718      	adds	r7, #24
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	460b      	mov	r3, r1
 801508e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8015090:	f003 fd84 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015094:	f003 fd20 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015098:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2200      	movs	r2, #0
 801509e:	f062 024b 	orn	r2, r2, #75	; 0x4b
 80150a2:	701a      	strb	r2, [r3, #0]
 80150a4:	2200      	movs	r2, #0
 80150a6:	705a      	strb	r2, [r3, #1]
 80150a8:	2200      	movs	r2, #0
 80150aa:	709a      	strb	r2, [r3, #2]
 80150ac:	2200      	movs	r2, #0
 80150ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	2200      	movs	r2, #0
 80150b4:	f042 0201 	orr.w	r2, r2, #1
 80150b8:	711a      	strb	r2, [r3, #4]
 80150ba:	2200      	movs	r2, #0
 80150bc:	715a      	strb	r2, [r3, #5]
 80150be:	2200      	movs	r2, #0
 80150c0:	719a      	strb	r2, [r3, #6]
 80150c2:	2200      	movs	r2, #0
 80150c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 80150c6:	887a      	ldrh	r2, [r7, #2]
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80150cc:	f003 fd28 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80150d0:	f003 fd0e 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80150d4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	689b      	ldr	r3, [r3, #8]
 80150da:	b2db      	uxtb	r3, r3
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80150ee:	f003 fd55 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80150f2:	f003 fcf1 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80150f6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2200      	movs	r2, #0
 80150fc:	f062 0249 	orn	r2, r2, #73	; 0x49
 8015100:	701a      	strb	r2, [r3, #0]
 8015102:	2200      	movs	r2, #0
 8015104:	705a      	strb	r2, [r3, #1]
 8015106:	2200      	movs	r2, #0
 8015108:	709a      	strb	r2, [r3, #2]
 801510a:	2200      	movs	r2, #0
 801510c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2200      	movs	r2, #0
 8015112:	f042 0201 	orr.w	r2, r2, #1
 8015116:	711a      	strb	r2, [r3, #4]
 8015118:	2200      	movs	r2, #0
 801511a:	715a      	strb	r2, [r3, #5]
 801511c:	2200      	movs	r2, #0
 801511e:	719a      	strb	r2, [r3, #6]
 8015120:	2200      	movs	r2, #0
 8015122:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8015124:	683a      	ldr	r2, [r7, #0]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801512a:	f003 fcf9 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801512e:	f003 fcdf 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015132:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	b2db      	uxtb	r3, r3
}
 801513a:	4618      	mov	r0, r3
 801513c:	3710      	adds	r7, #16
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b086      	sub	sp, #24
 8015146:	af00      	add	r7, sp, #0
 8015148:	60f8      	str	r0, [r7, #12]
 801514a:	60b9      	str	r1, [r7, #8]
 801514c:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 801514e:	f003 fd25 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015152:	f003 fcc1 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015156:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	2200      	movs	r2, #0
 801515c:	f062 0257 	orn	r2, r2, #87	; 0x57
 8015160:	701a      	strb	r2, [r3, #0]
 8015162:	2200      	movs	r2, #0
 8015164:	705a      	strb	r2, [r3, #1]
 8015166:	2200      	movs	r2, #0
 8015168:	709a      	strb	r2, [r3, #2]
 801516a:	2200      	movs	r2, #0
 801516c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	2200      	movs	r2, #0
 8015172:	f042 0202 	orr.w	r2, r2, #2
 8015176:	711a      	strb	r2, [r3, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	715a      	strb	r2, [r3, #5]
 801517c:	2200      	movs	r2, #0
 801517e:	719a      	strb	r2, [r3, #6]
 8015180:	2200      	movs	r2, #0
 8015182:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015184:	68ba      	ldr	r2, [r7, #8]
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 801518a:	687a      	ldr	r2, [r7, #4]
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8015190:	f003 fcc6 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015194:	f003 fcac 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015198:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	689b      	ldr	r3, [r3, #8]
 801519e:	b2db      	uxtb	r3, r3
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3718      	adds	r7, #24
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 80151ae:	f003 fcf5 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80151b2:	f003 fc91 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80151b6:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f062 026b 	orn	r2, r2, #107	; 0x6b
 80151c0:	701a      	strb	r2, [r3, #0]
 80151c2:	2200      	movs	r2, #0
 80151c4:	705a      	strb	r2, [r3, #1]
 80151c6:	2200      	movs	r2, #0
 80151c8:	709a      	strb	r2, [r3, #2]
 80151ca:	2200      	movs	r2, #0
 80151cc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	2200      	movs	r2, #0
 80151d2:	711a      	strb	r2, [r3, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	715a      	strb	r2, [r3, #5]
 80151d8:	2200      	movs	r2, #0
 80151da:	719a      	strb	r2, [r3, #6]
 80151dc:	2200      	movs	r2, #0
 80151de:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80151e0:	f003 fc9e 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80151e4:	f003 fc84 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80151e8:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	689b      	ldr	r3, [r3, #8]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3708      	adds	r7, #8
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80151fe:	f003 fccd 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015202:	f003 fc69 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015206:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2200      	movs	r2, #0
 801520c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8015210:	701a      	strb	r2, [r3, #0]
 8015212:	2200      	movs	r2, #0
 8015214:	705a      	strb	r2, [r3, #1]
 8015216:	2200      	movs	r2, #0
 8015218:	709a      	strb	r2, [r3, #2]
 801521a:	2200      	movs	r2, #0
 801521c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2200      	movs	r2, #0
 8015222:	711a      	strb	r2, [r3, #4]
 8015224:	2200      	movs	r2, #0
 8015226:	715a      	strb	r2, [r3, #5]
 8015228:	2200      	movs	r2, #0
 801522a:	719a      	strb	r2, [r3, #6]
 801522c:	2200      	movs	r2, #0
 801522e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8015230:	f003 fc76 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015234:	f003 fc5c 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015238:	60f8      	str	r0, [r7, #12]
}
 801523a:	bf00      	nop
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
	...

08015244 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8015250:	f003 fca4 	bl	8018b9c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8015254:	4a15      	ldr	r2, [pc, #84]	; (80152ac <otSetStateChangedCallback+0x68>)
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801525a:	f003 fc3d 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 801525e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	2200      	movs	r2, #0
 8015264:	f062 0268 	orn	r2, r2, #104	; 0x68
 8015268:	701a      	strb	r2, [r3, #0]
 801526a:	2200      	movs	r2, #0
 801526c:	705a      	strb	r2, [r3, #1]
 801526e:	2200      	movs	r2, #0
 8015270:	709a      	strb	r2, [r3, #2]
 8015272:	2200      	movs	r2, #0
 8015274:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	2200      	movs	r2, #0
 801527a:	f042 0201 	orr.w	r2, r2, #1
 801527e:	711a      	strb	r2, [r3, #4]
 8015280:	2200      	movs	r2, #0
 8015282:	715a      	strb	r2, [r3, #5]
 8015284:	2200      	movs	r2, #0
 8015286:	719a      	strb	r2, [r3, #6]
 8015288:	2200      	movs	r2, #0
 801528a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015292:	f003 fc45 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015296:	f003 fc2b 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801529a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	b2db      	uxtb	r3, r3
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3718      	adds	r7, #24
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	200275a8 	.word	0x200275a8

080152b0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80152b8:	f003 fc70 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80152bc:	f003 fc0c 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80152c0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	f062 0264 	orn	r2, r2, #100	; 0x64
 80152ca:	701a      	strb	r2, [r3, #0]
 80152cc:	2200      	movs	r2, #0
 80152ce:	705a      	strb	r2, [r3, #1]
 80152d0:	2200      	movs	r2, #0
 80152d2:	709a      	strb	r2, [r3, #2]
 80152d4:	2200      	movs	r2, #0
 80152d6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	2200      	movs	r2, #0
 80152dc:	711a      	strb	r2, [r3, #4]
 80152de:	2200      	movs	r2, #0
 80152e0:	715a      	strb	r2, [r3, #5]
 80152e2:	2200      	movs	r2, #0
 80152e4:	719a      	strb	r2, [r3, #6]
 80152e6:	2200      	movs	r2, #0
 80152e8:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80152ea:	f003 fc19 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80152ee:	f003 fbff 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80152f2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	b2db      	uxtb	r3, r3
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	460b      	mov	r3, r1
 801530c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801530e:	f003 fc45 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015312:	f003 fbe1 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015316:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2200      	movs	r2, #0
 801531c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8015320:	701a      	strb	r2, [r3, #0]
 8015322:	2200      	movs	r2, #0
 8015324:	705a      	strb	r2, [r3, #1]
 8015326:	2200      	movs	r2, #0
 8015328:	709a      	strb	r2, [r3, #2]
 801532a:	2200      	movs	r2, #0
 801532c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2200      	movs	r2, #0
 8015332:	f042 0201 	orr.w	r2, r2, #1
 8015336:	711a      	strb	r2, [r3, #4]
 8015338:	2200      	movs	r2, #0
 801533a:	715a      	strb	r2, [r3, #5]
 801533c:	2200      	movs	r2, #0
 801533e:	719a      	strb	r2, [r3, #6]
 8015340:	2200      	movs	r2, #0
 8015342:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8015344:	78fa      	ldrb	r2, [r7, #3]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801534a:	f003 fbe9 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801534e:	f003 fbcf 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015352:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	689b      	ldr	r3, [r3, #8]
 8015358:	b2db      	uxtb	r3, r3
}
 801535a:	4618      	mov	r0, r3
 801535c:	3710      	adds	r7, #16
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}

08015362 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8015362:	b580      	push	{r7, lr}
 8015364:	b084      	sub	sp, #16
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
 801536a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801536c:	f003 fc16 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015370:	f003 fbb2 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015374:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2200      	movs	r2, #0
 801537a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 801537e:	701a      	strb	r2, [r3, #0]
 8015380:	2200      	movs	r2, #0
 8015382:	705a      	strb	r2, [r3, #1]
 8015384:	2200      	movs	r2, #0
 8015386:	709a      	strb	r2, [r3, #2]
 8015388:	2200      	movs	r2, #0
 801538a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2200      	movs	r2, #0
 8015390:	f042 0202 	orr.w	r2, r2, #2
 8015394:	711a      	strb	r2, [r3, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	715a      	strb	r2, [r3, #5]
 801539a:	2200      	movs	r2, #0
 801539c:	719a      	strb	r2, [r3, #6]
 801539e:	2200      	movs	r2, #0
 80153a0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 80153a2:	687a      	ldr	r2, [r7, #4]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 80153a8:	683a      	ldr	r2, [r7, #0]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80153ae:	f003 fbb7 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80153b2:	f003 fb9d 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80153b6:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	689b      	ldr	r3, [r3, #8]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	bf14      	ite	ne
 80153c0:	2301      	movne	r3, #1
 80153c2:	2300      	moveq	r3, #0
 80153c4:	b2db      	uxtb	r3, r3
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3710      	adds	r7, #16
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}

080153ce <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b084      	sub	sp, #16
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
 80153d6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80153d8:	f003 fbe0 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80153dc:	f003 fb7c 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80153e0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2200      	movs	r2, #0
 80153e6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80153ea:	701a      	strb	r2, [r3, #0]
 80153ec:	2200      	movs	r2, #0
 80153ee:	705a      	strb	r2, [r3, #1]
 80153f0:	2200      	movs	r2, #0
 80153f2:	709a      	strb	r2, [r3, #2]
 80153f4:	2200      	movs	r2, #0
 80153f6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f042 0202 	orr.w	r2, r2, #2
 8015400:	711a      	strb	r2, [r3, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	715a      	strb	r2, [r3, #5]
 8015406:	2200      	movs	r2, #0
 8015408:	719a      	strb	r2, [r3, #6]
 801540a:	2200      	movs	r2, #0
 801540c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8015414:	683a      	ldr	r2, [r7, #0]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801541a:	f003 fb81 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801541e:	f003 fb67 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015422:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	689b      	ldr	r3, [r3, #8]
 8015428:	b2db      	uxtb	r3, r3
}
 801542a:	4618      	mov	r0, r3
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b084      	sub	sp, #16
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	460b      	mov	r3, r1
 801543c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801543e:	f003 fbad 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015442:	f003 fb49 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015446:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2200      	movs	r2, #0
 801544c:	f042 0208 	orr.w	r2, r2, #8
 8015450:	701a      	strb	r2, [r3, #0]
 8015452:	2200      	movs	r2, #0
 8015454:	705a      	strb	r2, [r3, #1]
 8015456:	2200      	movs	r2, #0
 8015458:	709a      	strb	r2, [r3, #2]
 801545a:	2200      	movs	r2, #0
 801545c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	2200      	movs	r2, #0
 8015462:	f042 0201 	orr.w	r2, r2, #1
 8015466:	711a      	strb	r2, [r3, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	715a      	strb	r2, [r3, #5]
 801546c:	2200      	movs	r2, #0
 801546e:	719a      	strb	r2, [r3, #6]
 8015470:	2200      	movs	r2, #0
 8015472:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8015474:	78fa      	ldrb	r2, [r7, #3]
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801547a:	f003 fb51 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801547e:	f003 fb37 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015482:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	b2db      	uxtb	r3, r3
}
 801548a:	4618      	mov	r0, r3
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b084      	sub	sp, #16
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
 801549a:	460b      	mov	r3, r1
 801549c:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 801549e:	f003 fb7d 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154a2:	f003 fb19 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80154a6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f042 020f 	orr.w	r2, r2, #15
 80154b0:	701a      	strb	r2, [r3, #0]
 80154b2:	2200      	movs	r2, #0
 80154b4:	705a      	strb	r2, [r3, #1]
 80154b6:	2200      	movs	r2, #0
 80154b8:	709a      	strb	r2, [r3, #2]
 80154ba:	2200      	movs	r2, #0
 80154bc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f042 0201 	orr.w	r2, r2, #1
 80154c6:	711a      	strb	r2, [r3, #4]
 80154c8:	2200      	movs	r2, #0
 80154ca:	715a      	strb	r2, [r3, #5]
 80154cc:	2200      	movs	r2, #0
 80154ce:	719a      	strb	r2, [r3, #6]
 80154d0:	2200      	movs	r2, #0
 80154d2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80154d4:	887a      	ldrh	r2, [r7, #2]
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80154da:	f003 fb21 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80154de:	f003 fb07 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80154e2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	b2db      	uxtb	r3, r3
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b084      	sub	sp, #16
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 80154fa:	f003 fb4f 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80154fe:	f003 faeb 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015502:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	2200      	movs	r2, #0
 8015508:	f062 0246 	orn	r2, r2, #70	; 0x46
 801550c:	701a      	strb	r2, [r3, #0]
 801550e:	2200      	movs	r2, #0
 8015510:	705a      	strb	r2, [r3, #1]
 8015512:	2200      	movs	r2, #0
 8015514:	709a      	strb	r2, [r3, #2]
 8015516:	2200      	movs	r2, #0
 8015518:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2200      	movs	r2, #0
 801551e:	f042 0201 	orr.w	r2, r2, #1
 8015522:	711a      	strb	r2, [r3, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	715a      	strb	r2, [r3, #5]
 8015528:	2200      	movs	r2, #0
 801552a:	719a      	strb	r2, [r3, #6]
 801552c:	2200      	movs	r2, #0
 801552e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015536:	f003 faf3 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801553a:	f003 fad9 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801553e:	60f8      	str	r0, [r7, #12]
}
 8015540:	bf00      	nop
 8015542:	3710      	adds	r7, #16
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8015550:	f003 fb24 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015554:	f003 fac0 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015558:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	2200      	movs	r2, #0
 801555e:	f062 0243 	orn	r2, r2, #67	; 0x43
 8015562:	701a      	strb	r2, [r3, #0]
 8015564:	2200      	movs	r2, #0
 8015566:	705a      	strb	r2, [r3, #1]
 8015568:	2200      	movs	r2, #0
 801556a:	709a      	strb	r2, [r3, #2]
 801556c:	2200      	movs	r2, #0
 801556e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2200      	movs	r2, #0
 8015574:	f042 0201 	orr.w	r2, r2, #1
 8015578:	711a      	strb	r2, [r3, #4]
 801557a:	2200      	movs	r2, #0
 801557c:	715a      	strb	r2, [r3, #5]
 801557e:	2200      	movs	r2, #0
 8015580:	719a      	strb	r2, [r3, #6]
 8015582:	2200      	movs	r2, #0
 8015584:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801558c:	f003 fac8 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015590:	f003 faae 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015594:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	689b      	ldr	r3, [r3, #8]
 801559a:	b29b      	uxth	r3, r3
}
 801559c:	4618      	mov	r0, r3
 801559e:	3710      	adds	r7, #16
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b086      	sub	sp, #24
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	4613      	mov	r3, r2
 80155b0:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 80155b2:	f003 faf3 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80155b6:	f003 fa8f 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80155ba:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	2200      	movs	r2, #0
 80155c0:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80155c4:	701a      	strb	r2, [r3, #0]
 80155c6:	2200      	movs	r2, #0
 80155c8:	705a      	strb	r2, [r3, #1]
 80155ca:	2200      	movs	r2, #0
 80155cc:	709a      	strb	r2, [r3, #2]
 80155ce:	2200      	movs	r2, #0
 80155d0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	2200      	movs	r2, #0
 80155d6:	f042 0203 	orr.w	r2, r2, #3
 80155da:	711a      	strb	r2, [r3, #4]
 80155dc:	2200      	movs	r2, #0
 80155de:	715a      	strb	r2, [r3, #5]
 80155e0:	2200      	movs	r2, #0
 80155e2:	719a      	strb	r2, [r3, #6]
 80155e4:	2200      	movs	r2, #0
 80155e6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80155e8:	68fa      	ldr	r2, [r7, #12]
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 80155ee:	68ba      	ldr	r2, [r7, #8]
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 80155f4:	88fa      	ldrh	r2, [r7, #6]
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80155fa:	f003 fa91 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80155fe:	f003 fa77 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015602:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	b2db      	uxtb	r3, r3
}
 801560a:	4618      	mov	r0, r3
 801560c:	3718      	adds	r7, #24
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b086      	sub	sp, #24
 8015616:	af00      	add	r7, sp, #0
 8015618:	60f8      	str	r0, [r7, #12]
 801561a:	607a      	str	r2, [r7, #4]
 801561c:	461a      	mov	r2, r3
 801561e:	460b      	mov	r3, r1
 8015620:	817b      	strh	r3, [r7, #10]
 8015622:	4613      	mov	r3, r2
 8015624:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8015626:	f003 fab9 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801562a:	f003 fa55 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 801562e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	2200      	movs	r2, #0
 8015634:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8015638:	701a      	strb	r2, [r3, #0]
 801563a:	2200      	movs	r2, #0
 801563c:	705a      	strb	r2, [r3, #1]
 801563e:	2200      	movs	r2, #0
 8015640:	709a      	strb	r2, [r3, #2]
 8015642:	2200      	movs	r2, #0
 8015644:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	2200      	movs	r2, #0
 801564a:	f042 0204 	orr.w	r2, r2, #4
 801564e:	711a      	strb	r2, [r3, #4]
 8015650:	2200      	movs	r2, #0
 8015652:	715a      	strb	r2, [r3, #5]
 8015654:	2200      	movs	r2, #0
 8015656:	719a      	strb	r2, [r3, #6]
 8015658:	2200      	movs	r2, #0
 801565a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801565c:	68fa      	ldr	r2, [r7, #12]
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8015662:	897a      	ldrh	r2, [r7, #10]
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801566e:	893a      	ldrh	r2, [r7, #8]
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8015674:	f003 fa54 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015678:	f003 fa3a 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801567c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	689b      	ldr	r3, [r3, #8]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3718      	adds	r7, #24
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}
	...

0801568c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 801568c:	b5b0      	push	{r4, r5, r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8015692:	2300      	movs	r3, #0
 8015694:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8015696:	f003 fa37 	bl	8018b08 <THREAD_Get_NotificationPayloadBuffer>
 801569a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	3b01      	subs	r3, #1
 80156a2:	2b14      	cmp	r3, #20
 80156a4:	f200 8172 	bhi.w	801598c <OpenThread_CallBack_Processing+0x300>
 80156a8:	a201      	add	r2, pc, #4	; (adr r2, 80156b0 <OpenThread_CallBack_Processing+0x24>)
 80156aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ae:	bf00      	nop
 80156b0:	08015705 	.word	0x08015705
 80156b4:	08015721 	.word	0x08015721
 80156b8:	0801574d 	.word	0x0801574d
 80156bc:	08015781 	.word	0x08015781
 80156c0:	0801578d 	.word	0x0801578d
 80156c4:	080157ab 	.word	0x080157ab
 80156c8:	080157c9 	.word	0x080157c9
 80156cc:	080157e7 	.word	0x080157e7
 80156d0:	08015805 	.word	0x08015805
 80156d4:	08015823 	.word	0x08015823
 80156d8:	08015845 	.word	0x08015845
 80156dc:	08015863 	.word	0x08015863
 80156e0:	0801598d 	.word	0x0801598d
 80156e4:	08015889 	.word	0x08015889
 80156e8:	080158bd 	.word	0x080158bd
 80156ec:	080158e5 	.word	0x080158e5
 80156f0:	08015903 	.word	0x08015903
 80156f4:	08015927 	.word	0x08015927
 80156f8:	0801594f 	.word	0x0801594f
 80156fc:	0801598d 	.word	0x0801598d
 8015700:	0801596d 	.word	0x0801596d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8015704:	4ba3      	ldr	r3, [pc, #652]	; (8015994 <OpenThread_CallBack_Processing+0x308>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	f000 8167 	beq.w	80159dc <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801570e:	4ba1      	ldr	r3, [pc, #644]	; (8015994 <OpenThread_CallBack_Processing+0x308>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801571a:	4611      	mov	r1, r2
 801571c:	4798      	blx	r3
        }
        break;
 801571e:	e15d      	b.n	80159dc <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	689b      	ldr	r3, [r3, #8]
 8015724:	461a      	mov	r2, r3
 8015726:	4b9c      	ldr	r3, [pc, #624]	; (8015998 <OpenThread_CallBack_Processing+0x30c>)
 8015728:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801572a:	4b9b      	ldr	r3, [pc, #620]	; (8015998 <OpenThread_CallBack_Processing+0x30c>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	f000 8156 	beq.w	80159e0 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015734:	4b98      	ldr	r3, [pc, #608]	; (8015998 <OpenThread_CallBack_Processing+0x30c>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	683a      	ldr	r2, [r7, #0]
 801573a:	68d2      	ldr	r2, [r2, #12]
 801573c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801573e:	683a      	ldr	r2, [r7, #0]
 8015740:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015742:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8015744:	683a      	ldr	r2, [r7, #0]
 8015746:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015748:	4798      	blx	r3
        }
        break;
 801574a:	e149      	b.n	80159e0 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	689b      	ldr	r3, [r3, #8]
 8015750:	461a      	mov	r2, r3
 8015752:	4b92      	ldr	r3, [pc, #584]	; (801599c <OpenThread_CallBack_Processing+0x310>)
 8015754:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8015756:	4b91      	ldr	r3, [pc, #580]	; (801599c <OpenThread_CallBack_Processing+0x310>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 8142 	beq.w	80159e4 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015760:	4b8e      	ldr	r3, [pc, #568]	; (801599c <OpenThread_CallBack_Processing+0x310>)
 8015762:	681c      	ldr	r4, [r3, #0]
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801576e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8015774:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801577a:	b2db      	uxtb	r3, r3
 801577c:	47a0      	blx	r4
        }
        break;
 801577e:	e131      	b.n	80159e4 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8015780:	2001      	movs	r0, #1
 8015782:	f000 f99b 	bl	8015abc <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8015786:	f7f2 fe42 	bl	800840e <HAL_NVIC_SystemReset>
        break;
 801578a:	e14a      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 801578c:	4b84      	ldr	r3, [pc, #528]	; (80159a0 <OpenThread_CallBack_Processing+0x314>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 8129 	beq.w	80159e8 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8015796:	4b82      	ldr	r3, [pc, #520]	; (80159a0 <OpenThread_CallBack_Processing+0x314>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	6892      	ldr	r2, [r2, #8]
 801579e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80157a0:	683a      	ldr	r2, [r7, #0]
 80157a2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80157a4:	4611      	mov	r1, r2
 80157a6:	4798      	blx	r3
        }
        break;
 80157a8:	e11e      	b.n	80159e8 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 80157aa:	4b7e      	ldr	r3, [pc, #504]	; (80159a4 <OpenThread_CallBack_Processing+0x318>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f000 811c 	beq.w	80159ec <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80157b4:	4b7b      	ldr	r3, [pc, #492]	; (80159a4 <OpenThread_CallBack_Processing+0x318>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	683a      	ldr	r2, [r7, #0]
 80157ba:	6892      	ldr	r2, [r2, #8]
 80157bc:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80157be:	683a      	ldr	r2, [r7, #0]
 80157c0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80157c2:	2000      	movs	r0, #0
 80157c4:	4798      	blx	r3
        }
        break;
 80157c6:	e111      	b.n	80159ec <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80157c8:	4b77      	ldr	r3, [pc, #476]	; (80159a8 <OpenThread_CallBack_Processing+0x31c>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	f000 810f 	beq.w	80159f0 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80157d2:	4b75      	ldr	r3, [pc, #468]	; (80159a8 <OpenThread_CallBack_Processing+0x31c>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	6892      	ldr	r2, [r2, #8]
 80157da:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80157dc:	683a      	ldr	r2, [r7, #0]
 80157de:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80157e0:	4611      	mov	r1, r2
 80157e2:	4798      	blx	r3
        }
        break;
 80157e4:	e104      	b.n	80159f0 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 80157e6:	4b71      	ldr	r3, [pc, #452]	; (80159ac <OpenThread_CallBack_Processing+0x320>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f000 8102 	beq.w	80159f4 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80157f0:	4b6e      	ldr	r3, [pc, #440]	; (80159ac <OpenThread_CallBack_Processing+0x320>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	683a      	ldr	r2, [r7, #0]
 80157f6:	6892      	ldr	r2, [r2, #8]
 80157f8:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 80157fe:	4611      	mov	r1, r2
 8015800:	4798      	blx	r3
        }
        break;
 8015802:	e0f7      	b.n	80159f4 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8015804:	4b6a      	ldr	r3, [pc, #424]	; (80159b0 <OpenThread_CallBack_Processing+0x324>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	f000 80f5 	beq.w	80159f8 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801580e:	4b68      	ldr	r3, [pc, #416]	; (80159b0 <OpenThread_CallBack_Processing+0x324>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	6892      	ldr	r2, [r2, #8]
 8015816:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8015818:	683a      	ldr	r2, [r7, #0]
 801581a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801581c:	4611      	mov	r1, r2
 801581e:	4798      	blx	r3
        }
        break;
 8015820:	e0ea      	b.n	80159f8 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8015822:	4b64      	ldr	r3, [pc, #400]	; (80159b4 <OpenThread_CallBack_Processing+0x328>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	f000 80e8 	beq.w	80159fc <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801582c:	4b61      	ldr	r3, [pc, #388]	; (80159b4 <OpenThread_CallBack_Processing+0x328>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	6892      	ldr	r2, [r2, #8]
 8015834:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8015836:	683a      	ldr	r2, [r7, #0]
 8015838:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801583a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801583c:	683a      	ldr	r2, [r7, #0]
 801583e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8015840:	4798      	blx	r3
        }
        break;
 8015842:	e0db      	b.n	80159fc <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8015844:	4b5c      	ldr	r3, [pc, #368]	; (80159b8 <OpenThread_CallBack_Processing+0x32c>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	f000 80d9 	beq.w	8015a00 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801584e:	4b5a      	ldr	r3, [pc, #360]	; (80159b8 <OpenThread_CallBack_Processing+0x32c>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	6892      	ldr	r2, [r2, #8]
 8015856:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8015858:	683a      	ldr	r2, [r7, #0]
 801585a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801585c:	4611      	mov	r1, r2
 801585e:	4798      	blx	r3
        }
        break;
 8015860:	e0ce      	b.n	8015a00 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8015862:	4b56      	ldr	r3, [pc, #344]	; (80159bc <OpenThread_CallBack_Processing+0x330>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	f000 80cc 	beq.w	8015a04 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801586c:	4b53      	ldr	r3, [pc, #332]	; (80159bc <OpenThread_CallBack_Processing+0x330>)
 801586e:	681c      	ldr	r4, [r3, #0]
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015878:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801587e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8015884:	47a0      	blx	r4
        }
        break;
 8015886:	e0bd      	b.n	8015a04 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8015888:	4b4d      	ldr	r3, [pc, #308]	; (80159c0 <OpenThread_CallBack_Processing+0x334>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	f000 80bb 	beq.w	8015a08 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8015892:	4b4b      	ldr	r3, [pc, #300]	; (80159c0 <OpenThread_CallBack_Processing+0x334>)
 8015894:	681c      	ldr	r4, [r3, #0]
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	689b      	ldr	r3, [r3, #8]
 801589a:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158a0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158a6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	9300      	str	r3, [sp, #0]
 80158b4:	4613      	mov	r3, r2
 80158b6:	462a      	mov	r2, r5
 80158b8:	47a0      	blx	r4
        }
        break;
 80158ba:	e0a5      	b.n	8015a08 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80158bc:	4b41      	ldr	r3, [pc, #260]	; (80159c4 <OpenThread_CallBack_Processing+0x338>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f000 80a3 	beq.w	8015a0c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158c6:	4b3f      	ldr	r3, [pc, #252]	; (80159c4 <OpenThread_CallBack_Processing+0x338>)
 80158c8:	681c      	ldr	r4, [r3, #0]
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	689b      	ldr	r3, [r3, #8]
 80158ce:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158d4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158da:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80158e0:	47a0      	blx	r4
        }
        break;
 80158e2:	e093      	b.n	8015a0c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 80158e4:	4b38      	ldr	r3, [pc, #224]	; (80159c8 <OpenThread_CallBack_Processing+0x33c>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 8091 	beq.w	8015a10 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 80158ee:	4b36      	ldr	r3, [pc, #216]	; (80159c8 <OpenThread_CallBack_Processing+0x33c>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	683a      	ldr	r2, [r7, #0]
 80158f4:	6892      	ldr	r2, [r2, #8]
 80158f6:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 80158f8:	683a      	ldr	r2, [r7, #0]
 80158fa:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 80158fc:	4611      	mov	r1, r2
 80158fe:	4798      	blx	r3
        }
        break;
 8015900:	e086      	b.n	8015a10 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8015902:	4b32      	ldr	r3, [pc, #200]	; (80159cc <OpenThread_CallBack_Processing+0x340>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	f000 8084 	beq.w	8015a14 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801590c:	4b2f      	ldr	r3, [pc, #188]	; (80159cc <OpenThread_CallBack_Processing+0x340>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	683a      	ldr	r2, [r7, #0]
 8015912:	6892      	ldr	r2, [r2, #8]
 8015914:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8015916:	683a      	ldr	r2, [r7, #0]
 8015918:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801591a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801591c:	683a      	ldr	r2, [r7, #0]
 801591e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8015920:	b2d2      	uxtb	r2, r2
 8015922:	4798      	blx	r3
        }
        break;
 8015924:	e076      	b.n	8015a14 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8015926:	4b2a      	ldr	r3, [pc, #168]	; (80159d0 <OpenThread_CallBack_Processing+0x344>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d074      	beq.n	8015a18 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801592e:	4b28      	ldr	r3, [pc, #160]	; (80159d0 <OpenThread_CallBack_Processing+0x344>)
 8015930:	681c      	ldr	r4, [r3, #0]
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801593c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015942:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8015948:	b2db      	uxtb	r3, r3
 801594a:	47a0      	blx	r4
        }
        break;
 801594c:	e064      	b.n	8015a18 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801594e:	4b21      	ldr	r3, [pc, #132]	; (80159d4 <OpenThread_CallBack_Processing+0x348>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d062      	beq.n	8015a1c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015956:	4b1f      	ldr	r3, [pc, #124]	; (80159d4 <OpenThread_CallBack_Processing+0x348>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	683a      	ldr	r2, [r7, #0]
 801595c:	6892      	ldr	r2, [r2, #8]
 801595e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8015960:	683a      	ldr	r2, [r7, #0]
 8015962:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8015964:	b252      	sxtb	r2, r2
 8015966:	4611      	mov	r1, r2
 8015968:	4798      	blx	r3
        }
        break;
 801596a:	e057      	b.n	8015a1c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801596c:	4b1a      	ldr	r3, [pc, #104]	; (80159d8 <OpenThread_CallBack_Processing+0x34c>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d055      	beq.n	8015a20 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015974:	4b18      	ldr	r3, [pc, #96]	; (80159d8 <OpenThread_CallBack_Processing+0x34c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	6892      	ldr	r2, [r2, #8]
 801597c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 801597e:	683a      	ldr	r2, [r7, #0]
 8015980:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015982:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 8015984:	683a      	ldr	r2, [r7, #0]
 8015986:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 8015988:	4798      	blx	r3
        }
        break;
 801598a:	e049      	b.n	8015a20 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 801598c:	2301      	movs	r3, #1
 801598e:	71fb      	strb	r3, [r7, #7]
        break;
 8015990:	e047      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
 8015992:	bf00      	nop
 8015994:	200275a8 	.word	0x200275a8
 8015998:	200275e8 	.word	0x200275e8
 801599c:	200275ec 	.word	0x200275ec
 80159a0:	200275b0 	.word	0x200275b0
 80159a4:	200275ac 	.word	0x200275ac
 80159a8:	200275b4 	.word	0x200275b4
 80159ac:	200275b8 	.word	0x200275b8
 80159b0:	200275bc 	.word	0x200275bc
 80159b4:	200275c0 	.word	0x200275c0
 80159b8:	200275c4 	.word	0x200275c4
 80159bc:	200275c8 	.word	0x200275c8
 80159c0:	200275cc 	.word	0x200275cc
 80159c4:	200275d0 	.word	0x200275d0
 80159c8:	200275d4 	.word	0x200275d4
 80159cc:	200275d8 	.word	0x200275d8
 80159d0:	200275dc 	.word	0x200275dc
 80159d4:	200275e0 	.word	0x200275e0
 80159d8:	200275e4 	.word	0x200275e4
        break;
 80159dc:	bf00      	nop
 80159de:	e020      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159e0:	bf00      	nop
 80159e2:	e01e      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159e4:	bf00      	nop
 80159e6:	e01c      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159e8:	bf00      	nop
 80159ea:	e01a      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159ec:	bf00      	nop
 80159ee:	e018      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159f0:	bf00      	nop
 80159f2:	e016      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159f4:	bf00      	nop
 80159f6:	e014      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159f8:	bf00      	nop
 80159fa:	e012      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 80159fc:	bf00      	nop
 80159fe:	e010      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a00:	bf00      	nop
 8015a02:	e00e      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a04:	bf00      	nop
 8015a06:	e00c      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a08:	bf00      	nop
 8015a0a:	e00a      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a0c:	bf00      	nop
 8015a0e:	e008      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a10:	bf00      	nop
 8015a12:	e006      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a14:	bf00      	nop
 8015a16:	e004      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a18:	bf00      	nop
 8015a1a:	e002      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a1c:	bf00      	nop
 8015a1e:	e000      	b.n	8015a22 <OpenThread_CallBack_Processing+0x396>
        break;
 8015a20:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8015a22:	f000 fcc1 	bl	80163a8 <TL_THREAD_SendAck>
    return status;
 8015a26:	79fb      	ldrb	r3, [r7, #7]

}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bdb0      	pop	{r4, r5, r7, pc}

08015a30 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	460b      	mov	r3, r1
 8015a3a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8015a3c:	f003 f8ae 	bl	8018b9c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015a40:	f003 f84a 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015a44:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8015a4e:	701a      	strb	r2, [r3, #0]
 8015a50:	2200      	movs	r2, #0
 8015a52:	f042 0201 	orr.w	r2, r2, #1
 8015a56:	705a      	strb	r2, [r3, #1]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	709a      	strb	r2, [r3, #2]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	2200      	movs	r2, #0
 8015a64:	f042 0201 	orr.w	r2, r2, #1
 8015a68:	711a      	strb	r2, [r3, #4]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	715a      	strb	r2, [r3, #5]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	719a      	strb	r2, [r3, #6]
 8015a72:	2200      	movs	r2, #0
 8015a74:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8015a76:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8015a7e:	f003 f84f 	bl	8018b20 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8015a82:	f003 f835 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8015a86:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	b2db      	uxtb	r3, r3
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b086      	sub	sp, #24
 8015a9a:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015a9c:	1d3b      	adds	r3, r7, #4
 8015a9e:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8015aaa:	f000 f915 	bl	8015cd8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	330b      	adds	r3, #11
 8015ab2:	78db      	ldrb	r3, [r3, #3]
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3718      	adds	r7, #24
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b088      	sub	sp, #32
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015ac6:	f107 030c 	add.w	r3, r7, #12
 8015aca:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8015acc:	79fb      	ldrb	r3, [r7, #7]
 8015ace:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8015ad0:	f107 020c 	add.w	r2, r7, #12
 8015ad4:	69fb      	ldr	r3, [r7, #28]
 8015ad6:	2101      	movs	r1, #1
 8015ad8:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8015adc:	f000 f8fc 	bl	8015cd8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	330b      	adds	r3, #11
 8015ae4:	78db      	ldrb	r3, [r3, #3]
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3720      	adds	r7, #32
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}
	...

08015af0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015af0:	b480      	push	{r7}
 8015af2:	b089      	sub	sp, #36	; 0x24
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 8015afc:	2300      	movs	r3, #0
 8015afe:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8015b00:	2300      	movs	r3, #0
 8015b02:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8015b04:	2300      	movs	r3, #0
 8015b06:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015b0c:	4b3c      	ldr	r3, [pc, #240]	; (8015c00 <SHCI_GetWirelessFwInfo+0x110>)
 8015b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b14:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015b1e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015b22:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	691b      	ldr	r3, [r3, #16]
 8015b2a:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	0e1b      	lsrs	r3, r3, #24
 8015b30:	b2da      	uxtb	r2, r3
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	0c1b      	lsrs	r3, r3, #16
 8015b3a:	b2da      	uxtb	r2, r3
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	0a1b      	lsrs	r3, r3, #8
 8015b44:	b2da      	uxtb	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	091b      	lsrs	r3, r3, #4
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	f003 030f 	and.w	r3, r3, #15
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 030f 	and.w	r3, r3, #15
 8015b62:	b2da      	uxtb	r2, r3
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015b68:	69bb      	ldr	r3, [r7, #24]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	695b      	ldr	r3, [r3, #20]
 8015b6e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015b70:	693b      	ldr	r3, [r7, #16]
 8015b72:	0e1b      	lsrs	r3, r3, #24
 8015b74:	b2da      	uxtb	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	0c1b      	lsrs	r3, r3, #16
 8015b7e:	b2da      	uxtb	r2, r3
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	0a1b      	lsrs	r3, r3, #8
 8015b88:	b2da      	uxtb	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	699b      	ldr	r3, [r3, #24]
 8015b9c:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	b2da      	uxtb	r2, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015ba6:	69bb      	ldr	r3, [r7, #24]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	0e1b      	lsrs	r3, r3, #24
 8015bb2:	b2da      	uxtb	r2, r3
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	0c1b      	lsrs	r3, r3, #16
 8015bbc:	b2da      	uxtb	r2, r3
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	0a1b      	lsrs	r3, r3, #8
 8015bc6:	b2da      	uxtb	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015bcc:	69bb      	ldr	r3, [r7, #24]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	689b      	ldr	r3, [r3, #8]
 8015bd2:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	0e1b      	lsrs	r3, r3, #24
 8015bd8:	b2da      	uxtb	r2, r3
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	0c1b      	lsrs	r3, r3, #16
 8015be2:	b2da      	uxtb	r2, r3
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	b2da      	uxtb	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3724      	adds	r7, #36	; 0x24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr
 8015bfe:	bf00      	nop
 8015c00:	58004000 	.word	0x58004000

08015c04 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	4a08      	ldr	r2, [pc, #32]	; (8015c34 <shci_init+0x30>)
 8015c14:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015c16:	4a08      	ldr	r2, [pc, #32]	; (8015c38 <shci_init+0x34>)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015c1c:	4806      	ldr	r0, [pc, #24]	; (8015c38 <shci_init+0x34>)
 8015c1e:	f000 f911 	bl	8015e44 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f000 f894 	bl	8015d54 <TlInit>

  return;
 8015c2c:	bf00      	nop
}
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	20027610 	.word	0x20027610
 8015c38:	200275f0 	.word	0x200275f0

08015c3c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015c42:	4822      	ldr	r0, [pc, #136]	; (8015ccc <shci_user_evt_proc+0x90>)
 8015c44:	f000 f922 	bl	8015e8c <LST_is_empty>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d12b      	bne.n	8015ca6 <shci_user_evt_proc+0x6a>
 8015c4e:	4b20      	ldr	r3, [pc, #128]	; (8015cd0 <shci_user_evt_proc+0x94>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d027      	beq.n	8015ca6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015c56:	f107 030c 	add.w	r3, r7, #12
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	481b      	ldr	r0, [pc, #108]	; (8015ccc <shci_user_evt_proc+0x90>)
 8015c5e:	f000 f99c 	bl	8015f9a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015c62:	4b1c      	ldr	r3, [pc, #112]	; (8015cd4 <shci_user_evt_proc+0x98>)
 8015c64:	69db      	ldr	r3, [r3, #28]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d00c      	beq.n	8015c84 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015c72:	4b18      	ldr	r3, [pc, #96]	; (8015cd4 <shci_user_evt_proc+0x98>)
 8015c74:	69db      	ldr	r3, [r3, #28]
 8015c76:	1d3a      	adds	r2, r7, #4
 8015c78:	4610      	mov	r0, r2
 8015c7a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015c7c:	793a      	ldrb	r2, [r7, #4]
 8015c7e:	4b14      	ldr	r3, [pc, #80]	; (8015cd0 <shci_user_evt_proc+0x94>)
 8015c80:	701a      	strb	r2, [r3, #0]
 8015c82:	e002      	b.n	8015c8a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015c84:	4b12      	ldr	r3, [pc, #72]	; (8015cd0 <shci_user_evt_proc+0x94>)
 8015c86:	2201      	movs	r2, #1
 8015c88:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015c8a:	4b11      	ldr	r3, [pc, #68]	; (8015cd0 <shci_user_evt_proc+0x94>)
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d004      	beq.n	8015c9c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f000 fc03 	bl	80164a0 <TL_MM_EvtDone>
 8015c9a:	e004      	b.n	8015ca6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	480a      	ldr	r0, [pc, #40]	; (8015ccc <shci_user_evt_proc+0x90>)
 8015ca2:	f000 f913 	bl	8015ecc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015ca6:	4809      	ldr	r0, [pc, #36]	; (8015ccc <shci_user_evt_proc+0x90>)
 8015ca8:	f000 f8f0 	bl	8015e8c <LST_is_empty>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d107      	bne.n	8015cc2 <shci_user_evt_proc+0x86>
 8015cb2:	4b07      	ldr	r3, [pc, #28]	; (8015cd0 <shci_user_evt_proc+0x94>)
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d003      	beq.n	8015cc2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015cba:	4804      	ldr	r0, [pc, #16]	; (8015ccc <shci_user_evt_proc+0x90>)
 8015cbc:	f7eb fa7a 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 8015cc0:	bf00      	nop
 8015cc2:	bf00      	nop
}
 8015cc4:	3710      	adds	r7, #16
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	20000370 	.word	0x20000370
 8015cd0:	20000380 	.word	0x20000380
 8015cd4:	200275f0 	.word	0x200275f0

08015cd8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60ba      	str	r2, [r7, #8]
 8015ce0:	607b      	str	r3, [r7, #4]
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	81fb      	strh	r3, [r7, #14]
 8015ce6:	460b      	mov	r3, r1
 8015ce8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015cea:	2000      	movs	r0, #0
 8015cec:	f000 f864 	bl	8015db8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015cf0:	4b16      	ldr	r3, [pc, #88]	; (8015d4c <shci_send+0x74>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	89fa      	ldrh	r2, [r7, #14]
 8015cf6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015cfa:	4b14      	ldr	r3, [pc, #80]	; (8015d4c <shci_send+0x74>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	7b7a      	ldrb	r2, [r7, #13]
 8015d00:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015d02:	4b12      	ldr	r3, [pc, #72]	; (8015d4c <shci_send+0x74>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	330c      	adds	r3, #12
 8015d08:	7b7a      	ldrb	r2, [r7, #13]
 8015d0a:	68b9      	ldr	r1, [r7, #8]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f004 fb87 	bl	801a420 <memcpy>

  shciContext.io.Send(0,0);
 8015d12:	4b0f      	ldr	r3, [pc, #60]	; (8015d50 <shci_send+0x78>)
 8015d14:	691b      	ldr	r3, [r3, #16]
 8015d16:	2100      	movs	r1, #0
 8015d18:	2000      	movs	r0, #0
 8015d1a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015d1c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015d20:	f7eb fa68 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f103 0008 	add.w	r0, r3, #8
 8015d2a:	4b08      	ldr	r3, [pc, #32]	; (8015d4c <shci_send+0x74>)
 8015d2c:	6819      	ldr	r1, [r3, #0]
 8015d2e:	4b07      	ldr	r3, [pc, #28]	; (8015d4c <shci_send+0x74>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	789b      	ldrb	r3, [r3, #2]
 8015d34:	3303      	adds	r3, #3
 8015d36:	461a      	mov	r2, r3
 8015d38:	f004 fb72 	bl	801a420 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015d3c:	2001      	movs	r0, #1
 8015d3e:	f000 f83b 	bl	8015db8 <Cmd_SetStatus>

  return;
 8015d42:	bf00      	nop
}
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	2000037c 	.word	0x2000037c
 8015d50:	200275f0 	.word	0x200275f0

08015d54 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b086      	sub	sp, #24
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015d5c:	4a10      	ldr	r2, [pc, #64]	; (8015da0 <TlInit+0x4c>)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8015d62:	4810      	ldr	r0, [pc, #64]	; (8015da4 <TlInit+0x50>)
 8015d64:	f000 f882 	bl	8015e6c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015d68:	2001      	movs	r0, #1
 8015d6a:	f000 f825 	bl	8015db8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015d6e:	4b0e      	ldr	r3, [pc, #56]	; (8015da8 <TlInit+0x54>)
 8015d70:	2201      	movs	r2, #1
 8015d72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8015d74:	4b0d      	ldr	r3, [pc, #52]	; (8015dac <TlInit+0x58>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d00c      	beq.n	8015d96 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8015d80:	4b0b      	ldr	r3, [pc, #44]	; (8015db0 <TlInit+0x5c>)
 8015d82:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8015d84:	4b0b      	ldr	r3, [pc, #44]	; (8015db4 <TlInit+0x60>)
 8015d86:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015d88:	4b08      	ldr	r3, [pc, #32]	; (8015dac <TlInit+0x58>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f107 020c 	add.w	r2, r7, #12
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
  }

  return;
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop
}
 8015d98:	3718      	adds	r7, #24
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	2000037c 	.word	0x2000037c
 8015da4:	20000370 	.word	0x20000370
 8015da8:	20000380 	.word	0x20000380
 8015dac:	200275f0 	.word	0x200275f0
 8015db0:	08015e09 	.word	0x08015e09
 8015db4:	08015e21 	.word	0x08015e21

08015db8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015dc2:	79fb      	ldrb	r3, [r7, #7]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d10b      	bne.n	8015de0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015dc8:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <Cmd_SetStatus+0x48>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d003      	beq.n	8015dd8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015dd0:	4b0b      	ldr	r3, [pc, #44]	; (8015e00 <Cmd_SetStatus+0x48>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015dd8:	4b0a      	ldr	r3, [pc, #40]	; (8015e04 <Cmd_SetStatus+0x4c>)
 8015dda:	2200      	movs	r2, #0
 8015ddc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015dde:	e00b      	b.n	8015df8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015de0:	4b08      	ldr	r3, [pc, #32]	; (8015e04 <Cmd_SetStatus+0x4c>)
 8015de2:	2201      	movs	r2, #1
 8015de4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015de6:	4b06      	ldr	r3, [pc, #24]	; (8015e00 <Cmd_SetStatus+0x48>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d004      	beq.n	8015df8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015dee:	4b04      	ldr	r3, [pc, #16]	; (8015e00 <Cmd_SetStatus+0x48>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2001      	movs	r0, #1
 8015df4:	4798      	blx	r3
  return;
 8015df6:	bf00      	nop
 8015df8:	bf00      	nop
}
 8015dfa:	3708      	adds	r7, #8
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	20027610 	.word	0x20027610
 8015e04:	20000378 	.word	0x20000378

08015e08 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015e10:	2000      	movs	r0, #0
 8015e12:	f7eb f9df 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8015e16:	bf00      	nop
}
 8015e18:	3708      	adds	r7, #8
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
	...

08015e20 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015e28:	6879      	ldr	r1, [r7, #4]
 8015e2a:	4805      	ldr	r0, [pc, #20]	; (8015e40 <TlUserEvtReceived+0x20>)
 8015e2c:	f000 f872 	bl	8015f14 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015e30:	4803      	ldr	r0, [pc, #12]	; (8015e40 <TlUserEvtReceived+0x20>)
 8015e32:	f7eb f9bf 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8015e36:	bf00      	nop
}
 8015e38:	3708      	adds	r7, #8
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	20000370 	.word	0x20000370

08015e44 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015e44:	b480      	push	{r7}
 8015e46:	b083      	sub	sp, #12
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	4a05      	ldr	r2, [pc, #20]	; (8015e64 <shci_register_io_bus+0x20>)
 8015e50:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	4a04      	ldr	r2, [pc, #16]	; (8015e68 <shci_register_io_bus+0x24>)
 8015e56:	611a      	str	r2, [r3, #16]

  return;
 8015e58:	bf00      	nop
}
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr
 8015e64:	08016265 	.word	0x08016265
 8015e68:	080162b9 	.word	0x080162b9

08015e6c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	605a      	str	r2, [r3, #4]
}
 8015e80:	bf00      	nop
 8015e82:	370c      	adds	r7, #12
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr

08015e8c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b087      	sub	sp, #28
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e94:	f3ef 8310 	mrs	r3, PRIMASK
 8015e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e9e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	687a      	ldr	r2, [r7, #4]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d102      	bne.n	8015eb0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8015eaa:	2301      	movs	r3, #1
 8015eac:	75fb      	strb	r3, [r7, #23]
 8015eae:	e001      	b.n	8015eb4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	75fb      	strb	r3, [r7, #23]
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8015ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	371c      	adds	r7, #28
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr

08015ecc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b087      	sub	sp, #28
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8015eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8015edc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ee0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681a      	ldr	r2, [r3, #0]
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	683a      	ldr	r2, [r7, #0]
 8015ef4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	683a      	ldr	r2, [r7, #0]
 8015efc:	605a      	str	r2, [r3, #4]
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015f08:	bf00      	nop
 8015f0a:	371c      	adds	r7, #28
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b087      	sub	sp, #28
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8015f22:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f24:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f28:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	685a      	ldr	r2, [r3, #4]
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	683a      	ldr	r2, [r7, #0]
 8015f3c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	683a      	ldr	r2, [r7, #0]
 8015f44:	601a      	str	r2, [r3, #0]
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f4a:	693b      	ldr	r3, [r7, #16]
 8015f4c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015f50:	bf00      	nop
 8015f52:	371c      	adds	r7, #28
 8015f54:	46bd      	mov	sp, r7
 8015f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5a:	4770      	bx	lr

08015f5c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b087      	sub	sp, #28
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f64:	f3ef 8310 	mrs	r3, PRIMASK
 8015f68:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015f6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f6e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	6812      	ldr	r2, [r2, #0]
 8015f78:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	6852      	ldr	r2, [r2, #4]
 8015f82:	605a      	str	r2, [r3, #4]
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015f8e:	bf00      	nop
 8015f90:	371c      	adds	r7, #28
 8015f92:	46bd      	mov	sp, r7
 8015f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f98:	4770      	bx	lr

08015f9a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8015f9a:	b580      	push	{r7, lr}
 8015f9c:	b086      	sub	sp, #24
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	6078      	str	r0, [r7, #4]
 8015fa2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015faa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015fac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fae:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7ff ffcd 	bl	8015f5c <LST_remove_node>
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015fcc:	bf00      	nop
 8015fce:	3718      	adds	r7, #24
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}

08015fd4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	460b      	mov	r3, r1
 8015fde:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8015fe0:	f002 fddc 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8015fe4:	f002 fd78 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8015fe8:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	2200      	movs	r2, #0
 8015fee:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8015ff2:	701a      	strb	r2, [r3, #0]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	705a      	strb	r2, [r3, #1]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	709a      	strb	r2, [r3, #2]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2200      	movs	r2, #0
 8016004:	f042 0201 	orr.w	r2, r2, #1
 8016008:	711a      	strb	r2, [r3, #4]
 801600a:	2200      	movs	r2, #0
 801600c:	715a      	strb	r2, [r3, #5]
 801600e:	2200      	movs	r2, #0
 8016010:	719a      	strb	r2, [r3, #6]
 8016012:	2200      	movs	r2, #0
 8016014:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8016016:	78fa      	ldrb	r2, [r7, #3]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801601c:	f002 fd80 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8016020:	f002 fd66 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8016024:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	b2db      	uxtb	r3, r3
}
 801602c:	4618      	mov	r0, r3
 801602e:	3710      	adds	r7, #16
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801603e:	f002 fdad 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8016042:	f002 fd49 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8016046:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2200      	movs	r2, #0
 801604c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8016050:	701a      	strb	r2, [r3, #0]
 8016052:	2200      	movs	r2, #0
 8016054:	705a      	strb	r2, [r3, #1]
 8016056:	2200      	movs	r2, #0
 8016058:	709a      	strb	r2, [r3, #2]
 801605a:	2200      	movs	r2, #0
 801605c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2200      	movs	r2, #0
 8016062:	f042 0201 	orr.w	r2, r2, #1
 8016066:	711a      	strb	r2, [r3, #4]
 8016068:	2200      	movs	r2, #0
 801606a:	715a      	strb	r2, [r3, #5]
 801606c:	2200      	movs	r2, #0
 801606e:	719a      	strb	r2, [r3, #6]
 8016070:	2200      	movs	r2, #0
 8016072:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8016074:	683a      	ldr	r2, [r7, #0]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801607a:	f002 fd51 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801607e:	f002 fd37 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8016082:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	689b      	ldr	r3, [r3, #8]
 8016088:	b2db      	uxtb	r3, r3
}
 801608a:	4618      	mov	r0, r3
 801608c:	3710      	adds	r7, #16
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}

08016092 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8016092:	b580      	push	{r7, lr}
 8016094:	b084      	sub	sp, #16
 8016096:	af00      	add	r7, sp, #0
 8016098:	6078      	str	r0, [r7, #4]
 801609a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801609c:	f002 fd7e 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80160a0:	f002 fd1a 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 80160a4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2200      	movs	r2, #0
 80160aa:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80160ae:	701a      	strb	r2, [r3, #0]
 80160b0:	2200      	movs	r2, #0
 80160b2:	705a      	strb	r2, [r3, #1]
 80160b4:	2200      	movs	r2, #0
 80160b6:	709a      	strb	r2, [r3, #2]
 80160b8:	2200      	movs	r2, #0
 80160ba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	2200      	movs	r2, #0
 80160c0:	f042 0201 	orr.w	r2, r2, #1
 80160c4:	711a      	strb	r2, [r3, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	715a      	strb	r2, [r3, #5]
 80160ca:	2200      	movs	r2, #0
 80160cc:	719a      	strb	r2, [r3, #6]
 80160ce:	2200      	movs	r2, #0
 80160d0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 80160d2:	683a      	ldr	r2, [r7, #0]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80160d8:	f002 fd22 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80160dc:	f002 fd08 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80160e0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	689b      	ldr	r3, [r3, #8]
 80160e6:	b2db      	uxtb	r3, r3
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3710      	adds	r7, #16
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80160fa:	f002 fd4f 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80160fe:	f002 fceb 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 8016102:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2200      	movs	r2, #0
 8016108:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 801610c:	701a      	strb	r2, [r3, #0]
 801610e:	2200      	movs	r2, #0
 8016110:	705a      	strb	r2, [r3, #1]
 8016112:	2200      	movs	r2, #0
 8016114:	709a      	strb	r2, [r3, #2]
 8016116:	2200      	movs	r2, #0
 8016118:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2200      	movs	r2, #0
 801611e:	f042 0201 	orr.w	r2, r2, #1
 8016122:	711a      	strb	r2, [r3, #4]
 8016124:	2200      	movs	r2, #0
 8016126:	715a      	strb	r2, [r3, #5]
 8016128:	2200      	movs	r2, #0
 801612a:	719a      	strb	r2, [r3, #6]
 801612c:	2200      	movs	r2, #0
 801612e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8016130:	683a      	ldr	r2, [r7, #0]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8016136:	f002 fcf3 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801613a:	f002 fcd9 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 801613e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	689b      	ldr	r3, [r3, #8]
 8016144:	b2db      	uxtb	r3, r3
}
 8016146:	4618      	mov	r0, r3
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}

0801614e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 801614e:	b580      	push	{r7, lr}
 8016150:	b084      	sub	sp, #16
 8016152:	af00      	add	r7, sp, #0
 8016154:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8016156:	f002 fd21 	bl	8018b9c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801615a:	f002 fcbd 	bl	8018ad8 <THREAD_Get_OTCmdPayloadBuffer>
 801615e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2200      	movs	r2, #0
 8016164:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8016168:	701a      	strb	r2, [r3, #0]
 801616a:	2200      	movs	r2, #0
 801616c:	705a      	strb	r2, [r3, #1]
 801616e:	2200      	movs	r2, #0
 8016170:	709a      	strb	r2, [r3, #2]
 8016172:	2200      	movs	r2, #0
 8016174:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2200      	movs	r2, #0
 801617a:	711a      	strb	r2, [r3, #4]
 801617c:	2200      	movs	r2, #0
 801617e:	715a      	strb	r2, [r3, #5]
 8016180:	2200      	movs	r2, #0
 8016182:	719a      	strb	r2, [r3, #6]
 8016184:	2200      	movs	r2, #0
 8016186:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8016188:	f002 fcca 	bl	8018b20 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801618c:	f002 fcb0 	bl	8018af0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8016190:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	689b      	ldr	r3, [r3, #8]
 8016196:	b2db      	uxtb	r3, r3
}
 8016198:	4618      	mov	r0, r3
 801619a:	3710      	adds	r7, #16
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}

080161a0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80161a4:	f002 ff7e 	bl	80190a4 <HW_IPCC_Enable>

  return;
 80161a8:	bf00      	nop
}
 80161aa:	bd80      	pop	{r7, pc}

080161ac <TL_Init>:


void TL_Init( void )
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80161b0:	4b0f      	ldr	r3, [pc, #60]	; (80161f0 <TL_Init+0x44>)
 80161b2:	4a10      	ldr	r2, [pc, #64]	; (80161f4 <TL_Init+0x48>)
 80161b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80161b6:	4b0e      	ldr	r3, [pc, #56]	; (80161f0 <TL_Init+0x44>)
 80161b8:	4a0f      	ldr	r2, [pc, #60]	; (80161f8 <TL_Init+0x4c>)
 80161ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80161bc:	4b0c      	ldr	r3, [pc, #48]	; (80161f0 <TL_Init+0x44>)
 80161be:	4a0f      	ldr	r2, [pc, #60]	; (80161fc <TL_Init+0x50>)
 80161c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80161c2:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <TL_Init+0x44>)
 80161c4:	4a0e      	ldr	r2, [pc, #56]	; (8016200 <TL_Init+0x54>)
 80161c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 80161c8:	4b09      	ldr	r3, [pc, #36]	; (80161f0 <TL_Init+0x44>)
 80161ca:	4a0e      	ldr	r2, [pc, #56]	; (8016204 <TL_Init+0x58>)
 80161cc:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80161ce:	4b08      	ldr	r3, [pc, #32]	; (80161f0 <TL_Init+0x44>)
 80161d0:	4a0d      	ldr	r2, [pc, #52]	; (8016208 <TL_Init+0x5c>)
 80161d2:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80161d4:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <TL_Init+0x44>)
 80161d6:	4a0d      	ldr	r2, [pc, #52]	; (801620c <TL_Init+0x60>)
 80161d8:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80161da:	4b05      	ldr	r3, [pc, #20]	; (80161f0 <TL_Init+0x44>)
 80161dc:	4a0c      	ldr	r2, [pc, #48]	; (8016210 <TL_Init+0x64>)
 80161de:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80161e0:	4b03      	ldr	r3, [pc, #12]	; (80161f0 <TL_Init+0x44>)
 80161e2:	4a0c      	ldr	r2, [pc, #48]	; (8016214 <TL_Init+0x68>)
 80161e4:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80161e6:	f002 ff6d 	bl	80190c4 <HW_IPCC_Init>

  return;
 80161ea:	bf00      	nop
}
 80161ec:	bd80      	pop	{r7, pc}
 80161ee:	bf00      	nop
 80161f0:	20030000 	.word	0x20030000
 80161f4:	20030024 	.word	0x20030024
 80161f8:	20030044 	.word	0x20030044
 80161fc:	20030054 	.word	0x20030054
 8016200:	20030060 	.word	0x20030060
 8016204:	20030068 	.word	0x20030068
 8016208:	20030070 	.word	0x20030070
 801620c:	2003008c 	.word	0x2003008c
 8016210:	20030090 	.word	0x20030090
 8016214:	2003009c 	.word	0x2003009c

08016218 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b082      	sub	sp, #8
 801621c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801621e:	e009      	b.n	8016234 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016220:	1d3b      	adds	r3, r7, #4
 8016222:	4619      	mov	r1, r3
 8016224:	4808      	ldr	r0, [pc, #32]	; (8016248 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8016226:	f7ff feb8 	bl	8015f9a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 801622a:	4b08      	ldr	r3, [pc, #32]	; (801624c <HW_IPCC_BLE_RxEvtNot+0x34>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	4610      	mov	r0, r2
 8016232:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016234:	4804      	ldr	r0, [pc, #16]	; (8016248 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8016236:	f7ff fe29 	bl	8015e8c <LST_is_empty>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d0ef      	beq.n	8016220 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016240:	bf00      	nop
}
 8016242:	3708      	adds	r7, #8
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	20030828 	.word	0x20030828
 801624c:	2002761c 	.word	0x2002761c

08016250 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016254:	4b02      	ldr	r3, [pc, #8]	; (8016260 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	4798      	blx	r3

  return;
 801625a:	bf00      	nop
}
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	20027620 	.word	0x20027620

08016264 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016270:	480d      	ldr	r0, [pc, #52]	; (80162a8 <TL_SYS_Init+0x44>)
 8016272:	f7ff fdfb 	bl	8015e6c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016276:	4b0d      	ldr	r3, [pc, #52]	; (80162ac <TL_SYS_Init+0x48>)
 8016278:	68db      	ldr	r3, [r3, #12]
 801627a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	689a      	ldr	r2, [r3, #8]
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	4a08      	ldr	r2, [pc, #32]	; (80162a8 <TL_SYS_Init+0x44>)
 8016288:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801628a:	f002 ff49 	bl	8019120 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4a07      	ldr	r2, [pc, #28]	; (80162b0 <TL_SYS_Init+0x4c>)
 8016294:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	4a06      	ldr	r2, [pc, #24]	; (80162b4 <TL_SYS_Init+0x50>)
 801629c:	6013      	str	r3, [r2, #0]

  return 0;
 801629e:	2300      	movs	r3, #0
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3710      	adds	r7, #16
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	20030830 	.word	0x20030830
 80162ac:	20030000 	.word	0x20030000
 80162b0:	20027624 	.word	0x20027624
 80162b4:	20027628 	.word	0x20027628

080162b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
 80162c0:	460b      	mov	r3, r1
 80162c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80162c4:	4b05      	ldr	r3, [pc, #20]	; (80162dc <TL_SYS_SendCmd+0x24>)
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2210      	movs	r2, #16
 80162cc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80162ce:	f002 ff31 	bl	8019134 <HW_IPCC_SYS_SendCmd>

  return 0;
 80162d2:	2300      	movs	r3, #0
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	3708      	adds	r7, #8
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	20030000 	.word	0x20030000

080162e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80162e4:	4b04      	ldr	r3, [pc, #16]	; (80162f8 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	4a04      	ldr	r2, [pc, #16]	; (80162fc <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 80162ea:	68d2      	ldr	r2, [r2, #12]
 80162ec:	6812      	ldr	r2, [r2, #0]
 80162ee:	4610      	mov	r0, r2
 80162f0:	4798      	blx	r3

  return;
 80162f2:	bf00      	nop
}
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	20027624 	.word	0x20027624
 80162fc:	20030000 	.word	0x20030000

08016300 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016306:	e009      	b.n	801631c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016308:	1d3b      	adds	r3, r7, #4
 801630a:	4619      	mov	r1, r3
 801630c:	4808      	ldr	r0, [pc, #32]	; (8016330 <HW_IPCC_SYS_EvtNot+0x30>)
 801630e:	f7ff fe44 	bl	8015f9a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016312:	4b08      	ldr	r3, [pc, #32]	; (8016334 <HW_IPCC_SYS_EvtNot+0x34>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	4610      	mov	r0, r2
 801631a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801631c:	4804      	ldr	r0, [pc, #16]	; (8016330 <HW_IPCC_SYS_EvtNot+0x30>)
 801631e:	f7ff fdb5 	bl	8015e8c <LST_is_empty>
 8016322:	4603      	mov	r3, r0
 8016324:	2b00      	cmp	r3, #0
 8016326:	d0ef      	beq.n	8016308 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016328:	bf00      	nop
}
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	20030830 	.word	0x20030830
 8016334:	20027628 	.word	0x20027628

08016338 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8016340:	4b0a      	ldr	r3, [pc, #40]	; (801636c <TL_THREAD_Init+0x34>)
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	685a      	ldr	r2, [r3, #4]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	689a      	ldr	r2, [r3, #8]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 801635e:	f002 ff0f 	bl	8019180 <HW_IPCC_THREAD_Init>

  return;
 8016362:	bf00      	nop
}
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	20030000 	.word	0x20030000

08016370 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8016374:	4b04      	ldr	r3, [pc, #16]	; (8016388 <TL_OT_SendCmd+0x18>)
 8016376:	689b      	ldr	r3, [r3, #8]
 8016378:	689b      	ldr	r3, [r3, #8]
 801637a:	2208      	movs	r2, #8
 801637c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 801637e:	f002 ff0d 	bl	801919c <HW_IPCC_OT_SendCmd>

  return;
 8016382:	bf00      	nop
}
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	20030000 	.word	0x20030000

0801638c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 801638c:	b580      	push	{r7, lr}
 801638e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 8016390:	4b04      	ldr	r3, [pc, #16]	; (80163a4 <TL_CLI_SendCmd+0x18>)
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	685b      	ldr	r3, [r3, #4]
 8016396:	220a      	movs	r2, #10
 8016398:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 801639a:	f002 ff0d 	bl	80191b8 <HW_IPCC_CLI_SendCmd>

  return;
 801639e:	bf00      	nop
}
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	20030000 	.word	0x20030000

080163a8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80163ac:	4b04      	ldr	r3, [pc, #16]	; (80163c0 <TL_THREAD_SendAck+0x18>)
 80163ae:	689b      	ldr	r3, [r3, #8]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	220d      	movs	r2, #13
 80163b4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80163b6:	f002 ff09 	bl	80191cc <HW_IPCC_THREAD_SendAck>

  return;
 80163ba:	bf00      	nop
}
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	20030000 	.word	0x20030000

080163c4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80163c8:	4b04      	ldr	r3, [pc, #16]	; (80163dc <TL_THREAD_CliSendAck+0x18>)
 80163ca:	689b      	ldr	r3, [r3, #8]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	220d      	movs	r2, #13
 80163d0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80163d2:	f002 ff09 	bl	80191e8 <HW_IPCC_THREAD_CliSendAck>

  return;
 80163d6:	bf00      	nop
}
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	20030000 	.word	0x20030000

080163e0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 80163e4:	4b03      	ldr	r3, [pc, #12]	; (80163f4 <HW_IPCC_OT_CmdEvtNot+0x14>)
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	689b      	ldr	r3, [r3, #8]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f002 fbbc 	bl	8018b68 <TL_OT_CmdEvtReceived>

  return;
 80163f0:	bf00      	nop
}
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	20030000 	.word	0x20030000

080163f8 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 80163fc:	4b03      	ldr	r3, [pc, #12]	; (801640c <HW_IPCC_THREAD_EvtNot+0x14>)
 80163fe:	689b      	ldr	r3, [r3, #8]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	4618      	mov	r0, r3
 8016404:	f002 fbba 	bl	8018b7c <TL_THREAD_NotReceived>

  return;
 8016408:	bf00      	nop
}
 801640a:	bd80      	pop	{r7, pc}
 801640c:	20030000 	.word	0x20030000

08016410 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8016414:	4b03      	ldr	r3, [pc, #12]	; (8016424 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8016416:	689b      	ldr	r3, [r3, #8]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	4618      	mov	r0, r3
 801641c:	f002 fc5c 	bl	8018cd8 <TL_THREAD_CliNotReceived>

  return;
 8016420:	bf00      	nop
}
 8016422:	bd80      	pop	{r7, pc}
 8016424:	20030000 	.word	0x20030000

08016428 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b082      	sub	sp, #8
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016430:	4817      	ldr	r0, [pc, #92]	; (8016490 <TL_MM_Init+0x68>)
 8016432:	f7ff fd1b 	bl	8015e6c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016436:	4817      	ldr	r0, [pc, #92]	; (8016494 <TL_MM_Init+0x6c>)
 8016438:	f7ff fd18 	bl	8015e6c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801643c:	4b16      	ldr	r3, [pc, #88]	; (8016498 <TL_MM_Init+0x70>)
 801643e:	691b      	ldr	r3, [r3, #16]
 8016440:	4a16      	ldr	r2, [pc, #88]	; (801649c <TL_MM_Init+0x74>)
 8016442:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016444:	4b15      	ldr	r3, [pc, #84]	; (801649c <TL_MM_Init+0x74>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	687a      	ldr	r2, [r7, #4]
 801644a:	6892      	ldr	r2, [r2, #8]
 801644c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801644e:	4b13      	ldr	r3, [pc, #76]	; (801649c <TL_MM_Init+0x74>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	687a      	ldr	r2, [r7, #4]
 8016454:	68d2      	ldr	r2, [r2, #12]
 8016456:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016458:	4b10      	ldr	r3, [pc, #64]	; (801649c <TL_MM_Init+0x74>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	4a0c      	ldr	r2, [pc, #48]	; (8016490 <TL_MM_Init+0x68>)
 801645e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016460:	4b0e      	ldr	r3, [pc, #56]	; (801649c <TL_MM_Init+0x74>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	6812      	ldr	r2, [r2, #0]
 8016468:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801646a:	4b0c      	ldr	r3, [pc, #48]	; (801649c <TL_MM_Init+0x74>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	6852      	ldr	r2, [r2, #4]
 8016472:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016474:	4b09      	ldr	r3, [pc, #36]	; (801649c <TL_MM_Init+0x74>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	6912      	ldr	r2, [r2, #16]
 801647c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801647e:	4b07      	ldr	r3, [pc, #28]	; (801649c <TL_MM_Init+0x74>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	6952      	ldr	r2, [r2, #20]
 8016486:	619a      	str	r2, [r3, #24]

  return;
 8016488:	bf00      	nop
}
 801648a:	3708      	adds	r7, #8
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}
 8016490:	200300a8 	.word	0x200300a8
 8016494:	20027614 	.word	0x20027614
 8016498:	20030000 	.word	0x20030000
 801649c:	2002762c 	.word	0x2002762c

080164a0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80164a8:	6879      	ldr	r1, [r7, #4]
 80164aa:	4805      	ldr	r0, [pc, #20]	; (80164c0 <TL_MM_EvtDone+0x20>)
 80164ac:	f7ff fd32 	bl	8015f14 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80164b0:	4804      	ldr	r0, [pc, #16]	; (80164c4 <TL_MM_EvtDone+0x24>)
 80164b2:	f002 fecb 	bl	801924c <HW_IPCC_MM_SendFreeBuf>

  return;
 80164b6:	bf00      	nop
}
 80164b8:	3708      	adds	r7, #8
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}
 80164be:	bf00      	nop
 80164c0:	20027614 	.word	0x20027614
 80164c4:	080164c9 	.word	0x080164c9

080164c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80164ce:	e00c      	b.n	80164ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80164d0:	1d3b      	adds	r3, r7, #4
 80164d2:	4619      	mov	r1, r3
 80164d4:	480a      	ldr	r0, [pc, #40]	; (8016500 <SendFreeBuf+0x38>)
 80164d6:	f7ff fd60 	bl	8015f9a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80164da:	4b0a      	ldr	r3, [pc, #40]	; (8016504 <SendFreeBuf+0x3c>)
 80164dc:	691b      	ldr	r3, [r3, #16]
 80164de:	691b      	ldr	r3, [r3, #16]
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	4611      	mov	r1, r2
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7ff fd15 	bl	8015f14 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80164ea:	4805      	ldr	r0, [pc, #20]	; (8016500 <SendFreeBuf+0x38>)
 80164ec:	f7ff fcce 	bl	8015e8c <LST_is_empty>
 80164f0:	4603      	mov	r3, r0
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0ec      	beq.n	80164d0 <SendFreeBuf+0x8>
  }

  return;
 80164f6:	bf00      	nop
}
 80164f8:	3708      	adds	r7, #8
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	20027614 	.word	0x20027614
 8016504:	20030000 	.word	0x20030000

08016508 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801650c:	4805      	ldr	r0, [pc, #20]	; (8016524 <TL_TRACES_Init+0x1c>)
 801650e:	f7ff fcad 	bl	8015e6c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016512:	4b05      	ldr	r3, [pc, #20]	; (8016528 <TL_TRACES_Init+0x20>)
 8016514:	695b      	ldr	r3, [r3, #20]
 8016516:	4a03      	ldr	r2, [pc, #12]	; (8016524 <TL_TRACES_Init+0x1c>)
 8016518:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801651a:	f002 fecd 	bl	80192b8 <HW_IPCC_TRACES_Init>

  return;
 801651e:	bf00      	nop
}
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	200300b0 	.word	0x200300b0
 8016528:	20030000 	.word	0x20030000

0801652c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016532:	e008      	b.n	8016546 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016534:	1d3b      	adds	r3, r7, #4
 8016536:	4619      	mov	r1, r3
 8016538:	4808      	ldr	r0, [pc, #32]	; (801655c <HW_IPCC_TRACES_EvtNot+0x30>)
 801653a:	f7ff fd2e 	bl	8015f9a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	4618      	mov	r0, r3
 8016542:	f7ea fe69 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016546:	4805      	ldr	r0, [pc, #20]	; (801655c <HW_IPCC_TRACES_EvtNot+0x30>)
 8016548:	f7ff fca0 	bl	8015e8c <LST_is_empty>
 801654c:	4603      	mov	r3, r0
 801654e:	2b00      	cmp	r3, #0
 8016550:	d0f0      	beq.n	8016534 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016552:	bf00      	nop
}
 8016554:	3708      	adds	r7, #8
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	200300b0 	.word	0x200300b0

08016560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b084      	sub	sp, #16
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	460b      	mov	r3, r1
 801656a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801656c:	2300      	movs	r3, #0
 801656e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	7c1b      	ldrb	r3, [r3, #16]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d115      	bne.n	80165a4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016578:	f44f 7300 	mov.w	r3, #512	; 0x200
 801657c:	2202      	movs	r2, #2
 801657e:	2181      	movs	r1, #129	; 0x81
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f003 fa7c 	bl	8019a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2201      	movs	r2, #1
 801658a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801658c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016590:	2202      	movs	r2, #2
 8016592:	2101      	movs	r1, #1
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f003 fa72 	bl	8019a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2201      	movs	r2, #1
 801659e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80165a2:	e012      	b.n	80165ca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80165a4:	2340      	movs	r3, #64	; 0x40
 80165a6:	2202      	movs	r2, #2
 80165a8:	2181      	movs	r1, #129	; 0x81
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f003 fa67 	bl	8019a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2201      	movs	r2, #1
 80165b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80165b6:	2340      	movs	r3, #64	; 0x40
 80165b8:	2202      	movs	r2, #2
 80165ba:	2101      	movs	r1, #1
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f003 fa5e 	bl	8019a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2201      	movs	r2, #1
 80165c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80165ca:	2308      	movs	r3, #8
 80165cc:	2203      	movs	r2, #3
 80165ce:	2182      	movs	r1, #130	; 0x82
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f003 fa54 	bl	8019a7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2201      	movs	r2, #1
 80165da:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80165dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80165e0:	f003 fba4 	bl	8019d2c <USBD_static_malloc>
 80165e4:	4602      	mov	r2, r0
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d102      	bne.n	80165fc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80165f6:	2301      	movs	r3, #1
 80165f8:	73fb      	strb	r3, [r7, #15]
 80165fa:	e026      	b.n	801664a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016602:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	2200      	movs	r2, #0
 8016612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	2200      	movs	r2, #0
 801661a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	7c1b      	ldrb	r3, [r3, #16]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d109      	bne.n	801663a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801662c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016630:	2101      	movs	r1, #1
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f003 fb0e 	bl	8019c54 <USBD_LL_PrepareReceive>
 8016638:	e007      	b.n	801664a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016640:	2340      	movs	r3, #64	; 0x40
 8016642:	2101      	movs	r1, #1
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f003 fb05 	bl	8019c54 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801664a:	7bfb      	ldrb	r3, [r7, #15]
}
 801664c:	4618      	mov	r0, r3
 801664e:	3710      	adds	r7, #16
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	460b      	mov	r3, r1
 801665e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8016660:	2300      	movs	r3, #0
 8016662:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016664:	2181      	movs	r1, #129	; 0x81
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f003 fa2f 	bl	8019aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2200      	movs	r2, #0
 8016670:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016672:	2101      	movs	r1, #1
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f003 fa28 	bl	8019aca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2200      	movs	r2, #0
 801667e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016682:	2182      	movs	r1, #130	; 0x82
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f003 fa20 	bl	8019aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2200      	movs	r2, #0
 801668e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00e      	beq.n	80166b8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166aa:	4618      	mov	r0, r3
 80166ac:	f003 fb4c 	bl	8019d48 <USBD_static_free>
    pdev->pClassData = NULL;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2200      	movs	r2, #0
 80166b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80166b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3710      	adds	r7, #16
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}

080166c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80166c2:	b580      	push	{r7, lr}
 80166c4:	b086      	sub	sp, #24
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	6078      	str	r0, [r7, #4]
 80166ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80166d4:	2300      	movs	r3, #0
 80166d6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80166d8:	2300      	movs	r3, #0
 80166da:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d039      	beq.n	8016760 <USBD_CDC_Setup+0x9e>
 80166ec:	2b20      	cmp	r3, #32
 80166ee:	d17c      	bne.n	80167ea <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	88db      	ldrh	r3, [r3, #6]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d029      	beq.n	801674c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	b25b      	sxtb	r3, r3
 80166fe:	2b00      	cmp	r3, #0
 8016700:	da11      	bge.n	8016726 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016708:	689b      	ldr	r3, [r3, #8]
 801670a:	683a      	ldr	r2, [r7, #0]
 801670c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801670e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016710:	683a      	ldr	r2, [r7, #0]
 8016712:	88d2      	ldrh	r2, [r2, #6]
 8016714:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8016716:	6939      	ldr	r1, [r7, #16]
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	88db      	ldrh	r3, [r3, #6]
 801671c:	461a      	mov	r2, r3
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f001 fa2a 	bl	8017b78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8016724:	e068      	b.n	80167f8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	785a      	ldrb	r2, [r3, #1]
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	88db      	ldrh	r3, [r3, #6]
 8016734:	b2da      	uxtb	r2, r3
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801673c:	6939      	ldr	r1, [r7, #16]
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	88db      	ldrh	r3, [r3, #6]
 8016742:	461a      	mov	r2, r3
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f001 fa45 	bl	8017bd4 <USBD_CtlPrepareRx>
      break;
 801674a:	e055      	b.n	80167f8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016752:	689b      	ldr	r3, [r3, #8]
 8016754:	683a      	ldr	r2, [r7, #0]
 8016756:	7850      	ldrb	r0, [r2, #1]
 8016758:	2200      	movs	r2, #0
 801675a:	6839      	ldr	r1, [r7, #0]
 801675c:	4798      	blx	r3
      break;
 801675e:	e04b      	b.n	80167f8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	785b      	ldrb	r3, [r3, #1]
 8016764:	2b0a      	cmp	r3, #10
 8016766:	d017      	beq.n	8016798 <USBD_CDC_Setup+0xd6>
 8016768:	2b0b      	cmp	r3, #11
 801676a:	d029      	beq.n	80167c0 <USBD_CDC_Setup+0xfe>
 801676c:	2b00      	cmp	r3, #0
 801676e:	d133      	bne.n	80167d8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016776:	2b03      	cmp	r3, #3
 8016778:	d107      	bne.n	801678a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801677a:	f107 030c 	add.w	r3, r7, #12
 801677e:	2202      	movs	r2, #2
 8016780:	4619      	mov	r1, r3
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f001 f9f8 	bl	8017b78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016788:	e02e      	b.n	80167e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801678a:	6839      	ldr	r1, [r7, #0]
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f001 f988 	bl	8017aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8016792:	2302      	movs	r3, #2
 8016794:	75fb      	strb	r3, [r7, #23]
          break;
 8016796:	e027      	b.n	80167e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801679e:	2b03      	cmp	r3, #3
 80167a0:	d107      	bne.n	80167b2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80167a2:	f107 030f 	add.w	r3, r7, #15
 80167a6:	2201      	movs	r2, #1
 80167a8:	4619      	mov	r1, r3
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f001 f9e4 	bl	8017b78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80167b0:	e01a      	b.n	80167e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80167b2:	6839      	ldr	r1, [r7, #0]
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f001 f974 	bl	8017aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 80167ba:	2302      	movs	r3, #2
 80167bc:	75fb      	strb	r3, [r7, #23]
          break;
 80167be:	e013      	b.n	80167e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167c6:	2b03      	cmp	r3, #3
 80167c8:	d00d      	beq.n	80167e6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80167ca:	6839      	ldr	r1, [r7, #0]
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f001 f968 	bl	8017aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 80167d2:	2302      	movs	r3, #2
 80167d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80167d6:	e006      	b.n	80167e6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80167d8:	6839      	ldr	r1, [r7, #0]
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f001 f961 	bl	8017aa2 <USBD_CtlError>
          ret = USBD_FAIL;
 80167e0:	2302      	movs	r3, #2
 80167e2:	75fb      	strb	r3, [r7, #23]
          break;
 80167e4:	e000      	b.n	80167e8 <USBD_CDC_Setup+0x126>
          break;
 80167e6:	bf00      	nop
      }
      break;
 80167e8:	e006      	b.n	80167f8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80167ea:	6839      	ldr	r1, [r7, #0]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f001 f958 	bl	8017aa2 <USBD_CtlError>
      ret = USBD_FAIL;
 80167f2:	2302      	movs	r3, #2
 80167f4:	75fb      	strb	r3, [r7, #23]
      break;
 80167f6:	bf00      	nop
  }

  return ret;
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3718      	adds	r7, #24
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	460b      	mov	r3, r1
 801680c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016814:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801681c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016824:	2b00      	cmp	r3, #0
 8016826:	d037      	beq.n	8016898 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016828:	78fa      	ldrb	r2, [r7, #3]
 801682a:	6879      	ldr	r1, [r7, #4]
 801682c:	4613      	mov	r3, r2
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	4413      	add	r3, r2
 8016832:	009b      	lsls	r3, r3, #2
 8016834:	440b      	add	r3, r1
 8016836:	331c      	adds	r3, #28
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d026      	beq.n	801688c <USBD_CDC_DataIn+0x8a>
 801683e:	78fa      	ldrb	r2, [r7, #3]
 8016840:	6879      	ldr	r1, [r7, #4]
 8016842:	4613      	mov	r3, r2
 8016844:	009b      	lsls	r3, r3, #2
 8016846:	4413      	add	r3, r2
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	440b      	add	r3, r1
 801684c:	331c      	adds	r3, #28
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	78fa      	ldrb	r2, [r7, #3]
 8016852:	68b9      	ldr	r1, [r7, #8]
 8016854:	0152      	lsls	r2, r2, #5
 8016856:	440a      	add	r2, r1
 8016858:	3238      	adds	r2, #56	; 0x38
 801685a:	6812      	ldr	r2, [r2, #0]
 801685c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016860:	fb02 f201 	mul.w	r2, r2, r1
 8016864:	1a9b      	subs	r3, r3, r2
 8016866:	2b00      	cmp	r3, #0
 8016868:	d110      	bne.n	801688c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801686a:	78fa      	ldrb	r2, [r7, #3]
 801686c:	6879      	ldr	r1, [r7, #4]
 801686e:	4613      	mov	r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	4413      	add	r3, r2
 8016874:	009b      	lsls	r3, r3, #2
 8016876:	440b      	add	r3, r1
 8016878:	331c      	adds	r3, #28
 801687a:	2200      	movs	r2, #0
 801687c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801687e:	78f9      	ldrb	r1, [r7, #3]
 8016880:	2300      	movs	r3, #0
 8016882:	2200      	movs	r2, #0
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f003 f9c2 	bl	8019c0e <USBD_LL_Transmit>
 801688a:	e003      	b.n	8016894 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	2200      	movs	r2, #0
 8016890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8016894:	2300      	movs	r3, #0
 8016896:	e000      	b.n	801689a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8016898:	2302      	movs	r3, #2
  }
}
 801689a:	4618      	mov	r0, r3
 801689c:	3710      	adds	r7, #16
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80168a2:	b580      	push	{r7, lr}
 80168a4:	b084      	sub	sp, #16
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]
 80168aa:	460b      	mov	r3, r1
 80168ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80168b6:	78fb      	ldrb	r3, [r7, #3]
 80168b8:	4619      	mov	r1, r3
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f003 f9ed 	bl	8019c9a <USBD_LL_GetRxDataSize>
 80168c0:	4602      	mov	r2, r0
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d00d      	beq.n	80168ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	68fa      	ldr	r2, [r7, #12]
 80168dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80168e6:	4611      	mov	r1, r2
 80168e8:	4798      	blx	r3

    return USBD_OK;
 80168ea:	2300      	movs	r3, #0
 80168ec:	e000      	b.n	80168f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80168ee:	2302      	movs	r3, #2
  }
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016906:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801690e:	2b00      	cmp	r3, #0
 8016910:	d015      	beq.n	801693e <USBD_CDC_EP0_RxReady+0x46>
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016918:	2bff      	cmp	r3, #255	; 0xff
 801691a:	d010      	beq.n	801693e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016922:	689b      	ldr	r3, [r3, #8]
 8016924:	68fa      	ldr	r2, [r7, #12]
 8016926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801692a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016932:	b292      	uxth	r2, r2
 8016934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	22ff      	movs	r2, #255	; 0xff
 801693a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801693e:	2300      	movs	r3, #0
}
 8016940:	4618      	mov	r0, r3
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2243      	movs	r2, #67	; 0x43
 8016954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8016956:	4b03      	ldr	r3, [pc, #12]	; (8016964 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016958:	4618      	mov	r0, r3
 801695a:	370c      	adds	r7, #12
 801695c:	46bd      	mov	sp, r7
 801695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016962:	4770      	bx	lr
 8016964:	20000110 	.word	0x20000110

08016968 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2243      	movs	r2, #67	; 0x43
 8016974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8016976:	4b03      	ldr	r3, [pc, #12]	; (8016984 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016978:	4618      	mov	r0, r3
 801697a:	370c      	adds	r7, #12
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	200000cc 	.word	0x200000cc

08016988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016988:	b480      	push	{r7}
 801698a:	b083      	sub	sp, #12
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2243      	movs	r2, #67	; 0x43
 8016994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8016996:	4b03      	ldr	r3, [pc, #12]	; (80169a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016998:	4618      	mov	r0, r3
 801699a:	370c      	adds	r7, #12
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr
 80169a4:	20000154 	.word	0x20000154

080169a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b083      	sub	sp, #12
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	220a      	movs	r2, #10
 80169b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80169b6:	4b03      	ldr	r3, [pc, #12]	; (80169c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	370c      	adds	r7, #12
 80169bc:	46bd      	mov	sp, r7
 80169be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c2:	4770      	bx	lr
 80169c4:	20000088 	.word	0x20000088

080169c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80169c8:	b480      	push	{r7}
 80169ca:	b085      	sub	sp, #20
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
 80169d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80169d2:	2302      	movs	r3, #2
 80169d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d005      	beq.n	80169e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	683a      	ldr	r2, [r7, #0]
 80169e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80169e4:	2300      	movs	r3, #0
 80169e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80169e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3714      	adds	r7, #20
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr

080169f6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80169f6:	b480      	push	{r7}
 80169f8:	b087      	sub	sp, #28
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	60f8      	str	r0, [r7, #12]
 80169fe:	60b9      	str	r1, [r7, #8]
 8016a00:	4613      	mov	r3, r2
 8016a02:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a0a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	68ba      	ldr	r2, [r7, #8]
 8016a10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016a14:	88fa      	ldrh	r2, [r7, #6]
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	371c      	adds	r7, #28
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr

08016a2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8016a2a:	b480      	push	{r7}
 8016a2c:	b085      	sub	sp, #20
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
 8016a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	683a      	ldr	r2, [r7, #0]
 8016a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8016a44:	2300      	movs	r3, #0
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3714      	adds	r7, #20
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a50:	4770      	bx	lr

08016a52 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b084      	sub	sp, #16
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d01c      	beq.n	8016aa6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d115      	bne.n	8016aa2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	2201      	movs	r2, #1
 8016a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	2181      	movs	r1, #129	; 0x81
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f003 f8b8 	bl	8019c0e <USBD_LL_Transmit>

      return USBD_OK;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	e002      	b.n	8016aa8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e000      	b.n	8016aa8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8016aa6:	2302      	movs	r3, #2
  }
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016abe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d017      	beq.n	8016afa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	7c1b      	ldrb	r3, [r3, #16]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d109      	bne.n	8016ae6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016adc:	2101      	movs	r1, #1
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f003 f8b8 	bl	8019c54 <USBD_LL_PrepareReceive>
 8016ae4:	e007      	b.n	8016af6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016aec:	2340      	movs	r3, #64	; 0x40
 8016aee:	2101      	movs	r1, #1
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f003 f8af 	bl	8019c54 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	e000      	b.n	8016afc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8016afa:	2302      	movs	r3, #2
  }
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	3710      	adds	r7, #16
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b084      	sub	sp, #16
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d101      	bne.n	8016b1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016b18:	2302      	movs	r3, #2
 8016b1a:	e01a      	b.n	8016b52 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d003      	beq.n	8016b2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d003      	beq.n	8016b3c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	68ba      	ldr	r2, [r7, #8]
 8016b38:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	79fa      	ldrb	r2, [r7, #7]
 8016b48:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f002 ff1a 	bl	8019984 <USBD_LL_Init>

  return USBD_OK;
 8016b50:	2300      	movs	r3, #0
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016b5a:	b480      	push	{r7}
 8016b5c:	b085      	sub	sp, #20
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	6078      	str	r0, [r7, #4]
 8016b62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8016b64:	2300      	movs	r3, #0
 8016b66:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d006      	beq.n	8016b7c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	683a      	ldr	r2, [r7, #0]
 8016b72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8016b76:	2300      	movs	r3, #0
 8016b78:	73fb      	strb	r3, [r7, #15]
 8016b7a:	e001      	b.n	8016b80 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8016b7c:	2302      	movs	r3, #2
 8016b7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3714      	adds	r7, #20
 8016b86:	46bd      	mov	sp, r7
 8016b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8c:	4770      	bx	lr

08016b8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b8e:	b580      	push	{r7, lr}
 8016b90:	b082      	sub	sp, #8
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f002 ff56 	bl	8019a48 <USBD_LL_Start>

  return USBD_OK;
 8016b9c:	2300      	movs	r3, #0
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3708      	adds	r7, #8
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016ba6:	b480      	push	{r7}
 8016ba8:	b083      	sub	sp, #12
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016bae:	2300      	movs	r3, #0
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr

08016bbc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b084      	sub	sp, #16
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016bc8:	2302      	movs	r3, #2
 8016bca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00c      	beq.n	8016bf0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	78fa      	ldrb	r2, [r7, #3]
 8016be0:	4611      	mov	r1, r2
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	4798      	blx	r3
 8016be6:	4603      	mov	r3, r0
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d101      	bne.n	8016bf0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8016bec:	2300      	movs	r3, #0
 8016bee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b082      	sub	sp, #8
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
 8016c02:	460b      	mov	r3, r1
 8016c04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	78fa      	ldrb	r2, [r7, #3]
 8016c10:	4611      	mov	r1, r2
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	4798      	blx	r3

  return USBD_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 fef8 	bl	8017a28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016c46:	461a      	mov	r2, r3
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016c54:	f003 031f 	and.w	r3, r3, #31
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d00c      	beq.n	8016c76 <USBD_LL_SetupStage+0x56>
 8016c5c:	2b01      	cmp	r3, #1
 8016c5e:	d302      	bcc.n	8016c66 <USBD_LL_SetupStage+0x46>
 8016c60:	2b02      	cmp	r3, #2
 8016c62:	d010      	beq.n	8016c86 <USBD_LL_SetupStage+0x66>
 8016c64:	e017      	b.n	8016c96 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 f9ce 	bl	8017010 <USBD_StdDevReq>
      break;
 8016c74:	e01a      	b.n	8016cac <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 fa30 	bl	80170e4 <USBD_StdItfReq>
      break;
 8016c84:	e012      	b.n	8016cac <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f000 fa6e 	bl	8017170 <USBD_StdEPReq>
      break;
 8016c94:	e00a      	b.n	8016cac <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8016c9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f002 ff2f 	bl	8019b08 <USBD_LL_StallEP>
      break;
 8016caa:	bf00      	nop
  }

  return USBD_OK;
 8016cac:	2300      	movs	r3, #0
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3708      	adds	r7, #8
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b086      	sub	sp, #24
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	60f8      	str	r0, [r7, #12]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	607a      	str	r2, [r7, #4]
 8016cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016cc4:	7afb      	ldrb	r3, [r7, #11]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d14b      	bne.n	8016d62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016cd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016cd8:	2b03      	cmp	r3, #3
 8016cda:	d134      	bne.n	8016d46 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	68da      	ldr	r2, [r3, #12]
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	691b      	ldr	r3, [r3, #16]
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d919      	bls.n	8016d1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	68da      	ldr	r2, [r3, #12]
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	691b      	ldr	r3, [r3, #16]
 8016cf0:	1ad2      	subs	r2, r2, r3
 8016cf2:	697b      	ldr	r3, [r7, #20]
 8016cf4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	68da      	ldr	r2, [r3, #12]
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d203      	bcs.n	8016d0a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8016d06:	b29b      	uxth	r3, r3
 8016d08:	e002      	b.n	8016d10 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	461a      	mov	r2, r3
 8016d12:	6879      	ldr	r1, [r7, #4]
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f000 ff7b 	bl	8017c10 <USBD_CtlContinueRx>
 8016d1a:	e038      	b.n	8016d8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d22:	691b      	ldr	r3, [r3, #16]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d00a      	beq.n	8016d3e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8016d2e:	2b03      	cmp	r3, #3
 8016d30:	d105      	bne.n	8016d3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d38:	691b      	ldr	r3, [r3, #16]
 8016d3a:	68f8      	ldr	r0, [r7, #12]
 8016d3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8016d3e:	68f8      	ldr	r0, [r7, #12]
 8016d40:	f000 ff78 	bl	8017c34 <USBD_CtlSendStatus>
 8016d44:	e023      	b.n	8016d8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016d4c:	2b05      	cmp	r3, #5
 8016d4e:	d11e      	bne.n	8016d8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	2200      	movs	r2, #0
 8016d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8016d58:	2100      	movs	r1, #0
 8016d5a:	68f8      	ldr	r0, [r7, #12]
 8016d5c:	f002 fed4 	bl	8019b08 <USBD_LL_StallEP>
 8016d60:	e015      	b.n	8016d8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d68:	699b      	ldr	r3, [r3, #24]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d00d      	beq.n	8016d8a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8016d74:	2b03      	cmp	r3, #3
 8016d76:	d108      	bne.n	8016d8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d7e:	699b      	ldr	r3, [r3, #24]
 8016d80:	7afa      	ldrb	r2, [r7, #11]
 8016d82:	4611      	mov	r1, r2
 8016d84:	68f8      	ldr	r0, [r7, #12]
 8016d86:	4798      	blx	r3
 8016d88:	e001      	b.n	8016d8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016d8a:	2302      	movs	r3, #2
 8016d8c:	e000      	b.n	8016d90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8016d8e:	2300      	movs	r3, #0
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	3718      	adds	r7, #24
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b086      	sub	sp, #24
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	60f8      	str	r0, [r7, #12]
 8016da0:	460b      	mov	r3, r1
 8016da2:	607a      	str	r2, [r7, #4]
 8016da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8016da6:	7afb      	ldrb	r3, [r7, #11]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d17f      	bne.n	8016eac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	3314      	adds	r3, #20
 8016db0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016db8:	2b02      	cmp	r3, #2
 8016dba:	d15c      	bne.n	8016e76 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	68da      	ldr	r2, [r3, #12]
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	691b      	ldr	r3, [r3, #16]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d915      	bls.n	8016df4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	68da      	ldr	r2, [r3, #12]
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	691b      	ldr	r3, [r3, #16]
 8016dd0:	1ad2      	subs	r2, r2, r3
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	461a      	mov	r2, r3
 8016dde:	6879      	ldr	r1, [r7, #4]
 8016de0:	68f8      	ldr	r0, [r7, #12]
 8016de2:	f000 fee5 	bl	8017bb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016de6:	2300      	movs	r3, #0
 8016de8:	2200      	movs	r2, #0
 8016dea:	2100      	movs	r1, #0
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f002 ff31 	bl	8019c54 <USBD_LL_PrepareReceive>
 8016df2:	e04e      	b.n	8016e92 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	689b      	ldr	r3, [r3, #8]
 8016df8:	697a      	ldr	r2, [r7, #20]
 8016dfa:	6912      	ldr	r2, [r2, #16]
 8016dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e00:	fb02 f201 	mul.w	r2, r2, r1
 8016e04:	1a9b      	subs	r3, r3, r2
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d11c      	bne.n	8016e44 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	689a      	ldr	r2, [r3, #8]
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d316      	bcc.n	8016e44 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	689a      	ldr	r2, [r3, #8]
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016e20:	429a      	cmp	r2, r3
 8016e22:	d20f      	bcs.n	8016e44 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016e24:	2200      	movs	r2, #0
 8016e26:	2100      	movs	r1, #0
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f000 fec1 	bl	8017bb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	2200      	movs	r2, #0
 8016e32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e36:	2300      	movs	r3, #0
 8016e38:	2200      	movs	r2, #0
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	68f8      	ldr	r0, [r7, #12]
 8016e3e:	f002 ff09 	bl	8019c54 <USBD_LL_PrepareReceive>
 8016e42:	e026      	b.n	8016e92 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d00a      	beq.n	8016e66 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016e56:	2b03      	cmp	r3, #3
 8016e58:	d105      	bne.n	8016e66 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	68f8      	ldr	r0, [r7, #12]
 8016e64:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8016e66:	2180      	movs	r1, #128	; 0x80
 8016e68:	68f8      	ldr	r0, [r7, #12]
 8016e6a:	f002 fe4d 	bl	8019b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8016e6e:	68f8      	ldr	r0, [r7, #12]
 8016e70:	f000 fef3 	bl	8017c5a <USBD_CtlReceiveStatus>
 8016e74:	e00d      	b.n	8016e92 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016e7c:	2b04      	cmp	r3, #4
 8016e7e:	d004      	beq.n	8016e8a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d103      	bne.n	8016e92 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8016e8a:	2180      	movs	r1, #128	; 0x80
 8016e8c:	68f8      	ldr	r0, [r7, #12]
 8016e8e:	f002 fe3b 	bl	8019b08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	d11d      	bne.n	8016ed8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f7ff fe82 	bl	8016ba6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016eaa:	e015      	b.n	8016ed8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016eb2:	695b      	ldr	r3, [r3, #20]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d00d      	beq.n	8016ed4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8016ebe:	2b03      	cmp	r3, #3
 8016ec0:	d108      	bne.n	8016ed4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ec8:	695b      	ldr	r3, [r3, #20]
 8016eca:	7afa      	ldrb	r2, [r7, #11]
 8016ecc:	4611      	mov	r1, r2
 8016ece:	68f8      	ldr	r0, [r7, #12]
 8016ed0:	4798      	blx	r3
 8016ed2:	e001      	b.n	8016ed8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016ed4:	2302      	movs	r3, #2
 8016ed6:	e000      	b.n	8016eda <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8016ed8:	2300      	movs	r3, #0
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3718      	adds	r7, #24
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}

08016ee2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016ee2:	b580      	push	{r7, lr}
 8016ee4:	b082      	sub	sp, #8
 8016ee6:	af00      	add	r7, sp, #0
 8016ee8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016eea:	2340      	movs	r3, #64	; 0x40
 8016eec:	2200      	movs	r2, #0
 8016eee:	2100      	movs	r1, #0
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f002 fdc4 	bl	8019a7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2201      	movs	r2, #1
 8016efa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2240      	movs	r2, #64	; 0x40
 8016f02:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016f06:	2340      	movs	r3, #64	; 0x40
 8016f08:	2200      	movs	r2, #0
 8016f0a:	2180      	movs	r1, #128	; 0x80
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f002 fdb6 	bl	8019a7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2201      	movs	r2, #1
 8016f16:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2240      	movs	r2, #64	; 0x40
 8016f1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2201      	movs	r2, #1
 8016f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2200      	movs	r2, #0
 8016f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2200      	movs	r2, #0
 8016f38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d009      	beq.n	8016f5a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	6852      	ldr	r2, [r2, #4]
 8016f52:	b2d2      	uxtb	r2, r2
 8016f54:	4611      	mov	r1, r2
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	4798      	blx	r3
  }

  return USBD_OK;
 8016f5a:	2300      	movs	r3, #0
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3708      	adds	r7, #8
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	78fa      	ldrb	r2, [r7, #3]
 8016f74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr

08016f84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2204      	movs	r2, #4
 8016f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016fa0:	2300      	movs	r3, #0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	370c      	adds	r7, #12
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fac:	4770      	bx	lr

08016fae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016fae:	b480      	push	{r7}
 8016fb0:	b083      	sub	sp, #12
 8016fb2:	af00      	add	r7, sp, #0
 8016fb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fbc:	2b04      	cmp	r3, #4
 8016fbe:	d105      	bne.n	8016fcc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016fcc:	2300      	movs	r3, #0
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	370c      	adds	r7, #12
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr

08016fda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016fda:	b580      	push	{r7, lr}
 8016fdc:	b082      	sub	sp, #8
 8016fde:	af00      	add	r7, sp, #0
 8016fe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fe8:	2b03      	cmp	r3, #3
 8016fea:	d10b      	bne.n	8017004 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ff2:	69db      	ldr	r3, [r3, #28]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d005      	beq.n	8017004 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ffe:	69db      	ldr	r3, [r3, #28]
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	3708      	adds	r7, #8
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
	...

08017010 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801701a:	2300      	movs	r3, #0
 801701c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017026:	2b20      	cmp	r3, #32
 8017028:	d004      	beq.n	8017034 <USBD_StdDevReq+0x24>
 801702a:	2b40      	cmp	r3, #64	; 0x40
 801702c:	d002      	beq.n	8017034 <USBD_StdDevReq+0x24>
 801702e:	2b00      	cmp	r3, #0
 8017030:	d008      	beq.n	8017044 <USBD_StdDevReq+0x34>
 8017032:	e04c      	b.n	80170ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801703a:	689b      	ldr	r3, [r3, #8]
 801703c:	6839      	ldr	r1, [r7, #0]
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	4798      	blx	r3
      break;
 8017042:	e049      	b.n	80170d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	785b      	ldrb	r3, [r3, #1]
 8017048:	2b09      	cmp	r3, #9
 801704a:	d83a      	bhi.n	80170c2 <USBD_StdDevReq+0xb2>
 801704c:	a201      	add	r2, pc, #4	; (adr r2, 8017054 <USBD_StdDevReq+0x44>)
 801704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017052:	bf00      	nop
 8017054:	080170a5 	.word	0x080170a5
 8017058:	080170b9 	.word	0x080170b9
 801705c:	080170c3 	.word	0x080170c3
 8017060:	080170af 	.word	0x080170af
 8017064:	080170c3 	.word	0x080170c3
 8017068:	08017087 	.word	0x08017087
 801706c:	0801707d 	.word	0x0801707d
 8017070:	080170c3 	.word	0x080170c3
 8017074:	0801709b 	.word	0x0801709b
 8017078:	08017091 	.word	0x08017091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 f9d4 	bl	801742c <USBD_GetDescriptor>
          break;
 8017084:	e022      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fb61 	bl	8017750 <USBD_SetAddress>
          break;
 801708e:	e01d      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8017090:	6839      	ldr	r1, [r7, #0]
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 fb9e 	bl	80177d4 <USBD_SetConfig>
          break;
 8017098:	e018      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801709a:	6839      	ldr	r1, [r7, #0]
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 fc27 	bl	80178f0 <USBD_GetConfig>
          break;
 80170a2:	e013      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80170a4:	6839      	ldr	r1, [r7, #0]
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 fc56 	bl	8017958 <USBD_GetStatus>
          break;
 80170ac:	e00e      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80170ae:	6839      	ldr	r1, [r7, #0]
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f000 fc84 	bl	80179be <USBD_SetFeature>
          break;
 80170b6:	e009      	b.n	80170cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80170b8:	6839      	ldr	r1, [r7, #0]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 fc93 	bl	80179e6 <USBD_ClrFeature>
          break;
 80170c0:	e004      	b.n	80170cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80170c2:	6839      	ldr	r1, [r7, #0]
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f000 fcec 	bl	8017aa2 <USBD_CtlError>
          break;
 80170ca:	bf00      	nop
      }
      break;
 80170cc:	e004      	b.n	80170d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80170ce:	6839      	ldr	r1, [r7, #0]
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f000 fce6 	bl	8017aa2 <USBD_CtlError>
      break;
 80170d6:	bf00      	nop
  }

  return ret;
 80170d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3710      	adds	r7, #16
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop

080170e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b084      	sub	sp, #16
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170ee:	2300      	movs	r3, #0
 80170f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80170f2:	683b      	ldr	r3, [r7, #0]
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80170fa:	2b20      	cmp	r3, #32
 80170fc:	d003      	beq.n	8017106 <USBD_StdItfReq+0x22>
 80170fe:	2b40      	cmp	r3, #64	; 0x40
 8017100:	d001      	beq.n	8017106 <USBD_StdItfReq+0x22>
 8017102:	2b00      	cmp	r3, #0
 8017104:	d12a      	bne.n	801715c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801710c:	3b01      	subs	r3, #1
 801710e:	2b02      	cmp	r3, #2
 8017110:	d81d      	bhi.n	801714e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	889b      	ldrh	r3, [r3, #4]
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b01      	cmp	r3, #1
 801711a:	d813      	bhi.n	8017144 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017122:	689b      	ldr	r3, [r3, #8]
 8017124:	6839      	ldr	r1, [r7, #0]
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	4798      	blx	r3
 801712a:	4603      	mov	r3, r0
 801712c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	88db      	ldrh	r3, [r3, #6]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d110      	bne.n	8017158 <USBD_StdItfReq+0x74>
 8017136:	7bfb      	ldrb	r3, [r7, #15]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d10d      	bne.n	8017158 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f000 fd79 	bl	8017c34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017142:	e009      	b.n	8017158 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 fcab 	bl	8017aa2 <USBD_CtlError>
          break;
 801714c:	e004      	b.n	8017158 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801714e:	6839      	ldr	r1, [r7, #0]
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f000 fca6 	bl	8017aa2 <USBD_CtlError>
          break;
 8017156:	e000      	b.n	801715a <USBD_StdItfReq+0x76>
          break;
 8017158:	bf00      	nop
      }
      break;
 801715a:	e004      	b.n	8017166 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801715c:	6839      	ldr	r1, [r7, #0]
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 fc9f 	bl	8017aa2 <USBD_CtlError>
      break;
 8017164:	bf00      	nop
  }

  return USBD_OK;
 8017166:	2300      	movs	r3, #0
}
 8017168:	4618      	mov	r0, r3
 801716a:	3710      	adds	r7, #16
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}

08017170 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801717a:	2300      	movs	r3, #0
 801717c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	889b      	ldrh	r3, [r3, #4]
 8017182:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801718c:	2b20      	cmp	r3, #32
 801718e:	d004      	beq.n	801719a <USBD_StdEPReq+0x2a>
 8017190:	2b40      	cmp	r3, #64	; 0x40
 8017192:	d002      	beq.n	801719a <USBD_StdEPReq+0x2a>
 8017194:	2b00      	cmp	r3, #0
 8017196:	d008      	beq.n	80171aa <USBD_StdEPReq+0x3a>
 8017198:	e13d      	b.n	8017416 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171a0:	689b      	ldr	r3, [r3, #8]
 80171a2:	6839      	ldr	r1, [r7, #0]
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	4798      	blx	r3
      break;
 80171a8:	e13a      	b.n	8017420 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80171b2:	2b20      	cmp	r3, #32
 80171b4:	d10a      	bne.n	80171cc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	6839      	ldr	r1, [r7, #0]
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	4798      	blx	r3
 80171c4:	4603      	mov	r3, r0
 80171c6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80171c8:	7bfb      	ldrb	r3, [r7, #15]
 80171ca:	e12a      	b.n	8017422 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80171cc:	683b      	ldr	r3, [r7, #0]
 80171ce:	785b      	ldrb	r3, [r3, #1]
 80171d0:	2b01      	cmp	r3, #1
 80171d2:	d03e      	beq.n	8017252 <USBD_StdEPReq+0xe2>
 80171d4:	2b03      	cmp	r3, #3
 80171d6:	d002      	beq.n	80171de <USBD_StdEPReq+0x6e>
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d070      	beq.n	80172be <USBD_StdEPReq+0x14e>
 80171dc:	e115      	b.n	801740a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	d002      	beq.n	80171ee <USBD_StdEPReq+0x7e>
 80171e8:	2b03      	cmp	r3, #3
 80171ea:	d015      	beq.n	8017218 <USBD_StdEPReq+0xa8>
 80171ec:	e02b      	b.n	8017246 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80171ee:	7bbb      	ldrb	r3, [r7, #14]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d00c      	beq.n	801720e <USBD_StdEPReq+0x9e>
 80171f4:	7bbb      	ldrb	r3, [r7, #14]
 80171f6:	2b80      	cmp	r3, #128	; 0x80
 80171f8:	d009      	beq.n	801720e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80171fa:	7bbb      	ldrb	r3, [r7, #14]
 80171fc:	4619      	mov	r1, r3
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f002 fc82 	bl	8019b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017204:	2180      	movs	r1, #128	; 0x80
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f002 fc7e 	bl	8019b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801720c:	e020      	b.n	8017250 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801720e:	6839      	ldr	r1, [r7, #0]
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f000 fc46 	bl	8017aa2 <USBD_CtlError>
              break;
 8017216:	e01b      	b.n	8017250 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	885b      	ldrh	r3, [r3, #2]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d10e      	bne.n	801723e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8017220:	7bbb      	ldrb	r3, [r7, #14]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d00b      	beq.n	801723e <USBD_StdEPReq+0xce>
 8017226:	7bbb      	ldrb	r3, [r7, #14]
 8017228:	2b80      	cmp	r3, #128	; 0x80
 801722a:	d008      	beq.n	801723e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	88db      	ldrh	r3, [r3, #6]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d104      	bne.n	801723e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8017234:	7bbb      	ldrb	r3, [r7, #14]
 8017236:	4619      	mov	r1, r3
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f002 fc65 	bl	8019b08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f000 fcf8 	bl	8017c34 <USBD_CtlSendStatus>

              break;
 8017244:	e004      	b.n	8017250 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8017246:	6839      	ldr	r1, [r7, #0]
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 fc2a 	bl	8017aa2 <USBD_CtlError>
              break;
 801724e:	bf00      	nop
          }
          break;
 8017250:	e0e0      	b.n	8017414 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017258:	2b02      	cmp	r3, #2
 801725a:	d002      	beq.n	8017262 <USBD_StdEPReq+0xf2>
 801725c:	2b03      	cmp	r3, #3
 801725e:	d015      	beq.n	801728c <USBD_StdEPReq+0x11c>
 8017260:	e026      	b.n	80172b0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017262:	7bbb      	ldrb	r3, [r7, #14]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d00c      	beq.n	8017282 <USBD_StdEPReq+0x112>
 8017268:	7bbb      	ldrb	r3, [r7, #14]
 801726a:	2b80      	cmp	r3, #128	; 0x80
 801726c:	d009      	beq.n	8017282 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801726e:	7bbb      	ldrb	r3, [r7, #14]
 8017270:	4619      	mov	r1, r3
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f002 fc48 	bl	8019b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8017278:	2180      	movs	r1, #128	; 0x80
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	f002 fc44 	bl	8019b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017280:	e01c      	b.n	80172bc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8017282:	6839      	ldr	r1, [r7, #0]
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f000 fc0c 	bl	8017aa2 <USBD_CtlError>
              break;
 801728a:	e017      	b.n	80172bc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	885b      	ldrh	r3, [r3, #2]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d112      	bne.n	80172ba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017294:	7bbb      	ldrb	r3, [r7, #14]
 8017296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801729a:	2b00      	cmp	r3, #0
 801729c:	d004      	beq.n	80172a8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801729e:	7bbb      	ldrb	r3, [r7, #14]
 80172a0:	4619      	mov	r1, r3
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f002 fc4f 	bl	8019b46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f000 fcc3 	bl	8017c34 <USBD_CtlSendStatus>
              }
              break;
 80172ae:	e004      	b.n	80172ba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80172b0:	6839      	ldr	r1, [r7, #0]
 80172b2:	6878      	ldr	r0, [r7, #4]
 80172b4:	f000 fbf5 	bl	8017aa2 <USBD_CtlError>
              break;
 80172b8:	e000      	b.n	80172bc <USBD_StdEPReq+0x14c>
              break;
 80172ba:	bf00      	nop
          }
          break;
 80172bc:	e0aa      	b.n	8017414 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d002      	beq.n	80172ce <USBD_StdEPReq+0x15e>
 80172c8:	2b03      	cmp	r3, #3
 80172ca:	d032      	beq.n	8017332 <USBD_StdEPReq+0x1c2>
 80172cc:	e097      	b.n	80173fe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172ce:	7bbb      	ldrb	r3, [r7, #14]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d007      	beq.n	80172e4 <USBD_StdEPReq+0x174>
 80172d4:	7bbb      	ldrb	r3, [r7, #14]
 80172d6:	2b80      	cmp	r3, #128	; 0x80
 80172d8:	d004      	beq.n	80172e4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80172da:	6839      	ldr	r1, [r7, #0]
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f000 fbe0 	bl	8017aa2 <USBD_CtlError>
                break;
 80172e2:	e091      	b.n	8017408 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	da0b      	bge.n	8017304 <USBD_StdEPReq+0x194>
 80172ec:	7bbb      	ldrb	r3, [r7, #14]
 80172ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80172f2:	4613      	mov	r3, r2
 80172f4:	009b      	lsls	r3, r3, #2
 80172f6:	4413      	add	r3, r2
 80172f8:	009b      	lsls	r3, r3, #2
 80172fa:	3310      	adds	r3, #16
 80172fc:	687a      	ldr	r2, [r7, #4]
 80172fe:	4413      	add	r3, r2
 8017300:	3304      	adds	r3, #4
 8017302:	e00b      	b.n	801731c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017304:	7bbb      	ldrb	r3, [r7, #14]
 8017306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801730a:	4613      	mov	r3, r2
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	4413      	add	r3, r2
 8017310:	009b      	lsls	r3, r3, #2
 8017312:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	4413      	add	r3, r2
 801731a:	3304      	adds	r3, #4
 801731c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	2200      	movs	r2, #0
 8017322:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	2202      	movs	r2, #2
 8017328:	4619      	mov	r1, r3
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 fc24 	bl	8017b78 <USBD_CtlSendData>
              break;
 8017330:	e06a      	b.n	8017408 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017336:	2b00      	cmp	r3, #0
 8017338:	da11      	bge.n	801735e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801733a:	7bbb      	ldrb	r3, [r7, #14]
 801733c:	f003 020f 	and.w	r2, r3, #15
 8017340:	6879      	ldr	r1, [r7, #4]
 8017342:	4613      	mov	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	4413      	add	r3, r2
 8017348:	009b      	lsls	r3, r3, #2
 801734a:	440b      	add	r3, r1
 801734c:	3318      	adds	r3, #24
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d117      	bne.n	8017384 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8017354:	6839      	ldr	r1, [r7, #0]
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f000 fba3 	bl	8017aa2 <USBD_CtlError>
                  break;
 801735c:	e054      	b.n	8017408 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801735e:	7bbb      	ldrb	r3, [r7, #14]
 8017360:	f003 020f 	and.w	r2, r3, #15
 8017364:	6879      	ldr	r1, [r7, #4]
 8017366:	4613      	mov	r3, r2
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	4413      	add	r3, r2
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	440b      	add	r3, r1
 8017370:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d104      	bne.n	8017384 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801737a:	6839      	ldr	r1, [r7, #0]
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f000 fb90 	bl	8017aa2 <USBD_CtlError>
                  break;
 8017382:	e041      	b.n	8017408 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017388:	2b00      	cmp	r3, #0
 801738a:	da0b      	bge.n	80173a4 <USBD_StdEPReq+0x234>
 801738c:	7bbb      	ldrb	r3, [r7, #14]
 801738e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017392:	4613      	mov	r3, r2
 8017394:	009b      	lsls	r3, r3, #2
 8017396:	4413      	add	r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	3310      	adds	r3, #16
 801739c:	687a      	ldr	r2, [r7, #4]
 801739e:	4413      	add	r3, r2
 80173a0:	3304      	adds	r3, #4
 80173a2:	e00b      	b.n	80173bc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80173a4:	7bbb      	ldrb	r3, [r7, #14]
 80173a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173aa:	4613      	mov	r3, r2
 80173ac:	009b      	lsls	r3, r3, #2
 80173ae:	4413      	add	r3, r2
 80173b0:	009b      	lsls	r3, r3, #2
 80173b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	4413      	add	r3, r2
 80173ba:	3304      	adds	r3, #4
 80173bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80173be:	7bbb      	ldrb	r3, [r7, #14]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d002      	beq.n	80173ca <USBD_StdEPReq+0x25a>
 80173c4:	7bbb      	ldrb	r3, [r7, #14]
 80173c6:	2b80      	cmp	r3, #128	; 0x80
 80173c8:	d103      	bne.n	80173d2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	2200      	movs	r2, #0
 80173ce:	601a      	str	r2, [r3, #0]
 80173d0:	e00e      	b.n	80173f0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80173d2:	7bbb      	ldrb	r3, [r7, #14]
 80173d4:	4619      	mov	r1, r3
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f002 fbd4 	bl	8019b84 <USBD_LL_IsStallEP>
 80173dc:	4603      	mov	r3, r0
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d003      	beq.n	80173ea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	2201      	movs	r2, #1
 80173e6:	601a      	str	r2, [r3, #0]
 80173e8:	e002      	b.n	80173f0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	2202      	movs	r2, #2
 80173f4:	4619      	mov	r1, r3
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 fbbe 	bl	8017b78 <USBD_CtlSendData>
              break;
 80173fc:	e004      	b.n	8017408 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 fb4e 	bl	8017aa2 <USBD_CtlError>
              break;
 8017406:	bf00      	nop
          }
          break;
 8017408:	e004      	b.n	8017414 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801740a:	6839      	ldr	r1, [r7, #0]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f000 fb48 	bl	8017aa2 <USBD_CtlError>
          break;
 8017412:	bf00      	nop
      }
      break;
 8017414:	e004      	b.n	8017420 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8017416:	6839      	ldr	r1, [r7, #0]
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f000 fb42 	bl	8017aa2 <USBD_CtlError>
      break;
 801741e:	bf00      	nop
  }

  return ret;
 8017420:	7bfb      	ldrb	r3, [r7, #15]
}
 8017422:	4618      	mov	r0, r3
 8017424:	3710      	adds	r7, #16
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
	...

0801742c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017436:	2300      	movs	r3, #0
 8017438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801743a:	2300      	movs	r3, #0
 801743c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801743e:	2300      	movs	r3, #0
 8017440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	885b      	ldrh	r3, [r3, #2]
 8017446:	0a1b      	lsrs	r3, r3, #8
 8017448:	b29b      	uxth	r3, r3
 801744a:	3b01      	subs	r3, #1
 801744c:	2b0e      	cmp	r3, #14
 801744e:	f200 8152 	bhi.w	80176f6 <USBD_GetDescriptor+0x2ca>
 8017452:	a201      	add	r2, pc, #4	; (adr r2, 8017458 <USBD_GetDescriptor+0x2c>)
 8017454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017458:	080174c9 	.word	0x080174c9
 801745c:	080174e1 	.word	0x080174e1
 8017460:	08017521 	.word	0x08017521
 8017464:	080176f7 	.word	0x080176f7
 8017468:	080176f7 	.word	0x080176f7
 801746c:	08017697 	.word	0x08017697
 8017470:	080176c3 	.word	0x080176c3
 8017474:	080176f7 	.word	0x080176f7
 8017478:	080176f7 	.word	0x080176f7
 801747c:	080176f7 	.word	0x080176f7
 8017480:	080176f7 	.word	0x080176f7
 8017484:	080176f7 	.word	0x080176f7
 8017488:	080176f7 	.word	0x080176f7
 801748c:	080176f7 	.word	0x080176f7
 8017490:	08017495 	.word	0x08017495
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801749a:	69db      	ldr	r3, [r3, #28]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d00b      	beq.n	80174b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80174a6:	69db      	ldr	r3, [r3, #28]
 80174a8:	687a      	ldr	r2, [r7, #4]
 80174aa:	7c12      	ldrb	r2, [r2, #16]
 80174ac:	f107 0108 	add.w	r1, r7, #8
 80174b0:	4610      	mov	r0, r2
 80174b2:	4798      	blx	r3
 80174b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80174b6:	e126      	b.n	8017706 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80174b8:	6839      	ldr	r1, [r7, #0]
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f000 faf1 	bl	8017aa2 <USBD_CtlError>
        err++;
 80174c0:	7afb      	ldrb	r3, [r7, #11]
 80174c2:	3301      	adds	r3, #1
 80174c4:	72fb      	strb	r3, [r7, #11]
      break;
 80174c6:	e11e      	b.n	8017706 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	7c12      	ldrb	r2, [r2, #16]
 80174d4:	f107 0108 	add.w	r1, r7, #8
 80174d8:	4610      	mov	r0, r2
 80174da:	4798      	blx	r3
 80174dc:	60f8      	str	r0, [r7, #12]
      break;
 80174de:	e112      	b.n	8017706 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	7c1b      	ldrb	r3, [r3, #16]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d10d      	bne.n	8017504 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80174ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174f0:	f107 0208 	add.w	r2, r7, #8
 80174f4:	4610      	mov	r0, r2
 80174f6:	4798      	blx	r3
 80174f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	3301      	adds	r3, #1
 80174fe:	2202      	movs	r2, #2
 8017500:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017502:	e100      	b.n	8017706 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801750c:	f107 0208 	add.w	r2, r7, #8
 8017510:	4610      	mov	r0, r2
 8017512:	4798      	blx	r3
 8017514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	3301      	adds	r3, #1
 801751a:	2202      	movs	r2, #2
 801751c:	701a      	strb	r2, [r3, #0]
      break;
 801751e:	e0f2      	b.n	8017706 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	885b      	ldrh	r3, [r3, #2]
 8017524:	b2db      	uxtb	r3, r3
 8017526:	2b05      	cmp	r3, #5
 8017528:	f200 80ac 	bhi.w	8017684 <USBD_GetDescriptor+0x258>
 801752c:	a201      	add	r2, pc, #4	; (adr r2, 8017534 <USBD_GetDescriptor+0x108>)
 801752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017532:	bf00      	nop
 8017534:	0801754d 	.word	0x0801754d
 8017538:	08017581 	.word	0x08017581
 801753c:	080175b5 	.word	0x080175b5
 8017540:	080175e9 	.word	0x080175e9
 8017544:	0801761d 	.word	0x0801761d
 8017548:	08017651 	.word	0x08017651
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d00b      	beq.n	8017570 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	687a      	ldr	r2, [r7, #4]
 8017562:	7c12      	ldrb	r2, [r2, #16]
 8017564:	f107 0108 	add.w	r1, r7, #8
 8017568:	4610      	mov	r0, r2
 801756a:	4798      	blx	r3
 801756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801756e:	e091      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017570:	6839      	ldr	r1, [r7, #0]
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f000 fa95 	bl	8017aa2 <USBD_CtlError>
            err++;
 8017578:	7afb      	ldrb	r3, [r7, #11]
 801757a:	3301      	adds	r3, #1
 801757c:	72fb      	strb	r3, [r7, #11]
          break;
 801757e:	e089      	b.n	8017694 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017586:	689b      	ldr	r3, [r3, #8]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d00b      	beq.n	80175a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017592:	689b      	ldr	r3, [r3, #8]
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	7c12      	ldrb	r2, [r2, #16]
 8017598:	f107 0108 	add.w	r1, r7, #8
 801759c:	4610      	mov	r0, r2
 801759e:	4798      	blx	r3
 80175a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175a2:	e077      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80175a4:	6839      	ldr	r1, [r7, #0]
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f000 fa7b 	bl	8017aa2 <USBD_CtlError>
            err++;
 80175ac:	7afb      	ldrb	r3, [r7, #11]
 80175ae:	3301      	adds	r3, #1
 80175b0:	72fb      	strb	r3, [r7, #11]
          break;
 80175b2:	e06f      	b.n	8017694 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175ba:	68db      	ldr	r3, [r3, #12]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d00b      	beq.n	80175d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175c6:	68db      	ldr	r3, [r3, #12]
 80175c8:	687a      	ldr	r2, [r7, #4]
 80175ca:	7c12      	ldrb	r2, [r2, #16]
 80175cc:	f107 0108 	add.w	r1, r7, #8
 80175d0:	4610      	mov	r0, r2
 80175d2:	4798      	blx	r3
 80175d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175d6:	e05d      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80175d8:	6839      	ldr	r1, [r7, #0]
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 fa61 	bl	8017aa2 <USBD_CtlError>
            err++;
 80175e0:	7afb      	ldrb	r3, [r7, #11]
 80175e2:	3301      	adds	r3, #1
 80175e4:	72fb      	strb	r3, [r7, #11]
          break;
 80175e6:	e055      	b.n	8017694 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175ee:	691b      	ldr	r3, [r3, #16]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d00b      	beq.n	801760c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80175fa:	691b      	ldr	r3, [r3, #16]
 80175fc:	687a      	ldr	r2, [r7, #4]
 80175fe:	7c12      	ldrb	r2, [r2, #16]
 8017600:	f107 0108 	add.w	r1, r7, #8
 8017604:	4610      	mov	r0, r2
 8017606:	4798      	blx	r3
 8017608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801760a:	e043      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801760c:	6839      	ldr	r1, [r7, #0]
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f000 fa47 	bl	8017aa2 <USBD_CtlError>
            err++;
 8017614:	7afb      	ldrb	r3, [r7, #11]
 8017616:	3301      	adds	r3, #1
 8017618:	72fb      	strb	r3, [r7, #11]
          break;
 801761a:	e03b      	b.n	8017694 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017622:	695b      	ldr	r3, [r3, #20]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d00b      	beq.n	8017640 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801762e:	695b      	ldr	r3, [r3, #20]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	7c12      	ldrb	r2, [r2, #16]
 8017634:	f107 0108 	add.w	r1, r7, #8
 8017638:	4610      	mov	r0, r2
 801763a:	4798      	blx	r3
 801763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801763e:	e029      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017640:	6839      	ldr	r1, [r7, #0]
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f000 fa2d 	bl	8017aa2 <USBD_CtlError>
            err++;
 8017648:	7afb      	ldrb	r3, [r7, #11]
 801764a:	3301      	adds	r3, #1
 801764c:	72fb      	strb	r3, [r7, #11]
          break;
 801764e:	e021      	b.n	8017694 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d00b      	beq.n	8017674 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	7c12      	ldrb	r2, [r2, #16]
 8017668:	f107 0108 	add.w	r1, r7, #8
 801766c:	4610      	mov	r0, r2
 801766e:	4798      	blx	r3
 8017670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017672:	e00f      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017674:	6839      	ldr	r1, [r7, #0]
 8017676:	6878      	ldr	r0, [r7, #4]
 8017678:	f000 fa13 	bl	8017aa2 <USBD_CtlError>
            err++;
 801767c:	7afb      	ldrb	r3, [r7, #11]
 801767e:	3301      	adds	r3, #1
 8017680:	72fb      	strb	r3, [r7, #11]
          break;
 8017682:	e007      	b.n	8017694 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8017684:	6839      	ldr	r1, [r7, #0]
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f000 fa0b 	bl	8017aa2 <USBD_CtlError>
          err++;
 801768c:	7afb      	ldrb	r3, [r7, #11]
 801768e:	3301      	adds	r3, #1
 8017690:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8017692:	e038      	b.n	8017706 <USBD_GetDescriptor+0x2da>
 8017694:	e037      	b.n	8017706 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	7c1b      	ldrb	r3, [r3, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d109      	bne.n	80176b2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176a6:	f107 0208 	add.w	r2, r7, #8
 80176aa:	4610      	mov	r0, r2
 80176ac:	4798      	blx	r3
 80176ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176b0:	e029      	b.n	8017706 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176b2:	6839      	ldr	r1, [r7, #0]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f000 f9f4 	bl	8017aa2 <USBD_CtlError>
        err++;
 80176ba:	7afb      	ldrb	r3, [r7, #11]
 80176bc:	3301      	adds	r3, #1
 80176be:	72fb      	strb	r3, [r7, #11]
      break;
 80176c0:	e021      	b.n	8017706 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	7c1b      	ldrb	r3, [r3, #16]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d10d      	bne.n	80176e6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d2:	f107 0208 	add.w	r2, r7, #8
 80176d6:	4610      	mov	r0, r2
 80176d8:	4798      	blx	r3
 80176da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	3301      	adds	r3, #1
 80176e0:	2207      	movs	r2, #7
 80176e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176e4:	e00f      	b.n	8017706 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176e6:	6839      	ldr	r1, [r7, #0]
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f000 f9da 	bl	8017aa2 <USBD_CtlError>
        err++;
 80176ee:	7afb      	ldrb	r3, [r7, #11]
 80176f0:	3301      	adds	r3, #1
 80176f2:	72fb      	strb	r3, [r7, #11]
      break;
 80176f4:	e007      	b.n	8017706 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80176f6:	6839      	ldr	r1, [r7, #0]
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f000 f9d2 	bl	8017aa2 <USBD_CtlError>
      err++;
 80176fe:	7afb      	ldrb	r3, [r7, #11]
 8017700:	3301      	adds	r3, #1
 8017702:	72fb      	strb	r3, [r7, #11]
      break;
 8017704:	bf00      	nop
  }

  if (err != 0U)
 8017706:	7afb      	ldrb	r3, [r7, #11]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d11c      	bne.n	8017746 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801770c:	893b      	ldrh	r3, [r7, #8]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d011      	beq.n	8017736 <USBD_GetDescriptor+0x30a>
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	88db      	ldrh	r3, [r3, #6]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d00d      	beq.n	8017736 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	88da      	ldrh	r2, [r3, #6]
 801771e:	893b      	ldrh	r3, [r7, #8]
 8017720:	4293      	cmp	r3, r2
 8017722:	bf28      	it	cs
 8017724:	4613      	movcs	r3, r2
 8017726:	b29b      	uxth	r3, r3
 8017728:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801772a:	893b      	ldrh	r3, [r7, #8]
 801772c:	461a      	mov	r2, r3
 801772e:	68f9      	ldr	r1, [r7, #12]
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f000 fa21 	bl	8017b78 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	88db      	ldrh	r3, [r3, #6]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d104      	bne.n	8017748 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f000 fa78 	bl	8017c34 <USBD_CtlSendStatus>
 8017744:	e000      	b.n	8017748 <USBD_GetDescriptor+0x31c>
    return;
 8017746:	bf00      	nop
    }
  }
}
 8017748:	3710      	adds	r7, #16
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop

08017750 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
 8017758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	889b      	ldrh	r3, [r3, #4]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d130      	bne.n	80177c4 <USBD_SetAddress+0x74>
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	88db      	ldrh	r3, [r3, #6]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d12c      	bne.n	80177c4 <USBD_SetAddress+0x74>
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	885b      	ldrh	r3, [r3, #2]
 801776e:	2b7f      	cmp	r3, #127	; 0x7f
 8017770:	d828      	bhi.n	80177c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	885b      	ldrh	r3, [r3, #2]
 8017776:	b2db      	uxtb	r3, r3
 8017778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801777c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017784:	2b03      	cmp	r3, #3
 8017786:	d104      	bne.n	8017792 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8017788:	6839      	ldr	r1, [r7, #0]
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f000 f989 	bl	8017aa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017790:	e01c      	b.n	80177cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	7bfa      	ldrb	r2, [r7, #15]
 8017796:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801779a:	7bfb      	ldrb	r3, [r7, #15]
 801779c:	4619      	mov	r1, r3
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f002 fa16 	bl	8019bd0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f000 fa45 	bl	8017c34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80177aa:	7bfb      	ldrb	r3, [r7, #15]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d004      	beq.n	80177ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2202      	movs	r2, #2
 80177b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177b8:	e008      	b.n	80177cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2201      	movs	r2, #1
 80177be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177c2:	e003      	b.n	80177cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80177c4:	6839      	ldr	r1, [r7, #0]
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 f96b 	bl	8017aa2 <USBD_CtlError>
  }
}
 80177cc:	bf00      	nop
 80177ce:	3710      	adds	r7, #16
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	885b      	ldrh	r3, [r3, #2]
 80177e2:	b2da      	uxtb	r2, r3
 80177e4:	4b41      	ldr	r3, [pc, #260]	; (80178ec <USBD_SetConfig+0x118>)
 80177e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80177e8:	4b40      	ldr	r3, [pc, #256]	; (80178ec <USBD_SetConfig+0x118>)
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	2b01      	cmp	r3, #1
 80177ee:	d904      	bls.n	80177fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80177f0:	6839      	ldr	r1, [r7, #0]
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f000 f955 	bl	8017aa2 <USBD_CtlError>
 80177f8:	e075      	b.n	80178e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017800:	2b02      	cmp	r3, #2
 8017802:	d002      	beq.n	801780a <USBD_SetConfig+0x36>
 8017804:	2b03      	cmp	r3, #3
 8017806:	d023      	beq.n	8017850 <USBD_SetConfig+0x7c>
 8017808:	e062      	b.n	80178d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801780a:	4b38      	ldr	r3, [pc, #224]	; (80178ec <USBD_SetConfig+0x118>)
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d01a      	beq.n	8017848 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8017812:	4b36      	ldr	r3, [pc, #216]	; (80178ec <USBD_SetConfig+0x118>)
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	461a      	mov	r2, r3
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2203      	movs	r2, #3
 8017820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8017824:	4b31      	ldr	r3, [pc, #196]	; (80178ec <USBD_SetConfig+0x118>)
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	4619      	mov	r1, r3
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f7ff f9c6 	bl	8016bbc <USBD_SetClassConfig>
 8017830:	4603      	mov	r3, r0
 8017832:	2b02      	cmp	r3, #2
 8017834:	d104      	bne.n	8017840 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8017836:	6839      	ldr	r1, [r7, #0]
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f000 f932 	bl	8017aa2 <USBD_CtlError>
            return;
 801783e:	e052      	b.n	80178e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8017840:	6878      	ldr	r0, [r7, #4]
 8017842:	f000 f9f7 	bl	8017c34 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8017846:	e04e      	b.n	80178e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f000 f9f3 	bl	8017c34 <USBD_CtlSendStatus>
        break;
 801784e:	e04a      	b.n	80178e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8017850:	4b26      	ldr	r3, [pc, #152]	; (80178ec <USBD_SetConfig+0x118>)
 8017852:	781b      	ldrb	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d112      	bne.n	801787e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2202      	movs	r2, #2
 801785c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8017860:	4b22      	ldr	r3, [pc, #136]	; (80178ec <USBD_SetConfig+0x118>)
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	461a      	mov	r2, r3
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801786a:	4b20      	ldr	r3, [pc, #128]	; (80178ec <USBD_SetConfig+0x118>)
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	4619      	mov	r1, r3
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7ff f9c2 	bl	8016bfa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f000 f9dc 	bl	8017c34 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801787c:	e033      	b.n	80178e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801787e:	4b1b      	ldr	r3, [pc, #108]	; (80178ec <USBD_SetConfig+0x118>)
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	461a      	mov	r2, r3
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	429a      	cmp	r2, r3
 801788a:	d01d      	beq.n	80178c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	b2db      	uxtb	r3, r3
 8017892:	4619      	mov	r1, r3
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7ff f9b0 	bl	8016bfa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801789a:	4b14      	ldr	r3, [pc, #80]	; (80178ec <USBD_SetConfig+0x118>)
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	461a      	mov	r2, r3
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80178a4:	4b11      	ldr	r3, [pc, #68]	; (80178ec <USBD_SetConfig+0x118>)
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	4619      	mov	r1, r3
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f7ff f986 	bl	8016bbc <USBD_SetClassConfig>
 80178b0:	4603      	mov	r3, r0
 80178b2:	2b02      	cmp	r3, #2
 80178b4:	d104      	bne.n	80178c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80178b6:	6839      	ldr	r1, [r7, #0]
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f000 f8f2 	bl	8017aa2 <USBD_CtlError>
            return;
 80178be:	e012      	b.n	80178e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 f9b7 	bl	8017c34 <USBD_CtlSendStatus>
        break;
 80178c6:	e00e      	b.n	80178e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f000 f9b3 	bl	8017c34 <USBD_CtlSendStatus>
        break;
 80178ce:	e00a      	b.n	80178e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80178d0:	6839      	ldr	r1, [r7, #0]
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f000 f8e5 	bl	8017aa2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80178d8:	4b04      	ldr	r3, [pc, #16]	; (80178ec <USBD_SetConfig+0x118>)
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	4619      	mov	r1, r3
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f7ff f98b 	bl	8016bfa <USBD_ClrClassConfig>
        break;
 80178e4:	bf00      	nop
    }
  }
}
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	20027630 	.word	0x20027630

080178f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	88db      	ldrh	r3, [r3, #6]
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d004      	beq.n	801790c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017902:	6839      	ldr	r1, [r7, #0]
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f000 f8cc 	bl	8017aa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801790a:	e021      	b.n	8017950 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017912:	2b01      	cmp	r3, #1
 8017914:	db17      	blt.n	8017946 <USBD_GetConfig+0x56>
 8017916:	2b02      	cmp	r3, #2
 8017918:	dd02      	ble.n	8017920 <USBD_GetConfig+0x30>
 801791a:	2b03      	cmp	r3, #3
 801791c:	d00b      	beq.n	8017936 <USBD_GetConfig+0x46>
 801791e:	e012      	b.n	8017946 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2200      	movs	r2, #0
 8017924:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	3308      	adds	r3, #8
 801792a:	2201      	movs	r2, #1
 801792c:	4619      	mov	r1, r3
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f000 f922 	bl	8017b78 <USBD_CtlSendData>
        break;
 8017934:	e00c      	b.n	8017950 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	3304      	adds	r3, #4
 801793a:	2201      	movs	r2, #1
 801793c:	4619      	mov	r1, r3
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f000 f91a 	bl	8017b78 <USBD_CtlSendData>
        break;
 8017944:	e004      	b.n	8017950 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8017946:	6839      	ldr	r1, [r7, #0]
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f000 f8aa 	bl	8017aa2 <USBD_CtlError>
        break;
 801794e:	bf00      	nop
}
 8017950:	bf00      	nop
 8017952:	3708      	adds	r7, #8
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017968:	3b01      	subs	r3, #1
 801796a:	2b02      	cmp	r3, #2
 801796c:	d81e      	bhi.n	80179ac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	88db      	ldrh	r3, [r3, #6]
 8017972:	2b02      	cmp	r3, #2
 8017974:	d004      	beq.n	8017980 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8017976:	6839      	ldr	r1, [r7, #0]
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f000 f892 	bl	8017aa2 <USBD_CtlError>
        break;
 801797e:	e01a      	b.n	80179b6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2201      	movs	r2, #1
 8017984:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801798c:	2b00      	cmp	r3, #0
 801798e:	d005      	beq.n	801799c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	68db      	ldr	r3, [r3, #12]
 8017994:	f043 0202 	orr.w	r2, r3, #2
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	330c      	adds	r3, #12
 80179a0:	2202      	movs	r2, #2
 80179a2:	4619      	mov	r1, r3
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f000 f8e7 	bl	8017b78 <USBD_CtlSendData>
      break;
 80179aa:	e004      	b.n	80179b6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80179ac:	6839      	ldr	r1, [r7, #0]
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f000 f877 	bl	8017aa2 <USBD_CtlError>
      break;
 80179b4:	bf00      	nop
  }
}
 80179b6:	bf00      	nop
 80179b8:	3708      	adds	r7, #8
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}

080179be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b082      	sub	sp, #8
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
 80179c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	885b      	ldrh	r3, [r3, #2]
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d106      	bne.n	80179de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2201      	movs	r2, #1
 80179d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f000 f92b 	bl	8017c34 <USBD_CtlSendStatus>
  }
}
 80179de:	bf00      	nop
 80179e0:	3708      	adds	r7, #8
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}

080179e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80179e6:	b580      	push	{r7, lr}
 80179e8:	b082      	sub	sp, #8
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	6078      	str	r0, [r7, #4]
 80179ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179f6:	3b01      	subs	r3, #1
 80179f8:	2b02      	cmp	r3, #2
 80179fa:	d80b      	bhi.n	8017a14 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	885b      	ldrh	r3, [r3, #2]
 8017a00:	2b01      	cmp	r3, #1
 8017a02:	d10c      	bne.n	8017a1e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2200      	movs	r2, #0
 8017a08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f000 f911 	bl	8017c34 <USBD_CtlSendStatus>
      }
      break;
 8017a12:	e004      	b.n	8017a1e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8017a14:	6839      	ldr	r1, [r7, #0]
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f000 f843 	bl	8017aa2 <USBD_CtlError>
      break;
 8017a1c:	e000      	b.n	8017a20 <USBD_ClrFeature+0x3a>
      break;
 8017a1e:	bf00      	nop
  }
}
 8017a20:	bf00      	nop
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017a28:	b480      	push	{r7}
 8017a2a:	b083      	sub	sp, #12
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8017a32:	683b      	ldr	r3, [r7, #0]
 8017a34:	781a      	ldrb	r2, [r3, #0]
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	785a      	ldrb	r2, [r3, #1]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	3302      	adds	r3, #2
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	b29a      	uxth	r2, r3
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	3303      	adds	r3, #3
 8017a4e:	781b      	ldrb	r3, [r3, #0]
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	021b      	lsls	r3, r3, #8
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	4413      	add	r3, r2
 8017a58:	b29a      	uxth	r2, r3
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	3304      	adds	r3, #4
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	b29a      	uxth	r2, r3
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	3305      	adds	r3, #5
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	021b      	lsls	r3, r3, #8
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	4413      	add	r3, r2
 8017a74:	b29a      	uxth	r2, r3
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	3306      	adds	r3, #6
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	3307      	adds	r3, #7
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	021b      	lsls	r3, r3, #8
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	4413      	add	r3, r2
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	80da      	strh	r2, [r3, #6]

}
 8017a96:	bf00      	nop
 8017a98:	370c      	adds	r7, #12
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa0:	4770      	bx	lr

08017aa2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8017aa2:	b580      	push	{r7, lr}
 8017aa4:	b082      	sub	sp, #8
 8017aa6:	af00      	add	r7, sp, #0
 8017aa8:	6078      	str	r0, [r7, #4]
 8017aaa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8017aac:	2180      	movs	r1, #128	; 0x80
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f002 f82a 	bl	8019b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f002 f826 	bl	8019b08 <USBD_LL_StallEP>
}
 8017abc:	bf00      	nop
 8017abe:	3708      	adds	r7, #8
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d032      	beq.n	8017b40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8017ada:	68f8      	ldr	r0, [r7, #12]
 8017adc:	f000 f834 	bl	8017b48 <USBD_GetLen>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	005b      	lsls	r3, r3, #1
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8017aee:	7dfb      	ldrb	r3, [r7, #23]
 8017af0:	1c5a      	adds	r2, r3, #1
 8017af2:	75fa      	strb	r2, [r7, #23]
 8017af4:	461a      	mov	r2, r3
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	4413      	add	r3, r2
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	7812      	ldrb	r2, [r2, #0]
 8017afe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8017b00:	7dfb      	ldrb	r3, [r7, #23]
 8017b02:	1c5a      	adds	r2, r3, #1
 8017b04:	75fa      	strb	r2, [r7, #23]
 8017b06:	461a      	mov	r2, r3
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	4413      	add	r3, r2
 8017b0c:	2203      	movs	r2, #3
 8017b0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8017b10:	e012      	b.n	8017b38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	1c5a      	adds	r2, r3, #1
 8017b16:	60fa      	str	r2, [r7, #12]
 8017b18:	7dfa      	ldrb	r2, [r7, #23]
 8017b1a:	1c51      	adds	r1, r2, #1
 8017b1c:	75f9      	strb	r1, [r7, #23]
 8017b1e:	4611      	mov	r1, r2
 8017b20:	68ba      	ldr	r2, [r7, #8]
 8017b22:	440a      	add	r2, r1
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8017b28:	7dfb      	ldrb	r3, [r7, #23]
 8017b2a:	1c5a      	adds	r2, r3, #1
 8017b2c:	75fa      	strb	r2, [r7, #23]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	4413      	add	r3, r2
 8017b34:	2200      	movs	r2, #0
 8017b36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d1e8      	bne.n	8017b12 <USBD_GetString+0x4e>
    }
  }
}
 8017b40:	bf00      	nop
 8017b42:	3718      	adds	r7, #24
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b085      	sub	sp, #20
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017b50:	2300      	movs	r3, #0
 8017b52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8017b54:	e005      	b.n	8017b62 <USBD_GetLen+0x1a>
  {
    len++;
 8017b56:	7bfb      	ldrb	r3, [r7, #15]
 8017b58:	3301      	adds	r3, #1
 8017b5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	3301      	adds	r3, #1
 8017b60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d1f5      	bne.n	8017b56 <USBD_GetLen+0xe>
  }

  return len;
 8017b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3714      	adds	r7, #20
 8017b70:	46bd      	mov	sp, r7
 8017b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b76:	4770      	bx	lr

08017b78 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	4613      	mov	r3, r2
 8017b84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	2202      	movs	r2, #2
 8017b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017b8e:	88fa      	ldrh	r2, [r7, #6]
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8017b94:	88fa      	ldrh	r2, [r7, #6]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017b9a:	88fb      	ldrh	r3, [r7, #6]
 8017b9c:	68ba      	ldr	r2, [r7, #8]
 8017b9e:	2100      	movs	r1, #0
 8017ba0:	68f8      	ldr	r0, [r7, #12]
 8017ba2:	f002 f834 	bl	8019c0e <USBD_LL_Transmit>

  return USBD_OK;
 8017ba6:	2300      	movs	r3, #0
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3710      	adds	r7, #16
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b084      	sub	sp, #16
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	4613      	mov	r3, r2
 8017bbc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017bbe:	88fb      	ldrh	r3, [r7, #6]
 8017bc0:	68ba      	ldr	r2, [r7, #8]
 8017bc2:	2100      	movs	r1, #0
 8017bc4:	68f8      	ldr	r0, [r7, #12]
 8017bc6:	f002 f822 	bl	8019c0e <USBD_LL_Transmit>

  return USBD_OK;
 8017bca:	2300      	movs	r3, #0
}
 8017bcc:	4618      	mov	r0, r3
 8017bce:	3710      	adds	r7, #16
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	4613      	mov	r3, r2
 8017be0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	2203      	movs	r2, #3
 8017be6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017bea:	88fa      	ldrh	r2, [r7, #6]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8017bf2:	88fa      	ldrh	r2, [r7, #6]
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017bfa:	88fb      	ldrh	r3, [r7, #6]
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	2100      	movs	r1, #0
 8017c00:	68f8      	ldr	r0, [r7, #12]
 8017c02:	f002 f827 	bl	8019c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c06:	2300      	movs	r3, #0
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3710      	adds	r7, #16
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	4613      	mov	r3, r2
 8017c1c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c1e:	88fb      	ldrh	r3, [r7, #6]
 8017c20:	68ba      	ldr	r2, [r7, #8]
 8017c22:	2100      	movs	r1, #0
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f002 f815 	bl	8019c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c2a:	2300      	movs	r3, #0
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3710      	adds	r7, #16
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}

08017c34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	2204      	movs	r2, #4
 8017c40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017c44:	2300      	movs	r3, #0
 8017c46:	2200      	movs	r2, #0
 8017c48:	2100      	movs	r1, #0
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f001 ffdf 	bl	8019c0e <USBD_LL_Transmit>

  return USBD_OK;
 8017c50:	2300      	movs	r3, #0
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2205      	movs	r2, #5
 8017c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	2100      	movs	r1, #0
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f001 ffef 	bl	8019c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c76:	2300      	movs	r3, #0
}
 8017c78:	4618      	mov	r0, r3
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8017c86:	f000 fa3b 	bl	8018100 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8017c8a:	480e      	ldr	r0, [pc, #56]	; (8017cc4 <APP_THREAD_Init+0x44>)
 8017c8c:	f000 ff14 	bl	8018ab8 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8017c90:	2101      	movs	r1, #1
 8017c92:	2002      	movs	r0, #2
 8017c94:	f002 f8a6 	bl	8019de4 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8017c98:	f001 f806 	bl	8018ca8 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8017c9c:	f000 fff2 	bl	8018c84 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8017ca0:	f7fd fef9 	bl	8015a96 <SHCI_C2_THREAD_Init>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8017ca8:	4a07      	ldr	r2, [pc, #28]	; (8017cc8 <APP_THREAD_Init+0x48>)
 8017caa:	2100      	movs	r1, #0
 8017cac:	4807      	ldr	r0, [pc, #28]	; (8017ccc <APP_THREAD_Init+0x4c>)
 8017cae:	f7f8 fb4d 	bl	801034c <osThreadNew>
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	4b06      	ldr	r3, [pc, #24]	; (8017cd0 <APP_THREAD_Init+0x50>)
 8017cb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8017cb8:	f000 f892 	bl	8017de0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8017cbc:	bf00      	nop
 8017cbe:	3708      	adds	r7, #8
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}
 8017cc4:	20030838 	.word	0x20030838
 8017cc8:	0801bf10 	.word	0x0801bf10
 8017ccc:	080181bd 	.word	0x080181bd
 8017cd0:	20027748 	.word	0x20027748

08017cd4 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2b1a      	cmp	r3, #26
 8017ce2:	d861      	bhi.n	8017da8 <APP_THREAD_Error+0xd4>
 8017ce4:	a201      	add	r2, pc, #4	; (adr r2, 8017cec <APP_THREAD_Error+0x18>)
 8017ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cea:	bf00      	nop
 8017cec:	08017d59 	.word	0x08017d59
 8017cf0:	08017d63 	.word	0x08017d63
 8017cf4:	08017d6d 	.word	0x08017d6d
 8017cf8:	08017d77 	.word	0x08017d77
 8017cfc:	08017d81 	.word	0x08017d81
 8017d00:	08017d8b 	.word	0x08017d8b
 8017d04:	08017d95 	.word	0x08017d95
 8017d08:	08017da9 	.word	0x08017da9
 8017d0c:	08017da9 	.word	0x08017da9
 8017d10:	08017da9 	.word	0x08017da9
 8017d14:	08017da9 	.word	0x08017da9
 8017d18:	08017da9 	.word	0x08017da9
 8017d1c:	08017da9 	.word	0x08017da9
 8017d20:	08017da9 	.word	0x08017da9
 8017d24:	08017da9 	.word	0x08017da9
 8017d28:	08017da9 	.word	0x08017da9
 8017d2c:	08017da9 	.word	0x08017da9
 8017d30:	08017da9 	.word	0x08017da9
 8017d34:	08017da9 	.word	0x08017da9
 8017d38:	08017da9 	.word	0x08017da9
 8017d3c:	08017da9 	.word	0x08017da9
 8017d40:	08017da9 	.word	0x08017da9
 8017d44:	08017da9 	.word	0x08017da9
 8017d48:	08017da9 	.word	0x08017da9
 8017d4c:	08017da9 	.word	0x08017da9
 8017d50:	08017da9 	.word	0x08017da9
 8017d54:	08017d9f 	.word	0x08017d9f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	4818      	ldr	r0, [pc, #96]	; (8017dbc <APP_THREAD_Error+0xe8>)
 8017d5c:	f000 f9c4 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d60:	e027      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8017d62:	6839      	ldr	r1, [r7, #0]
 8017d64:	4816      	ldr	r0, [pc, #88]	; (8017dc0 <APP_THREAD_Error+0xec>)
 8017d66:	f000 f9bf 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d6a:	e022      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8017d6c:	6839      	ldr	r1, [r7, #0]
 8017d6e:	4815      	ldr	r0, [pc, #84]	; (8017dc4 <APP_THREAD_Error+0xf0>)
 8017d70:	f000 f9ba 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d74:	e01d      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8017d76:	6839      	ldr	r1, [r7, #0]
 8017d78:	4813      	ldr	r0, [pc, #76]	; (8017dc8 <APP_THREAD_Error+0xf4>)
 8017d7a:	f000 f9b5 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d7e:	e018      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8017d80:	6839      	ldr	r1, [r7, #0]
 8017d82:	4812      	ldr	r0, [pc, #72]	; (8017dcc <APP_THREAD_Error+0xf8>)
 8017d84:	f000 f9b0 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d88:	e013      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8017d8a:	6839      	ldr	r1, [r7, #0]
 8017d8c:	4810      	ldr	r0, [pc, #64]	; (8017dd0 <APP_THREAD_Error+0xfc>)
 8017d8e:	f000 f9ab 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d92:	e00e      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8017d94:	6839      	ldr	r1, [r7, #0]
 8017d96:	480f      	ldr	r0, [pc, #60]	; (8017dd4 <APP_THREAD_Error+0x100>)
 8017d98:	f000 f9a6 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017d9c:	e009      	b.n	8017db2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8017d9e:	6839      	ldr	r1, [r7, #0]
 8017da0:	480d      	ldr	r0, [pc, #52]	; (8017dd8 <APP_THREAD_Error+0x104>)
 8017da2:	f000 f9a1 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017da6:	e004      	b.n	8017db2 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8017da8:	2100      	movs	r1, #0
 8017daa:	480c      	ldr	r0, [pc, #48]	; (8017ddc <APP_THREAD_Error+0x108>)
 8017dac:	f000 f99c 	bl	80180e8 <APP_THREAD_TraceError>
    break;
 8017db0:	bf00      	nop
  }
}
 8017db2:	bf00      	nop
 8017db4:	3708      	adds	r7, #8
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	0801b87c 	.word	0x0801b87c
 8017dc0:	0801b8a0 	.word	0x0801b8a0
 8017dc4:	0801b8c4 	.word	0x0801b8c4
 8017dc8:	0801b8e4 	.word	0x0801b8e4
 8017dcc:	0801b904 	.word	0x0801b904
 8017dd0:	0801b924 	.word	0x0801b924
 8017dd4:	0801b940 	.word	0x0801b940
 8017dd8:	0801b96c 	.word	0x0801b96c
 8017ddc:	0801b990 	.word	0x0801b990

08017de0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8017de0:	b590      	push	{r4, r7, lr}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8017de6:	2000      	movs	r0, #0
 8017de8:	f7fd fa62 	bl	80152b0 <otInstanceErasePersistentInfo>
 8017dec:	4603      	mov	r3, r0
 8017dee:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017df0:	79fb      	ldrb	r3, [r7, #7]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d004      	beq.n	8017e00 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8017df6:	79fb      	ldrb	r3, [r7, #7]
 8017df8:	4619      	mov	r1, r3
 8017dfa:	2006      	movs	r0, #6
 8017dfc:	f7ff ff6a 	bl	8017cd4 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8017e00:	2000      	movs	r0, #0
 8017e02:	f7fd f9f8 	bl	80151f6 <otInstanceFinalize>
  otInstanceInitSingle();
 8017e06:	f7fd f9cf 	bl	80151a8 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	497b      	ldr	r1, [pc, #492]	; (8017ffc <APP_THREAD_DeviceConfig+0x21c>)
 8017e0e:	2000      	movs	r0, #0
 8017e10:	f7fd fa18 	bl	8015244 <otSetStateChangedCallback>
 8017e14:	4603      	mov	r3, r0
 8017e16:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e18:	79fb      	ldrb	r3, [r7, #7]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d004      	beq.n	8017e28 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8017e1e:	79fb      	ldrb	r3, [r7, #7]
 8017e20:	4619      	mov	r1, r3
 8017e22:	2001      	movs	r0, #1
 8017e24:	f7ff ff56 	bl	8017cd4 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8017e28:	2117      	movs	r1, #23
 8017e2a:	2000      	movs	r0, #0
 8017e2c:	f7fd fb01 	bl	8015432 <otLinkSetChannel>
 8017e30:	4603      	mov	r3, r0
 8017e32:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e34:	79fb      	ldrb	r3, [r7, #7]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d004      	beq.n	8017e44 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8017e3a:	79fb      	ldrb	r3, [r7, #7]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	2002      	movs	r0, #2
 8017e40:	f7ff ff48 	bl	8017cd4 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8017e44:	f241 2134 	movw	r1, #4660	; 0x1234
 8017e48:	2000      	movs	r0, #0
 8017e4a:	f7fd fb22 	bl	8015492 <otLinkSetPanId>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e52:	79fb      	ldrb	r3, [r7, #7]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d004      	beq.n	8017e62 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8017e58:	79fb      	ldrb	r3, [r7, #7]
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	2003      	movs	r0, #3
 8017e5e:	f7ff ff39 	bl	8017cd4 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8017e62:	2101      	movs	r1, #1
 8017e64:	2000      	movs	r0, #0
 8017e66:	f7fd fa4c 	bl	8015302 <otIp6SetEnabled>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e6e:	79fb      	ldrb	r3, [r7, #7]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d004      	beq.n	8017e7e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8017e74:	79fb      	ldrb	r3, [r7, #7]
 8017e76:	4619      	mov	r1, r3
 8017e78:	2004      	movs	r0, #4
 8017e7a:	f7ff ff2b 	bl	8017cd4 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8017e7e:	2101      	movs	r1, #1
 8017e80:	2000      	movs	r0, #0
 8017e82:	f7fe f8a7 	bl	8015fd4 <otThreadSetEnabled>
 8017e86:	4603      	mov	r3, r0
 8017e88:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8017e8a:	79fb      	ldrb	r3, [r7, #7]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d004      	beq.n	8017e9a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8017e90:	79fb      	ldrb	r3, [r7, #7]
 8017e92:	4619      	mov	r1, r3
 8017e94:	2005      	movs	r0, #5
 8017e96:	f7ff ff1d 	bl	8017cd4 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 8017e9a:	2100      	movs	r1, #0
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	f7fe f899 	bl	8015fd4 <otThreadSetEnabled>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017ea6:	79fb      	ldrb	r3, [r7, #7]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d004      	beq.n	8017eb6 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8017eac:	79fb      	ldrb	r3, [r7, #7]
 8017eae:	4619      	mov	r1, r3
 8017eb0:	2005      	movs	r0, #5
 8017eb2:	f7ff ff0f 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 8017eb6:	2100      	movs	r1, #0
 8017eb8:	2000      	movs	r0, #0
 8017eba:	f7fd fa22 	bl	8015302 <otIp6SetEnabled>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017ec2:	79fb      	ldrb	r3, [r7, #7]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d004      	beq.n	8017ed2 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8017ec8:	79fb      	ldrb	r3, [r7, #7]
 8017eca:	4619      	mov	r1, r3
 8017ecc:	2004      	movs	r0, #4
 8017ece:	f7ff ff01 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8017ed2:	2106      	movs	r1, #6
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	f7fd fdab 	bl	8015a30 <otPlatRadioSetTransmitPower>
 8017eda:	4603      	mov	r3, r0
 8017edc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017ede:	79fb      	ldrb	r3, [r7, #7]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d004      	beq.n	8017eee <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017ee4:	79fb      	ldrb	r3, [r7, #7]
 8017ee6:	4619      	mov	r1, r3
 8017ee8:	2002      	movs	r0, #2
 8017eea:	f7ff fef3 	bl	8017cd4 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8017eee:	2103      	movs	r1, #3
 8017ef0:	2000      	movs	r0, #0
 8017ef2:	f7fc fdef 	bl	8014ad4 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 8017ef6:	2102      	movs	r1, #2
 8017ef8:	2000      	movs	r0, #0
 8017efa:	f7fc fdbc 	bl	8014a76 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 8017efe:	4940      	ldr	r1, [pc, #256]	; (8018000 <APP_THREAD_DeviceConfig+0x220>)
 8017f00:	2000      	movs	r0, #0
 8017f02:	f7fe f8c6 	bl	8016092 <otThreadSetMasterKey>
 8017f06:	4603      	mov	r3, r0
 8017f08:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f0a:	79fb      	ldrb	r3, [r7, #7]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d004      	beq.n	8017f1a <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017f10:	79fb      	ldrb	r3, [r7, #7]
 8017f12:	4619      	mov	r1, r3
 8017f14:	2002      	movs	r0, #2
 8017f16:	f7ff fedd 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 8017f1a:	493a      	ldr	r1, [pc, #232]	; (8018004 <APP_THREAD_DeviceConfig+0x224>)
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	f7fe f8e7 	bl	80160f0 <otThreadSetNetworkName>
 8017f22:	4603      	mov	r3, r0
 8017f24:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f26:	79fb      	ldrb	r3, [r7, #7]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d004      	beq.n	8017f36 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017f2c:	79fb      	ldrb	r3, [r7, #7]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	2002      	movs	r0, #2
 8017f32:	f7ff fecf 	bl	8017cd4 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8017f36:	4934      	ldr	r1, [pc, #208]	; (8018008 <APP_THREAD_DeviceConfig+0x228>)
 8017f38:	2000      	movs	r0, #0
 8017f3a:	f7fe f87b 	bl	8016034 <otThreadSetExtendedPanId>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f42:	79fb      	ldrb	r3, [r7, #7]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d004      	beq.n	8017f52 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8017f48:	79fb      	ldrb	r3, [r7, #7]
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	2002      	movs	r0, #2
 8017f4e:	f7ff fec1 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8017f52:	2101      	movs	r1, #1
 8017f54:	2000      	movs	r0, #0
 8017f56:	f7fd f9d4 	bl	8015302 <otIp6SetEnabled>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f5e:	79fb      	ldrb	r3, [r7, #7]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d004      	beq.n	8017f6e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8017f64:	79fb      	ldrb	r3, [r7, #7]
 8017f66:	4619      	mov	r1, r3
 8017f68:	2004      	movs	r0, #4
 8017f6a:	f7ff feb3 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 8017f6e:	2101      	movs	r1, #1
 8017f70:	2000      	movs	r0, #0
 8017f72:	f7fe f82f 	bl	8015fd4 <otThreadSetEnabled>
 8017f76:	4603      	mov	r3, r0
 8017f78:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8017f7a:	79fb      	ldrb	r3, [r7, #7]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d004      	beq.n	8017f8a <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8017f80:	79fb      	ldrb	r3, [r7, #7]
 8017f82:	4619      	mov	r1, r3
 8017f84:	2005      	movs	r0, #5
 8017f86:	f7ff fea5 	bl	8017cd4 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8017f8a:	f241 6133 	movw	r1, #5683	; 0x1633
 8017f8e:	2000      	movs	r0, #0
 8017f90:	f7fd f878 	bl	8015084 <otCoapStart>
 8017f94:	4603      	mov	r3, r0
 8017f96:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8017f98:	491c      	ldr	r1, [pc, #112]	; (801800c <APP_THREAD_DeviceConfig+0x22c>)
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	f7fd f8a2 	bl	80150e4 <otCoapAddResource>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 8017fa4:	491a      	ldr	r1, [pc, #104]	; (8018010 <APP_THREAD_DeviceConfig+0x230>)
 8017fa6:	2000      	movs	r0, #0
 8017fa8:	f7fd f89c 	bl	80150e4 <otCoapAddResource>
 8017fac:	4603      	mov	r3, r0
 8017fae:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 8017fb0:	4918      	ldr	r1, [pc, #96]	; (8018014 <APP_THREAD_DeviceConfig+0x234>)
 8017fb2:	2000      	movs	r0, #0
 8017fb4:	f7fd f896 	bl	80150e4 <otCoapAddResource>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 8017fbc:	4916      	ldr	r1, [pc, #88]	; (8018018 <APP_THREAD_DeviceConfig+0x238>)
 8017fbe:	2000      	movs	r0, #0
 8017fc0:	f7fd f890 	bl	80150e4 <otCoapAddResource>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	71fb      	strb	r3, [r7, #7]
#ifdef BORDER_ROUTER_NODE
	error = otCoapAddResource(NULL, &OT_Border_Log_Ressource);
 8017fc8:	4914      	ldr	r1, [pc, #80]	; (801801c <APP_THREAD_DeviceConfig+0x23c>)
 8017fca:	2000      	movs	r0, #0
 8017fcc:	f7fd f88a 	bl	80150e4 <otCoapAddResource>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	71fb      	strb	r3, [r7, #7]
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 8017fd4:	4912      	ldr	r1, [pc, #72]	; (8018020 <APP_THREAD_DeviceConfig+0x240>)
 8017fd6:	4813      	ldr	r0, [pc, #76]	; (8018024 <APP_THREAD_DeviceConfig+0x244>)
 8017fd8:	f7fd f9f9 	bl	80153ce <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 8017fdc:	4a12      	ldr	r2, [pc, #72]	; (8018028 <APP_THREAD_DeviceConfig+0x248>)
 8017fde:	4b10      	ldr	r3, [pc, #64]	; (8018020 <APP_THREAD_DeviceConfig+0x240>)
 8017fe0:	4614      	mov	r4, r2
 8017fe2:	6818      	ldr	r0, [r3, #0]
 8017fe4:	6859      	ldr	r1, [r3, #4]
 8017fe6:	689a      	ldr	r2, [r3, #8]
 8017fe8:	68db      	ldr	r3, [r3, #12]
 8017fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 8017fec:	480f      	ldr	r0, [pc, #60]	; (801802c <APP_THREAD_DeviceConfig+0x24c>)
 8017fee:	f000 f8ff 	bl	80181f0 <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 8017ff2:	bf00      	nop
 8017ff4:	370c      	adds	r7, #12
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd90      	pop	{r4, r7, pc}
 8017ffa:	bf00      	nop
 8017ffc:	08018031 	.word	0x08018031
 8018000:	0801bf88 	.word	0x0801bf88
 8018004:	0801bfa0 	.word	0x0801bfa0
 8018008:	0801bf98 	.word	0x0801bf98
 801800c:	20000198 	.word	0x20000198
 8018010:	200001a8 	.word	0x200001a8
 8018014:	200001b8 	.word	0x200001b8
 8018018:	200001c8 	.word	0x200001c8
 801801c:	200001d8 	.word	0x200001d8
 8018020:	20028a3c 	.word	0x20028a3c
 8018024:	0801b9a0 	.word	0x0801b9a0
 8018028:	20027818 	.word	0x20027818
 801802c:	20000200 	.word	0x20000200

08018030 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8018030:	b590      	push	{r4, r7, lr}
 8018032:	b083      	sub	sp, #12
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f003 0304 	and.w	r3, r3, #4
 8018040:	2b00      	cmp	r3, #0
 8018042:	d04a      	beq.n	80180da <APP_THREAD_StateNotif+0xaa>
  {
    switch (otThreadGetDeviceRole(NULL))
 8018044:	2000      	movs	r0, #0
 8018046:	f7fe f882 	bl	801614e <otThreadGetDeviceRole>
 801804a:	4603      	mov	r3, r0
 801804c:	2b04      	cmp	r3, #4
 801804e:	d841      	bhi.n	80180d4 <APP_THREAD_StateNotif+0xa4>
 8018050:	a201      	add	r2, pc, #4	; (adr r2, 8018058 <APP_THREAD_StateNotif+0x28>)
 8018052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018056:	bf00      	nop
 8018058:	0801806d 	.word	0x0801806d
 801805c:	0801807d 	.word	0x0801807d
 8018060:	0801808d 	.word	0x0801808d
 8018064:	080180a5 	.word	0x080180a5
 8018068:	080180bd 	.word	0x080180bd
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 801806c:	4a1d      	ldr	r2, [pc, #116]	; (80180e4 <APP_THREAD_StateNotif+0xb4>)
 801806e:	f04f 0300 	mov.w	r3, #0
 8018072:	f04f 0400 	mov.w	r4, #0
 8018076:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 801807a:	e02f      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 801807c:	4a19      	ldr	r2, [pc, #100]	; (80180e4 <APP_THREAD_StateNotif+0xb4>)
 801807e:	f04f 0300 	mov.w	r3, #0
 8018082:	f04f 0400 	mov.w	r4, #0
 8018086:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 801808a:	e027      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 801808c:	2001      	movs	r0, #1
 801808e:	f7ec f8eb 	bl	8004268 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8018092:	2002      	movs	r0, #2
 8018094:	f7ec f902 	bl	800429c <BSP_LED_Off>
			BSP_LED_Off(LED_BLUE);
 8018098:	2000      	movs	r0, #0
 801809a:	f7ec f8ff 	bl	800429c <BSP_LED_Off>
#endif
			APP_THREAD_UpdateBorderRouter();
 801809e:	f000 f91b 	bl	80182d8 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 80180a2:	e01b      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
 80180a4:	2001      	movs	r0, #1
 80180a6:	f7ec f8f9 	bl	800429c <BSP_LED_Off>
			BSP_LED_Off(LED_RED);
 80180aa:	2002      	movs	r0, #2
 80180ac:	f7ec f8f6 	bl	800429c <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 80180b0:	2000      	movs	r0, #0
 80180b2:	f7ec f8d9 	bl	8004268 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 80180b6:	f000 f90f 	bl	80182d8 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 80180ba:	e00f      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
 80180bc:	2001      	movs	r0, #1
 80180be:	f7ec f8d3 	bl	8004268 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 80180c2:	2002      	movs	r0, #2
 80180c4:	f7ec f8ea 	bl	800429c <BSP_LED_Off>
			BSP_LED_On(LED_BLUE);
 80180c8:	2000      	movs	r0, #0
 80180ca:	f7ec f8cd 	bl	8004268 <BSP_LED_On>
#endif
			APP_THREAD_UpdateBorderRouter();
 80180ce:	f000 f903 	bl	80182d8 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 80180d2:	e003      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 80180d4:	f000 f900 	bl	80182d8 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 80180d8:	e000      	b.n	80180dc <APP_THREAD_StateNotif+0xac>
    }
  }
 80180da:	bf00      	nop
}
 80180dc:	bf00      	nop
 80180de:	370c      	adds	r7, #12
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd90      	pop	{r4, r7, pc}
 80180e4:	20027818 	.word	0x20027818

080180e8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80180e8:	b480      	push	{r7}
 80180ea:	b083      	sub	sp, #12
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80180f2:	bf00      	nop
 80180f4:	370c      	adds	r7, #12
 80180f6:	46bd      	mov	sp, r7
 80180f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fc:	4770      	bx	lr
	...

08018100 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b088      	sub	sp, #32
 8018104:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8018106:	1d3b      	adds	r3, r7, #4
 8018108:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801810a:	6978      	ldr	r0, [r7, #20]
 801810c:	f7fd fcf0 	bl	8015af0 <SHCI_GetWirelessFwInfo>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d004      	beq.n	8018120 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8018116:	2101      	movs	r1, #1
 8018118:	201a      	movs	r0, #26
 801811a:	f7ff fddb 	bl	8017cd4 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801811e:	e03d      	b.n	801819c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8018120:	4a20      	ldr	r2, [pc, #128]	; (80181a4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8018122:	2101      	movs	r1, #1
 8018124:	2000      	movs	r0, #0
 8018126:	f7ed fd2d 	bl	8005b84 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801812a:	4a1f      	ldr	r2, [pc, #124]	; (80181a8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801812c:	2101      	movs	r1, #1
 801812e:	2000      	movs	r0, #0
 8018130:	f7ed fd28 	bl	8005b84 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	4619      	mov	r1, r3
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	785b      	ldrb	r3, [r3, #1]
 801813e:	461a      	mov	r2, r3
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	789b      	ldrb	r3, [r3, #2]
 8018144:	9301      	str	r3, [sp, #4]
 8018146:	9200      	str	r2, [sp, #0]
 8018148:	460b      	mov	r3, r1
 801814a:	4a18      	ldr	r2, [pc, #96]	; (80181ac <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 801814c:	2101      	movs	r1, #1
 801814e:	2000      	movs	r0, #0
 8018150:	f7ed fd18 	bl	8005b84 <logApplication>
    switch(p_wireless_info->StackType)
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	7a5b      	ldrb	r3, [r3, #9]
 8018158:	2b11      	cmp	r3, #17
 801815a:	d009      	beq.n	8018170 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 801815c:	2b50      	cmp	r3, #80	; 0x50
 801815e:	d00d      	beq.n	801817c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8018160:	2b10      	cmp	r3, #16
 8018162:	d111      	bne.n	8018188 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8018164:	4a12      	ldr	r2, [pc, #72]	; (80181b0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8018166:	2101      	movs	r1, #1
 8018168:	2000      	movs	r0, #0
 801816a:	f7ed fd0b 	bl	8005b84 <logApplication>
      break;
 801816e:	e010      	b.n	8018192 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8018170:	4a10      	ldr	r2, [pc, #64]	; (80181b4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8018172:	2101      	movs	r1, #1
 8018174:	2000      	movs	r0, #0
 8018176:	f7ed fd05 	bl	8005b84 <logApplication>
      break;
 801817a:	e00a      	b.n	8018192 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 801817c:	4a0e      	ldr	r2, [pc, #56]	; (80181b8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801817e:	2101      	movs	r1, #1
 8018180:	2000      	movs	r0, #0
 8018182:	f7ed fcff 	bl	8005b84 <logApplication>
      break;
 8018186:	e004      	b.n	8018192 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8018188:	2101      	movs	r1, #1
 801818a:	201a      	movs	r0, #26
 801818c:	f7ff fda2 	bl	8017cd4 <APP_THREAD_Error>
      break;
 8018190:	bf00      	nop
    APP_DBG("**********************************************************");
 8018192:	4a04      	ldr	r2, [pc, #16]	; (80181a4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8018194:	2101      	movs	r1, #1
 8018196:	2000      	movs	r0, #0
 8018198:	f7ed fcf4 	bl	8005b84 <logApplication>
}
 801819c:	bf00      	nop
 801819e:	3718      	adds	r7, #24
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}
 80181a4:	0801b9a8 	.word	0x0801b9a8
 80181a8:	0801b9e4 	.word	0x0801b9e4
 80181ac:	0801ba00 	.word	0x0801ba00
 80181b0:	0801ba18 	.word	0x0801ba18
 80181b4:	0801ba30 	.word	0x0801ba30
 80181b8:	0801ba48 	.word	0x0801ba48

080181bc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b082      	sub	sp, #8
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80181c4:	f04f 32ff 	mov.w	r2, #4294967295
 80181c8:	2101      	movs	r1, #1
 80181ca:	2001      	movs	r0, #1
 80181cc:	f7f8 fa1c 	bl	8010608 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 80181d0:	f000 fd9c 	bl	8018d0c <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80181d4:	e7f6      	b.n	80181c4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080181d6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b082      	sub	sp, #8
 80181da:	af00      	add	r7, sp, #0
 80181dc:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80181de:	f04f 32ff 	mov.w	r2, #4294967295
 80181e2:	2101      	movs	r1, #1
 80181e4:	2001      	movs	r0, #1
 80181e6:	f7f8 fa0f 	bl	8010608 <osThreadFlagsWait>
    Send_CLI_To_M0();
 80181ea:	f000 fd11 	bl	8018c10 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80181ee:	e7f6      	b.n	80181de <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080181f0 <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 80181f0:	b480      	push	{r7}
 80181f2:	b085      	sub	sp, #20
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 80181f8:	2300      	movs	r3, #0
 80181fa:	73fb      	strb	r3, [r7, #15]
 80181fc:	e00c      	b.n	8018218 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 80181fe:	7bfa      	ldrb	r2, [r7, #15]
 8018200:	4b0a      	ldr	r3, [pc, #40]	; (801822c <stm32UID+0x3c>)
 8018202:	4413      	add	r3, r2
 8018204:	4619      	mov	r1, r3
 8018206:	7bfb      	ldrb	r3, [r7, #15]
 8018208:	687a      	ldr	r2, [r7, #4]
 801820a:	4413      	add	r3, r2
 801820c:	780a      	ldrb	r2, [r1, #0]
 801820e:	b2d2      	uxtb	r2, r2
 8018210:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 8018212:	7bfb      	ldrb	r3, [r7, #15]
 8018214:	3301      	adds	r3, #1
 8018216:	73fb      	strb	r3, [r7, #15]
 8018218:	7bfb      	ldrb	r3, [r7, #15]
 801821a:	2b0b      	cmp	r3, #11
 801821c:	d9ef      	bls.n	80181fe <stm32UID+0xe>
    }
  }
 801821e:	bf00      	nop
 8018220:	3714      	adds	r7, #20
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr
 801822a:	bf00      	nop
 801822c:	1fff7590 	.word	0x1fff7590

08018230 <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8018230:	b480      	push	{r7}
 8018232:	b085      	sub	sp, #20
 8018234:	af00      	add	r7, sp, #0
 8018236:	60f8      	str	r0, [r7, #12]
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	607a      	str	r2, [r7, #4]
 801823c:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 801823e:	bf00      	nop
 8018240:	3714      	adds	r7, #20
 8018242:	46bd      	mov	sp, r7
 8018244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018248:	4770      	bx	lr
	...

0801824c <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 801824c:	b5b0      	push	{r4, r5, r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 801825a:	68b8      	ldr	r0, [r7, #8]
 801825c:	f7fd f974 	bl	8015548 <otMessageGetOffset>
 8018260:	4603      	mov	r3, r0
 8018262:	4619      	mov	r1, r3
 8018264:	2318      	movs	r3, #24
 8018266:	4a0e      	ldr	r2, [pc, #56]	; (80182a0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8018268:	68b8      	ldr	r0, [r7, #8]
 801826a:	f7fd f9d2 	bl	8015612 <otMessageRead>
 801826e:	4603      	mov	r3, r0
 8018270:	2b18      	cmp	r3, #24
 8018272:	d110      	bne.n	8018296 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8018274:	4a0b      	ldr	r2, [pc, #44]	; (80182a4 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8018276:	4b0a      	ldr	r3, [pc, #40]	; (80182a0 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8018278:	4614      	mov	r4, r2
 801827a:	461d      	mov	r5, r3
 801827c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801827e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018280:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018284:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8018288:	4b06      	ldr	r3, [pc, #24]	; (80182a4 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 801828a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801828e:	4618      	mov	r0, r3
 8018290:	4621      	mov	r1, r4
 8018292:	f000 f9b5 	bl	8018600 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 8018296:	bf00      	nop
 8018298:	3710      	adds	r7, #16
 801829a:	46bd      	mov	sp, r7
 801829c:	bdb0      	pop	{r4, r5, r7, pc}
 801829e:	bf00      	nop
 80182a0:	20027830 	.word	0x20027830
 80182a4:	20027818 	.word	0x20027818

080182a8 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 80182b6:	4a06      	ldr	r2, [pc, #24]	; (80182d0 <APP_THREAD_DummyReqHandler+0x28>)
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 80182bc:	4a05      	ldr	r2, [pc, #20]	; (80182d4 <APP_THREAD_DummyReqHandler+0x2c>)
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6013      	str	r3, [r2, #0]
}
 80182c2:	bf00      	nop
 80182c4:	3714      	adds	r7, #20
 80182c6:	46bd      	mov	sp, r7
 80182c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182cc:	4770      	bx	lr
 80182ce:	bf00      	nop
 80182d0:	200289f8 	.word	0x200289f8
 80182d4:	20028a50 	.word	0x20028a50

080182d8 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 80182d8:	b580      	push	{r7, lr}
 80182da:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 80182dc:	4906      	ldr	r1, [pc, #24]	; (80182f8 <APP_THREAD_UpdateBorderRouter+0x20>)
 80182de:	4807      	ldr	r0, [pc, #28]	; (80182fc <APP_THREAD_UpdateBorderRouter+0x24>)
 80182e0:	f7fd f83f 	bl	8015362 <otIp6IsAddressEqual>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d003      	beq.n	80182f2 <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 80182ea:	f000 f809 	bl	8018300 <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 80182ee:	f000 f81d 	bl	801832c <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 80182f2:	bf00      	nop
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	20027818 	.word	0x20027818
 80182fc:	20028a3c 	.word	0x20028a3c

08018300 <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 8018300:	b580      	push	{r7, lr}
 8018302:	b084      	sub	sp, #16
 8018304:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 8018306:	2301      	movs	r3, #1
 8018308:	9302      	str	r3, [sp, #8]
 801830a:	2301      	movs	r3, #1
 801830c:	9301      	str	r3, [sp, #4]
 801830e:	2300      	movs	r3, #0
 8018310:	9300      	str	r3, [sp, #0]
 8018312:	4b04      	ldr	r3, [pc, #16]	; (8018324 <APP_THREAD_SyncWithBorderRouter+0x24>)
 8018314:	4a04      	ldr	r2, [pc, #16]	; (8018328 <APP_THREAD_SyncWithBorderRouter+0x28>)
 8018316:	2100      	movs	r1, #0
 8018318:	2000      	movs	r0, #0
 801831a:	f000 fab9 	bl	8018890 <APP_THREAD_SendCoapMsgForBorderSync>
}
 801831e:	bf00      	nop
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}
 8018324:	0801bf58 	.word	0x0801bf58
 8018328:	20028a3c 	.word	0x20028a3c

0801832c <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 801832c:	b580      	push	{r7, lr}
 801832e:	b084      	sub	sp, #16
 8018330:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, NO_ACK,
 8018332:	2301      	movs	r3, #1
 8018334:	9302      	str	r3, [sp, #8]
 8018336:	2303      	movs	r3, #3
 8018338:	9301      	str	r3, [sp, #4]
 801833a:	2300      	movs	r3, #0
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	4b04      	ldr	r3, [pc, #16]	; (8018350 <APP_THREAD_SendMyInfo+0x24>)
 8018340:	4a04      	ldr	r2, [pc, #16]	; (8018354 <APP_THREAD_SendMyInfo+0x28>)
 8018342:	2120      	movs	r1, #32
 8018344:	4804      	ldr	r0, [pc, #16]	; (8018358 <APP_THREAD_SendMyInfo+0x2c>)
 8018346:	f000 f9c5 	bl	80186d4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 801834a:	bf00      	nop
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}
 8018350:	0801bf78 	.word	0x0801bf78
 8018354:	20027818 	.word	0x20027818
 8018358:	200001e8 	.word	0x200001e8

0801835c <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 801835c:	b580      	push	{r7, lr}
 801835e:	b088      	sub	sp, #32
 8018360:	af04      	add	r7, sp, #16
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	460b      	mov	r3, r1
 8018366:	607a      	str	r2, [r7, #4]
 8018368:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 801836a:	7afb      	ldrb	r3, [r7, #11]
 801836c:	b299      	uxth	r1, r3
 801836e:	2301      	movs	r3, #1
 8018370:	9302      	str	r3, [sp, #8]
 8018372:	2303      	movs	r3, #3
 8018374:	9301      	str	r3, [sp, #4]
 8018376:	2300      	movs	r3, #0
 8018378:	9300      	str	r3, [sp, #0]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	4a03      	ldr	r2, [pc, #12]	; (801838c <APP_THREAD_SendBorderMessage+0x30>)
 801837e:	68f8      	ldr	r0, [r7, #12]
 8018380:	f000 f9a8 	bl	80186d4 <APP_THREAD_SendCoapMsg>
}
 8018384:	bf00      	nop
 8018386:	3710      	adds	r7, #16
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}
 801838c:	20027818 	.word	0x20027818

08018390 <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 8018390:	b580      	push	{r7, lr}
 8018392:	b086      	sub	sp, #24
 8018394:	af04      	add	r7, sp, #16
 8018396:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 8018398:	2301      	movs	r3, #1
 801839a:	9302      	str	r3, [sp, #8]
 801839c:	2303      	movs	r3, #3
 801839e:	9301      	str	r3, [sp, #4]
 80183a0:	2300      	movs	r3, #0
 80183a2:	9300      	str	r3, [sp, #0]
 80183a4:	4b04      	ldr	r3, [pc, #16]	; (80183b8 <APP_THREAD_SendBorderPacket+0x28>)
 80183a6:	4a05      	ldr	r2, [pc, #20]	; (80183bc <APP_THREAD_SendBorderPacket+0x2c>)
 80183a8:	21cc      	movs	r1, #204	; 0xcc
 80183aa:	6878      	ldr	r0, [r7, #4]
 80183ac:	f000 f992 	bl	80186d4 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 80183b0:	bf00      	nop
 80183b2:	3708      	adds	r7, #8
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	0801bf68 	.word	0x0801bf68
 80183bc:	20027818 	.word	0x20027818

080183c0 <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80183cc:	68f8      	ldr	r0, [r7, #12]
 80183ce:	f7fc fd3a 	bl	8014e46 <otCoapHeaderGetCode>
 80183d2:	4603      	mov	r3, r0
 80183d4:	2b01      	cmp	r3, #1
 80183d6:	d107      	bne.n	80183e8 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	b299      	uxth	r1, r3
 80183dc:	2304      	movs	r3, #4
 80183de:	4a23      	ldr	r2, [pc, #140]	; (801846c <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80183e0:	68f8      	ldr	r0, [r7, #12]
 80183e2:	f000 fb0b 	bl	80189fc <APP_THREAD_SendDataResponse>
			break;
 80183e6:	e03d      	b.n	8018464 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80183e8:	68b8      	ldr	r0, [r7, #8]
 80183ea:	f7fd f8ad 	bl	8015548 <otMessageGetOffset>
 80183ee:	4603      	mov	r3, r0
 80183f0:	4619      	mov	r1, r3
 80183f2:	2304      	movs	r3, #4
 80183f4:	4a1d      	ldr	r2, [pc, #116]	; (801846c <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80183f6:	68b8      	ldr	r0, [r7, #8]
 80183f8:	f7fd f90b 	bl	8015612 <otMessageRead>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b04      	cmp	r3, #4
 8018400:	d112      	bne.n	8018428 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f7fc fd1f 	bl	8014e46 <otCoapHeaderGetCode>
 8018408:	4603      	mov	r3, r0
 801840a:	2b03      	cmp	r3, #3
 801840c:	d005      	beq.n	801841a <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 801840e:	68f8      	ldr	r0, [r7, #12]
 8018410:	f7fc fd19 	bl	8014e46 <otCoapHeaderGetCode>
 8018414:	4603      	mov	r3, r0
 8018416:	2b02      	cmp	r3, #2
 8018418:	d106      	bne.n	8018428 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 801841a:	4b15      	ldr	r3, [pc, #84]	; (8018470 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 801841c:	6818      	ldr	r0, [r3, #0]
 801841e:	2300      	movs	r3, #0
 8018420:	2200      	movs	r2, #0
 8018422:	4912      	ldr	r1, [pc, #72]	; (801846c <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 8018424:	f7f8 fe00 	bl	8011028 <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 8018428:	4a12      	ldr	r2, [pc, #72]	; (8018474 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 801842e:	4a12      	ldr	r2, [pc, #72]	; (8018478 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8018434:	68f8      	ldr	r0, [r7, #12]
 8018436:	f7fc fcd8 	bl	8014dea <otCoapHeaderGetType>
 801843a:	4603      	mov	r3, r0
 801843c:	2b00      	cmp	r3, #0
 801843e:	d107      	bne.n	8018450 <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	b299      	uxth	r1, r3
 8018444:	2300      	movs	r3, #0
 8018446:	2200      	movs	r2, #0
 8018448:	68f8      	ldr	r0, [r7, #12]
 801844a:	f000 fad7 	bl	80189fc <APP_THREAD_SendDataResponse>
			break;
 801844e:	e009      	b.n	8018464 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8018450:	68b8      	ldr	r0, [r7, #8]
 8018452:	f7fd f879 	bl	8015548 <otMessageGetOffset>
 8018456:	4603      	mov	r3, r0
 8018458:	4619      	mov	r1, r3
 801845a:	2301      	movs	r3, #1
 801845c:	4a07      	ldr	r2, [pc, #28]	; (801847c <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 801845e:	68b8      	ldr	r0, [r7, #8]
 8018460:	f7fd f8d7 	bl	8015612 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8018464:	bf00      	nop
 8018466:	3710      	adds	r7, #16
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}
 801846c:	20028098 	.word	0x20028098
 8018470:	20027c50 	.word	0x20027c50
 8018474:	200289f8 	.word	0x200289f8
 8018478:	20028a50 	.word	0x20028a50
 801847c:	20027811 	.word	0x20027811

08018480 <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018480:	b5b0      	push	{r4, r5, r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	60b9      	str	r1, [r7, #8]
 801848a:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 801848c:	2002      	movs	r0, #2
 801848e:	f7eb ff1f 	bl	80042d0 <BSP_LED_Toggle>
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8018492:	68b8      	ldr	r0, [r7, #8]
 8018494:	f7fd f858 	bl	8015548 <otMessageGetOffset>
 8018498:	4603      	mov	r3, r0
 801849a:	4619      	mov	r1, r3
 801849c:	2318      	movs	r3, #24
 801849e:	4a1f      	ldr	r2, [pc, #124]	; (801851c <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80184a0:	68b8      	ldr	r0, [r7, #8]
 80184a2:	f7fd f8b6 	bl	8015612 <otMessageRead>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b18      	cmp	r3, #24
 80184aa:	d11c      	bne.n	80184e6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80184ac:	68f8      	ldr	r0, [r7, #12]
 80184ae:	f7fc fcca 	bl	8014e46 <otCoapHeaderGetCode>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b03      	cmp	r3, #3
 80184b6:	d005      	beq.n	80184c4 <APP_THREAD_CoapBorderTimeRequestHandler+0x44>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80184b8:	68f8      	ldr	r0, [r7, #12]
 80184ba:	f7fc fcc4 	bl	8014e46 <otCoapHeaderGetCode>
 80184be:	4603      	mov	r3, r0
 80184c0:	2b02      	cmp	r3, #2
 80184c2:	d110      	bne.n	80184e6 <APP_THREAD_CoapBorderTimeRequestHandler+0x66>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 80184c4:	4a16      	ldr	r2, [pc, #88]	; (8018520 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80184c6:	4b15      	ldr	r3, [pc, #84]	; (801851c <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 80184c8:	4614      	mov	r4, r2
 80184ca:	461d      	mov	r5, r3
 80184cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80184d4:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 80184d8:	4b11      	ldr	r3, [pc, #68]	; (8018520 <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 80184da:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80184de:	4618      	mov	r0, r3
 80184e0:	4621      	mov	r1, r4
 80184e2:	f000 f88d 	bl	8018600 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 80184e6:	4a0f      	ldr	r2, [pc, #60]	; (8018524 <APP_THREAD_CoapBorderTimeRequestHandler+0xa4>)
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80184ec:	68f8      	ldr	r0, [r7, #12]
 80184ee:	f7fc fcaa 	bl	8014e46 <otCoapHeaderGetCode>
 80184f2:	4603      	mov	r3, r0
 80184f4:	2b01      	cmp	r3, #1
 80184f6:	d00c      	beq.n	8018512 <APP_THREAD_CoapBorderTimeRequestHandler+0x92>
			//APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80184f8:	68f8      	ldr	r0, [r7, #12]
 80184fa:	f7fc fc76 	bl	8014dea <otCoapHeaderGetType>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b00      	cmp	r3, #0
 8018502:	d107      	bne.n	8018514 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	68fa      	ldr	r2, [r7, #12]
 8018508:	2100      	movs	r1, #0
 801850a:	2000      	movs	r0, #0
 801850c:	f000 fa76 	bl	80189fc <APP_THREAD_SendDataResponse>
			break;
 8018510:	e000      	b.n	8018514 <APP_THREAD_CoapBorderTimeRequestHandler+0x94>
			break;
 8018512:	bf00      	nop
		}

	} while (false);
}
 8018514:	bf00      	nop
 8018516:	3710      	adds	r7, #16
 8018518:	46bd      	mov	sp, r7
 801851a:	bdb0      	pop	{r4, r5, r7, pc}
 801851c:	20027830 	.word	0x20027830
 8018520:	20027818 	.word	0x20027818
 8018524:	20028a50 	.word	0x20028a50

08018528 <APP_THREAD_CoapBorderPacketRequestHandler>:
};

volatile struct sendViaUSB sendViaUSB_packet;

static void APP_THREAD_CoapBorderPacketRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	60f8      	str	r0, [r7, #12]
 8018530:	60b9      	str	r1, [r7, #8]
 8018532:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 8018534:	2002      	movs	r0, #2
 8018536:	f7eb fecb 	bl	80042d0 <BSP_LED_Toggle>
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &sendViaUSB_packet.packet, sizeof(struct LogPacket))
 801853a:	68b8      	ldr	r0, [r7, #8]
 801853c:	f7fd f804 	bl	8015548 <otMessageGetOffset>
 8018540:	4603      	mov	r3, r0
 8018542:	4619      	mov	r1, r3
 8018544:	23cc      	movs	r3, #204	; 0xcc
 8018546:	4a1b      	ldr	r2, [pc, #108]	; (80185b4 <APP_THREAD_CoapBorderPacketRequestHandler+0x8c>)
 8018548:	68b8      	ldr	r0, [r7, #8]
 801854a:	f7fd f862 	bl	8015612 <otMessageRead>
 801854e:	4603      	mov	r3, r0
 8018550:	2bcc      	cmp	r3, #204	; 0xcc
 8018552:	d117      	bne.n	8018584 <APP_THREAD_CoapBorderPacketRequestHandler+0x5c>
				== sizeof(struct LogPacket)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8018554:	68f8      	ldr	r0, [r7, #12]
 8018556:	f7fc fc76 	bl	8014e46 <otCoapHeaderGetCode>
 801855a:	4603      	mov	r3, r0
 801855c:	2b03      	cmp	r3, #3
 801855e:	d005      	beq.n	801856c <APP_THREAD_CoapBorderPacketRequestHandler+0x44>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8018560:	68f8      	ldr	r0, [r7, #12]
 8018562:	f7fc fc70 	bl	8014e46 <otCoapHeaderGetCode>
 8018566:	4603      	mov	r3, r0
 8018568:	2b02      	cmp	r3, #2
 801856a:	d10b      	bne.n	8018584 <APP_THREAD_CoapBorderPacketRequestHandler+0x5c>


//				uint8_t buffer[] = "Hello, World!\r\n";
//				CDC_Transmit_FS(buffer, sizeof(buffer));
				sendViaUSB_packet.delimiter[0] = 10;
 801856c:	4b11      	ldr	r3, [pc, #68]	; (80185b4 <APP_THREAD_CoapBorderPacketRequestHandler+0x8c>)
 801856e:	220a      	movs	r2, #10
 8018570:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				sendViaUSB_packet.delimiter[1] = 10;
 8018574:	4b0f      	ldr	r3, [pc, #60]	; (80185b4 <APP_THREAD_CoapBorderPacketRequestHandler+0x8c>)
 8018576:	220a      	movs	r2, #10
 8018578:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
				CDC_Transmit_FS((uint8_t *) &sendViaUSB_packet, sizeof(struct sendViaUSB));
 801857c:	21d0      	movs	r1, #208	; 0xd0
 801857e:	480d      	ldr	r0, [pc, #52]	; (80185b4 <APP_THREAD_CoapBorderPacketRequestHandler+0x8c>)
 8018580:	f000 ffbe 	bl	8019500 <CDC_Transmit_FS>
			}
		}

//		receivedMessage = (otMessageInfo*) pMessage;

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8018584:	68f8      	ldr	r0, [r7, #12]
 8018586:	f7fc fc5e 	bl	8014e46 <otCoapHeaderGetCode>
 801858a:	4603      	mov	r3, r0
 801858c:	2b01      	cmp	r3, #1
 801858e:	d00c      	beq.n	80185aa <APP_THREAD_CoapBorderPacketRequestHandler+0x82>
			//TODO: this is where you would put the return if you wanted a node to transmit BR info to other nodes
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8018590:	68f8      	ldr	r0, [r7, #12]
 8018592:	f7fc fc2a 	bl	8014dea <otCoapHeaderGetType>
 8018596:	4603      	mov	r3, r0
 8018598:	2b00      	cmp	r3, #0
 801859a:	d107      	bne.n	80185ac <APP_THREAD_CoapBorderPacketRequestHandler+0x84>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	68fa      	ldr	r2, [r7, #12]
 80185a0:	2100      	movs	r1, #0
 80185a2:	2000      	movs	r0, #0
 80185a4:	f000 fa2a 	bl	80189fc <APP_THREAD_SendDataResponse>
			break;
 80185a8:	e000      	b.n	80185ac <APP_THREAD_CoapBorderPacketRequestHandler+0x84>
			break;
 80185aa:	bf00      	nop
		}

	} while (false);
}
 80185ac:	bf00      	nop
 80185ae:	3710      	adds	r7, #16
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	20028a70 	.word	0x20028a70

080185b8 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
 80185c4:	2002      	movs	r0, #2
 80185c6:	f7eb fe83 	bl	80042d0 <BSP_LED_Toggle>
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80185ca:	68f8      	ldr	r0, [r7, #12]
 80185cc:	f7fc fc3b 	bl	8014e46 <otCoapHeaderGetCode>
 80185d0:	4603      	mov	r3, r0
 80185d2:	2b01      	cmp	r3, #1
 80185d4:	d103      	bne.n	80185de <APP_THREAD_CoapNodeInfoRequestHandler+0x26>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 80185d6:	f7ff fea9 	bl	801832c <APP_THREAD_SendMyInfo>

			break;
 80185da:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 80185dc:	e00b      	b.n	80185f6 <APP_THREAD_CoapNodeInfoRequestHandler+0x3e>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80185de:	68f8      	ldr	r0, [r7, #12]
 80185e0:	f7fc fc03 	bl	8014dea <otCoapHeaderGetType>
 80185e4:	4603      	mov	r3, r0
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d105      	bne.n	80185f6 <APP_THREAD_CoapNodeInfoRequestHandler+0x3e>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	2100      	movs	r1, #0
 80185f0:	2000      	movs	r0, #0
 80185f2:	f000 fa03 	bl	80189fc <APP_THREAD_SendDataResponse>
}
 80185f6:	bf00      	nop
 80185f8:	3710      	adds	r7, #16
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
	...

08018600 <updateRTC>:

void updateRTC(time_t now) {
 8018600:	b580      	push	{r7, lr}
 8018602:	b088      	sub	sp, #32
 8018604:	af00      	add	r7, sp, #0
 8018606:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	f107 0208 	add.w	r2, r7, #8
 8018610:	f107 010c 	add.w	r1, r7, #12
 8018614:	4618      	mov	r0, r3
 8018616:	f7ec fe8b 	bl	8005330 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 801861a:	f107 030c 	add.w	r3, r7, #12
 801861e:	2200      	movs	r2, #0
 8018620:	4619      	mov	r1, r3
 8018622:	480a      	ldr	r0, [pc, #40]	; (801864c <updateRTC+0x4c>)
 8018624:	f7f5 f973 	bl	800d90e <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8018628:	f107 0308 	add.w	r3, r7, #8
 801862c:	2200      	movs	r2, #0
 801862e:	4619      	mov	r1, r3
 8018630:	4806      	ldr	r0, [pc, #24]	; (801864c <updateRTC+0x4c>)
 8018632:	f7f5 fa8c 	bl	800db4e <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8018636:	f243 22f2 	movw	r2, #13042	; 0x32f2
 801863a:	2100      	movs	r1, #0
 801863c:	4803      	ldr	r0, [pc, #12]	; (801864c <updateRTC+0x4c>)
 801863e:	f7f5 fc0d 	bl	800de5c <HAL_RTCEx_BKUPWrite>
}
 8018642:	bf00      	nop
 8018644:	3720      	adds	r7, #32
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	2002876c 	.word	0x2002876c

08018650 <APP_THREAD_CoapLightsComplexRequestHandler>:

static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8018650:	b580      	push	{r7, lr}
 8018652:	b084      	sub	sp, #16
 8018654:	af00      	add	r7, sp, #0
 8018656:	60f8      	str	r0, [r7, #12]
 8018658:	60b9      	str	r1, [r7, #8]
 801865a:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 801865c:	68b8      	ldr	r0, [r7, #8]
 801865e:	f7fc ff73 	bl	8015548 <otMessageGetOffset>
 8018662:	4603      	mov	r3, r0
 8018664:	4619      	mov	r1, r3
 8018666:	2312      	movs	r3, #18
 8018668:	4a16      	ldr	r2, [pc, #88]	; (80186c4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 801866a:	68b8      	ldr	r0, [r7, #8]
 801866c:	f7fc ffd1 	bl	8015612 <otMessageRead>
 8018670:	4603      	mov	r3, r0
 8018672:	2b12      	cmp	r3, #18
 8018674:	d102      	bne.n	801867c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8018676:	4813      	ldr	r0, [pc, #76]	; (80186c4 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8018678:	f7eb fce6 	bl	8004048 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 801867c:	4a12      	ldr	r2, [pc, #72]	; (80186c8 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8018682:	4a12      	ldr	r2, [pc, #72]	; (80186cc <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8018688:	68f8      	ldr	r0, [r7, #12]
 801868a:	f7fc fbae 	bl	8014dea <otCoapHeaderGetType>
 801868e:	4603      	mov	r3, r0
 8018690:	2b10      	cmp	r3, #16
 8018692:	d110      	bne.n	80186b6 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f7fc fbd6 	bl	8014e46 <otCoapHeaderGetCode>
 801869a:	4603      	mov	r3, r0
 801869c:	2b03      	cmp	r3, #3
 801869e:	d10c      	bne.n	80186ba <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 80186a0:	68b8      	ldr	r0, [r7, #8]
 80186a2:	f7fc ff51 	bl	8015548 <otMessageGetOffset>
 80186a6:	4603      	mov	r3, r0
 80186a8:	4619      	mov	r1, r3
 80186aa:	2301      	movs	r3, #1
 80186ac:	4a08      	ldr	r2, [pc, #32]	; (80186d0 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 80186ae:	68b8      	ldr	r0, [r7, #8]
 80186b0:	f7fc ffaf 	bl	8015612 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 80186b4:	e002      	b.n	80186bc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80186b6:	bf00      	nop
 80186b8:	e000      	b.n	80186bc <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 80186ba:	bf00      	nop
}
 80186bc:	bf00      	nop
 80186be:	3710      	adds	r7, #16
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	20028a28 	.word	0x20028a28
 80186c8:	200289f8 	.word	0x200289f8
 80186cc:	20028a50 	.word	0x20028a50
 80186d0:	20027811 	.word	0x20027811

080186d4 <APP_THREAD_SendCoapMsg>:
}


static char empty_message[10] = "";
void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 80186d4:	b590      	push	{r4, r7, lr}
 80186d6:	b087      	sub	sp, #28
 80186d8:	af02      	add	r7, sp, #8
 80186da:	60f8      	str	r0, [r7, #12]
 80186dc:	607a      	str	r2, [r7, #4]
 80186de:	603b      	str	r3, [r7, #0]
 80186e0:	460b      	mov	r3, r1
 80186e2:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 80186e4:	222c      	movs	r2, #44	; 0x2c
 80186e6:	2100      	movs	r1, #0
 80186e8:	4862      	ldr	r0, [pc, #392]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186ea:	f001 fea4 	bl	801a436 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 80186ee:	897b      	ldrh	r3, [r7, #10]
 80186f0:	2b64      	cmp	r3, #100	; 0x64
 80186f2:	d90c      	bls.n	801870e <APP_THREAD_SendCoapMsg+0x3a>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 80186f4:	4b5f      	ldr	r3, [pc, #380]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 80186f6:	4a60      	ldr	r2, [pc, #384]	; (8018878 <APP_THREAD_SendCoapMsg+0x1a4>)
 80186f8:	f103 0410 	add.w	r4, r3, #16
 80186fc:	4613      	mov	r3, r2
 80186fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8018704:	495b      	ldr	r1, [pc, #364]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018706:	485d      	ldr	r0, [pc, #372]	; (801887c <APP_THREAD_SendCoapMsg+0x1a8>)
 8018708:	f7fc fe61 	bl	80153ce <otIp6AddressFromString>
 801870c:	e009      	b.n	8018722 <APP_THREAD_SendCoapMsg+0x4e>
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801870e:	4b59      	ldr	r3, [pc, #356]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018710:	4a5b      	ldr	r2, [pc, #364]	; (8018880 <APP_THREAD_SendCoapMsg+0x1ac>)
 8018712:	f103 0410 	add.w	r4, r3, #16
 8018716:	4613      	mov	r3, r2
 8018718:	6818      	ldr	r0, [r3, #0]
 801871a:	6859      	ldr	r1, [r3, #4]
 801871c:	689a      	ldr	r2, [r3, #8]
 801871e:	68db      	ldr	r3, [r3, #12]
 8018720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8018722:	4b54      	ldr	r3, [pc, #336]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018724:	2201      	movs	r2, #1
 8018726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 801872a:	4b52      	ldr	r3, [pc, #328]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 801872c:	f241 6233 	movw	r2, #5683	; 0x1633
 8018730:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8018732:	4b50      	ldr	r3, [pc, #320]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018734:	2240      	movs	r2, #64	; 0x40
 8018736:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 801873a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d009      	beq.n	8018756 <APP_THREAD_SendCoapMsg+0x82>
 8018742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018746:	2b03      	cmp	r3, #3
 8018748:	d105      	bne.n	8018756 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 801874a:	2203      	movs	r2, #3
 801874c:	2100      	movs	r1, #0
 801874e:	484d      	ldr	r0, [pc, #308]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018750:	f7fc f9ef 	bl	8014b32 <otCoapHeaderInit>
 8018754:	e04a      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8018756:	f897 3020 	ldrb.w	r3, [r7, #32]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d009      	beq.n	8018772 <APP_THREAD_SendCoapMsg+0x9e>
 801875e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018762:	2b01      	cmp	r3, #1
 8018764:	d105      	bne.n	8018772 <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018766:	2201      	movs	r2, #1
 8018768:	2100      	movs	r1, #0
 801876a:	4846      	ldr	r0, [pc, #280]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 801876c:	f7fc f9e1 	bl	8014b32 <otCoapHeaderInit>
 8018770:	e03c      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8018772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d009      	beq.n	801878e <APP_THREAD_SendCoapMsg+0xba>
 801877a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801877e:	2b02      	cmp	r3, #2
 8018780:	d105      	bne.n	801878e <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8018782:	2202      	movs	r2, #2
 8018784:	2100      	movs	r1, #0
 8018786:	483f      	ldr	r0, [pc, #252]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018788:	f7fc f9d3 	bl	8014b32 <otCoapHeaderInit>
 801878c:	e02e      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 801878e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d109      	bne.n	80187aa <APP_THREAD_SendCoapMsg+0xd6>
 8018796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801879a:	2b03      	cmp	r3, #3
 801879c:	d105      	bne.n	80187aa <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801879e:	2203      	movs	r2, #3
 80187a0:	2110      	movs	r1, #16
 80187a2:	4838      	ldr	r0, [pc, #224]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187a4:	f7fc f9c5 	bl	8014b32 <otCoapHeaderInit>
 80187a8:	e020      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80187aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d109      	bne.n	80187c6 <APP_THREAD_SendCoapMsg+0xf2>
 80187b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d105      	bne.n	80187c6 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80187ba:	2201      	movs	r2, #1
 80187bc:	2110      	movs	r1, #16
 80187be:	4831      	ldr	r0, [pc, #196]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187c0:	f7fc f9b7 	bl	8014b32 <otCoapHeaderInit>
 80187c4:	e012      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80187c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d109      	bne.n	80187e2 <APP_THREAD_SendCoapMsg+0x10e>
 80187ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80187d2:	2b02      	cmp	r3, #2
 80187d4:	d105      	bne.n	80187e2 <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 80187d6:	2202      	movs	r2, #2
 80187d8:	2110      	movs	r1, #16
 80187da:	482a      	ldr	r0, [pc, #168]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187dc:	f7fc f9a9 	bl	8014b32 <otCoapHeaderInit>
 80187e0:	e004      	b.n	80187ec <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 80187e2:	2102      	movs	r1, #2
 80187e4:	4827      	ldr	r0, [pc, #156]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187e6:	f7fc fa0d 	bl	8014c04 <otCoapHeaderGenerateToken>
 80187ea:	e040      	b.n	801886e <APP_THREAD_SendCoapMsg+0x19a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 80187ec:	6839      	ldr	r1, [r7, #0]
 80187ee:	4825      	ldr	r0, [pc, #148]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 80187f0:	f7fc fa6b 	bl	8014cca <otCoapHeaderAppendUriPathOptions>
 80187f4:	4603      	mov	r3, r0
 80187f6:	461a      	mov	r2, r3
 80187f8:	4b23      	ldr	r3, [pc, #140]	; (8018888 <APP_THREAD_SendCoapMsg+0x1b4>)
 80187fa:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80187fc:	212a      	movs	r1, #42	; 0x2a
 80187fe:	4821      	ldr	r0, [pc, #132]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018800:	f7fc fa30 	bl	8014c64 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8018804:	897b      	ldrh	r3, [r7, #10]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d002      	beq.n	8018810 <APP_THREAD_SendCoapMsg+0x13c>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 801880a:	481e      	ldr	r0, [pc, #120]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 801880c:	f7fc fa8f 	bl	8014d2e <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018810:	491c      	ldr	r1, [pc, #112]	; (8018884 <APP_THREAD_SendCoapMsg+0x1b0>)
 8018812:	2000      	movs	r0, #0
 8018814:	f7fc fbce 	bl	8014fb4 <otCoapNewMessage>
 8018818:	4602      	mov	r2, r0
 801881a:	4b1c      	ldr	r3, [pc, #112]	; (801888c <APP_THREAD_SendCoapMsg+0x1b8>)
 801881c:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 801881e:	897b      	ldrh	r3, [r7, #10]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d00a      	beq.n	801883a <APP_THREAD_SendCoapMsg+0x166>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8018824:	4b19      	ldr	r3, [pc, #100]	; (801888c <APP_THREAD_SendCoapMsg+0x1b8>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	897a      	ldrh	r2, [r7, #10]
 801882a:	68f9      	ldr	r1, [r7, #12]
 801882c:	4618      	mov	r0, r3
 801882e:	f7fc feb9 	bl	80155a4 <otMessageAppend>
 8018832:	4603      	mov	r3, r0
 8018834:	461a      	mov	r2, r3
 8018836:	4b14      	ldr	r3, [pc, #80]	; (8018888 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018838:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 801883a:	4b14      	ldr	r3, [pc, #80]	; (801888c <APP_THREAD_SendCoapMsg+0x1b8>)
 801883c:	6819      	ldr	r1, [r3, #0]
 801883e:	2300      	movs	r3, #0
 8018840:	9300      	str	r3, [sp, #0]
 8018842:	2300      	movs	r3, #0
 8018844:	4a0b      	ldr	r2, [pc, #44]	; (8018874 <APP_THREAD_SendCoapMsg+0x1a0>)
 8018846:	2000      	movs	r0, #0
 8018848:	f7fc fbe2 	bl	8015010 <otCoapSendRequest>
 801884c:	4603      	mov	r3, r0
 801884e:	461a      	mov	r2, r3
 8018850:	4b0d      	ldr	r3, [pc, #52]	; (8018888 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018852:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018854:	4b0c      	ldr	r3, [pc, #48]	; (8018888 <APP_THREAD_SendCoapMsg+0x1b4>)
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d008      	beq.n	801886e <APP_THREAD_SendCoapMsg+0x19a>
 801885c:	4b0b      	ldr	r3, [pc, #44]	; (801888c <APP_THREAD_SendCoapMsg+0x1b8>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d004      	beq.n	801886e <APP_THREAD_SendCoapMsg+0x19a>
			otMessageFree(pOT_Message);
 8018864:	4b09      	ldr	r3, [pc, #36]	; (801888c <APP_THREAD_SendCoapMsg+0x1b8>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4618      	mov	r0, r3
 801886a:	f7fc fe42 	bl	80154f2 <otMessageFree>
		}

	} while (false);
}
 801886e:	3714      	adds	r7, #20
 8018870:	46bd      	mov	sp, r7
 8018872:	bd90      	pop	{r4, r7, pc}
 8018874:	20027750 	.word	0x20027750
 8018878:	20027818 	.word	0x20027818
 801887c:	0801ba74 	.word	0x0801ba74
 8018880:	20028a3c 	.word	0x20028a3c
 8018884:	2002777c 	.word	0x2002777c
 8018888:	20027810 	.word	0x20027810
 801888c:	2002780c 	.word	0x2002780c

08018890 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8018890:	b590      	push	{r4, r7, lr}
 8018892:	b087      	sub	sp, #28
 8018894:	af02      	add	r7, sp, #8
 8018896:	60f8      	str	r0, [r7, #12]
 8018898:	607a      	str	r2, [r7, #4]
 801889a:	603b      	str	r3, [r7, #0]
 801889c:	460b      	mov	r3, r1
 801889e:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 80188a0:	222c      	movs	r2, #44	; 0x2c
 80188a2:	2100      	movs	r1, #0
 80188a4:	484e      	ldr	r0, [pc, #312]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80188a6:	f001 fdc6 	bl	801a436 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 80188aa:	4b4d      	ldr	r3, [pc, #308]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80188ac:	4a4d      	ldr	r2, [pc, #308]	; (80189e4 <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 80188ae:	f103 0410 	add.w	r4, r3, #16
 80188b2:	4613      	mov	r3, r2
 80188b4:	6818      	ldr	r0, [r3, #0]
 80188b6:	6859      	ldr	r1, [r3, #4]
 80188b8:	689a      	ldr	r2, [r3, #8]
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80188be:	4b48      	ldr	r3, [pc, #288]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80188c0:	2201      	movs	r2, #1
 80188c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80188c6:	4b46      	ldr	r3, [pc, #280]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80188c8:	f241 6233 	movw	r2, #5683	; 0x1633
 80188cc:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 80188ce:	4b44      	ldr	r3, [pc, #272]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80188d0:	2240      	movs	r2, #64	; 0x40
 80188d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80188d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d009      	beq.n	80188f2 <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 80188de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188e2:	2b03      	cmp	r3, #3
 80188e4:	d105      	bne.n	80188f2 <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80188e6:	2203      	movs	r2, #3
 80188e8:	2100      	movs	r1, #0
 80188ea:	483f      	ldr	r0, [pc, #252]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 80188ec:	f7fc f921 	bl	8014b32 <otCoapHeaderInit>
 80188f0:	e04a      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80188f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d009      	beq.n	801890e <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 80188fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d105      	bne.n	801890e <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8018902:	2201      	movs	r2, #1
 8018904:	2100      	movs	r1, #0
 8018906:	4838      	ldr	r0, [pc, #224]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018908:	f7fc f913 	bl	8014b32 <otCoapHeaderInit>
 801890c:	e03c      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801890e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d009      	beq.n	801892a <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8018916:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801891a:	2b02      	cmp	r3, #2
 801891c:	d105      	bne.n	801892a <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 801891e:	2202      	movs	r2, #2
 8018920:	2100      	movs	r1, #0
 8018922:	4831      	ldr	r0, [pc, #196]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018924:	f7fc f905 	bl	8014b32 <otCoapHeaderInit>
 8018928:	e02e      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 801892a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d109      	bne.n	8018946 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8018932:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018936:	2b03      	cmp	r3, #3
 8018938:	d105      	bne.n	8018946 <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801893a:	2203      	movs	r2, #3
 801893c:	2110      	movs	r1, #16
 801893e:	482a      	ldr	r0, [pc, #168]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018940:	f7fc f8f7 	bl	8014b32 <otCoapHeaderInit>
 8018944:	e020      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8018946:	f897 3020 	ldrb.w	r3, [r7, #32]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d109      	bne.n	8018962 <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 801894e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018952:	2b01      	cmp	r3, #1
 8018954:	d105      	bne.n	8018962 <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8018956:	2201      	movs	r2, #1
 8018958:	2110      	movs	r1, #16
 801895a:	4823      	ldr	r0, [pc, #140]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 801895c:	f7fc f8e9 	bl	8014b32 <otCoapHeaderInit>
 8018960:	e012      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8018962:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d109      	bne.n	801897e <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 801896a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801896e:	2b02      	cmp	r3, #2
 8018970:	d105      	bne.n	801897e <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8018972:	2202      	movs	r2, #2
 8018974:	2110      	movs	r1, #16
 8018976:	481c      	ldr	r0, [pc, #112]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018978:	f7fc f8db 	bl	8014b32 <otCoapHeaderInit>
 801897c:	e004      	b.n	8018988 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801897e:	2102      	movs	r1, #2
 8018980:	4819      	ldr	r0, [pc, #100]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8018982:	f7fc f93f 	bl	8014c04 <otCoapHeaderGenerateToken>
 8018986:	e028      	b.n	80189da <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8018988:	6839      	ldr	r1, [r7, #0]
 801898a:	4817      	ldr	r0, [pc, #92]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 801898c:	f7fc f99d 	bl	8014cca <otCoapHeaderAppendUriPathOptions>
 8018990:	4603      	mov	r3, r0
 8018992:	461a      	mov	r2, r3
 8018994:	4b15      	ldr	r3, [pc, #84]	; (80189ec <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8018996:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018998:	4913      	ldr	r1, [pc, #76]	; (80189e8 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 801899a:	2000      	movs	r0, #0
 801899c:	f7fc fb0a 	bl	8014fb4 <otCoapNewMessage>
 80189a0:	4602      	mov	r2, r0
 80189a2:	4b13      	ldr	r3, [pc, #76]	; (80189f0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 80189a4:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 80189a6:	4b12      	ldr	r3, [pc, #72]	; (80189f0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 80189a8:	6819      	ldr	r1, [r3, #0]
 80189aa:	4b12      	ldr	r3, [pc, #72]	; (80189f4 <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 80189ac:	9300      	str	r3, [sp, #0]
 80189ae:	4b12      	ldr	r3, [pc, #72]	; (80189f8 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 80189b0:	4a0b      	ldr	r2, [pc, #44]	; (80189e0 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 80189b2:	2000      	movs	r0, #0
 80189b4:	f7fc fb2c 	bl	8015010 <otCoapSendRequest>
 80189b8:	4603      	mov	r3, r0
 80189ba:	461a      	mov	r2, r3
 80189bc:	4b0b      	ldr	r3, [pc, #44]	; (80189ec <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 80189be:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 80189c0:	4b0a      	ldr	r3, [pc, #40]	; (80189ec <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 80189c2:	781b      	ldrb	r3, [r3, #0]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d008      	beq.n	80189da <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 80189c8:	4b09      	ldr	r3, [pc, #36]	; (80189f0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d004      	beq.n	80189da <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 80189d0:	4b07      	ldr	r3, [pc, #28]	; (80189f0 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7fc fd8c 	bl	80154f2 <otMessageFree>
		}

	} while (false);

}
 80189da:	3714      	adds	r7, #20
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd90      	pop	{r4, r7, pc}
 80189e0:	20027750 	.word	0x20027750
 80189e4:	20028a3c 	.word	0x20028a3c
 80189e8:	2002777c 	.word	0x2002777c
 80189ec:	20027810 	.word	0x20027810
 80189f0:	2002780c 	.word	0x2002780c
 80189f4:	0801824d 	.word	0x0801824d
 80189f8:	08018231 	.word	0x08018231

080189fc <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 80189fc:	b590      	push	{r4, r7, lr}
 80189fe:	b087      	sub	sp, #28
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	60f8      	str	r0, [r7, #12]
 8018a04:	607a      	str	r2, [r7, #4]
 8018a06:	603b      	str	r3, [r7, #0]
 8018a08:	460b      	mov	r3, r1
 8018a0a:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8018a10:	2244      	movs	r2, #68	; 0x44
 8018a12:	2120      	movs	r1, #32
 8018a14:	4826      	ldr	r0, [pc, #152]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a16:	f7fc f88c 	bl	8014b32 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f7fc fa41 	bl	8014ea2 <otCoapHeaderGetMessageId>
 8018a20:	4603      	mov	r3, r0
 8018a22:	4619      	mov	r1, r3
 8018a24:	4822      	ldr	r0, [pc, #136]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a26:	f7fc f9b0 	bl	8014d8a <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	f7fc fa95 	bl	8014f5a <otCoapHeaderGetToken>
 8018a30:	4604      	mov	r4, r0
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	f7fc fa63 	bl	8014efe <otCoapHeaderGetTokenLength>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	461a      	mov	r2, r3
 8018a3c:	4621      	mov	r1, r4
 8018a3e:	481c      	ldr	r0, [pc, #112]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a40:	f7fc f8ac 	bl	8014b9c <otCoapHeaderSetToken>

	if (msgSize > 0){
 8018a44:	897b      	ldrh	r3, [r7, #10]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d006      	beq.n	8018a58 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8018a4a:	212a      	movs	r1, #42	; 0x2a
 8018a4c:	4818      	ldr	r0, [pc, #96]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a4e:	f7fc f909 	bl	8014c64 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8018a52:	4817      	ldr	r0, [pc, #92]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a54:	f7fc f96b 	bl	8014d2e <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8018a58:	4915      	ldr	r1, [pc, #84]	; (8018ab0 <APP_THREAD_SendDataResponse+0xb4>)
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	f7fc faaa 	bl	8014fb4 <otCoapNewMessage>
 8018a60:	4602      	mov	r2, r0
 8018a62:	4b14      	ldr	r3, [pc, #80]	; (8018ab4 <APP_THREAD_SendDataResponse+0xb8>)
 8018a64:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8018a66:	897b      	ldrh	r3, [r7, #10]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d008      	beq.n	8018a7e <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8018a6c:	4b11      	ldr	r3, [pc, #68]	; (8018ab4 <APP_THREAD_SendDataResponse+0xb8>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	897a      	ldrh	r2, [r7, #10]
 8018a72:	68f9      	ldr	r1, [r7, #12]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7fc fd95 	bl	80155a4 <otMessageAppend>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8018a7e:	4b0d      	ldr	r3, [pc, #52]	; (8018ab4 <APP_THREAD_SendDataResponse+0xb8>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	683a      	ldr	r2, [r7, #0]
 8018a84:	4619      	mov	r1, r3
 8018a86:	2000      	movs	r0, #0
 8018a88:	f7fc fb5b 	bl	8015142 <otCoapSendResponse>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8018a90:	7dfb      	ldrb	r3, [r7, #23]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d008      	beq.n	8018aa8 <APP_THREAD_SendDataResponse+0xac>
 8018a96:	4b07      	ldr	r3, [pc, #28]	; (8018ab4 <APP_THREAD_SendDataResponse+0xb8>)
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d004      	beq.n	8018aa8 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8018a9e:	4b05      	ldr	r3, [pc, #20]	; (8018ab4 <APP_THREAD_SendDataResponse+0xb8>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7fc fd25 	bl	80154f2 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8018aa8:	bf00      	nop
 8018aaa:	371c      	adds	r7, #28
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd90      	pop	{r4, r7, pc}
 8018ab0:	2002777c 	.word	0x2002777c
 8018ab4:	2002780c 	.word	0x2002780c

08018ab8 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b083      	sub	sp, #12
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8018ac0:	4a04      	ldr	r2, [pc, #16]	; (8018ad4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6013      	str	r3, [r2, #0]
}
 8018ac6:	bf00      	nop
 8018ac8:	370c      	adds	r7, #12
 8018aca:	46bd      	mov	sp, r7
 8018acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad0:	4770      	bx	lr
 8018ad2:	bf00      	nop
 8018ad4:	20027738 	.word	0x20027738

08018ad8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8018adc:	4b03      	ldr	r3, [pc, #12]	; (8018aec <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	330c      	adds	r3, #12
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr
 8018aec:	20027738 	.word	0x20027738

08018af0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8018af0:	b480      	push	{r7}
 8018af2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8018af4:	4b03      	ldr	r3, [pc, #12]	; (8018b04 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	330b      	adds	r3, #11
}
 8018afa:	4618      	mov	r0, r3
 8018afc:	46bd      	mov	sp, r7
 8018afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b02:	4770      	bx	lr
 8018b04:	20027738 	.word	0x20027738

08018b08 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8018b08:	b480      	push	{r7}
 8018b0a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8018b0c:	4b03      	ldr	r3, [pc, #12]	; (8018b1c <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	330b      	adds	r3, #11
}
 8018b12:	4618      	mov	r0, r3
 8018b14:	46bd      	mov	sp, r7
 8018b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1a:	4770      	bx	lr
 8018b1c:	2002773c 	.word	0x2002773c

08018b20 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8018b26:	4b0f      	ldr	r3, [pc, #60]	; (8018b64 <Ot_Cmd_Transfer+0x44>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018b30:	725a      	strb	r2, [r3, #9]
 8018b32:	2200      	movs	r2, #0
 8018b34:	f042 0202 	orr.w	r2, r2, #2
 8018b38:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8018b3a:	4b0a      	ldr	r3, [pc, #40]	; (8018b64 <Ot_Cmd_Transfer+0x44>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	330c      	adds	r3, #12
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	3302      	adds	r3, #2
 8018b44:	009b      	lsls	r3, r3, #2
 8018b46:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8018b48:	4b06      	ldr	r3, [pc, #24]	; (8018b64 <Ot_Cmd_Transfer+0x44>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	687a      	ldr	r2, [r7, #4]
 8018b4e:	b2d2      	uxtb	r2, r2
 8018b50:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8018b52:	f7fd fc0d 	bl	8016370 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8018b56:	f000 f829 	bl	8018bac <Wait_Getting_Ack_From_M0>
}
 8018b5a:	bf00      	nop
 8018b5c:	3708      	adds	r7, #8
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	20027738 	.word	0x20027738

08018b68 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8018b70:	f000 f82e 	bl	8018bd0 <Receive_Ack_From_M0>
}
 8018b74:	bf00      	nop
 8018b76:	3708      	adds	r7, #8
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}

08018b7c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8018b84:	4a04      	ldr	r2, [pc, #16]	; (8018b98 <TL_THREAD_NotReceived+0x1c>)
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8018b8a:	f000 f82d 	bl	8018be8 <Receive_Notification_From_M0>
}
 8018b8e:	bf00      	nop
 8018b90:	3708      	adds	r7, #8
 8018b92:	46bd      	mov	sp, r7
 8018b94:	bd80      	pop	{r7, pc}
 8018b96:	bf00      	nop
 8018b98:	2002773c 	.word	0x2002773c

08018b9c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8018b9c:	b480      	push	{r7}
 8018b9e:	af00      	add	r7, sp, #0

}
 8018ba0:	bf00      	nop
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba8:	4770      	bx	lr
	...

08018bac <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8018bac:	b480      	push	{r7}
 8018bae:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8018bb0:	bf00      	nop
 8018bb2:	4b06      	ldr	r3, [pc, #24]	; (8018bcc <Wait_Getting_Ack_From_M0+0x20>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d0fb      	beq.n	8018bb2 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8018bba:	4b04      	ldr	r3, [pc, #16]	; (8018bcc <Wait_Getting_Ack_From_M0+0x20>)
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	601a      	str	r2, [r3, #0]
}
 8018bc0:	bf00      	nop
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc8:	4770      	bx	lr
 8018bca:	bf00      	nop
 8018bcc:	20027744 	.word	0x20027744

08018bd0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8018bd0:	b480      	push	{r7}
 8018bd2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 8018bd4:	4b03      	ldr	r3, [pc, #12]	; (8018be4 <Receive_Ack_From_M0+0x14>)
 8018bd6:	2201      	movs	r2, #1
 8018bd8:	601a      	str	r2, [r3, #0]
}
 8018bda:	bf00      	nop
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be2:	4770      	bx	lr
 8018be4:	20027744 	.word	0x20027744

08018be8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8018bec:	4b06      	ldr	r3, [pc, #24]	; (8018c08 <Receive_Notification_From_M0+0x20>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	4a05      	ldr	r2, [pc, #20]	; (8018c08 <Receive_Notification_From_M0+0x20>)
 8018bf4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 8018bf6:	4b05      	ldr	r3, [pc, #20]	; (8018c0c <Receive_Notification_From_M0+0x24>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	2101      	movs	r1, #1
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	f7f7 fc51 	bl	80104a4 <osThreadFlagsSet>
}
 8018c02:	bf00      	nop
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	20027740 	.word	0x20027740
 8018c0c:	20027748 	.word	0x20027748

08018c10 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8018c14:	22ff      	movs	r2, #255	; 0xff
 8018c16:	2100      	movs	r1, #0
 8018c18:	4812      	ldr	r0, [pc, #72]	; (8018c64 <Send_CLI_To_M0+0x54>)
 8018c1a:	f001 fc0c 	bl	801a436 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8018c1e:	4b12      	ldr	r3, [pc, #72]	; (8018c68 <Send_CLI_To_M0+0x58>)
 8018c20:	881b      	ldrh	r3, [r3, #0]
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	461a      	mov	r2, r3
 8018c26:	4911      	ldr	r1, [pc, #68]	; (8018c6c <Send_CLI_To_M0+0x5c>)
 8018c28:	480e      	ldr	r0, [pc, #56]	; (8018c64 <Send_CLI_To_M0+0x54>)
 8018c2a:	f001 fbf9 	bl	801a420 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8018c2e:	4b0e      	ldr	r3, [pc, #56]	; (8018c68 <Send_CLI_To_M0+0x58>)
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	b29b      	uxth	r3, r3
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	4b0e      	ldr	r3, [pc, #56]	; (8018c70 <Send_CLI_To_M0+0x60>)
 8018c38:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8018c3a:	4b0d      	ldr	r3, [pc, #52]	; (8018c70 <Send_CLI_To_M0+0x60>)
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	725a      	strb	r2, [r3, #9]
 8018c40:	2200      	movs	r2, #0
 8018c42:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8018c44:	4b0b      	ldr	r3, [pc, #44]	; (8018c74 <Send_CLI_To_M0+0x64>)
 8018c46:	2200      	movs	r2, #0
 8018c48:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8018c4a:	4b07      	ldr	r3, [pc, #28]	; (8018c68 <Send_CLI_To_M0+0x58>)
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8018c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018c54:	2100      	movs	r1, #0
 8018c56:	4805      	ldr	r0, [pc, #20]	; (8018c6c <Send_CLI_To_M0+0x5c>)
 8018c58:	f001 fbed 	bl	801a436 <memset>

  TL_CLI_SendCmd();
 8018c5c:	f7fd fb96 	bl	801638c <TL_CLI_SendCmd>
}
 8018c60:	bf00      	nop
 8018c62:	bd80      	pop	{r7, pc}
 8018c64:	20030a5c 	.word	0x20030a5c
 8018c68:	20027734 	.word	0x20027734
 8018c6c:	20027634 	.word	0x20027634
 8018c70:	20030a50 	.word	0x20030a50
 8018c74:	20027736 	.word	0x20027736

08018c78 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8018c7c:	f7fd fba2 	bl	80163c4 <TL_THREAD_CliSendAck>
}
 8018c80:	bf00      	nop
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8018c88:	4a04      	ldr	r2, [pc, #16]	; (8018c9c <APP_THREAD_Init_UART_CLI+0x18>)
 8018c8a:	2100      	movs	r1, #0
 8018c8c:	4804      	ldr	r0, [pc, #16]	; (8018ca0 <APP_THREAD_Init_UART_CLI+0x1c>)
 8018c8e:	f7f7 fb5d 	bl	801034c <osThreadNew>
 8018c92:	4602      	mov	r2, r0
 8018c94:	4b03      	ldr	r3, [pc, #12]	; (8018ca4 <APP_THREAD_Init_UART_CLI+0x20>)
 8018c96:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8018c98:	bf00      	nop
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	0801bf34 	.word	0x0801bf34
 8018ca0:	080181d7 	.word	0x080181d7
 8018ca4:	2002774c 	.word	0x2002774c

08018ca8 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8018cac:	4b06      	ldr	r3, [pc, #24]	; (8018cc8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018cae:	4a07      	ldr	r2, [pc, #28]	; (8018ccc <APP_THREAD_TL_THREAD_INIT+0x24>)
 8018cb0:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8018cb2:	4b05      	ldr	r3, [pc, #20]	; (8018cc8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018cb4:	4a06      	ldr	r2, [pc, #24]	; (8018cd0 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8018cb6:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8018cb8:	4b03      	ldr	r3, [pc, #12]	; (8018cc8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018cba:	4a06      	ldr	r2, [pc, #24]	; (8018cd4 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8018cbc:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8018cbe:	4802      	ldr	r0, [pc, #8]	; (8018cc8 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8018cc0:	f7fd fb3a 	bl	8016338 <TL_THREAD_Init>
}
 8018cc4:	bf00      	nop
 8018cc6:	bd80      	pop	{r7, pc}
 8018cc8:	200300b8 	.word	0x200300b8
 8018ccc:	20030838 	.word	0x20030838
 8018cd0:	20030944 	.word	0x20030944
 8018cd4:	20030a50 	.word	0x20030a50

08018cd8 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b084      	sub	sp, #16
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	7adb      	ldrb	r3, [r3, #11]
 8018ce8:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	330c      	adds	r3, #12
 8018cee:	4906      	ldr	r1, [pc, #24]	; (8018d08 <TL_THREAD_CliNotReceived+0x30>)
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7e7 fa45 	bl	8000180 <strcmp>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d101      	bne.n	8018d00 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8018cfc:	f7ff ffbc 	bl	8018c78 <Send_CLI_Ack_For_OT>
  }
}
 8018d00:	bf00      	nop
 8018d02:	3710      	adds	r7, #16
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}
 8018d08:	0801ba94 	.word	0x0801ba94

08018d0c <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8018d10:	4b09      	ldr	r3, [pc, #36]	; (8018d38 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d00d      	beq.n	8018d34 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8018d18:	4b07      	ldr	r3, [pc, #28]	; (8018d38 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	2b01      	cmp	r3, #1
 8018d1e:	d904      	bls.n	8018d2a <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8018d20:	2100      	movs	r1, #0
 8018d22:	2000      	movs	r0, #0
 8018d24:	f7fe ffd6 	bl	8017cd4 <APP_THREAD_Error>
 8018d28:	e001      	b.n	8018d2e <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8018d2a:	f7fc fcaf 	bl	801568c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8018d2e:	4b02      	ldr	r3, [pc, #8]	; (8018d38 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8018d30:	2200      	movs	r2, #0
 8018d32:	601a      	str	r2, [r3, #0]
  }
}
 8018d34:	bf00      	nop
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	20027740 	.word	0x20027740

08018d3c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018d3c:	b480      	push	{r7}
 8018d3e:	b083      	sub	sp, #12
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018d44:	4b06      	ldr	r3, [pc, #24]	; (8018d60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018d46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8018d4a:	4905      	ldr	r1, [pc, #20]	; (8018d60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	4313      	orrs	r3, r2
 8018d50:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8018d54:	bf00      	nop
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr
 8018d60:	58000800 	.word	0x58000800

08018d64 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8018d64:	b480      	push	{r7}
 8018d66:	b083      	sub	sp, #12
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018d6c:	4b05      	ldr	r3, [pc, #20]	; (8018d84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018d6e:	6a1a      	ldr	r2, [r3, #32]
 8018d70:	4904      	ldr	r1, [pc, #16]	; (8018d84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	4313      	orrs	r3, r2
 8018d76:	620b      	str	r3, [r1, #32]
}
 8018d78:	bf00      	nop
 8018d7a:	370c      	adds	r7, #12
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d82:	4770      	bx	lr
 8018d84:	58000800 	.word	0x58000800

08018d88 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8018d88:	b480      	push	{r7}
 8018d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018d8c:	4b05      	ldr	r3, [pc, #20]	; (8018da4 <LL_PWR_EnableBootC2+0x1c>)
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	4a04      	ldr	r2, [pc, #16]	; (8018da4 <LL_PWR_EnableBootC2+0x1c>)
 8018d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018d96:	60d3      	str	r3, [r2, #12]
}
 8018d98:	bf00      	nop
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr
 8018da2:	bf00      	nop
 8018da4:	58000400 	.word	0x58000400

08018da8 <LL_AHB3_GRP1_EnableClock>:
{
 8018da8:	b480      	push	{r7}
 8018daa:	b085      	sub	sp, #20
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8018db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	4313      	orrs	r3, r2
 8018dbe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8018dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	4013      	ands	r3, r2
 8018dca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018dcc:	68fb      	ldr	r3, [r7, #12]
}
 8018dce:	bf00      	nop
 8018dd0:	3714      	adds	r7, #20
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd8:	4770      	bx	lr

08018dda <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8018dda:	b480      	push	{r7}
 8018ddc:	b083      	sub	sp, #12
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	601a      	str	r2, [r3, #0]
}
 8018dee:	bf00      	nop
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr

08018dfa <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8018dfa:	b480      	push	{r7}
 8018dfc:	b083      	sub	sp, #12
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	f043 0201 	orr.w	r2, r3, #1
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	601a      	str	r2, [r3, #0]
}
 8018e0e:	bf00      	nop
 8018e10:	370c      	adds	r7, #12
 8018e12:	46bd      	mov	sp, r7
 8018e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e18:	4770      	bx	lr

08018e1a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e1a:	b480      	push	{r7}
 8018e1c:	b083      	sub	sp, #12
 8018e1e:	af00      	add	r7, sp, #0
 8018e20:	6078      	str	r0, [r7, #4]
 8018e22:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	685a      	ldr	r2, [r3, #4]
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	041b      	lsls	r3, r3, #16
 8018e2c:	43db      	mvns	r3, r3
 8018e2e:	401a      	ands	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	605a      	str	r2, [r3, #4]
}
 8018e34:	bf00      	nop
 8018e36:	370c      	adds	r7, #12
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3e:	4770      	bx	lr

08018e40 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e40:	b480      	push	{r7}
 8018e42:	b083      	sub	sp, #12
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
 8018e48:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	685a      	ldr	r2, [r3, #4]
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	041b      	lsls	r3, r3, #16
 8018e52:	431a      	orrs	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	605a      	str	r2, [r3, #4]
}
 8018e58:	bf00      	nop
 8018e5a:	370c      	adds	r7, #12
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e62:	4770      	bx	lr

08018e64 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b083      	sub	sp, #12
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	685a      	ldr	r2, [r3, #4]
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	43db      	mvns	r3, r3
 8018e76:	401a      	ands	r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	605a      	str	r2, [r3, #4]
}
 8018e7c:	bf00      	nop
 8018e7e:	370c      	adds	r7, #12
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr

08018e88 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018e88:	b480      	push	{r7}
 8018e8a:	b083      	sub	sp, #12
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	685a      	ldr	r2, [r3, #4]
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	431a      	orrs	r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	605a      	str	r2, [r3, #4]
}
 8018e9e:	bf00      	nop
 8018ea0:	370c      	adds	r7, #12
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr

08018eaa <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018eaa:	b480      	push	{r7}
 8018eac:	b083      	sub	sp, #12
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	683a      	ldr	r2, [r7, #0]
 8018eb8:	609a      	str	r2, [r3, #8]
}
 8018eba:	bf00      	nop
 8018ebc:	370c      	adds	r7, #12
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec4:	4770      	bx	lr

08018ec6 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018ec6:	b480      	push	{r7}
 8018ec8:	b083      	sub	sp, #12
 8018eca:	af00      	add	r7, sp, #0
 8018ecc:	6078      	str	r0, [r7, #4]
 8018ece:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	041a      	lsls	r2, r3, #16
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	609a      	str	r2, [r3, #8]
}
 8018ed8:	bf00      	nop
 8018eda:	370c      	adds	r7, #12
 8018edc:	46bd      	mov	sp, r7
 8018ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee2:	4770      	bx	lr

08018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b083      	sub	sp, #12
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	68da      	ldr	r2, [r3, #12]
 8018ef2:	683b      	ldr	r3, [r7, #0]
 8018ef4:	4013      	ands	r3, r2
 8018ef6:	683a      	ldr	r2, [r7, #0]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d101      	bne.n	8018f00 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8018efc:	2301      	movs	r3, #1
 8018efe:	e000      	b.n	8018f02 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8018f00:	2300      	movs	r3, #0
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	370c      	adds	r7, #12
 8018f06:	46bd      	mov	sp, r7
 8018f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0c:	4770      	bx	lr

08018f0e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018f0e:	b480      	push	{r7}
 8018f10:	b083      	sub	sp, #12
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	6078      	str	r0, [r7, #4]
 8018f16:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	69da      	ldr	r2, [r3, #28]
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	4013      	ands	r3, r2
 8018f20:	683a      	ldr	r2, [r7, #0]
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d101      	bne.n	8018f2a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018f26:	2301      	movs	r3, #1
 8018f28:	e000      	b.n	8018f2c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018f2a:	2300      	movs	r3, #0
}
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	370c      	adds	r7, #12
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr

08018f38 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018f3c:	2102      	movs	r1, #2
 8018f3e:	482a      	ldr	r0, [pc, #168]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f40:	f7ff ffe5 	bl	8018f0e <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f44:	4603      	mov	r3, r0
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d009      	beq.n	8018f5e <HW_IPCC_Rx_Handler+0x26>
 8018f4a:	4b27      	ldr	r3, [pc, #156]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	43db      	mvns	r3, r3
 8018f50:	f003 0302 	and.w	r3, r3, #2
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d002      	beq.n	8018f5e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8018f58:	f000 f906 	bl	8019168 <HW_IPCC_SYS_EvtHandler>
 8018f5c:	e041      	b.n	8018fe2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8018f5e:	2104      	movs	r1, #4
 8018f60:	4821      	ldr	r0, [pc, #132]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f62:	f7ff ffd4 	bl	8018f0e <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f66:	4603      	mov	r3, r0
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d009      	beq.n	8018f80 <HW_IPCC_Rx_Handler+0x48>
 8018f6c:	4b1e      	ldr	r3, [pc, #120]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f6e:	685b      	ldr	r3, [r3, #4]
 8018f70:	43db      	mvns	r3, r3
 8018f72:	f003 0304 	and.w	r3, r3, #4
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d002      	beq.n	8018f80 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8018f7a:	f000 f94f 	bl	801921c <HW_IPCC_THREAD_NotEvtHandler>
 8018f7e:	e030      	b.n	8018fe2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8018f80:	2110      	movs	r1, #16
 8018f82:	4819      	ldr	r0, [pc, #100]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f84:	f7ff ffc3 	bl	8018f0e <LL_C2_IPCC_IsActiveFlag_CHx>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d009      	beq.n	8018fa2 <HW_IPCC_Rx_Handler+0x6a>
 8018f8e:	4b16      	ldr	r3, [pc, #88]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018f90:	685b      	ldr	r3, [r3, #4]
 8018f92:	43db      	mvns	r3, r3
 8018f94:	f003 0310 	and.w	r3, r3, #16
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d002      	beq.n	8018fa2 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8018f9c:	f000 f94a 	bl	8019234 <HW_IPCC_THREAD_CliNotEvtHandler>
 8018fa0:	e01f      	b.n	8018fe2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018fa2:	2101      	movs	r1, #1
 8018fa4:	4810      	ldr	r0, [pc, #64]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018fa6:	f7ff ffb2 	bl	8018f0e <LL_C2_IPCC_IsActiveFlag_CHx>
 8018faa:	4603      	mov	r3, r0
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d008      	beq.n	8018fc2 <HW_IPCC_Rx_Handler+0x8a>
 8018fb0:	4b0d      	ldr	r3, [pc, #52]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	f003 0301 	and.w	r3, r3, #1
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d102      	bne.n	8018fc2 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8018fbc:	f000 f898 	bl	80190f0 <HW_IPCC_BLE_EvtHandler>
 8018fc0:	e00f      	b.n	8018fe2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018fc2:	2108      	movs	r1, #8
 8018fc4:	4808      	ldr	r0, [pc, #32]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018fc6:	f7ff ffa2 	bl	8018f0e <LL_C2_IPCC_IsActiveFlag_CHx>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d009      	beq.n	8018fe4 <HW_IPCC_Rx_Handler+0xac>
 8018fd0:	4b05      	ldr	r3, [pc, #20]	; (8018fe8 <HW_IPCC_Rx_Handler+0xb0>)
 8018fd2:	685b      	ldr	r3, [r3, #4]
 8018fd4:	43db      	mvns	r3, r3
 8018fd6:	f003 0308 	and.w	r3, r3, #8
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d002      	beq.n	8018fe4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8018fde:	f000 f975 	bl	80192cc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8018fe2:	bf00      	nop
 8018fe4:	bf00      	nop
}
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	58000c00 	.word	0x58000c00

08018fec <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8018ff0:	2102      	movs	r1, #2
 8018ff2:	482b      	ldr	r0, [pc, #172]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8018ff4:	f7ff ff76 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d109      	bne.n	8019012 <HW_IPCC_Tx_Handler+0x26>
 8018ffe:	4b28      	ldr	r3, [pc, #160]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019000:	685b      	ldr	r3, [r3, #4]
 8019002:	43db      	mvns	r3, r3
 8019004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019008:	2b00      	cmp	r3, #0
 801900a:	d002      	beq.n	8019012 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801900c:	f000 f8a0 	bl	8019150 <HW_IPCC_SYS_CmdEvtHandler>
 8019010:	e042      	b.n	8019098 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8019012:	2104      	movs	r1, #4
 8019014:	4822      	ldr	r0, [pc, #136]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019016:	f7ff ff65 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 801901a:	4603      	mov	r3, r0
 801901c:	2b00      	cmp	r3, #0
 801901e:	d109      	bne.n	8019034 <HW_IPCC_Tx_Handler+0x48>
 8019020:	4b1f      	ldr	r3, [pc, #124]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	43db      	mvns	r3, r3
 8019026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801902a:	2b00      	cmp	r3, #0
 801902c:	d002      	beq.n	8019034 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801902e:	f000 f8e9 	bl	8019204 <HW_IPCC_OT_CmdEvtHandler>
 8019032:	e031      	b.n	8019098 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8019034:	2102      	movs	r1, #2
 8019036:	481a      	ldr	r0, [pc, #104]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019038:	f7ff ff54 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 801903c:	4603      	mov	r3, r0
 801903e:	2b00      	cmp	r3, #0
 8019040:	d109      	bne.n	8019056 <HW_IPCC_Tx_Handler+0x6a>
 8019042:	4b17      	ldr	r3, [pc, #92]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019044:	685b      	ldr	r3, [r3, #4]
 8019046:	43db      	mvns	r3, r3
 8019048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801904c:	2b00      	cmp	r3, #0
 801904e:	d002      	beq.n	8019056 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8019050:	f000 f87e 	bl	8019150 <HW_IPCC_SYS_CmdEvtHandler>
 8019054:	e020      	b.n	8019098 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8019056:	2108      	movs	r1, #8
 8019058:	4811      	ldr	r0, [pc, #68]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 801905a:	f7ff ff43 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 801905e:	4603      	mov	r3, r0
 8019060:	2b00      	cmp	r3, #0
 8019062:	d109      	bne.n	8019078 <HW_IPCC_Tx_Handler+0x8c>
 8019064:	4b0e      	ldr	r3, [pc, #56]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	43db      	mvns	r3, r3
 801906a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801906e:	2b00      	cmp	r3, #0
 8019070:	d002      	beq.n	8019078 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8019072:	f000 f90d 	bl	8019290 <HW_IPCC_MM_FreeBufHandler>
 8019076:	e00f      	b.n	8019098 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8019078:	2120      	movs	r1, #32
 801907a:	4809      	ldr	r0, [pc, #36]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 801907c:	f7ff ff32 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019080:	4603      	mov	r3, r0
 8019082:	2b00      	cmp	r3, #0
 8019084:	d109      	bne.n	801909a <HW_IPCC_Tx_Handler+0xae>
 8019086:	4b06      	ldr	r3, [pc, #24]	; (80190a0 <HW_IPCC_Tx_Handler+0xb4>)
 8019088:	685b      	ldr	r3, [r3, #4]
 801908a:	43db      	mvns	r3, r3
 801908c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019090:	2b00      	cmp	r3, #0
 8019092:	d002      	beq.n	801909a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8019094:	f000 f838 	bl	8019108 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8019098:	bf00      	nop
 801909a:	bf00      	nop
}
 801909c:	bd80      	pop	{r7, pc}
 801909e:	bf00      	nop
 80190a0:	58000c00 	.word	0x58000c00

080190a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80190a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80190ac:	f7ff fe46 	bl	8018d3c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80190b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80190b4:	f7ff fe56 	bl	8018d64 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80190b8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80190ba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80190bc:	f7ff fe64 	bl	8018d88 <LL_PWR_EnableBootC2>

  return;
 80190c0:	bf00      	nop
}
 80190c2:	bd80      	pop	{r7, pc}

080190c4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80190c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80190cc:	f7ff fe6c 	bl	8018da8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80190d0:	4806      	ldr	r0, [pc, #24]	; (80190ec <HW_IPCC_Init+0x28>)
 80190d2:	f7ff fe92 	bl	8018dfa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80190d6:	4805      	ldr	r0, [pc, #20]	; (80190ec <HW_IPCC_Init+0x28>)
 80190d8:	f7ff fe7f 	bl	8018dda <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80190dc:	202c      	movs	r0, #44	; 0x2c
 80190de:	f7ef f97a 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80190e2:	202d      	movs	r0, #45	; 0x2d
 80190e4:	f7ef f977 	bl	80083d6 <HAL_NVIC_EnableIRQ>

  return;
 80190e8:	bf00      	nop
}
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	58000c00 	.word	0x58000c00

080190f0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80190f4:	f7fd f890 	bl	8016218 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80190f8:	2101      	movs	r1, #1
 80190fa:	4802      	ldr	r0, [pc, #8]	; (8019104 <HW_IPCC_BLE_EvtHandler+0x14>)
 80190fc:	f7ff fed5 	bl	8018eaa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019100:	bf00      	nop
}
 8019102:	bd80      	pop	{r7, pc}
 8019104:	58000c00 	.word	0x58000c00

08019108 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019108:	b580      	push	{r7, lr}
 801910a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801910c:	2120      	movs	r1, #32
 801910e:	4803      	ldr	r0, [pc, #12]	; (801911c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8019110:	f7ff fe96 	bl	8018e40 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8019114:	f7fd f89c 	bl	8016250 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8019118:	bf00      	nop
}
 801911a:	bd80      	pop	{r7, pc}
 801911c:	58000c00 	.word	0x58000c00

08019120 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8019120:	b580      	push	{r7, lr}
 8019122:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019124:	2102      	movs	r1, #2
 8019126:	4802      	ldr	r0, [pc, #8]	; (8019130 <HW_IPCC_SYS_Init+0x10>)
 8019128:	f7ff fe9c 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801912c:	bf00      	nop
}
 801912e:	bd80      	pop	{r7, pc}
 8019130:	58000c00 	.word	0x58000c00

08019134 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8019134:	b580      	push	{r7, lr}
 8019136:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019138:	2102      	movs	r1, #2
 801913a:	4804      	ldr	r0, [pc, #16]	; (801914c <HW_IPCC_SYS_SendCmd+0x18>)
 801913c:	f7ff fec3 	bl	8018ec6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019140:	2102      	movs	r1, #2
 8019142:	4802      	ldr	r0, [pc, #8]	; (801914c <HW_IPCC_SYS_SendCmd+0x18>)
 8019144:	f7ff fe69 	bl	8018e1a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8019148:	bf00      	nop
}
 801914a:	bd80      	pop	{r7, pc}
 801914c:	58000c00 	.word	0x58000c00

08019150 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8019150:	b580      	push	{r7, lr}
 8019152:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019154:	2102      	movs	r1, #2
 8019156:	4803      	ldr	r0, [pc, #12]	; (8019164 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019158:	f7ff fe72 	bl	8018e40 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801915c:	f7fd f8c0 	bl	80162e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8019160:	bf00      	nop
}
 8019162:	bd80      	pop	{r7, pc}
 8019164:	58000c00 	.word	0x58000c00

08019168 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019168:	b580      	push	{r7, lr}
 801916a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801916c:	f7fd f8c8 	bl	8016300 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019170:	2102      	movs	r1, #2
 8019172:	4802      	ldr	r0, [pc, #8]	; (801917c <HW_IPCC_SYS_EvtHandler+0x14>)
 8019174:	f7ff fe99 	bl	8018eaa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019178:	bf00      	nop
}
 801917a:	bd80      	pop	{r7, pc}
 801917c:	58000c00 	.word	0x58000c00

08019180 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8019180:	b580      	push	{r7, lr}
 8019182:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019184:	2104      	movs	r1, #4
 8019186:	4804      	ldr	r0, [pc, #16]	; (8019198 <HW_IPCC_THREAD_Init+0x18>)
 8019188:	f7ff fe6c 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801918c:	2110      	movs	r1, #16
 801918e:	4802      	ldr	r0, [pc, #8]	; (8019198 <HW_IPCC_THREAD_Init+0x18>)
 8019190:	f7ff fe68 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019194:	bf00      	nop
}
 8019196:	bd80      	pop	{r7, pc}
 8019198:	58000c00 	.word	0x58000c00

0801919c <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 801919c:	b580      	push	{r7, lr}
 801919e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80191a0:	2104      	movs	r1, #4
 80191a2:	4804      	ldr	r0, [pc, #16]	; (80191b4 <HW_IPCC_OT_SendCmd+0x18>)
 80191a4:	f7ff fe8f 	bl	8018ec6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80191a8:	2104      	movs	r1, #4
 80191aa:	4802      	ldr	r0, [pc, #8]	; (80191b4 <HW_IPCC_OT_SendCmd+0x18>)
 80191ac:	f7ff fe35 	bl	8018e1a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80191b0:	bf00      	nop
}
 80191b2:	bd80      	pop	{r7, pc}
 80191b4:	58000c00 	.word	0x58000c00

080191b8 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 80191bc:	2110      	movs	r1, #16
 80191be:	4802      	ldr	r0, [pc, #8]	; (80191c8 <HW_IPCC_CLI_SendCmd+0x10>)
 80191c0:	f7ff fe81 	bl	8018ec6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80191c4:	bf00      	nop
}
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	58000c00 	.word	0x58000c00

080191cc <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80191cc:	b580      	push	{r7, lr}
 80191ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80191d0:	2104      	movs	r1, #4
 80191d2:	4804      	ldr	r0, [pc, #16]	; (80191e4 <HW_IPCC_THREAD_SendAck+0x18>)
 80191d4:	f7ff fe69 	bl	8018eaa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80191d8:	2104      	movs	r1, #4
 80191da:	4802      	ldr	r0, [pc, #8]	; (80191e4 <HW_IPCC_THREAD_SendAck+0x18>)
 80191dc:	f7ff fe42 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80191e0:	bf00      	nop
}
 80191e2:	bd80      	pop	{r7, pc}
 80191e4:	58000c00 	.word	0x58000c00

080191e8 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80191ec:	2110      	movs	r1, #16
 80191ee:	4804      	ldr	r0, [pc, #16]	; (8019200 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80191f0:	f7ff fe5b 	bl	8018eaa <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80191f4:	2110      	movs	r1, #16
 80191f6:	4802      	ldr	r0, [pc, #8]	; (8019200 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80191f8:	f7ff fe34 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80191fc:	bf00      	nop
}
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	58000c00 	.word	0x58000c00

08019204 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8019204:	b580      	push	{r7, lr}
 8019206:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8019208:	2104      	movs	r1, #4
 801920a:	4803      	ldr	r0, [pc, #12]	; (8019218 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 801920c:	f7ff fe18 	bl	8018e40 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8019210:	f7fd f8e6 	bl	80163e0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8019214:	bf00      	nop
}
 8019216:	bd80      	pop	{r7, pc}
 8019218:	58000c00 	.word	0x58000c00

0801921c <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8019220:	2104      	movs	r1, #4
 8019222:	4803      	ldr	r0, [pc, #12]	; (8019230 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8019224:	f7ff fe30 	bl	8018e88 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8019228:	f7fd f8e6 	bl	80163f8 <HW_IPCC_THREAD_EvtNot>

  return;
 801922c:	bf00      	nop
}
 801922e:	bd80      	pop	{r7, pc}
 8019230:	58000c00 	.word	0x58000c00

08019234 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8019234:	b580      	push	{r7, lr}
 8019236:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8019238:	2110      	movs	r1, #16
 801923a:	4803      	ldr	r0, [pc, #12]	; (8019248 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 801923c:	f7ff fe24 	bl	8018e88 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8019240:	f7fd f8e6 	bl	8016410 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8019244:	bf00      	nop
}
 8019246:	bd80      	pop	{r7, pc}
 8019248:	58000c00 	.word	0x58000c00

0801924c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019254:	2108      	movs	r1, #8
 8019256:	480c      	ldr	r0, [pc, #48]	; (8019288 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019258:	f7ff fe44 	bl	8018ee4 <LL_C1_IPCC_IsActiveFlag_CHx>
 801925c:	4603      	mov	r3, r0
 801925e:	2b00      	cmp	r3, #0
 8019260:	d007      	beq.n	8019272 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8019262:	4a0a      	ldr	r2, [pc, #40]	; (801928c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019268:	2108      	movs	r1, #8
 801926a:	4807      	ldr	r0, [pc, #28]	; (8019288 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801926c:	f7ff fdd5 	bl	8018e1a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8019270:	e006      	b.n	8019280 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019276:	2108      	movs	r1, #8
 8019278:	4803      	ldr	r0, [pc, #12]	; (8019288 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801927a:	f7ff fe24 	bl	8018ec6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801927e:	bf00      	nop
}
 8019280:	3708      	adds	r7, #8
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	58000c00 	.word	0x58000c00
 801928c:	20027848 	.word	0x20027848

08019290 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8019290:	b580      	push	{r7, lr}
 8019292:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019294:	2108      	movs	r1, #8
 8019296:	4806      	ldr	r0, [pc, #24]	; (80192b0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8019298:	f7ff fdd2 	bl	8018e40 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801929c:	4b05      	ldr	r3, [pc, #20]	; (80192b4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80192a2:	2108      	movs	r1, #8
 80192a4:	4802      	ldr	r0, [pc, #8]	; (80192b0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80192a6:	f7ff fe0e 	bl	8018ec6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80192aa:	bf00      	nop
}
 80192ac:	bd80      	pop	{r7, pc}
 80192ae:	bf00      	nop
 80192b0:	58000c00 	.word	0x58000c00
 80192b4:	20027848 	.word	0x20027848

080192b8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80192bc:	2108      	movs	r1, #8
 80192be:	4802      	ldr	r0, [pc, #8]	; (80192c8 <HW_IPCC_TRACES_Init+0x10>)
 80192c0:	f7ff fdd0 	bl	8018e64 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80192c4:	bf00      	nop
}
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	58000c00 	.word	0x58000c00

080192cc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80192d0:	f7fd f92c 	bl	801652c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80192d4:	2108      	movs	r1, #8
 80192d6:	4802      	ldr	r0, [pc, #8]	; (80192e0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80192d8:	f7ff fde7 	bl	8018eaa <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80192dc:	bf00      	nop
}
 80192de:	bd80      	pop	{r7, pc}
 80192e0:	58000c00 	.word	0x58000c00

080192e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80192e8:	2200      	movs	r2, #0
 80192ea:	4912      	ldr	r1, [pc, #72]	; (8019334 <MX_USB_Device_Init+0x50>)
 80192ec:	4812      	ldr	r0, [pc, #72]	; (8019338 <MX_USB_Device_Init+0x54>)
 80192ee:	f7fd fc09 	bl	8016b04 <USBD_Init>
 80192f2:	4603      	mov	r3, r0
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d001      	beq.n	80192fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80192f8:	f7eb f8f4 	bl	80044e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80192fc:	490f      	ldr	r1, [pc, #60]	; (801933c <MX_USB_Device_Init+0x58>)
 80192fe:	480e      	ldr	r0, [pc, #56]	; (8019338 <MX_USB_Device_Init+0x54>)
 8019300:	f7fd fc2b 	bl	8016b5a <USBD_RegisterClass>
 8019304:	4603      	mov	r3, r0
 8019306:	2b00      	cmp	r3, #0
 8019308:	d001      	beq.n	801930e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801930a:	f7eb f8eb 	bl	80044e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801930e:	490c      	ldr	r1, [pc, #48]	; (8019340 <MX_USB_Device_Init+0x5c>)
 8019310:	4809      	ldr	r0, [pc, #36]	; (8019338 <MX_USB_Device_Init+0x54>)
 8019312:	f7fd fb59 	bl	80169c8 <USBD_CDC_RegisterInterface>
 8019316:	4603      	mov	r3, r0
 8019318:	2b00      	cmp	r3, #0
 801931a:	d001      	beq.n	8019320 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801931c:	f7eb f8e2 	bl	80044e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8019320:	4805      	ldr	r0, [pc, #20]	; (8019338 <MX_USB_Device_Init+0x54>)
 8019322:	f7fd fc34 	bl	8016b8e <USBD_Start>
 8019326:	4603      	mov	r3, r0
 8019328:	2b00      	cmp	r3, #0
 801932a:	d001      	beq.n	8019330 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801932c:	f7eb f8da 	bl	80044e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8019330:	bf00      	nop
 8019332:	bd80      	pop	{r7, pc}
 8019334:	20000218 	.word	0x20000218
 8019338:	20028b48 	.word	0x20028b48
 801933c:	20000094 	.word	0x20000094
 8019340:	20000208 	.word	0x20000208

08019344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019344:	b580      	push	{r7, lr}
 8019346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019348:	2200      	movs	r2, #0
 801934a:	4905      	ldr	r1, [pc, #20]	; (8019360 <CDC_Init_FS+0x1c>)
 801934c:	4805      	ldr	r0, [pc, #20]	; (8019364 <CDC_Init_FS+0x20>)
 801934e:	f7fd fb52 	bl	80169f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019352:	4905      	ldr	r1, [pc, #20]	; (8019368 <CDC_Init_FS+0x24>)
 8019354:	4803      	ldr	r0, [pc, #12]	; (8019364 <CDC_Init_FS+0x20>)
 8019356:	f7fd fb68 	bl	8016a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801935a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801935c:	4618      	mov	r0, r3
 801935e:	bd80      	pop	{r7, pc}
 8019360:	2002960c 	.word	0x2002960c
 8019364:	20028b48 	.word	0x20028b48
 8019368:	20028e0c 	.word	0x20028e0c

0801936c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801936c:	b480      	push	{r7}
 801936e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019372:	4618      	mov	r0, r3
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr

0801937c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801937c:	b480      	push	{r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	4603      	mov	r3, r0
 8019384:	6039      	str	r1, [r7, #0]
 8019386:	71fb      	strb	r3, [r7, #7]
 8019388:	4613      	mov	r3, r2
 801938a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801938c:	79fb      	ldrb	r3, [r7, #7]
 801938e:	2b23      	cmp	r3, #35	; 0x23
 8019390:	d84a      	bhi.n	8019428 <CDC_Control_FS+0xac>
 8019392:	a201      	add	r2, pc, #4	; (adr r2, 8019398 <CDC_Control_FS+0x1c>)
 8019394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019398:	08019429 	.word	0x08019429
 801939c:	08019429 	.word	0x08019429
 80193a0:	08019429 	.word	0x08019429
 80193a4:	08019429 	.word	0x08019429
 80193a8:	08019429 	.word	0x08019429
 80193ac:	08019429 	.word	0x08019429
 80193b0:	08019429 	.word	0x08019429
 80193b4:	08019429 	.word	0x08019429
 80193b8:	08019429 	.word	0x08019429
 80193bc:	08019429 	.word	0x08019429
 80193c0:	08019429 	.word	0x08019429
 80193c4:	08019429 	.word	0x08019429
 80193c8:	08019429 	.word	0x08019429
 80193cc:	08019429 	.word	0x08019429
 80193d0:	08019429 	.word	0x08019429
 80193d4:	08019429 	.word	0x08019429
 80193d8:	08019429 	.word	0x08019429
 80193dc:	08019429 	.word	0x08019429
 80193e0:	08019429 	.word	0x08019429
 80193e4:	08019429 	.word	0x08019429
 80193e8:	08019429 	.word	0x08019429
 80193ec:	08019429 	.word	0x08019429
 80193f0:	08019429 	.word	0x08019429
 80193f4:	08019429 	.word	0x08019429
 80193f8:	08019429 	.word	0x08019429
 80193fc:	08019429 	.word	0x08019429
 8019400:	08019429 	.word	0x08019429
 8019404:	08019429 	.word	0x08019429
 8019408:	08019429 	.word	0x08019429
 801940c:	08019429 	.word	0x08019429
 8019410:	08019429 	.word	0x08019429
 8019414:	08019429 	.word	0x08019429
 8019418:	08019429 	.word	0x08019429
 801941c:	08019429 	.word	0x08019429
 8019420:	08019429 	.word	0x08019429
 8019424:	08019429 	.word	0x08019429
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019428:	bf00      	nop
  }

  return (USBD_OK);
 801942a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801942c:	4618      	mov	r0, r3
 801942e:	370c      	adds	r7, #12
 8019430:	46bd      	mov	sp, r7
 8019432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019436:	4770      	bx	lr

08019438 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b082      	sub	sp, #8
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
 8019440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(*Len == 6){
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	2b06      	cmp	r3, #6
 8019448:	d133      	bne.n	80194b2 <CDC_Receive_FS+0x7a>
	  receivedMsgPacket.len = 6;
 801944a:	4b2a      	ldr	r3, [pc, #168]	; (80194f4 <CDC_Receive_FS+0xbc>)
 801944c:	2206      	movs	r2, #6
 801944e:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	3b30      	subs	r3, #48	; 0x30
 8019456:	b2da      	uxtb	r2, r3
 8019458:	4b26      	ldr	r3, [pc, #152]	; (80194f4 <CDC_Receive_FS+0xbc>)
 801945a:	705a      	strb	r2, [r3, #1]
	  receivedMsgPacket.buf[1] = Buf[1] - '0';
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	3301      	adds	r3, #1
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	3b30      	subs	r3, #48	; 0x30
 8019464:	b2da      	uxtb	r2, r3
 8019466:	4b23      	ldr	r3, [pc, #140]	; (80194f4 <CDC_Receive_FS+0xbc>)
 8019468:	709a      	strb	r2, [r3, #2]
	  receivedMsgPacket.buf[2] = Buf[2] - '0';
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	3302      	adds	r3, #2
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	3b30      	subs	r3, #48	; 0x30
 8019472:	b2da      	uxtb	r2, r3
 8019474:	4b1f      	ldr	r3, [pc, #124]	; (80194f4 <CDC_Receive_FS+0xbc>)
 8019476:	70da      	strb	r2, [r3, #3]
	  receivedMsgPacket.buf[3] = Buf[3] - '0';
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	3303      	adds	r3, #3
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	3b30      	subs	r3, #48	; 0x30
 8019480:	b2da      	uxtb	r2, r3
 8019482:	4b1c      	ldr	r3, [pc, #112]	; (80194f4 <CDC_Receive_FS+0xbc>)
 8019484:	711a      	strb	r2, [r3, #4]
	  receivedMsgPacket.buf[4] = Buf[4] - '0';
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	3304      	adds	r3, #4
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	3b30      	subs	r3, #48	; 0x30
 801948e:	b2da      	uxtb	r2, r3
 8019490:	4b18      	ldr	r3, [pc, #96]	; (80194f4 <CDC_Receive_FS+0xbc>)
 8019492:	715a      	strb	r2, [r3, #5]
	  receivedMsgPacket.buf[5]  = Buf[5] - '0';
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	3305      	adds	r3, #5
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	3b30      	subs	r3, #48	; 0x30
 801949c:	b2da      	uxtb	r2, r3
 801949e:	4b15      	ldr	r3, [pc, #84]	; (80194f4 <CDC_Receive_FS+0xbc>)
 80194a0:	719a      	strb	r2, [r3, #6]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 80194a2:	4b15      	ldr	r3, [pc, #84]	; (80194f8 <CDC_Receive_FS+0xc0>)
 80194a4:	6818      	ldr	r0, [r3, #0]
 80194a6:	2300      	movs	r3, #0
 80194a8:	2200      	movs	r2, #0
 80194aa:	4912      	ldr	r1, [pc, #72]	; (80194f4 <CDC_Receive_FS+0xbc>)
 80194ac:	f7f7 fdbc 	bl	8011028 <osMessageQueuePut>
 80194b0:	e013      	b.n	80194da <CDC_Receive_FS+0xa2>

//	  APP_THREAD_SendCoapMsg(&logReceivedMessage, sizeof(struct LogMessage), &multicastAddr, "togLog", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  else if(*Len == 4){
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b04      	cmp	r3, #4
 80194b8:	d10f      	bne.n	80194da <CDC_Receive_FS+0xa2>
	  receivedMsgPacket.len = 1;
 80194ba:	4b0e      	ldr	r3, [pc, #56]	; (80194f4 <CDC_Receive_FS+0xbc>)
 80194bc:	2201      	movs	r2, #1
 80194be:	701a      	strb	r2, [r3, #0]

	  receivedMsgPacket.buf[0] = Buf[0] - '0';
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	3b30      	subs	r3, #48	; 0x30
 80194c6:	b2da      	uxtb	r2, r3
 80194c8:	4b0a      	ldr	r3, [pc, #40]	; (80194f4 <CDC_Receive_FS+0xbc>)
 80194ca:	705a      	strb	r2, [r3, #1]

	  osMessageQueuePut(msgPasssingUSB_QueueHandle, &receivedMsgPacket, 0, 0);
 80194cc:	4b0a      	ldr	r3, [pc, #40]	; (80194f8 <CDC_Receive_FS+0xc0>)
 80194ce:	6818      	ldr	r0, [r3, #0]
 80194d0:	2300      	movs	r3, #0
 80194d2:	2200      	movs	r2, #0
 80194d4:	4907      	ldr	r1, [pc, #28]	; (80194f4 <CDC_Receive_FS+0xbc>)
 80194d6:	f7f7 fda7 	bl	8011028 <osMessageQueuePut>

//	  APP_THREAD_SendCoapMsg(&lightsSimpleReceivedMessage, sizeof(lightsSimpleReceivedMessage), &multicastAddr, "lightS", NO_ACK, OT_COAP_CODE_PUT, 1U);
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80194da:	6879      	ldr	r1, [r7, #4]
 80194dc:	4807      	ldr	r0, [pc, #28]	; (80194fc <CDC_Receive_FS+0xc4>)
 80194de:	f7fd faa4 	bl	8016a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80194e2:	4806      	ldr	r0, [pc, #24]	; (80194fc <CDC_Receive_FS+0xc4>)
 80194e4:	f7fd fae4 	bl	8016ab0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80194e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80194ea:	4618      	mov	r0, r3
 80194ec:	3708      	adds	r7, #8
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}
 80194f2:	bf00      	nop
 80194f4:	20029e0c 	.word	0x20029e0c
 80194f8:	20027c44 	.word	0x20027c44
 80194fc:	20028b48 	.word	0x20028b48

08019500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b084      	sub	sp, #16
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	460b      	mov	r3, r1
 801950a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801950c:	2300      	movs	r3, #0
 801950e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019510:	4b0d      	ldr	r3, [pc, #52]	; (8019548 <CDC_Transmit_FS+0x48>)
 8019512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801951e:	2b00      	cmp	r3, #0
 8019520:	d001      	beq.n	8019526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019522:	2301      	movs	r3, #1
 8019524:	e00b      	b.n	801953e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019526:	887b      	ldrh	r3, [r7, #2]
 8019528:	461a      	mov	r2, r3
 801952a:	6879      	ldr	r1, [r7, #4]
 801952c:	4806      	ldr	r0, [pc, #24]	; (8019548 <CDC_Transmit_FS+0x48>)
 801952e:	f7fd fa62 	bl	80169f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019532:	4805      	ldr	r0, [pc, #20]	; (8019548 <CDC_Transmit_FS+0x48>)
 8019534:	f7fd fa8d 	bl	8016a52 <USBD_CDC_TransmitPacket>
 8019538:	4603      	mov	r3, r0
 801953a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801953c:	7bfb      	ldrb	r3, [r7, #15]
}
 801953e:	4618      	mov	r0, r3
 8019540:	3710      	adds	r7, #16
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}
 8019546:	bf00      	nop
 8019548:	20028b48 	.word	0x20028b48

0801954c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801954c:	b480      	push	{r7}
 801954e:	b083      	sub	sp, #12
 8019550:	af00      	add	r7, sp, #0
 8019552:	4603      	mov	r3, r0
 8019554:	6039      	str	r1, [r7, #0]
 8019556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	2212      	movs	r2, #18
 801955c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801955e:	4b03      	ldr	r3, [pc, #12]	; (801956c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8019560:	4618      	mov	r0, r3
 8019562:	370c      	adds	r7, #12
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr
 801956c:	20000238 	.word	0x20000238

08019570 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019570:	b480      	push	{r7}
 8019572:	b083      	sub	sp, #12
 8019574:	af00      	add	r7, sp, #0
 8019576:	4603      	mov	r3, r0
 8019578:	6039      	str	r1, [r7, #0]
 801957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	2204      	movs	r2, #4
 8019580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019582:	4b03      	ldr	r3, [pc, #12]	; (8019590 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8019584:	4618      	mov	r0, r3
 8019586:	370c      	adds	r7, #12
 8019588:	46bd      	mov	sp, r7
 801958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958e:	4770      	bx	lr
 8019590:	2000024c 	.word	0x2000024c

08019594 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b082      	sub	sp, #8
 8019598:	af00      	add	r7, sp, #0
 801959a:	4603      	mov	r3, r0
 801959c:	6039      	str	r1, [r7, #0]
 801959e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80195a0:	79fb      	ldrb	r3, [r7, #7]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d105      	bne.n	80195b2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80195a6:	683a      	ldr	r2, [r7, #0]
 80195a8:	4907      	ldr	r1, [pc, #28]	; (80195c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80195aa:	4808      	ldr	r0, [pc, #32]	; (80195cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80195ac:	f7fe fa8a 	bl	8017ac4 <USBD_GetString>
 80195b0:	e004      	b.n	80195bc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80195b2:	683a      	ldr	r2, [r7, #0]
 80195b4:	4904      	ldr	r1, [pc, #16]	; (80195c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80195b6:	4805      	ldr	r0, [pc, #20]	; (80195cc <USBD_CDC_ProductStrDescriptor+0x38>)
 80195b8:	f7fe fa84 	bl	8017ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80195bc:	4b02      	ldr	r3, [pc, #8]	; (80195c8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80195be:	4618      	mov	r0, r3
 80195c0:	3708      	adds	r7, #8
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	20029e18 	.word	0x20029e18
 80195cc:	0801ba98 	.word	0x0801ba98

080195d0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	4603      	mov	r3, r0
 80195d8:	6039      	str	r1, [r7, #0]
 80195da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80195dc:	683a      	ldr	r2, [r7, #0]
 80195de:	4904      	ldr	r1, [pc, #16]	; (80195f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80195e0:	4804      	ldr	r0, [pc, #16]	; (80195f4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80195e2:	f7fe fa6f 	bl	8017ac4 <USBD_GetString>
  return USBD_StrDesc;
 80195e6:	4b02      	ldr	r3, [pc, #8]	; (80195f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	3708      	adds	r7, #8
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}
 80195f0:	20029e18 	.word	0x20029e18
 80195f4:	0801bab0 	.word	0x0801bab0

080195f8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b082      	sub	sp, #8
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	4603      	mov	r3, r0
 8019600:	6039      	str	r1, [r7, #0]
 8019602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	221a      	movs	r2, #26
 8019608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801960a:	f000 f843 	bl	8019694 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801960e:	4b02      	ldr	r3, [pc, #8]	; (8019618 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8019610:	4618      	mov	r0, r3
 8019612:	3708      	adds	r7, #8
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}
 8019618:	20000250 	.word	0x20000250

0801961c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	4603      	mov	r3, r0
 8019624:	6039      	str	r1, [r7, #0]
 8019626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019628:	79fb      	ldrb	r3, [r7, #7]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d105      	bne.n	801963a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801962e:	683a      	ldr	r2, [r7, #0]
 8019630:	4907      	ldr	r1, [pc, #28]	; (8019650 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019632:	4808      	ldr	r0, [pc, #32]	; (8019654 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019634:	f7fe fa46 	bl	8017ac4 <USBD_GetString>
 8019638:	e004      	b.n	8019644 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	4904      	ldr	r1, [pc, #16]	; (8019650 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801963e:	4805      	ldr	r0, [pc, #20]	; (8019654 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019640:	f7fe fa40 	bl	8017ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019644:	4b02      	ldr	r3, [pc, #8]	; (8019650 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8019646:	4618      	mov	r0, r3
 8019648:	3708      	adds	r7, #8
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}
 801964e:	bf00      	nop
 8019650:	20029e18 	.word	0x20029e18
 8019654:	0801bac4 	.word	0x0801bac4

08019658 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
 801965e:	4603      	mov	r3, r0
 8019660:	6039      	str	r1, [r7, #0]
 8019662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019664:	79fb      	ldrb	r3, [r7, #7]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d105      	bne.n	8019676 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801966a:	683a      	ldr	r2, [r7, #0]
 801966c:	4907      	ldr	r1, [pc, #28]	; (801968c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801966e:	4808      	ldr	r0, [pc, #32]	; (8019690 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019670:	f7fe fa28 	bl	8017ac4 <USBD_GetString>
 8019674:	e004      	b.n	8019680 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019676:	683a      	ldr	r2, [r7, #0]
 8019678:	4904      	ldr	r1, [pc, #16]	; (801968c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801967a:	4805      	ldr	r0, [pc, #20]	; (8019690 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801967c:	f7fe fa22 	bl	8017ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019680:	4b02      	ldr	r3, [pc, #8]	; (801968c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8019682:	4618      	mov	r0, r3
 8019684:	3708      	adds	r7, #8
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}
 801968a:	bf00      	nop
 801968c:	20029e18 	.word	0x20029e18
 8019690:	0801bad0 	.word	0x0801bad0

08019694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801969a:	4b0f      	ldr	r3, [pc, #60]	; (80196d8 <Get_SerialNum+0x44>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80196a0:	4b0e      	ldr	r3, [pc, #56]	; (80196dc <Get_SerialNum+0x48>)
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80196a6:	4b0e      	ldr	r3, [pc, #56]	; (80196e0 <Get_SerialNum+0x4c>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80196ac:	68fa      	ldr	r2, [r7, #12]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	4413      	add	r3, r2
 80196b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d009      	beq.n	80196ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80196ba:	2208      	movs	r2, #8
 80196bc:	4909      	ldr	r1, [pc, #36]	; (80196e4 <Get_SerialNum+0x50>)
 80196be:	68f8      	ldr	r0, [r7, #12]
 80196c0:	f000 f814 	bl	80196ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80196c4:	2204      	movs	r2, #4
 80196c6:	4908      	ldr	r1, [pc, #32]	; (80196e8 <Get_SerialNum+0x54>)
 80196c8:	68b8      	ldr	r0, [r7, #8]
 80196ca:	f000 f80f 	bl	80196ec <IntToUnicode>
  }
}
 80196ce:	bf00      	nop
 80196d0:	3710      	adds	r7, #16
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
 80196d6:	bf00      	nop
 80196d8:	1fff7590 	.word	0x1fff7590
 80196dc:	1fff7594 	.word	0x1fff7594
 80196e0:	1fff7598 	.word	0x1fff7598
 80196e4:	20000252 	.word	0x20000252
 80196e8:	20000262 	.word	0x20000262

080196ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80196ec:	b480      	push	{r7}
 80196ee:	b087      	sub	sp, #28
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	4613      	mov	r3, r2
 80196f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80196fa:	2300      	movs	r3, #0
 80196fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80196fe:	2300      	movs	r3, #0
 8019700:	75fb      	strb	r3, [r7, #23]
 8019702:	e027      	b.n	8019754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	0f1b      	lsrs	r3, r3, #28
 8019708:	2b09      	cmp	r3, #9
 801970a:	d80b      	bhi.n	8019724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	0f1b      	lsrs	r3, r3, #28
 8019710:	b2da      	uxtb	r2, r3
 8019712:	7dfb      	ldrb	r3, [r7, #23]
 8019714:	005b      	lsls	r3, r3, #1
 8019716:	4619      	mov	r1, r3
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	440b      	add	r3, r1
 801971c:	3230      	adds	r2, #48	; 0x30
 801971e:	b2d2      	uxtb	r2, r2
 8019720:	701a      	strb	r2, [r3, #0]
 8019722:	e00a      	b.n	801973a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	0f1b      	lsrs	r3, r3, #28
 8019728:	b2da      	uxtb	r2, r3
 801972a:	7dfb      	ldrb	r3, [r7, #23]
 801972c:	005b      	lsls	r3, r3, #1
 801972e:	4619      	mov	r1, r3
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	440b      	add	r3, r1
 8019734:	3237      	adds	r2, #55	; 0x37
 8019736:	b2d2      	uxtb	r2, r2
 8019738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	011b      	lsls	r3, r3, #4
 801973e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019740:	7dfb      	ldrb	r3, [r7, #23]
 8019742:	005b      	lsls	r3, r3, #1
 8019744:	3301      	adds	r3, #1
 8019746:	68ba      	ldr	r2, [r7, #8]
 8019748:	4413      	add	r3, r2
 801974a:	2200      	movs	r2, #0
 801974c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801974e:	7dfb      	ldrb	r3, [r7, #23]
 8019750:	3301      	adds	r3, #1
 8019752:	75fb      	strb	r3, [r7, #23]
 8019754:	7dfa      	ldrb	r2, [r7, #23]
 8019756:	79fb      	ldrb	r3, [r7, #7]
 8019758:	429a      	cmp	r2, r3
 801975a:	d3d3      	bcc.n	8019704 <IntToUnicode+0x18>
  }
}
 801975c:	bf00      	nop
 801975e:	371c      	adds	r7, #28
 8019760:	46bd      	mov	sp, r7
 8019762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019766:	4770      	bx	lr

08019768 <LL_AHB2_GRP1_EnableClock>:
{
 8019768:	b480      	push	{r7}
 801976a:	b085      	sub	sp, #20
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	4313      	orrs	r3, r2
 801977e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	4013      	ands	r3, r2
 801978a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801978c:	68fb      	ldr	r3, [r7, #12]
}
 801978e:	bf00      	nop
 8019790:	3714      	adds	r7, #20
 8019792:	46bd      	mov	sp, r7
 8019794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019798:	4770      	bx	lr

0801979a <LL_APB1_GRP1_EnableClock>:
{
 801979a:	b480      	push	{r7}
 801979c:	b085      	sub	sp, #20
 801979e:	af00      	add	r7, sp, #0
 80197a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80197a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	4313      	orrs	r3, r2
 80197b0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80197b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80197b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	4013      	ands	r3, r2
 80197bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80197be:	68fb      	ldr	r3, [r7, #12]
}
 80197c0:	bf00      	nop
 80197c2:	3714      	adds	r7, #20
 80197c4:	46bd      	mov	sp, r7
 80197c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ca:	4770      	bx	lr

080197cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b088      	sub	sp, #32
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80197d4:	f107 030c 	add.w	r3, r7, #12
 80197d8:	2200      	movs	r2, #0
 80197da:	601a      	str	r2, [r3, #0]
 80197dc:	605a      	str	r2, [r3, #4]
 80197de:	609a      	str	r2, [r3, #8]
 80197e0:	60da      	str	r2, [r3, #12]
 80197e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4a13      	ldr	r2, [pc, #76]	; (8019838 <HAL_PCD_MspInit+0x6c>)
 80197ea:	4293      	cmp	r3, r2
 80197ec:	d120      	bne.n	8019830 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80197ee:	2001      	movs	r0, #1
 80197f0:	f7ff ffba 	bl	8019768 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80197f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80197f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80197fa:	2302      	movs	r3, #2
 80197fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80197fe:	2300      	movs	r3, #0
 8019800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019802:	2300      	movs	r3, #0
 8019804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019806:	230a      	movs	r3, #10
 8019808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801980a:	f107 030c 	add.w	r3, r7, #12
 801980e:	4619      	mov	r1, r3
 8019810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019814:	f7ef f94c 	bl	8008ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019818:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801981c:	f7ff ffbd 	bl	801979a <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8019820:	2200      	movs	r2, #0
 8019822:	2105      	movs	r1, #5
 8019824:	2014      	movs	r0, #20
 8019826:	f7ee fdbc 	bl	80083a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801982a:	2014      	movs	r0, #20
 801982c:	f7ee fdd3 	bl	80083d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019830:	bf00      	nop
 8019832:	3720      	adds	r7, #32
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	40006800 	.word	0x40006800

0801983c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8019850:	4619      	mov	r1, r3
 8019852:	4610      	mov	r0, r2
 8019854:	f7fd f9e4 	bl	8016c20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019858:	bf00      	nop
 801985a:	3708      	adds	r7, #8
 801985c:	46bd      	mov	sp, r7
 801985e:	bd80      	pop	{r7, pc}

08019860 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b082      	sub	sp, #8
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	460b      	mov	r3, r1
 801986a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8019872:	78fb      	ldrb	r3, [r7, #3]
 8019874:	687a      	ldr	r2, [r7, #4]
 8019876:	015b      	lsls	r3, r3, #5
 8019878:	4413      	add	r3, r2
 801987a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801987e:	681a      	ldr	r2, [r3, #0]
 8019880:	78fb      	ldrb	r3, [r7, #3]
 8019882:	4619      	mov	r1, r3
 8019884:	f7fd fa17 	bl	8016cb6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8019888:	bf00      	nop
 801988a:	3708      	adds	r7, #8
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}

08019890 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b082      	sub	sp, #8
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
 8019898:	460b      	mov	r3, r1
 801989a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80198a2:	78fb      	ldrb	r3, [r7, #3]
 80198a4:	687a      	ldr	r2, [r7, #4]
 80198a6:	015b      	lsls	r3, r3, #5
 80198a8:	4413      	add	r3, r2
 80198aa:	333c      	adds	r3, #60	; 0x3c
 80198ac:	681a      	ldr	r2, [r3, #0]
 80198ae:	78fb      	ldrb	r3, [r7, #3]
 80198b0:	4619      	mov	r1, r3
 80198b2:	f7fd fa71 	bl	8016d98 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80198b6:	bf00      	nop
 80198b8:	3708      	adds	r7, #8
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bd80      	pop	{r7, pc}

080198be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198be:	b580      	push	{r7, lr}
 80198c0:	b082      	sub	sp, #8
 80198c2:	af00      	add	r7, sp, #0
 80198c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7fd fb84 	bl	8016fda <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80198d2:	bf00      	nop
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80198da:	b580      	push	{r7, lr}
 80198dc:	b084      	sub	sp, #16
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80198e2:	2301      	movs	r3, #1
 80198e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	689b      	ldr	r3, [r3, #8]
 80198ea:	2b02      	cmp	r3, #2
 80198ec:	d001      	beq.n	80198f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80198ee:	f7ea fdf9 	bl	80044e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80198f8:	7bfa      	ldrb	r2, [r7, #15]
 80198fa:	4611      	mov	r1, r2
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7fd fb31 	bl	8016f64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019908:	4618      	mov	r0, r3
 801990a:	f7fd faea 	bl	8016ee2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801990e:	bf00      	nop
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
	...

08019918 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b082      	sub	sp, #8
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019926:	4618      	mov	r0, r3
 8019928:	f7fd fb2c 	bl	8016f84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	699b      	ldr	r3, [r3, #24]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d005      	beq.n	8019940 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019934:	4b04      	ldr	r3, [pc, #16]	; (8019948 <HAL_PCD_SuspendCallback+0x30>)
 8019936:	691b      	ldr	r3, [r3, #16]
 8019938:	4a03      	ldr	r2, [pc, #12]	; (8019948 <HAL_PCD_SuspendCallback+0x30>)
 801993a:	f043 0306 	orr.w	r3, r3, #6
 801993e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8019940:	bf00      	nop
 8019942:	3708      	adds	r7, #8
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	e000ed00 	.word	0xe000ed00

0801994c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b082      	sub	sp, #8
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	699b      	ldr	r3, [r3, #24]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d007      	beq.n	801996c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801995c:	4b08      	ldr	r3, [pc, #32]	; (8019980 <HAL_PCD_ResumeCallback+0x34>)
 801995e:	691b      	ldr	r3, [r3, #16]
 8019960:	4a07      	ldr	r2, [pc, #28]	; (8019980 <HAL_PCD_ResumeCallback+0x34>)
 8019962:	f023 0306 	bic.w	r3, r3, #6
 8019966:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019968:	f000 f9f8 	bl	8019d5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019972:	4618      	mov	r0, r3
 8019974:	f7fd fb1b 	bl	8016fae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019978:	bf00      	nop
 801997a:	3708      	adds	r7, #8
 801997c:	46bd      	mov	sp, r7
 801997e:	bd80      	pop	{r7, pc}
 8019980:	e000ed00 	.word	0xe000ed00

08019984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801998c:	4a2c      	ldr	r2, [pc, #176]	; (8019a40 <USBD_LL_Init+0xbc>)
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	4a2a      	ldr	r2, [pc, #168]	; (8019a40 <USBD_LL_Init+0xbc>)
 8019998:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801999c:	f7f2 f92e 	bl	800bbfc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80199a0:	4b27      	ldr	r3, [pc, #156]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199a2:	4a28      	ldr	r2, [pc, #160]	; (8019a44 <USBD_LL_Init+0xc0>)
 80199a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80199a6:	4b26      	ldr	r3, [pc, #152]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199a8:	2208      	movs	r2, #8
 80199aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80199ac:	4b24      	ldr	r3, [pc, #144]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199ae:	2202      	movs	r2, #2
 80199b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80199b2:	4b23      	ldr	r3, [pc, #140]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199b4:	2202      	movs	r2, #2
 80199b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80199b8:	4b21      	ldr	r3, [pc, #132]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199ba:	2200      	movs	r2, #0
 80199bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80199be:	4b20      	ldr	r3, [pc, #128]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199c0:	2200      	movs	r2, #0
 80199c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80199c4:	4b1e      	ldr	r3, [pc, #120]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199c6:	2200      	movs	r2, #0
 80199c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80199ca:	4b1d      	ldr	r3, [pc, #116]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199cc:	2200      	movs	r2, #0
 80199ce:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80199d0:	481b      	ldr	r0, [pc, #108]	; (8019a40 <USBD_LL_Init+0xbc>)
 80199d2:	f7f1 f9d7 	bl	800ad84 <HAL_PCD_Init>
 80199d6:	4603      	mov	r3, r0
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d001      	beq.n	80199e0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80199dc:	f7ea fd82 	bl	80044e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80199e6:	2318      	movs	r3, #24
 80199e8:	2200      	movs	r2, #0
 80199ea:	2100      	movs	r1, #0
 80199ec:	f7f2 f880 	bl	800baf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80199f6:	2358      	movs	r3, #88	; 0x58
 80199f8:	2200      	movs	r2, #0
 80199fa:	2180      	movs	r1, #128	; 0x80
 80199fc:	f7f2 f878 	bl	800baf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019a06:	23c0      	movs	r3, #192	; 0xc0
 8019a08:	2200      	movs	r2, #0
 8019a0a:	2181      	movs	r1, #129	; 0x81
 8019a0c:	f7f2 f870 	bl	800baf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019a16:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	2101      	movs	r1, #1
 8019a1e:	f7f2 f867 	bl	800baf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	2182      	movs	r1, #130	; 0x82
 8019a30:	f7f2 f85e 	bl	800baf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019a34:	2300      	movs	r3, #0
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3708      	adds	r7, #8
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}
 8019a3e:	bf00      	nop
 8019a40:	2002a018 	.word	0x2002a018
 8019a44:	40006800 	.word	0x40006800

08019a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a54:	2300      	movs	r3, #0
 8019a56:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7f1 fa4b 	bl	800aefa <HAL_PCD_Start>
 8019a64:	4603      	mov	r3, r0
 8019a66:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a68:	7bfb      	ldrb	r3, [r7, #15]
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f000 f97c 	bl	8019d68 <USBD_Get_USB_Status>
 8019a70:	4603      	mov	r3, r0
 8019a72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a76:	4618      	mov	r0, r3
 8019a78:	3710      	adds	r7, #16
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	bd80      	pop	{r7, pc}

08019a7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019a7e:	b580      	push	{r7, lr}
 8019a80:	b084      	sub	sp, #16
 8019a82:	af00      	add	r7, sp, #0
 8019a84:	6078      	str	r0, [r7, #4]
 8019a86:	4608      	mov	r0, r1
 8019a88:	4611      	mov	r1, r2
 8019a8a:	461a      	mov	r2, r3
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	70fb      	strb	r3, [r7, #3]
 8019a90:	460b      	mov	r3, r1
 8019a92:	70bb      	strb	r3, [r7, #2]
 8019a94:	4613      	mov	r3, r2
 8019a96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019aa6:	78bb      	ldrb	r3, [r7, #2]
 8019aa8:	883a      	ldrh	r2, [r7, #0]
 8019aaa:	78f9      	ldrb	r1, [r7, #3]
 8019aac:	f7f1 fbc5 	bl	800b23a <HAL_PCD_EP_Open>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ab4:	7bfb      	ldrb	r3, [r7, #15]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f000 f956 	bl	8019d68 <USBD_Get_USB_Status>
 8019abc:	4603      	mov	r3, r0
 8019abe:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3710      	adds	r7, #16
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}

08019aca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019aca:	b580      	push	{r7, lr}
 8019acc:	b084      	sub	sp, #16
 8019ace:	af00      	add	r7, sp, #0
 8019ad0:	6078      	str	r0, [r7, #4]
 8019ad2:	460b      	mov	r3, r1
 8019ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ada:	2300      	movs	r3, #0
 8019adc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ae4:	78fa      	ldrb	r2, [r7, #3]
 8019ae6:	4611      	mov	r1, r2
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7f1 fc06 	bl	800b2fa <HAL_PCD_EP_Close>
 8019aee:	4603      	mov	r3, r0
 8019af0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019af2:	7bfb      	ldrb	r3, [r7, #15]
 8019af4:	4618      	mov	r0, r3
 8019af6:	f000 f937 	bl	8019d68 <USBD_Get_USB_Status>
 8019afa:	4603      	mov	r3, r0
 8019afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8019afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3710      	adds	r7, #16
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd80      	pop	{r7, pc}

08019b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
 8019b10:	460b      	mov	r3, r1
 8019b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b14:	2300      	movs	r3, #0
 8019b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b22:	78fa      	ldrb	r2, [r7, #3]
 8019b24:	4611      	mov	r1, r2
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7f1 fcb1 	bl	800b48e <HAL_PCD_EP_SetStall>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b30:	7bfb      	ldrb	r3, [r7, #15]
 8019b32:	4618      	mov	r0, r3
 8019b34:	f000 f918 	bl	8019d68 <USBD_Get_USB_Status>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3710      	adds	r7, #16
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}

08019b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b46:	b580      	push	{r7, lr}
 8019b48:	b084      	sub	sp, #16
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	6078      	str	r0, [r7, #4]
 8019b4e:	460b      	mov	r3, r1
 8019b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b52:	2300      	movs	r3, #0
 8019b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b56:	2300      	movs	r3, #0
 8019b58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b60:	78fa      	ldrb	r2, [r7, #3]
 8019b62:	4611      	mov	r1, r2
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7f1 fcec 	bl	800b542 <HAL_PCD_EP_ClrStall>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b6e:	7bfb      	ldrb	r3, [r7, #15]
 8019b70:	4618      	mov	r0, r3
 8019b72:	f000 f8f9 	bl	8019d68 <USBD_Get_USB_Status>
 8019b76:	4603      	mov	r3, r0
 8019b78:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8019b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3710      	adds	r7, #16
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b84:	b480      	push	{r7}
 8019b86:	b085      	sub	sp, #20
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	460b      	mov	r3, r1
 8019b8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b96:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8019b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	da08      	bge.n	8019bb2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8019ba0:	78fb      	ldrb	r3, [r7, #3]
 8019ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ba6:	68fa      	ldr	r2, [r7, #12]
 8019ba8:	015b      	lsls	r3, r3, #5
 8019baa:	4413      	add	r3, r2
 8019bac:	332a      	adds	r3, #42	; 0x2a
 8019bae:	781b      	ldrb	r3, [r3, #0]
 8019bb0:	e008      	b.n	8019bc4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8019bb2:	78fb      	ldrb	r3, [r7, #3]
 8019bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019bb8:	68fa      	ldr	r2, [r7, #12]
 8019bba:	015b      	lsls	r3, r3, #5
 8019bbc:	4413      	add	r3, r2
 8019bbe:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8019bc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3714      	adds	r7, #20
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bce:	4770      	bx	lr

08019bd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b084      	sub	sp, #16
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	460b      	mov	r3, r1
 8019bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bdc:	2300      	movs	r3, #0
 8019bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019be0:	2300      	movs	r3, #0
 8019be2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019bea:	78fa      	ldrb	r2, [r7, #3]
 8019bec:	4611      	mov	r1, r2
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f1 fafe 	bl	800b1f0 <HAL_PCD_SetAddress>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019bf8:	7bfb      	ldrb	r3, [r7, #15]
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f000 f8b4 	bl	8019d68 <USBD_Get_USB_Status>
 8019c00:	4603      	mov	r3, r0
 8019c02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c06:	4618      	mov	r0, r3
 8019c08:	3710      	adds	r7, #16
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}

08019c0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019c0e:	b580      	push	{r7, lr}
 8019c10:	b086      	sub	sp, #24
 8019c12:	af00      	add	r7, sp, #0
 8019c14:	60f8      	str	r0, [r7, #12]
 8019c16:	607a      	str	r2, [r7, #4]
 8019c18:	461a      	mov	r2, r3
 8019c1a:	460b      	mov	r3, r1
 8019c1c:	72fb      	strb	r3, [r7, #11]
 8019c1e:	4613      	mov	r3, r2
 8019c20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c22:	2300      	movs	r3, #0
 8019c24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c26:	2300      	movs	r3, #0
 8019c28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019c30:	893b      	ldrh	r3, [r7, #8]
 8019c32:	7af9      	ldrb	r1, [r7, #11]
 8019c34:	687a      	ldr	r2, [r7, #4]
 8019c36:	f7f1 fbf1 	bl	800b41c <HAL_PCD_EP_Transmit>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c3e:	7dfb      	ldrb	r3, [r7, #23]
 8019c40:	4618      	mov	r0, r3
 8019c42:	f000 f891 	bl	8019d68 <USBD_Get_USB_Status>
 8019c46:	4603      	mov	r3, r0
 8019c48:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8019c4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3718      	adds	r7, #24
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b086      	sub	sp, #24
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	60f8      	str	r0, [r7, #12]
 8019c5c:	607a      	str	r2, [r7, #4]
 8019c5e:	461a      	mov	r2, r3
 8019c60:	460b      	mov	r3, r1
 8019c62:	72fb      	strb	r3, [r7, #11]
 8019c64:	4613      	mov	r3, r2
 8019c66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019c76:	893b      	ldrh	r3, [r7, #8]
 8019c78:	7af9      	ldrb	r1, [r7, #11]
 8019c7a:	687a      	ldr	r2, [r7, #4]
 8019c7c:	f7f1 fb7f 	bl	800b37e <HAL_PCD_EP_Receive>
 8019c80:	4603      	mov	r3, r0
 8019c82:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c84:	7dfb      	ldrb	r3, [r7, #23]
 8019c86:	4618      	mov	r0, r3
 8019c88:	f000 f86e 	bl	8019d68 <USBD_Get_USB_Status>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8019c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3718      	adds	r7, #24
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}

08019c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c9a:	b580      	push	{r7, lr}
 8019c9c:	b082      	sub	sp, #8
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	6078      	str	r0, [r7, #4]
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019cac:	78fa      	ldrb	r2, [r7, #3]
 8019cae:	4611      	mov	r1, r2
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f7f1 fb9e 	bl	800b3f2 <HAL_PCD_EP_GetRxCount>
 8019cb6:	4603      	mov	r3, r0
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	3708      	adds	r7, #8
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd80      	pop	{r7, pc}

08019cc0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	460b      	mov	r3, r1
 8019cca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019ccc:	78fb      	ldrb	r3, [r7, #3]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d002      	beq.n	8019cd8 <HAL_PCDEx_LPM_Callback+0x18>
 8019cd2:	2b01      	cmp	r3, #1
 8019cd4:	d013      	beq.n	8019cfe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8019cd6:	e023      	b.n	8019d20 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	699b      	ldr	r3, [r3, #24]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d007      	beq.n	8019cf0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019ce0:	f000 f83c 	bl	8019d5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019ce4:	4b10      	ldr	r3, [pc, #64]	; (8019d28 <HAL_PCDEx_LPM_Callback+0x68>)
 8019ce6:	691b      	ldr	r3, [r3, #16]
 8019ce8:	4a0f      	ldr	r2, [pc, #60]	; (8019d28 <HAL_PCDEx_LPM_Callback+0x68>)
 8019cea:	f023 0306 	bic.w	r3, r3, #6
 8019cee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7fd f959 	bl	8016fae <USBD_LL_Resume>
    break;
 8019cfc:	e010      	b.n	8019d20 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7fd f93d 	bl	8016f84 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	699b      	ldr	r3, [r3, #24]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d005      	beq.n	8019d1e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d12:	4b05      	ldr	r3, [pc, #20]	; (8019d28 <HAL_PCDEx_LPM_Callback+0x68>)
 8019d14:	691b      	ldr	r3, [r3, #16]
 8019d16:	4a04      	ldr	r2, [pc, #16]	; (8019d28 <HAL_PCDEx_LPM_Callback+0x68>)
 8019d18:	f043 0306 	orr.w	r3, r3, #6
 8019d1c:	6113      	str	r3, [r2, #16]
    break;   
 8019d1e:	bf00      	nop
}
 8019d20:	bf00      	nop
 8019d22:	3708      	adds	r7, #8
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd80      	pop	{r7, pc}
 8019d28:	e000ed00 	.word	0xe000ed00

08019d2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019d2c:	b480      	push	{r7}
 8019d2e:	b083      	sub	sp, #12
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019d34:	4b03      	ldr	r3, [pc, #12]	; (8019d44 <USBD_static_malloc+0x18>)
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	370c      	adds	r7, #12
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d40:	4770      	bx	lr
 8019d42:	bf00      	nop
 8019d44:	2002784c 	.word	0x2002784c

08019d48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019d48:	b480      	push	{r7}
 8019d4a:	b083      	sub	sp, #12
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]

}
 8019d50:	bf00      	nop
 8019d52:	370c      	adds	r7, #12
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr

08019d5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019d60:	f7ea fb08 	bl	8004374 <SystemClock_Config>
}
 8019d64:	bf00      	nop
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b085      	sub	sp, #20
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	4603      	mov	r3, r0
 8019d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d72:	2300      	movs	r3, #0
 8019d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019d76:	79fb      	ldrb	r3, [r7, #7]
 8019d78:	2b03      	cmp	r3, #3
 8019d7a:	d817      	bhi.n	8019dac <USBD_Get_USB_Status+0x44>
 8019d7c:	a201      	add	r2, pc, #4	; (adr r2, 8019d84 <USBD_Get_USB_Status+0x1c>)
 8019d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d82:	bf00      	nop
 8019d84:	08019d95 	.word	0x08019d95
 8019d88:	08019d9b 	.word	0x08019d9b
 8019d8c:	08019da1 	.word	0x08019da1
 8019d90:	08019da7 	.word	0x08019da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019d94:	2300      	movs	r3, #0
 8019d96:	73fb      	strb	r3, [r7, #15]
    break;
 8019d98:	e00b      	b.n	8019db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d9a:	2302      	movs	r3, #2
 8019d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8019d9e:	e008      	b.n	8019db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019da0:	2301      	movs	r3, #1
 8019da2:	73fb      	strb	r3, [r7, #15]
    break;
 8019da4:	e005      	b.n	8019db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019da6:	2302      	movs	r3, #2
 8019da8:	73fb      	strb	r3, [r7, #15]
    break;
 8019daa:	e002      	b.n	8019db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019dac:	2302      	movs	r3, #2
 8019dae:	73fb      	strb	r3, [r7, #15]
    break;
 8019db0:	bf00      	nop
  }
  return usb_status;
 8019db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3714      	adds	r7, #20
 8019db8:	46bd      	mov	sp, r7
 8019dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbe:	4770      	bx	lr

08019dc0 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8019dc0:	b480      	push	{r7}
 8019dc2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019dc4:	4b05      	ldr	r3, [pc, #20]	; (8019ddc <UTIL_LPM_Init+0x1c>)
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019dca:	4b05      	ldr	r3, [pc, #20]	; (8019de0 <UTIL_LPM_Init+0x20>)
 8019dcc:	2200      	movs	r2, #0
 8019dce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019dd0:	bf00      	nop
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd8:	4770      	bx	lr
 8019dda:	bf00      	nop
 8019ddc:	20027a6c 	.word	0x20027a6c
 8019de0:	20027a70 	.word	0x20027a70

08019de4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019de4:	b480      	push	{r7}
 8019de6:	b087      	sub	sp, #28
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	460b      	mov	r3, r1
 8019dee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019df0:	f3ef 8310 	mrs	r3, PRIMASK
 8019df4:	613b      	str	r3, [r7, #16]
  return(result);
 8019df6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dfa:	b672      	cpsid	i
  
  switch(state)
 8019dfc:	78fb      	ldrb	r3, [r7, #3]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d009      	beq.n	8019e16 <UTIL_LPM_SetOffMode+0x32>
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d000      	beq.n	8019e08 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8019e06:	e00e      	b.n	8019e26 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8019e08:	4b0c      	ldr	r3, [pc, #48]	; (8019e3c <UTIL_LPM_SetOffMode+0x58>)
 8019e0a:	681a      	ldr	r2, [r3, #0]
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	4313      	orrs	r3, r2
 8019e10:	4a0a      	ldr	r2, [pc, #40]	; (8019e3c <UTIL_LPM_SetOffMode+0x58>)
 8019e12:	6013      	str	r3, [r2, #0]
      break;
 8019e14:	e007      	b.n	8019e26 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	43da      	mvns	r2, r3
 8019e1a:	4b08      	ldr	r3, [pc, #32]	; (8019e3c <UTIL_LPM_SetOffMode+0x58>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4013      	ands	r3, r2
 8019e20:	4a06      	ldr	r2, [pc, #24]	; (8019e3c <UTIL_LPM_SetOffMode+0x58>)
 8019e22:	6013      	str	r3, [r2, #0]
      break;
 8019e24:	bf00      	nop
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019e30:	bf00      	nop
 8019e32:	371c      	adds	r7, #28
 8019e34:	46bd      	mov	sp, r7
 8019e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3a:	4770      	bx	lr
 8019e3c:	20027a70 	.word	0x20027a70

08019e40 <arm_power_f32>:
 8019e40:	b430      	push	{r4, r5}
 8019e42:	088d      	lsrs	r5, r1, #2
 8019e44:	eddf 5a20 	vldr	s11, [pc, #128]	; 8019ec8 <arm_power_f32+0x88>
 8019e48:	d020      	beq.n	8019e8c <arm_power_f32+0x4c>
 8019e4a:	f100 0310 	add.w	r3, r0, #16
 8019e4e:	462c      	mov	r4, r5
 8019e50:	ed53 6a04 	vldr	s13, [r3, #-16]
 8019e54:	ed13 7a03 	vldr	s14, [r3, #-12]
 8019e58:	ed53 7a02 	vldr	s15, [r3, #-8]
 8019e5c:	ed13 6a01 	vldr	s12, [r3, #-4]
 8019e60:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8019e64:	ee27 7a07 	vmul.f32	s14, s14, s14
 8019e68:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019e74:	ee26 6a06 	vmul.f32	s12, s12, s12
 8019e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e7c:	3c01      	subs	r4, #1
 8019e7e:	f103 0310 	add.w	r3, r3, #16
 8019e82:	ee76 5a27 	vadd.f32	s11, s12, s15
 8019e86:	d1e3      	bne.n	8019e50 <arm_power_f32+0x10>
 8019e88:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019e8c:	f011 0103 	ands.w	r1, r1, #3
 8019e90:	d015      	beq.n	8019ebe <arm_power_f32+0x7e>
 8019e92:	edd0 7a00 	vldr	s15, [r0]
 8019e96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e9a:	3901      	subs	r1, #1
 8019e9c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019ea0:	d00d      	beq.n	8019ebe <arm_power_f32+0x7e>
 8019ea2:	edd0 7a01 	vldr	s15, [r0, #4]
 8019ea6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019eaa:	2901      	cmp	r1, #1
 8019eac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019eb0:	d005      	beq.n	8019ebe <arm_power_f32+0x7e>
 8019eb2:	edd0 7a02 	vldr	s15, [r0, #8]
 8019eb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019eba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8019ebe:	edc2 5a00 	vstr	s11, [r2]
 8019ec2:	bc30      	pop	{r4, r5}
 8019ec4:	4770      	bx	lr
 8019ec6:	bf00      	nop
 8019ec8:	00000000 	.word	0x00000000

08019ecc <arm_mat_mult_f32>:
 8019ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed0:	8845      	ldrh	r5, [r0, #2]
 8019ed2:	880b      	ldrh	r3, [r1, #0]
 8019ed4:	8806      	ldrh	r6, [r0, #0]
 8019ed6:	6847      	ldr	r7, [r0, #4]
 8019ed8:	6854      	ldr	r4, [r2, #4]
 8019eda:	6848      	ldr	r0, [r1, #4]
 8019edc:	b08b      	sub	sp, #44	; 0x2c
 8019ede:	42ab      	cmp	r3, r5
 8019ee0:	9109      	str	r1, [sp, #36]	; 0x24
 8019ee2:	9604      	str	r6, [sp, #16]
 8019ee4:	8849      	ldrh	r1, [r1, #2]
 8019ee6:	f040 808a 	bne.w	8019ffe <arm_mat_mult_f32+0x132>
 8019eea:	8815      	ldrh	r5, [r2, #0]
 8019eec:	42b5      	cmp	r5, r6
 8019eee:	f040 8086 	bne.w	8019ffe <arm_mat_mult_f32+0x132>
 8019ef2:	8852      	ldrh	r2, [r2, #2]
 8019ef4:	428a      	cmp	r2, r1
 8019ef6:	f040 8082 	bne.w	8019ffe <arm_mat_mult_f32+0x132>
 8019efa:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8019efe:	1d01      	adds	r1, r0, #4
 8019f00:	0116      	lsls	r6, r2, #4
 8019f02:	9108      	str	r1, [sp, #32]
 8019f04:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8019f08:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8019f0c:	9101      	str	r1, [sp, #4]
 8019f0e:	fb06 f108 	mul.w	r1, r6, r8
 8019f12:	0095      	lsls	r5, r2, #2
 8019f14:	9103      	str	r1, [sp, #12]
 8019f16:	00d2      	lsls	r2, r2, #3
 8019f18:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8019f1c:	f003 0903 	and.w	r9, r3, #3
 8019f20:	009b      	lsls	r3, r3, #2
 8019f22:	f107 0b10 	add.w	fp, r7, #16
 8019f26:	eb04 0a05 	add.w	sl, r4, r5
 8019f2a:	9107      	str	r1, [sp, #28]
 8019f2c:	9202      	str	r2, [sp, #8]
 8019f2e:	9306      	str	r3, [sp, #24]
 8019f30:	f1ab 0310 	sub.w	r3, fp, #16
 8019f34:	9305      	str	r3, [sp, #20]
 8019f36:	9b07      	ldr	r3, [sp, #28]
 8019f38:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019f3c:	eb03 0c0a 	add.w	ip, r3, sl
 8019f40:	eddf 7a31 	vldr	s15, [pc, #196]	; 801a008 <arm_mat_mult_f32+0x13c>
 8019f44:	f1b8 0f00 	cmp.w	r8, #0
 8019f48:	d053      	beq.n	8019ff2 <arm_mat_mult_f32+0x126>
 8019f4a:	9b02      	ldr	r3, [sp, #8]
 8019f4c:	4644      	mov	r4, r8
 8019f4e:	18c1      	adds	r1, r0, r3
 8019f50:	4602      	mov	r2, r0
 8019f52:	465b      	mov	r3, fp
 8019f54:	ed92 6a00 	vldr	s12, [r2]
 8019f58:	ed13 7a04 	vldr	s14, [r3, #-16]
 8019f5c:	ed53 4a03 	vldr	s9, [r3, #-12]
 8019f60:	ed53 6a02 	vldr	s13, [r3, #-8]
 8019f64:	ed91 5a00 	vldr	s10, [r1]
 8019f68:	ed53 5a01 	vldr	s11, [r3, #-4]
 8019f6c:	1957      	adds	r7, r2, r5
 8019f6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019f72:	ed97 6a00 	vldr	s12, [r7]
 8019f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f7a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019f7e:	194f      	adds	r7, r1, r5
 8019f80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8019f84:	ee26 7a85 	vmul.f32	s14, s13, s10
 8019f88:	edd7 7a00 	vldr	s15, [r7]
 8019f8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019f90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019f94:	3c01      	subs	r4, #1
 8019f96:	4432      	add	r2, r6
 8019f98:	4431      	add	r1, r6
 8019f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f9e:	f103 0310 	add.w	r3, r3, #16
 8019fa2:	d1d7      	bne.n	8019f54 <arm_mat_mult_f32+0x88>
 8019fa4:	9b03      	ldr	r3, [sp, #12]
 8019fa6:	9a01      	ldr	r2, [sp, #4]
 8019fa8:	4418      	add	r0, r3
 8019faa:	f1b9 0f00 	cmp.w	r9, #0
 8019fae:	d00b      	beq.n	8019fc8 <arm_mat_mult_f32+0xfc>
 8019fb0:	464b      	mov	r3, r9
 8019fb2:	edd0 6a00 	vldr	s13, [r0]
 8019fb6:	ecb2 7a01 	vldmia	r2!, {s14}
 8019fba:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	4428      	add	r0, r5
 8019fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fc6:	d1f4      	bne.n	8019fb2 <arm_mat_mult_f32+0xe6>
 8019fc8:	ecec 7a01 	vstmia	ip!, {s15}
 8019fcc:	45d4      	cmp	ip, sl
 8019fce:	4670      	mov	r0, lr
 8019fd0:	f10e 0e04 	add.w	lr, lr, #4
 8019fd4:	d1b4      	bne.n	8019f40 <arm_mat_mult_f32+0x74>
 8019fd6:	9a01      	ldr	r2, [sp, #4]
 8019fd8:	9b06      	ldr	r3, [sp, #24]
 8019fda:	4611      	mov	r1, r2
 8019fdc:	4419      	add	r1, r3
 8019fde:	449b      	add	fp, r3
 8019fe0:	9b04      	ldr	r3, [sp, #16]
 8019fe2:	9101      	str	r1, [sp, #4]
 8019fe4:	3b01      	subs	r3, #1
 8019fe6:	44aa      	add	sl, r5
 8019fe8:	9304      	str	r3, [sp, #16]
 8019fea:	d004      	beq.n	8019ff6 <arm_mat_mult_f32+0x12a>
 8019fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fee:	6858      	ldr	r0, [r3, #4]
 8019ff0:	e79e      	b.n	8019f30 <arm_mat_mult_f32+0x64>
 8019ff2:	9a05      	ldr	r2, [sp, #20]
 8019ff4:	e7d9      	b.n	8019faa <arm_mat_mult_f32+0xde>
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	b00b      	add	sp, #44	; 0x2c
 8019ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ffe:	f06f 0002 	mvn.w	r0, #2
 801a002:	b00b      	add	sp, #44	; 0x2c
 801a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a008:	00000000 	.word	0x00000000

0801a00c <arm_sin_f32>:
 801a00c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a08c <arm_sin_f32+0x80>
 801a010:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a014:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a01c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a020:	d504      	bpl.n	801a02c <arm_sin_f32+0x20>
 801a022:	ee17 3a90 	vmov	r3, s15
 801a026:	3b01      	subs	r3, #1
 801a028:	ee07 3a90 	vmov	s15, r3
 801a02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a030:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a090 <arm_sin_f32+0x84>
 801a034:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a038:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a03c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a040:	ee17 3a90 	vmov	r3, s15
 801a044:	b29b      	uxth	r3, r3
 801a046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a04a:	d21a      	bcs.n	801a082 <arm_sin_f32+0x76>
 801a04c:	ee07 3a90 	vmov	s15, r3
 801a050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a054:	1c59      	adds	r1, r3, #1
 801a056:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a05a:	4a0e      	ldr	r2, [pc, #56]	; (801a094 <arm_sin_f32+0x88>)
 801a05c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a068:	ed93 7a00 	vldr	s14, [r3]
 801a06c:	edd2 6a00 	vldr	s13, [r2]
 801a070:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a074:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a078:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a07c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a080:	4770      	bx	lr
 801a082:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a086:	2101      	movs	r1, #1
 801a088:	2300      	movs	r3, #0
 801a08a:	e7e6      	b.n	801a05a <arm_sin_f32+0x4e>
 801a08c:	3e22f983 	.word	0x3e22f983
 801a090:	44000000 	.word	0x44000000
 801a094:	0801bfb4 	.word	0x0801bfb4

0801a098 <arm_cos_f32>:
 801a098:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a120 <arm_cos_f32+0x88>
 801a09c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a0a0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801a0a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a0a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a0b4:	d504      	bpl.n	801a0c0 <arm_cos_f32+0x28>
 801a0b6:	ee17 3a90 	vmov	r3, s15
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	ee07 3a90 	vmov	s15, r3
 801a0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801a124 <arm_cos_f32+0x8c>
 801a0c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a0d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a0d4:	ee17 3a90 	vmov	r3, s15
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0de:	d21a      	bcs.n	801a116 <arm_cos_f32+0x7e>
 801a0e0:	ee07 3a90 	vmov	s15, r3
 801a0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a0e8:	1c59      	adds	r1, r3, #1
 801a0ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0ee:	4a0e      	ldr	r2, [pc, #56]	; (801a128 <arm_cos_f32+0x90>)
 801a0f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a0f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a0f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a0fc:	ed93 7a00 	vldr	s14, [r3]
 801a100:	edd2 6a00 	vldr	s13, [r2]
 801a104:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a108:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a10c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a110:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a114:	4770      	bx	lr
 801a116:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a11a:	2101      	movs	r1, #1
 801a11c:	2300      	movs	r3, #0
 801a11e:	e7e6      	b.n	801a0ee <arm_cos_f32+0x56>
 801a120:	3e22f983 	.word	0x3e22f983
 801a124:	44000000 	.word	0x44000000
 801a128:	0801bfb4 	.word	0x0801bfb4

0801a12c <arm_sub_f32>:
 801a12c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a130:	b4f0      	push	{r4, r5, r6, r7}
 801a132:	d033      	beq.n	801a19c <arm_sub_f32+0x70>
 801a134:	f100 0610 	add.w	r6, r0, #16
 801a138:	f101 0510 	add.w	r5, r1, #16
 801a13c:	f102 0410 	add.w	r4, r2, #16
 801a140:	4667      	mov	r7, ip
 801a142:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a146:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a14a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a14e:	3f01      	subs	r7, #1
 801a150:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a154:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a158:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a160:	f106 0610 	add.w	r6, r6, #16
 801a164:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a168:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a16c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a174:	f105 0510 	add.w	r5, r5, #16
 801a178:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a17c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a180:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a188:	f104 0410 	add.w	r4, r4, #16
 801a18c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a190:	d1d7      	bne.n	801a142 <arm_sub_f32+0x16>
 801a192:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a196:	4420      	add	r0, r4
 801a198:	4421      	add	r1, r4
 801a19a:	4422      	add	r2, r4
 801a19c:	f013 0303 	ands.w	r3, r3, #3
 801a1a0:	d01b      	beq.n	801a1da <arm_sub_f32+0xae>
 801a1a2:	edd0 7a00 	vldr	s15, [r0]
 801a1a6:	ed91 7a00 	vldr	s14, [r1]
 801a1aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1ae:	3b01      	subs	r3, #1
 801a1b0:	edc2 7a00 	vstr	s15, [r2]
 801a1b4:	d011      	beq.n	801a1da <arm_sub_f32+0xae>
 801a1b6:	edd0 7a01 	vldr	s15, [r0, #4]
 801a1ba:	ed91 7a01 	vldr	s14, [r1, #4]
 801a1be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1c2:	2b01      	cmp	r3, #1
 801a1c4:	edc2 7a01 	vstr	s15, [r2, #4]
 801a1c8:	d007      	beq.n	801a1da <arm_sub_f32+0xae>
 801a1ca:	edd0 7a02 	vldr	s15, [r0, #8]
 801a1ce:	ed91 7a02 	vldr	s14, [r1, #8]
 801a1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1d6:	edc2 7a02 	vstr	s15, [r2, #8]
 801a1da:	bcf0      	pop	{r4, r5, r6, r7}
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop

0801a1e0 <arm_scale_f32>:
 801a1e0:	b470      	push	{r4, r5, r6}
 801a1e2:	0896      	lsrs	r6, r2, #2
 801a1e4:	d025      	beq.n	801a232 <arm_scale_f32+0x52>
 801a1e6:	f100 0410 	add.w	r4, r0, #16
 801a1ea:	f101 0310 	add.w	r3, r1, #16
 801a1ee:	4635      	mov	r5, r6
 801a1f0:	ed54 7a04 	vldr	s15, [r4, #-16]
 801a1f4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a1f8:	3d01      	subs	r5, #1
 801a1fa:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a1fe:	ed54 7a03 	vldr	s15, [r4, #-12]
 801a202:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a206:	f104 0410 	add.w	r4, r4, #16
 801a20a:	ed43 7a03 	vstr	s15, [r3, #-12]
 801a20e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801a212:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a216:	f103 0310 	add.w	r3, r3, #16
 801a21a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801a21e:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801a222:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a226:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801a22a:	d1e1      	bne.n	801a1f0 <arm_scale_f32+0x10>
 801a22c:	0136      	lsls	r6, r6, #4
 801a22e:	4430      	add	r0, r6
 801a230:	4431      	add	r1, r6
 801a232:	f012 0203 	ands.w	r2, r2, #3
 801a236:	d015      	beq.n	801a264 <arm_scale_f32+0x84>
 801a238:	edd0 7a00 	vldr	s15, [r0]
 801a23c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a240:	3a01      	subs	r2, #1
 801a242:	edc1 7a00 	vstr	s15, [r1]
 801a246:	d00d      	beq.n	801a264 <arm_scale_f32+0x84>
 801a248:	edd0 7a01 	vldr	s15, [r0, #4]
 801a24c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a250:	2a01      	cmp	r2, #1
 801a252:	edc1 7a01 	vstr	s15, [r1, #4]
 801a256:	d005      	beq.n	801a264 <arm_scale_f32+0x84>
 801a258:	edd0 7a02 	vldr	s15, [r0, #8]
 801a25c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a260:	ed81 0a02 	vstr	s0, [r1, #8]
 801a264:	bc70      	pop	{r4, r5, r6}
 801a266:	4770      	bx	lr

0801a268 <arm_dot_prod_f32>:
 801a268:	b4f0      	push	{r4, r5, r6, r7}
 801a26a:	0897      	lsrs	r7, r2, #2
 801a26c:	eddf 5a29 	vldr	s11, [pc, #164]	; 801a314 <arm_dot_prod_f32+0xac>
 801a270:	d02d      	beq.n	801a2ce <arm_dot_prod_f32+0x66>
 801a272:	f100 0510 	add.w	r5, r0, #16
 801a276:	f101 0410 	add.w	r4, r1, #16
 801a27a:	463e      	mov	r6, r7
 801a27c:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a280:	ed54 3a04 	vldr	s7, [r4, #-16]
 801a284:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a288:	ed14 4a03 	vldr	s8, [r4, #-12]
 801a28c:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a290:	ed54 4a02 	vldr	s9, [r4, #-8]
 801a294:	ed15 6a01 	vldr	s12, [r5, #-4]
 801a298:	ed14 5a01 	vldr	s10, [r4, #-4]
 801a29c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801a2a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a2a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a2a8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801a2ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a2b0:	ee66 6a05 	vmul.f32	s13, s12, s10
 801a2b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2b8:	3e01      	subs	r6, #1
 801a2ba:	f105 0510 	add.w	r5, r5, #16
 801a2be:	ee76 5aa7 	vadd.f32	s11, s13, s15
 801a2c2:	f104 0410 	add.w	r4, r4, #16
 801a2c6:	d1d9      	bne.n	801a27c <arm_dot_prod_f32+0x14>
 801a2c8:	013f      	lsls	r7, r7, #4
 801a2ca:	4438      	add	r0, r7
 801a2cc:	4439      	add	r1, r7
 801a2ce:	f012 0203 	ands.w	r2, r2, #3
 801a2d2:	d01b      	beq.n	801a30c <arm_dot_prod_f32+0xa4>
 801a2d4:	edd1 7a00 	vldr	s15, [r1]
 801a2d8:	ed90 7a00 	vldr	s14, [r0]
 801a2dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a2e0:	3a01      	subs	r2, #1
 801a2e2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a2e6:	d011      	beq.n	801a30c <arm_dot_prod_f32+0xa4>
 801a2e8:	edd1 7a01 	vldr	s15, [r1, #4]
 801a2ec:	ed90 7a01 	vldr	s14, [r0, #4]
 801a2f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a2f4:	2a01      	cmp	r2, #1
 801a2f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a2fa:	d007      	beq.n	801a30c <arm_dot_prod_f32+0xa4>
 801a2fc:	edd0 7a02 	vldr	s15, [r0, #8]
 801a300:	ed91 7a02 	vldr	s14, [r1, #8]
 801a304:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a308:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801a30c:	edc3 5a00 	vstr	s11, [r3]
 801a310:	bcf0      	pop	{r4, r5, r6, r7}
 801a312:	4770      	bx	lr
 801a314:	00000000 	.word	0x00000000

0801a318 <arm_add_f32>:
 801a318:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801a31c:	b4f0      	push	{r4, r5, r6, r7}
 801a31e:	d033      	beq.n	801a388 <arm_add_f32+0x70>
 801a320:	f100 0610 	add.w	r6, r0, #16
 801a324:	f101 0510 	add.w	r5, r1, #16
 801a328:	f102 0410 	add.w	r4, r2, #16
 801a32c:	4667      	mov	r7, ip
 801a32e:	ed15 7a04 	vldr	s14, [r5, #-16]
 801a332:	ed56 7a04 	vldr	s15, [r6, #-16]
 801a336:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a33a:	3f01      	subs	r7, #1
 801a33c:	ed44 7a04 	vstr	s15, [r4, #-16]
 801a340:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a344:	ed56 7a03 	vldr	s15, [r6, #-12]
 801a348:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a34c:	f106 0610 	add.w	r6, r6, #16
 801a350:	ed44 7a03 	vstr	s15, [r4, #-12]
 801a354:	ed15 7a02 	vldr	s14, [r5, #-8]
 801a358:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801a35c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a360:	f105 0510 	add.w	r5, r5, #16
 801a364:	ed44 7a02 	vstr	s15, [r4, #-8]
 801a368:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801a36c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801a370:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a374:	f104 0410 	add.w	r4, r4, #16
 801a378:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 801a37c:	d1d7      	bne.n	801a32e <arm_add_f32+0x16>
 801a37e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 801a382:	4420      	add	r0, r4
 801a384:	4421      	add	r1, r4
 801a386:	4422      	add	r2, r4
 801a388:	f013 0303 	ands.w	r3, r3, #3
 801a38c:	d01b      	beq.n	801a3c6 <arm_add_f32+0xae>
 801a38e:	edd1 7a00 	vldr	s15, [r1]
 801a392:	ed90 7a00 	vldr	s14, [r0]
 801a396:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a39a:	3b01      	subs	r3, #1
 801a39c:	edc2 7a00 	vstr	s15, [r2]
 801a3a0:	d011      	beq.n	801a3c6 <arm_add_f32+0xae>
 801a3a2:	edd0 7a01 	vldr	s15, [r0, #4]
 801a3a6:	ed91 7a01 	vldr	s14, [r1, #4]
 801a3aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3ae:	2b01      	cmp	r3, #1
 801a3b0:	edc2 7a01 	vstr	s15, [r2, #4]
 801a3b4:	d007      	beq.n	801a3c6 <arm_add_f32+0xae>
 801a3b6:	edd0 7a02 	vldr	s15, [r0, #8]
 801a3ba:	ed91 7a02 	vldr	s14, [r1, #8]
 801a3be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3c2:	edc2 7a02 	vstr	s15, [r2, #8]
 801a3c6:	bcf0      	pop	{r4, r5, r6, r7}
 801a3c8:	4770      	bx	lr
 801a3ca:	bf00      	nop

0801a3cc <__errno>:
 801a3cc:	4b01      	ldr	r3, [pc, #4]	; (801a3d4 <__errno+0x8>)
 801a3ce:	6818      	ldr	r0, [r3, #0]
 801a3d0:	4770      	bx	lr
 801a3d2:	bf00      	nop
 801a3d4:	2000026c 	.word	0x2000026c

0801a3d8 <__libc_init_array>:
 801a3d8:	b570      	push	{r4, r5, r6, lr}
 801a3da:	4e0d      	ldr	r6, [pc, #52]	; (801a410 <__libc_init_array+0x38>)
 801a3dc:	4c0d      	ldr	r4, [pc, #52]	; (801a414 <__libc_init_array+0x3c>)
 801a3de:	1ba4      	subs	r4, r4, r6
 801a3e0:	10a4      	asrs	r4, r4, #2
 801a3e2:	2500      	movs	r5, #0
 801a3e4:	42a5      	cmp	r5, r4
 801a3e6:	d109      	bne.n	801a3fc <__libc_init_array+0x24>
 801a3e8:	4e0b      	ldr	r6, [pc, #44]	; (801a418 <__libc_init_array+0x40>)
 801a3ea:	4c0c      	ldr	r4, [pc, #48]	; (801a41c <__libc_init_array+0x44>)
 801a3ec:	f001 f8d2 	bl	801b594 <_init>
 801a3f0:	1ba4      	subs	r4, r4, r6
 801a3f2:	10a4      	asrs	r4, r4, #2
 801a3f4:	2500      	movs	r5, #0
 801a3f6:	42a5      	cmp	r5, r4
 801a3f8:	d105      	bne.n	801a406 <__libc_init_array+0x2e>
 801a3fa:	bd70      	pop	{r4, r5, r6, pc}
 801a3fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a400:	4798      	blx	r3
 801a402:	3501      	adds	r5, #1
 801a404:	e7ee      	b.n	801a3e4 <__libc_init_array+0xc>
 801a406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a40a:	4798      	blx	r3
 801a40c:	3501      	adds	r5, #1
 801a40e:	e7f2      	b.n	801a3f6 <__libc_init_array+0x1e>
 801a410:	0801c870 	.word	0x0801c870
 801a414:	0801c870 	.word	0x0801c870
 801a418:	0801c870 	.word	0x0801c870
 801a41c:	0801c874 	.word	0x0801c874

0801a420 <memcpy>:
 801a420:	b510      	push	{r4, lr}
 801a422:	1e43      	subs	r3, r0, #1
 801a424:	440a      	add	r2, r1
 801a426:	4291      	cmp	r1, r2
 801a428:	d100      	bne.n	801a42c <memcpy+0xc>
 801a42a:	bd10      	pop	{r4, pc}
 801a42c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a430:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a434:	e7f7      	b.n	801a426 <memcpy+0x6>

0801a436 <memset>:
 801a436:	4402      	add	r2, r0
 801a438:	4603      	mov	r3, r0
 801a43a:	4293      	cmp	r3, r2
 801a43c:	d100      	bne.n	801a440 <memset+0xa>
 801a43e:	4770      	bx	lr
 801a440:	f803 1b01 	strb.w	r1, [r3], #1
 801a444:	e7f9      	b.n	801a43a <memset+0x4>
	...

0801a448 <pow>:
 801a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a44c:	ed2d 8b04 	vpush	{d8-d9}
 801a450:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a724 <pow+0x2dc>
 801a454:	b08d      	sub	sp, #52	; 0x34
 801a456:	ec57 6b10 	vmov	r6, r7, d0
 801a45a:	ec55 4b11 	vmov	r4, r5, d1
 801a45e:	f000 f9b3 	bl	801a7c8 <__ieee754_pow>
 801a462:	f999 3000 	ldrsb.w	r3, [r9]
 801a466:	9300      	str	r3, [sp, #0]
 801a468:	3301      	adds	r3, #1
 801a46a:	eeb0 8a40 	vmov.f32	s16, s0
 801a46e:	eef0 8a60 	vmov.f32	s17, s1
 801a472:	46c8      	mov	r8, r9
 801a474:	d05f      	beq.n	801a536 <pow+0xee>
 801a476:	4622      	mov	r2, r4
 801a478:	462b      	mov	r3, r5
 801a47a:	4620      	mov	r0, r4
 801a47c:	4629      	mov	r1, r5
 801a47e:	f7e6 fadf 	bl	8000a40 <__aeabi_dcmpun>
 801a482:	4683      	mov	fp, r0
 801a484:	2800      	cmp	r0, #0
 801a486:	d156      	bne.n	801a536 <pow+0xee>
 801a488:	4632      	mov	r2, r6
 801a48a:	463b      	mov	r3, r7
 801a48c:	4630      	mov	r0, r6
 801a48e:	4639      	mov	r1, r7
 801a490:	f7e6 fad6 	bl	8000a40 <__aeabi_dcmpun>
 801a494:	9001      	str	r0, [sp, #4]
 801a496:	b1e8      	cbz	r0, 801a4d4 <pow+0x8c>
 801a498:	2200      	movs	r2, #0
 801a49a:	2300      	movs	r3, #0
 801a49c:	4620      	mov	r0, r4
 801a49e:	4629      	mov	r1, r5
 801a4a0:	f7e6 fa9c 	bl	80009dc <__aeabi_dcmpeq>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	d046      	beq.n	801a536 <pow+0xee>
 801a4a8:	2301      	movs	r3, #1
 801a4aa:	9302      	str	r3, [sp, #8]
 801a4ac:	4b96      	ldr	r3, [pc, #600]	; (801a708 <pow+0x2c0>)
 801a4ae:	9303      	str	r3, [sp, #12]
 801a4b0:	4b96      	ldr	r3, [pc, #600]	; (801a70c <pow+0x2c4>)
 801a4b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a4bc:	9b00      	ldr	r3, [sp, #0]
 801a4be:	2b02      	cmp	r3, #2
 801a4c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a4c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a4c8:	d033      	beq.n	801a532 <pow+0xea>
 801a4ca:	a802      	add	r0, sp, #8
 801a4cc:	f000 ff4e 	bl	801b36c <matherr>
 801a4d0:	bb48      	cbnz	r0, 801a526 <pow+0xde>
 801a4d2:	e05d      	b.n	801a590 <pow+0x148>
 801a4d4:	f04f 0a00 	mov.w	sl, #0
 801a4d8:	f04f 0b00 	mov.w	fp, #0
 801a4dc:	4652      	mov	r2, sl
 801a4de:	465b      	mov	r3, fp
 801a4e0:	4630      	mov	r0, r6
 801a4e2:	4639      	mov	r1, r7
 801a4e4:	f7e6 fa7a 	bl	80009dc <__aeabi_dcmpeq>
 801a4e8:	ec4b ab19 	vmov	d9, sl, fp
 801a4ec:	2800      	cmp	r0, #0
 801a4ee:	d054      	beq.n	801a59a <pow+0x152>
 801a4f0:	4652      	mov	r2, sl
 801a4f2:	465b      	mov	r3, fp
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	4629      	mov	r1, r5
 801a4f8:	f7e6 fa70 	bl	80009dc <__aeabi_dcmpeq>
 801a4fc:	4680      	mov	r8, r0
 801a4fe:	b318      	cbz	r0, 801a548 <pow+0x100>
 801a500:	2301      	movs	r3, #1
 801a502:	9302      	str	r3, [sp, #8]
 801a504:	4b80      	ldr	r3, [pc, #512]	; (801a708 <pow+0x2c0>)
 801a506:	9303      	str	r3, [sp, #12]
 801a508:	9b01      	ldr	r3, [sp, #4]
 801a50a:	930a      	str	r3, [sp, #40]	; 0x28
 801a50c:	9b00      	ldr	r3, [sp, #0]
 801a50e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a512:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a516:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d0d5      	beq.n	801a4ca <pow+0x82>
 801a51e:	4b7b      	ldr	r3, [pc, #492]	; (801a70c <pow+0x2c4>)
 801a520:	2200      	movs	r2, #0
 801a522:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a528:	b11b      	cbz	r3, 801a532 <pow+0xea>
 801a52a:	f7ff ff4f 	bl	801a3cc <__errno>
 801a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a530:	6003      	str	r3, [r0, #0]
 801a532:	ed9d 8b08 	vldr	d8, [sp, #32]
 801a536:	eeb0 0a48 	vmov.f32	s0, s16
 801a53a:	eef0 0a68 	vmov.f32	s1, s17
 801a53e:	b00d      	add	sp, #52	; 0x34
 801a540:	ecbd 8b04 	vpop	{d8-d9}
 801a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a548:	ec45 4b10 	vmov	d0, r4, r5
 801a54c:	f000 ff06 	bl	801b35c <finite>
 801a550:	2800      	cmp	r0, #0
 801a552:	d0f0      	beq.n	801a536 <pow+0xee>
 801a554:	4652      	mov	r2, sl
 801a556:	465b      	mov	r3, fp
 801a558:	4620      	mov	r0, r4
 801a55a:	4629      	mov	r1, r5
 801a55c:	f7e6 fa48 	bl	80009f0 <__aeabi_dcmplt>
 801a560:	2800      	cmp	r0, #0
 801a562:	d0e8      	beq.n	801a536 <pow+0xee>
 801a564:	2301      	movs	r3, #1
 801a566:	9302      	str	r3, [sp, #8]
 801a568:	4b67      	ldr	r3, [pc, #412]	; (801a708 <pow+0x2c0>)
 801a56a:	9303      	str	r3, [sp, #12]
 801a56c:	f999 3000 	ldrsb.w	r3, [r9]
 801a570:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801a574:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a578:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a57c:	b913      	cbnz	r3, 801a584 <pow+0x13c>
 801a57e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a582:	e7a2      	b.n	801a4ca <pow+0x82>
 801a584:	4962      	ldr	r1, [pc, #392]	; (801a710 <pow+0x2c8>)
 801a586:	2000      	movs	r0, #0
 801a588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a58c:	2b02      	cmp	r3, #2
 801a58e:	d19c      	bne.n	801a4ca <pow+0x82>
 801a590:	f7ff ff1c 	bl	801a3cc <__errno>
 801a594:	2321      	movs	r3, #33	; 0x21
 801a596:	6003      	str	r3, [r0, #0]
 801a598:	e7c5      	b.n	801a526 <pow+0xde>
 801a59a:	eeb0 0a48 	vmov.f32	s0, s16
 801a59e:	eef0 0a68 	vmov.f32	s1, s17
 801a5a2:	f000 fedb 	bl	801b35c <finite>
 801a5a6:	9000      	str	r0, [sp, #0]
 801a5a8:	2800      	cmp	r0, #0
 801a5aa:	f040 8081 	bne.w	801a6b0 <pow+0x268>
 801a5ae:	ec47 6b10 	vmov	d0, r6, r7
 801a5b2:	f000 fed3 	bl	801b35c <finite>
 801a5b6:	2800      	cmp	r0, #0
 801a5b8:	d07a      	beq.n	801a6b0 <pow+0x268>
 801a5ba:	ec45 4b10 	vmov	d0, r4, r5
 801a5be:	f000 fecd 	bl	801b35c <finite>
 801a5c2:	2800      	cmp	r0, #0
 801a5c4:	d074      	beq.n	801a6b0 <pow+0x268>
 801a5c6:	ec53 2b18 	vmov	r2, r3, d8
 801a5ca:	ee18 0a10 	vmov	r0, s16
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	f7e6 fa36 	bl	8000a40 <__aeabi_dcmpun>
 801a5d4:	f999 9000 	ldrsb.w	r9, [r9]
 801a5d8:	4b4b      	ldr	r3, [pc, #300]	; (801a708 <pow+0x2c0>)
 801a5da:	b1b0      	cbz	r0, 801a60a <pow+0x1c2>
 801a5dc:	2201      	movs	r2, #1
 801a5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a5e2:	9b00      	ldr	r3, [sp, #0]
 801a5e4:	930a      	str	r3, [sp, #40]	; 0x28
 801a5e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a5ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a5ee:	f1b9 0f00 	cmp.w	r9, #0
 801a5f2:	d0c4      	beq.n	801a57e <pow+0x136>
 801a5f4:	4652      	mov	r2, sl
 801a5f6:	465b      	mov	r3, fp
 801a5f8:	4650      	mov	r0, sl
 801a5fa:	4659      	mov	r1, fp
 801a5fc:	f7e6 f8b0 	bl	8000760 <__aeabi_ddiv>
 801a600:	f1b9 0f02 	cmp.w	r9, #2
 801a604:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a608:	e7c1      	b.n	801a58e <pow+0x146>
 801a60a:	2203      	movs	r2, #3
 801a60c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a610:	900a      	str	r0, [sp, #40]	; 0x28
 801a612:	4629      	mov	r1, r5
 801a614:	4620      	mov	r0, r4
 801a616:	2200      	movs	r2, #0
 801a618:	4b3e      	ldr	r3, [pc, #248]	; (801a714 <pow+0x2cc>)
 801a61a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a61e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a622:	f7e5 ff73 	bl	800050c <__aeabi_dmul>
 801a626:	4604      	mov	r4, r0
 801a628:	460d      	mov	r5, r1
 801a62a:	f1b9 0f00 	cmp.w	r9, #0
 801a62e:	d124      	bne.n	801a67a <pow+0x232>
 801a630:	4b39      	ldr	r3, [pc, #228]	; (801a718 <pow+0x2d0>)
 801a632:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a636:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a63a:	4630      	mov	r0, r6
 801a63c:	4652      	mov	r2, sl
 801a63e:	465b      	mov	r3, fp
 801a640:	4639      	mov	r1, r7
 801a642:	f7e6 f9d5 	bl	80009f0 <__aeabi_dcmplt>
 801a646:	2800      	cmp	r0, #0
 801a648:	d056      	beq.n	801a6f8 <pow+0x2b0>
 801a64a:	ec45 4b10 	vmov	d0, r4, r5
 801a64e:	f000 fe97 	bl	801b380 <rint>
 801a652:	4622      	mov	r2, r4
 801a654:	462b      	mov	r3, r5
 801a656:	ec51 0b10 	vmov	r0, r1, d0
 801a65a:	f7e6 f9bf 	bl	80009dc <__aeabi_dcmpeq>
 801a65e:	b920      	cbnz	r0, 801a66a <pow+0x222>
 801a660:	4b2e      	ldr	r3, [pc, #184]	; (801a71c <pow+0x2d4>)
 801a662:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a666:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a66a:	f998 3000 	ldrsb.w	r3, [r8]
 801a66e:	2b02      	cmp	r3, #2
 801a670:	d142      	bne.n	801a6f8 <pow+0x2b0>
 801a672:	f7ff feab 	bl	801a3cc <__errno>
 801a676:	2322      	movs	r3, #34	; 0x22
 801a678:	e78d      	b.n	801a596 <pow+0x14e>
 801a67a:	4b29      	ldr	r3, [pc, #164]	; (801a720 <pow+0x2d8>)
 801a67c:	2200      	movs	r2, #0
 801a67e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a682:	4630      	mov	r0, r6
 801a684:	4652      	mov	r2, sl
 801a686:	465b      	mov	r3, fp
 801a688:	4639      	mov	r1, r7
 801a68a:	f7e6 f9b1 	bl	80009f0 <__aeabi_dcmplt>
 801a68e:	2800      	cmp	r0, #0
 801a690:	d0eb      	beq.n	801a66a <pow+0x222>
 801a692:	ec45 4b10 	vmov	d0, r4, r5
 801a696:	f000 fe73 	bl	801b380 <rint>
 801a69a:	4622      	mov	r2, r4
 801a69c:	462b      	mov	r3, r5
 801a69e:	ec51 0b10 	vmov	r0, r1, d0
 801a6a2:	f7e6 f99b 	bl	80009dc <__aeabi_dcmpeq>
 801a6a6:	2800      	cmp	r0, #0
 801a6a8:	d1df      	bne.n	801a66a <pow+0x222>
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	4b18      	ldr	r3, [pc, #96]	; (801a710 <pow+0x2c8>)
 801a6ae:	e7da      	b.n	801a666 <pow+0x21e>
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	ec51 0b18 	vmov	r0, r1, d8
 801a6b8:	f7e6 f990 	bl	80009dc <__aeabi_dcmpeq>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	f43f af3a 	beq.w	801a536 <pow+0xee>
 801a6c2:	ec47 6b10 	vmov	d0, r6, r7
 801a6c6:	f000 fe49 	bl	801b35c <finite>
 801a6ca:	2800      	cmp	r0, #0
 801a6cc:	f43f af33 	beq.w	801a536 <pow+0xee>
 801a6d0:	ec45 4b10 	vmov	d0, r4, r5
 801a6d4:	f000 fe42 	bl	801b35c <finite>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	f43f af2c 	beq.w	801a536 <pow+0xee>
 801a6de:	2304      	movs	r3, #4
 801a6e0:	9302      	str	r3, [sp, #8]
 801a6e2:	4b09      	ldr	r3, [pc, #36]	; (801a708 <pow+0x2c0>)
 801a6e4:	9303      	str	r3, [sp, #12]
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	930a      	str	r3, [sp, #40]	; 0x28
 801a6ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a6ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a6f2:	ed8d 9b08 	vstr	d9, [sp, #32]
 801a6f6:	e7b8      	b.n	801a66a <pow+0x222>
 801a6f8:	a802      	add	r0, sp, #8
 801a6fa:	f000 fe37 	bl	801b36c <matherr>
 801a6fe:	2800      	cmp	r0, #0
 801a700:	f47f af11 	bne.w	801a526 <pow+0xde>
 801a704:	e7b5      	b.n	801a672 <pow+0x22a>
 801a706:	bf00      	nop
 801a708:	0801c818 	.word	0x0801c818
 801a70c:	3ff00000 	.word	0x3ff00000
 801a710:	fff00000 	.word	0xfff00000
 801a714:	3fe00000 	.word	0x3fe00000
 801a718:	47efffff 	.word	0x47efffff
 801a71c:	c7efffff 	.word	0xc7efffff
 801a720:	7ff00000 	.word	0x7ff00000
 801a724:	200002d0 	.word	0x200002d0

0801a728 <sqrtf>:
 801a728:	b510      	push	{r4, lr}
 801a72a:	ed2d 8b02 	vpush	{d8}
 801a72e:	b08a      	sub	sp, #40	; 0x28
 801a730:	eeb0 8a40 	vmov.f32	s16, s0
 801a734:	f000 fe06 	bl	801b344 <__ieee754_sqrtf>
 801a738:	4b21      	ldr	r3, [pc, #132]	; (801a7c0 <sqrtf+0x98>)
 801a73a:	f993 4000 	ldrsb.w	r4, [r3]
 801a73e:	1c63      	adds	r3, r4, #1
 801a740:	d02c      	beq.n	801a79c <sqrtf+0x74>
 801a742:	eeb4 8a48 	vcmp.f32	s16, s16
 801a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a74a:	d627      	bvs.n	801a79c <sqrtf+0x74>
 801a74c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a754:	d522      	bpl.n	801a79c <sqrtf+0x74>
 801a756:	2301      	movs	r3, #1
 801a758:	9300      	str	r3, [sp, #0]
 801a75a:	4b1a      	ldr	r3, [pc, #104]	; (801a7c4 <sqrtf+0x9c>)
 801a75c:	9301      	str	r3, [sp, #4]
 801a75e:	ee18 0a10 	vmov	r0, s16
 801a762:	2300      	movs	r3, #0
 801a764:	9308      	str	r3, [sp, #32]
 801a766:	f7e5 fe79 	bl	800045c <__aeabi_f2d>
 801a76a:	2200      	movs	r2, #0
 801a76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a774:	2300      	movs	r3, #0
 801a776:	b9ac      	cbnz	r4, 801a7a4 <sqrtf+0x7c>
 801a778:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a77c:	4668      	mov	r0, sp
 801a77e:	f000 fdf5 	bl	801b36c <matherr>
 801a782:	b1b8      	cbz	r0, 801a7b4 <sqrtf+0x8c>
 801a784:	9b08      	ldr	r3, [sp, #32]
 801a786:	b11b      	cbz	r3, 801a790 <sqrtf+0x68>
 801a788:	f7ff fe20 	bl	801a3cc <__errno>
 801a78c:	9b08      	ldr	r3, [sp, #32]
 801a78e:	6003      	str	r3, [r0, #0]
 801a790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a794:	f7e6 f96a 	bl	8000a6c <__aeabi_d2f>
 801a798:	ee00 0a10 	vmov	s0, r0
 801a79c:	b00a      	add	sp, #40	; 0x28
 801a79e:	ecbd 8b02 	vpop	{d8}
 801a7a2:	bd10      	pop	{r4, pc}
 801a7a4:	4610      	mov	r0, r2
 801a7a6:	4619      	mov	r1, r3
 801a7a8:	f7e5 ffda 	bl	8000760 <__aeabi_ddiv>
 801a7ac:	2c02      	cmp	r4, #2
 801a7ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a7b2:	d1e3      	bne.n	801a77c <sqrtf+0x54>
 801a7b4:	f7ff fe0a 	bl	801a3cc <__errno>
 801a7b8:	2321      	movs	r3, #33	; 0x21
 801a7ba:	6003      	str	r3, [r0, #0]
 801a7bc:	e7e2      	b.n	801a784 <sqrtf+0x5c>
 801a7be:	bf00      	nop
 801a7c0:	200002d0 	.word	0x200002d0
 801a7c4:	0801c81c 	.word	0x0801c81c

0801a7c8 <__ieee754_pow>:
 801a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7cc:	b091      	sub	sp, #68	; 0x44
 801a7ce:	ed8d 1b00 	vstr	d1, [sp]
 801a7d2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a7d6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a7da:	ea58 0302 	orrs.w	r3, r8, r2
 801a7de:	ec57 6b10 	vmov	r6, r7, d0
 801a7e2:	f000 84be 	beq.w	801b162 <__ieee754_pow+0x99a>
 801a7e6:	4b7a      	ldr	r3, [pc, #488]	; (801a9d0 <__ieee754_pow+0x208>)
 801a7e8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a7ec:	429c      	cmp	r4, r3
 801a7ee:	463d      	mov	r5, r7
 801a7f0:	ee10 aa10 	vmov	sl, s0
 801a7f4:	dc09      	bgt.n	801a80a <__ieee754_pow+0x42>
 801a7f6:	d103      	bne.n	801a800 <__ieee754_pow+0x38>
 801a7f8:	b93e      	cbnz	r6, 801a80a <__ieee754_pow+0x42>
 801a7fa:	45a0      	cmp	r8, r4
 801a7fc:	dc0d      	bgt.n	801a81a <__ieee754_pow+0x52>
 801a7fe:	e001      	b.n	801a804 <__ieee754_pow+0x3c>
 801a800:	4598      	cmp	r8, r3
 801a802:	dc02      	bgt.n	801a80a <__ieee754_pow+0x42>
 801a804:	4598      	cmp	r8, r3
 801a806:	d10e      	bne.n	801a826 <__ieee754_pow+0x5e>
 801a808:	b16a      	cbz	r2, 801a826 <__ieee754_pow+0x5e>
 801a80a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a80e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a812:	ea54 030a 	orrs.w	r3, r4, sl
 801a816:	f000 84a4 	beq.w	801b162 <__ieee754_pow+0x99a>
 801a81a:	486e      	ldr	r0, [pc, #440]	; (801a9d4 <__ieee754_pow+0x20c>)
 801a81c:	b011      	add	sp, #68	; 0x44
 801a81e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a822:	f000 bda5 	b.w	801b370 <nan>
 801a826:	2d00      	cmp	r5, #0
 801a828:	da53      	bge.n	801a8d2 <__ieee754_pow+0x10a>
 801a82a:	4b6b      	ldr	r3, [pc, #428]	; (801a9d8 <__ieee754_pow+0x210>)
 801a82c:	4598      	cmp	r8, r3
 801a82e:	dc4d      	bgt.n	801a8cc <__ieee754_pow+0x104>
 801a830:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a834:	4598      	cmp	r8, r3
 801a836:	dd4c      	ble.n	801a8d2 <__ieee754_pow+0x10a>
 801a838:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a83c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a840:	2b14      	cmp	r3, #20
 801a842:	dd26      	ble.n	801a892 <__ieee754_pow+0xca>
 801a844:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a848:	fa22 f103 	lsr.w	r1, r2, r3
 801a84c:	fa01 f303 	lsl.w	r3, r1, r3
 801a850:	4293      	cmp	r3, r2
 801a852:	d13e      	bne.n	801a8d2 <__ieee754_pow+0x10a>
 801a854:	f001 0101 	and.w	r1, r1, #1
 801a858:	f1c1 0b02 	rsb	fp, r1, #2
 801a85c:	2a00      	cmp	r2, #0
 801a85e:	d15b      	bne.n	801a918 <__ieee754_pow+0x150>
 801a860:	4b5b      	ldr	r3, [pc, #364]	; (801a9d0 <__ieee754_pow+0x208>)
 801a862:	4598      	cmp	r8, r3
 801a864:	d124      	bne.n	801a8b0 <__ieee754_pow+0xe8>
 801a866:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a86a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a86e:	ea53 030a 	orrs.w	r3, r3, sl
 801a872:	f000 8476 	beq.w	801b162 <__ieee754_pow+0x99a>
 801a876:	4b59      	ldr	r3, [pc, #356]	; (801a9dc <__ieee754_pow+0x214>)
 801a878:	429c      	cmp	r4, r3
 801a87a:	dd2d      	ble.n	801a8d8 <__ieee754_pow+0x110>
 801a87c:	f1b9 0f00 	cmp.w	r9, #0
 801a880:	f280 8473 	bge.w	801b16a <__ieee754_pow+0x9a2>
 801a884:	2000      	movs	r0, #0
 801a886:	2100      	movs	r1, #0
 801a888:	ec41 0b10 	vmov	d0, r0, r1
 801a88c:	b011      	add	sp, #68	; 0x44
 801a88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a892:	2a00      	cmp	r2, #0
 801a894:	d13e      	bne.n	801a914 <__ieee754_pow+0x14c>
 801a896:	f1c3 0314 	rsb	r3, r3, #20
 801a89a:	fa48 f103 	asr.w	r1, r8, r3
 801a89e:	fa01 f303 	lsl.w	r3, r1, r3
 801a8a2:	4543      	cmp	r3, r8
 801a8a4:	f040 8469 	bne.w	801b17a <__ieee754_pow+0x9b2>
 801a8a8:	f001 0101 	and.w	r1, r1, #1
 801a8ac:	f1c1 0b02 	rsb	fp, r1, #2
 801a8b0:	4b4b      	ldr	r3, [pc, #300]	; (801a9e0 <__ieee754_pow+0x218>)
 801a8b2:	4598      	cmp	r8, r3
 801a8b4:	d118      	bne.n	801a8e8 <__ieee754_pow+0x120>
 801a8b6:	f1b9 0f00 	cmp.w	r9, #0
 801a8ba:	f280 845a 	bge.w	801b172 <__ieee754_pow+0x9aa>
 801a8be:	4948      	ldr	r1, [pc, #288]	; (801a9e0 <__ieee754_pow+0x218>)
 801a8c0:	4632      	mov	r2, r6
 801a8c2:	463b      	mov	r3, r7
 801a8c4:	2000      	movs	r0, #0
 801a8c6:	f7e5 ff4b 	bl	8000760 <__aeabi_ddiv>
 801a8ca:	e7dd      	b.n	801a888 <__ieee754_pow+0xc0>
 801a8cc:	f04f 0b02 	mov.w	fp, #2
 801a8d0:	e7c4      	b.n	801a85c <__ieee754_pow+0x94>
 801a8d2:	f04f 0b00 	mov.w	fp, #0
 801a8d6:	e7c1      	b.n	801a85c <__ieee754_pow+0x94>
 801a8d8:	f1b9 0f00 	cmp.w	r9, #0
 801a8dc:	dad2      	bge.n	801a884 <__ieee754_pow+0xbc>
 801a8de:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a8e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a8e6:	e7cf      	b.n	801a888 <__ieee754_pow+0xc0>
 801a8e8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a8ec:	d106      	bne.n	801a8fc <__ieee754_pow+0x134>
 801a8ee:	4632      	mov	r2, r6
 801a8f0:	463b      	mov	r3, r7
 801a8f2:	4610      	mov	r0, r2
 801a8f4:	4619      	mov	r1, r3
 801a8f6:	f7e5 fe09 	bl	800050c <__aeabi_dmul>
 801a8fa:	e7c5      	b.n	801a888 <__ieee754_pow+0xc0>
 801a8fc:	4b39      	ldr	r3, [pc, #228]	; (801a9e4 <__ieee754_pow+0x21c>)
 801a8fe:	4599      	cmp	r9, r3
 801a900:	d10a      	bne.n	801a918 <__ieee754_pow+0x150>
 801a902:	2d00      	cmp	r5, #0
 801a904:	db08      	blt.n	801a918 <__ieee754_pow+0x150>
 801a906:	ec47 6b10 	vmov	d0, r6, r7
 801a90a:	b011      	add	sp, #68	; 0x44
 801a90c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	f000 bc68 	b.w	801b1e4 <__ieee754_sqrt>
 801a914:	f04f 0b00 	mov.w	fp, #0
 801a918:	ec47 6b10 	vmov	d0, r6, r7
 801a91c:	f000 fd15 	bl	801b34a <fabs>
 801a920:	ec51 0b10 	vmov	r0, r1, d0
 801a924:	f1ba 0f00 	cmp.w	sl, #0
 801a928:	d127      	bne.n	801a97a <__ieee754_pow+0x1b2>
 801a92a:	b124      	cbz	r4, 801a936 <__ieee754_pow+0x16e>
 801a92c:	4b2c      	ldr	r3, [pc, #176]	; (801a9e0 <__ieee754_pow+0x218>)
 801a92e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a932:	429a      	cmp	r2, r3
 801a934:	d121      	bne.n	801a97a <__ieee754_pow+0x1b2>
 801a936:	f1b9 0f00 	cmp.w	r9, #0
 801a93a:	da05      	bge.n	801a948 <__ieee754_pow+0x180>
 801a93c:	4602      	mov	r2, r0
 801a93e:	460b      	mov	r3, r1
 801a940:	2000      	movs	r0, #0
 801a942:	4927      	ldr	r1, [pc, #156]	; (801a9e0 <__ieee754_pow+0x218>)
 801a944:	f7e5 ff0c 	bl	8000760 <__aeabi_ddiv>
 801a948:	2d00      	cmp	r5, #0
 801a94a:	da9d      	bge.n	801a888 <__ieee754_pow+0xc0>
 801a94c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a950:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a954:	ea54 030b 	orrs.w	r3, r4, fp
 801a958:	d108      	bne.n	801a96c <__ieee754_pow+0x1a4>
 801a95a:	4602      	mov	r2, r0
 801a95c:	460b      	mov	r3, r1
 801a95e:	4610      	mov	r0, r2
 801a960:	4619      	mov	r1, r3
 801a962:	f7e5 fc1b 	bl	800019c <__aeabi_dsub>
 801a966:	4602      	mov	r2, r0
 801a968:	460b      	mov	r3, r1
 801a96a:	e7ac      	b.n	801a8c6 <__ieee754_pow+0xfe>
 801a96c:	f1bb 0f01 	cmp.w	fp, #1
 801a970:	d18a      	bne.n	801a888 <__ieee754_pow+0xc0>
 801a972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a976:	4619      	mov	r1, r3
 801a978:	e786      	b.n	801a888 <__ieee754_pow+0xc0>
 801a97a:	0fed      	lsrs	r5, r5, #31
 801a97c:	1e6b      	subs	r3, r5, #1
 801a97e:	930d      	str	r3, [sp, #52]	; 0x34
 801a980:	ea5b 0303 	orrs.w	r3, fp, r3
 801a984:	d102      	bne.n	801a98c <__ieee754_pow+0x1c4>
 801a986:	4632      	mov	r2, r6
 801a988:	463b      	mov	r3, r7
 801a98a:	e7e8      	b.n	801a95e <__ieee754_pow+0x196>
 801a98c:	4b16      	ldr	r3, [pc, #88]	; (801a9e8 <__ieee754_pow+0x220>)
 801a98e:	4598      	cmp	r8, r3
 801a990:	f340 80fe 	ble.w	801ab90 <__ieee754_pow+0x3c8>
 801a994:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a998:	4598      	cmp	r8, r3
 801a99a:	dd0a      	ble.n	801a9b2 <__ieee754_pow+0x1ea>
 801a99c:	4b0f      	ldr	r3, [pc, #60]	; (801a9dc <__ieee754_pow+0x214>)
 801a99e:	429c      	cmp	r4, r3
 801a9a0:	dc0d      	bgt.n	801a9be <__ieee754_pow+0x1f6>
 801a9a2:	f1b9 0f00 	cmp.w	r9, #0
 801a9a6:	f6bf af6d 	bge.w	801a884 <__ieee754_pow+0xbc>
 801a9aa:	a307      	add	r3, pc, #28	; (adr r3, 801a9c8 <__ieee754_pow+0x200>)
 801a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b0:	e79f      	b.n	801a8f2 <__ieee754_pow+0x12a>
 801a9b2:	4b0e      	ldr	r3, [pc, #56]	; (801a9ec <__ieee754_pow+0x224>)
 801a9b4:	429c      	cmp	r4, r3
 801a9b6:	ddf4      	ble.n	801a9a2 <__ieee754_pow+0x1da>
 801a9b8:	4b09      	ldr	r3, [pc, #36]	; (801a9e0 <__ieee754_pow+0x218>)
 801a9ba:	429c      	cmp	r4, r3
 801a9bc:	dd18      	ble.n	801a9f0 <__ieee754_pow+0x228>
 801a9be:	f1b9 0f00 	cmp.w	r9, #0
 801a9c2:	dcf2      	bgt.n	801a9aa <__ieee754_pow+0x1e2>
 801a9c4:	e75e      	b.n	801a884 <__ieee754_pow+0xbc>
 801a9c6:	bf00      	nop
 801a9c8:	8800759c 	.word	0x8800759c
 801a9cc:	7e37e43c 	.word	0x7e37e43c
 801a9d0:	7ff00000 	.word	0x7ff00000
 801a9d4:	0801c821 	.word	0x0801c821
 801a9d8:	433fffff 	.word	0x433fffff
 801a9dc:	3fefffff 	.word	0x3fefffff
 801a9e0:	3ff00000 	.word	0x3ff00000
 801a9e4:	3fe00000 	.word	0x3fe00000
 801a9e8:	41e00000 	.word	0x41e00000
 801a9ec:	3feffffe 	.word	0x3feffffe
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	4b63      	ldr	r3, [pc, #396]	; (801ab80 <__ieee754_pow+0x3b8>)
 801a9f4:	f7e5 fbd2 	bl	800019c <__aeabi_dsub>
 801a9f8:	a355      	add	r3, pc, #340	; (adr r3, 801ab50 <__ieee754_pow+0x388>)
 801a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9fe:	4604      	mov	r4, r0
 801aa00:	460d      	mov	r5, r1
 801aa02:	f7e5 fd83 	bl	800050c <__aeabi_dmul>
 801aa06:	a354      	add	r3, pc, #336	; (adr r3, 801ab58 <__ieee754_pow+0x390>)
 801aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0c:	4606      	mov	r6, r0
 801aa0e:	460f      	mov	r7, r1
 801aa10:	4620      	mov	r0, r4
 801aa12:	4629      	mov	r1, r5
 801aa14:	f7e5 fd7a 	bl	800050c <__aeabi_dmul>
 801aa18:	2200      	movs	r2, #0
 801aa1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa1e:	4b59      	ldr	r3, [pc, #356]	; (801ab84 <__ieee754_pow+0x3bc>)
 801aa20:	4620      	mov	r0, r4
 801aa22:	4629      	mov	r1, r5
 801aa24:	f7e5 fd72 	bl	800050c <__aeabi_dmul>
 801aa28:	4602      	mov	r2, r0
 801aa2a:	460b      	mov	r3, r1
 801aa2c:	a14c      	add	r1, pc, #304	; (adr r1, 801ab60 <__ieee754_pow+0x398>)
 801aa2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa32:	f7e5 fbb3 	bl	800019c <__aeabi_dsub>
 801aa36:	4622      	mov	r2, r4
 801aa38:	462b      	mov	r3, r5
 801aa3a:	f7e5 fd67 	bl	800050c <__aeabi_dmul>
 801aa3e:	4602      	mov	r2, r0
 801aa40:	460b      	mov	r3, r1
 801aa42:	2000      	movs	r0, #0
 801aa44:	4950      	ldr	r1, [pc, #320]	; (801ab88 <__ieee754_pow+0x3c0>)
 801aa46:	f7e5 fba9 	bl	800019c <__aeabi_dsub>
 801aa4a:	4622      	mov	r2, r4
 801aa4c:	462b      	mov	r3, r5
 801aa4e:	4680      	mov	r8, r0
 801aa50:	4689      	mov	r9, r1
 801aa52:	4620      	mov	r0, r4
 801aa54:	4629      	mov	r1, r5
 801aa56:	f7e5 fd59 	bl	800050c <__aeabi_dmul>
 801aa5a:	4602      	mov	r2, r0
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	4640      	mov	r0, r8
 801aa60:	4649      	mov	r1, r9
 801aa62:	f7e5 fd53 	bl	800050c <__aeabi_dmul>
 801aa66:	a340      	add	r3, pc, #256	; (adr r3, 801ab68 <__ieee754_pow+0x3a0>)
 801aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa6c:	f7e5 fd4e 	bl	800050c <__aeabi_dmul>
 801aa70:	4602      	mov	r2, r0
 801aa72:	460b      	mov	r3, r1
 801aa74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa78:	f7e5 fb90 	bl	800019c <__aeabi_dsub>
 801aa7c:	4602      	mov	r2, r0
 801aa7e:	460b      	mov	r3, r1
 801aa80:	4604      	mov	r4, r0
 801aa82:	460d      	mov	r5, r1
 801aa84:	4630      	mov	r0, r6
 801aa86:	4639      	mov	r1, r7
 801aa88:	f7e5 fb8a 	bl	80001a0 <__adddf3>
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa92:	4632      	mov	r2, r6
 801aa94:	463b      	mov	r3, r7
 801aa96:	f7e5 fb81 	bl	800019c <__aeabi_dsub>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	4629      	mov	r1, r5
 801aaa2:	f7e5 fb7b 	bl	800019c <__aeabi_dsub>
 801aaa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aaa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801aaac:	4313      	orrs	r3, r2
 801aaae:	4606      	mov	r6, r0
 801aab0:	460f      	mov	r7, r1
 801aab2:	f040 81eb 	bne.w	801ae8c <__ieee754_pow+0x6c4>
 801aab6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ab70 <__ieee754_pow+0x3a8>
 801aaba:	e9dd 4500 	ldrd	r4, r5, [sp]
 801aabe:	2400      	movs	r4, #0
 801aac0:	4622      	mov	r2, r4
 801aac2:	462b      	mov	r3, r5
 801aac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aacc:	f7e5 fb66 	bl	800019c <__aeabi_dsub>
 801aad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aad4:	f7e5 fd1a 	bl	800050c <__aeabi_dmul>
 801aad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aadc:	4680      	mov	r8, r0
 801aade:	4689      	mov	r9, r1
 801aae0:	4630      	mov	r0, r6
 801aae2:	4639      	mov	r1, r7
 801aae4:	f7e5 fd12 	bl	800050c <__aeabi_dmul>
 801aae8:	4602      	mov	r2, r0
 801aaea:	460b      	mov	r3, r1
 801aaec:	4640      	mov	r0, r8
 801aaee:	4649      	mov	r1, r9
 801aaf0:	f7e5 fb56 	bl	80001a0 <__adddf3>
 801aaf4:	4622      	mov	r2, r4
 801aaf6:	462b      	mov	r3, r5
 801aaf8:	4680      	mov	r8, r0
 801aafa:	4689      	mov	r9, r1
 801aafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab00:	f7e5 fd04 	bl	800050c <__aeabi_dmul>
 801ab04:	460b      	mov	r3, r1
 801ab06:	4604      	mov	r4, r0
 801ab08:	460d      	mov	r5, r1
 801ab0a:	4602      	mov	r2, r0
 801ab0c:	4649      	mov	r1, r9
 801ab0e:	4640      	mov	r0, r8
 801ab10:	e9cd 4500 	strd	r4, r5, [sp]
 801ab14:	f7e5 fb44 	bl	80001a0 <__adddf3>
 801ab18:	4b1c      	ldr	r3, [pc, #112]	; (801ab8c <__ieee754_pow+0x3c4>)
 801ab1a:	4299      	cmp	r1, r3
 801ab1c:	4606      	mov	r6, r0
 801ab1e:	460f      	mov	r7, r1
 801ab20:	468b      	mov	fp, r1
 801ab22:	f340 82f7 	ble.w	801b114 <__ieee754_pow+0x94c>
 801ab26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ab2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ab2e:	4303      	orrs	r3, r0
 801ab30:	f000 81ea 	beq.w	801af08 <__ieee754_pow+0x740>
 801ab34:	a310      	add	r3, pc, #64	; (adr r3, 801ab78 <__ieee754_pow+0x3b0>)
 801ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ab3e:	f7e5 fce5 	bl	800050c <__aeabi_dmul>
 801ab42:	a30d      	add	r3, pc, #52	; (adr r3, 801ab78 <__ieee754_pow+0x3b0>)
 801ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab48:	e6d5      	b.n	801a8f6 <__ieee754_pow+0x12e>
 801ab4a:	bf00      	nop
 801ab4c:	f3af 8000 	nop.w
 801ab50:	60000000 	.word	0x60000000
 801ab54:	3ff71547 	.word	0x3ff71547
 801ab58:	f85ddf44 	.word	0xf85ddf44
 801ab5c:	3e54ae0b 	.word	0x3e54ae0b
 801ab60:	55555555 	.word	0x55555555
 801ab64:	3fd55555 	.word	0x3fd55555
 801ab68:	652b82fe 	.word	0x652b82fe
 801ab6c:	3ff71547 	.word	0x3ff71547
 801ab70:	00000000 	.word	0x00000000
 801ab74:	bff00000 	.word	0xbff00000
 801ab78:	8800759c 	.word	0x8800759c
 801ab7c:	7e37e43c 	.word	0x7e37e43c
 801ab80:	3ff00000 	.word	0x3ff00000
 801ab84:	3fd00000 	.word	0x3fd00000
 801ab88:	3fe00000 	.word	0x3fe00000
 801ab8c:	408fffff 	.word	0x408fffff
 801ab90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ab94:	f04f 0200 	mov.w	r2, #0
 801ab98:	da05      	bge.n	801aba6 <__ieee754_pow+0x3de>
 801ab9a:	4bd3      	ldr	r3, [pc, #844]	; (801aee8 <__ieee754_pow+0x720>)
 801ab9c:	f7e5 fcb6 	bl	800050c <__aeabi_dmul>
 801aba0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801aba4:	460c      	mov	r4, r1
 801aba6:	1523      	asrs	r3, r4, #20
 801aba8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801abac:	4413      	add	r3, r2
 801abae:	9309      	str	r3, [sp, #36]	; 0x24
 801abb0:	4bce      	ldr	r3, [pc, #824]	; (801aeec <__ieee754_pow+0x724>)
 801abb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801abb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801abba:	429c      	cmp	r4, r3
 801abbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801abc0:	dd08      	ble.n	801abd4 <__ieee754_pow+0x40c>
 801abc2:	4bcb      	ldr	r3, [pc, #812]	; (801aef0 <__ieee754_pow+0x728>)
 801abc4:	429c      	cmp	r4, r3
 801abc6:	f340 815e 	ble.w	801ae86 <__ieee754_pow+0x6be>
 801abca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abcc:	3301      	adds	r3, #1
 801abce:	9309      	str	r3, [sp, #36]	; 0x24
 801abd0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801abd4:	f04f 0a00 	mov.w	sl, #0
 801abd8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801abdc:	930c      	str	r3, [sp, #48]	; 0x30
 801abde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abe0:	4bc4      	ldr	r3, [pc, #784]	; (801aef4 <__ieee754_pow+0x72c>)
 801abe2:	4413      	add	r3, r2
 801abe4:	ed93 7b00 	vldr	d7, [r3]
 801abe8:	4629      	mov	r1, r5
 801abea:	ec53 2b17 	vmov	r2, r3, d7
 801abee:	ed8d 7b06 	vstr	d7, [sp, #24]
 801abf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801abf6:	f7e5 fad1 	bl	800019c <__aeabi_dsub>
 801abfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac06:	f7e5 facb 	bl	80001a0 <__adddf3>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	2000      	movs	r0, #0
 801ac10:	49b9      	ldr	r1, [pc, #740]	; (801aef8 <__ieee754_pow+0x730>)
 801ac12:	f7e5 fda5 	bl	8000760 <__aeabi_ddiv>
 801ac16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ac1a:	4602      	mov	r2, r0
 801ac1c:	460b      	mov	r3, r1
 801ac1e:	4630      	mov	r0, r6
 801ac20:	4639      	mov	r1, r7
 801ac22:	f7e5 fc73 	bl	800050c <__aeabi_dmul>
 801ac26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ac2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801ac2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ac32:	2300      	movs	r3, #0
 801ac34:	9302      	str	r3, [sp, #8]
 801ac36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ac3a:	106d      	asrs	r5, r5, #1
 801ac3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ac40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ac44:	2200      	movs	r2, #0
 801ac46:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801ac4a:	4640      	mov	r0, r8
 801ac4c:	4649      	mov	r1, r9
 801ac4e:	4614      	mov	r4, r2
 801ac50:	461d      	mov	r5, r3
 801ac52:	f7e5 fc5b 	bl	800050c <__aeabi_dmul>
 801ac56:	4602      	mov	r2, r0
 801ac58:	460b      	mov	r3, r1
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	4639      	mov	r1, r7
 801ac5e:	f7e5 fa9d 	bl	800019c <__aeabi_dsub>
 801ac62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ac66:	4606      	mov	r6, r0
 801ac68:	460f      	mov	r7, r1
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	4629      	mov	r1, r5
 801ac6e:	f7e5 fa95 	bl	800019c <__aeabi_dsub>
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ac7a:	f7e5 fa8f 	bl	800019c <__aeabi_dsub>
 801ac7e:	4642      	mov	r2, r8
 801ac80:	464b      	mov	r3, r9
 801ac82:	f7e5 fc43 	bl	800050c <__aeabi_dmul>
 801ac86:	4602      	mov	r2, r0
 801ac88:	460b      	mov	r3, r1
 801ac8a:	4630      	mov	r0, r6
 801ac8c:	4639      	mov	r1, r7
 801ac8e:	f7e5 fa85 	bl	800019c <__aeabi_dsub>
 801ac92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ac96:	f7e5 fc39 	bl	800050c <__aeabi_dmul>
 801ac9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801aca2:	4610      	mov	r0, r2
 801aca4:	4619      	mov	r1, r3
 801aca6:	f7e5 fc31 	bl	800050c <__aeabi_dmul>
 801acaa:	a37b      	add	r3, pc, #492	; (adr r3, 801ae98 <__ieee754_pow+0x6d0>)
 801acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb0:	4604      	mov	r4, r0
 801acb2:	460d      	mov	r5, r1
 801acb4:	f7e5 fc2a 	bl	800050c <__aeabi_dmul>
 801acb8:	a379      	add	r3, pc, #484	; (adr r3, 801aea0 <__ieee754_pow+0x6d8>)
 801acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbe:	f7e5 fa6f 	bl	80001a0 <__adddf3>
 801acc2:	4622      	mov	r2, r4
 801acc4:	462b      	mov	r3, r5
 801acc6:	f7e5 fc21 	bl	800050c <__aeabi_dmul>
 801acca:	a377      	add	r3, pc, #476	; (adr r3, 801aea8 <__ieee754_pow+0x6e0>)
 801accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd0:	f7e5 fa66 	bl	80001a0 <__adddf3>
 801acd4:	4622      	mov	r2, r4
 801acd6:	462b      	mov	r3, r5
 801acd8:	f7e5 fc18 	bl	800050c <__aeabi_dmul>
 801acdc:	a374      	add	r3, pc, #464	; (adr r3, 801aeb0 <__ieee754_pow+0x6e8>)
 801acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace2:	f7e5 fa5d 	bl	80001a0 <__adddf3>
 801ace6:	4622      	mov	r2, r4
 801ace8:	462b      	mov	r3, r5
 801acea:	f7e5 fc0f 	bl	800050c <__aeabi_dmul>
 801acee:	a372      	add	r3, pc, #456	; (adr r3, 801aeb8 <__ieee754_pow+0x6f0>)
 801acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf4:	f7e5 fa54 	bl	80001a0 <__adddf3>
 801acf8:	4622      	mov	r2, r4
 801acfa:	462b      	mov	r3, r5
 801acfc:	f7e5 fc06 	bl	800050c <__aeabi_dmul>
 801ad00:	a36f      	add	r3, pc, #444	; (adr r3, 801aec0 <__ieee754_pow+0x6f8>)
 801ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad06:	f7e5 fa4b 	bl	80001a0 <__adddf3>
 801ad0a:	4622      	mov	r2, r4
 801ad0c:	4606      	mov	r6, r0
 801ad0e:	460f      	mov	r7, r1
 801ad10:	462b      	mov	r3, r5
 801ad12:	4620      	mov	r0, r4
 801ad14:	4629      	mov	r1, r5
 801ad16:	f7e5 fbf9 	bl	800050c <__aeabi_dmul>
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	4630      	mov	r0, r6
 801ad20:	4639      	mov	r1, r7
 801ad22:	f7e5 fbf3 	bl	800050c <__aeabi_dmul>
 801ad26:	4642      	mov	r2, r8
 801ad28:	4604      	mov	r4, r0
 801ad2a:	460d      	mov	r5, r1
 801ad2c:	464b      	mov	r3, r9
 801ad2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad32:	f7e5 fa35 	bl	80001a0 <__adddf3>
 801ad36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ad3a:	f7e5 fbe7 	bl	800050c <__aeabi_dmul>
 801ad3e:	4622      	mov	r2, r4
 801ad40:	462b      	mov	r3, r5
 801ad42:	f7e5 fa2d 	bl	80001a0 <__adddf3>
 801ad46:	4642      	mov	r2, r8
 801ad48:	4606      	mov	r6, r0
 801ad4a:	460f      	mov	r7, r1
 801ad4c:	464b      	mov	r3, r9
 801ad4e:	4640      	mov	r0, r8
 801ad50:	4649      	mov	r1, r9
 801ad52:	f7e5 fbdb 	bl	800050c <__aeabi_dmul>
 801ad56:	2200      	movs	r2, #0
 801ad58:	4b68      	ldr	r3, [pc, #416]	; (801aefc <__ieee754_pow+0x734>)
 801ad5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ad5e:	f7e5 fa1f 	bl	80001a0 <__adddf3>
 801ad62:	4632      	mov	r2, r6
 801ad64:	463b      	mov	r3, r7
 801ad66:	f7e5 fa1b 	bl	80001a0 <__adddf3>
 801ad6a:	9802      	ldr	r0, [sp, #8]
 801ad6c:	460d      	mov	r5, r1
 801ad6e:	4604      	mov	r4, r0
 801ad70:	4602      	mov	r2, r0
 801ad72:	460b      	mov	r3, r1
 801ad74:	4640      	mov	r0, r8
 801ad76:	4649      	mov	r1, r9
 801ad78:	f7e5 fbc8 	bl	800050c <__aeabi_dmul>
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	4680      	mov	r8, r0
 801ad80:	4689      	mov	r9, r1
 801ad82:	4b5e      	ldr	r3, [pc, #376]	; (801aefc <__ieee754_pow+0x734>)
 801ad84:	4620      	mov	r0, r4
 801ad86:	4629      	mov	r1, r5
 801ad88:	f7e5 fa08 	bl	800019c <__aeabi_dsub>
 801ad8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad90:	f7e5 fa04 	bl	800019c <__aeabi_dsub>
 801ad94:	4602      	mov	r2, r0
 801ad96:	460b      	mov	r3, r1
 801ad98:	4630      	mov	r0, r6
 801ad9a:	4639      	mov	r1, r7
 801ad9c:	f7e5 f9fe 	bl	800019c <__aeabi_dsub>
 801ada0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ada4:	f7e5 fbb2 	bl	800050c <__aeabi_dmul>
 801ada8:	4622      	mov	r2, r4
 801adaa:	4606      	mov	r6, r0
 801adac:	460f      	mov	r7, r1
 801adae:	462b      	mov	r3, r5
 801adb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adb4:	f7e5 fbaa 	bl	800050c <__aeabi_dmul>
 801adb8:	4602      	mov	r2, r0
 801adba:	460b      	mov	r3, r1
 801adbc:	4630      	mov	r0, r6
 801adbe:	4639      	mov	r1, r7
 801adc0:	f7e5 f9ee 	bl	80001a0 <__adddf3>
 801adc4:	4606      	mov	r6, r0
 801adc6:	460f      	mov	r7, r1
 801adc8:	4602      	mov	r2, r0
 801adca:	460b      	mov	r3, r1
 801adcc:	4640      	mov	r0, r8
 801adce:	4649      	mov	r1, r9
 801add0:	f7e5 f9e6 	bl	80001a0 <__adddf3>
 801add4:	9802      	ldr	r0, [sp, #8]
 801add6:	a33c      	add	r3, pc, #240	; (adr r3, 801aec8 <__ieee754_pow+0x700>)
 801add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801addc:	4604      	mov	r4, r0
 801adde:	460d      	mov	r5, r1
 801ade0:	f7e5 fb94 	bl	800050c <__aeabi_dmul>
 801ade4:	4642      	mov	r2, r8
 801ade6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801adea:	464b      	mov	r3, r9
 801adec:	4620      	mov	r0, r4
 801adee:	4629      	mov	r1, r5
 801adf0:	f7e5 f9d4 	bl	800019c <__aeabi_dsub>
 801adf4:	4602      	mov	r2, r0
 801adf6:	460b      	mov	r3, r1
 801adf8:	4630      	mov	r0, r6
 801adfa:	4639      	mov	r1, r7
 801adfc:	f7e5 f9ce 	bl	800019c <__aeabi_dsub>
 801ae00:	a333      	add	r3, pc, #204	; (adr r3, 801aed0 <__ieee754_pow+0x708>)
 801ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae06:	f7e5 fb81 	bl	800050c <__aeabi_dmul>
 801ae0a:	a333      	add	r3, pc, #204	; (adr r3, 801aed8 <__ieee754_pow+0x710>)
 801ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae10:	4606      	mov	r6, r0
 801ae12:	460f      	mov	r7, r1
 801ae14:	4620      	mov	r0, r4
 801ae16:	4629      	mov	r1, r5
 801ae18:	f7e5 fb78 	bl	800050c <__aeabi_dmul>
 801ae1c:	4602      	mov	r2, r0
 801ae1e:	460b      	mov	r3, r1
 801ae20:	4630      	mov	r0, r6
 801ae22:	4639      	mov	r1, r7
 801ae24:	f7e5 f9bc 	bl	80001a0 <__adddf3>
 801ae28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ae2a:	4b35      	ldr	r3, [pc, #212]	; (801af00 <__ieee754_pow+0x738>)
 801ae2c:	4413      	add	r3, r2
 801ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae32:	f7e5 f9b5 	bl	80001a0 <__adddf3>
 801ae36:	4604      	mov	r4, r0
 801ae38:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae3a:	460d      	mov	r5, r1
 801ae3c:	f7e5 fafc 	bl	8000438 <__aeabi_i2d>
 801ae40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ae42:	4b30      	ldr	r3, [pc, #192]	; (801af04 <__ieee754_pow+0x73c>)
 801ae44:	4413      	add	r3, r2
 801ae46:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ae4a:	4606      	mov	r6, r0
 801ae4c:	460f      	mov	r7, r1
 801ae4e:	4622      	mov	r2, r4
 801ae50:	462b      	mov	r3, r5
 801ae52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae56:	f7e5 f9a3 	bl	80001a0 <__adddf3>
 801ae5a:	4642      	mov	r2, r8
 801ae5c:	464b      	mov	r3, r9
 801ae5e:	f7e5 f99f 	bl	80001a0 <__adddf3>
 801ae62:	4632      	mov	r2, r6
 801ae64:	463b      	mov	r3, r7
 801ae66:	f7e5 f99b 	bl	80001a0 <__adddf3>
 801ae6a:	9802      	ldr	r0, [sp, #8]
 801ae6c:	4632      	mov	r2, r6
 801ae6e:	463b      	mov	r3, r7
 801ae70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae74:	f7e5 f992 	bl	800019c <__aeabi_dsub>
 801ae78:	4642      	mov	r2, r8
 801ae7a:	464b      	mov	r3, r9
 801ae7c:	f7e5 f98e 	bl	800019c <__aeabi_dsub>
 801ae80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae84:	e607      	b.n	801aa96 <__ieee754_pow+0x2ce>
 801ae86:	f04f 0a01 	mov.w	sl, #1
 801ae8a:	e6a5      	b.n	801abd8 <__ieee754_pow+0x410>
 801ae8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801aee0 <__ieee754_pow+0x718>
 801ae90:	e613      	b.n	801aaba <__ieee754_pow+0x2f2>
 801ae92:	bf00      	nop
 801ae94:	f3af 8000 	nop.w
 801ae98:	4a454eef 	.word	0x4a454eef
 801ae9c:	3fca7e28 	.word	0x3fca7e28
 801aea0:	93c9db65 	.word	0x93c9db65
 801aea4:	3fcd864a 	.word	0x3fcd864a
 801aea8:	a91d4101 	.word	0xa91d4101
 801aeac:	3fd17460 	.word	0x3fd17460
 801aeb0:	518f264d 	.word	0x518f264d
 801aeb4:	3fd55555 	.word	0x3fd55555
 801aeb8:	db6fabff 	.word	0xdb6fabff
 801aebc:	3fdb6db6 	.word	0x3fdb6db6
 801aec0:	33333303 	.word	0x33333303
 801aec4:	3fe33333 	.word	0x3fe33333
 801aec8:	e0000000 	.word	0xe0000000
 801aecc:	3feec709 	.word	0x3feec709
 801aed0:	dc3a03fd 	.word	0xdc3a03fd
 801aed4:	3feec709 	.word	0x3feec709
 801aed8:	145b01f5 	.word	0x145b01f5
 801aedc:	be3e2fe0 	.word	0xbe3e2fe0
 801aee0:	00000000 	.word	0x00000000
 801aee4:	3ff00000 	.word	0x3ff00000
 801aee8:	43400000 	.word	0x43400000
 801aeec:	0003988e 	.word	0x0003988e
 801aef0:	000bb679 	.word	0x000bb679
 801aef4:	0801c828 	.word	0x0801c828
 801aef8:	3ff00000 	.word	0x3ff00000
 801aefc:	40080000 	.word	0x40080000
 801af00:	0801c848 	.word	0x0801c848
 801af04:	0801c838 	.word	0x0801c838
 801af08:	a3b4      	add	r3, pc, #720	; (adr r3, 801b1dc <__ieee754_pow+0xa14>)
 801af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af0e:	4640      	mov	r0, r8
 801af10:	4649      	mov	r1, r9
 801af12:	f7e5 f945 	bl	80001a0 <__adddf3>
 801af16:	4622      	mov	r2, r4
 801af18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801af1c:	462b      	mov	r3, r5
 801af1e:	4630      	mov	r0, r6
 801af20:	4639      	mov	r1, r7
 801af22:	f7e5 f93b 	bl	800019c <__aeabi_dsub>
 801af26:	4602      	mov	r2, r0
 801af28:	460b      	mov	r3, r1
 801af2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801af2e:	f7e5 fd7d 	bl	8000a2c <__aeabi_dcmpgt>
 801af32:	2800      	cmp	r0, #0
 801af34:	f47f adfe 	bne.w	801ab34 <__ieee754_pow+0x36c>
 801af38:	4aa3      	ldr	r2, [pc, #652]	; (801b1c8 <__ieee754_pow+0xa00>)
 801af3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801af3e:	4293      	cmp	r3, r2
 801af40:	f340 810a 	ble.w	801b158 <__ieee754_pow+0x990>
 801af44:	151b      	asrs	r3, r3, #20
 801af46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801af4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801af4e:	fa4a f303 	asr.w	r3, sl, r3
 801af52:	445b      	add	r3, fp
 801af54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801af58:	4e9c      	ldr	r6, [pc, #624]	; (801b1cc <__ieee754_pow+0xa04>)
 801af5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801af5e:	4116      	asrs	r6, r2
 801af60:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801af64:	2000      	movs	r0, #0
 801af66:	ea23 0106 	bic.w	r1, r3, r6
 801af6a:	f1c2 0214 	rsb	r2, r2, #20
 801af6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801af72:	fa4a fa02 	asr.w	sl, sl, r2
 801af76:	f1bb 0f00 	cmp.w	fp, #0
 801af7a:	4602      	mov	r2, r0
 801af7c:	460b      	mov	r3, r1
 801af7e:	4620      	mov	r0, r4
 801af80:	4629      	mov	r1, r5
 801af82:	bfb8      	it	lt
 801af84:	f1ca 0a00 	rsblt	sl, sl, #0
 801af88:	f7e5 f908 	bl	800019c <__aeabi_dsub>
 801af8c:	e9cd 0100 	strd	r0, r1, [sp]
 801af90:	4642      	mov	r2, r8
 801af92:	464b      	mov	r3, r9
 801af94:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af98:	f7e5 f902 	bl	80001a0 <__adddf3>
 801af9c:	2000      	movs	r0, #0
 801af9e:	a378      	add	r3, pc, #480	; (adr r3, 801b180 <__ieee754_pow+0x9b8>)
 801afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa4:	4604      	mov	r4, r0
 801afa6:	460d      	mov	r5, r1
 801afa8:	f7e5 fab0 	bl	800050c <__aeabi_dmul>
 801afac:	e9dd 2300 	ldrd	r2, r3, [sp]
 801afb0:	4606      	mov	r6, r0
 801afb2:	460f      	mov	r7, r1
 801afb4:	4620      	mov	r0, r4
 801afb6:	4629      	mov	r1, r5
 801afb8:	f7e5 f8f0 	bl	800019c <__aeabi_dsub>
 801afbc:	4602      	mov	r2, r0
 801afbe:	460b      	mov	r3, r1
 801afc0:	4640      	mov	r0, r8
 801afc2:	4649      	mov	r1, r9
 801afc4:	f7e5 f8ea 	bl	800019c <__aeabi_dsub>
 801afc8:	a36f      	add	r3, pc, #444	; (adr r3, 801b188 <__ieee754_pow+0x9c0>)
 801afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afce:	f7e5 fa9d 	bl	800050c <__aeabi_dmul>
 801afd2:	a36f      	add	r3, pc, #444	; (adr r3, 801b190 <__ieee754_pow+0x9c8>)
 801afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd8:	4680      	mov	r8, r0
 801afda:	4689      	mov	r9, r1
 801afdc:	4620      	mov	r0, r4
 801afde:	4629      	mov	r1, r5
 801afe0:	f7e5 fa94 	bl	800050c <__aeabi_dmul>
 801afe4:	4602      	mov	r2, r0
 801afe6:	460b      	mov	r3, r1
 801afe8:	4640      	mov	r0, r8
 801afea:	4649      	mov	r1, r9
 801afec:	f7e5 f8d8 	bl	80001a0 <__adddf3>
 801aff0:	4604      	mov	r4, r0
 801aff2:	460d      	mov	r5, r1
 801aff4:	4602      	mov	r2, r0
 801aff6:	460b      	mov	r3, r1
 801aff8:	4630      	mov	r0, r6
 801affa:	4639      	mov	r1, r7
 801affc:	f7e5 f8d0 	bl	80001a0 <__adddf3>
 801b000:	4632      	mov	r2, r6
 801b002:	463b      	mov	r3, r7
 801b004:	4680      	mov	r8, r0
 801b006:	4689      	mov	r9, r1
 801b008:	f7e5 f8c8 	bl	800019c <__aeabi_dsub>
 801b00c:	4602      	mov	r2, r0
 801b00e:	460b      	mov	r3, r1
 801b010:	4620      	mov	r0, r4
 801b012:	4629      	mov	r1, r5
 801b014:	f7e5 f8c2 	bl	800019c <__aeabi_dsub>
 801b018:	4642      	mov	r2, r8
 801b01a:	4606      	mov	r6, r0
 801b01c:	460f      	mov	r7, r1
 801b01e:	464b      	mov	r3, r9
 801b020:	4640      	mov	r0, r8
 801b022:	4649      	mov	r1, r9
 801b024:	f7e5 fa72 	bl	800050c <__aeabi_dmul>
 801b028:	a35b      	add	r3, pc, #364	; (adr r3, 801b198 <__ieee754_pow+0x9d0>)
 801b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b02e:	4604      	mov	r4, r0
 801b030:	460d      	mov	r5, r1
 801b032:	f7e5 fa6b 	bl	800050c <__aeabi_dmul>
 801b036:	a35a      	add	r3, pc, #360	; (adr r3, 801b1a0 <__ieee754_pow+0x9d8>)
 801b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b03c:	f7e5 f8ae 	bl	800019c <__aeabi_dsub>
 801b040:	4622      	mov	r2, r4
 801b042:	462b      	mov	r3, r5
 801b044:	f7e5 fa62 	bl	800050c <__aeabi_dmul>
 801b048:	a357      	add	r3, pc, #348	; (adr r3, 801b1a8 <__ieee754_pow+0x9e0>)
 801b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b04e:	f7e5 f8a7 	bl	80001a0 <__adddf3>
 801b052:	4622      	mov	r2, r4
 801b054:	462b      	mov	r3, r5
 801b056:	f7e5 fa59 	bl	800050c <__aeabi_dmul>
 801b05a:	a355      	add	r3, pc, #340	; (adr r3, 801b1b0 <__ieee754_pow+0x9e8>)
 801b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b060:	f7e5 f89c 	bl	800019c <__aeabi_dsub>
 801b064:	4622      	mov	r2, r4
 801b066:	462b      	mov	r3, r5
 801b068:	f7e5 fa50 	bl	800050c <__aeabi_dmul>
 801b06c:	a352      	add	r3, pc, #328	; (adr r3, 801b1b8 <__ieee754_pow+0x9f0>)
 801b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b072:	f7e5 f895 	bl	80001a0 <__adddf3>
 801b076:	4622      	mov	r2, r4
 801b078:	462b      	mov	r3, r5
 801b07a:	f7e5 fa47 	bl	800050c <__aeabi_dmul>
 801b07e:	4602      	mov	r2, r0
 801b080:	460b      	mov	r3, r1
 801b082:	4640      	mov	r0, r8
 801b084:	4649      	mov	r1, r9
 801b086:	f7e5 f889 	bl	800019c <__aeabi_dsub>
 801b08a:	4604      	mov	r4, r0
 801b08c:	460d      	mov	r5, r1
 801b08e:	4602      	mov	r2, r0
 801b090:	460b      	mov	r3, r1
 801b092:	4640      	mov	r0, r8
 801b094:	4649      	mov	r1, r9
 801b096:	f7e5 fa39 	bl	800050c <__aeabi_dmul>
 801b09a:	2200      	movs	r2, #0
 801b09c:	e9cd 0100 	strd	r0, r1, [sp]
 801b0a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	4629      	mov	r1, r5
 801b0a8:	f7e5 f878 	bl	800019c <__aeabi_dsub>
 801b0ac:	4602      	mov	r2, r0
 801b0ae:	460b      	mov	r3, r1
 801b0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b0b4:	f7e5 fb54 	bl	8000760 <__aeabi_ddiv>
 801b0b8:	4632      	mov	r2, r6
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	460d      	mov	r5, r1
 801b0be:	463b      	mov	r3, r7
 801b0c0:	4640      	mov	r0, r8
 801b0c2:	4649      	mov	r1, r9
 801b0c4:	f7e5 fa22 	bl	800050c <__aeabi_dmul>
 801b0c8:	4632      	mov	r2, r6
 801b0ca:	463b      	mov	r3, r7
 801b0cc:	f7e5 f868 	bl	80001a0 <__adddf3>
 801b0d0:	4602      	mov	r2, r0
 801b0d2:	460b      	mov	r3, r1
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	4629      	mov	r1, r5
 801b0d8:	f7e5 f860 	bl	800019c <__aeabi_dsub>
 801b0dc:	4642      	mov	r2, r8
 801b0de:	464b      	mov	r3, r9
 801b0e0:	f7e5 f85c 	bl	800019c <__aeabi_dsub>
 801b0e4:	4602      	mov	r2, r0
 801b0e6:	460b      	mov	r3, r1
 801b0e8:	2000      	movs	r0, #0
 801b0ea:	4939      	ldr	r1, [pc, #228]	; (801b1d0 <__ieee754_pow+0xa08>)
 801b0ec:	f7e5 f856 	bl	800019c <__aeabi_dsub>
 801b0f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801b0f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	da2f      	bge.n	801b15e <__ieee754_pow+0x996>
 801b0fe:	4650      	mov	r0, sl
 801b100:	ec43 2b10 	vmov	d0, r2, r3
 801b104:	f000 f9c0 	bl	801b488 <scalbn>
 801b108:	ec51 0b10 	vmov	r0, r1, d0
 801b10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b110:	f7ff bbf1 	b.w	801a8f6 <__ieee754_pow+0x12e>
 801b114:	4b2f      	ldr	r3, [pc, #188]	; (801b1d4 <__ieee754_pow+0xa0c>)
 801b116:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b11a:	429e      	cmp	r6, r3
 801b11c:	f77f af0c 	ble.w	801af38 <__ieee754_pow+0x770>
 801b120:	4b2d      	ldr	r3, [pc, #180]	; (801b1d8 <__ieee754_pow+0xa10>)
 801b122:	440b      	add	r3, r1
 801b124:	4303      	orrs	r3, r0
 801b126:	d00b      	beq.n	801b140 <__ieee754_pow+0x978>
 801b128:	a325      	add	r3, pc, #148	; (adr r3, 801b1c0 <__ieee754_pow+0x9f8>)
 801b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b132:	f7e5 f9eb 	bl	800050c <__aeabi_dmul>
 801b136:	a322      	add	r3, pc, #136	; (adr r3, 801b1c0 <__ieee754_pow+0x9f8>)
 801b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13c:	f7ff bbdb 	b.w	801a8f6 <__ieee754_pow+0x12e>
 801b140:	4622      	mov	r2, r4
 801b142:	462b      	mov	r3, r5
 801b144:	f7e5 f82a 	bl	800019c <__aeabi_dsub>
 801b148:	4642      	mov	r2, r8
 801b14a:	464b      	mov	r3, r9
 801b14c:	f7e5 fc64 	bl	8000a18 <__aeabi_dcmpge>
 801b150:	2800      	cmp	r0, #0
 801b152:	f43f aef1 	beq.w	801af38 <__ieee754_pow+0x770>
 801b156:	e7e7      	b.n	801b128 <__ieee754_pow+0x960>
 801b158:	f04f 0a00 	mov.w	sl, #0
 801b15c:	e718      	b.n	801af90 <__ieee754_pow+0x7c8>
 801b15e:	4621      	mov	r1, r4
 801b160:	e7d4      	b.n	801b10c <__ieee754_pow+0x944>
 801b162:	2000      	movs	r0, #0
 801b164:	491a      	ldr	r1, [pc, #104]	; (801b1d0 <__ieee754_pow+0xa08>)
 801b166:	f7ff bb8f 	b.w	801a888 <__ieee754_pow+0xc0>
 801b16a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b16e:	f7ff bb8b 	b.w	801a888 <__ieee754_pow+0xc0>
 801b172:	4630      	mov	r0, r6
 801b174:	4639      	mov	r1, r7
 801b176:	f7ff bb87 	b.w	801a888 <__ieee754_pow+0xc0>
 801b17a:	4693      	mov	fp, r2
 801b17c:	f7ff bb98 	b.w	801a8b0 <__ieee754_pow+0xe8>
 801b180:	00000000 	.word	0x00000000
 801b184:	3fe62e43 	.word	0x3fe62e43
 801b188:	fefa39ef 	.word	0xfefa39ef
 801b18c:	3fe62e42 	.word	0x3fe62e42
 801b190:	0ca86c39 	.word	0x0ca86c39
 801b194:	be205c61 	.word	0xbe205c61
 801b198:	72bea4d0 	.word	0x72bea4d0
 801b19c:	3e663769 	.word	0x3e663769
 801b1a0:	c5d26bf1 	.word	0xc5d26bf1
 801b1a4:	3ebbbd41 	.word	0x3ebbbd41
 801b1a8:	af25de2c 	.word	0xaf25de2c
 801b1ac:	3f11566a 	.word	0x3f11566a
 801b1b0:	16bebd93 	.word	0x16bebd93
 801b1b4:	3f66c16c 	.word	0x3f66c16c
 801b1b8:	5555553e 	.word	0x5555553e
 801b1bc:	3fc55555 	.word	0x3fc55555
 801b1c0:	c2f8f359 	.word	0xc2f8f359
 801b1c4:	01a56e1f 	.word	0x01a56e1f
 801b1c8:	3fe00000 	.word	0x3fe00000
 801b1cc:	000fffff 	.word	0x000fffff
 801b1d0:	3ff00000 	.word	0x3ff00000
 801b1d4:	4090cbff 	.word	0x4090cbff
 801b1d8:	3f6f3400 	.word	0x3f6f3400
 801b1dc:	652b82fe 	.word	0x652b82fe
 801b1e0:	3c971547 	.word	0x3c971547

0801b1e4 <__ieee754_sqrt>:
 801b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1e8:	4955      	ldr	r1, [pc, #340]	; (801b340 <__ieee754_sqrt+0x15c>)
 801b1ea:	ec55 4b10 	vmov	r4, r5, d0
 801b1ee:	43a9      	bics	r1, r5
 801b1f0:	462b      	mov	r3, r5
 801b1f2:	462a      	mov	r2, r5
 801b1f4:	d112      	bne.n	801b21c <__ieee754_sqrt+0x38>
 801b1f6:	ee10 2a10 	vmov	r2, s0
 801b1fa:	ee10 0a10 	vmov	r0, s0
 801b1fe:	4629      	mov	r1, r5
 801b200:	f7e5 f984 	bl	800050c <__aeabi_dmul>
 801b204:	4602      	mov	r2, r0
 801b206:	460b      	mov	r3, r1
 801b208:	4620      	mov	r0, r4
 801b20a:	4629      	mov	r1, r5
 801b20c:	f7e4 ffc8 	bl	80001a0 <__adddf3>
 801b210:	4604      	mov	r4, r0
 801b212:	460d      	mov	r5, r1
 801b214:	ec45 4b10 	vmov	d0, r4, r5
 801b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b21c:	2d00      	cmp	r5, #0
 801b21e:	ee10 0a10 	vmov	r0, s0
 801b222:	4621      	mov	r1, r4
 801b224:	dc0f      	bgt.n	801b246 <__ieee754_sqrt+0x62>
 801b226:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b22a:	4330      	orrs	r0, r6
 801b22c:	d0f2      	beq.n	801b214 <__ieee754_sqrt+0x30>
 801b22e:	b155      	cbz	r5, 801b246 <__ieee754_sqrt+0x62>
 801b230:	ee10 2a10 	vmov	r2, s0
 801b234:	4620      	mov	r0, r4
 801b236:	4629      	mov	r1, r5
 801b238:	f7e4 ffb0 	bl	800019c <__aeabi_dsub>
 801b23c:	4602      	mov	r2, r0
 801b23e:	460b      	mov	r3, r1
 801b240:	f7e5 fa8e 	bl	8000760 <__aeabi_ddiv>
 801b244:	e7e4      	b.n	801b210 <__ieee754_sqrt+0x2c>
 801b246:	151b      	asrs	r3, r3, #20
 801b248:	d073      	beq.n	801b332 <__ieee754_sqrt+0x14e>
 801b24a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b24e:	07dd      	lsls	r5, r3, #31
 801b250:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b254:	bf48      	it	mi
 801b256:	0fc8      	lsrmi	r0, r1, #31
 801b258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b25c:	bf44      	itt	mi
 801b25e:	0049      	lslmi	r1, r1, #1
 801b260:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b264:	2500      	movs	r5, #0
 801b266:	1058      	asrs	r0, r3, #1
 801b268:	0fcb      	lsrs	r3, r1, #31
 801b26a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b26e:	0049      	lsls	r1, r1, #1
 801b270:	2316      	movs	r3, #22
 801b272:	462c      	mov	r4, r5
 801b274:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b278:	19a7      	adds	r7, r4, r6
 801b27a:	4297      	cmp	r7, r2
 801b27c:	bfde      	ittt	le
 801b27e:	19bc      	addle	r4, r7, r6
 801b280:	1bd2      	suble	r2, r2, r7
 801b282:	19ad      	addle	r5, r5, r6
 801b284:	0fcf      	lsrs	r7, r1, #31
 801b286:	3b01      	subs	r3, #1
 801b288:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b28c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b290:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b294:	d1f0      	bne.n	801b278 <__ieee754_sqrt+0x94>
 801b296:	f04f 0c20 	mov.w	ip, #32
 801b29a:	469e      	mov	lr, r3
 801b29c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b2a0:	42a2      	cmp	r2, r4
 801b2a2:	eb06 070e 	add.w	r7, r6, lr
 801b2a6:	dc02      	bgt.n	801b2ae <__ieee754_sqrt+0xca>
 801b2a8:	d112      	bne.n	801b2d0 <__ieee754_sqrt+0xec>
 801b2aa:	428f      	cmp	r7, r1
 801b2ac:	d810      	bhi.n	801b2d0 <__ieee754_sqrt+0xec>
 801b2ae:	2f00      	cmp	r7, #0
 801b2b0:	eb07 0e06 	add.w	lr, r7, r6
 801b2b4:	da42      	bge.n	801b33c <__ieee754_sqrt+0x158>
 801b2b6:	f1be 0f00 	cmp.w	lr, #0
 801b2ba:	db3f      	blt.n	801b33c <__ieee754_sqrt+0x158>
 801b2bc:	f104 0801 	add.w	r8, r4, #1
 801b2c0:	1b12      	subs	r2, r2, r4
 801b2c2:	428f      	cmp	r7, r1
 801b2c4:	bf88      	it	hi
 801b2c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b2ca:	1bc9      	subs	r1, r1, r7
 801b2cc:	4433      	add	r3, r6
 801b2ce:	4644      	mov	r4, r8
 801b2d0:	0052      	lsls	r2, r2, #1
 801b2d2:	f1bc 0c01 	subs.w	ip, ip, #1
 801b2d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b2da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b2de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b2e2:	d1dd      	bne.n	801b2a0 <__ieee754_sqrt+0xbc>
 801b2e4:	430a      	orrs	r2, r1
 801b2e6:	d006      	beq.n	801b2f6 <__ieee754_sqrt+0x112>
 801b2e8:	1c5c      	adds	r4, r3, #1
 801b2ea:	bf13      	iteet	ne
 801b2ec:	3301      	addne	r3, #1
 801b2ee:	3501      	addeq	r5, #1
 801b2f0:	4663      	moveq	r3, ip
 801b2f2:	f023 0301 	bicne.w	r3, r3, #1
 801b2f6:	106a      	asrs	r2, r5, #1
 801b2f8:	085b      	lsrs	r3, r3, #1
 801b2fa:	07e9      	lsls	r1, r5, #31
 801b2fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b300:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b304:	bf48      	it	mi
 801b306:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b30a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b30e:	461c      	mov	r4, r3
 801b310:	e780      	b.n	801b214 <__ieee754_sqrt+0x30>
 801b312:	0aca      	lsrs	r2, r1, #11
 801b314:	3815      	subs	r0, #21
 801b316:	0549      	lsls	r1, r1, #21
 801b318:	2a00      	cmp	r2, #0
 801b31a:	d0fa      	beq.n	801b312 <__ieee754_sqrt+0x12e>
 801b31c:	02d6      	lsls	r6, r2, #11
 801b31e:	d50a      	bpl.n	801b336 <__ieee754_sqrt+0x152>
 801b320:	f1c3 0420 	rsb	r4, r3, #32
 801b324:	fa21 f404 	lsr.w	r4, r1, r4
 801b328:	1e5d      	subs	r5, r3, #1
 801b32a:	4099      	lsls	r1, r3
 801b32c:	4322      	orrs	r2, r4
 801b32e:	1b43      	subs	r3, r0, r5
 801b330:	e78b      	b.n	801b24a <__ieee754_sqrt+0x66>
 801b332:	4618      	mov	r0, r3
 801b334:	e7f0      	b.n	801b318 <__ieee754_sqrt+0x134>
 801b336:	0052      	lsls	r2, r2, #1
 801b338:	3301      	adds	r3, #1
 801b33a:	e7ef      	b.n	801b31c <__ieee754_sqrt+0x138>
 801b33c:	46a0      	mov	r8, r4
 801b33e:	e7bf      	b.n	801b2c0 <__ieee754_sqrt+0xdc>
 801b340:	7ff00000 	.word	0x7ff00000

0801b344 <__ieee754_sqrtf>:
 801b344:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b348:	4770      	bx	lr

0801b34a <fabs>:
 801b34a:	ec51 0b10 	vmov	r0, r1, d0
 801b34e:	ee10 2a10 	vmov	r2, s0
 801b352:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b356:	ec43 2b10 	vmov	d0, r2, r3
 801b35a:	4770      	bx	lr

0801b35c <finite>:
 801b35c:	ee10 3a90 	vmov	r3, s1
 801b360:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b364:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b368:	0fc0      	lsrs	r0, r0, #31
 801b36a:	4770      	bx	lr

0801b36c <matherr>:
 801b36c:	2000      	movs	r0, #0
 801b36e:	4770      	bx	lr

0801b370 <nan>:
 801b370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b378 <nan+0x8>
 801b374:	4770      	bx	lr
 801b376:	bf00      	nop
 801b378:	00000000 	.word	0x00000000
 801b37c:	7ff80000 	.word	0x7ff80000

0801b380 <rint>:
 801b380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b382:	ec51 0b10 	vmov	r0, r1, d0
 801b386:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b38a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b38e:	2e13      	cmp	r6, #19
 801b390:	460b      	mov	r3, r1
 801b392:	ee10 4a10 	vmov	r4, s0
 801b396:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b39a:	dc56      	bgt.n	801b44a <rint+0xca>
 801b39c:	2e00      	cmp	r6, #0
 801b39e:	da2b      	bge.n	801b3f8 <rint+0x78>
 801b3a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b3a4:	4302      	orrs	r2, r0
 801b3a6:	d023      	beq.n	801b3f0 <rint+0x70>
 801b3a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b3ac:	4302      	orrs	r2, r0
 801b3ae:	4254      	negs	r4, r2
 801b3b0:	4314      	orrs	r4, r2
 801b3b2:	0c4b      	lsrs	r3, r1, #17
 801b3b4:	0b24      	lsrs	r4, r4, #12
 801b3b6:	045b      	lsls	r3, r3, #17
 801b3b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b3bc:	ea44 0103 	orr.w	r1, r4, r3
 801b3c0:	460b      	mov	r3, r1
 801b3c2:	492f      	ldr	r1, [pc, #188]	; (801b480 <rint+0x100>)
 801b3c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b3c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b3cc:	4602      	mov	r2, r0
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	4630      	mov	r0, r6
 801b3d2:	f7e4 fee5 	bl	80001a0 <__adddf3>
 801b3d6:	e9cd 0100 	strd	r0, r1, [sp]
 801b3da:	463b      	mov	r3, r7
 801b3dc:	4632      	mov	r2, r6
 801b3de:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b3e2:	f7e4 fedb 	bl	800019c <__aeabi_dsub>
 801b3e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b3ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b3ee:	4639      	mov	r1, r7
 801b3f0:	ec41 0b10 	vmov	d0, r0, r1
 801b3f4:	b003      	add	sp, #12
 801b3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3f8:	4a22      	ldr	r2, [pc, #136]	; (801b484 <rint+0x104>)
 801b3fa:	4132      	asrs	r2, r6
 801b3fc:	ea01 0702 	and.w	r7, r1, r2
 801b400:	4307      	orrs	r7, r0
 801b402:	d0f5      	beq.n	801b3f0 <rint+0x70>
 801b404:	0852      	lsrs	r2, r2, #1
 801b406:	4011      	ands	r1, r2
 801b408:	430c      	orrs	r4, r1
 801b40a:	d00b      	beq.n	801b424 <rint+0xa4>
 801b40c:	ea23 0202 	bic.w	r2, r3, r2
 801b410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b414:	2e13      	cmp	r6, #19
 801b416:	fa43 f306 	asr.w	r3, r3, r6
 801b41a:	bf0c      	ite	eq
 801b41c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b420:	2400      	movne	r4, #0
 801b422:	4313      	orrs	r3, r2
 801b424:	4916      	ldr	r1, [pc, #88]	; (801b480 <rint+0x100>)
 801b426:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b42a:	4622      	mov	r2, r4
 801b42c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b430:	4620      	mov	r0, r4
 801b432:	4629      	mov	r1, r5
 801b434:	f7e4 feb4 	bl	80001a0 <__adddf3>
 801b438:	e9cd 0100 	strd	r0, r1, [sp]
 801b43c:	4622      	mov	r2, r4
 801b43e:	462b      	mov	r3, r5
 801b440:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b444:	f7e4 feaa 	bl	800019c <__aeabi_dsub>
 801b448:	e7d2      	b.n	801b3f0 <rint+0x70>
 801b44a:	2e33      	cmp	r6, #51	; 0x33
 801b44c:	dd07      	ble.n	801b45e <rint+0xde>
 801b44e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b452:	d1cd      	bne.n	801b3f0 <rint+0x70>
 801b454:	ee10 2a10 	vmov	r2, s0
 801b458:	f7e4 fea2 	bl	80001a0 <__adddf3>
 801b45c:	e7c8      	b.n	801b3f0 <rint+0x70>
 801b45e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b462:	f04f 32ff 	mov.w	r2, #4294967295
 801b466:	40f2      	lsrs	r2, r6
 801b468:	4210      	tst	r0, r2
 801b46a:	d0c1      	beq.n	801b3f0 <rint+0x70>
 801b46c:	0852      	lsrs	r2, r2, #1
 801b46e:	4210      	tst	r0, r2
 801b470:	bf1f      	itttt	ne
 801b472:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b476:	ea20 0202 	bicne.w	r2, r0, r2
 801b47a:	4134      	asrne	r4, r6
 801b47c:	4314      	orrne	r4, r2
 801b47e:	e7d1      	b.n	801b424 <rint+0xa4>
 801b480:	0801c858 	.word	0x0801c858
 801b484:	000fffff 	.word	0x000fffff

0801b488 <scalbn>:
 801b488:	b570      	push	{r4, r5, r6, lr}
 801b48a:	ec55 4b10 	vmov	r4, r5, d0
 801b48e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b492:	4606      	mov	r6, r0
 801b494:	462b      	mov	r3, r5
 801b496:	b9aa      	cbnz	r2, 801b4c4 <scalbn+0x3c>
 801b498:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b49c:	4323      	orrs	r3, r4
 801b49e:	d03b      	beq.n	801b518 <scalbn+0x90>
 801b4a0:	4b31      	ldr	r3, [pc, #196]	; (801b568 <scalbn+0xe0>)
 801b4a2:	4629      	mov	r1, r5
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	ee10 0a10 	vmov	r0, s0
 801b4aa:	f7e5 f82f 	bl	800050c <__aeabi_dmul>
 801b4ae:	4b2f      	ldr	r3, [pc, #188]	; (801b56c <scalbn+0xe4>)
 801b4b0:	429e      	cmp	r6, r3
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	460d      	mov	r5, r1
 801b4b6:	da12      	bge.n	801b4de <scalbn+0x56>
 801b4b8:	a327      	add	r3, pc, #156	; (adr r3, 801b558 <scalbn+0xd0>)
 801b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4be:	f7e5 f825 	bl	800050c <__aeabi_dmul>
 801b4c2:	e009      	b.n	801b4d8 <scalbn+0x50>
 801b4c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b4c8:	428a      	cmp	r2, r1
 801b4ca:	d10c      	bne.n	801b4e6 <scalbn+0x5e>
 801b4cc:	ee10 2a10 	vmov	r2, s0
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	4629      	mov	r1, r5
 801b4d4:	f7e4 fe64 	bl	80001a0 <__adddf3>
 801b4d8:	4604      	mov	r4, r0
 801b4da:	460d      	mov	r5, r1
 801b4dc:	e01c      	b.n	801b518 <scalbn+0x90>
 801b4de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b4e2:	460b      	mov	r3, r1
 801b4e4:	3a36      	subs	r2, #54	; 0x36
 801b4e6:	4432      	add	r2, r6
 801b4e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b4ec:	428a      	cmp	r2, r1
 801b4ee:	dd0b      	ble.n	801b508 <scalbn+0x80>
 801b4f0:	ec45 4b11 	vmov	d1, r4, r5
 801b4f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b560 <scalbn+0xd8>
 801b4f8:	f000 f83c 	bl	801b574 <copysign>
 801b4fc:	a318      	add	r3, pc, #96	; (adr r3, 801b560 <scalbn+0xd8>)
 801b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b502:	ec51 0b10 	vmov	r0, r1, d0
 801b506:	e7da      	b.n	801b4be <scalbn+0x36>
 801b508:	2a00      	cmp	r2, #0
 801b50a:	dd08      	ble.n	801b51e <scalbn+0x96>
 801b50c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b510:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b514:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b518:	ec45 4b10 	vmov	d0, r4, r5
 801b51c:	bd70      	pop	{r4, r5, r6, pc}
 801b51e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b522:	da0d      	bge.n	801b540 <scalbn+0xb8>
 801b524:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b528:	429e      	cmp	r6, r3
 801b52a:	ec45 4b11 	vmov	d1, r4, r5
 801b52e:	dce1      	bgt.n	801b4f4 <scalbn+0x6c>
 801b530:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b558 <scalbn+0xd0>
 801b534:	f000 f81e 	bl	801b574 <copysign>
 801b538:	a307      	add	r3, pc, #28	; (adr r3, 801b558 <scalbn+0xd0>)
 801b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53e:	e7e0      	b.n	801b502 <scalbn+0x7a>
 801b540:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b544:	3236      	adds	r2, #54	; 0x36
 801b546:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b54a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b54e:	4620      	mov	r0, r4
 801b550:	4629      	mov	r1, r5
 801b552:	2200      	movs	r2, #0
 801b554:	4b06      	ldr	r3, [pc, #24]	; (801b570 <scalbn+0xe8>)
 801b556:	e7b2      	b.n	801b4be <scalbn+0x36>
 801b558:	c2f8f359 	.word	0xc2f8f359
 801b55c:	01a56e1f 	.word	0x01a56e1f
 801b560:	8800759c 	.word	0x8800759c
 801b564:	7e37e43c 	.word	0x7e37e43c
 801b568:	43500000 	.word	0x43500000
 801b56c:	ffff3cb0 	.word	0xffff3cb0
 801b570:	3c900000 	.word	0x3c900000

0801b574 <copysign>:
 801b574:	ec51 0b10 	vmov	r0, r1, d0
 801b578:	ee11 0a90 	vmov	r0, s3
 801b57c:	ee10 2a10 	vmov	r2, s0
 801b580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b584:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b588:	ea41 0300 	orr.w	r3, r1, r0
 801b58c:	ec43 2b10 	vmov	d0, r2, r3
 801b590:	4770      	bx	lr
	...

0801b594 <_init>:
 801b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b596:	bf00      	nop
 801b598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b59a:	bc08      	pop	{r3}
 801b59c:	469e      	mov	lr, r3
 801b59e:	4770      	bx	lr

0801b5a0 <_fini>:
 801b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5a2:	bf00      	nop
 801b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5a6:	bc08      	pop	{r3}
 801b5a8:	469e      	mov	lr, r3
 801b5aa:	4770      	bx	lr
